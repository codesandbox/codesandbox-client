{"contents":{"/node_modules/@dnd-kit/sortable/dist/sortable.esm.js":{"content":"import React, { useMemo, useRef, useEffect, useState, useContext } from 'react';\nimport { useDndContext, getBoundingClientRect, useDroppable, useDraggable, getViewRect, closestCorners, getScrollableAncestors, KeyboardCode } from '@dnd-kit/core';\nimport { useUniqueId, useIsomorphicLayoutEffect, CSS, useCombinedRefs } from '@dnd-kit/utilities';\n\n/**\r\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\r\n */\nfunction arrayMove(array, from, to) {\n  const newArray = array.slice();\n  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\n  return newArray;\n}\n\nfunction getSortedRects(items, layoutRects) {\n  return items.reduce((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n\nfunction isValidIndex(index) {\n  return index !== null && index >= 0;\n}\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1\n};\nconst horizontalListSortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index\n}) => {\n  var _layoutRects$activeIn;\n\n  const activeNodeRect = (_layoutRects$activeIn = layoutRects[activeIndex]) != null ? _layoutRects$activeIn : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x: activeIndex < overIndex ? newIndexRect.offsetLeft + newIndexRect.width - (activeNodeRect.offsetLeft + activeNodeRect.width) : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale\n  };\n};\n\nfunction getItemGap(layoutRects, index, activeIndex) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!previousRect && !nextRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width) : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width) : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n\nconst rectSortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\nconst rectSwappingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\n// To-do: We should be calculating scale transformation\nconst defaultScale$1 = {\n  scaleX: 1,\n  scaleY: 1\n};\nconst verticalListSortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex\n}) => {\n  var _layoutRects$activeIn;\n\n  const activeNodeRect = (_layoutRects$activeIn = layoutRects[activeIndex]) != null ? _layoutRects$activeIn : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y: activeIndex < overIndex ? overIndexRect.offsetTop + overIndexRect.height - (activeNodeRect.offsetTop + activeNodeRect.height) : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale$1\n    };\n  }\n\n  const itemGap = getItemGap$1(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale$1\n  };\n};\n\nfunction getItemGap$1(layoutRects, index, activeIndex) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height) : nextRect ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height) : 0;\n  }\n\n  return nextRect ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height) : previousRect ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height) : 0;\n}\n\nconst ID_PREFIX = 'Sortable';\nconst Context = /*#__PURE__*/React.createContext({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasSorting: {\n    current: false\n  }\n});\nfunction SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy\n}) {\n  const {\n    active,\n    overlayNode,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(overlayNode.rect !== null);\n  const items = useMemo(() => userDefinedItems.map(item => typeof item === 'string' ? item : item.id), [userDefinedItems]);\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const isSorting = activeIndex !== -1;\n  const wasSorting = useRef(isSorting);\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      wasSorting.current = isSorting;\n    });\n  }, [isSorting]);\n  const contextValue = useMemo(() => ({\n    activeIndex,\n    containerId,\n    disableTransforms,\n    items,\n    overIndex,\n    useDragOverlay,\n    sortedRects,\n    strategy,\n    wasSorting\n  }), [activeIndex, containerId, disableTransforms, items, overIndex, sortedRects, useDragOverlay, strategy, wasSorting]);\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nfunction isEqual(arr1, arr2) {\n  return arr1.join() === arr2.join();\n}\n\nconst defaultAnimateLayoutChanges = ({\n  isSorting,\n  index,\n  newIndex,\n  transition\n}) => {\n  if (!transition) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index;\n};\nconst defaultTransition = {\n  duration: 200,\n  easing: 'ease'\n};\nconst transitionProperty = 'transform';\nconst disabledTransition = /*#__PURE__*/CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear'\n});\nconst defaultAttributes = {\n  roleDescription: 'sortable'\n};\n\n/*\r\n * When the index of an item changes while sorting,\r\n * we need to temporarily disable the transforms\r\n */\n\nfunction useDerivedTransform({\n  rect,\n  disabled,\n  index,\n  node\n}) {\n  const [derivedTransform, setDerivedtransform] = useState(null);\n  const prevIndex = useRef(index);\n  useEffect(() => {\n    if (!disabled && index !== prevIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== prevIndex.current) {\n      prevIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n  return derivedTransform;\n}\n\nfunction useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition\n}) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasSorting\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(() => ({\n    sortable: {\n      containerId,\n      index,\n      items\n    },\n    ...customData\n  }), [containerId, customData, index, items]);\n  const {\n    rect,\n    node,\n    setNodeRef: setDroppableNodeRef\n  } = useDroppable({\n    id,\n    data\n  });\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform\n  } = useDraggable({\n    id,\n    data,\n    attributes: { ...defaultAttributes,\n      ...userDefinedAttributes\n    },\n    disabled\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem = isSorting && wasSorting.current && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy != null ? localStrategy : globalStrategy;\n  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({\n    layoutRects: sortedRects,\n    activeNodeRect,\n    activeIndex,\n    overIndex,\n    index\n  }) : null;\n  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? arrayMove(items, activeIndex, overIndex).indexOf(id) : index;\n  const prevNewIndex = useRef(newIndex);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    transition,\n    wasSorting: wasSorting.current\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect\n  });\n  useEffect(() => {\n    if (isSorting) {\n      prevNewIndex.current = newIndex;\n    }\n  }, [isSorting, newIndex]);\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform != null ? derivedTransform : finalTransform,\n    transition: getTransition()\n  };\n\n  function getTransition() {\n    if (derivedTransform) {\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return null;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({ ...transition,\n        property: transitionProperty\n      });\n    }\n\n    return null;\n  }\n}\n\nconst directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];\nconst sortableKeyboardCoordinates = (event, {\n  context: {\n    droppableContainers,\n    translatedRect,\n    scrollableAncestors\n  }\n}) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!translatedRect) {\n      return;\n    }\n\n    const layoutRects = [];\n    Object.entries(droppableContainers).forEach(([id, container]) => {\n      if (container == null ? void 0 : container.disabled) {\n        return;\n      }\n\n      const node = container == null ? void 0 : container.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            layoutRects.push([id, rect]);\n          }\n\n          break;\n\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            layoutRects.push([id, rect]);\n          }\n\n          break;\n\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            layoutRects.push([id, rect]);\n          }\n\n          break;\n\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            layoutRects.push([id, rect]);\n          }\n\n          break;\n      }\n    });\n    const closestId = closestCorners(layoutRects, translatedRect);\n\n    if (closestId) {\n      var _droppableContainers$;\n\n      const newNode = (_droppableContainers$ = droppableContainers[closestId]) == null ? void 0 : _droppableContainers$.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index) => scrollableAncestors[index] !== element);\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors ? {\n          x: 0,\n          y: 0\n        } : {\n          x: translatedRect.width - newRect.width,\n          y: translatedRect.height - newRect.height\n        };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y\n        };\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nexport { SortableContext, arrayMove, defaultAnimateLayoutChanges, horizontalListSortingStrategy, rectSortingStrategy, rectSwappingStrategy, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy };\n//# sourceMappingURL=sortable.esm.js.map\n","isModule":true,"requires":["react","@dnd-kit/core","@dnd-kit/utilities"]},"/node_modules/@dnd-kit/core/dist/core.esm.js":{"content":"import React, { createContext, useContext, useRef, useEffect, useMemo, useCallback, useState, memo, useReducer } from 'react';\nimport { createPortal } from 'react-dom';\nimport { canUseDOM, add, useUniqueId, useInterval, useLazyMemo, useIsomorphicLayoutEffect, subtract, useNodeRef, CSS } from '@dnd-kit/utilities';\nimport { useAnnouncement, HiddenText, LiveRegion } from '@dnd-kit/accessibility';\n\nconst screenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `\n};\nconst defaultAnnouncements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  }\n\n};\n\nvar Action;\n\n(function (Action) {\n  Action[\"DragStart\"] = \"dragStart\";\n  Action[\"DragMove\"] = \"dragMove\";\n  Action[\"DragEnd\"] = \"dragEnd\";\n  Action[\"DragCancel\"] = \"dragCancel\";\n  Action[\"DragOver\"] = \"dragOver\";\n  Action[\"RegisterDroppable\"] = \"registerDroppable\";\n  Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n  Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\n\nconst getMaxValueIndex = array => getValueIndex(array, (value, tracked) => value > tracked);\nconst getMinValueIndex = array => getValueIndex(array, (value, tracked) => value < tracked);\n/**\r\n * Returns the index of the smallest number in an array of numbers\r\n */\n\nfunction getValueIndex(array, comparator) {\n  if (array.length === 0) {\n    return -1;\n  }\n\n  let tracked = array[0];\n  let index = 0;\n\n  for (var i = 1; i < array.length; i++) {\n    if (comparator(array[i], tracked)) {\n      index = i;\n      tracked = array[i];\n    }\n  }\n\n  return index;\n}\n\nfunction noop(..._args) {}\n\nfunction omit(id, elements) {\n  const {\n    [id]: _,\n    ...other\n  } = elements;\n  return other;\n}\n\nconst Context = /*#__PURE__*/createContext({\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  activeNodeClientRect: null,\n  activators: [],\n  ariaDescribedById: {\n    draggable: ''\n  },\n  containerNodeRect: null,\n  dispatch: noop,\n  draggableNodes: {},\n  droppableRects: /*#__PURE__*/new Map(),\n  droppableContainers: {},\n  over: null,\n  overlayNode: {\n    nodeRef: {\n      current: null\n    },\n    rect: null,\n    setRef: noop\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  recomputeLayouts: noop,\n  windowRect: null,\n  willRecomputeLayouts: false\n});\n\nconst defaultCoordinates = /*#__PURE__*/Object.freeze({\n  x: 0,\n  y: 0\n});\n\n/**\r\n * Returns the distance between two points\r\n */\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction isTouchEvent(event) {\n  var _window;\n\n  return ((_window = window) == null ? void 0 : _window.TouchEvent) && event instanceof TouchEvent;\n}\n\nfunction isMouseEvent(event) {\n  var _window;\n\n  return ((_window = window) == null ? void 0 : _window.MouseEvent) && event instanceof MouseEvent || event.type.includes('mouse');\n}\n\n/**\r\n * Returns the normalized x and y coordinates for mouse and touch events.\r\n */\n\nfunction getEventCoordinates(event) {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      const {\n        clientX: x,\n        clientY: y\n      } = event.touches[0];\n      return {\n        x,\n        y\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      const {\n        clientX: x,\n        clientY: y\n      } = event.changedTouches[0];\n      return {\n        x,\n        y\n      };\n    }\n  }\n\n  if (isMouseEvent(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nfunction getRelativeTransformOrigin(event, rect) {\n  if (event instanceof KeyboardEvent) {\n    return '0 0';\n  }\n\n  const eventCoordinates = getEventCoordinates(event);\n  const transformOrigin = {\n    x: (eventCoordinates.x - rect.left) / rect.width * 100,\n    y: (eventCoordinates.y - rect.top) / rect.height * 100\n  };\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */\n\nfunction centerOfRectangle(rect, left = rect.offsetLeft, top = rect.offsetTop) {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5\n  };\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the center of a given\r\n * rectangle.\r\n */\n\n\nconst closestCenter = (rects, rect) => {\n  const centerRect = centerOfRectangle(rect, rect.left, rect.top);\n  const distances = rects.map(([_, rect]) => distanceBetween(centerOfRectangle(rect), centerRect));\n  const minValueIndex = getMinValueIndex(distances);\n  return rects[minValueIndex] ? rects[minValueIndex][0] : null;\n};\n\nfunction adjustScale(transform, rect1, rect2) {\n  return { ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n  };\n}\n\nfunction getRectDelta(rect1, rect2) {\n  return rect1 && rect2 ? {\n    x: rect1.left - rect2.left,\n    y: rect1.top - rect2.top\n  } : defaultCoordinates;\n}\n\nfunction createRectAdjustmentFn(modifier) {\n  return function adjustViewRect(viewRect, ...adjustments) {\n    return adjustments.reduce((acc, adjustment) => ({ ...acc,\n      top: acc.top + modifier * adjustment.y,\n      bottom: acc.bottom + modifier * adjustment.y,\n      left: acc.left + modifier * adjustment.x,\n      right: acc.right + modifier * adjustment.x,\n      offsetLeft: acc.offsetLeft + modifier * adjustment.x,\n      offsetTop: acc.offsetTop + modifier * adjustment.y\n    }), { ...viewRect\n    });\n  };\n}\nconst getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);\n\nfunction isScrollable(node) {\n  const computedStyle = window.getComputedStyle(node);\n  const overflowRegex = /(auto|scroll)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.find(property => {\n    const value = computedStyle[property];\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  }) != null;\n}\n\nfunction getScrollableAncestors(element) {\n  const scrollParents = [];\n\n  function findScrollableAncestors(node) {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (node instanceof Document && node.scrollingElement != null) {\n      scrollParents.push(node.scrollingElement);\n      return scrollParents;\n    }\n\n    if (!(node instanceof HTMLElement) || node instanceof SVGElement) {\n      return scrollParents;\n    }\n\n    if (isScrollable(node)) {\n      scrollParents.push(node);\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  return element ? findScrollableAncestors(element.parentNode) : scrollParents;\n}\n\nfunction getScrollableElement(element) {\n  if (!canUseDOM) {\n    return null;\n  }\n\n  if (element === document.scrollingElement || element instanceof Document) {\n    return window;\n  }\n\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  return null;\n}\n\nfunction getScrollCoordinates(element) {\n  if (element instanceof Window) {\n    return {\n      x: element.scrollX,\n      y: element.scrollY\n    };\n  }\n\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop\n  };\n}\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n  Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\n\nfunction getScrollPosition(scrollingContainer) {\n  const minScroll = {\n    x: 0,\n    y: 0\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight\n  };\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll\n  };\n}\n\nfunction isDocumentScrollingElement(element) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2\n};\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, {\n  top,\n  left,\n  right,\n  bottom\n}, acceleration = 10, thresholdPercentage = defaultThreshold) {\n  const {\n    clientHeight,\n    clientWidth\n  } = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer) ? {\n    top: 0,\n    left: 0,\n    right: clientWidth,\n    bottom: clientHeight,\n    width: clientWidth,\n    height: clientHeight\n  } : scrollContainerRect;\n  const {\n    isTop,\n    isBottom,\n    isLeft,\n    isRight\n  } = getScrollPosition(scrollContainer);\n  const direction = {\n    x: 0,\n    y: 0\n  };\n  const speed = {\n    x: 0,\n    y: 0\n  };\n  const threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.top + threshold.height - top) / threshold.height);\n  } else if (!isBottom && bottom >= finalScrollContainerRect.bottom - threshold.height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y = acceleration * Math.abs((finalScrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.right - threshold.width - right) / threshold.width);\n  } else if (!isLeft && left <= finalScrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x = acceleration * Math.abs((finalScrollContainerRect.left + threshold.width - left) / threshold.width);\n  }\n\n  return {\n    direction,\n    speed\n  };\n}\n\nfunction getScrollElementRect(element) {\n  if (element === document.scrollingElement) {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight\n    };\n  }\n\n  const {\n    top,\n    left,\n    right,\n    bottom\n  } = element.getBoundingClientRect();\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\n\nfunction getScrollOffsets(scrollableAncestors) {\n  return scrollableAncestors.reduce((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nfunction getEdgeOffset(node, parent, offset = defaultCoordinates) {\n  if (!node || !(node instanceof HTMLElement)) {\n    return offset;\n  }\n\n  const nodeOffset = {\n    x: offset.x + node.offsetLeft,\n    y: offset.y + node.offsetTop\n  };\n\n  if (node.offsetParent === parent) {\n    return nodeOffset;\n  }\n\n  return getEdgeOffset(node.offsetParent, parent, nodeOffset);\n}\n\nfunction getElementLayout(element) {\n  const {\n    offsetWidth: width,\n    offsetHeight: height\n  } = element;\n  const {\n    x: offsetLeft,\n    y: offsetTop\n  } = getEdgeOffset(element, null);\n  return {\n    width,\n    height,\n    offsetTop,\n    offsetLeft\n  };\n}\nfunction getBoundingClientRect(element) {\n  if (element instanceof Window) {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    return {\n      top: 0,\n      left: 0,\n      right: width,\n      bottom: height,\n      width,\n      height,\n      offsetTop: 0,\n      offsetLeft: 0\n    };\n  }\n\n  const {\n    offsetTop,\n    offsetLeft\n  } = getElementLayout(element);\n  const {\n    width,\n    height,\n    top,\n    bottom,\n    left,\n    right\n  } = element.getBoundingClientRect();\n  return {\n    width,\n    height,\n    top,\n    bottom,\n    right,\n    left,\n    offsetTop,\n    offsetLeft\n  };\n}\nfunction getViewRect(element) {\n  const {\n    width,\n    height,\n    offsetTop,\n    offsetLeft\n  } = getElementLayout(element);\n  const scrollableAncestors = getScrollableAncestors(element);\n  const scrollOffsets = getScrollOffsets(scrollableAncestors);\n  const top = offsetTop - scrollOffsets.y;\n  const left = offsetLeft - scrollOffsets.x;\n  return {\n    width,\n    height,\n    top,\n    bottom: top + height,\n    right: left + width,\n    left,\n    offsetTop,\n    offsetLeft\n  };\n}\n\nfunction isViewRect(entry) {\n  return 'top' in entry;\n}\n\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */\n\nfunction cornersOfRectangle(rect, left = rect.offsetLeft, top = rect.offsetTop) {\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: left + rect.width,\n    y: top\n  }, {\n    x: left,\n    y: top + rect.height\n  }, {\n    x: left + rect.width,\n    y: top + rect.height\n  }];\n}\n/**\r\n * Returns the closest rectangle from an array of rectangles to the corners of\r\n * another rectangle.\r\n */\n\n\nconst closestCorners = (entries, target) => {\n  const corners = cornersOfRectangle(target, target.left, target.top);\n  const distances = entries.map(([_, entry]) => {\n    const entryCorners = cornersOfRectangle(entry, isViewRect(entry) ? entry.left : undefined, isViewRect(entry) ? entry.top : undefined);\n    const distances = corners.reduce((accumulator, corner, index) => {\n      return accumulator + distanceBetween(entryCorners[index], corner);\n    }, 0);\n    return Number((distances / 4).toFixed(4));\n  });\n  const minValueIndex = getMinValueIndex(distances);\n  return entries[minValueIndex] ? entries[minValueIndex][0] : null;\n};\n\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */\n\nfunction getIntersectionRatio(entry, target) {\n  const top = Math.max(target.top, entry.offsetTop);\n  const left = Math.max(target.left, entry.offsetLeft);\n  const right = Math.min(target.left + target.width, entry.offsetLeft + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.offsetTop + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n\n\n  return 0;\n}\n/**\r\n * Returns the rectangle that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */\n\n\nconst rectIntersection = (entries, target) => {\n  const intersections = entries.map(([_, entry]) => getIntersectionRatio(entry, target));\n  const maxValueIndex = getMaxValueIndex(intersections);\n\n  if (intersections[maxValueIndex] <= 0) {\n    return null;\n  }\n\n  return entries[maxValueIndex] ? entries[maxValueIndex][0] : null;\n};\n\nfunction getOwnerDocument(target) {\n  return target instanceof HTMLElement ? target.ownerDocument : document;\n}\n\nfunction getWindow(target) {\n  var _getOwnerDocument$def;\n\n  return (_getOwnerDocument$def = getOwnerDocument(target).defaultView) != null ? _getOwnerDocument$def : window;\n}\n\nfunction getInitialState() {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {\n        x: 0,\n        y: 0\n      },\n      nodes: {},\n      translate: {\n        x: 0,\n        y: 0\n      }\n    },\n    droppable: {\n      containers: {}\n    }\n  };\n}\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Action.DragStart:\n      return { ...state,\n        draggable: { ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active\n        }\n      };\n\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return { ...state,\n        draggable: { ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y\n          }\n        }\n      };\n\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return { ...state,\n        draggable: { ...state.draggable,\n          active: null,\n          initialCoordinates: {\n            x: 0,\n            y: 0\n          },\n          translate: {\n            x: 0,\n            y: 0\n          }\n        }\n      };\n\n    case Action.RegisterDroppable:\n      {\n        const {\n          element\n        } = action;\n        const {\n          id\n        } = element;\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers: { ...state.droppable.containers,\n              [id]: element\n            }\n          }\n        };\n      }\n\n    case Action.SetDroppableDisabled:\n      {\n        const {\n          id,\n          disabled\n        } = action;\n        const element = state.droppable.containers[id];\n\n        if (!element) {\n          return state;\n        }\n\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers: { ...state.droppable.containers,\n              [id]: { ...element,\n                disabled\n              }\n            }\n          }\n        };\n      }\n\n    case Action.UnregisterDroppable:\n      {\n        const {\n          id\n        } = action;\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers: omit(id, state.droppable.containers)\n          }\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nconst DndMonitorContext = /*#__PURE__*/createContext({\n  type: null,\n  event: null\n});\nfunction useDndMonitor({\n  onDragStart,\n  onDragMove,\n  onDragOver,\n  onDragEnd,\n  onDragCancel\n}) {\n  const monitorState = useContext(DndMonitorContext);\n  const previousMonitorState = useRef(monitorState);\n  useEffect(() => {\n    if (monitorState !== previousMonitorState.current) {\n      const {\n        type,\n        event\n      } = monitorState;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart == null ? void 0 : onDragStart(event);\n          break;\n\n        case Action.DragMove:\n          onDragMove == null ? void 0 : onDragMove(event);\n          break;\n\n        case Action.DragOver:\n          onDragOver == null ? void 0 : onDragOver(event);\n          break;\n\n        case Action.DragCancel:\n          onDragCancel == null ? void 0 : onDragCancel(event);\n          break;\n\n        case Action.DragEnd:\n          onDragEnd == null ? void 0 : onDragEnd(event);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [monitorState, onDragStart, onDragMove, onDragOver, onDragEnd, onDragCancel]);\n}\n\nfunction Accessibility({\n  announcements = defaultAnnouncements,\n  hiddenTextDescribedById,\n  screenReaderInstructions\n}) {\n  const {\n    announce,\n    announcement\n  } = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n  useDndMonitor(useMemo(() => ({\n    onDragStart({\n      active\n    }) {\n      announce(announcements.onDragStart(active.id));\n    },\n\n    onDragOver({\n      active,\n      over\n    }) {\n      announce(announcements.onDragOver(active.id, over == null ? void 0 : over.id));\n    },\n\n    onDragEnd({\n      active,\n      over\n    }) {\n      announce(announcements.onDragEnd(active.id, over == null ? void 0 : over.id));\n    },\n\n    onDragCancel({\n      active\n    }) {\n      announce(announcements.onDragCancel(active.id));\n    }\n\n  }), [announce, announcements]));\n  return canUseDOM ? createPortal(React.createElement(React.Fragment, null, React.createElement(HiddenText, {\n    id: hiddenTextDescribedById,\n    value: screenReaderInstructions.draggable\n  }), React.createElement(LiveRegion, {\n    id: liveRegionId,\n    announcement: announcement\n  })), document.body) : null;\n}\n\nvar AutoScrollActivator;\n\n(function (AutoScrollActivator) {\n  AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n  AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\n\nvar TraversalOrder;\n\n(function (TraversalOrder) {\n  TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n  TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\n\nfunction useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  threshold\n}) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef({\n    x: 1,\n    y: 1\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates ? {\n          top: pointerCoordinates.y,\n          bottom: pointerCoordinates.y,\n          left: pointerCoordinates.x,\n          right: pointerCoordinates.x\n        } : null;\n\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollDirection = useRef(defaultCoordinates);\n  const scrollContainerRef = useRef(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);\n  useEffect(() => {\n    if (!enabled || !scrollableAncestors.length || !rect) {\n      clearAutoScrollInterval();\n      return;\n    }\n\n    for (const scrollContainer of sortedScrollableAncestors) {\n      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n        continue;\n      }\n\n      const index = scrollableAncestors.indexOf(scrollContainer);\n      const scrolllContainerRect = scrollableAncestorRects[index];\n\n      if (!scrolllContainerRect) {\n        continue;\n      }\n\n      const {\n        direction,\n        speed\n      } = getScrollDirectionAndSpeed(scrollContainer, scrolllContainerRect, rect, acceleration, threshold);\n\n      if (speed.x > 0 || speed.y > 0) {\n        clearAutoScrollInterval();\n        scrollContainerRef.current = scrollContainer;\n        setAutoScrollInterval(autoScroll, interval);\n        scrollSpeed.current = speed;\n        scrollDirection.current = direction;\n        return;\n      }\n    }\n\n    scrollSpeed.current = {\n      x: 0,\n      y: 0\n    };\n    scrollDirection.current = {\n      x: 0,\n      y: 0\n    };\n    clearAutoScrollInterval();\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(rect), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(threshold)]);\n}\n\nfunction useCachedNode(draggableNodes, id) {\n  const draggableNode = id !== null ? draggableNodes[id] : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n  return useLazyMemo(cachedNode => {\n    var _ref;\n\n    if (id === null) {\n      return null;\n    } // In some cases, the draggable node can unmount while dragging\n    // This is the case for virtualized lists. In those situations,\n    // we fall back to the last known value for that node.\n\n\n    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n  }, [node, id]);\n}\n\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n  return useMemo(() => sensors.reduce((accumulator, sensor) => {\n    const {\n      sensor: Sensor\n    } = sensor;\n    const sensorActivators = Sensor.activators.map(activator => ({\n      eventName: activator.eventName,\n      handler: getSyntheticHandler(activator.handler, sensor)\n    }));\n    return [...accumulator, ...sensorActivators];\n  }, []), [sensors, getSyntheticHandler]);\n}\n\nfunction useData(data) {\n  const dataRef = useRef(data);\n  useIsomorphicLayoutEffect(() => {\n    if (dataRef.current !== data) {\n      dataRef.current = data;\n    }\n  }, [data]);\n  return dataRef;\n}\n\nvar LayoutMeasuringStrategy;\n\n(function (LayoutMeasuringStrategy) {\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"Always\"] = 0] = \"Always\";\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n  LayoutMeasuringStrategy[LayoutMeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(LayoutMeasuringStrategy || (LayoutMeasuringStrategy = {}));\n\nvar LayoutMeasuringFrequency;\n\n(function (LayoutMeasuringFrequency) {\n  LayoutMeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(LayoutMeasuringFrequency || (LayoutMeasuringFrequency = {}));\n\nconst defaultValue = /*#__PURE__*/new Map();\nfunction useLayoutMeasuring(containers, {\n  dragging,\n  dependencies,\n  config\n}) {\n  const [willRecomputeLayouts, setWillRecomputeLayouts] = useState(false);\n  const {\n    frequency,\n    strategy\n  } = getLayoutMeasuring(config);\n  const containersRef = useRef(containers);\n  const recomputeLayouts = useCallback(() => setWillRecomputeLayouts(true), []);\n  const recomputeLayoutsTimeoutId = useRef(null);\n  const disabled = isDisabled();\n  const layoutRectMap = useLazyMemo(previousValue => {\n    if (disabled && !dragging) {\n      return defaultValue;\n    }\n\n    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || willRecomputeLayouts) {\n      for (let container of Object.values(containers)) {\n        if (!container) {\n          continue;\n        }\n\n        container.rect.current = container.node.current ? getElementLayout(container.node.current) : null;\n      }\n\n      return createLayoutRectMap(containers);\n    }\n\n    return previousValue;\n  }, [containers, dragging, disabled, willRecomputeLayouts]);\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n  useEffect(() => {\n    if (willRecomputeLayouts) {\n      setWillRecomputeLayouts(false);\n    }\n  }, [willRecomputeLayouts]);\n  useEffect(function recompute() {\n    if (disabled) {\n      return;\n    }\n\n    requestAnimationFrame(recomputeLayouts);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dragging, disabled]);\n  useEffect(function forceRecomputeLayouts() {\n    if (disabled || typeof frequency !== 'number' || recomputeLayoutsTimeoutId.current !== null) {\n      return;\n    }\n\n    recomputeLayoutsTimeoutId.current = setTimeout(() => {\n      recomputeLayouts();\n      recomputeLayoutsTimeoutId.current = null;\n    }, frequency);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [frequency, disabled, recomputeLayouts, ...dependencies]);\n  return {\n    layoutRectMap,\n    recomputeLayouts,\n    willRecomputeLayouts\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case LayoutMeasuringStrategy.Always:\n        return false;\n\n      case LayoutMeasuringStrategy.BeforeDragging:\n        return dragging;\n\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction createLayoutRectMap(containers) {\n  const layoutRectMap = new Map();\n\n  if (containers) {\n    for (const container of Object.values(containers)) {\n      if (!container) {\n        continue;\n      }\n\n      const {\n        id,\n        rect,\n        disabled\n      } = container;\n\n      if (disabled || rect.current == null) {\n        continue;\n      }\n\n      layoutRectMap.set(id, rect.current);\n    }\n  }\n\n  return layoutRectMap;\n}\n\nconst defaultLayoutMeasuring = {\n  strategy: LayoutMeasuringStrategy.WhileDragging,\n  frequency: LayoutMeasuringFrequency.Optimized\n};\n\nfunction getLayoutMeasuring(layoutMeasuring) {\n  return layoutMeasuring ? { ...defaultLayoutMeasuring,\n    ...layoutMeasuring\n  } : defaultLayoutMeasuring;\n}\n\nfunction useScrollOffsets(elements) {\n  const [scrollCoordinates, setScrollCoordinates] = useState(null);\n  const prevElements = useRef(elements); // To-do: Throttle the handleScroll callback\n\n  const handleScroll = useCallback(event => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates(scrollCoordinates => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n      const entries = elements.map(element => {\n        const scrollableElement = getScrollableElement(element);\n\n        if (scrollableElement) {\n          scrollableElement.addEventListener('scroll', handleScroll, {\n            passive: true\n          });\n          return [scrollableElement, getScrollCoordinates(scrollableElement)];\n        }\n\n        return null;\n      }).filter(entry => entry != null);\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements) {\n      elements.forEach(element => {\n        const scrollableElement = getScrollableElement(element);\n        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n\nconst defaultValue$1 = [];\nfunction useScrollableAncestors(node) {\n  const previousNode = useRef(node);\n  const ancestors = useLazyMemo(previousValue => {\n    if (!node) {\n      return defaultValue$1;\n    }\n\n    if (previousValue && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n      return previousValue;\n    }\n\n    return getScrollableAncestors(node);\n  }, [node]);\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n  return ancestors;\n}\n\nfunction useSyntheticListeners(listeners, id) {\n  return useMemo(() => {\n    return listeners.reduce((acc, {\n      eventName,\n      handler\n    }) => {\n      acc[eventName] = event => {\n        handler(event, id);\n      };\n\n      return acc;\n    }, {});\n  }, [listeners, id]);\n}\n\nconst useClientRect = /*#__PURE__*/createUseRectFn(getBoundingClientRect);\nconst useClientRects = /*#__PURE__*/createUseRectsFn(getBoundingClientRect);\nconst useViewRect = /*#__PURE__*/createUseRectFn(getViewRect);\n\nfunction createUseRectFn(getRect) {\n  return function useClientRect(element, forceRecompute) {\n    const previousElement = useRef(element);\n    return useLazyMemo(previousValue => {\n      if (!element) {\n        return null;\n      }\n\n      if (forceRecompute || !previousValue && element || element !== previousElement.current) {\n        if (element instanceof HTMLElement && element.parentNode == null) {\n          return null;\n        }\n\n        return getRect(element);\n      }\n\n      return previousValue != null ? previousValue : null;\n    }, [element, forceRecompute]);\n  };\n}\n\nfunction createUseRectsFn(getRect) {\n  const defaultValue = [];\n  return function useRects(elements, forceRecompute) {\n    const previousElements = useRef(elements);\n    return useLazyMemo(previousValue => {\n      if (!elements.length) {\n        return defaultValue;\n      }\n\n      if (forceRecompute || !previousValue && elements.length || elements !== previousElements.current) {\n        return elements.map(element => getRect(element));\n      }\n\n      return previousValue != null ? previousValue : defaultValue;\n    }, [elements, forceRecompute]);\n  };\n}\n\nfunction useSensor(sensor, options) {\n  return useMemo(() => ({\n    sensor,\n    options: options != null ? options : {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [sensor, options]);\n}\n\nfunction useSensors(...sensors) {\n  return useMemo(() => [...sensors].filter(sensor => sensor != null), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [...sensors]);\n}\n\nclass Listeners {\n  constructor(target) {\n    this.target = target;\n    this.listeners = [];\n  }\n\n  add(eventName, handler, options) {\n    this.target.addEventListener(eventName, handler, options);\n    this.listeners.push({\n      eventName,\n      handler\n    });\n  }\n\n  removeAll() {\n    this.listeners.forEach(({\n      eventName,\n      handler\n    }) => this.target.removeEventListener(eventName, handler));\n  }\n\n}\n\nfunction getEventListenerTarget(element) {\n  return element instanceof HTMLElement ? element : getOwnerDocument(element);\n}\n\nfunction hasExceededDistance(delta, measurement) {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n\nvar KeyboardCode;\n\n(function (KeyboardCode) {\n  KeyboardCode[\"Space\"] = \"Space\";\n  KeyboardCode[\"Down\"] = \"ArrowDown\";\n  KeyboardCode[\"Right\"] = \"ArrowRight\";\n  KeyboardCode[\"Left\"] = \"ArrowLeft\";\n  KeyboardCode[\"Up\"] = \"ArrowUp\";\n  KeyboardCode[\"Esc\"] = \"Escape\";\n  KeyboardCode[\"Enter\"] = \"Enter\";\n})(KeyboardCode || (KeyboardCode = {}));\n\nconst defaultKeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter]\n};\nconst defaultKeyboardCoordinateGetter = (event, {\n  currentCoordinates\n}) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x + 25\n      };\n\n    case KeyboardCode.Left:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x - 25\n      };\n\n    case KeyboardCode.Down:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y + 25\n      };\n\n    case KeyboardCode.Up:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y - 25\n      };\n  }\n\n  return undefined;\n};\n\nclass KeyboardSensor {\n  constructor(props) {\n    this.props = props;\n    this.autoScrollEnabled = false;\n    this.coordinates = defaultCoordinates;\n    const {\n      event: {\n        target\n      }\n    } = props;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    this.handleStart();\n    setTimeout(() => {\n      this.listeners.add('keydown', this.handleKeyDown);\n      this.windowListeners.add('resize', this.handleCancel);\n    });\n  }\n\n  handleStart() {\n    const {\n      activeNode,\n      onStart\n    } = this.props;\n\n    if (!activeNode.node.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getBoundingClientRect(activeNode.node.current);\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top\n    };\n    this.coordinates = coordinates;\n    onStart(coordinates);\n  }\n\n  handleKeyDown(event) {\n    if (event instanceof KeyboardEvent) {\n      const {\n        coordinates\n      } = this;\n      const {\n        active,\n        context,\n        options\n      } = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth'\n      } = options;\n      const {\n        code\n      } = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0\n        };\n        const {\n          scrollableAncestors\n        } = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const coordinatesDelta = subtract(newCoordinates, coordinates);\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n          const clampedCoordinates = {\n            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n          };\n          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Right && scrollContainer.scrollLeft + coordinatesDelta.x <= maxScroll.x || direction === KeyboardCode.Left && scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x;\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Down && scrollContainer.scrollTop + coordinatesDelta.y <= maxScroll.y || direction === KeyboardCode.Up && scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y;\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior\n            });\n            break;\n          }\n        }\n\n        this.handleMove(event, add(newCoordinates, scrollDelta));\n      }\n    }\n  }\n\n  handleMove(event, coordinates) {\n    const {\n      onMove\n    } = this.props;\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  handleEnd(event) {\n    const {\n      onEnd\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel(event) {\n    const {\n      onCancel\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n}\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: (event, {\n    keyboardCodes = defaultKeyboardCodes,\n    onActivation\n  }) => {\n    const {\n      code\n    } = event.nativeEvent;\n\n    if (keyboardCodes.start.includes(code)) {\n      event.preventDefault();\n      onActivation == null ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n\n    return false;\n  }\n}];\n\nfunction isDistanceConstraint(constraint) {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(constraint) {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"Keydown\"] = \"keydown\";\n})(EventName || (EventName = {}));\n\nclass AbstractPointerSensor {\n  constructor(props, events, listenerTarget = getEventListenerTarget(props.event.target)) {\n    this.props = props;\n    this.events = events;\n    this.autoScrollEnabled = true;\n    this.activated = false;\n    this.timeoutId = null;\n    const {\n      event\n    } = props;\n    this.props = props;\n    this.events = events;\n    this.ownerDocument = getOwnerDocument(event.target);\n    this.listeners = new Listeners(listenerTarget);\n    this.initialCoordinates = getEventCoordinates(event);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    const {\n      events,\n      props: {\n        options: {\n          activationConstraint\n        }\n      }\n    } = this;\n    this.listeners.add(events.move.name, this.handleMove, false);\n    this.listeners.add(events.end.name, this.handleEnd);\n    this.ownerDocument.addEventListener(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.ownerDocument.removeEventListener(EventName.Keydown, this.handleKeydown);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  handleStart() {\n    const {\n      initialCoordinates\n    } = this;\n    const {\n      onStart\n    } = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n      onStart(initialCoordinates);\n    }\n  }\n\n  handleMove(event) {\n    const {\n      activated,\n      initialCoordinates,\n      props\n    } = this;\n    const {\n      onMove,\n      options: {\n        activationConstraint\n      }\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event);\n    const delta = subtract(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  handleEnd() {\n    const {\n      onEnd\n    } = this.props;\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel() {\n    const {\n      onCancel\n    } = this.props;\n    this.detach();\n    onCancel();\n  }\n\n  handleKeydown(event) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n}\n\nconst events = {\n  move: {\n    name: 'pointermove'\n  },\n  end: {\n    name: 'pointerup'\n  }\n};\nclass PointerSensor extends AbstractPointerSensor {\n  constructor(props) {\n    const {\n      event\n    } = props; // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n\n    const listenerTarget = getOwnerDocument(event.target);\n    super(props, events, listenerTarget);\n  }\n\n}\nPointerSensor.activators = [{\n  eventName: 'onPointerDown',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    if (!event.isPrimary || event.button !== 0) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nconst events$1 = {\n  move: {\n    name: 'mousemove'\n  },\n  end: {\n    name: 'mouseup'\n  }\n};\nvar MouseButton;\n\n(function (MouseButton) {\n  MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\n\nclass MouseSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$1, getOwnerDocument(props.event.target));\n  }\n\n}\nMouseSensor.activators = [{\n  eventName: 'onMouseDown',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    if (event.button === MouseButton.RightClick) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nconst events$2 = {\n  move: {\n    name: 'touchmove'\n  },\n  end: {\n    name: 'touchend'\n  }\n};\nclass TouchSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$2);\n  }\n\n}\nTouchSensor.activators = [{\n  eventName: 'onTouchStart',\n  handler: ({\n    nativeEvent: event\n  }, {\n    onActivation\n  }) => {\n    const {\n      touches\n    } = event;\n\n    if (touches.length > 1) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\n\nfunction applyModifiers(modifiers, {\n  transform,\n  ...args\n}) {\n  return (modifiers == null ? void 0 : modifiers.length) ? modifiers.reduce((accumulator, modifier) => {\n    return modifier({\n      transform: accumulator,\n      ...args\n    });\n  }, transform) : transform;\n}\n\nconst defaultSensors = [{\n  sensor: PointerSensor,\n  options: {}\n}, {\n  sensor: KeyboardSensor,\n  options: {}\n}];\nconst defaultData = {\n  current: {}\n};\nconst ActiveDraggableContext = /*#__PURE__*/createContext({ ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1\n});\nconst DndContext = /*#__PURE__*/memo(function DndContext({\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  layoutMeasuring,\n  modifiers,\n  screenReaderInstructions: screenReaderInstructions$1 = screenReaderInstructions,\n  ...props\n}) {\n  var _sensorContext$curren, _sensorContext$curren2, _overContainer$rect$c;\n\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [monitorState, setMonitorState] = useState(() => ({\n    type: null,\n    event: null\n  }));\n  const {\n    draggable: {\n      active: activeId,\n      nodes: draggableNodes,\n      translate\n    },\n    droppable: {\n      containers: droppableContainers\n    }\n  } = state;\n  const node = activeId ? draggableNodes[activeId] : null;\n  const activeRects = useRef({\n    initial: null,\n    translated: null\n  });\n  const active = useMemo(() => {\n    var _node$data;\n\n    return activeId != null ? {\n      id: activeId,\n      // It's possible for the active node to unmount while dragging\n      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n      rect: activeRects\n    } : null;\n  }, [activeId, node]);\n  const activeRef = useRef(null);\n  const [activeSensor, setActiveSensor] = useState(null);\n  const [activatorEvent, setActivatorEvent] = useState(null);\n  const latestProps = useRef(props);\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`);\n  const {\n    layoutRectMap: droppableRects,\n    recomputeLayouts,\n    willRecomputeLayouts\n  } = useLayoutMeasuring(droppableContainers, {\n    dragging: activeId != null,\n    dependencies: [translate.x, translate.y],\n    config: layoutMeasuring\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = activatorEvent ? getEventCoordinates(activatorEvent) : null;\n  const activeNodeRect = useViewRect(activeNode);\n  const activeNodeClientRect = useClientRect(activeNode);\n  const initialActiveNodeRectRef = useRef(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n  const nodeRectDelta = getRectDelta(activeNodeRect, initialActiveNodeRect);\n  const sensorContext = useRef({\n    active: null,\n    activeNode,\n    collisionRect: null,\n    droppableRects,\n    draggableNodes,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTransalte: null,\n    translatedRect: null\n  });\n  const overNode = getDroppableNode((_sensorContext$curren = (_sensorContext$curren2 = sensorContext.current.over) == null ? void 0 : _sensorContext$curren2.id) != null ? _sensorContext$curren : null, droppableContainers);\n  const windowRect = useClientRect(activeNode ? activeNode.ownerDocument.defaultView : null);\n  const containerNodeRect = useClientRect(activeNode ? activeNode.parentElement : null);\n  const scrollableAncestors = useScrollableAncestors(activeId ? overNode != null ? overNode : activeNode : null);\n  const scrollableAncestorRects = useClientRects(scrollableAncestors);\n  const [overlayNodeRef, setOverlayNodeRef] = useNodeRef();\n  const overlayNodeRect = useClientRect(activeId ? overlayNodeRef.current : null, willRecomputeLayouts);\n  const draggingNodeRect = overlayNodeRect != null ? overlayNodeRect : activeNodeClientRect;\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1\n    },\n    active,\n    over: sensorContext.current.over,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect,\n    containerNodeRect,\n    overlayNodeRect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  });\n  const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;\n  const scrolllAdjustment = useScrollOffsets(scrollableAncestors);\n  const scrollAdjustedTransalte = add(modifiedTranslate, scrolllAdjustment);\n  const translatedRect = activeNodeRect ? getAdjustedRect(activeNodeRect, modifiedTranslate) : null;\n  const collisionRect = translatedRect ? getAdjustedRect(translatedRect, scrolllAdjustment) : null;\n  const overId = active && collisionRect ? collisionDetection(Array.from(droppableRects.entries()), collisionRect) : null;\n  const overContainer = getOver(overId, droppableContainers);\n  const over = useMemo(() => overContainer && overContainer.rect.current ? {\n    id: overContainer.id,\n    rect: overContainer.rect.current,\n    data: overContainer.data,\n    disabled: overContainer.disabled\n  } : null, [overContainer]);\n  const transform = adjustScale(modifiedTranslate, (_overContainer$rect$c = overContainer == null ? void 0 : overContainer.rect.current) != null ? _overContainer$rect$c : null, activeNodeRect);\n  const instantiateSensor = useCallback((event, {\n    sensor: Sensor,\n    options\n  }) => {\n    if (!activeRef.current) {\n      return;\n    }\n\n    const activeNode = draggableNodes[activeRef.current];\n\n    if (!activeNode) {\n      return;\n    }\n\n    const sensorInstance = new Sensor({\n      active: activeRef.current,\n      activeNode,\n      event: event.nativeEvent,\n      options,\n      // Sensors need to be instantiated with refs for arguments that change over time\n      // otherwise they are frozen in time with the stale arguments\n      context: sensorContext,\n\n      onStart(initialCoordinates) {\n        const id = activeRef.current;\n\n        if (!id) {\n          return;\n        }\n\n        const node = draggableNodes[id];\n\n        if (!node) {\n          return;\n        }\n\n        const {\n          onDragStart\n        } = latestProps.current;\n        const event = {\n          active: {\n            id,\n            data: node.data,\n            rect: activeRects\n          }\n        };\n        dispatch({\n          type: Action.DragStart,\n          initialCoordinates,\n          active: id\n        });\n        setMonitorState({\n          type: Action.DragStart,\n          event\n        });\n        onDragStart == null ? void 0 : onDragStart(event);\n      },\n\n      onMove(coordinates) {\n        dispatch({\n          type: Action.DragMove,\n          coordinates\n        });\n      },\n\n      onEnd: createHandler(Action.DragEnd),\n      onCancel: createHandler(Action.DragCancel)\n    });\n    setActiveSensor(sensorInstance);\n    setActivatorEvent(event.nativeEvent);\n\n    function createHandler(type) {\n      return async function handler() {\n        const activeId = activeRef.current;\n        const {\n          active,\n          over,\n          scrollAdjustedTransalte\n        } = sensorContext.current;\n\n        if (!active || !scrollAdjustedTransalte) {\n          return;\n        }\n\n        const {\n          cancelDrop\n        } = latestProps.current;\n        const event = {\n          active: active,\n          delta: scrollAdjustedTransalte,\n          over\n        };\n        activeRef.current = null;\n\n        if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n          const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n          if (shouldCancel) {\n            type = Action.DragCancel;\n          }\n        }\n\n        dispatch({\n          type\n        });\n        setActiveSensor(null);\n        setActivatorEvent(null);\n        const {\n          onDragCancel,\n          onDragEnd\n        } = latestProps.current;\n        const handler = type === Action.DragEnd ? onDragEnd : onDragCancel;\n        setMonitorState({\n          type,\n          event\n        });\n\n        if (activeId) {\n          handler == null ? void 0 : handler(event);\n        }\n      };\n    }\n  }, [dispatch, draggableNodes]);\n  const bindActivatorToSensorInstantiator = useCallback((handler, sensor) => {\n    return (event, active) => {\n      const nativeEvent = event.nativeEvent;\n\n      if ( // No active draggable\n      activeRef.current !== null || // Event has already been captured\n      nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n        return;\n      }\n\n      if (handler(event, sensor.options) === true) {\n        nativeEvent.dndKit = {\n          capturedBy: sensor.sensor\n        };\n        activeRef.current = active;\n        instantiateSensor(event, sensor);\n      }\n    };\n  }, [instantiateSensor]);\n  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n  useIsomorphicLayoutEffect(() => {\n    latestProps.current = props;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  Object.values(props));\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n  useEffect(() => {\n    const {\n      onDragMove\n    } = latestProps.current;\n    const {\n      active,\n      over\n    } = sensorContext.current;\n\n    if (!active) {\n      return;\n    }\n\n    const event = {\n      active,\n      delta: {\n        x: scrollAdjustedTransalte.x,\n        y: scrollAdjustedTransalte.y\n      },\n      over\n    };\n    setMonitorState({\n      type: Action.DragMove,\n      event\n    });\n    onDragMove == null ? void 0 : onDragMove(event);\n  }, [scrollAdjustedTransalte.x, scrollAdjustedTransalte.y]);\n  useEffect(() => {\n    const {\n      active,\n      scrollAdjustedTransalte\n    } = sensorContext.current;\n\n    if (!active || !activeRef.current || !scrollAdjustedTransalte) {\n      return;\n    }\n\n    const {\n      onDragOver\n    } = latestProps.current;\n    const event = {\n      active,\n      delta: {\n        x: scrollAdjustedTransalte.x,\n        y: scrollAdjustedTransalte.y\n      },\n      over\n    };\n    setMonitorState({\n      type: Action.DragOver,\n      event\n    });\n    onDragOver == null ? void 0 : onDragOver(event);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [over == null ? void 0 : over.id]);\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      active,\n      activeNode,\n      collisionRect,\n      droppableRects,\n      draggableNodes,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTransalte,\n      translatedRect\n    };\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: translatedRect\n    };\n  }, [active, activeNode, collisionRect, draggableNodes, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTransalte, translatedRect]);\n  useAutoScroller({ ...getAutoScrollerOptions(),\n    draggingRect: translatedRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects\n  });\n  const contextValue = useMemo(() => {\n    const memoizedContext = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activeNodeClientRect,\n      activatorEvent,\n      activators,\n      ariaDescribedById: {\n        draggable: draggableDescribedById\n      },\n      overlayNode: {\n        nodeRef: overlayNodeRef,\n        rect: overlayNodeRect,\n        setRef: setOverlayNodeRef\n      },\n      containerNodeRect,\n      dispatch,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      recomputeLayouts,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      willRecomputeLayouts,\n      windowRect\n    };\n    return memoizedContext;\n  }, [active, activeNode, activeNodeClientRect, activeNodeRect, activatorEvent, activators, containerNodeRect, overlayNodeRect, overlayNodeRef, dispatch, draggableNodes, draggableDescribedById, droppableContainers, droppableRects, over, recomputeLayouts, scrollableAncestors, scrollableAncestorRects, setOverlayNodeRef, willRecomputeLayouts, windowRect]);\n  return React.createElement(DndMonitorContext.Provider, {\n    value: monitorState\n  }, React.createElement(Context.Provider, {\n    value: contextValue\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: transform\n  }, children)), React.createElement(Accessibility, {\n    announcements: announcements,\n    hiddenTextDescribedById: draggableDescribedById,\n    screenReaderInstructions: screenReaderInstructions$1\n  }));\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n    const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n    const enabled = !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return { ...autoScroll,\n        enabled\n      };\n    }\n\n    return {\n      enabled\n    };\n  }\n});\n\nfunction getDroppableNode(id, droppableContainers) {\n  var _droppableContainers$, _droppableContainers$2;\n\n  return id ? (_droppableContainers$ = (_droppableContainers$2 = droppableContainers[id]) == null ? void 0 : _droppableContainers$2.node.current) != null ? _droppableContainers$ : null : null;\n}\n\nfunction getOver(id, droppableContainers) {\n  var _droppableContainers$3;\n\n  return id ? (_droppableContainers$3 = droppableContainers[id]) != null ? _droppableContainers$3 : null : null;\n}\n\nconst NullContext = /*#__PURE__*/createContext(null);\nconst defaultRole = 'button';\nfunction useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes\n}) {\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    ariaDescribedById,\n    draggableNodes,\n    droppableRects,\n    activators,\n    over\n  } = useContext(Context);\n  const {\n    role = defaultRole,\n    roleDescription = 'draggable',\n    tabIndex = 0\n  } = attributes != null ? attributes : {};\n  const isDragging = (active == null ? void 0 : active.id) === id;\n  const transform = useContext(isDragging ? ActiveDraggableContext : NullContext);\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useData(data);\n  useEffect(() => {\n    draggableNodes[id] = {\n      node,\n      data: dataRef\n    };\n    return () => {\n      delete draggableNodes[id];\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes, id]);\n  const memoizedAttributes = useMemo(() => ({\n    role,\n    tabIndex,\n    'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n    'aria-roledescription': roleDescription,\n    'aria-describedby': ariaDescribedById.draggable\n  }), [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);\n  return {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes: memoizedAttributes,\n    droppableRects,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform\n  };\n}\n\nfunction useDndContext() {\n  return useContext(Context);\n}\n\nfunction useDroppable({\n  data,\n  disabled = false,\n  id\n}) {\n  const {\n    active,\n    dispatch,\n    over\n  } = useContext(Context);\n  const rect = useRef(null);\n  const [nodeRef, setNodeRef] = useNodeRef();\n  const dataRef = useData(data);\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: Action.RegisterDroppable,\n      element: {\n        id,\n        disabled,\n        node: nodeRef,\n        rect,\n        data: dataRef\n      }\n    });\n    return () => dispatch({\n      type: Action.UnregisterDroppable,\n      id\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id]);\n  useEffect(() => {\n    dispatch({\n      type: Action.SetDroppableDisabled,\n      id,\n      disabled\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  return {\n    active,\n    rect,\n    isOver: (over == null ? void 0 : over.id) === id,\n    node: nodeRef,\n    over,\n    setNodeRef\n  };\n}\n\nfunction useDerivedTransform(transform, rect, overlayNode) {\n  const prevRect = useRef(rect);\n  return useLazyMemo(previousValue => {\n    const initial = prevRect.current;\n\n    if (rect !== initial) {\n      if (rect && initial) {\n        const layoutHasChanged = initial.left !== rect.left || initial.top !== rect.top;\n\n        if (layoutHasChanged && !previousValue) {\n          const overlayNodeRect = overlayNode == null ? void 0 : overlayNode.getBoundingClientRect();\n\n          if (overlayNodeRect) {\n            const delta = { ...transform,\n              x: overlayNodeRect.left - rect.left,\n              y: overlayNodeRect.top - rect.top\n            };\n            return delta;\n          }\n        }\n      }\n\n      prevRect.current = rect;\n    }\n\n    return undefined;\n  }, [rect, transform, overlayNode]);\n}\n\nfunction useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  easing,\n  dragSourceOpacity,\n  node,\n  transform\n}) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n  useEffect(() => {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      var _draggableNodes$activ;\n\n      const finalNode = (_draggableNodes$activ = draggableNodes[activeId]) == null ? void 0 : _draggableNodes$activ.node.current;\n\n      if (transform && node && finalNode && finalNode.parentNode !== null) {\n        const fromNode = node.children.length > 1 ? node : node.children[0];\n\n        if (fromNode) {\n          const from = fromNode.getBoundingClientRect();\n          const to = getViewRect(finalNode);\n          const delta = {\n            x: from.left - to.left,\n            y: from.top - to.top\n          };\n\n          if (Math.abs(delta.x) || Math.abs(delta.y)) {\n            const scaleDelta = {\n              scaleX: adjustScale ? to.width * transform.scaleX / from.width : 1,\n              scaleY: adjustScale ? to.height * transform.scaleY / from.height : 1\n            };\n            const finalTransform = CSS.Transform.toString({\n              x: transform.x - delta.x,\n              y: transform.y - delta.y,\n              ...scaleDelta\n            });\n            const originalOpacity = finalNode.style.opacity;\n\n            if (dragSourceOpacity != null) {\n              finalNode.style.opacity = `${dragSourceOpacity}`;\n            }\n\n            const nodeAnimation = node.animate([{\n              transform: CSS.Transform.toString(transform)\n            }, {\n              transform: finalTransform\n            }], {\n              easing,\n              duration\n            });\n\n            nodeAnimation.onfinish = () => {\n              setDropAnimationComplete(true);\n\n              if (finalNode && dragSourceOpacity != null) {\n                finalNode.style.opacity = originalOpacity;\n              }\n            };\n\n            return;\n          }\n        }\n      }\n\n      setDropAnimationComplete(true);\n    });\n  }, [animate, activeId, adjustScale, draggableNodes, duration, easing, dragSourceOpacity, node, transform]);\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n  return dropAnimationComplete;\n}\n\nconst defaultTransition = activatorEvent => {\n  const isKeyboardActivator = activatorEvent instanceof KeyboardEvent;\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nconst defaultDropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0\n};\nconst DragOverlay = /*#__PURE__*/React.memo(({\n  adjustScale = false,\n  children,\n  dropAnimation = defaultDropAnimation,\n  transition = defaultTransition,\n  modifiers,\n  wrapperElement = 'div',\n  className,\n  zIndex = 999\n}) => {\n  var _active$id, _attributesSnapshot$c;\n\n  const {\n    active,\n    activeNodeRect,\n    activeNodeClientRect,\n    containerNodeRect,\n    draggableNodes,\n    activatorEvent,\n    over,\n    overlayNode,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  } = useDndContext();\n  const transform = useContext(ActiveDraggableContext);\n  const modifiedTransform = applyModifiers(modifiers, {\n    active,\n    activeNodeRect: activeNodeClientRect,\n    draggingNodeRect: overlayNode.rect,\n    containerNodeRect,\n    over,\n    overlayNodeRect: overlayNode.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    transform,\n    windowRect\n  });\n  const derivedTransform = useDerivedTransform(modifiedTransform, activeNodeRect, overlayNode.nodeRef.current);\n  const isDragging = active !== null;\n  const intermediateTransform = derivedTransform != null ? derivedTransform : modifiedTransform;\n  const finalTransform = adjustScale ? intermediateTransform : { ...intermediateTransform,\n    scaleX: 1,\n    scaleY: 1\n  };\n  const style = activeNodeRect ? {\n    position: 'fixed',\n    width: activeNodeRect.width,\n    height: activeNodeRect.height,\n    top: activeNodeRect.top,\n    left: activeNodeRect.left,\n    zIndex,\n    transform: CSS.Transform.toString(finalTransform),\n    touchAction: 'none',\n    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, activeNodeRect) : undefined,\n    transition: derivedTransform ? undefined : typeof transition === 'function' ? transition(activatorEvent) : transition\n  } : undefined;\n  const attributes = isDragging ? {\n    style,\n    children,\n    className,\n    transform: finalTransform\n  } : undefined;\n  const attributesSnapshot = useRef(attributes);\n  const derivedAttributes = attributes != null ? attributes : attributesSnapshot.current;\n  const {\n    children: finalChildren,\n    transform: _,\n    ...otherAttributes\n  } = derivedAttributes != null ? derivedAttributes : {};\n  const prevActiveId = useRef((_active$id = active == null ? void 0 : active.id) != null ? _active$id : null);\n  const dropAnimationComplete = useDropAnimation({\n    animate: Boolean(dropAnimation && prevActiveId.current && !active),\n    adjustScale,\n    activeId: prevActiveId.current,\n    draggableNodes,\n    duration: dropAnimation == null ? void 0 : dropAnimation.duration,\n    easing: dropAnimation == null ? void 0 : dropAnimation.easing,\n    dragSourceOpacity: dropAnimation == null ? void 0 : dropAnimation.dragSourceOpacity,\n    node: overlayNode.nodeRef.current,\n    transform: (_attributesSnapshot$c = attributesSnapshot.current) == null ? void 0 : _attributesSnapshot$c.transform\n  });\n  const shouldRender = Boolean(finalChildren && (children || dropAnimation && !dropAnimationComplete));\n  useEffect(() => {\n    if ((active == null ? void 0 : active.id) !== prevActiveId.current) {\n      var _active$id2;\n\n      prevActiveId.current = (_active$id2 = active == null ? void 0 : active.id) != null ? _active$id2 : null;\n    }\n\n    if (active && attributesSnapshot.current !== attributes) {\n      attributesSnapshot.current = attributes;\n    }\n  }, [active, attributes]);\n  useEffect(() => {\n    if (dropAnimationComplete) {\n      attributesSnapshot.current = undefined;\n    }\n  }, [dropAnimationComplete]);\n\n  if (!shouldRender) {\n    return null;\n  }\n\n  return React.createElement(wrapperElement, { ...otherAttributes,\n    ref: overlayNode.setRef\n  }, finalChildren);\n});\n\nexport { AutoScrollActivator, DndContext, DragOverlay, KeyboardCode, KeyboardSensor, LayoutMeasuringFrequency, LayoutMeasuringStrategy, MouseSensor, PointerSensor, TouchSensor, TraversalOrder, applyModifiers, closestCenter, closestCorners, defaultAnnouncements, defaultCoordinates, defaultDropAnimation, getBoundingClientRect, getScrollableAncestors, getViewRect, rectIntersection, useDndContext, useDndMonitor, useDraggable, useDroppable, useSensor, useSensors };\n//# sourceMappingURL=core.esm.js.map\n","isModule":true,"requires":["react","react-dom","@dnd-kit/utilities","@dnd-kit/accessibility"]},"/node_modules/@dnd-kit/utilities/dist/utilities.esm.js":{"content":"import { useMemo, useLayoutEffect, useEffect, useRef, useCallback } from 'react';\n\nfunction useCombinedRefs(...refs) {\n  return useMemo(() => node => {\n    refs.forEach(ref => ref(node));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  refs);\n}\n\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nconst canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\r\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\r\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\r\n */\n\nconst useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\n\nfunction useInterval() {\n  const intervalRef = useRef(null);\n  const set = useCallback((listener, duration) => {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n  const clear = useCallback(() => {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n  return [set, clear];\n}\n\nfunction useLazyMemo(callback, dependencies) {\n  const valueRef = useRef();\n  return useMemo(() => {\n    const newValue = callback(valueRef.current);\n    valueRef.current = newValue;\n    return newValue;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [...dependencies]);\n}\n\nfunction useNodeRef() {\n  const node = useRef(null);\n  const setNodeRef = useCallback(element => {\n    node.current = element;\n  }, []);\n  return [node, setNodeRef];\n}\n\nlet ids = {};\nfunction useUniqueId(prefix, value) {\n  return useMemo(() => {\n    if (value) {\n      return value;\n    }\n\n    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n    return `${prefix}-${id}`;\n  }, [prefix, value]);\n}\n\nfunction createAdjustmentFn(modifier) {\n  return (object, ...adjustments) => {\n    return adjustments.reduce((accumulator, adjustment) => {\n      const entries = Object.entries(adjustment);\n\n      for (const [key, valueAdjustment] of entries) {\n        const value = accumulator[key];\n\n        if (value != null) {\n          accumulator[key] = value + modifier * valueAdjustment;\n        }\n      }\n\n      return accumulator;\n    }, { ...object\n    });\n  };\n}\n\nconst add = /*#__PURE__*/createAdjustmentFn(1);\nconst subtract = /*#__PURE__*/createAdjustmentFn(-1);\n\nconst CSS = /*#__PURE__*/Object.freeze({\n  Translate: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      const {\n        x,\n        y\n      } = transform;\n      return `translate3d(${x ? Math.round(x) : 0}px, ${y ? Math.round(y) : 0}px, 0)`;\n    }\n\n  },\n  Scale: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      const {\n        scaleX,\n        scaleY\n      } = transform;\n      return `scaleX(${scaleX}) scaleY(${scaleY})`;\n    }\n\n  },\n  Transform: {\n    toString(transform) {\n      if (!transform) {\n        return;\n      }\n\n      return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');\n    }\n\n  },\n  Transition: {\n    toString({\n      property,\n      duration,\n      easing\n    }) {\n      return `${property} ${duration}ms ${easing}`;\n    }\n\n  }\n});\n\nexport { CSS, add, canUseDOM, subtract, useCombinedRefs, useInterval, useIsomorphicLayoutEffect, useLazyMemo, useNodeRef, useUniqueId };\n//# sourceMappingURL=utilities.esm.js.map\n","isModule":true,"requires":["react"]},"/node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js":{"content":"import React, { useState, useCallback } from 'react';\n\nconst hiddenStyles = {\n  display: 'none'\n};\nfunction HiddenText({\n  id,\n  value\n}) {\n  return React.createElement(\"div\", {\n    id: id,\n    style: hiddenStyles\n  }, value);\n}\n\nconst visuallyHidden = {\n  position: 'absolute',\n  width: 1,\n  height: 1,\n  margin: -1,\n  border: 0,\n  padding: 0,\n  overflow: 'hidden',\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(100%)',\n  whiteSpace: 'nowrap'\n};\nfunction LiveRegion({\n  id,\n  announcement\n}) {\n  return React.createElement(\"div\", {\n    id: id,\n    style: visuallyHidden,\n    role: \"status\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": true\n  }, announcement);\n}\n\nfunction useAnnouncement() {\n  const [announcement, setAnnouncement] = useState('');\n  const announce = useCallback(value => {\n    if (value != null) {\n      setAnnouncement(value);\n    }\n  }, []);\n  return {\n    announce,\n    announcement\n  };\n}\n\nexport { HiddenText, LiveRegion, useAnnouncement };\n//# sourceMappingURL=accessibility.esm.js.map\n","isModule":true,"requires":["react"]},"/node_modules/@dnd-kit/core/package.json":{"content":"{\"name\":\"@dnd-kit/core\",\"version\":\"3.0.0\",\"description\":\"dnd kit – a lightweight React library for building performant and accessible drag and drop experiences\",\"author\":\"Claudéric Demers\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/clauderic/dnd-kit.git\",\"directory\":\"packages/core\"},\"scripts\":{\"start\":\"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean\",\"build\":\"tsdx build --tsconfig tsconfig.build.json\",\"test\":\"tsdx test\",\"lint\":\"tsdx lint\",\"prepublish\":\"npm run build\"},\"main\":\"dist/index.js\",\"module\":\"dist/core.esm.js\",\"typings\":\"dist/index.d.ts\",\"files\":[\"README.md\",\"CHANGELOG.md\",\"LICENSE\",\"dist\"],\"peerDependencies\":{\"react\":\">=16.8.0\",\"react-dom\":\">=16.8.0\"},\"dependencies\":{\"tslib\":\"^2.0.0\",\"@dnd-kit/accessibility\":\"^3.0.0\",\"@dnd-kit/utilities\":\"^2.0.0\"},\"publishConfig\":{\"access\":\"public\"}}"},"/node_modules/@dnd-kit/sortable/package.json":{"content":"{\"name\":\"@dnd-kit/sortable\",\"version\":\"3.0.1\",\"description\":\"Official sortable preset and sensors for dnd kit\",\"author\":\"Claudéric Demers\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/clauderic/dnd-kit.git\",\"directory\":\"packages/sortable\"},\"scripts\":{\"start\":\"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean\",\"build\":\"tsdx build --tsconfig tsconfig.build.json\",\"test\":\"tsdx test\",\"lint\":\"tsdx lint\",\"prepublish\":\"npm run build\"},\"main\":\"dist/index.js\",\"module\":\"dist/sortable.esm.js\",\"typings\":\"dist/index.d.ts\",\"files\":[\"README.md\",\"CHANGELOG.md\",\"LICENSE\",\"dist\"],\"dependencies\":{\"@dnd-kit/core\":\"^3.0.0\",\"@dnd-kit/utilities\":\"^2.0.0\",\"tslib\":\"^2.0.0\"},\"peerDependencies\":{\"react\":\">=16.8.0\"},\"publishConfig\":{\"access\":\"public\"}}"},"/node_modules/@dnd-kit/utilities/package.json":{"content":"{\"name\":\"@dnd-kit/utilities\",\"version\":\"2.0.0\",\"description\":\"Internal utilities to bee shared between `@dnd-kit` packages\",\"author\":\"Claudéric Demers\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/clauderic/dnd-kit.git\",\"directory\":\"packages/utilities\"},\"scripts\":{\"start\":\"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean\",\"build\":\"tsdx build --tsconfig tsconfig.build.json\",\"test\":\"tsdx test\",\"lint\":\"tsdx lint\",\"prepublish\":\"npm run build\"},\"main\":\"dist/index.js\",\"module\":\"dist/utilities.esm.js\",\"typings\":\"dist/index.d.ts\",\"files\":[\"README.md\",\"CHANGELOG.md\",\"LICENSE\",\"dist\"],\"dependencies\":{\"tslib\":\"^2.0.0\"},\"publishConfig\":{\"access\":\"public\"}}"},"/node_modules/tslib/package.json":{"content":"{\"name\":\"tslib\",\"author\":\"Microsoft Corp.\",\"homepage\":\"https://www.typescriptlang.org/\",\"version\":\"2.2.0\",\"license\":\"0BSD\",\"description\":\"Runtime library for TypeScript helper functions\",\"keywords\":[\"TypeScript\",\"Microsoft\",\"compiler\",\"language\",\"javascript\",\"tslib\",\"runtime\"],\"bugs\":{\"url\":\"https://github.com/Microsoft/TypeScript/issues\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/Microsoft/tslib.git\"},\"main\":\"tslib.js\",\"module\":\"tslib.es6.js\",\"jsnext:main\":\"tslib.es6.js\",\"typings\":\"tslib.d.ts\",\"sideEffects\":false,\"exports\":{\".\":{\"module\":\"./tslib.es6.js\",\"import\":\"./modules/index.js\",\"default\":\"./tslib.js\"},\"./\":\"./\"}}"},"/node_modules/@dnd-kit/accessibility/package.json":{"content":"{\"name\":\"@dnd-kit/accessibility\",\"version\":\"3.0.0\",\"description\":\"A generic toolkit to help with accessibility\",\"author\":\"Claudéric Demers\",\"license\":\"MIT\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/clauderic/dnd-kit.git\",\"directory\":\"packages/accessibility\"},\"scripts\":{\"start\":\"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean\",\"build\":\"tsdx build --tsconfig tsconfig.build.json\",\"test\":\"tsdx test\",\"lint\":\"tsdx lint\",\"prepublish\":\"npm run build\"},\"main\":\"dist/index.js\",\"module\":\"dist/accessibility.esm.js\",\"typings\":\"dist/index.d.ts\",\"files\":[\"README.md\",\"CHANGELOG.md\",\"dist\"],\"peerDependencies\":{\"react\":\">=16.8.0\"},\"dependencies\":{\"tslib\":\"^2.0.0\"},\"publishConfig\":{\"access\":\"public\"}}"}},"dependency":{"name":"@dnd-kit/sortable","version":"3.0.1"},"peerDependencies":{"react":">=16.8.0","react-dom":">=16.8.0"},"dependencyDependencies":{"@dnd-kit/core":{"semver":"^3.0.0","resolved":"3.0.0","parents":["@dnd-kit/sortable"],"entries":["@dnd-kit/core"]},"tslib":{"semver":"^2.0.0","resolved":"2.2.0","parents":["@dnd-kit/core","@dnd-kit/accessibility","@dnd-kit/utilities","@dnd-kit/sortable"],"entries":[]},"@dnd-kit/accessibility":{"semver":"^3.0.0","resolved":"3.0.0","parents":["@dnd-kit/core"],"entries":["@dnd-kit/accessibility"]},"@dnd-kit/utilities":{"semver":"^2.0.0","resolved":"2.0.0","parents":["@dnd-kit/core","@dnd-kit/sortable"],"entries":["@dnd-kit/utilities"]}},"dependencyAliases":{}}