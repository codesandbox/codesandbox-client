<testsuites name="jest tests" tests="194" failures="0" time="15.198000000000002">
  <testsuite name="Live" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:25" time="1.565" tests="2">
    <testcase classname="Live Monaco Event to OT Transform correctly transforms undo of adding text" name="Live Monaco Event to OT Transform correctly transforms undo of adding text" time="0.004">
    </testcase>
    <testcase classname="Live Monaco Event to OT Transform correctly transforms undo of removing text" name="Live Monaco Event to OT Transform correctly transforms undo of removing text" time="0">
    </testcase>
  </testsuite>
  <testsuite name="get-require-statements" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:25" time="1.803" tests="6">
    <testcase classname="get-require-statements can find simple requires" name="get-require-statements can find simple requires" time="0.052">
    </testcase>
    <testcase classname="get-require-statements can find plain requires" name="get-require-statements can find plain requires" time="0.022">
    </testcase>
    <testcase classname="get-require-statements does not find import promises" name="get-require-statements does not find import promises" time="0.01">
    </testcase>
    <testcase classname="get-require-statements can find dynamic imports" name="get-require-statements can find dynamic imports" time="0.005">
    </testcase>
    <testcase classname="get-require-statements can find reexports" name="get-require-statements can find reexports" time="0.011">
    </testcase>
    <testcase classname="get-require-statements can work with real life code" name="get-require-statements can work with real life code" time="0.08">
    </testcase>
  </testsuite>
  <testsuite name="moveDevToolsTab" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:27" time="0.336" tests="8">
    <testcase classname="moveDevToolsTab can move a tab in same devtools" name="moveDevToolsTab can move a tab in same devtools" time="0.006">
    </testcase>
    <testcase classname="moveDevToolsTab can move a tab in same devtools and move the tab back" name="moveDevToolsTab can move a tab in same devtools and move the tab back" time="0.002">
    </testcase>
    <testcase classname="moveDevToolsTab can move the tab to the same position" name="moveDevToolsTab can move the tab to the same position" time="0">
    </testcase>
    <testcase classname="moveDevToolsTab can move a tab from one devtools to the other" name="moveDevToolsTab can move a tab from one devtools to the other" time="0.001">
    </testcase>
    <testcase classname="moveDevToolsTab can move a tab from one devtools to the other and move it back" name="moveDevToolsTab can move a tab from one devtools to the other and move it back" time="0.001">
    </testcase>
    <testcase classname="moveDevToolsTab is immutable" name="moveDevToolsTab is immutable" time="0">
    </testcase>
    <testcase classname="addDevToolsTab can add a tab" name="addDevToolsTab can add a tab" time="0.001">
    </testcase>
    <testcase classname="addDevToolsTab can add a tab on specific position" name="addDevToolsTab can add a tab on specific position" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="simple-get-require-statements" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:25" time="2.171" tests="11">
    <testcase classname="simple-get-require-statements finds a simple require statement" name="simple-get-require-statements finds a simple require statement" time="0.005">
    </testcase>
    <testcase classname="simple-get-require-statements finds multiple require statement" name="simple-get-require-statements finds multiple require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements ignores commented require statement" name="simple-get-require-statements ignores commented require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements doesn&apos;t ignore pure markers" name="simple-get-require-statements doesn&apos;t ignore pure markers" time="0">
    </testcase>
    <testcase classname="simple-get-require-statements allow comments in require statement" name="simple-get-require-statements allow comments in require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements allows comment after require statement" name="simple-get-require-statements allows comment after require statement" time="0">
    </testcase>
    <testcase classname="simple-get-require-statements ignores second comment after require statement" name="simple-get-require-statements ignores second comment after require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements ignores dependencies with no quotes" name="simple-get-require-statements ignores dependencies with no quotes" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements handles a * that looks like a comment" name="simple-get-require-statements handles a * that looks like a comment" time="0.002">
    </testcase>
    <testcase classname="simple-get-require-statements handles quotes in a require statement" name="simple-get-require-statements handles quotes in a require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements Has good performance" name="simple-get-require-statements Has good performance" time="0.771">
    </testcase>
  </testsuite>
  <testsuite name="get-require-statements" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:27" time="0.594" tests="7">
    <testcase classname="get-require-statements can find simple requires" name="get-require-statements can find simple requires" time="0.009">
    </testcase>
    <testcase classname="get-require-statements can find plain requires" name="get-require-statements can find plain requires" time="0.004">
    </testcase>
    <testcase classname="get-require-statements can find import promises" name="get-require-statements can find import promises" time="0.002">
    </testcase>
    <testcase classname="get-require-statements can find dynamic imports" name="get-require-statements can find dynamic imports" time="0.002">
    </testcase>
    <testcase classname="get-require-statements can find reexports" name="get-require-statements can find reexports" time="0.001">
    </testcase>
    <testcase classname="get-require-statements can find relative imports" name="get-require-statements can find relative imports" time="0.003">
    </testcase>
    <testcase classname="get-require-statements can work with real life code" name="get-require-statements can work with real life code" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="TestRunner class" errors="0" failures="0" skipped="15" timestamp="2023-05-19T07:33:25" time="2.439" tests="27">
    <testcase classname="TestRunner class exports a module" name="TestRunner class exports a module" time="0.004">
    </testcase>
    <testcase classname="TestRunner class #constructor returns a TestRunner instance" name="TestRunner class #constructor returns a TestRunner instance" time="0.002">
    </testcase>
    <testcase classname="TestRunner class initialize should be created with 0 test ran" name="TestRunner class initialize should be created with 0 test ran" time="0.001">
    </testcase>
    <testcase classname="TestRunner class initialize should send message (dispatch) on initilaization" name="TestRunner class initialize should send message (dispatch) on initilaization" time="0.002">
    </testcase>
    <testcase classname="TestRunner class getRuntimeGlobals returns an object" name="TestRunner class getRuntimeGlobals returns an object" time="0.577">
    </testcase>
    <testcase classname="TestRunner class getRuntimeGlobals test calls the function block" name="TestRunner class getRuntimeGlobals test calls the function block" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class getRuntimeGlobals test adds pass test result" name="TestRunner class getRuntimeGlobals test adds pass test result" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class getRuntimeGlobals test adds fail test result" name="TestRunner class getRuntimeGlobals test adds fail test result" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class findTests should be initialized with no tests" name="TestRunner class findTests should be initialized with no tests" time="0">
    </testcase>
    <testcase classname="TestRunner class findTests should not find any tests when no modules are passed" name="TestRunner class findTests should not find any tests when no modules are passed" time="0.001">
    </testcase>
    <testcase classname="TestRunner class findTests should find 1 test when modules are passed" name="TestRunner class findTests should find 1 test when modules are passed" time="0.001">
    </testcase>
    <testcase classname="TestRunner class findTests should find 3 of 6 tests when modules are passed" name="TestRunner class findTests should find 3 of 6 tests when modules are passed" time="0">
    </testcase>
    <testcase classname="TestRunner class findTests should find 3 of 5 tests when modules are passed" name="TestRunner class findTests should find 3 of 5 tests when modules are passed" time="0">
    </testcase>
    <testcase classname="TestRunner class findTests should find 3 of 5 (typescript) tests when modules are passed" name="TestRunner class findTests should find 3 of 5 (typescript) tests when modules are passed" time="0.001">
    </testcase>
    <testcase classname="TestRunner class findTests should find 3 of 3 tests when modules are passed" name="TestRunner class findTests should find 3 of 3 tests when modules are passed" time="0">
    </testcase>
    <testcase classname="TestRunner class addResult should add pass test results" name="TestRunner class addResult should add pass test results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class addResult should add fail test results" name="TestRunner class addResult should add fail test results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class addResult should add pass &amp; fail test results" name="TestRunner class addResult should add pass &amp; fail test results" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class addResult should add pass &amp; fail test results by suite" name="TestRunner class addResult should add pass &amp; fail test results by suite" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should start off with no tests to report" name="TestRunner class reportResults should start off with no tests to report" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report pass tests" name="TestRunner class reportResults should report pass tests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report fail tests" name="TestRunner class reportResults should report fail tests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should add pass &amp; fail test results by suite" name="TestRunner class reportResults should add pass &amp; fail test results by suite" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report fail tests by describe" name="TestRunner class reportResults should report fail tests by describe" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report fail tests by nested describe" name="TestRunner class reportResults should report fail tests by nested describe" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report pass &amp; fail tests" name="TestRunner class reportResults should report pass &amp; fail tests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="TestRunner class reportResults should report pass &amp; fail tests by suite" name="TestRunner class reportResults should report pass &amp; fail tests by suite" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Live" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:27" time="0.248" tests="2">
    <testcase classname="Live Monaco Event to OT Transform correctly transforms undo of adding text" name="Live Monaco Event to OT Transform correctly transforms undo of adding text" time="0.003">
    </testcase>
    <testcase classname="Live Monaco Event to OT Transform correctly transforms undo of removing text" name="Live Monaco Event to OT Transform correctly transforms undo of removing text" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="simple-get-require-statements" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:27" time="0.257" tests="9">
    <testcase classname="simple-get-require-statements finds a simple require statement" name="simple-get-require-statements finds a simple require statement" time="0.003">
    </testcase>
    <testcase classname="simple-get-require-statements finds multiple require statement" name="simple-get-require-statements finds multiple require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements ignores commented require statement" name="simple-get-require-statements ignores commented require statement" time="0">
    </testcase>
    <testcase classname="simple-get-require-statements doesn&apos;t ignore pure markers" name="simple-get-require-statements doesn&apos;t ignore pure markers" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements allows comment after require statement" name="simple-get-require-statements allows comment after require statement" time="0">
    </testcase>
    <testcase classname="simple-get-require-statements ignores second comment after require statement" name="simple-get-require-statements ignores second comment after require statement" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements ignores dependencies with no quotes" name="simple-get-require-statements ignores dependencies with no quotes" time="0">
    </testcase>
    <testcase classname="simple-get-require-statements handles a * that looks like a comment" name="simple-get-require-statements handles a * that looks like a comment" time="0.001">
    </testcase>
    <testcase classname="simple-get-require-statements handles quotes in a require statement" name="simple-get-require-statements handles quotes in a require statement" time="0">
    </testcase>
  </testsuite>
  <testsuite name="OTClient" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:27" time="0.285" tests="1">
    <testcase classname="OTClient it doesn&apos;t acknowledge the same revision twice" name="OTClient it doesn&apos;t acknowledge the same revision twice" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="convert-esmodule" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:25" time="2.492" tests="56">
    <testcase classname="convert-esmodule can convert reexports" name="convert-esmodule can convert reexports" time="0.007">
    </testcase>
    <testcase classname="convert-esmodule can convert normal exports" name="convert-esmodule can convert normal exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can convert function exports" name="convert-esmodule can convert function exports" time="0.006">
    </testcase>
    <testcase classname="convert-esmodule can convert imports with spaces" name="convert-esmodule can convert imports with spaces" time="0.007">
    </testcase>
    <testcase classname="convert-esmodule can convert default exports" name="convert-esmodule can convert default exports" time="0.002">
    </testcase>
    <testcase classname="convert-esmodule can convert class default exports" name="convert-esmodule can convert class default exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can convert weird default exports" name="convert-esmodule can convert weird default exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can convert default imports" name="convert-esmodule can convert default imports" time="0.002">
    </testcase>
    <testcase classname="convert-esmodule can convert named imports" name="convert-esmodule can convert named imports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can convert named imports with different scopes" name="convert-esmodule can convert named imports with different scopes" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can handle as imports" name="convert-esmodule can handle as imports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule ignores comments" name="convert-esmodule ignores comments" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can handle inline comments" name="convert-esmodule can handle inline comments" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can handle class properties" name="convert-esmodule can handle class properties" time="0.003">
    </testcase>
    <testcase classname="convert-esmodule can handle async code" name="convert-esmodule can handle async code" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can handle block scopes" name="convert-esmodule can handle block scopes" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles export mutations" name="convert-esmodule handles export mutations" time="0.002">
    </testcase>
    <testcase classname="convert-esmodule handles export mutations with no named function" name="convert-esmodule handles export mutations with no named function" time="0">
    </testcase>
    <testcase classname="convert-esmodule handles export mutations with variables" name="convert-esmodule handles export mutations with variables" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule doesn&apos;t remove object initializers" name="convert-esmodule doesn&apos;t remove object initializers" time="0.002">
    </testcase>
    <testcase classname="convert-esmodule doesn&apos;t set var definitions" name="convert-esmodule doesn&apos;t set var definitions" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles default as exports" name="convert-esmodule handles default as exports" time="0">
    </testcase>
    <testcase classname="convert-esmodule handles named exports" name="convert-esmodule handles named exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles re-exports in named exports" name="convert-esmodule handles re-exports in named exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule generates parseable var name with @" name="convert-esmodule generates parseable var name with @" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles concurrent import and exports" name="convert-esmodule handles concurrent import and exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles re-exports in named exports with a alias" name="convert-esmodule handles re-exports in named exports with a alias" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles default imports" name="convert-esmodule handles default imports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles multiple var exports" name="convert-esmodule handles multiple var exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles multiple aliased exports" name="convert-esmodule handles multiple aliased exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule converts object shorthands" name="convert-esmodule converts object shorthands" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule hoists imports at bottom" name="convert-esmodule hoists imports at bottom" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule works with variables that are named exports" name="convert-esmodule works with variables that are named exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule exports that are not on the root scope are not renamed" name="convert-esmodule exports that are not on the root scope are not renamed" time="0">
    </testcase>
    <testcase classname="convert-esmodule renames exports that are already defined, even in block scope" name="convert-esmodule renames exports that are already defined, even in block scope" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule does empty exports" name="convert-esmodule does empty exports" time="0">
    </testcase>
    <testcase classname="convert-esmodule changes default imports inline" name="convert-esmodule changes default imports inline" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule keeps import order" name="convert-esmodule keeps import order" time="0">
    </testcase>
    <testcase classname="convert-esmodule parses and writes chars with linebreaks" name="convert-esmodule parses and writes chars with linebreaks" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule Has good performance" name="convert-esmodule Has good performance" time="0.898">
    </testcase>
    <testcase classname="convert-esmodule handles import statement after default export" name="convert-esmodule handles import statement after default export" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles assignments and exports at the same time" name="convert-esmodule handles assignments and exports at the same time" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule handles export object" name="convert-esmodule handles export object" time="0">
    </testcase>
    <testcase classname="convert-esmodule handles export alias" name="convert-esmodule handles export alias" time="0">
    </testcase>
    <testcase classname="convert-esmodule can convert exports containing overlapping exports" name="convert-esmodule can convert exports containing overlapping exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can convert import expressions" name="convert-esmodule can convert import expressions" time="0">
    </testcase>
    <testcase classname="convert-esmodule defines its exports before requires" name="convert-esmodule defines its exports before requires" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule retains the order of re-exports" name="convert-esmodule retains the order of re-exports" time="0">
    </testcase>
    <testcase classname="convert-esmodule doesn&apos;t hoist single import above export" name="convert-esmodule doesn&apos;t hoist single import above export" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule keeps function under hoisted import" name="convert-esmodule keeps function under hoisted import" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule hoists exports as well" name="convert-esmodule hoists exports as well" time="0">
    </testcase>
    <testcase classname="convert-esmodule keeps star exports after default export order" name="convert-esmodule keeps star exports after default export order" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule hoists function exports" name="convert-esmodule hoists function exports" time="0">
    </testcase>
    <testcase classname="convert-esmodule retains import orders with re-exports" name="convert-esmodule retains import orders with re-exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule predefines possible exports" name="convert-esmodule predefines possible exports" time="0.001">
    </testcase>
    <testcase classname="convert-esmodule can do array exports" name="convert-esmodule can do array exports" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="sass resolver" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.265" tests="4">
    <testcase classname="sass resolver Generates a list of all possible sass import locations" name="sass resolver Generates a list of all possible sass import locations" time="0.003">
    </testcase>
    <testcase classname="sass resolver Should handle node_module imports using `~`" name="sass resolver Should handle node_module imports using `~`" time="0">
    </testcase>
    <testcase classname="sass resolver Get path variations without extension" name="sass resolver Get path variations without extension" time="0.002">
    </testcase>
    <testcase classname="sass resolver Get path variations with extension" name="sass resolver Get path variations with extension" time="0">
    </testcase>
  </testsuite>
  <testsuite name="is-es-module" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.227" tests="4">
    <testcase classname="is-es-module works with import" name="is-es-module works with import" time="0.003">
    </testcase>
    <testcase classname="is-es-module works with export" name="is-es-module works with export" time="0">
    </testcase>
    <testcase classname="is-es-module works with .import" name="is-es-module works with .import" time="0.001">
    </testcase>
    <testcase classname="is-es-module handles exports that are not at the start of the line" name="is-es-module handles exports that are not at the start of the line" time="0">
    </testcase>
  </testsuite>
  <testsuite name="shouldTranspile" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.242" tests="2">
    <testcase classname="shouldTranspile does have to transpile clear jsx" name="shouldTranspile does have to transpile clear jsx" time="0.002">
    </testcase>
    <testcase classname="shouldTranspile doesn&apos;t have to transpile comments with jsx" name="shouldTranspile doesn&apos;t have to transpile comments with jsx" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getOwnerAndNameFromInput" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.305" tests="26">
    <testcase classname="getOwnerAndNameFromInput github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput github.com/owner/repo returns an owner and repo" time="0.004">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput http://github.com/owner/repo returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://www.github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput http://www.github.com/owner/repo returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput https://github.com/owner/repo returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/owner/repo/ returns an owner and repo" name="getOwnerAndNameFromInput https://github.com/owner/repo/ returns an owner and repo" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://www.github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput https://www.github.com/owner/repo returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput www.github.com/owner/repo returns an owner and repo" name="getOwnerAndNameFromInput www.github.com/owner/repo returns an owner and repo" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/owner/repo.git returns an owner and repo" name="getOwnerAndNameFromInput https://github.com/owner/repo.git returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput git@github.com:owner/repo.git returns an owner and repo" name="getOwnerAndNameFromInput git@github.com:owner/repo.git returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput owner/repo returns an owner and repo" name="getOwnerAndNameFromInput owner/repo returns an owner and repo" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput owner/repo-dash returns an owner and repo" name="getOwnerAndNameFromInput owner/repo-dash returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput owner/repo.dot returns an owner and repo" name="getOwnerAndNameFromInput owner/repo.dot returns an owner and repo" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/owner/repo.com returns an owner and repo" name="getOwnerAndNameFromInput https://github.com/owner/repo.com returns an owner and repo" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/owner/repo-dash returns an owner and repo" name="getOwnerAndNameFromInput https://github.com/owner/repo-dash returns an owner and repo" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput github.com/ returns null" name="getOwnerAndNameFromInput github.com/ returns null" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput github.com/user/ returns null" name="getOwnerAndNameFromInput github.com/user/ returns null" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput github.com/user/repo/path/to/file returns null" name="getOwnerAndNameFromInput github.com/user/repo/path/to/file returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://github.com/ returns null" name="getOwnerAndNameFromInput http://github.com/ returns null" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://github.com/user/ returns null" name="getOwnerAndNameFromInput http://github.com/user/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://www.github.com/ returns null" name="getOwnerAndNameFromInput http://www.github.com/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput http://www.github.com/user/ returns null" name="getOwnerAndNameFromInput http://www.github.com/user/ returns null" time="0.001">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://github.com/user/ returns null" name="getOwnerAndNameFromInput https://github.com/user/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput https://www.github.com/user/ returns null" name="getOwnerAndNameFromInput https://www.github.com/user/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput www.github.com/ returns null" name="getOwnerAndNameFromInput www.github.com/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput www.github.com/user/ returns null" name="getOwnerAndNameFromInput www.github.com/user/ returns null" time="0">
    </testcase>
    <testcase classname="getOwnerAndNameFromInput owner/repo/branch returns null" name="getOwnerAndNameFromInput owner/repo/branch returns null" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="syntax info" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.388" tests="6">
    <testcase classname="syntax info can detect jsx" name="syntax info can detect jsx" time="0.005">
    </testcase>
    <testcase classname="syntax info can detect jsx in exported class components" name="syntax info can detect jsx in exported class components" time="0.002">
    </testcase>
    <testcase classname="syntax info can detect non jsx" name="syntax info can detect non jsx" time="0.001">
    </testcase>
    <testcase classname="syntax info detects ESModules" name="syntax info detects ESModules" time="0.001">
    </testcase>
    <testcase classname="syntax info detects ESModules" name="syntax info detects ESModules" time="0">
    </testcase>
    <testcase classname="syntax info Has good performance" name="syntax info Has good performance" time="0.115">
    </testcase>
  </testsuite>
  <testsuite name="getDependencyName" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.225" tests="6">
    <testcase classname="getDependencyName can find a simple dependency name" name="getDependencyName can find a simple dependency name" time="0.002">
    </testcase>
    <testcase classname="getDependencyName can find a simple dependency name from no path" name="getDependencyName can find a simple dependency name from no path" time="0.001">
    </testcase>
    <testcase classname="getDependencyName can find a simple dependency name from an organization" name="getDependencyName can find a simple dependency name from an organization" time="0">
    </testcase>
    <testcase classname="getDependencyName can find a simple dependency name with a version" name="getDependencyName can find a simple dependency name with a version" time="0.001">
    </testcase>
    <testcase classname="getDependencyName can find a simple dependency name with a version from an organization" name="getDependencyName can find a simple dependency name with a version from an organization" time="0">
    </testcase>
    <testcase classname="getDependencyName can find a simple dependency name with beta tag" name="getDependencyName can find a simple dependency name with beta tag" time="0">
    </testcase>
  </testsuite>
  <testsuite name="printer issues" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.247" tests="3">
    <testcase classname="printer issues can convert + +" name="printer issues can convert + +" time="0.006">
    </testcase>
    <testcase classname="printer issues can convert -(--i)" name="printer issues can convert -(--i)" time="0">
    </testcase>
    <testcase classname="printer issues can convert unicode line breaks" name="printer issues can convert unicode line breaks" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getDaysUntil" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.225" tests="4">
    <testcase classname="getDaysUntil returns 0 if the date is today" name="getDaysUntil returns 0 if the date is today" time="0.002">
    </testcase>
    <testcase classname="getDaysUntil returns null if the target is behind now" name="getDaysUntil returns null if the target is behind now" time="0">
    </testcase>
    <testcase classname="getDaysUntil returns 1 if the date is tomorrow" name="getDaysUntil returns 1 if the date is tomorrow" time="0.001">
    </testcase>
    <testcase classname="getDaysUntil returns 10 if the date is 10 days from now" name="getDaysUntil returns 10 if the date is 10 days from now" time="0">
    </testcase>
  </testsuite>
  <testsuite name="get-direct-children" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.211" tests="3">
    <testcase classname="get-direct-children works with root path" name="get-direct-children works with root path" time="0.004">
    </testcase>
    <testcase classname="get-direct-children works with sub paths" name="get-direct-children works with sub paths" time="0.001">
    </testcase>
    <testcase classname="get-direct-children works with deeper paths" name="get-direct-children works with deeper paths" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Rewrite import.meta" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.212" tests="2">
    <testcase classname="Rewrite import.meta Can detect and rewrite import.meta to $csb__import_meta" name="Rewrite import.meta Can detect and rewrite import.meta to $csb__import_meta" time="0.005">
    </testcase>
    <testcase classname="Rewrite import.meta Should not add a global $csb__import_meta when there is no need for it" name="Rewrite import.meta Should not add a global $csb__import_meta when there is no need for it" time="0">
    </testcase>
  </testsuite>
  <testsuite name="normalize babel plugin/preset names" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.239" tests="2">
    <testcase classname="normalize babel plugin/preset names normalize plugin names" name="normalize babel plugin/preset names normalize plugin names" time="0.002">
    </testcase>
    <testcase classname="normalize babel plugin/preset names normalize preset names" name="normalize babel plugin/preset names normalize preset names" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="get-direct-children" errors="0" failures="0" skipped="0" timestamp="2023-05-19T07:33:28" time="0.222" tests="3">
    <testcase classname="get-direct-children works with root path" name="get-direct-children works with root path" time="0.003">
    </testcase>
    <testcase classname="get-direct-children works with sub paths" name="get-direct-children works with sub paths" time="0.001">
    </testcase>
    <testcase classname="get-direct-children works with deeper paths" name="get-direct-children works with deeper paths" time="0">
    </testcase>
  </testsuite>
</testsuites>