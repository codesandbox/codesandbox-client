// make sure to keep this as 'var'
// we don't want block scoping

var dartNodePreambleSelf = typeof global !== 'undefined' ? global : window;

var self = Object.create(dartNodePreambleSelf);

self.scheduleImmediate =
  typeof setImmediate !== 'undefined'
    ? function (cb) {
        setImmediate(cb);
      }
    : function (cb) {
        setTimeout(cb, 0);
      };

// CommonJS globals.
self.exports = exports;

// Node.js specific exports, check to see if they exist & or polyfilled

if (typeof process !== 'undefined') {
  self.process = process;
}

if (typeof __dirname !== 'undefined') {
  self.__dirname = __dirname;
}

if (typeof __filename !== 'undefined') {
  self.__filename = __filename;
}

if (typeof Buffer !== 'undefined') {
  self.Buffer = Buffer;
}

// if we're running in a browser, Dart supports most of this out of box
// make sure we only run these in Node.js environment

var dartNodeIsActuallyNode = !dartNodePreambleSelf.window;

try {
  // Check if we're in a Web Worker instead.
  if (
    'undefined' !== typeof WorkerGlobalScope &&
    dartNodePreambleSelf instanceof WorkerGlobalScope
  ) {
    dartNodeIsActuallyNode = false;
  }

  // Check if we're in Electron, with Node.js integration, and override if true.
  if (
    'undefined' !== typeof process &&
    process.versions &&
    process.versions.hasOwnProperty('electron') &&
    process.versions.hasOwnProperty('node')
  ) {
    dartNodeIsActuallyNode = true;
  }
} catch (e) {}

if (dartNodeIsActuallyNode) {
  // This line is to:
  // 1) Prevent Webpack from bundling.
  // 2) In Webpack on Node.js, make sure we're using the native Node.js require, which is available via __non_webpack_require__
  // https://github.com/mbullington/node_preamble.dart/issues/18#issuecomment-527305561
  var url = ('undefined' !== typeof __webpack_require__
    ? __non_webpack_require__
    : require)('url');

  // Setting `self.location=` in Electron throws a `TypeError`, so we define it
  // as a property instead to be safe.
  Object.defineProperty(self, 'location', {
    value: {
      get href() {
        if (url.pathToFileURL) {
          return url.pathToFileURL(process.cwd()).href + '/';
        } else {
          // This isn't really a correct transformation, but it's the best we have
          // for versions of Node <10.12.0 which introduced `url.pathToFileURL()`.
          // For example, it will fail for paths that contain characters that need
          // to be escaped in URLs.
          return (
            'file://' +
            (function () {
              var cwd = process.cwd();
              if (process.platform != 'win32') return cwd;
              return '/' + cwd.replace(/\\/g, '/');
            })() +
            '/'
          );
        }
      },
    },
  });

  (function () {
    function computeCurrentScript() {
      try {
        throw new Error();
      } catch (e) {
        var stack = e.stack;
        var re = new RegExp('^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$', 'mg');
        var lastMatch = null;
        do {
          var match = re.exec(stack);
          if (match != null) lastMatch = match;
        } while (match != null);
        return lastMatch[1];
      }
    }

    // Setting `self.document=` isn't known to throw an error anywhere like
    // `self.location=` does on Electron, but it's better to be future-proof
    // just in case..
    var cachedCurrentScript = null;
    Object.defineProperty(self, 'document', {
      value: {
        get currentScript() {
          if (cachedCurrentScript == null) {
            cachedCurrentScript = { src: computeCurrentScript() };
          }
          return cachedCurrentScript;
        },
      },
    });
  })();

  self.dartDeferredLibraryLoader = function (
    uri,
    successCallback,
    errorCallback
  ) {
    try {
      load(uri);
      successCallback();
    } catch (error) {
      errorCallback(error);
    }
  };
}

self.fs = require('fs');
self.readline = require('readline');
// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, no-legacy-javascript), the Dart to JavaScript compiler version: 2.14.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = (function () {
    var cls = function () {};
    cls.prototype = { p: {} };
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (
        typeof navigator != 'undefined' &&
        typeof navigator.userAgent == 'string' &&
        navigator.userAgent.indexOf('Chrome/') >= 0
      )
        return true;
      if (typeof version == 'function' && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v)) return true;
      }
    } catch (_) {}
    return false;
  })();
  function setFunctionNamesIfNecessary(holders) {
    function t() {}
    if (typeof t.name == 'string') return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function') f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype['$is' + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function () {
      holder[getterName] = function () {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else result = holder[name];
      } finally {
        if (result === sentinelInProgress) holder[name] = null;
        holder[getterName] = function () {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function () {
      if (holder[name] === uninitializedSentinel) holder[name] = initializer();
      holder[getterName] = function () {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function () {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) H.throwLateFieldADI(name);
        holder[name] = value;
      }
      holder[getterName] = function () {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {}
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var name = parameters.fs[0];
    if (isIntercepted)
      return new Function(
        'parameters, createTearOffClass, cache',
        'return function tearOff_' +
          name +
          functionCounter++ +
          '(receiver) {' +
          'if (cache === null) cache = createTearOffClass(parameters);' +
          'return new cache(receiver, this);' +
          '}'
      )(parameters, H.closureFromTearOff, null);
    else
      return new Function(
        'parameters, createTearOffClass, cache',
        'return function tearOff_' +
          name +
          functionCounter++ +
          '() {' +
          'if (cache === null) cache = createTearOffClass(parameters);' +
          'return new cache(this, null);' +
          '}'
      )(parameters, H.closureFromTearOff, null);
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function () {
      if (cache === null) cache = H.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(
    container,
    isStatic,
    isIntercepted,
    requiredParameterCount,
    optionalParameterDefaultValues,
    callNames,
    funsOrNames,
    funType,
    applyIndex,
    needsDirectAccess
  ) {
    if (typeof funType == 'number') funType += typesOffset;
    return {
      co: container,
      iS: isStatic,
      iI: isIntercepted,
      rC: requiredParameterCount,
      dV: optionalParameterDefaultValues,
      cs: callNames,
      fs: funsOrNames,
      fT: funType,
      aI: applyIndex || 0,
      nDA: needsDirectAccess,
    };
  }
  function installStaticTearOff(
    holder,
    getterName,
    requiredParameterCount,
    optionalParameterDefaultValues,
    callNames,
    funsOrNames,
    funType,
    applyIndex
  ) {
    var parameters = tearOffParameters(
      holder,
      true,
      false,
      requiredParameterCount,
      optionalParameterDefaultValues,
      callNames,
      funsOrNames,
      funType,
      applyIndex,
      false
    );
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(
    prototype,
    getterName,
    isIntercepted,
    requiredParameterCount,
    optionalParameterDefaultValues,
    callNames,
    funsOrNames,
    funType,
    applyIndex,
    needsDirectAccess
  ) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(
      prototype,
      false,
      isIntercepted,
      requiredParameterCount,
      optionalParameterDefaultValues,
      callNames,
      funsOrNames,
      funType,
      applyIndex,
      !!needsDirectAccess
    );
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = (function () {
    var mkInstance = function (
        isIntercepted,
        requiredParameterCount,
        optionalParameterDefaultValues,
        callNames,
        applyIndex
      ) {
        return function (container, getterName, name, funType) {
          return installInstanceTearOff(
            container,
            getterName,
            isIntercepted,
            requiredParameterCount,
            optionalParameterDefaultValues,
            callNames,
            [name],
            funType,
            applyIndex,
            false
          );
        };
      },
      mkStatic = function (
        requiredParameterCount,
        optionalParameterDefaultValues,
        callNames,
        applyIndex
      ) {
        return function (container, getterName, name, funType) {
          return installStaticTearOff(
            container,
            getterName,
            requiredParameterCount,
            optionalParameterDefaultValues,
            callNames,
            [name],
            funType,
            applyIndex
          );
        };
      };
    return {
      inherit: inherit,
      inheritMany: inheritMany,
      mixin: mixin,
      installStaticTearOff: installStaticTearOff,
      installInstanceTearOff: installInstanceTearOff,
      _instance_0u: mkInstance(0, 0, null, ['call$0'], 0),
      _instance_1u: mkInstance(0, 1, null, ['call$1'], 0),
      _instance_2u: mkInstance(0, 2, null, ['call$2'], 0),
      _instance_0i: mkInstance(1, 0, null, ['call$0'], 0),
      _instance_1i: mkInstance(1, 1, null, ['call$1'], 0),
      _instance_2i: mkInstance(1, 2, null, ['call$2'], 0),
      _static_0: mkStatic(0, null, ['call$0'], 0),
      _static_1: mkStatic(1, null, ['call$1'], 0),
      _static_2: mkStatic(2, null, ['call$2'], 0),
      makeConstList: makeConstList,
      lazy: lazy,
      lazyFinal: lazyFinal,
      lazyOld: lazyOld,
      updateHolder: updateHolder,
      convertToFastObject: convertToFastObject,
      setFunctionNamesIfNecessary: setFunctionNamesIfNecessary,
      updateTypes: updateTypes,
      setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag,
      setOrUpdateLeafTags: setOrUpdateLeafTags,
    };
  })();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {
      MapExpression: function MapExpression(t0, t1) {
        this.pairs = t0;
        this.span = t1;
      },
      MapExpression_toString_closure: function MapExpression_toString_closure() {},
      IncludeRule: function IncludeRule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.namespace = t0;
        _.name = t1;
        _.$arguments = t2;
        _.content = t3;
        _.span = t4;
      },
      Configuration: function Configuration(t0) {
        this._values = t0;
      },
      Configuration_toString_closure: function Configuration_toString_closure() {},
      ExplicitConfiguration: function ExplicitConfiguration(t0, t1) {
        this.nodeWithSpan = t0;
        this._values = t1;
      },
      MergedExtension_merge(left, right) {
        var t4,
          t5,
          t6,
          t1 = left.extender,
          t2 = t1.selector,
          t3 = C.C_ListEquality.equals$2(
            0,
            t2.components,
            right.extender.selector.components
          );
        if (!t3 || !left.target.$eq(0, right.target))
          throw H.wrapException(
            P.ArgumentError$(
              left.toString$0(0) +
                ' and ' +
                right.toString$0(0) +
                " aren't the same extension.",
              null
            )
          );
        t3 = left.mediaContext;
        t4 = t3 == null;
        if (!t4) {
          t5 = right.mediaContext;
          t5 = t5 != null && !C.C_ListEquality.equals$2(0, t3, t5);
        } else t5 = false;
        if (t5)
          throw H.wrapException(
            E.SassException$(
              'From ' + left.span.message$1(0, '') + string$.x0aYou_m,
              right.span
            )
          );
        if (right.isOptional && right.mediaContext == null) return left;
        if (left.isOptional && t4) return right;
        t5 = left.target;
        t6 = left.span;
        if (t4) t3 = right.mediaContext;
        t2.get$maxSpecificity();
        t1 = new S.Extender(t2, false, t1.span);
        return (t1._extension = new A.MergedExtension(
          left,
          right,
          t1,
          t5,
          t3,
          true,
          t6
        ));
      },
      MergedExtension: function MergedExtension(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.left = t0;
        _.right = t1;
        _.extender = t2;
        _.target = t3;
        _.mediaContext = t4;
        _.isOptional = t5;
        _.span = t6;
      },
      _modify(map, keys, modify, addNesting) {
        var keyIterator = J.get$iterator$ax(keys);
        return keyIterator.moveNext$0()
          ? new A._modify__modifyNestedMap(
              keyIterator,
              modify,
              addNesting
            ).call$1(map)
          : modify.call$1(map);
      },
      _deepMergeImpl(map1, map2) {
        var t1 = {},
          t2 = map2.contents;
        if (t2.get$isEmpty(t2)) return map1;
        t1.mutable = false;
        t1.result = t2;
        map1.contents.forEach$1(
          0,
          new A._deepMergeImpl_closure(
            t1,
            new A._deepMergeImpl__ensureMutable(t1)
          )
        );
        if (t1.mutable) {
          t2 = type$.Value;
          t2 = new A.SassMap(H.ConstantMap_ConstantMap$from(t1.result, t2, t2));
          t1 = t2;
        } else t1 = map2;
        return t1;
      },
      _function2($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:map'
        );
      },
      _get_closure: function _get_closure() {},
      _set_closure: function _set_closure() {},
      _set__closure0: function _set__closure0(t0) {
        this.$arguments = t0;
      },
      _set_closure0: function _set_closure0() {},
      _set__closure: function _set__closure(t0) {
        this.args = t0;
      },
      _merge_closure: function _merge_closure() {},
      _merge_closure0: function _merge_closure0() {},
      _merge__closure: function _merge__closure(t0) {
        this.map2 = t0;
      },
      _deepMerge_closure: function _deepMerge_closure() {},
      _deepRemove_closure: function _deepRemove_closure() {},
      _deepRemove__closure: function _deepRemove__closure(t0) {
        this.keys = t0;
      },
      _remove_closure: function _remove_closure() {},
      _remove_closure0: function _remove_closure0() {},
      _keys_closure: function _keys_closure() {},
      _values_closure: function _values_closure() {},
      _hasKey_closure: function _hasKey_closure() {},
      _modify__modifyNestedMap: function _modify__modifyNestedMap(t0, t1, t2) {
        this.keyIterator = t0;
        this.modify = t1;
        this.addNesting = t2;
      },
      _deepMergeImpl__ensureMutable: function _deepMergeImpl__ensureMutable(
        t0
      ) {
        this._box_0 = t0;
      },
      _deepMergeImpl_closure: function _deepMergeImpl_closure(t0, t1) {
        this._box_0 = t0;
        this._ensureMutable = t1;
      },
      SassMap: function SassMap(t0) {
        this.contents = t0;
      },
      SassMap_asList_closure: function SassMap_asList_closure(t0) {
        this.result = t0;
      },
      _IterableExtension__search(_this, callback) {
        var t1, value;
        for (t1 = J.get$iterator$ax(_this); t1.moveNext$0(); ) {
          value = callback.call$1(t1.get$current());
          if (value != null) return value;
        }
      },
      StatementSearchVisitor: function StatementSearchVisitor() {},
      StatementSearchVisitor_visitIfRule_closure: function StatementSearchVisitor_visitIfRule_closure(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule__closure0: function StatementSearchVisitor_visitIfRule__closure0(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule_closure0: function StatementSearchVisitor_visitIfRule_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule__closure: function StatementSearchVisitor_visitIfRule__closure(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitChildren_closure: function StatementSearchVisitor_visitChildren_closure(
        t0
      ) {
        this.$this = t0;
      },
      Frame_Frame$parseVM(frame) {
        return A.Frame__catchFormatException(
          frame,
          new A.Frame_Frame$parseVM_closure(frame)
        );
      },
      Frame_Frame$parseV8(frame) {
        return A.Frame__catchFormatException(
          frame,
          new A.Frame_Frame$parseV8_closure(frame)
        );
      },
      Frame_Frame$_parseFirefoxEval(frame) {
        return A.Frame__catchFormatException(
          frame,
          new A.Frame_Frame$_parseFirefoxEval_closure(frame)
        );
      },
      Frame_Frame$parseFirefox(frame) {
        return A.Frame__catchFormatException(
          frame,
          new A.Frame_Frame$parseFirefox_closure(frame)
        );
      },
      Frame_Frame$parseFriendly(frame) {
        return A.Frame__catchFormatException(
          frame,
          new A.Frame_Frame$parseFriendly_closure(frame)
        );
      },
      Frame__uriOrPathToUri(uriOrPath) {
        if (C.JSString_methods.contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
          return P.Uri_parse(uriOrPath);
        else if (
          C.JSString_methods.contains$1(
            uriOrPath,
            $.$get$Frame__windowsRegExp()
          )
        )
          return P._Uri__Uri$file(uriOrPath, true);
        else if (C.JSString_methods.startsWith$1(uriOrPath, '/'))
          return P._Uri__Uri$file(uriOrPath, false);
        if (C.JSString_methods.contains$1(uriOrPath, '\\'))
          return $.$get$windows().toUri$1(uriOrPath);
        return P.Uri_parse(uriOrPath);
      },
      Frame__catchFormatException(text, body) {
        var t1, exception;
        try {
          t1 = body.call$0();
          return t1;
        } catch (exception) {
          if (type$.FormatException._is(H.unwrapException(exception)))
            return new N.UnparsedFrame(
              P._Uri__Uri(null, 'unparsed', null, null),
              text
            );
          else throw exception;
        }
      },
      Frame: function Frame(t0, t1, t2, t3) {
        var _ = this;
        _.uri = t0;
        _.line = t1;
        _.column = t2;
        _.member = t3;
      },
      Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
        this.frame = t0;
      },
      Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
        this.frame = t0;
      },
      Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(
        t0
      ) {
        this.frame = t0;
      },
      Frame_Frame$_parseFirefoxEval_closure: function Frame_Frame$_parseFirefoxEval_closure(
        t0
      ) {
        this.frame = t0;
      },
      Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(
        t0
      ) {
        this.frame = t0;
      },
      Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(
        t0
      ) {
        this.frame = t0;
      },
      AsciiGlyphSet: function AsciiGlyphSet() {},
      Configuration0: function Configuration0(t0) {
        this._configuration$_values = t0;
      },
      Configuration_toString_closure0: function Configuration_toString_closure0() {},
      ExplicitConfiguration0: function ExplicitConfiguration0(t0, t1) {
        this.nodeWithSpan = t0;
        this._configuration$_values = t1;
      },
      IncludeRule0: function IncludeRule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.namespace = t0;
        _.name = t1;
        _.$arguments = t2;
        _.content = t3;
        _.span = t4;
      },
      MapExpression0: function MapExpression0(t0, t1) {
        this.pairs = t0;
        this.span = t1;
      },
      MapExpression_toString_closure0: function MapExpression_toString_closure0() {},
      _modify0(map, keys, modify, addNesting) {
        var keyIterator = J.get$iterator$ax(keys);
        return keyIterator.moveNext$0()
          ? new A._modify__modifyNestedMap0(
              keyIterator,
              modify,
              addNesting
            ).call$1(map)
          : modify.call$1(map);
      },
      _deepMergeImpl0(map1, map2) {
        var t1 = {},
          t2 = map2.contents;
        if (t2.get$isEmpty(t2)) return map1;
        t1.mutable = false;
        t1.result = t2;
        map1.contents.forEach$1(
          0,
          new A._deepMergeImpl_closure0(
            t1,
            new A._deepMergeImpl__ensureMutable0(t1)
          )
        );
        if (t1.mutable) {
          t2 = type$.Value_2;
          t2 = new A.SassMap0(
            H.ConstantMap_ConstantMap$from(t1.result, t2, t2)
          );
          t1 = t2;
        } else t1 = map2;
        return t1;
      },
      _function9($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:map'
        );
      },
      _get_closure0: function _get_closure0() {},
      _set_closure1: function _set_closure1() {},
      _set__closure2: function _set__closure2(t0) {
        this.$arguments = t0;
      },
      _set_closure2: function _set_closure2() {},
      _set__closure1: function _set__closure1(t0) {
        this.args = t0;
      },
      _merge_closure1: function _merge_closure1() {},
      _merge_closure2: function _merge_closure2() {},
      _merge__closure0: function _merge__closure0(t0) {
        this.map2 = t0;
      },
      _deepMerge_closure0: function _deepMerge_closure0() {},
      _deepRemove_closure0: function _deepRemove_closure0() {},
      _deepRemove__closure0: function _deepRemove__closure0(t0) {
        this.keys = t0;
      },
      _remove_closure1: function _remove_closure1() {},
      _remove_closure2: function _remove_closure2() {},
      _keys_closure0: function _keys_closure0() {},
      _values_closure0: function _values_closure0() {},
      _hasKey_closure0: function _hasKey_closure0() {},
      _modify__modifyNestedMap0: function _modify__modifyNestedMap0(
        t0,
        t1,
        t2
      ) {
        this.keyIterator = t0;
        this.modify = t1;
        this.addNesting = t2;
      },
      _deepMergeImpl__ensureMutable0: function _deepMergeImpl__ensureMutable0(
        t0
      ) {
        this._box_0 = t0;
      },
      _deepMergeImpl_closure0: function _deepMergeImpl_closure0(t0, t1) {
        this._box_0 = t0;
        this._ensureMutable = t1;
      },
      _NodeSassMap: function _NodeSassMap() {},
      mapConstructor_closure: function mapConstructor_closure() {},
      mapConstructor__closure: function mapConstructor__closure() {},
      mapConstructor__closure0: function mapConstructor__closure0() {},
      mapConstructor_closure0: function mapConstructor_closure0() {},
      mapConstructor_closure1: function mapConstructor_closure1() {},
      mapConstructor_closure2: function mapConstructor_closure2() {},
      mapConstructor_closure3: function mapConstructor_closure3() {},
      mapConstructor_closure4: function mapConstructor_closure4() {},
      mapConstructor_closure5: function mapConstructor_closure5() {},
      SassMap0: function SassMap0(t0) {
        this.contents = t0;
      },
      SassMap_asList_closure0: function SassMap_asList_closure0(t0) {
        this.result = t0;
      },
      MergedExtension_merge0(left, right) {
        var t4,
          t5,
          t6,
          t1 = left.extender,
          t2 = t1.selector,
          t3 = C.C_ListEquality.equals$2(
            0,
            t2.components,
            right.extender.selector.components
          );
        if (!t3 || !left.target.$eq(0, right.target))
          throw H.wrapException(
            P.ArgumentError$(
              left.toString$0(0) +
                ' and ' +
                right.toString$0(0) +
                " aren't the same extension.",
              null
            )
          );
        t3 = left.mediaContext;
        t4 = t3 == null;
        if (!t4) {
          t5 = right.mediaContext;
          t5 = t5 != null && !C.C_ListEquality.equals$2(0, t3, t5);
        } else t5 = false;
        if (t5)
          throw H.wrapException(
            E.SassException$0(
              'From ' + left.span.message$1(0, '') + string$.x0aYou_m,
              right.span
            )
          );
        if (right.isOptional && right.mediaContext == null) return left;
        if (left.isOptional && t4) return right;
        t5 = left.target;
        t6 = left.span;
        if (t4) t3 = right.mediaContext;
        t2.get$maxSpecificity();
        t1 = new S.Extender0(t2, false, t1.span);
        return (t1._extension$_extension = new A.MergedExtension0(
          left,
          right,
          t1,
          t5,
          t3,
          true,
          t6
        ));
      },
      MergedExtension0: function MergedExtension0(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.left = t0;
        _.right = t1;
        _.extender = t2;
        _.target = t3;
        _.mediaContext = t4;
        _.isOptional = t5;
        _.span = t6;
      },
      _IterableExtension__search0(_this, callback) {
        var t1, value;
        for (t1 = J.get$iterator$ax(_this); t1.moveNext$0(); ) {
          value = callback.call$1(t1.get$current());
          if (value != null) return value;
        }
      },
      StatementSearchVisitor0: function StatementSearchVisitor0() {},
      StatementSearchVisitor_visitIfRule_closure1: function StatementSearchVisitor_visitIfRule_closure1(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule__closure2: function StatementSearchVisitor_visitIfRule__closure2(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule_closure2: function StatementSearchVisitor_visitIfRule_closure2(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitIfRule__closure1: function StatementSearchVisitor_visitIfRule__closure1(
        t0
      ) {
        this.$this = t0;
      },
      StatementSearchVisitor_visitChildren_closure0: function StatementSearchVisitor_visitChildren_closure0(
        t0
      ) {
        this.$this = t0;
      },
      IterableNullableExtension_whereNotNull(_this, $T) {
        return A.IterableNullableExtension_whereNotNull$body(_this, $T, $T);
      },
      IterableNullableExtension_whereNotNull$body(
        $async$_this,
        $async$$T,
        $async$type
      ) {
        return P._makeSyncStarIterable(function () {
          var _this = $async$_this,
            $T = $async$$T;
          var $async$goto = 0,
            $async$handler = 1,
            $async$currentError,
            t1,
            element;
          return function $async$IterableNullableExtension_whereNotNull(
            $async$errorCode,
            $async$result
          ) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = _this.get$iterator(_this);
                case 2:
                  // for condition
                  if (!t1.moveNext$0()) {
                    // goto after for
                    $async$goto = 3;
                    break;
                  }
                  element = t1.get$current();
                  $async$goto = element != null ? 4 : 5;
                  break;
                case 4:
                  // then
                  $async$goto = 6;
                  return element;
                case 6:
                // after yield
                case 5:
                  // join
                  // goto for condition
                  $async$goto = 2;
                  break;
                case 3:
                  // after for
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, $async$type);
      },
      IterableIntegerExtension_get_sum(_this) {
        var t1, t2, result;
        for (
          t1 = new H.MappedIterator(
            J.get$iterator$ax(_this.__internal$_iterable),
            _this._f
          ),
            t2 = H._instanceType(t1)._rest[1],
            result = 0;
          t1.moveNext$0();

        )
          result += t2._as(t1.__internal$_current);
        return result;
      },
      _combine(hash, value) {
        hash = (hash + value) & 536870911;
        hash = (hash + ((hash & 524287) << 10)) & 536870911;
        return hash ^ (hash >>> 6);
      },
      _finish(hash) {
        hash = (hash + ((hash & 67108863) << 3)) & 536870911;
        hash ^= hash >>> 11;
        return (hash + ((hash & 16383) << 15)) & 536870911;
      },
    },
    B = {
      ReplAdapter: function ReplAdapter(t0) {
        this.repl = t0;
        this.rl = null;
      },
      ReplAdapter_runAsync_closure: function ReplAdapter_runAsync_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.rl = t2;
        _.runController = t3;
      },
      ReplAdapter_runAsync__closure: function ReplAdapter_runAsync__closure(
        t0
      ) {
        this.lineController = t0;
      },
      Stdin: function Stdin() {},
      Stdout: function Stdout() {},
      ReadlineModule: function ReadlineModule() {},
      ReadlineOptions: function ReadlineOptions() {},
      ReadlineInterface: function ReadlineInterface() {},
      InternalStyle: function InternalStyle() {},
      ModifiableCssNode: function ModifiableCssNode() {},
      ModifiableCssParentNode: function ModifiableCssParentNode() {},
      ModifiableCssSupportsRule$(condition, span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        return new B.ModifiableCssSupportsRule(
          condition,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t1
        );
      },
      ModifiableCssSupportsRule: function ModifiableCssSupportsRule(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _._children = t3;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      CssNode: function CssNode() {},
      CssParentNode: function CssParentNode() {},
      AstNode: function AstNode() {},
      _FakeAstNode: function _FakeAstNode(t0) {
        this._callback = t0;
      },
      ArgumentDeclaration_ArgumentDeclaration$parse(contents, url) {
        return L.ScssParser$(contents, null, url).parseArgumentDeclaration$0();
      },
      ArgumentDeclaration: function ArgumentDeclaration(t0, t1, t2) {
        this.$arguments = t0;
        this.restArgument = t1;
        this.span = t2;
      },
      ArgumentDeclaration_verify_closure: function ArgumentDeclaration_verify_closure() {},
      ArgumentDeclaration_verify_closure0: function ArgumentDeclaration_verify_closure0() {},
      DynamicImport: function DynamicImport(t0, t1) {
        this.urlString = t0;
        this.span = t1;
      },
      ForRule$(variable, from, to, children, span, exclusive) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new B.ForRule(variable, from, to, exclusive, span, t1, t2);
      },
      ForRule: function ForRule(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.variable = t0;
        _.from = t1;
        _.to = t2;
        _.isExclusive = t3;
        _.span = t4;
        _.children = t5;
        _.hasDeclarations = t6;
      },
      ImportRule: function ImportRule(t0, t1) {
        this.imports = t0;
        this.span = t1;
      },
      ReturnRule: function ReturnRule(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      SilentComment: function SilentComment(t0, t1) {
        this.text = t0;
        this.span = t1;
      },
      SupportsRule$(condition, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new B.SupportsRule(condition, span, t1, t2);
      },
      SupportsRule: function SupportsRule(t0, t1, t2, t3) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      ExecutableOptions__separator(text) {
        var t1 = $.$get$ExecutableOptions__separatorBar(),
          t2 = C.JSString_methods.$mul(t1, 3) + ' ';
        t2 =
          t2 +
          (J.$eq$(self.process.stdout.isTTY, true) ? '\x1b[1m' : '') +
          text;
        return (
          t2 +
          (J.$eq$(self.process.stdout.isTTY, true) ? '\x1b[0m' : '') +
          ' ' +
          C.JSString_methods.$mul(t1, 35 - text.length)
        );
      },
      ExecutableOptions__fail(message) {
        return H.throwExpression(B.UsageException$(message));
      },
      ExecutableOptions_ExecutableOptions$parse(args) {
        var options, error, exception, t1;
        try {
          options = new B.ExecutableOptions(
            G.Parser$(
              null,
              $.$get$ExecutableOptions__parser(),
              P.ListQueue_ListQueue$of(args, type$.String),
              null,
              null
            ).parse$0()
          );
          if (H._asBool(options._options.$index(0, 'help')))
            B.ExecutableOptions__fail('Compile Sass to CSS.');
          return options;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            error = t1;
            B.ExecutableOptions__fail(J.get$message$x(error));
          } else throw exception;
        }
      },
      UsageException$(message) {
        return new B.UsageException(message);
      },
      ExecutableOptions: function ExecutableOptions(t0) {
        var _ = this;
        _._options = t0;
        _.__ExecutableOptions__sourceDirectoriesToDestinations = _._sourcesToDestinations = _.__ExecutableOptions_interactive = null;
      },
      ExecutableOptions__parser_closure: function ExecutableOptions__parser_closure() {},
      ExecutableOptions_interactive_closure: function ExecutableOptions_interactive_closure(
        t0
      ) {
        this.$this = t0;
      },
      ExecutableOptions_emitErrorCss_closure: function ExecutableOptions_emitErrorCss_closure() {},
      UsageException: function UsageException(t0) {
        this.message = t0;
      },
      AsyncImporter: function AsyncImporter() {},
      fromImport() {
        var t1 = H._asBoolQ($.Zone__current.$index(0, C.Symbol__inImportRule));
        return t1 === true;
      },
      resolveImportPath(path) {
        var t1,
          extension = X.ParsedPath_ParsedPath$parse(
            path,
            $.$get$context().style
          )._splitExtension$1(1)[1];
        if (
          extension === '.sass' ||
          extension === '.scss' ||
          extension === '.css'
        ) {
          t1 = B.fromImport()
            ? new B.resolveImportPath_closure(path, extension).call$0()
            : null;
          return t1 == null ? B._exactlyOne(B._tryPath(path)) : t1;
        }
        t1 = B.fromImport()
          ? new B.resolveImportPath_closure0(path).call$0()
          : null;
        if (t1 == null) t1 = B._exactlyOne(B._tryPathWithExtensions(path));
        return t1 == null ? B._tryPathAsDirectory(path) : t1;
      },
      _tryPathWithExtensions(path) {
        var result = B._tryPath(path + '.sass');
        C.JSArray_methods.addAll$1(result, B._tryPath(path + '.scss'));
        return result.length !== 0 ? result : B._tryPath(path + '.css');
      },
      _tryPath(path) {
        var t1 = $.$get$context(),
          partial = D.join(
            t1.dirname$1(path),
            '_' + X.ParsedPath_ParsedPath$parse(path, t1.style).get$basename(),
            null
          );
        t1 = H._setArrayType([], type$.JSArray_String);
        if (B.fileExists(partial)) t1.push(partial);
        if (B.fileExists(path)) t1.push(path);
        return t1;
      },
      _tryPathAsDirectory(path) {
        var t1;
        if (!B.dirExists(path)) return null;
        t1 = B.fromImport()
          ? new B._tryPathAsDirectory_closure(path).call$0()
          : null;
        return t1 == null
          ? B._exactlyOne(B._tryPathWithExtensions(D.join(path, 'index', null)))
          : t1;
      },
      _exactlyOne(paths) {
        var t1 = paths.length;
        if (t1 === 0) return null;
        if (t1 === 1) return C.JSArray_methods.get$first(paths);
        throw H.wrapException(
          string$.It_s_n +
            C.JSArray_methods.map$1$1(
              paths,
              new B._exactlyOne_closure(),
              type$.String
            ).join$1(0, '\n')
        );
      },
      resolveImportPath_closure: function resolveImportPath_closure(t0, t1) {
        this.path = t0;
        this.extension = t1;
      },
      resolveImportPath_closure0: function resolveImportPath_closure0(t0) {
        this.path = t0;
      },
      _tryPathAsDirectory_closure: function _tryPathAsDirectory_closure(t0) {
        this.path = t0;
      },
      _exactlyOne_closure: function _exactlyOne_closure() {},
      readFile(path) {
        var sourceFile,
          t1,
          i,
          contents = H._asString(B._readFile(path, 'utf8'));
        if (!C.JSString_methods.contains$1(contents, '\ufffd')) return contents;
        sourceFile = Y.SourceFile$fromString(
          contents,
          $.$get$context().toUri$1(path)
        );
        for (t1 = contents.length, i = 0; i < t1; ++i) {
          if (C.JSString_methods._codeUnitAt$1(contents, i) !== 65533) continue;
          throw H.wrapException(
            E.SassException$(
              'Invalid UTF-8.',
              Y.FileLocation$_(sourceFile, i).pointSpan$0()
            )
          );
        }
        return contents;
      },
      _readFile(path, encoding) {
        return B._systemErrorToFileSystemException(
          new B._readFile_closure(path, encoding)
        );
      },
      writeFile(path, contents) {
        return B._systemErrorToFileSystemException(
          new B.writeFile_closure(path, contents)
        );
      },
      deleteFile(path) {
        return B._systemErrorToFileSystemException(
          new B.deleteFile_closure(path)
        );
      },
      readStdin() {
        return B.readStdin$body();
      },
      readStdin$body() {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.String),
          $async$returnValue,
          sink,
          t1,
          t2,
          completer;
        var $async$readStdin = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t2 = new P._Future($.Zone__current, type$._Future_String);
                completer = new P._AsyncCompleter(
                  t2,
                  type$._AsyncCompleter_String
                );
                t1.contents = null;
                sink = new P._StringCallbackSink(
                  new B.readStdin_closure(t1, completer),
                  new P.StringBuffer('')
                ).asUtf8Sink$1(false);
                J.on$2$x(
                  J.get$stdin$x(self.process),
                  'data',
                  P.allowInterop(new B.readStdin_closure0(sink))
                );
                J.on$2$x(
                  J.get$stdin$x(self.process),
                  'end',
                  P.allowInterop(new B.readStdin_closure1(sink))
                );
                J.on$2$x(
                  J.get$stdin$x(self.process),
                  'error',
                  P.allowInterop(new B.readStdin_closure2(completer))
                );
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$readStdin, $async$completer);
      },
      fileExists(path) {
        return B._systemErrorToFileSystemException(
          new B.fileExists_closure(path)
        );
      },
      dirExists(path) {
        return B._systemErrorToFileSystemException(
          new B.dirExists_closure(path)
        );
      },
      ensureDir(path) {
        return B._systemErrorToFileSystemException(
          new B.ensureDir_closure(path)
        );
      },
      listDir(path, recursive) {
        return B._systemErrorToFileSystemException(
          new B.listDir_closure(recursive, path)
        );
      },
      modificationTime(path) {
        return B._systemErrorToFileSystemException(
          new B.modificationTime_closure(path)
        );
      },
      _systemErrorToFileSystemException(callback) {
        var error, systemError, t1, exception, t2;
        try {
          t1 = callback.call$0();
          return t1;
        } catch (exception) {
          error = H.unwrapException(exception);
          systemError = type$.JsSystemError._as(error);
          t1 = systemError;
          t2 = J.getInterceptor$x(t1);
          throw H.wrapException(
            new B.FileSystemException(
              J.substring$2$s(
                t2.get$message(t1),
                (H.S(t2.get$code(t1)) + ': ').length,
                J.get$length$asx(t2.get$message(t1)) -
                  (
                    ', ' +
                    H.S(t2.get$syscall(t1)) +
                    " '" +
                    H.S(t2.get$path(t1)) +
                    "'"
                  ).length
              ),
              J.get$path$x(systemError)
            )
          );
        }
      },
      isWindows() {
        return J.$eq$(J.get$platform$x(self.process), 'win32');
      },
      FileSystemException: function FileSystemException(t0, t1) {
        this.message = t0;
        this.path = t1;
      },
      Stderr: function Stderr(t0) {
        this._stderr = t0;
      },
      _readFile_closure: function _readFile_closure(t0, t1) {
        this.path = t0;
        this.encoding = t1;
      },
      writeFile_closure: function writeFile_closure(t0, t1) {
        this.path = t0;
        this.contents = t1;
      },
      deleteFile_closure: function deleteFile_closure(t0) {
        this.path = t0;
      },
      readStdin_closure: function readStdin_closure(t0, t1) {
        this._box_0 = t0;
        this.completer = t1;
      },
      readStdin_closure0: function readStdin_closure0(t0) {
        this.sink = t0;
      },
      readStdin_closure1: function readStdin_closure1(t0) {
        this.sink = t0;
      },
      readStdin_closure2: function readStdin_closure2(t0) {
        this.completer = t0;
      },
      fileExists_closure: function fileExists_closure(t0) {
        this.path = t0;
      },
      dirExists_closure: function dirExists_closure(t0) {
        this.path = t0;
      },
      ensureDir_closure: function ensureDir_closure(t0) {
        this.path = t0;
      },
      listDir_closure: function listDir_closure(t0, t1) {
        this.recursive = t0;
        this.path = t1;
      },
      listDir__closure: function listDir__closure(t0) {
        this.path = t0;
      },
      listDir__closure0: function listDir__closure0() {},
      listDir_closure_list: function listDir_closure_list() {},
      listDir__list_closure: function listDir__list_closure(t0, t1) {
        this.parent = t0;
        this.list = t1;
      },
      modificationTime_closure: function modificationTime_closure(t0) {
        this.path = t0;
      },
      ShadowedModuleView_ifNecessary(inner, functions, mixins, variables, $T) {
        return B.ShadowedModuleView__needsBlocklist(
          inner.get$variables(),
          variables
        ) ||
          B.ShadowedModuleView__needsBlocklist(
            inner.get$functions(inner),
            functions
          ) ||
          B.ShadowedModuleView__needsBlocklist(inner.get$mixins(), mixins)
          ? new B.ShadowedModuleView(
              inner,
              B.ShadowedModuleView__shadowedMap(
                inner.get$variables(),
                variables,
                type$.Value
              ),
              B.ShadowedModuleView__shadowedMap(
                inner.get$variableNodes(),
                variables,
                type$.AstNode
              ),
              B.ShadowedModuleView__shadowedMap(
                inner.get$functions(inner),
                functions,
                $T
              ),
              B.ShadowedModuleView__shadowedMap(inner.get$mixins(), mixins, $T),
              $T._eval$1('ShadowedModuleView<0>')
            )
          : null;
      },
      ShadowedModuleView__shadowedMap(map, blocklist, $V) {
        var t1 = B.ShadowedModuleView__needsBlocklist(map, blocklist);
        return !t1
          ? map
          : K.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
      },
      ShadowedModuleView__needsBlocklist(map, blocklist) {
        var t1 =
          map.get$isNotEmpty(map) && blocklist.any$1(0, map.get$containsKey());
        return t1;
      },
      ShadowedModuleView: function ShadowedModuleView(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._shadowed_view$_inner = t0;
        _.variables = t1;
        _.variableNodes = t2;
        _.functions = t3;
        _.mixins = t4;
        _.$ti = t5;
      },
      _PropertyDescriptor: function _PropertyDescriptor() {},
      toSentence(iter, conjunction) {
        var t1 = iter.__internal$_iterable,
          t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) === 1)
          return J.toString$0$(iter._f.call$1(t2.get$first(t1)));
        return (
          H.TakeIterable_TakeIterable(
            iter,
            t2.get$length(t1) - 1,
            H._instanceType(iter)._eval$1('Iterable.E')
          ).join$1(0, ', ') +
          (' ' + conjunction + ' ' + H.S(iter._f.call$1(t2.get$last(t1))))
        );
      },
      indent(string, indentation) {
        return new H.MappedListIterable(
          H._setArrayType(string.split('\n'), type$.JSArray_String),
          new B.indent_closure(indentation),
          type$.MappedListIterable_String_String
        ).join$1(0, '\n');
      },
      pluralize($name, number, plural) {
        if (number === 1) return $name;
        if (plural != null) return plural;
        return $name + 's';
      },
      trimAscii(string, excludeEscape) {
        var t1,
          start = B._firstNonWhitespace(string);
        if (start == null) t1 = '';
        else {
          t1 = B._lastNonWhitespace(string, true);
          t1.toString;
          t1 = C.JSString_methods.substring$2(string, start, t1 + 1);
        }
        return t1;
      },
      trimAsciiRight(string, excludeEscape) {
        var end = B._lastNonWhitespace(string, excludeEscape);
        return end == null
          ? ''
          : C.JSString_methods.substring$2(string, 0, end + 1);
      },
      _firstNonWhitespace(string) {
        var t1, i, t2;
        for (t1 = string.length, i = 0; i < t1; ++i) {
          t2 = C.JSString_methods._codeUnitAt$1(string, i);
          if (!(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12))
            return i;
        }
        return null;
      },
      _lastNonWhitespace(string, excludeEscape) {
        var t1, i, codeUnit;
        for (t1 = string.length, i = t1 - 1; i >= 0; --i) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, i);
          if (
            !(
              codeUnit === 32 ||
              codeUnit === 9 ||
              codeUnit === 10 ||
              codeUnit === 13 ||
              codeUnit === 12
            )
          )
            if (excludeEscape && i !== 0 && i !== t1 && codeUnit === 92)
              return i + 1;
            else return i;
        }
        return null;
      },
      isPublic(member) {
        var start = C.JSString_methods._codeUnitAt$1(member, 0);
        return start !== 45 && start !== 95;
      },
      flattenVertically(iterable, $T) {
        var result,
          t1 = iterable.$ti
            ._eval$1('@<ListIterable.E>')
            ._bind$1($T._eval$1('QueueList<0>'))
            ._eval$1('MappedListIterable<1,2>'),
          queues = P.List_List$of(
            new H.MappedListIterable(
              iterable,
              new B.flattenVertically_closure($T),
              t1
            ),
            true,
            t1._eval$1('ListIterable.E')
          );
        if (queues.length === 1) return C.JSArray_methods.get$first(queues);
        result = H._setArrayType([], $T._eval$1('JSArray<0>'));
        for (; queues.length !== 0; ) {
          if (!!queues.fixed$length)
            H.throwExpression(P.UnsupportedError$('removeWhere'));
          C.JSArray_methods._removeWhere$2(
            queues,
            new B.flattenVertically_closure0(result, $T),
            true
          );
        }
        return result;
      },
      firstOrNull(iterable) {
        var iterator = J.get$iterator$ax(iterable);
        return iterator.moveNext$0() ? iterator.get$current() : null;
      },
      codepointIndexToCodeUnitIndex(string, codepointIndex) {
        var codeUnitIndex, i, codeUnitIndex0;
        for (codeUnitIndex = 0, i = 0; i < codepointIndex; ++i) {
          codeUnitIndex0 = codeUnitIndex + 1;
          codeUnitIndex =
            C.JSString_methods._codeUnitAt$1(string, codeUnitIndex) >>> 10 ===
            54
              ? codeUnitIndex0 + 1
              : codeUnitIndex0;
        }
        return codeUnitIndex;
      },
      codeUnitIndexToCodepointIndex(string, codeUnitIndex) {
        var codepointIndex, i;
        for (
          codepointIndex = 0, i = 0;
          i < codeUnitIndex;
          i =
            (C.JSString_methods._codeUnitAt$1(string, i) >>> 10 === 54
              ? i + 1
              : i) + 1
        )
          ++codepointIndex;
        return codepointIndex;
      },
      frameForSpan(span, member, url) {
        var t2,
          t3,
          t4,
          t1 = url == null ? span.file.url : url;
        if (t1 == null) t1 = $.$get$_noSourceUrl();
        t2 = span.file;
        t3 = span._file$_start;
        t4 = Y.FileLocation$_(t2, t3);
        t4 = t4.file.getLine$1(t4.offset);
        t3 = Y.FileLocation$_(t2, t3);
        return new A.Frame(
          t1,
          t4 + 1,
          t3.file.getColumn$1(t3.offset) + 1,
          member
        );
      },
      declarationName(span) {
        var text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(
            span.file._decodedChars,
            span._file$_start,
            span._end
          ),
          0,
          null
        );
        return B.trimAsciiRight(
          C.JSString_methods.substring$2(
            text,
            0,
            C.JSString_methods.indexOf$1(text, ':')
          ),
          false
        );
      },
      unvendor($name) {
        var i,
          t1 = $name.length;
        if (t1 < 2) return $name;
        if (C.JSString_methods._codeUnitAt$1($name, 0) !== 45) return $name;
        if (C.JSString_methods._codeUnitAt$1($name, 1) === 45) return $name;
        for (i = 2; i < t1; ++i)
          if (C.JSString_methods._codeUnitAt$1($name, i) === 45)
            return C.JSString_methods.substring$1($name, i + 1);
        return $name;
      },
      equalsIgnoreCase(string1, string2) {
        var t1, i;
        if (string1 === string2) return true;
        if (string1 == null || false) return false;
        t1 = string1.length;
        if (t1 !== string2.length) return false;
        for (i = 0; i < t1; ++i)
          if (
            !T.characterEqualsIgnoreCase(
              C.JSString_methods._codeUnitAt$1(string1, i),
              C.JSString_methods._codeUnitAt$1(string2, i)
            )
          )
            return false;
        return true;
      },
      startsWithIgnoreCase(string, prefix) {
        var i,
          t1 = prefix.length;
        if (string.length < t1) return false;
        for (i = 0; i < t1; ++i)
          if (
            !T.characterEqualsIgnoreCase(
              C.JSString_methods._codeUnitAt$1(string, i),
              C.JSString_methods._codeUnitAt$1(prefix, i)
            )
          )
            return false;
        return true;
      },
      mapInPlace(list, $function) {
        var i;
        for (i = 0; i < list.length; ++i) list[i] = $function.call$1(list[i]);
      },
      longestCommonSubsequence(list1, list2, select, $T) {
        var t1,
          _length,
          lengths,
          t2,
          t3,
          _i,
          selections,
          i,
          i0,
          j,
          selection,
          j0;
        if (select == null) select = new B.longestCommonSubsequence_closure($T);
        t1 = J.getInterceptor$asx(list1);
        _length = t1.get$length(list1) + 1;
        lengths = J.JSArray_JSArray$allocateFixed(_length, type$.List_int);
        for (
          t2 = J.getInterceptor$asx(list2), t3 = type$.int, _i = 0;
          _i < _length;
          ++_i
        )
          lengths[_i] = P.List_List$filled(
            t2.get$length(list2) + 1,
            0,
            false,
            t3
          );
        _length = t1.get$length(list1);
        selections = J.JSArray_JSArray$allocateFixed(
          _length,
          $T._eval$1('List<0?>')
        );
        for (t3 = $T._eval$1('0?'), _i = 0; _i < _length; ++_i)
          selections[_i] = P.List_List$filled(
            t2.get$length(list2),
            null,
            false,
            t3
          );
        for (i = 0; i < t1.get$length(list1); i = i0)
          for (i0 = i + 1, j = 0; j < t2.get$length(list2); j = j0) {
            selection = select.call$2(t1.$index(list1, i), t2.$index(list2, j));
            selections[i][j] = selection;
            t3 = lengths[i0];
            j0 = j + 1;
            t3[j0] =
              selection == null
                ? Math.max(t3[j], lengths[i][j0])
                : lengths[i][j] + 1;
          }
        return new B.longestCommonSubsequence_backtrack(
          selections,
          lengths,
          $T
        ).call$2(t1.get$length(list1) - 1, t2.get$length(list2) - 1);
      },
      removeFirstWhere(list, test, orElse) {
        var i;
        for (i = 0; i < list.length; ++i) {
          if (!test.call$1(list[i])) continue;
          C.JSArray_methods.removeAt$1(list, i);
          return;
        }
        orElse.call$0();
      },
      mapAddAll2(destination, source, K1, K2, $V) {
        source.forEach$1(0, new B.mapAddAll2_closure(destination, K1, K2, $V));
      },
      setAll(map, keys, value) {
        var t1;
        for (t1 = J.get$iterator$ax(keys); t1.moveNext$0(); )
          map.$indexSet(0, t1.get$current(), value);
      },
      rotateSlice(list, start, end) {
        var i,
          next,
          element = list.$index(0, end - 1);
        for (i = start; i < end; ++i, element = next) {
          next = list.$index(0, i);
          list.$indexSet(0, i, element);
        }
      },
      mapAsync(iterable, callback, $E, $F) {
        return B.mapAsync$body(
          iterable,
          callback,
          $E,
          $F,
          $F._eval$1('Iterable<0>')
        );
      },
      mapAsync$body(iterable, callback, $E, $F, $async$type) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter($async$type),
          $async$returnValue,
          t2,
          _i,
          t1,
          $async$temp1;
        var $async$mapAsync = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = H._setArrayType([], $F._eval$1('JSArray<0>'));
                (t2 = iterable.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                $async$temp1 = t1;
                $async$goto = 6;
                return P._asyncAwait(
                  callback.call$1(iterable[_i]),
                  $async$mapAsync
                );
              case 6:
                // returning from await.
                $async$temp1.push($async$result);
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$mapAsync, $async$completer);
      },
      putIfAbsentAsync(map, key, ifAbsent, $K, $V) {
        return B.putIfAbsentAsync$body(map, key, ifAbsent, $K, $V, $V);
      },
      putIfAbsentAsync$body(map, key, ifAbsent, $K, $V, $async$type) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter($async$type),
          $async$returnValue,
          value;
        var $async$putIfAbsentAsync = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (map.containsKey$1(key)) {
                  $async$returnValue = $V._as(map.$index(0, key));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncAwait(
                  ifAbsent.call$0(),
                  $async$putIfAbsentAsync
                );
              case 3:
                // returning from await.
                value = $async$result;
                map.$indexSet(0, key, value);
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$putIfAbsentAsync, $async$completer);
      },
      copyMapOfMap(map, K1, K2, $V) {
        var t2,
          t3,
          t4,
          t5,
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(
            K1,
            K2._eval$1('@<0>')._bind$1($V)._eval$1('Map<1,2>')
          );
        for (
          t2 = map.get$entries(map), t2 = t2.get$iterator(t2);
          t2.moveNext$0();

        ) {
          t3 = t2.get$current();
          t4 = t3.key;
          t3 = t3.value;
          t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, K2, $V);
          t5.addAll$1(0, t3);
          t1.$indexSet(0, t4, t5);
        }
        return t1;
      },
      copyMapOfList(map, $K, $E) {
        var t2,
          t3,
          t1 = P.LinkedHashMap_LinkedHashMap$_empty($K, $E._eval$1('List<0>'));
        for (
          t2 = map.get$entries(map), t2 = t2.get$iterator(t2);
          t2.moveNext$0();

        ) {
          t3 = t2.get$current();
          t1.$indexSet(0, t3.key, J.toList$0$ax(t3.value));
        }
        return t1;
      },
      consumeEscapedCharacter(scanner) {
        var first, value, i, next, t1;
        scanner.expectChar$1(92);
        first = scanner.peekChar$0();
        if (first == null) return 65533;
        else if (first === 10 || first === 13 || first === 12)
          scanner.error$1(0, 'Expected escape sequence.');
        else if (T.isHex(first)) {
          for (value = 0, i = 0; i < 6; ++i) {
            next = scanner.peekChar$0();
            if (next == null || !T.isHex(next)) break;
            value = ((value << 4) >>> 0) + T.asHex(scanner.readChar$0());
          }
          t1 = scanner.peekChar$0();
          if (t1 === 32 || t1 === 9 || t1 === 10 || t1 === 13 || t1 === 12)
            scanner.readChar$0();
          if (value !== 0)
            t1 = (value >= 55296 && value <= 57343) || value >= 1114111;
          else t1 = true;
          if (t1) return 65533;
          else return value;
        } else return scanner.readChar$0();
      },
      indent_closure: function indent_closure(t0) {
        this.indentation = t0;
      },
      flattenVertically_closure: function flattenVertically_closure(t0) {
        this.T = t0;
      },
      flattenVertically_closure0: function flattenVertically_closure0(t0, t1) {
        this.result = t0;
        this.T = t1;
      },
      longestCommonSubsequence_closure: function longestCommonSubsequence_closure(
        t0
      ) {
        this.T = t0;
      },
      longestCommonSubsequence_backtrack: function longestCommonSubsequence_backtrack(
        t0,
        t1,
        t2
      ) {
        this.selections = t0;
        this.lengths = t1;
        this.T = t2;
      },
      mapAddAll2_closure: function mapAddAll2_closure(t0, t1, t2, t3) {
        var _ = this;
        _.destination = t0;
        _.K1 = t1;
        _.K2 = t2;
        _.V = t3;
      },
      ArgumentDeclaration_ArgumentDeclaration$parse0(contents, url) {
        return L.ScssParser$0(contents, null, url).parseArgumentDeclaration$0();
      },
      ArgumentDeclaration0: function ArgumentDeclaration0(t0, t1, t2) {
        this.$arguments = t0;
        this.restArgument = t1;
        this.span = t2;
      },
      ArgumentDeclaration_verify_closure1: function ArgumentDeclaration_verify_closure1() {},
      ArgumentDeclaration_verify_closure2: function ArgumentDeclaration_verify_closure2() {},
      AsyncImporter0: function AsyncImporter0() {},
      DynamicImport0: function DynamicImport0(t0, t1) {
        this.urlString = t0;
        this.span = t1;
      },
      ForRule$0(variable, from, to, children, span, exclusive) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new B.ForRule0(variable, from, to, exclusive, span, t1, t2);
      },
      ForRule0: function ForRule0(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.variable = t0;
        _.from = t1;
        _.to = t2;
        _.isExclusive = t3;
        _.span = t4;
        _.children = t5;
        _.hasDeclarations = t6;
      },
      ImportRule0: function ImportRule0(t0, t1) {
        this.imports = t0;
        this.span = t1;
      },
      AstNode0: function AstNode0() {},
      _FakeAstNode0: function _FakeAstNode0(t0) {
        this._node3$_callback = t0;
      },
      CssNode0: function CssNode0() {},
      CssParentNode0: function CssParentNode0() {},
      readFile0(path) {
        var sourceFile,
          t1,
          i,
          contents = H._asString(B._readFile0(path, 'utf8'));
        if (!C.JSString_methods.contains$1(contents, '\ufffd')) return contents;
        sourceFile = Y.SourceFile$fromString(
          contents,
          $.$get$context().toUri$1(path)
        );
        for (t1 = contents.length, i = 0; i < t1; ++i) {
          if (C.JSString_methods._codeUnitAt$1(contents, i) !== 65533) continue;
          throw H.wrapException(
            E.SassException$0(
              'Invalid UTF-8.',
              Y.FileLocation$_(sourceFile, i).pointSpan$0()
            )
          );
        }
        return contents;
      },
      _readFile0(path, encoding) {
        return B._systemErrorToFileSystemException0(
          new B._readFile_closure0(path, encoding)
        );
      },
      fileExists0(path) {
        return B._systemErrorToFileSystemException0(
          new B.fileExists_closure0(path)
        );
      },
      dirExists0(path) {
        return B._systemErrorToFileSystemException0(
          new B.dirExists_closure0(path)
        );
      },
      listDir0(path) {
        return B._systemErrorToFileSystemException0(
          new B.listDir_closure0(false, path)
        );
      },
      _systemErrorToFileSystemException0(callback) {
        var error, systemError, t1, exception, t2;
        try {
          t1 = callback.call$0();
          return t1;
        } catch (exception) {
          error = H.unwrapException(exception);
          systemError = type$.JsSystemError._as(error);
          t1 = systemError;
          t2 = J.getInterceptor$x(t1);
          throw H.wrapException(
            new B.FileSystemException0(
              J.substring$2$s(
                t2.get$message(t1),
                (H.S(t2.get$code(t1)) + ': ').length,
                J.get$length$asx(t2.get$message(t1)) -
                  (
                    ', ' +
                    H.S(t2.get$syscall(t1)) +
                    " '" +
                    H.S(t2.get$path(t1)) +
                    "'"
                  ).length
              ),
              J.get$path$x(systemError)
            )
          );
        }
      },
      FileSystemException0: function FileSystemException0(t0, t1) {
        this.message = t0;
        this.path = t1;
      },
      Stderr0: function Stderr0(t0) {
        this._node1$_stderr = t0;
      },
      _readFile_closure0: function _readFile_closure0(t0, t1) {
        this.path = t0;
        this.encoding = t1;
      },
      fileExists_closure0: function fileExists_closure0(t0) {
        this.path = t0;
      },
      dirExists_closure0: function dirExists_closure0(t0) {
        this.path = t0;
      },
      listDir_closure0: function listDir_closure0(t0, t1) {
        this.recursive = t0;
        this.path = t1;
      },
      listDir__closure1: function listDir__closure1(t0) {
        this.path = t0;
      },
      listDir__closure2: function listDir__closure2() {},
      listDir_closure_list0: function listDir_closure_list0() {},
      listDir__list_closure0: function listDir__list_closure0(t0, t1) {
        this.parent = t0;
        this.list = t1;
      },
      ModifiableCssNode0: function ModifiableCssNode0() {},
      ModifiableCssParentNode0: function ModifiableCssParentNode0() {},
      _render(options, callback) {
        B._renderAsync(options).then$1$2$onError(
          0,
          new B._render_closure(callback),
          new B._render_closure0(callback),
          type$.Null
        );
      },
      _renderAsync(options) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.RenderResult),
          $async$returnValue,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t8,
          t9,
          t10,
          t11,
          result,
          start,
          t1,
          data,
          file;
        var $async$_renderAsync = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                start = new P.DateTime(Date.now(), false);
                t1 = J.getInterceptor$x(options);
                data = t1.get$data(options);
                file = X.NullableExtension_andThen0(
                  t1.get$file(options),
                  D.path__absolute$closure()
                );
                $async$goto = data != null ? 3 : 5;
                break;
              case 3:
                // then
                t2 = B._parseImporter(options, start);
                t3 = B._parseFunctions(options, start, true);
                t4 = t1.get$indentedSyntax(options);
                t4 = !J.$eq$(t4, false) && t4 != null ? C.Syntax_Sass0 : null;
                t5 = B._parseOutputStyle(t1.get$outputStyle(options));
                t6 = J.$eq$(t1.get$indentType(options), 'tab');
                t7 = B._parseIndentWidth(t1.get$indentWidth(options));
                t8 = B._parseLineFeed(t1.get$linefeed(options));
                t9 =
                  file == null
                    ? 'stdin'
                    : $.$get$context().toUri$1(file).toString$0(0);
                t10 = t1.get$quietDeps(options);
                if (t10 == null) t10 = false;
                t11 = t1.get$verbose(options);
                if (t11 == null) t11 = false;
                t1 = t1.get$charset(options);
                if (t1 == null) t1 = true;
                $async$goto = 6;
                return P._asyncAwait(
                  X.compileStringAsync0(
                    data,
                    t1,
                    t3,
                    t7,
                    t8,
                    t2,
                    t10,
                    B._enableSourceMaps(options),
                    t5,
                    t4,
                    t9,
                    !t6,
                    t11
                  ),
                  $async$_renderAsync
                );
              case 6:
                // returning from await.
                result = $async$result;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = file != null ? 7 : 9;
                break;
              case 7:
                // then
                t2 = B._parseImporter(options, start);
                t3 = B._parseFunctions(options, start, true);
                t4 = t1.get$indentedSyntax(options);
                t4 = !J.$eq$(t4, false) && t4 != null ? C.Syntax_Sass0 : null;
                t5 = B._parseOutputStyle(t1.get$outputStyle(options));
                t6 = J.$eq$(t1.get$indentType(options), 'tab');
                t7 = B._parseIndentWidth(t1.get$indentWidth(options));
                t8 = B._parseLineFeed(t1.get$linefeed(options));
                t9 = t1.get$quietDeps(options);
                if (t9 == null) t9 = false;
                t10 = t1.get$verbose(options);
                if (t10 == null) t10 = false;
                t1 = t1.get$charset(options);
                if (t1 == null) t1 = true;
                $async$goto = 10;
                return P._asyncAwait(
                  X.compileAsync0(
                    file,
                    t1,
                    t3,
                    t7,
                    t8,
                    t2,
                    t9,
                    B._enableSourceMaps(options),
                    t5,
                    t4,
                    !t6,
                    t10
                  ),
                  $async$_renderAsync
                );
              case 10:
                // returning from await.
                result = $async$result;
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                throw H.wrapException(
                  P.ArgumentError$(
                    'Either options.data or options.file must be set.',
                    null
                  )
                );
              case 8:
              // join
              case 4:
                // join
                $async$returnValue = B._newRenderResult(options, result, start);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$_renderAsync, $async$completer);
      },
      _wrapException(exception) {
        var file,
          t1,
          t2,
          t3,
          url = G.SourceSpanException.prototype.get$span.call(exception).file
            .url;
        if (url == null) file = 'stdin';
        else
          file =
            url.get$scheme() === 'file'
              ? $.$get$context().style.pathFromUri$1(M._parseUri(url))
              : url.toString$0(0);
        t1 = C.JSString_methods.replaceFirst$2(
          exception.toString$0(0),
          'Error: ',
          ''
        );
        t2 = G.SourceSpanException.prototype.get$span.call(exception);
        t2 = Y.FileLocation$_(t2.file, t2._file$_start);
        t2 = t2.file.getLine$1(t2.offset);
        t3 = G.SourceSpanException.prototype.get$span.call(exception);
        t3 = Y.FileLocation$_(t3.file, t3._file$_start);
        return B._newRenderError(
          t1,
          t3.file.getColumn$1(t3.offset) + 1,
          file,
          t2 + 1,
          1
        );
      },
      _parseFunctions(options, start, asynch) {
        var result,
          functions = J.get$functions$x(options);
        if (functions == null) return C.List_empty19;
        result = H._setArrayType([], type$.JSArray_AsyncCallable_2);
        B.jsForEach(
          functions,
          new B._parseFunctions_closure(options, start, true, result)
        );
        return result;
      },
      _parseImporter(options, start) {
        var importers,
          t2,
          t3,
          contextOptions,
          t1 = J.getInterceptor$x(options);
        if (t1.get$importer(options) == null)
          importers = H._setArrayType([], type$.JSArray_JSFunction);
        else {
          t2 = type$.List_nullable_Object;
          t3 = type$.JSFunction;
          importers = t2._is(t1.get$importer(options))
            ? J.cast$1$0$ax(t2._as(t1.get$importer(options)), t3)
            : H._setArrayType(
                [t3._as(t1.get$importer(options))],
                type$.JSArray_JSFunction
              );
        }
        t2 = J.getInterceptor$asx(importers);
        contextOptions = t2.get$isNotEmpty(importers)
          ? B._contextOptions(options, start)
          : new P.Object();
        t1 = t1.get$includePaths(options);
        if (t1 == null) t1 = [];
        t3 = type$.String;
        P.List_List$unmodifiable(
          F.NodeImporter__addSassPath(P.List_List$from(t1, true, t3)),
          t3
        );
        return new F.NodeImporter(
          contextOptions,
          P.List_List$unmodifiable(
            t2.cast$1$0(importers, type$.dynamic),
            type$.JSFunction
          )
        );
      },
      _contextOptions(options, start) {
        var includePaths,
          t3,
          t4,
          t5,
          t6,
          t7,
          t1 = J.getInterceptor$x(options),
          t2 = t1.get$includePaths(options);
        if (t2 == null) t2 = [];
        includePaths = P.List_List$from(t2, true, type$.String);
        t2 = t1.get$file(options);
        t3 = t1.get$data(options);
        t4 = H._setArrayType([D.current()], type$.JSArray_String);
        C.JSArray_methods.addAll$1(t4, includePaths);
        t4 = C.JSArray_methods.join$1(
          t4,
          J.$eq$(J.get$platform$x(self.process), 'win32') ? ';' : ':'
        );
        t5 = J.$eq$(t1.get$indentType(options), 'tab') ? 1 : 0;
        t6 = B._parseIndentWidth(t1.get$indentWidth(options));
        if (t6 == null) t6 = 2;
        t7 = B._parseLineFeed(t1.get$linefeed(options));
        t1 = t1.get$file(options);
        if (t1 == null) t1 = 'data';
        return {
          file: t2,
          data: t3,
          includePaths: t4,
          precision: 10,
          style: 1,
          indentType: t5,
          indentWidth: t6,
          linefeed: t7.text,
          result: { stats: { start: start._core$_value, entry: t1 } },
        };
      },
      _parseOutputStyle(style) {
        if (style == null || style === 'expanded')
          return C.OutputStyle_expanded;
        if (style === 'compressed') return C.OutputStyle_compressed0;
        throw H.wrapException(
          P.ArgumentError$(
            'Unsupported output style "' + H.S(style) + '".',
            null
          )
        );
      },
      _parseIndentWidth(width) {
        if (width == null) return null;
        return H._isInt(width)
          ? width
          : P.int_parse(J.toString$0$(width), null);
      },
      _parseLineFeed(str) {
        switch (str) {
          case 'cr':
            return C.LineFeed_kMT;
          case 'crlf':
            return C.LineFeed_Mss;
          case 'lfcr':
            return C.LineFeed_a1Y;
          default:
            return C.LineFeed_D6m;
        }
      },
      _newRenderResult(options, result, start) {
        var t3,
          sourceMapOption,
          sourceMapPath,
          t4,
          sourceMapDir,
          outFile,
          t5,
          file,
          sourceMapDirUrl,
          i,
          source,
          t6,
          t7,
          sourceMapBytes,
          buffer,
          indices,
          url,
          t8,
          t9,
          _null = null,
          t1 = Date.now(),
          t2 = result._compile_result$_serialize,
          css = t2.css;
        if (B._enableSourceMaps(options)) {
          t3 = J.getInterceptor$x(options);
          sourceMapOption = t3.get$sourceMap(options);
          if (typeof sourceMapOption == 'string')
            sourceMapPath = sourceMapOption;
          else {
            t4 = t3.get$outFile(options);
            t4.toString;
            sourceMapPath = J.$add$ansx(t4, '.map');
          }
          t4 = $.$get$context();
          sourceMapDir = t4.dirname$1(sourceMapPath);
          t2 = t2.sourceMap;
          t2.toString;
          t2.sourceRoot = t3.get$sourceMapRoot(options);
          outFile = t3.get$outFile(options);
          t5 = outFile == null;
          if (t5) {
            file = t3.get$file(options);
            if (file == null) t2.targetUrl = 'stdin.css';
            else
              t2.targetUrl = t4
                .toUri$1(t4.withoutExtension$1(file) + '.css')
                .toString$0(0);
          } else
            t2.targetUrl = t4
              .toUri$1(t4.relative$2$from(outFile, sourceMapDir))
              .toString$0(0);
          sourceMapDirUrl = t4.toUri$1(sourceMapDir).toString$0(0);
          for (t4 = t2.urls, i = 0; i < t4.length; ++i) {
            source = t4[i];
            if (source === 'stdin') continue;
            t6 = $.$get$url();
            t7 = t6.style;
            if (t7.rootLength$1(source) <= 0 || t7.isRootRelative$1(source))
              continue;
            t4[i] = t6.relative$2$from(source, sourceMapDirUrl);
          }
          t4 = t3.get$sourceMapContents(options);
          sourceMapBytes = self.Buffer.from(
            C.C_JsonCodec.encode$2$toEncodable(
              t2.toJson$1$includeSourceContents(
                !J.$eq$(t4, false) && t4 != null
              ),
              _null
            ),
            'utf8'
          );
          t2 = t3.get$omitSourceMapUrl(options);
          if (!(!J.$eq$(t2, false) && t2 != null)) {
            t2 = t3.get$sourceMapEmbed(options);
            if (!J.$eq$(t2, false) && t2 != null) {
              buffer = new P.StringBuffer('');
              indices = H._setArrayType([-1], type$.JSArray_int);
              P.UriData__writeUri(
                'application/json',
                _null,
                _null,
                buffer,
                indices
              );
              indices.push(buffer._contents.length);
              t2 = buffer._contents += ';base64,';
              indices.push(t2.length - 1);
              t2 = C.C_Base64Encoder.startChunkedConversion$1(
                new P._StringSinkConversionSink(buffer)
              );
              t3 = sourceMapBytes.length;
              P.RangeError_checkValidRange(0, t3, t3);
              t2._convert$_add$4(sourceMapBytes, 0, t3, true);
              t2 = buffer._contents;
              url = new P.UriData(
                t2.charCodeAt(0) == 0 ? t2 : t2,
                indices,
                _null
              ).get$uri();
            } else {
              if (t5) t2 = sourceMapPath;
              else {
                t2 = $.$get$context();
                t2 = t2.relative$2$from(sourceMapPath, t2.dirname$1(outFile));
              }
              url = $.$get$context().toUri$1(t2);
            }
            css += '\n\n/*# sourceMappingURL=' + url.toString$0(0) + ' */';
          }
        } else sourceMapBytes = _null;
        t2 = self.Buffer.from(css, 'utf8');
        t3 = J.get$file$x(options);
        if (t3 == null) t3 = 'data';
        t4 = start._core$_value;
        t1 = new P.DateTime(t1, false)._core$_value;
        t5 = C.JSInt_methods._tdivFast$1(1000 * (t1 - t4), 1000);
        t6 = H._setArrayType([], type$.JSArray_String);
        for (
          t7 = result._evaluate.loadedUrls,
            t7 = P._LinkedHashSetIterator$(t7, t7._collection$_modifications),
            t8 = H._instanceType(t7)._precomputed1;
          t7.moveNext$0();

        ) {
          t9 = t8._as(t7._collection$_current);
          if (t9.get$scheme() === 'file')
            t6.push($.$get$context().style.pathFromUri$1(M._parseUri(t9)));
          else t6.push(t9.toString$0(0));
        }
        return {
          css: t2,
          map: sourceMapBytes,
          stats: {
            entry: t3,
            start: t4,
            end: t1,
            duration: t5,
            includedFiles: t6,
          },
        };
      },
      _enableSourceMaps(options) {
        var t2,
          t1 = J.getInterceptor$x(options);
        if (typeof t1.get$sourceMap(options) != 'string') {
          t2 = t1.get$sourceMap(options);
          t1 =
            !J.$eq$(t2, false) && t2 != null && t1.get$outFile(options) != null;
        } else t1 = true;
        return t1;
      },
      _newRenderError(message, column, file, line, $status) {
        var error = new self.Error(message);
        error.formatted = 'Error: ' + message;
        if (line != null) error.line = line;
        if (column != null) error.column = column;
        if (file != null) error.file = file;
        error.status = $status;
        return error;
      },
      _render_closure: function _render_closure(t0) {
        this.callback = t0;
      },
      _render_closure0: function _render_closure0(t0) {
        this.callback = t0;
      },
      _parseFunctions_closure: function _parseFunctions_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.options = t0;
        _.start = t1;
        _.asynch = t2;
        _.result = t3;
      },
      _parseFunctions__closure: function _parseFunctions__closure(t0, t1) {
        this.callback = t0;
        this.context = t1;
      },
      _parseFunctions__closure0: function _parseFunctions__closure0(t0, t1) {
        this.callback = t0;
        this.context = t1;
      },
      _parseFunctions___closure: function _parseFunctions___closure(t0) {
        this.completer = t0;
      },
      ReturnRule0: function ReturnRule0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      ShadowedModuleView_ifNecessary0(inner, functions, mixins, variables, $T) {
        return B.ShadowedModuleView__needsBlocklist0(
          inner.get$variables(),
          variables
        ) ||
          B.ShadowedModuleView__needsBlocklist0(
            inner.get$functions(inner),
            functions
          ) ||
          B.ShadowedModuleView__needsBlocklist0(inner.get$mixins(), mixins)
          ? new B.ShadowedModuleView0(
              inner,
              B.ShadowedModuleView__shadowedMap0(
                inner.get$variables(),
                variables,
                type$.Value_2
              ),
              B.ShadowedModuleView__shadowedMap0(
                inner.get$variableNodes(),
                variables,
                type$.AstNode_2
              ),
              B.ShadowedModuleView__shadowedMap0(
                inner.get$functions(inner),
                functions,
                $T
              ),
              B.ShadowedModuleView__shadowedMap0(
                inner.get$mixins(),
                mixins,
                $T
              ),
              $T._eval$1('ShadowedModuleView0<0>')
            )
          : null;
      },
      ShadowedModuleView__shadowedMap0(map, blocklist, $V) {
        var t1 = B.ShadowedModuleView__needsBlocklist0(map, blocklist);
        return !t1
          ? map
          : K.LimitedMapView$blocklist0(map, blocklist, type$.String, $V);
      },
      ShadowedModuleView__needsBlocklist0(map, blocklist) {
        var t1 =
          map.get$isNotEmpty(map) && blocklist.any$1(0, map.get$containsKey());
        return t1;
      },
      ShadowedModuleView0: function ShadowedModuleView0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._shadowed_view0$_inner = t0;
        _.variables = t1;
        _.variableNodes = t2;
        _.functions = t3;
        _.mixins = t4;
        _.$ti = t5;
      },
      SilentComment0: function SilentComment0(t0, t1) {
        this.text = t0;
        this.span = t1;
      },
      ModifiableCssSupportsRule$0(condition, span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        return new B.ModifiableCssSupportsRule0(
          condition,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t1
        );
      },
      ModifiableCssSupportsRule0: function ModifiableCssSupportsRule0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _._node2$_children = t3;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      SupportsRule$0(condition, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new B.SupportsRule0(condition, span, t1, t2);
      },
      SupportsRule0: function SupportsRule0(t0, t1, t2, t3) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      fromImport0() {
        var t1 = H._asBoolQ($.Zone__current.$index(0, C.Symbol__inImportRule));
        return t1 === true;
      },
      resolveImportPath0(path) {
        var t1,
          extension = X.ParsedPath_ParsedPath$parse(
            path,
            $.$get$context().style
          )._splitExtension$1(1)[1];
        if (
          extension === '.sass' ||
          extension === '.scss' ||
          extension === '.css'
        ) {
          t1 = B.fromImport0()
            ? new B.resolveImportPath_closure1(path, extension).call$0()
            : null;
          return t1 == null ? B._exactlyOne0(B._tryPath0(path)) : t1;
        }
        t1 = B.fromImport0()
          ? new B.resolveImportPath_closure2(path).call$0()
          : null;
        if (t1 == null) t1 = B._exactlyOne0(B._tryPathWithExtensions0(path));
        return t1 == null ? B._tryPathAsDirectory0(path) : t1;
      },
      _tryPathWithExtensions0(path) {
        var result = B._tryPath0(path + '.sass');
        C.JSArray_methods.addAll$1(result, B._tryPath0(path + '.scss'));
        return result.length !== 0 ? result : B._tryPath0(path + '.css');
      },
      _tryPath0(path) {
        var t1 = $.$get$context(),
          partial = D.join(
            t1.dirname$1(path),
            '_' + X.ParsedPath_ParsedPath$parse(path, t1.style).get$basename(),
            null
          );
        t1 = H._setArrayType([], type$.JSArray_String);
        if (B.fileExists0(partial)) t1.push(partial);
        if (B.fileExists0(path)) t1.push(path);
        return t1;
      },
      _tryPathAsDirectory0(path) {
        var t1;
        if (!B.dirExists0(path)) return null;
        t1 = B.fromImport0()
          ? new B._tryPathAsDirectory_closure0(path).call$0()
          : null;
        return t1 == null
          ? B._exactlyOne0(
              B._tryPathWithExtensions0(D.join(path, 'index', null))
            )
          : t1;
      },
      _exactlyOne0(paths) {
        var t1 = paths.length;
        if (t1 === 0) return null;
        if (t1 === 1) return C.JSArray_methods.get$first(paths);
        throw H.wrapException(
          string$.It_s_n +
            C.JSArray_methods.map$1$1(
              paths,
              new B._exactlyOne_closure0(),
              type$.String
            ).join$1(0, '\n')
        );
      },
      resolveImportPath_closure1: function resolveImportPath_closure1(t0, t1) {
        this.path = t0;
        this.extension = t1;
      },
      resolveImportPath_closure2: function resolveImportPath_closure2(t0) {
        this.path = t0;
      },
      _tryPathAsDirectory_closure0: function _tryPathAsDirectory_closure0(t0) {
        this.path = t0;
      },
      _exactlyOne_closure0: function _exactlyOne_closure0() {},
      forwardToString(klass) {
        type$.Object._as(klass.prototype).toString = P.allowInteropCaptureThis(
          new B.forwardToString_closure()
        );
      },
      jsForEach(object, callback) {
        var t1, t2;
        for (
          t1 = J.get$iterator$ax(self.Object.keys(object));
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          callback.call$2(t2, object[t2]);
        }
      },
      createClass($name, $constructor, methods) {
        var klass = P.allowInteropCaptureThis($constructor);
        self.Object.defineProperty(klass, 'name', { value: $name });
        methods.forEach$1(
          0,
          new B.createClass_closure(type$.Object._as(klass.prototype))
        );
        return klass;
      },
      setClassName(object, $name) {
        self.Object.defineProperty(
          type$.Object._as(object.constructor),
          'name',
          { value: $name }
        );
      },
      injectSuperclass(object, $constructor) {
        var $parent,
          t1 = self.Object.getPrototypeOf(object);
        t1.toString;
        $parent = self.Object.getPrototypeOf(t1);
        if ($parent != null)
          self.Object.setPrototypeOf(
            type$.Object._as($constructor.prototype),
            $parent
          );
        self.Object.setPrototypeOf(
          t1,
          self.Object.create(type$.Object._as($constructor.prototype))
        );
      },
      forwardToString_closure: function forwardToString_closure() {},
      createClass_closure: function createClass_closure(t0) {
        this.$prototype = t0;
      },
      _PropertyDescriptor0: function _PropertyDescriptor0() {},
      toSentence0(iter, conjunction) {
        var t1 = iter.__internal$_iterable,
          t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) === 1)
          return J.toString$0$(iter._f.call$1(t2.get$first(t1)));
        return (
          H.TakeIterable_TakeIterable(
            iter,
            t2.get$length(t1) - 1,
            H._instanceType(iter)._eval$1('Iterable.E')
          ).join$1(0, ', ') +
          (' ' + conjunction + ' ' + H.S(iter._f.call$1(t2.get$last(t1))))
        );
      },
      indent0(string, indentation) {
        return new H.MappedListIterable(
          H._setArrayType(string.split('\n'), type$.JSArray_String),
          new B.indent_closure0(indentation),
          type$.MappedListIterable_String_String
        ).join$1(0, '\n');
      },
      pluralize0($name, number, plural) {
        if (number === 1) return $name;
        if (plural != null) return plural;
        return $name + 's';
      },
      trimAscii0(string, excludeEscape) {
        var t1,
          start = B._firstNonWhitespace0(string);
        if (start == null) t1 = '';
        else {
          t1 = B._lastNonWhitespace0(string, true);
          t1.toString;
          t1 = C.JSString_methods.substring$2(string, start, t1 + 1);
        }
        return t1;
      },
      trimAsciiRight0(string, excludeEscape) {
        var end = B._lastNonWhitespace0(string, excludeEscape);
        return end == null
          ? ''
          : C.JSString_methods.substring$2(string, 0, end + 1);
      },
      _firstNonWhitespace0(string) {
        var t1, i, t2;
        for (t1 = string.length, i = 0; i < t1; ++i) {
          t2 = C.JSString_methods._codeUnitAt$1(string, i);
          if (!(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12))
            return i;
        }
        return null;
      },
      _lastNonWhitespace0(string, excludeEscape) {
        var t1, i, codeUnit;
        for (t1 = string.length, i = t1 - 1; i >= 0; --i) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, i);
          if (
            !(
              codeUnit === 32 ||
              codeUnit === 9 ||
              codeUnit === 10 ||
              codeUnit === 13 ||
              codeUnit === 12
            )
          )
            if (excludeEscape && i !== 0 && i !== t1 && codeUnit === 92)
              return i + 1;
            else return i;
        }
        return null;
      },
      isPublic0(member) {
        var start = C.JSString_methods._codeUnitAt$1(member, 0);
        return start !== 45 && start !== 95;
      },
      flattenVertically0(iterable, $T) {
        var result,
          t1 = iterable.$ti
            ._eval$1('@<ListIterable.E>')
            ._bind$1($T._eval$1('QueueList<0>'))
            ._eval$1('MappedListIterable<1,2>'),
          queues = P.List_List$of(
            new H.MappedListIterable(
              iterable,
              new B.flattenVertically_closure1($T),
              t1
            ),
            true,
            t1._eval$1('ListIterable.E')
          );
        if (queues.length === 1) return C.JSArray_methods.get$first(queues);
        result = H._setArrayType([], $T._eval$1('JSArray<0>'));
        for (; queues.length !== 0; ) {
          if (!!queues.fixed$length)
            H.throwExpression(P.UnsupportedError$('removeWhere'));
          C.JSArray_methods._removeWhere$2(
            queues,
            new B.flattenVertically_closure2(result, $T),
            true
          );
        }
        return result;
      },
      codepointIndexToCodeUnitIndex0(string, codepointIndex) {
        var codeUnitIndex, i, codeUnitIndex0;
        for (codeUnitIndex = 0, i = 0; i < codepointIndex; ++i) {
          codeUnitIndex0 = codeUnitIndex + 1;
          codeUnitIndex =
            C.JSString_methods._codeUnitAt$1(string, codeUnitIndex) >>> 10 ===
            54
              ? codeUnitIndex0 + 1
              : codeUnitIndex0;
        }
        return codeUnitIndex;
      },
      codeUnitIndexToCodepointIndex0(string, codeUnitIndex) {
        var codepointIndex, i;
        for (
          codepointIndex = 0, i = 0;
          i < codeUnitIndex;
          i =
            (C.JSString_methods._codeUnitAt$1(string, i) >>> 10 === 54
              ? i + 1
              : i) + 1
        )
          ++codepointIndex;
        return codepointIndex;
      },
      frameForSpan0(span, member, url) {
        var t2,
          t3,
          t4,
          t1 = url == null ? span.file.url : url;
        if (t1 == null) t1 = $.$get$_noSourceUrl0();
        t2 = span.file;
        t3 = span._file$_start;
        t4 = Y.FileLocation$_(t2, t3);
        t4 = t4.file.getLine$1(t4.offset);
        t3 = Y.FileLocation$_(t2, t3);
        return new A.Frame(
          t1,
          t4 + 1,
          t3.file.getColumn$1(t3.offset) + 1,
          member
        );
      },
      declarationName0(span) {
        var text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(
            span.file._decodedChars,
            span._file$_start,
            span._end
          ),
          0,
          null
        );
        return B.trimAsciiRight0(
          C.JSString_methods.substring$2(
            text,
            0,
            C.JSString_methods.indexOf$1(text, ':')
          ),
          false
        );
      },
      unvendor0($name) {
        var i,
          t1 = $name.length;
        if (t1 < 2) return $name;
        if (C.JSString_methods._codeUnitAt$1($name, 0) !== 45) return $name;
        if (C.JSString_methods._codeUnitAt$1($name, 1) === 45) return $name;
        for (i = 2; i < t1; ++i)
          if (C.JSString_methods._codeUnitAt$1($name, i) === 45)
            return C.JSString_methods.substring$1($name, i + 1);
        return $name;
      },
      equalsIgnoreCase0(string1, string2) {
        var t1, i;
        if (string1 === string2) return true;
        if (string1 == null || false) return false;
        t1 = string1.length;
        if (t1 !== string2.length) return false;
        for (i = 0; i < t1; ++i)
          if (
            !T.characterEqualsIgnoreCase0(
              C.JSString_methods._codeUnitAt$1(string1, i),
              C.JSString_methods._codeUnitAt$1(string2, i)
            )
          )
            return false;
        return true;
      },
      startsWithIgnoreCase0(string, prefix) {
        var i,
          t1 = prefix.length;
        if (string.length < t1) return false;
        for (i = 0; i < t1; ++i)
          if (
            !T.characterEqualsIgnoreCase0(
              C.JSString_methods._codeUnitAt$1(string, i),
              C.JSString_methods._codeUnitAt$1(prefix, i)
            )
          )
            return false;
        return true;
      },
      mapInPlace0(list, $function) {
        var i;
        for (i = 0; i < list.length; ++i) list[i] = $function.call$1(list[i]);
      },
      longestCommonSubsequence0(list1, list2, select, $T) {
        var t1,
          _length,
          lengths,
          t2,
          t3,
          _i,
          selections,
          i,
          i0,
          j,
          selection,
          j0;
        if (select == null)
          select = new B.longestCommonSubsequence_closure0($T);
        t1 = J.getInterceptor$asx(list1);
        _length = t1.get$length(list1) + 1;
        lengths = J.JSArray_JSArray$allocateFixed(_length, type$.List_int);
        for (
          t2 = J.getInterceptor$asx(list2), t3 = type$.int, _i = 0;
          _i < _length;
          ++_i
        )
          lengths[_i] = P.List_List$filled(
            t2.get$length(list2) + 1,
            0,
            false,
            t3
          );
        _length = t1.get$length(list1);
        selections = J.JSArray_JSArray$allocateFixed(
          _length,
          $T._eval$1('List<0?>')
        );
        for (t3 = $T._eval$1('0?'), _i = 0; _i < _length; ++_i)
          selections[_i] = P.List_List$filled(
            t2.get$length(list2),
            null,
            false,
            t3
          );
        for (i = 0; i < t1.get$length(list1); i = i0)
          for (i0 = i + 1, j = 0; j < t2.get$length(list2); j = j0) {
            selection = select.call$2(t1.$index(list1, i), t2.$index(list2, j));
            selections[i][j] = selection;
            t3 = lengths[i0];
            j0 = j + 1;
            t3[j0] =
              selection == null
                ? Math.max(t3[j], lengths[i][j0])
                : lengths[i][j] + 1;
          }
        return new B.longestCommonSubsequence_backtrack0(
          selections,
          lengths,
          $T
        ).call$2(t1.get$length(list1) - 1, t2.get$length(list2) - 1);
      },
      removeFirstWhere0(list, test, orElse) {
        var i;
        for (i = 0; i < list.length; ++i) {
          if (!test.call$1(list[i])) continue;
          C.JSArray_methods.removeAt$1(list, i);
          return;
        }
        orElse.call$0();
      },
      mapAddAll20(destination, source, K1, K2, $V) {
        source.forEach$1(0, new B.mapAddAll2_closure0(destination, K1, K2, $V));
      },
      setAll0(map, keys, value) {
        var t1;
        for (t1 = J.get$iterator$ax(keys); t1.moveNext$0(); )
          map.$indexSet(0, t1.get$current(), value);
      },
      rotateSlice0(list, start, end) {
        var i,
          next,
          element = list.$index(0, end - 1);
        for (i = start; i < end; ++i, element = next) {
          next = list.$index(0, i);
          list.$indexSet(0, i, element);
        }
      },
      mapAsync0(iterable, callback, $E, $F) {
        return B.mapAsync$body0(
          iterable,
          callback,
          $E,
          $F,
          $F._eval$1('Iterable<0>')
        );
      },
      mapAsync$body0(iterable, callback, $E, $F, $async$type) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter($async$type),
          $async$returnValue,
          t2,
          _i,
          t1,
          $async$temp1;
        var $async$mapAsync0 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = H._setArrayType([], $F._eval$1('JSArray<0>'));
                (t2 = iterable.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                $async$temp1 = t1;
                $async$goto = 6;
                return P._asyncAwait(
                  callback.call$1(iterable[_i]),
                  $async$mapAsync0
                );
              case 6:
                // returning from await.
                $async$temp1.push($async$result);
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$mapAsync0, $async$completer);
      },
      putIfAbsentAsync0(map, key, ifAbsent, $K, $V) {
        return B.putIfAbsentAsync$body0(map, key, ifAbsent, $K, $V, $V);
      },
      putIfAbsentAsync$body0(map, key, ifAbsent, $K, $V, $async$type) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter($async$type),
          $async$returnValue,
          value;
        var $async$putIfAbsentAsync0 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (map.containsKey$1(key)) {
                  $async$returnValue = $V._as(map.$index(0, key));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncAwait(
                  ifAbsent.call$0(),
                  $async$putIfAbsentAsync0
                );
              case 3:
                // returning from await.
                value = $async$result;
                map.$indexSet(0, key, value);
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$putIfAbsentAsync0, $async$completer);
      },
      copyMapOfMap0(map, K1, K2, $V) {
        var t2,
          t3,
          t4,
          t5,
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(
            K1,
            K2._eval$1('@<0>')._bind$1($V)._eval$1('Map<1,2>')
          );
        for (
          t2 = map.get$entries(map), t2 = t2.get$iterator(t2);
          t2.moveNext$0();

        ) {
          t3 = t2.get$current();
          t4 = t3.key;
          t3 = t3.value;
          t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, K2, $V);
          t5.addAll$1(0, t3);
          t1.$indexSet(0, t4, t5);
        }
        return t1;
      },
      copyMapOfList0(map, $K, $E) {
        var t2,
          t3,
          t1 = P.LinkedHashMap_LinkedHashMap$_empty($K, $E._eval$1('List<0>'));
        for (
          t2 = map.get$entries(map), t2 = t2.get$iterator(t2);
          t2.moveNext$0();

        ) {
          t3 = t2.get$current();
          t1.$indexSet(0, t3.key, J.toList$0$ax(t3.value));
        }
        return t1;
      },
      consumeEscapedCharacter0(scanner) {
        var first, value, i, next, t1;
        scanner.expectChar$1(92);
        first = scanner.peekChar$0();
        if (first == null) return 65533;
        else if (first === 10 || first === 13 || first === 12)
          scanner.error$1(0, 'Expected escape sequence.');
        else if (T.isHex0(first)) {
          for (value = 0, i = 0; i < 6; ++i) {
            next = scanner.peekChar$0();
            if (next == null || !T.isHex0(next)) break;
            value = ((value << 4) >>> 0) + T.asHex0(scanner.readChar$0());
          }
          t1 = scanner.peekChar$0();
          if (t1 === 32 || t1 === 9 || t1 === 10 || t1 === 13 || t1 === 12)
            scanner.readChar$0();
          if (value !== 0)
            t1 = (value >= 55296 && value <= 57343) || value >= 1114111;
          else t1 = true;
          if (t1) return 65533;
          else return value;
        } else return scanner.readChar$0();
      },
      indent_closure0: function indent_closure0(t0) {
        this.indentation = t0;
      },
      flattenVertically_closure1: function flattenVertically_closure1(t0) {
        this.T = t0;
      },
      flattenVertically_closure2: function flattenVertically_closure2(t0, t1) {
        this.result = t0;
        this.T = t1;
      },
      longestCommonSubsequence_closure0: function longestCommonSubsequence_closure0(
        t0
      ) {
        this.T = t0;
      },
      longestCommonSubsequence_backtrack0: function longestCommonSubsequence_backtrack0(
        t0,
        t1,
        t2
      ) {
        this.selections = t0;
        this.lengths = t1;
        this.T = t2;
      },
      mapAddAll2_closure0: function mapAddAll2_closure0(t0, t1, t2, t3) {
        var _ = this;
        _.destination = t0;
        _.K1 = t1;
        _.K2 = t2;
        _.V = t3;
      },
      defaultCompare(value1, value2) {
        return J.compareTo$1$ns(
          type$.Comparable_nullable_Object._as(value1),
          value2
        );
      },
      isAlphabetic(char) {
        var t1;
        if (!(char >= 65 && char <= 90)) t1 = char >= 97 && char <= 122;
        else t1 = true;
        return t1;
      },
      isDriveLetter(path, index) {
        var t1 = path.length,
          t2 = index + 2;
        if (t1 < t2) return false;
        if (!B.isAlphabetic(C.JSString_methods.codeUnitAt$1(path, index)))
          return false;
        if (C.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
          return false;
        if (t1 === t2) return true;
        return C.JSString_methods.codeUnitAt$1(path, t2) === 47;
      },
      isAllTheSame(iter) {
        var firstValue, t1, t2;
        if (iter.get$length(iter) === 0) return true;
        firstValue = iter.get$first(iter);
        for (
          t1 = H.SubListIterable$(
            iter,
            1,
            null,
            iter.$ti._eval$1('ListIterable.E')
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          if (!J.$eq$(t2._as(t1.__internal$_current), firstValue)) return false;
        return true;
      },
      replaceFirstNull(list, element) {
        var index = C.JSArray_methods.indexOf$1(list, null);
        if (index < 0)
          throw H.wrapException(
            P.ArgumentError$(H.S(list) + ' contains no null elements.', null)
          );
        list[index] = element;
      },
      replaceWithNull(list, element) {
        var index = C.JSArray_methods.indexOf$1(list, element);
        if (index < 0)
          throw H.wrapException(
            P.ArgumentError$(
              H.S(list) +
                ' contains no elements matching ' +
                element.toString$0(0) +
                '.',
              null
            )
          );
        list[index] = null;
      },
      countCodeUnits(string, codeUnit) {
        var t1, t2, count;
        for (
          t1 = new H.CodeUnits(string),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1,
            count = 0;
          t1.moveNext$0();

        )
          if (t2._as(t1.__internal$_current) === codeUnit) ++count;
        return count;
      },
      findLineStart(context, text, column) {
        var beginningOfLine, index, lineStart;
        if (text.length === 0)
          for (beginningOfLine = 0; true; ) {
            index = C.JSString_methods.indexOf$2(
              context,
              '\n',
              beginningOfLine
            );
            if (index === -1)
              return context.length - beginningOfLine >= column
                ? beginningOfLine
                : null;
            if (index - beginningOfLine >= column) return beginningOfLine;
            beginningOfLine = index + 1;
          }
        index = C.JSString_methods.indexOf$1(context, text);
        for (; index !== -1; ) {
          lineStart =
            index === 0
              ? 0
              : C.JSString_methods.lastIndexOf$2(context, '\n', index - 1) + 1;
          if (column === index - lineStart) return lineStart;
          index = C.JSString_methods.indexOf$2(context, text, index + 1);
        }
        return null;
      },
      validateErrorArgs(string, match, position, $length) {
        var t2,
          t1 = position != null;
        if (t1)
          if (position < 0)
            throw H.wrapException(
              P.RangeError$('position must be greater than or equal to 0.')
            );
          else if (position > string.length)
            throw H.wrapException(
              P.RangeError$(
                'position must be less than or equal to the string length.'
              )
            );
        t2 = $length != null;
        if (t2 && $length < 0)
          throw H.wrapException(
            P.RangeError$('length must be greater than or equal to 0.')
          );
        if (t1 && t2 && position + $length > string.length)
          throw H.wrapException(
            P.RangeError$(
              'position plus length must not go beyond the end of the string.'
            )
          );
      },
    },
    C = {},
    D = {
      fs() {
        var t1 = $._fs;
        return t1 == null ? ($._fs = self.fs) : t1;
      },
      FS: function FS() {},
      FSConstants: function FSConstants() {},
      FSWatcher: function FSWatcher() {},
      ReadStream: function ReadStream() {},
      ReadStreamOptions: function ReadStreamOptions() {},
      WriteStream: function WriteStream() {},
      WriteStreamOptions: function WriteStreamOptions() {},
      FileOptions: function FileOptions() {},
      StatOptions: function StatOptions() {},
      MkdirOptions: function MkdirOptions() {},
      RmdirOptions: function RmdirOptions() {},
      WatchOptions: function WatchOptions() {},
      WatchFileOptions: function WatchFileOptions() {},
      Stats: function Stats() {},
      StreamModule: function StreamModule() {},
      Readable: function Readable() {},
      Writable: function Writable() {},
      Duplex: function Duplex() {},
      Transform: function Transform() {},
      WritableOptions: function WritableOptions() {},
      ReadableOptions: function ReadableOptions() {},
      ListExpression: function ListExpression(t0, t1, t2, t3) {
        var _ = this;
        _.contents = t0;
        _.separator = t1;
        _.hasBrackets = t2;
        _.span = t3;
      },
      ListExpression_toString_closure: function ListExpression_toString_closure(
        t0
      ) {
        this.$this = t0;
      },
      StringExpression_quoteText(text) {
        var t1,
          quote = D.StringExpression__bestQuote(
            H._setArrayType([text], type$.JSArray_String)
          ),
          buffer = new P.StringBuffer('');
        buffer._contents = '' + H.Primitives_stringFromCharCode(quote);
        D.StringExpression__quoteInnerText(text, quote, buffer, true);
        t1 = buffer._contents += H.Primitives_stringFromCharCode(quote);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      StringExpression__quoteInnerText(text, quote, buffer, $static) {
        var t1, t2, i, codeUnit, next, t3;
        for (t1 = text.length, t2 = t1 - 1, i = 0; i < t1; ++i) {
          codeUnit = C.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12) {
            buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(97);
            if (i !== t2) {
              next = C.JSString_methods._codeUnitAt$1(text, i + 1);
              if (
                next === 32 ||
                next === 9 ||
                next === 10 ||
                next === 13 ||
                next === 12 ||
                T.isHex(next)
              )
                buffer.writeCharCode$1(32);
            }
          } else {
            if (codeUnit !== quote)
              if (codeUnit !== 92)
                t3 =
                  $static &&
                  codeUnit === 35 &&
                  i < t2 &&
                  C.JSString_methods._codeUnitAt$1(text, i + 1) === 123;
              else t3 = true;
            else t3 = true;
            if (t3) buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(codeUnit);
          }
        }
      },
      StringExpression__bestQuote(strings) {
        var t1, containsDoubleQuote, t2, t3, i, codeUnit;
        for (
          t1 = J.get$iterator$ax(strings), containsDoubleQuote = false;
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          for (t3 = t2.length, i = 0; i < t3; ++i) {
            codeUnit = C.JSString_methods._codeUnitAt$1(t2, i);
            if (codeUnit === 39) return 34;
            if (codeUnit === 34) containsDoubleQuote = true;
          }
        }
        return containsDoubleQuote ? 39 : 34;
      },
      StringExpression: function StringExpression(t0, t1) {
        this.text = t0;
        this.hasQuotes = t1;
      },
      ErrorRule: function ErrorRule(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      SelectorList$(components) {
        var t1 = P.List_List$unmodifiable(components, type$.ComplexSelector);
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new D.SelectorList(t1);
      },
      SelectorList_SelectorList$parse(
        contents,
        allowParent,
        allowPlaceholder,
        logger
      ) {
        return T.SelectorParser$(
          contents,
          allowParent,
          allowPlaceholder,
          logger,
          null
        ).parse$0();
      },
      SelectorList: function SelectorList(t0) {
        this.components = t0;
      },
      SelectorList_isInvisible_closure: function SelectorList_isInvisible_closure() {},
      SelectorList_asSassList_closure: function SelectorList_asSassList_closure() {},
      SelectorList_asSassList__closure: function SelectorList_asSassList__closure() {},
      SelectorList_unify_closure: function SelectorList_unify_closure(t0) {
        this.other = t0;
      },
      SelectorList_unify__closure: function SelectorList_unify__closure(t0) {
        this.complex1 = t0;
      },
      SelectorList_unify___closure: function SelectorList_unify___closure() {},
      SelectorList_resolveParentSelectors_closure: function SelectorList_resolveParentSelectors_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.implicitParent = t1;
        this.parent = t2;
      },
      SelectorList_resolveParentSelectors__closure: function SelectorList_resolveParentSelectors__closure(
        t0
      ) {
        this.complex = t0;
      },
      SelectorList_resolveParentSelectors__closure0: function SelectorList_resolveParentSelectors__closure0(
        t0
      ) {
        this._box_0 = t0;
      },
      SelectorList__complexContainsParentSelector_closure: function SelectorList__complexContainsParentSelector_closure() {},
      SelectorList__complexContainsParentSelector__closure: function SelectorList__complexContainsParentSelector__closure() {},
      SelectorList__resolveParentSelectorsCompound_closure: function SelectorList__resolveParentSelectorsCompound_closure() {},
      SelectorList__resolveParentSelectorsCompound_closure0: function SelectorList__resolveParentSelectorsCompound_closure0(
        t0
      ) {
        this.parent = t0;
      },
      SelectorList__resolveParentSelectorsCompound_closure1: function SelectorList__resolveParentSelectorsCompound_closure1(
        t0,
        t1
      ) {
        this.compound = t0;
        this.resolvedMembers = t1;
      },
      PseudoSelector$($name, argument, element, selector) {
        var t1 = !element,
          t2 = t1 && !D.PseudoSelector__isFakePseudoElement($name);
        return new D.PseudoSelector(
          $name,
          B.unvendor($name),
          t2,
          t1,
          argument,
          selector
        );
      },
      PseudoSelector__isFakePseudoElement($name) {
        switch (C.JSString_methods._codeUnitAt$1($name, 0)) {
          case 97:
          case 65:
            return B.equalsIgnoreCase($name, 'after');
          case 98:
          case 66:
            return B.equalsIgnoreCase($name, 'before');
          case 102:
          case 70:
            return (
              B.equalsIgnoreCase($name, 'first-line') ||
              B.equalsIgnoreCase($name, 'first-letter')
            );
          default:
            return false;
        }
      },
      PseudoSelector: function PseudoSelector(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.name = t0;
        _.normalizedName = t1;
        _.isClass = t2;
        _.isSyntacticClass = t3;
        _.argument = t4;
        _.selector = t5;
        _._pseudo$_maxSpecificity = _._pseudo$_minSpecificity = null;
      },
      QualifiedName: function QualifiedName(t0, t1) {
        this.name = t0;
        this.namespace = t1;
      },
      compileStylesheet(options, graph, source, destination, ifModified) {
        return D.compileStylesheet$body(
          options,
          graph,
          source,
          destination,
          ifModified
        );
      },
      compileStylesheet$body(options, graph, source, destination, ifModified) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.void),
          $async$returnValue,
          $async$handler = 2,
          $async$currentError,
          $async$next = [],
          syntax,
          result,
          importCache,
          error,
          exception,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t8,
          t9,
          t10,
          result0,
          logger,
          terseLogger,
          stylesheet,
          css,
          buffer,
          sourceName,
          destinationName,
          t1,
          importer,
          $async$exception;
        var $async$compileStylesheet = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$context();
                importer = new F.FilesystemImporter(
                  t1.absolute$7('.', null, null, null, null, null, null)
                );
                if (ifModified)
                  try {
                    if (
                      source != null &&
                      destination != null &&
                      !graph.modifiedSince$3(
                        t1.toUri$1(source),
                        B.modificationTime(destination),
                        importer
                      )
                    ) {
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                  } catch (exception) {
                    if (
                      !(
                        H.unwrapException(exception) instanceof
                        B.FileSystemException
                      )
                    )
                      throw exception;
                  }
                syntax = null;
                if (H._asBoolQ(options._ifParsed$1('indented')) === true)
                  syntax = C.Syntax_Sass;
                else if (source != null) syntax = M.Syntax_forPath(source);
                else syntax = C.Syntax_SCSS;
                result = null;
                $async$handler = 4;
                t2 = options._options;
                $async$goto = H._asBool(t2.$index(0, 'async')) ? 7 : 9;
                break;
              case 7:
                // then
                t3 = type$.List_String._as(t2.$index(0, 'load-path'));
                t4 = H._asBool(t2.$index(0, 'quiet'))
                  ? $.$get$Logger_quiet()
                  : new S.StderrLogger(options.get$color());
                t3 = O.AsyncImportCache__toImporters(null, t3, null);
                t5 = type$.Uri;
                importCache = new O.AsyncImportCache(
                  t3,
                  t4,
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    type$.Tuple2_Uri_bool,
                    type$.nullable_Tuple3_AsyncImporter_Uri_Uri
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    t5,
                    type$.nullable_Stylesheet
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(t5, type$.ImporterResult)
                );
                $async$goto = source == null ? 10 : 12;
                break;
              case 10:
                // then
                $async$goto = 13;
                return P._asyncAwait(B.readStdin(), $async$compileStylesheet);
              case 13:
                // returning from await.
                t3 = $async$result;
                t4 = syntax;
                t5 = H._asBool(t2.$index(0, 'quiet'))
                  ? $.$get$Logger_quiet()
                  : new S.StderrLogger(options.get$color());
                t6 = t1.absolute$7('.', null, null, null, null, null, null);
                t7 = J.$eq$(t2.$index(0, 'style'), 'compressed')
                  ? C.OutputStyle_compressed
                  : C.OutputStyle_expanded0;
                t8 = H._asBool(t2.$index(0, 'quiet-deps'));
                t9 = H._asBool(t2.$index(0, 'verbose'));
                t10 = options.get$emitSourceMap();
                $async$goto = 14;
                return P._asyncAwait(
                  X.compileStringAsync(
                    t3,
                    H._asBool(t2.$index(0, 'charset')),
                    importCache,
                    new F.FilesystemImporter(t6),
                    t5,
                    t8,
                    t10,
                    t7,
                    t4,
                    t9
                  ),
                  $async$compileStylesheet
                );
              case 14:
                // returning from await.
                result0 = $async$result;
                // goto join
                $async$goto = 11;
                break;
              case 12:
                // else
                t3 = syntax;
                t4 = H._asBool(t2.$index(0, 'quiet'))
                  ? $.$get$Logger_quiet()
                  : new S.StderrLogger(options.get$color());
                t5 = J.$eq$(t2.$index(0, 'style'), 'compressed')
                  ? C.OutputStyle_compressed
                  : C.OutputStyle_expanded0;
                t6 = H._asBool(t2.$index(0, 'quiet-deps'));
                t7 = H._asBool(t2.$index(0, 'verbose'));
                t8 = options.get$emitSourceMap();
                $async$goto = 15;
                return P._asyncAwait(
                  X.compileAsync(
                    source,
                    H._asBool(t2.$index(0, 'charset')),
                    importCache,
                    t4,
                    t6,
                    t8,
                    t5,
                    t3,
                    t7
                  ),
                  $async$compileStylesheet
                );
              case 15:
                // returning from await.
                result0 = $async$result;
              case 11:
                // join
                result = result0;
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = source == null ? 16 : 18;
                break;
              case 16:
                // then
                $async$goto = 19;
                return P._asyncAwait(B.readStdin(), $async$compileStylesheet);
              case 19:
                // returning from await.
                t3 = $async$result;
                t4 = syntax;
                logger = H._asBool(t2.$index(0, 'quiet'))
                  ? $.$get$Logger_quiet()
                  : new S.StderrLogger(options.get$color());
                t5 = t1.absolute$7('.', null, null, null, null, null, null);
                t6 = J.$eq$(t2.$index(0, 'style'), 'compressed')
                  ? C.OutputStyle_compressed
                  : C.OutputStyle_expanded0;
                t7 = H._asBool(t2.$index(0, 'quiet-deps'));
                t8 = H._asBool(t2.$index(0, 'verbose'));
                t9 = options.get$emitSourceMap();
                t2 = H._asBool(t2.$index(0, 'charset'));
                if (!t8) {
                  terseLogger = new Y.TerseLogger(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    logger
                  );
                  logger = terseLogger;
                } else terseLogger = null;
                stylesheet = V.Stylesheet_Stylesheet$parse(
                  t3,
                  t4 == null ? C.Syntax_SCSS : t4,
                  logger,
                  null
                );
                result0 = U._compileStylesheet(
                  stylesheet,
                  logger,
                  graph.importCache,
                  null,
                  new F.FilesystemImporter(t5),
                  null,
                  t6,
                  true,
                  null,
                  null,
                  t7,
                  t9,
                  t2
                );
                if (terseLogger != null) terseLogger.summarize$1$node(false);
                // goto join
                $async$goto = 17;
                break;
              case 18:
                // else
                t3 = syntax;
                logger = H._asBool(t2.$index(0, 'quiet'))
                  ? $.$get$Logger_quiet()
                  : new S.StderrLogger(options.get$color());
                importCache = graph.importCache;
                t4 = J.$eq$(t2.$index(0, 'style'), 'compressed')
                  ? C.OutputStyle_compressed
                  : C.OutputStyle_expanded0;
                t5 = H._asBool(t2.$index(0, 'quiet-deps'));
                t6 = H._asBool(t2.$index(0, 'verbose'));
                t7 = options.get$emitSourceMap();
                t2 = H._asBool(t2.$index(0, 'charset'));
                if (!t6) {
                  terseLogger = new Y.TerseLogger(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    logger
                  );
                  logger = terseLogger;
                } else terseLogger = null;
                t6 = t3 == null || t3 === M.Syntax_forPath(source);
                if (t6) {
                  t3 = t1.absolute$7('.', null, null, null, null, null, null);
                  t3 = importCache.importCanonical$3$originalUrl(
                    new F.FilesystemImporter(t3),
                    t1.toUri$1(
                      J.$eq$(J.get$platform$x(self.process), 'win32') ||
                        J.$eq$(J.get$platform$x(self.process), 'darwin')
                        ? F._realCasePath(
                            t1.absolute$7(
                              t1.normalize$1(source),
                              null,
                              null,
                              null,
                              null,
                              null,
                              null
                            )
                          )
                        : t1.canonicalize$1(source)
                    ),
                    t1.toUri$1(source)
                  );
                  t3.toString;
                  stylesheet = t3;
                } else {
                  t6 = B.readFile(source);
                  if (t3 == null) t3 = M.Syntax_forPath(source);
                  stylesheet = V.Stylesheet_Stylesheet$parse(
                    t6,
                    t3,
                    logger,
                    t1.toUri$1(source)
                  );
                }
                result0 = U._compileStylesheet(
                  stylesheet,
                  logger,
                  importCache,
                  null,
                  new F.FilesystemImporter(
                    t1.absolute$7('.', null, null, null, null, null, null)
                  ),
                  null,
                  t4,
                  true,
                  null,
                  null,
                  t5,
                  t7,
                  t2
                );
                if (terseLogger != null) terseLogger.summarize$1$node(false);
              case 17:
                // join
                result = result0;
              case 8:
                // join
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t2 = H.unwrapException($async$exception);
                if (t2 instanceof E.SassException) {
                  error = t2;
                  if (options.get$emitErrorCss())
                    if (destination == null) P.print(error.toCssString$0());
                    else {
                      B.ensureDir(t1.dirname$1(destination));
                      B.writeFile(destination, error.toCssString$0() + '\n');
                    }
                  throw $async$exception;
                } else throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
                css =
                  result._serialize.css +
                  D._writeSourceMap(
                    options,
                    result._serialize.sourceMap,
                    destination
                  );
                if (destination == null) {
                  if (css.length !== 0) P.print(css);
                } else {
                  B.ensureDir(t1.dirname$1(destination));
                  B.writeFile(destination, css + '\n');
                }
                t2 = options._options;
                if (
                  H._asBool(t2.$index(0, 'quiet')) ||
                  !H._asBool(t2.$index(0, 'update'))
                ) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                buffer = new P.StringBuffer('');
                t2 = options.get$color()
                  ? (buffer._contents = '' + '\x1b[32m')
                  : '';
                sourceName =
                  source == null ? 'stdin' : t1.prettyUri$1(t1.toUri$1(source));
                destination.toString;
                destinationName = t1.prettyUri$1(t1.toUri$1(destination));
                t1 =
                  t2 +
                  ('Compiled ' + sourceName + ' to ' + destinationName + '.');
                buffer._contents = t1;
                if (options.get$color()) buffer._contents = t1 + '\x1b[0m';
                P.print(buffer);
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        });
        return P._asyncStartSync($async$compileStylesheet, $async$completer);
      },
      _writeSourceMap(options, sourceMap, destination) {
        var t1, sourceMapText, url, sourceMapPath, t2;
        if (sourceMap == null) return '';
        if (destination != null) {
          t1 = $.$get$context();
          sourceMap.targetUrl = t1
            .toUri$1(
              X.ParsedPath_ParsedPath$parse(
                destination,
                t1.style
              ).get$basename()
            )
            .toString$0(0);
        }
        B.mapInPlace(
          sourceMap.urls,
          new D._writeSourceMap_closure(options, destination)
        );
        t1 = options._options;
        sourceMapText = C.C_JsonCodec.encode$2$toEncodable(
          sourceMap.toJson$1$includeSourceContents(
            H._asBool(t1.$index(0, 'embed-sources'))
          ),
          null
        );
        if (H._asBool(t1.$index(0, 'embed-source-map')))
          url = P.Uri_Uri$dataFromString(
            sourceMapText,
            C.C_Utf8Codec,
            'application/json'
          );
        else {
          destination.toString;
          sourceMapPath = destination + '.map';
          t2 = $.$get$context();
          B.ensureDir(t2.dirname$1(sourceMapPath));
          B.writeFile(sourceMapPath, sourceMapText);
          url = t2.toUri$1(
            t2.relative$2$from(sourceMapPath, t2.dirname$1(destination))
          );
        }
        t1 =
          (J.$eq$(t1.$index(0, 'style'), 'compressed')
            ? C.OutputStyle_compressed
            : C.OutputStyle_expanded0) === C.OutputStyle_compressed
            ? ''
            : '\n\n';
        return t1 + ('/*# sourceMappingURL=' + url.toString$0(0) + ' */');
      },
      _writeSourceMap_closure: function _writeSourceMap_closure(t0, t1) {
        this.options = t0;
        this.destination = t1;
      },
      _function3($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:list'
        );
      },
      _length_closure0: function _length_closure0() {},
      _nth_closure: function _nth_closure() {},
      _setNth_closure: function _setNth_closure() {},
      _join_closure: function _join_closure() {},
      _append_closure0: function _append_closure0() {},
      _zip_closure: function _zip_closure() {},
      _zip__closure: function _zip__closure() {},
      _zip__closure0: function _zip__closure0(t0) {
        this._box_0 = t0;
      },
      _zip__closure1: function _zip__closure1(t0) {
        this._box_0 = t0;
      },
      _index_closure0: function _index_closure0() {},
      _separator_closure: function _separator_closure() {},
      _isBracketed_closure: function _isBracketed_closure() {},
      _slash_closure: function _slash_closure() {},
      _codepointForIndex(index, lengthInCodepoints, allowNegative) {
        var result;
        if (index === 0) return 0;
        if (index > 0) return Math.min(index - 1, lengthInCodepoints);
        result = lengthInCodepoints + index;
        if (result < 0 && !allowNegative) return 0;
        return result;
      },
      _function($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:string'
        );
      },
      _unquote_closure: function _unquote_closure() {},
      _quote_closure: function _quote_closure() {},
      _length_closure: function _length_closure() {},
      _insert_closure: function _insert_closure() {},
      _index_closure: function _index_closure() {},
      _slice_closure: function _slice_closure() {},
      _toUpperCase_closure: function _toUpperCase_closure() {},
      _toLowerCase_closure: function _toLowerCase_closure() {},
      _uniqueId_closure: function _uniqueId_closure() {},
      SourceMapBuffer0: function SourceMapBuffer0(t0, t1) {
        var _ = this;
        _._source_map_buffer0$_buffer = t0;
        _._source_map_buffer0$_entries = t1;
        _._source_map_buffer0$_column = _._source_map_buffer0$_line = 0;
        _._source_map_buffer0$_inSpan = false;
      },
      SourceMapBuffer_buildSourceMap_closure: function SourceMapBuffer_buildSourceMap_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.prefixLength = t1;
      },
      SassArgumentList$(contents, keywords, separator) {
        var t1 = type$.Value;
        t1 = new D.SassArgumentList(
          H.ConstantMap_ConstantMap$from(keywords, type$.String, t1),
          P.List_List$unmodifiable(contents, t1),
          separator,
          false
        );
        t1.SassList$3$brackets(contents, separator, false);
        return t1;
      },
      SassArgumentList: function SassArgumentList(t0, t1, t2, t3) {
        var _ = this;
        _._keywords = t0;
        _._wereKeywordsAccessed = false;
        _._list$_contents = t1;
        _.separator = t2;
        _.hasBrackets = t3;
      },
      SassList$(contents, separator, brackets) {
        var t1 = new D.SassList(
          P.List_List$unmodifiable(contents, type$.Value),
          separator,
          brackets
        );
        t1.SassList$3$brackets(contents, separator, brackets);
        return t1;
      },
      SassList: function SassList(t0, t1, t2) {
        this._list$_contents = t0;
        this.separator = t1;
        this.hasBrackets = t2;
      },
      SassList_isBlank_closure: function SassList_isBlank_closure() {},
      ListSeparator: function ListSeparator(t0, t1) {
        this._list$_name = t0;
        this.separator = t1;
      },
      SassString$(text, quotes) {
        return new D.SassString(text, quotes);
      },
      SassString: function SassString(t0, t1) {
        this.text = t0;
        this.hasQuotes = t1;
        this.__SassString_sassLength = null;
      },
      RecursiveStatementVisitor: function RecursiveStatementVisitor() {},
      SourceLocationMixin: function SourceLocationMixin() {},
      SassArgumentList$0(contents, keywords, separator) {
        var t1 = type$.Value_2;
        t1 = new D.SassArgumentList0(
          H.ConstantMap_ConstantMap$from(keywords, type$.String, t1),
          P.List_List$unmodifiable(contents, t1),
          separator,
          false
        );
        t1.SassList$3$brackets0(contents, separator, false);
        return t1;
      },
      SassArgumentList0: function SassArgumentList0(t0, t1, t2, t3) {
        var _ = this;
        _._argument_list$_keywords = t0;
        _._argument_list$_wereKeywordsAccessed = false;
        _._list1$_contents = t1;
        _.separator = t2;
        _.hasBrackets = t3;
      },
      ErrorRule0: function ErrorRule0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      Exports: function Exports() {},
      ListExpression0: function ListExpression0(t0, t1, t2, t3) {
        var _ = this;
        _.contents = t0;
        _.separator = t1;
        _.hasBrackets = t2;
        _.span = t3;
      },
      ListExpression_toString_closure0: function ListExpression_toString_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _function10($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:list'
        );
      },
      _length_closure2: function _length_closure2() {},
      _nth_closure0: function _nth_closure0() {},
      _setNth_closure0: function _setNth_closure0() {},
      _join_closure0: function _join_closure0() {},
      _append_closure2: function _append_closure2() {},
      _zip_closure0: function _zip_closure0() {},
      _zip__closure2: function _zip__closure2() {},
      _zip__closure3: function _zip__closure3(t0) {
        this._box_0 = t0;
      },
      _zip__closure4: function _zip__closure4(t0) {
        this._box_0 = t0;
      },
      _index_closure2: function _index_closure2() {},
      _separator_closure0: function _separator_closure0() {},
      _isBracketed_closure0: function _isBracketed_closure0() {},
      _slash_closure0: function _slash_closure0() {},
      SelectorList$0(components) {
        var t1 = P.List_List$unmodifiable(components, type$.ComplexSelector_2);
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new D.SelectorList0(t1);
      },
      SelectorList_SelectorList$parse0(
        contents,
        allowParent,
        allowPlaceholder,
        logger
      ) {
        return T.SelectorParser$0(
          contents,
          allowParent,
          allowPlaceholder,
          logger,
          null
        ).parse$0();
      },
      SelectorList0: function SelectorList0(t0) {
        this.components = t0;
      },
      SelectorList_isInvisible_closure0: function SelectorList_isInvisible_closure0() {},
      SelectorList_asSassList_closure0: function SelectorList_asSassList_closure0() {},
      SelectorList_asSassList__closure0: function SelectorList_asSassList__closure0() {},
      SelectorList_unify_closure0: function SelectorList_unify_closure0(t0) {
        this.other = t0;
      },
      SelectorList_unify__closure0: function SelectorList_unify__closure0(t0) {
        this.complex1 = t0;
      },
      SelectorList_unify___closure0: function SelectorList_unify___closure0() {},
      SelectorList_resolveParentSelectors_closure0: function SelectorList_resolveParentSelectors_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.implicitParent = t1;
        this.parent = t2;
      },
      SelectorList_resolveParentSelectors__closure1: function SelectorList_resolveParentSelectors__closure1(
        t0
      ) {
        this.complex = t0;
      },
      SelectorList_resolveParentSelectors__closure2: function SelectorList_resolveParentSelectors__closure2(
        t0
      ) {
        this._box_0 = t0;
      },
      SelectorList__complexContainsParentSelector_closure0: function SelectorList__complexContainsParentSelector_closure0() {},
      SelectorList__complexContainsParentSelector__closure0: function SelectorList__complexContainsParentSelector__closure0() {},
      SelectorList__resolveParentSelectorsCompound_closure2: function SelectorList__resolveParentSelectorsCompound_closure2() {},
      SelectorList__resolveParentSelectorsCompound_closure3: function SelectorList__resolveParentSelectorsCompound_closure3(
        t0
      ) {
        this.parent = t0;
      },
      SelectorList__resolveParentSelectorsCompound_closure4: function SelectorList__resolveParentSelectorsCompound_closure4(
        t0,
        t1
      ) {
        this.compound = t0;
        this.resolvedMembers = t1;
      },
      _NodeSassList: function _NodeSassList() {},
      listConstructor_closure: function listConstructor_closure() {},
      listConstructor__closure: function listConstructor__closure() {},
      listConstructor_closure0: function listConstructor_closure0() {},
      listConstructor_closure1: function listConstructor_closure1() {},
      listConstructor_closure2: function listConstructor_closure2() {},
      listConstructor_closure3: function listConstructor_closure3() {},
      listConstructor_closure4: function listConstructor_closure4() {},
      listConstructor_closure5: function listConstructor_closure5() {},
      SassList$0(contents, separator, brackets) {
        var t1 = new D.SassList0(
          P.List_List$unmodifiable(contents, type$.Value_2),
          separator,
          brackets
        );
        t1.SassList$3$brackets0(contents, separator, brackets);
        return t1;
      },
      SassList0: function SassList0(t0, t1, t2) {
        this._list1$_contents = t0;
        this.separator = t1;
        this.hasBrackets = t2;
      },
      SassList_isBlank_closure0: function SassList_isBlank_closure0() {},
      ListSeparator0: function ListSeparator0(t0, t1) {
        this._list1$_name = t0;
        this.separator = t1;
      },
      PseudoSelector$0($name, argument, element, selector) {
        var t1 = !element,
          t2 = t1 && !D.PseudoSelector__isFakePseudoElement0($name);
        return new D.PseudoSelector0(
          $name,
          B.unvendor0($name),
          t2,
          t1,
          argument,
          selector
        );
      },
      PseudoSelector__isFakePseudoElement0($name) {
        switch (C.JSString_methods._codeUnitAt$1($name, 0)) {
          case 97:
          case 65:
            return B.equalsIgnoreCase0($name, 'after');
          case 98:
          case 66:
            return B.equalsIgnoreCase0($name, 'before');
          case 102:
          case 70:
            return (
              B.equalsIgnoreCase0($name, 'first-line') ||
              B.equalsIgnoreCase0($name, 'first-letter')
            );
          default:
            return false;
        }
      },
      PseudoSelector0: function PseudoSelector0(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.name = t0;
        _.normalizedName = t1;
        _.isClass = t2;
        _.isSyntacticClass = t3;
        _.argument = t4;
        _.selector = t5;
        _._pseudo0$_maxSpecificity = _._pseudo0$_minSpecificity = null;
      },
      QualifiedName0: function QualifiedName0(t0, t1) {
        this.name = t0;
        this.namespace = t1;
      },
      SourceMapBuffer: function SourceMapBuffer(t0, t1) {
        var _ = this;
        _._source_map_buffer$_buffer = t0;
        _._entries = t1;
        _._column = _._line = 0;
        _._inSpan = false;
      },
      SourceMapBuffer_buildSourceMap_closure0: function SourceMapBuffer_buildSourceMap_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.prefixLength = t1;
      },
      StringExpression_quoteText0(text) {
        var t1,
          quote = D.StringExpression__bestQuote0(
            H._setArrayType([text], type$.JSArray_String)
          ),
          buffer = new P.StringBuffer('');
        buffer._contents = '' + H.Primitives_stringFromCharCode(quote);
        D.StringExpression__quoteInnerText0(text, quote, buffer, true);
        t1 = buffer._contents += H.Primitives_stringFromCharCode(quote);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      StringExpression__quoteInnerText0(text, quote, buffer, $static) {
        var t1, t2, i, codeUnit, next, t3;
        for (t1 = text.length, t2 = t1 - 1, i = 0; i < t1; ++i) {
          codeUnit = C.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12) {
            buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(97);
            if (i !== t2) {
              next = C.JSString_methods._codeUnitAt$1(text, i + 1);
              if (
                next === 32 ||
                next === 9 ||
                next === 10 ||
                next === 13 ||
                next === 12 ||
                T.isHex0(next)
              )
                buffer.writeCharCode$1(32);
            }
          } else {
            if (codeUnit !== quote)
              if (codeUnit !== 92)
                t3 =
                  $static &&
                  codeUnit === 35 &&
                  i < t2 &&
                  C.JSString_methods._codeUnitAt$1(text, i + 1) === 123;
              else t3 = true;
            else t3 = true;
            if (t3) buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(codeUnit);
          }
        }
      },
      StringExpression__bestQuote0(strings) {
        var t1, containsDoubleQuote, t2, t3, i, codeUnit;
        for (
          t1 = J.get$iterator$ax(strings), containsDoubleQuote = false;
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          for (t3 = t2.length, i = 0; i < t3; ++i) {
            codeUnit = C.JSString_methods._codeUnitAt$1(t2, i);
            if (codeUnit === 39) return 34;
            if (codeUnit === 34) containsDoubleQuote = true;
          }
        }
        return containsDoubleQuote ? 39 : 34;
      },
      StringExpression0: function StringExpression0(t0, t1) {
        this.text = t0;
        this.hasQuotes = t1;
      },
      _codepointForIndex0(index, lengthInCodepoints, allowNegative) {
        var result;
        if (index === 0) return 0;
        if (index > 0) return Math.min(index - 1, lengthInCodepoints);
        result = lengthInCodepoints + index;
        if (result < 0 && !allowNegative) return 0;
        return result;
      },
      _function6($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:string'
        );
      },
      _unquote_closure0: function _unquote_closure0() {},
      _quote_closure0: function _quote_closure0() {},
      _length_closure1: function _length_closure1() {},
      _insert_closure0: function _insert_closure0() {},
      _index_closure1: function _index_closure1() {},
      _slice_closure0: function _slice_closure0() {},
      _toUpperCase_closure0: function _toUpperCase_closure0() {},
      _toLowerCase_closure0: function _toLowerCase_closure0() {},
      _uniqueId_closure0: function _uniqueId_closure0() {},
      _NodeSassString: function _NodeSassString() {},
      stringConstructor_closure: function stringConstructor_closure() {},
      stringConstructor_closure0: function stringConstructor_closure0() {},
      stringConstructor_closure1: function stringConstructor_closure1() {},
      stringConstructor_closure2: function stringConstructor_closure2() {},
      SassString$0(text, quotes) {
        return new D.SassString0(text, quotes);
      },
      SassString0: function SassString0(t0, t1) {
        this.text = t0;
        this.hasQuotes = t1;
        this._string$__SassString_sassLength = null;
      },
      current() {
        var exception,
          t1,
          path,
          lastIndex,
          uri = null;
        try {
          uri = P.Uri_base();
        } catch (exception) {
          if (type$.Exception._is(H.unwrapException(exception))) {
            t1 = $._current;
            if (t1 != null) return t1;
            throw exception;
          } else throw exception;
        }
        if (J.$eq$(uri, $._currentUriBase)) {
          t1 = $._current;
          t1.toString;
          return t1;
        }
        $._currentUriBase = uri;
        if ($.$get$Style_platform() == $.$get$Style_url())
          t1 = $._current = uri.resolve$1('.').toString$0(0);
        else {
          path = uri.toFilePath$0();
          lastIndex = path.length - 1;
          t1 = $._current =
            lastIndex === 0
              ? path
              : C.JSString_methods.substring$2(path, 0, lastIndex);
        }
        return t1;
      },
      absolute(part1, part2, part3, part4, part5, part6, part7) {
        return $.$get$context().absolute$7(
          part1,
          part2,
          part3,
          part4,
          part5,
          part6,
          part7
        );
      },
      join(part1, part2, part3) {
        var _null = null;
        return $.$get$context().join$8(
          0,
          part1,
          part2,
          part3,
          _null,
          _null,
          _null,
          _null,
          _null
        );
      },
      prettyUri(uri) {
        return $.$get$context().prettyUri$1(uri);
      },
    },
    E = {
      Promise: function Promise() {},
      Date: function Date() {},
      JsError: function JsError() {},
      Atomics: function Atomics() {},
      PosixStyle: function PosixStyle(t0, t1, t2) {
        this.separatorPattern = t0;
        this.needsSeparatorPattern = t1;
        this.rootPattern = t2;
      },
      UserDefinedCallable: function UserDefinedCallable(t0, t1, t2) {
        this.declaration = t0;
        this.environment = t1;
        this.$ti = t2;
      },
      SassException$(message, span) {
        return new E.SassException(message, span);
      },
      MultiSpanSassException$(message, span, primaryLabel, secondarySpans) {
        return new E.MultiSpanSassException(
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message,
          span
        );
      },
      SassRuntimeException$(message, span, trace) {
        return new E.SassRuntimeException(trace, message, span);
      },
      MultiSpanSassRuntimeException$(
        message,
        span,
        primaryLabel,
        secondarySpans,
        trace
      ) {
        return new E.MultiSpanSassRuntimeException(
          trace,
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message,
          span
        );
      },
      SassFormatException$(message, span) {
        return new E.SassFormatException(message, span);
      },
      SassScriptException$(message) {
        return new E.SassScriptException(message);
      },
      MultiSpanSassScriptException$(message, primaryLabel, secondarySpans) {
        return new E.MultiSpanSassScriptException(
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message
        );
      },
      SassException: function SassException(t0, t1) {
        this._span_exception$_message = t0;
        this._span = t1;
      },
      MultiSpanSassException: function MultiSpanSassException(t0, t1, t2, t3) {
        var _ = this;
        _.primaryLabel = t0;
        _.secondarySpans = t1;
        _._span_exception$_message = t2;
        _._span = t3;
      },
      SassRuntimeException: function SassRuntimeException(t0, t1, t2) {
        this.trace = t0;
        this._span_exception$_message = t1;
        this._span = t2;
      },
      MultiSpanSassRuntimeException: function MultiSpanSassRuntimeException(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.trace = t0;
        _.primaryLabel = t1;
        _.secondarySpans = t2;
        _._span_exception$_message = t3;
        _._span = t4;
      },
      SassFormatException: function SassFormatException(t0, t1) {
        this._span_exception$_message = t0;
        this._span = t1;
      },
      SassScriptException: function SassScriptException(t0) {
        this.message = t0;
      },
      MultiSpanSassScriptException: function MultiSpanSassScriptException(
        t0,
        t1,
        t2
      ) {
        this.primaryLabel = t0;
        this.secondarySpans = t1;
        this.message = t2;
      },
      ImporterResult: function ImporterResult(t0, t1, t2) {
        this.contents = t0;
        this._sourceMapUrl = t1;
        this.syntax = t2;
      },
      KeyframeSelectorParser$(contents, logger) {
        var t1 = S.SpanScanner$(contents, null);
        return new E.KeyframeSelectorParser(t1, logger);
      },
      KeyframeSelectorParser: function KeyframeSelectorParser(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      KeyframeSelectorParser_parse_closure: function KeyframeSelectorParser_parse_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor$0(
        functions,
        importCache,
        logger,
        nodeImporter,
        quietDeps,
        sourceMap
      ) {
        var t1 = type$.Uri,
          t2 = type$.Module_AsyncCallable,
          t3 = H._setArrayType([], type$.JSArray_Tuple2_String_AstNode),
          t4 = logger == null ? C.StderrLogger_false : logger;
        t3 = new E._EvaluateVisitor0(
          importCache,
          nodeImporter,
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.String,
            type$.AsyncCallable
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode),
          t4,
          P.LinkedHashSet_LinkedHashSet$_empty(type$.Tuple2_String_SourceSpan),
          quietDeps,
          sourceMap,
          Q.AsyncEnvironment$(),
          P.LinkedHashSet_LinkedHashSet$_empty(t1),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_AstNode),
          t3,
          C.Configuration_Map_empty
        );
        t3._EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap0(
          functions,
          importCache,
          logger,
          nodeImporter,
          quietDeps,
          sourceMap
        );
        return t3;
      },
      _EvaluateVisitor0: function _EvaluateVisitor0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._async_evaluate$_importCache = t0;
        _._async_evaluate$_nodeImporter = t1;
        _._async_evaluate$_builtInFunctions = t2;
        _._async_evaluate$_builtInModules = t3;
        _._async_evaluate$_modules = t4;
        _._async_evaluate$_moduleNodes = t5;
        _._async_evaluate$_logger = t6;
        _._async_evaluate$_warningsEmitted = t7;
        _._async_evaluate$_quietDeps = t8;
        _._async_evaluate$_sourceMap = t9;
        _._async_evaluate$_environment = t10;
        _._async_evaluate$_declarationName = _._async_evaluate$__parent = _._async_evaluate$_mediaQueries = _._async_evaluate$_styleRuleIgnoringAtRoot = null;
        _._async_evaluate$_member = 'root stylesheet';
        _._async_evaluate$_importSpan = _._async_evaluate$_callableNode = null;
        _._async_evaluate$_inKeyframes = _._async_evaluate$_atRootExcludingStyleRule = _._async_evaluate$_inUnknownAtRule = _._async_evaluate$_inFunction = false;
        _._async_evaluate$_loadedUrls = t11;
        _._async_evaluate$_activeModules = t12;
        _._async_evaluate$_stack = t13;
        _._async_evaluate$_importer = null;
        _._async_evaluate$_inDependency = false;
        _._async_evaluate$__extensionStore = _._async_evaluate$_outOfOrderImports = _._async_evaluate$__endOfImports = _._async_evaluate$__root = _._async_evaluate$__stylesheet = null;
        _._async_evaluate$_configuration = t14;
      },
      _EvaluateVisitor_closure9: function _EvaluateVisitor_closure9(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure10: function _EvaluateVisitor_closure10(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure11: function _EvaluateVisitor_closure11(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure12: function _EvaluateVisitor_closure12(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure13: function _EvaluateVisitor_closure13(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure14: function _EvaluateVisitor_closure14(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure15: function _EvaluateVisitor_closure15(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure16: function _EvaluateVisitor_closure16(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure4: function _EvaluateVisitor__closure4(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.name = t1;
        this.module = t2;
      },
      _EvaluateVisitor_closure17: function _EvaluateVisitor_closure17(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure18: function _EvaluateVisitor_closure18(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure2: function _EvaluateVisitor__closure2(
        t0,
        t1,
        t2
      ) {
        this.values = t0;
        this.span = t1;
        this.callableNode = t2;
      },
      _EvaluateVisitor__closure3: function _EvaluateVisitor__closure3(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_run_closure0: function _EvaluateVisitor_run_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.importer = t2;
      },
      _EvaluateVisitor__withWarnCallback_closure0: function _EvaluateVisitor__withWarnCallback_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.nodeWithSpan = t1;
      },
      _EvaluateVisitor__loadModule_closure1: function _EvaluateVisitor__loadModule_closure1(
        t0,
        t1
      ) {
        this.callback = t0;
        this.builtInModule = t1;
      },
      _EvaluateVisitor__loadModule_closure2: function _EvaluateVisitor__loadModule_closure2(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _.$this = t0;
        _.url = t1;
        _.nodeWithSpan = t2;
        _.baseUrl = t3;
        _.namesInErrors = t4;
        _.configuration = t5;
        _.callback = t6;
      },
      _EvaluateVisitor__loadModule__closure0: function _EvaluateVisitor__loadModule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.message = t1;
      },
      _EvaluateVisitor__execute_closure0: function _EvaluateVisitor__execute_closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.stylesheet = t2;
        _.extensionStore = t3;
        _.configuration = t4;
        _.css = t5;
      },
      _EvaluateVisitor__combineCss_closure2: function _EvaluateVisitor__combineCss_closure2() {},
      _EvaluateVisitor__combineCss_closure3: function _EvaluateVisitor__combineCss_closure3(
        t0
      ) {
        this.selectors = t0;
      },
      _EvaluateVisitor__combineCss_closure4: function _EvaluateVisitor__combineCss_closure4() {},
      _EvaluateVisitor__extendModules_closure1: function _EvaluateVisitor__extendModules_closure1(
        t0
      ) {
        this.originalSelectors = t0;
      },
      _EvaluateVisitor__extendModules_closure2: function _EvaluateVisitor__extendModules_closure2() {},
      _EvaluateVisitor__topologicalModules_visitModule0: function _EvaluateVisitor__topologicalModules_visitModule0(
        t0,
        t1
      ) {
        this.seen = t0;
        this.sorted = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure2: function _EvaluateVisitor_visitAtRootRule_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure3: function _EvaluateVisitor_visitAtRootRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure4: function _EvaluateVisitor_visitAtRootRule_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure5: function _EvaluateVisitor__scopeForAtRoot_closure5(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.newParent = t1;
        this.node = t2;
      },
      _EvaluateVisitor__scopeForAtRoot_closure6: function _EvaluateVisitor__scopeForAtRoot_closure6(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure7: function _EvaluateVisitor__scopeForAtRoot_closure7(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot__closure0: function _EvaluateVisitor__scopeForAtRoot__closure0(
        t0,
        t1
      ) {
        this.innerScope = t0;
        this.callback = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure8: function _EvaluateVisitor__scopeForAtRoot_closure8(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure9: function _EvaluateVisitor__scopeForAtRoot_closure9() {},
      _EvaluateVisitor__scopeForAtRoot_closure10: function _EvaluateVisitor__scopeForAtRoot_closure10(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor_visitContentRule_closure0: function _EvaluateVisitor_visitContentRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.content = t1;
      },
      _EvaluateVisitor_visitDeclaration_closure1: function _EvaluateVisitor_visitDeclaration_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitDeclaration_closure2: function _EvaluateVisitor_visitDeclaration_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitEachRule_closure2: function _EvaluateVisitor_visitEachRule_closure2(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure3: function _EvaluateVisitor_visitEachRule_closure3(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure4: function _EvaluateVisitor_visitEachRule_closure4(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.list = t1;
        _.setVariables = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitEachRule__closure0: function _EvaluateVisitor_visitEachRule__closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.setVariables = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitEachRule___closure0: function _EvaluateVisitor_visitEachRule___closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitExtendRule_closure0: function _EvaluateVisitor_visitExtendRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.targetText = t1;
      },
      _EvaluateVisitor_visitAtRule_closure2: function _EvaluateVisitor_visitAtRule_closure2(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitAtRule_closure3: function _EvaluateVisitor_visitAtRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule__closure0: function _EvaluateVisitor_visitAtRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule_closure4: function _EvaluateVisitor_visitAtRule_closure4() {},
      _EvaluateVisitor_visitForRule_closure4: function _EvaluateVisitor_visitForRule_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure5: function _EvaluateVisitor_visitForRule_closure5(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure6: function _EvaluateVisitor_visitForRule_closure6(
        t0
      ) {
        this.fromNumber = t0;
      },
      _EvaluateVisitor_visitForRule_closure7: function _EvaluateVisitor_visitForRule_closure7(
        t0,
        t1
      ) {
        this.toNumber = t0;
        this.fromNumber = t1;
      },
      _EvaluateVisitor_visitForRule_closure8: function _EvaluateVisitor_visitForRule_closure8(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.node = t2;
        _.from = t3;
        _.direction = t4;
        _.fromNumber = t5;
      },
      _EvaluateVisitor_visitForRule__closure0: function _EvaluateVisitor_visitForRule__closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitForwardRule_closure1: function _EvaluateVisitor_visitForwardRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForwardRule_closure2: function _EvaluateVisitor_visitForwardRule_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIfRule_closure0: function _EvaluateVisitor_visitIfRule_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitIfRule__closure0: function _EvaluateVisitor_visitIfRule__closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport_closure0: function _EvaluateVisitor__visitDynamicImport_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.$import = t1;
      },
      _EvaluateVisitor__visitDynamicImport__closure1: function _EvaluateVisitor__visitDynamicImport__closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport__closure2: function _EvaluateVisitor__visitDynamicImport__closure2(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.result = t1;
        _.stylesheet = t2;
        _.environment = t3;
        _.children = t4;
      },
      _EvaluateVisitor__visitStaticImport_closure0: function _EvaluateVisitor__visitStaticImport_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure3: function _EvaluateVisitor_visitIncludeRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIncludeRule_closure4: function _EvaluateVisitor_visitIncludeRule_closure4(
        t0
      ) {
        this.node = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure6: function _EvaluateVisitor_visitIncludeRule_closure6(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure5: function _EvaluateVisitor_visitIncludeRule_closure5(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.contentCallable = t1;
        _.mixin = t2;
        _.nodeWithSpan = t3;
      },
      _EvaluateVisitor_visitIncludeRule__closure0: function _EvaluateVisitor_visitIncludeRule__closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule___closure0: function _EvaluateVisitor_visitIncludeRule___closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule____closure0: function _EvaluateVisitor_visitIncludeRule____closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.statement = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure2: function _EvaluateVisitor_visitMediaRule_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.queries = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure3: function _EvaluateVisitor_visitMediaRule_closure3(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.mergedQueries = t1;
        _.queries = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitMediaRule__closure0: function _EvaluateVisitor_visitMediaRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule___closure0: function _EvaluateVisitor_visitMediaRule___closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure4: function _EvaluateVisitor_visitMediaRule_closure4(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor__visitMediaQueries_closure0: function _EvaluateVisitor__visitMediaQueries_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure6: function _EvaluateVisitor_visitStyleRule_closure6(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure7: function _EvaluateVisitor_visitStyleRule_closure7(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure8: function _EvaluateVisitor_visitStyleRule_closure8() {},
      _EvaluateVisitor_visitStyleRule_closure9: function _EvaluateVisitor_visitStyleRule_closure9(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure10: function _EvaluateVisitor_visitStyleRule_closure10(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure11: function _EvaluateVisitor_visitStyleRule_closure11(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitStyleRule__closure0: function _EvaluateVisitor_visitStyleRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure12: function _EvaluateVisitor_visitStyleRule_closure12() {},
      _EvaluateVisitor_visitSupportsRule_closure1: function _EvaluateVisitor_visitSupportsRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule__closure0: function _EvaluateVisitor_visitSupportsRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule_closure2: function _EvaluateVisitor_visitSupportsRule_closure2() {},
      _EvaluateVisitor_visitVariableDeclaration_closure2: function _EvaluateVisitor_visitVariableDeclaration_closure2(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.override = t2;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure3: function _EvaluateVisitor_visitVariableDeclaration_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure4: function _EvaluateVisitor_visitVariableDeclaration_closure4(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.value = t2;
      },
      _EvaluateVisitor_visitUseRule_closure0: function _EvaluateVisitor_visitUseRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWarnRule_closure0: function _EvaluateVisitor_visitWarnRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule_closure0: function _EvaluateVisitor_visitWhileRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule__closure0: function _EvaluateVisitor_visitWhileRule__closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure0: function _EvaluateVisitor_visitBinaryOperationExpression_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation0: function _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation0() {},
      _EvaluateVisitor_visitVariableExpression_closure0: function _EvaluateVisitor_visitVariableExpression_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitListExpression_closure0: function _EvaluateVisitor_visitListExpression_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitFunctionExpression_closure1: function _EvaluateVisitor_visitFunctionExpression_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitFunctionExpression_closure2: function _EvaluateVisitor_visitFunctionExpression_closure2(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitInterpolatedFunctionExpression_closure0: function _EvaluateVisitor_visitInterpolatedFunctionExpression_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.$function = t2;
      },
      _EvaluateVisitor__runUserDefinedCallable_closure0: function _EvaluateVisitor__runUserDefinedCallable_closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.callable = t1;
        _.evaluated = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable__closure0: function _EvaluateVisitor__runUserDefinedCallable__closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable___closure0: function _EvaluateVisitor__runUserDefinedCallable___closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable____closure0: function _EvaluateVisitor__runUserDefinedCallable____closure0() {},
      _EvaluateVisitor__runFunctionCallable_closure0: function _EvaluateVisitor__runFunctionCallable_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.callable = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure2: function _EvaluateVisitor__runBuiltInCallable_closure2(
        t0,
        t1,
        t2
      ) {
        this.overload = t0;
        this.evaluated = t1;
        this.namedSet = t2;
      },
      _EvaluateVisitor__runBuiltInCallable_closure3: function _EvaluateVisitor__runBuiltInCallable_closure3(
        t0,
        t1
      ) {
        this.callback = t0;
        this.evaluated = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure4: function _EvaluateVisitor__runBuiltInCallable_closure4() {},
      _EvaluateVisitor__evaluateArguments_closure3: function _EvaluateVisitor__evaluateArguments_closure3() {},
      _EvaluateVisitor__evaluateArguments_closure4: function _EvaluateVisitor__evaluateArguments_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
      },
      _EvaluateVisitor__evaluateArguments_closure5: function _EvaluateVisitor__evaluateArguments_closure5(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.namedNodes = t3;
      },
      _EvaluateVisitor__evaluateArguments_closure6: function _EvaluateVisitor__evaluateArguments_closure6() {},
      _EvaluateVisitor__evaluateMacroArguments_closure3: function _EvaluateVisitor__evaluateMacroArguments_closure3(
        t0
      ) {
        this.restArgs = t0;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure4: function _EvaluateVisitor__evaluateMacroArguments_closure4(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
        this.restArgs = t2;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure5: function _EvaluateVisitor__evaluateMacroArguments_closure5(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.restArgs = t3;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure6: function _EvaluateVisitor__evaluateMacroArguments_closure6(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.keywordRestNodeForSpan = t1;
        this.keywordRestArgs = t2;
      },
      _EvaluateVisitor__addRestMap_closure0: function _EvaluateVisitor__addRestMap_closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.values = t1;
        _.convert = t2;
        _.expressionNode = t3;
        _.map = t4;
        _.nodeWithSpan = t5;
      },
      _EvaluateVisitor__verifyArguments_closure0: function _EvaluateVisitor__verifyArguments_closure0(
        t0,
        t1,
        t2
      ) {
        this.$arguments = t0;
        this.positional = t1;
        this.named = t2;
      },
      _EvaluateVisitor_visitStringExpression_closure0: function _EvaluateVisitor_visitStringExpression_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitCssAtRule_closure1: function _EvaluateVisitor_visitCssAtRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssAtRule_closure2: function _EvaluateVisitor_visitCssAtRule_closure2() {},
      _EvaluateVisitor_visitCssKeyframeBlock_closure1: function _EvaluateVisitor_visitCssKeyframeBlock_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssKeyframeBlock_closure2: function _EvaluateVisitor_visitCssKeyframeBlock_closure2() {},
      _EvaluateVisitor_visitCssMediaRule_closure2: function _EvaluateVisitor_visitCssMediaRule_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure3: function _EvaluateVisitor_visitCssMediaRule_closure3(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mergedQueries = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssMediaRule__closure0: function _EvaluateVisitor_visitCssMediaRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule___closure0: function _EvaluateVisitor_visitCssMediaRule___closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure4: function _EvaluateVisitor_visitCssMediaRule_closure4(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor_visitCssStyleRule_closure1: function _EvaluateVisitor_visitCssStyleRule_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssStyleRule__closure0: function _EvaluateVisitor_visitCssStyleRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssStyleRule_closure2: function _EvaluateVisitor_visitCssStyleRule_closure2() {},
      _EvaluateVisitor_visitCssSupportsRule_closure1: function _EvaluateVisitor_visitCssSupportsRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule__closure0: function _EvaluateVisitor_visitCssSupportsRule__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule_closure2: function _EvaluateVisitor_visitCssSupportsRule_closure2() {},
      _EvaluateVisitor__performInterpolation_closure0: function _EvaluateVisitor__performInterpolation_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.warnForColor = t1;
        this.interpolation = t2;
      },
      _EvaluateVisitor__serialize_closure0: function _EvaluateVisitor__serialize_closure0(
        t0,
        t1
      ) {
        this.value = t0;
        this.quote = t1;
      },
      _EvaluateVisitor__expressionNode_closure0: function _EvaluateVisitor__expressionNode_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.expression = t1;
      },
      _EvaluateVisitor__withoutSlash_recommendation0: function _EvaluateVisitor__withoutSlash_recommendation0() {},
      _EvaluateVisitor__stackFrame_closure0: function _EvaluateVisitor__stackFrame_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__stackTrace_closure0: function _EvaluateVisitor__stackTrace_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _ImportedCssVisitor0: function _ImportedCssVisitor0(t0) {
        this._async_evaluate$_visitor = t0;
      },
      _ImportedCssVisitor_visitCssAtRule_closure0: function _ImportedCssVisitor_visitCssAtRule_closure0() {},
      _ImportedCssVisitor_visitCssMediaRule_closure0: function _ImportedCssVisitor_visitCssMediaRule_closure0(
        t0
      ) {
        this.hasBeenMerged = t0;
      },
      _ImportedCssVisitor_visitCssStyleRule_closure0: function _ImportedCssVisitor_visitCssStyleRule_closure0() {},
      _ImportedCssVisitor_visitCssSupportsRule_closure0: function _ImportedCssVisitor_visitCssSupportsRule_closure0() {},
      EvaluateResult: function EvaluateResult(t0) {
        this.stylesheet = t0;
      },
      _ArgumentResults0: function _ArgumentResults0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.positional = t0;
        _.positionalNodes = t1;
        _.named = t2;
        _.namedNodes = t3;
        _.separator = t4;
      },
      _LoadedStylesheet0: function _LoadedStylesheet0(t0, t1, t2) {
        this.stylesheet = t0;
        this.importer = t1;
        this.isDependency = t2;
      },
      StringScannerException$(message, span, source) {
        return new E.StringScannerException(source, message, span);
      },
      StringScannerException: function StringScannerException(t0, t1, t2) {
        this.source = t0;
        this._span_exception$_message = t1;
        this._span = t2;
      },
      _EvaluateVisitor$1(
        functions,
        importCache,
        logger,
        nodeImporter,
        quietDeps,
        sourceMap
      ) {
        var t4,
          t5,
          t1 = type$.Uri,
          t2 = type$.Module_AsyncCallable_2,
          t3 = H._setArrayType([], type$.JSArray_Tuple2_String_AstNode_2);
        if (nodeImporter == null)
          t4 =
            importCache == null ? O.AsyncImportCache$none(logger) : importCache;
        else t4 = null;
        t5 = logger == null ? C.C_StderrLogger : logger;
        t3 = new E._EvaluateVisitor1(
          t4,
          nodeImporter,
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.String,
            type$.AsyncCallable_2
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode_2),
          t5,
          P.LinkedHashSet_LinkedHashSet$_empty(type$.Tuple2_String_SourceSpan),
          quietDeps,
          sourceMap,
          Q.AsyncEnvironment$0(),
          P.LinkedHashSet_LinkedHashSet$_empty(t1),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_AstNode_2),
          t3,
          C.Configuration_Map_empty0
        );
        t3._EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap1(
          functions,
          importCache,
          logger,
          nodeImporter,
          quietDeps,
          sourceMap
        );
        return t3;
      },
      _EvaluateVisitor1: function _EvaluateVisitor1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._async_evaluate0$_importCache = t0;
        _._async_evaluate0$_nodeImporter = t1;
        _._async_evaluate0$_builtInFunctions = t2;
        _._async_evaluate0$_builtInModules = t3;
        _._async_evaluate0$_modules = t4;
        _._async_evaluate0$_moduleNodes = t5;
        _._async_evaluate0$_logger = t6;
        _._async_evaluate0$_warningsEmitted = t7;
        _._async_evaluate0$_quietDeps = t8;
        _._async_evaluate0$_sourceMap = t9;
        _._async_evaluate0$_environment = t10;
        _._async_evaluate0$_declarationName = _._async_evaluate0$__parent = _._async_evaluate0$_mediaQueries = _._async_evaluate0$_styleRuleIgnoringAtRoot = null;
        _._async_evaluate0$_member = 'root stylesheet';
        _._async_evaluate0$_importSpan = _._async_evaluate0$_callableNode = null;
        _._async_evaluate0$_inKeyframes = _._async_evaluate0$_atRootExcludingStyleRule = _._async_evaluate0$_inUnknownAtRule = _._async_evaluate0$_inFunction = false;
        _._async_evaluate0$_loadedUrls = t11;
        _._async_evaluate0$_activeModules = t12;
        _._async_evaluate0$_stack = t13;
        _._async_evaluate0$_importer = null;
        _._async_evaluate0$_inDependency = false;
        _._async_evaluate0$__extensionStore = _._async_evaluate0$_outOfOrderImports = _._async_evaluate0$__endOfImports = _._async_evaluate0$__root = _._async_evaluate0$__stylesheet = null;
        _._async_evaluate0$_configuration = t14;
      },
      _EvaluateVisitor_closure19: function _EvaluateVisitor_closure19(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure20: function _EvaluateVisitor_closure20(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure21: function _EvaluateVisitor_closure21(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure22: function _EvaluateVisitor_closure22(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure23: function _EvaluateVisitor_closure23(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure24: function _EvaluateVisitor_closure24(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure25: function _EvaluateVisitor_closure25(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure26: function _EvaluateVisitor_closure26(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure7: function _EvaluateVisitor__closure7(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.name = t1;
        this.module = t2;
      },
      _EvaluateVisitor_closure27: function _EvaluateVisitor_closure27(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure28: function _EvaluateVisitor_closure28(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure5: function _EvaluateVisitor__closure5(
        t0,
        t1,
        t2
      ) {
        this.values = t0;
        this.span = t1;
        this.callableNode = t2;
      },
      _EvaluateVisitor__closure6: function _EvaluateVisitor__closure6(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_run_closure1: function _EvaluateVisitor_run_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.importer = t2;
      },
      _EvaluateVisitor__withWarnCallback_closure1: function _EvaluateVisitor__withWarnCallback_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.nodeWithSpan = t1;
      },
      _EvaluateVisitor__loadModule_closure3: function _EvaluateVisitor__loadModule_closure3(
        t0,
        t1
      ) {
        this.callback = t0;
        this.builtInModule = t1;
      },
      _EvaluateVisitor__loadModule_closure4: function _EvaluateVisitor__loadModule_closure4(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _.$this = t0;
        _.url = t1;
        _.nodeWithSpan = t2;
        _.baseUrl = t3;
        _.namesInErrors = t4;
        _.configuration = t5;
        _.callback = t6;
      },
      _EvaluateVisitor__loadModule__closure1: function _EvaluateVisitor__loadModule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.message = t1;
      },
      _EvaluateVisitor__execute_closure1: function _EvaluateVisitor__execute_closure1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.stylesheet = t2;
        _.extensionStore = t3;
        _.configuration = t4;
        _.css = t5;
      },
      _EvaluateVisitor__combineCss_closure5: function _EvaluateVisitor__combineCss_closure5() {},
      _EvaluateVisitor__combineCss_closure6: function _EvaluateVisitor__combineCss_closure6(
        t0
      ) {
        this.selectors = t0;
      },
      _EvaluateVisitor__combineCss_closure7: function _EvaluateVisitor__combineCss_closure7() {},
      _EvaluateVisitor__extendModules_closure3: function _EvaluateVisitor__extendModules_closure3(
        t0
      ) {
        this.originalSelectors = t0;
      },
      _EvaluateVisitor__extendModules_closure4: function _EvaluateVisitor__extendModules_closure4() {},
      _EvaluateVisitor__topologicalModules_visitModule1: function _EvaluateVisitor__topologicalModules_visitModule1(
        t0,
        t1
      ) {
        this.seen = t0;
        this.sorted = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure5: function _EvaluateVisitor_visitAtRootRule_closure5(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure6: function _EvaluateVisitor_visitAtRootRule_closure6(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure7: function _EvaluateVisitor_visitAtRootRule_closure7(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure11: function _EvaluateVisitor__scopeForAtRoot_closure11(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.newParent = t1;
        this.node = t2;
      },
      _EvaluateVisitor__scopeForAtRoot_closure12: function _EvaluateVisitor__scopeForAtRoot_closure12(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure13: function _EvaluateVisitor__scopeForAtRoot_closure13(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot__closure1: function _EvaluateVisitor__scopeForAtRoot__closure1(
        t0,
        t1
      ) {
        this.innerScope = t0;
        this.callback = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure14: function _EvaluateVisitor__scopeForAtRoot_closure14(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure15: function _EvaluateVisitor__scopeForAtRoot_closure15() {},
      _EvaluateVisitor__scopeForAtRoot_closure16: function _EvaluateVisitor__scopeForAtRoot_closure16(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor_visitContentRule_closure1: function _EvaluateVisitor_visitContentRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.content = t1;
      },
      _EvaluateVisitor_visitDeclaration_closure3: function _EvaluateVisitor_visitDeclaration_closure3(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitDeclaration_closure4: function _EvaluateVisitor_visitDeclaration_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitEachRule_closure5: function _EvaluateVisitor_visitEachRule_closure5(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure6: function _EvaluateVisitor_visitEachRule_closure6(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure7: function _EvaluateVisitor_visitEachRule_closure7(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.list = t1;
        _.setVariables = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitEachRule__closure1: function _EvaluateVisitor_visitEachRule__closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.setVariables = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitEachRule___closure1: function _EvaluateVisitor_visitEachRule___closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitExtendRule_closure1: function _EvaluateVisitor_visitExtendRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.targetText = t1;
      },
      _EvaluateVisitor_visitAtRule_closure5: function _EvaluateVisitor_visitAtRule_closure5(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitAtRule_closure6: function _EvaluateVisitor_visitAtRule_closure6(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule__closure1: function _EvaluateVisitor_visitAtRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule_closure7: function _EvaluateVisitor_visitAtRule_closure7() {},
      _EvaluateVisitor_visitForRule_closure9: function _EvaluateVisitor_visitForRule_closure9(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure10: function _EvaluateVisitor_visitForRule_closure10(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure11: function _EvaluateVisitor_visitForRule_closure11(
        t0
      ) {
        this.fromNumber = t0;
      },
      _EvaluateVisitor_visitForRule_closure12: function _EvaluateVisitor_visitForRule_closure12(
        t0,
        t1
      ) {
        this.toNumber = t0;
        this.fromNumber = t1;
      },
      _EvaluateVisitor_visitForRule_closure13: function _EvaluateVisitor_visitForRule_closure13(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.node = t2;
        _.from = t3;
        _.direction = t4;
        _.fromNumber = t5;
      },
      _EvaluateVisitor_visitForRule__closure1: function _EvaluateVisitor_visitForRule__closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitForwardRule_closure3: function _EvaluateVisitor_visitForwardRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForwardRule_closure4: function _EvaluateVisitor_visitForwardRule_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIfRule_closure1: function _EvaluateVisitor_visitIfRule_closure1(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitIfRule__closure1: function _EvaluateVisitor_visitIfRule__closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport_closure1: function _EvaluateVisitor__visitDynamicImport_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.$import = t1;
      },
      _EvaluateVisitor__visitDynamicImport__closure3: function _EvaluateVisitor__visitDynamicImport__closure3(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport__closure4: function _EvaluateVisitor__visitDynamicImport__closure4(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.result = t1;
        _.stylesheet = t2;
        _.environment = t3;
        _.children = t4;
      },
      _EvaluateVisitor__visitStaticImport_closure1: function _EvaluateVisitor__visitStaticImport_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure7: function _EvaluateVisitor_visitIncludeRule_closure7(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIncludeRule_closure8: function _EvaluateVisitor_visitIncludeRule_closure8(
        t0
      ) {
        this.node = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure10: function _EvaluateVisitor_visitIncludeRule_closure10(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure9: function _EvaluateVisitor_visitIncludeRule_closure9(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.contentCallable = t1;
        _.mixin = t2;
        _.nodeWithSpan = t3;
      },
      _EvaluateVisitor_visitIncludeRule__closure1: function _EvaluateVisitor_visitIncludeRule__closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule___closure1: function _EvaluateVisitor_visitIncludeRule___closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule____closure1: function _EvaluateVisitor_visitIncludeRule____closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.statement = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure5: function _EvaluateVisitor_visitMediaRule_closure5(
        t0,
        t1
      ) {
        this.$this = t0;
        this.queries = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure6: function _EvaluateVisitor_visitMediaRule_closure6(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.mergedQueries = t1;
        _.queries = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitMediaRule__closure1: function _EvaluateVisitor_visitMediaRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule___closure1: function _EvaluateVisitor_visitMediaRule___closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure7: function _EvaluateVisitor_visitMediaRule_closure7(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor__visitMediaQueries_closure1: function _EvaluateVisitor__visitMediaQueries_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure13: function _EvaluateVisitor_visitStyleRule_closure13(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure14: function _EvaluateVisitor_visitStyleRule_closure14(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure15: function _EvaluateVisitor_visitStyleRule_closure15() {},
      _EvaluateVisitor_visitStyleRule_closure16: function _EvaluateVisitor_visitStyleRule_closure16(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure17: function _EvaluateVisitor_visitStyleRule_closure17(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure18: function _EvaluateVisitor_visitStyleRule_closure18(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitStyleRule__closure1: function _EvaluateVisitor_visitStyleRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure19: function _EvaluateVisitor_visitStyleRule_closure19() {},
      _EvaluateVisitor_visitSupportsRule_closure3: function _EvaluateVisitor_visitSupportsRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule__closure1: function _EvaluateVisitor_visitSupportsRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule_closure4: function _EvaluateVisitor_visitSupportsRule_closure4() {},
      _EvaluateVisitor_visitVariableDeclaration_closure5: function _EvaluateVisitor_visitVariableDeclaration_closure5(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.override = t2;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure6: function _EvaluateVisitor_visitVariableDeclaration_closure6(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure7: function _EvaluateVisitor_visitVariableDeclaration_closure7(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.value = t2;
      },
      _EvaluateVisitor_visitUseRule_closure1: function _EvaluateVisitor_visitUseRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWarnRule_closure1: function _EvaluateVisitor_visitWarnRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule_closure1: function _EvaluateVisitor_visitWhileRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule__closure1: function _EvaluateVisitor_visitWhileRule__closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure1: function _EvaluateVisitor_visitBinaryOperationExpression_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation1: function _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation1() {},
      _EvaluateVisitor_visitVariableExpression_closure1: function _EvaluateVisitor_visitVariableExpression_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitListExpression_closure1: function _EvaluateVisitor_visitListExpression_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitFunctionExpression_closure3: function _EvaluateVisitor_visitFunctionExpression_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitFunctionExpression_closure4: function _EvaluateVisitor_visitFunctionExpression_closure4(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitInterpolatedFunctionExpression_closure1: function _EvaluateVisitor_visitInterpolatedFunctionExpression_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.$function = t2;
      },
      _EvaluateVisitor__runUserDefinedCallable_closure1: function _EvaluateVisitor__runUserDefinedCallable_closure1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.callable = t1;
        _.evaluated = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable__closure1: function _EvaluateVisitor__runUserDefinedCallable__closure1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable___closure1: function _EvaluateVisitor__runUserDefinedCallable___closure1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable____closure1: function _EvaluateVisitor__runUserDefinedCallable____closure1() {},
      _EvaluateVisitor__runFunctionCallable_closure1: function _EvaluateVisitor__runFunctionCallable_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.callable = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure5: function _EvaluateVisitor__runBuiltInCallable_closure5(
        t0,
        t1,
        t2
      ) {
        this.overload = t0;
        this.evaluated = t1;
        this.namedSet = t2;
      },
      _EvaluateVisitor__runBuiltInCallable_closure6: function _EvaluateVisitor__runBuiltInCallable_closure6(
        t0,
        t1
      ) {
        this.callback = t0;
        this.evaluated = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure7: function _EvaluateVisitor__runBuiltInCallable_closure7() {},
      _EvaluateVisitor__evaluateArguments_closure7: function _EvaluateVisitor__evaluateArguments_closure7() {},
      _EvaluateVisitor__evaluateArguments_closure8: function _EvaluateVisitor__evaluateArguments_closure8(
        t0,
        t1
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
      },
      _EvaluateVisitor__evaluateArguments_closure9: function _EvaluateVisitor__evaluateArguments_closure9(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.namedNodes = t3;
      },
      _EvaluateVisitor__evaluateArguments_closure10: function _EvaluateVisitor__evaluateArguments_closure10() {},
      _EvaluateVisitor__evaluateMacroArguments_closure7: function _EvaluateVisitor__evaluateMacroArguments_closure7(
        t0
      ) {
        this.restArgs = t0;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure8: function _EvaluateVisitor__evaluateMacroArguments_closure8(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
        this.restArgs = t2;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure9: function _EvaluateVisitor__evaluateMacroArguments_closure9(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.restArgs = t3;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure10: function _EvaluateVisitor__evaluateMacroArguments_closure10(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.keywordRestNodeForSpan = t1;
        this.keywordRestArgs = t2;
      },
      _EvaluateVisitor__addRestMap_closure1: function _EvaluateVisitor__addRestMap_closure1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.values = t1;
        _.convert = t2;
        _.expressionNode = t3;
        _.map = t4;
        _.nodeWithSpan = t5;
      },
      _EvaluateVisitor__verifyArguments_closure1: function _EvaluateVisitor__verifyArguments_closure1(
        t0,
        t1,
        t2
      ) {
        this.$arguments = t0;
        this.positional = t1;
        this.named = t2;
      },
      _EvaluateVisitor_visitStringExpression_closure1: function _EvaluateVisitor_visitStringExpression_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitCssAtRule_closure3: function _EvaluateVisitor_visitCssAtRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssAtRule_closure4: function _EvaluateVisitor_visitCssAtRule_closure4() {},
      _EvaluateVisitor_visitCssKeyframeBlock_closure3: function _EvaluateVisitor_visitCssKeyframeBlock_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssKeyframeBlock_closure4: function _EvaluateVisitor_visitCssKeyframeBlock_closure4() {},
      _EvaluateVisitor_visitCssMediaRule_closure5: function _EvaluateVisitor_visitCssMediaRule_closure5(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure6: function _EvaluateVisitor_visitCssMediaRule_closure6(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mergedQueries = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssMediaRule__closure1: function _EvaluateVisitor_visitCssMediaRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule___closure1: function _EvaluateVisitor_visitCssMediaRule___closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure7: function _EvaluateVisitor_visitCssMediaRule_closure7(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor_visitCssStyleRule_closure3: function _EvaluateVisitor_visitCssStyleRule_closure3(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssStyleRule__closure1: function _EvaluateVisitor_visitCssStyleRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssStyleRule_closure4: function _EvaluateVisitor_visitCssStyleRule_closure4() {},
      _EvaluateVisitor_visitCssSupportsRule_closure3: function _EvaluateVisitor_visitCssSupportsRule_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule__closure1: function _EvaluateVisitor_visitCssSupportsRule__closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule_closure4: function _EvaluateVisitor_visitCssSupportsRule_closure4() {},
      _EvaluateVisitor__performInterpolation_closure1: function _EvaluateVisitor__performInterpolation_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.warnForColor = t1;
        this.interpolation = t2;
      },
      _EvaluateVisitor__serialize_closure1: function _EvaluateVisitor__serialize_closure1(
        t0,
        t1
      ) {
        this.value = t0;
        this.quote = t1;
      },
      _EvaluateVisitor__expressionNode_closure1: function _EvaluateVisitor__expressionNode_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.expression = t1;
      },
      _EvaluateVisitor__withoutSlash_recommendation1: function _EvaluateVisitor__withoutSlash_recommendation1() {},
      _EvaluateVisitor__stackFrame_closure1: function _EvaluateVisitor__stackFrame_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__stackTrace_closure1: function _EvaluateVisitor__stackTrace_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _ImportedCssVisitor1: function _ImportedCssVisitor1(t0) {
        this._async_evaluate0$_visitor = t0;
      },
      _ImportedCssVisitor_visitCssAtRule_closure1: function _ImportedCssVisitor_visitCssAtRule_closure1() {},
      _ImportedCssVisitor_visitCssMediaRule_closure1: function _ImportedCssVisitor_visitCssMediaRule_closure1(
        t0
      ) {
        this.hasBeenMerged = t0;
      },
      _ImportedCssVisitor_visitCssStyleRule_closure1: function _ImportedCssVisitor_visitCssStyleRule_closure1() {},
      _ImportedCssVisitor_visitCssSupportsRule_closure1: function _ImportedCssVisitor_visitCssSupportsRule_closure1() {},
      EvaluateResult0: function EvaluateResult0(t0, t1) {
        this.stylesheet = t0;
        this.loadedUrls = t1;
      },
      _ArgumentResults1: function _ArgumentResults1(t0, t1, t2, t3, t4) {
        var _ = this;
        _.positional = t0;
        _.positionalNodes = t1;
        _.named = t2;
        _.namedNodes = t3;
        _.separator = t4;
      },
      _LoadedStylesheet1: function _LoadedStylesheet1(t0, t1, t2) {
        this.stylesheet = t0;
        this.importer = t1;
        this.isDependency = t2;
      },
      SassException$0(message, span) {
        return new E.SassException0(message, span);
      },
      MultiSpanSassException$0(message, span, primaryLabel, secondarySpans) {
        return new E.MultiSpanSassException0(
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message,
          span
        );
      },
      SassRuntimeException$0(message, span, trace) {
        return new E.SassRuntimeException0(trace, message, span);
      },
      MultiSpanSassRuntimeException$0(
        message,
        span,
        primaryLabel,
        secondarySpans,
        trace
      ) {
        return new E.MultiSpanSassRuntimeException0(
          trace,
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message,
          span
        );
      },
      SassFormatException$0(message, span) {
        return new E.SassFormatException0(message, span);
      },
      SassScriptException$0(message) {
        return new E.SassScriptException0(message);
      },
      MultiSpanSassScriptException$0(message, primaryLabel, secondarySpans) {
        return new E.MultiSpanSassScriptException0(
          primaryLabel,
          H.ConstantMap_ConstantMap$from(
            secondarySpans,
            type$.FileSpan,
            type$.String
          ),
          message
        );
      },
      SassException0: function SassException0(t0, t1) {
        this._span_exception$_message = t0;
        this._span = t1;
      },
      MultiSpanSassException0: function MultiSpanSassException0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.primaryLabel = t0;
        _.secondarySpans = t1;
        _._span_exception$_message = t2;
        _._span = t3;
      },
      SassRuntimeException0: function SassRuntimeException0(t0, t1, t2) {
        this.trace = t0;
        this._span_exception$_message = t1;
        this._span = t2;
      },
      MultiSpanSassRuntimeException0: function MultiSpanSassRuntimeException0(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.trace = t0;
        _.primaryLabel = t1;
        _.secondarySpans = t2;
        _._span_exception$_message = t3;
        _._span = t4;
      },
      SassFormatException0: function SassFormatException0(t0, t1) {
        this._span_exception$_message = t0;
        this._span = t1;
      },
      SassScriptException0: function SassScriptException0(t0) {
        this.message = t0;
      },
      MultiSpanSassScriptException0: function MultiSpanSassScriptException0(
        t0,
        t1,
        t2
      ) {
        this.primaryLabel = t0;
        this.secondarySpans = t1;
        this.message = t2;
      },
      KeyframeSelectorParser0: function KeyframeSelectorParser0(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      KeyframeSelectorParser_parse_closure0: function KeyframeSelectorParser_parse_closure0(
        t0
      ) {
        this.$this = t0;
      },
      ImporterResult0: function ImporterResult0(t0, t1, t2) {
        this.contents = t0;
        this._result$_sourceMapUrl = t1;
        this.syntax = t2;
      },
      UserDefinedCallable0: function UserDefinedCallable0(t0, t1, t2) {
        this.declaration = t0;
        this.environment = t1;
        this.$ti = t2;
      },
    },
    F = {
      ValueResult: function ValueResult(t0, t1) {
        this.value = t0;
        this.$ti = t1;
      },
      ConsoleModule: function ConsoleModule() {},
      Console: function Console() {},
      EventEmitter: function EventEmitter() {},
      UrlStyle: function UrlStyle(t0, t1, t2, t3) {
        var _ = this;
        _.separatorPattern = t0;
        _.needsSeparatorPattern = t1;
        _.rootPattern = t2;
        _.relativeRootPattern = t3;
      },
      CssMediaQuery: function CssMediaQuery(t0, t1, t2) {
        this.modifier = t0;
        this.type = t1;
        this.features = t2;
      },
      _SingletonCssMediaQueryMergeResult: function _SingletonCssMediaQueryMergeResult(
        t0
      ) {
        this._media_query$_name = t0;
      },
      MediaQuerySuccessfulMergeResult: function MediaQuerySuccessfulMergeResult(
        t0
      ) {
        this.query = t0;
      },
      ModifiableCssImport$(url, span, media, supports) {
        return new F.ModifiableCssImport(
          url,
          supports,
          media == null
            ? null
            : P.List_List$unmodifiable(media, type$.CssMediaQuery),
          span
        );
      },
      ModifiableCssImport: function ModifiableCssImport(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.supports = t1;
        _.media = t2;
        _.span = t3;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      ModifiableCssValue: function ModifiableCssValue(t0, t1, t2) {
        this.value = t0;
        this.span = t1;
        this.$ti = t2;
      },
      CssValue: function CssValue(t0, t1, t2) {
        this.value = t0;
        this.span = t1;
        this.$ti = t2;
      },
      FunctionExpression: function FunctionExpression(t0, t1, t2, t3) {
        var _ = this;
        _.namespace = t0;
        _.originalName = t1;
        _.$arguments = t2;
        _.span = t3;
      },
      ValueExpression: function ValueExpression(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      SupportsFunction: function SupportsFunction(t0, t1, t2) {
        this.name = t0;
        this.$arguments = t1;
        this.span = t2;
      },
      TypeSelector: function TypeSelector(t0) {
        this.name = t0;
      },
      EmptyExtensionStore: function EmptyExtensionStore() {},
      FilesystemImporter: function FilesystemImporter(t0) {
        this._loadPath = t0;
      },
      FilesystemImporter_canonicalize_closure: function FilesystemImporter_canonicalize_closure() {},
      _realCasePath(path) {
        var prefix, t1;
        if (
          !(
            J.$eq$(J.get$platform$x(self.process), 'win32') ||
            J.$eq$(J.get$platform$x(self.process), 'darwin')
          )
        )
          return path;
        if (J.$eq$(J.get$platform$x(self.process), 'win32')) {
          prefix = C.JSString_methods.substring$2(
            path,
            0,
            $.$get$context().style.rootLength$1(path)
          );
          t1 = prefix.length;
          if (
            t1 !== 0 &&
            T.isAlphabetic0(C.JSString_methods._codeUnitAt$1(prefix, 0))
          )
            path =
              prefix.toUpperCase() + C.JSString_methods.substring$1(path, t1);
        }
        return new F._realCasePath_helper().call$1(path);
      },
      _realCasePath_helper: function _realCasePath_helper() {},
      _realCasePath_helper_closure: function _realCasePath_helper_closure(
        t0,
        t1,
        t2
      ) {
        this.helper = t0;
        this.dirname = t1;
        this.path = t2;
      },
      _realCasePath_helper__closure: function _realCasePath_helper__closure(
        t0
      ) {
        this.basename = t0;
      },
      _QuietLogger: function _QuietLogger() {},
      JSFunction: function JSFunction() {},
      NodeImporterResult: function NodeImporterResult() {},
      MediaQueryParser: function MediaQueryParser(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      MediaQueryParser_parse_closure: function MediaQueryParser_parse_closure(
        t0
      ) {
        this.$this = t0;
      },
      PrefixedMapView: function PrefixedMapView(t0, t1, t2) {
        this._prefixed_map_view$_map = t0;
        this._prefix = t1;
        this.$ti = t2;
      },
      _PrefixedKeys: function _PrefixedKeys(t0) {
        this._view = t0;
      },
      _PrefixedKeys_iterator_closure: function _PrefixedKeys_iterator_closure(
        t0
      ) {
        this.$this = t0;
      },
      Value: function Value() {},
      SassFunction: function SassFunction(t0) {
        this.callable = t0;
      },
      _FindDependenciesVisitor: function _FindDependenciesVisitor(t0, t1) {
        this._usesAndForwards = t0;
        this._imports = t1;
      },
      EmptyExtensionStore0: function EmptyExtensionStore0() {},
      FilesystemImporter0: function FilesystemImporter0(t0) {
        this._filesystem$_loadPath = t0;
      },
      FilesystemImporter_canonicalize_closure0: function FilesystemImporter_canonicalize_closure0() {},
      FunctionExpression0: function FunctionExpression0(t0, t1, t2, t3) {
        var _ = this;
        _.namespace = t0;
        _.originalName = t1;
        _.$arguments = t2;
        _.span = t3;
      },
      JSFunction0: function JSFunction0() {},
      SupportsFunction0: function SupportsFunction0(t0, t1, t2) {
        this.name = t0;
        this.$arguments = t1;
        this.span = t2;
      },
      SassFunction0: function SassFunction0(t0) {
        this.callable = t0;
      },
      NodeImporter__addSassPath($async$includePaths) {
        return P._makeSyncStarIterable(function () {
          var includePaths = $async$includePaths;
          var $async$goto = 0,
            $async$handler = 2,
            $async$currentError,
            sassPath;
          return function $async$NodeImporter__addSassPath(
            $async$errorCode,
            $async$result
          ) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$goto = 3;
                  return P._IterationMarker_yieldStar(includePaths);
                case 3:
                  // after yield
                  sassPath = H._asStringQ(
                    type$.Object._as(J.get$env$x(self.process)).SASS_PATH
                  );
                  if (sassPath == null) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  $async$goto = 4;
                  return P._IterationMarker_yieldStar(
                    H._setArrayType(
                      sassPath.split(
                        J.$eq$(J.get$platform$x(self.process), 'win32')
                          ? ';'
                          : ':'
                      ),
                      type$.JSArray_String
                    )
                  );
                case 4:
                // after yield
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, type$.String);
      },
      NodeImporter: function NodeImporter(t0, t1) {
        this._implementation$_options = t0;
        this._implementation$_importers = t1;
      },
      ModifiableCssImport$0(url, span, media, supports) {
        return new F.ModifiableCssImport0(
          url,
          supports,
          media == null
            ? null
            : P.List_List$unmodifiable(media, type$.CssMediaQuery_2),
          span
        );
      },
      ModifiableCssImport0: function ModifiableCssImport0(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.supports = t1;
        _.media = t2;
        _.span = t3;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      NodeImporterResult0: function NodeImporterResult0() {},
      _realCasePath0(path) {
        var prefix, t1;
        if (
          !(
            J.$eq$(J.get$platform$x(self.process), 'win32') ||
            J.$eq$(J.get$platform$x(self.process), 'darwin')
          )
        )
          return path;
        if (J.$eq$(J.get$platform$x(self.process), 'win32')) {
          prefix = C.JSString_methods.substring$2(
            path,
            0,
            $.$get$context().style.rootLength$1(path)
          );
          t1 = prefix.length;
          if (
            t1 !== 0 &&
            T.isAlphabetic1(C.JSString_methods._codeUnitAt$1(prefix, 0))
          )
            path =
              prefix.toUpperCase() + C.JSString_methods.substring$1(path, t1);
        }
        return new F._realCasePath_helper0().call$1(path);
      },
      _realCasePath_helper0: function _realCasePath_helper0() {},
      _realCasePath_helper_closure0: function _realCasePath_helper_closure0(
        t0,
        t1,
        t2
      ) {
        this.helper = t0;
        this.dirname = t1;
        this.path = t2;
      },
      _realCasePath_helper__closure0: function _realCasePath_helper__closure0(
        t0
      ) {
        this.basename = t0;
      },
      _QuietLogger0: function _QuietLogger0() {},
      CssMediaQuery0: function CssMediaQuery0(t0, t1, t2) {
        this.modifier = t0;
        this.type = t1;
        this.features = t2;
      },
      _SingletonCssMediaQueryMergeResult0: function _SingletonCssMediaQueryMergeResult0(
        t0
      ) {
        this._media_query1$_name = t0;
      },
      MediaQuerySuccessfulMergeResult0: function MediaQuerySuccessfulMergeResult0(
        t0
      ) {
        this.query = t0;
      },
      MediaQueryParser0: function MediaQueryParser0(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      MediaQueryParser_parse_closure0: function MediaQueryParser_parse_closure0(
        t0
      ) {
        this.$this = t0;
      },
      PrefixedMapView0: function PrefixedMapView0(t0, t1, t2) {
        this._prefixed_map_view0$_map = t0;
        this._prefixed_map_view0$_prefix = t1;
        this.$ti = t2;
      },
      _PrefixedKeys0: function _PrefixedKeys0(t0) {
        this._prefixed_map_view0$_view = t0;
      },
      _PrefixedKeys_iterator_closure0: function _PrefixedKeys_iterator_closure0(
        t0
      ) {
        this.$this = t0;
      },
      TypeSelector0: function TypeSelector0(t0) {
        this.name = t0;
      },
      CssValue0: function CssValue0(t0, t1, t2) {
        this.value = t0;
        this.span = t1;
        this.$ti = t2;
      },
      ValueExpression0: function ValueExpression0(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      ModifiableCssValue0: function ModifiableCssValue0(t0, t1, t2) {
        this.value = t0;
        this.span = t1;
        this.$ti = t2;
      },
      Value0: function Value0() {},
      unwrapValue(object) {
        var value, t1;
        if (object != null) {
          if (object instanceof F.Value0) return object;
          value = object.dartValue;
          if (value != null && value instanceof F.Value0) return value;
          t1 = self.Error;
          if (H._asBool($.$get$_jsInstanceOf().call$2(object, t1)))
            throw H.wrapException(object);
        }
        throw H.wrapException(H.S(object) + ' must be a Sass value type.');
      },
      wrapValue(value) {
        if (value instanceof K.SassColor0)
          return P.callConstructor($.$get$colorConstructor(), [
            null,
            null,
            null,
            null,
            value,
          ]);
        if (value instanceof D.SassList0)
          return P.callConstructor($.$get$listConstructor(), [
            null,
            null,
            value,
          ]);
        if (value instanceof A.SassMap0)
          return P.callConstructor($.$get$mapConstructor(), [null, value]);
        if (value instanceof T.SassNumber0)
          return P.callConstructor($.$get$numberConstructor(), [
            null,
            null,
            value,
          ]);
        if (value instanceof D.SassString0)
          return P.callConstructor($.$get$stringConstructor(), [null, value]);
        return value;
      },
    },
    G = {
      Option: function Option(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12
      ) {
        var _ = this;
        _.name = t0;
        _.abbr = t1;
        _.help = t2;
        _.valueHelp = t3;
        _.allowed = t4;
        _.allowedHelp = t5;
        _.defaultsTo = t6;
        _.negatable = t7;
        _.callback = t8;
        _.type = t9;
        _.splitCommas = t10;
        _.mandatory = t11;
        _.hide = t12;
      },
      OptionType: function OptionType(t0) {
        this.name = t0;
      },
      Parser$(_commandName, _grammar, _args, _parent, rest) {
        var t1 = H._setArrayType([], type$.JSArray_String);
        if (rest != null) C.JSArray_methods.addAll$1(t1, rest);
        return new G.Parser0(
          _commandName,
          _parent,
          _grammar,
          _args,
          t1,
          P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic)
        );
      },
      _isLetterOrDigit(codeUnit) {
        var t1;
        if (!(codeUnit >= 65 && codeUnit <= 90))
          if (!(codeUnit >= 97 && codeUnit <= 122))
            t1 = codeUnit >= 48 && codeUnit <= 57;
          else t1 = true;
        else t1 = true;
        return t1;
      },
      Parser0: function Parser0(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._commandName = t0;
        _._parser$_parent = t1;
        _._grammar = t2;
        _._args = t3;
        _._parser$_rest = t4;
        _._results = t5;
      },
      Parser_parse_closure: function Parser_parse_closure(t0) {
        this.$this = t0;
      },
      Parser__setOption_closure: function Parser__setOption_closure() {},
      _Usage: function _Usage(t0, t1, t2) {
        var _ = this;
        _._usage$_optionsAndSeparators = t0;
        _._usage$_buffer = t1;
        _._currentColumn = 0;
        _.___Usage__columnWidths = null;
        _._newlinesNeeded = 0;
        _.lineLength = t2;
      },
      _Usage__writeOption_closure: function _Usage__writeOption_closure() {},
      _Usage__buildAllowedList_closure: function _Usage__buildAllowedList_closure(
        t0
      ) {
        this.option = t0;
      },
      StreamQueue: function StreamQueue(t0, t1, t2, t3) {
        var _ = this;
        _._stream_queue$_source = t0;
        _._stream_queue$_subscription = null;
        _._isDone = false;
        _._eventsReceived = 0;
        _._eventQueue = t1;
        _._requestQueue = t2;
        _.$ti = t3;
      },
      StreamQueue__ensureListening_closure: function StreamQueue__ensureListening_closure(
        t0
      ) {
        this.$this = t0;
      },
      StreamQueue__ensureListening_closure1: function StreamQueue__ensureListening_closure1(
        t0
      ) {
        this.$this = t0;
      },
      StreamQueue__ensureListening_closure0: function StreamQueue__ensureListening_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _NextRequest: function _NextRequest(t0, t1) {
        this._completer = t0;
        this.$ti = t1;
      },
      ModifiableCssMediaRule$(queries, span) {
        var t1 = P.List_List$unmodifiable(queries, type$.CssMediaQuery),
          t2 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        if (J.get$isEmpty$asx(queries))
          H.throwExpression(
            P.ArgumentError$value(queries, 'queries', 'may not be empty.')
          );
        return new G.ModifiableCssMediaRule(
          t1,
          span,
          new P.UnmodifiableListView(
            t2,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t2
        );
      },
      ModifiableCssMediaRule: function ModifiableCssMediaRule(t0, t1, t2, t3) {
        var _ = this;
        _.queries = t0;
        _.span = t1;
        _.children = t2;
        _._children = t3;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      MediaRule$(query, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new G.MediaRule(query, span, t1, t2);
      },
      MediaRule: function MediaRule(t0, t1, t2, t3) {
        var _ = this;
        _.query = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      WhileRule$(condition, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new G.WhileRule(condition, span, t1, t2);
      },
      WhileRule: function WhileRule(t0, t1, t2, t3) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      Parser_isIdentifier(text) {
        var t1,
          t2,
          exception,
          logger = null;
        try {
          t1 = logger;
          t2 = S.SpanScanner$(text, null);
          new G.Parser(
            t2,
            t1 == null ? C.StderrLogger_false : t1
          )._parseIdentifier$0();
          return true;
        } catch (exception) {
          if (H.unwrapException(exception) instanceof E.SassFormatException)
            return false;
          else throw exception;
        }
      },
      Parser: function Parser(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      Parser__parseIdentifier_closure: function Parser__parseIdentifier_closure(
        t0
      ) {
        this.$this = t0;
      },
      Parser_scanIdentChar_matches: function Parser_scanIdentChar_matches(
        t0,
        t1
      ) {
        this.caseSensitive = t0;
        this.char = t1;
      },
      SourceSpanFormatException$(message, span, source) {
        return new G.SourceSpanFormatException(source, message, span);
      },
      SourceSpanException: function SourceSpanException() {},
      SourceSpanFormatException: function SourceSpanFormatException(
        t0,
        t1,
        t2
      ) {
        this.source = t0;
        this._span_exception$_message = t1;
        this._span = t2;
      },
      ModifiableCssMediaRule$0(queries, span) {
        var t1 = P.List_List$unmodifiable(queries, type$.CssMediaQuery_2),
          t2 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        if (J.get$isEmpty$asx(queries))
          H.throwExpression(
            P.ArgumentError$value(queries, 'queries', 'may not be empty.')
          );
        return new G.ModifiableCssMediaRule0(
          t1,
          span,
          new P.UnmodifiableListView(
            t2,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t2
        );
      },
      ModifiableCssMediaRule0: function ModifiableCssMediaRule0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.queries = t0;
        _.span = t1;
        _.children = t2;
        _._node2$_children = t3;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      MediaRule$0(query, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new G.MediaRule0(query, span, t1, t2);
      },
      MediaRule0: function MediaRule0(t0, t1, t2, t3) {
        var _ = this;
        _.query = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      Parser_isIdentifier0(text) {
        var t1,
          t2,
          exception,
          logger = null;
        try {
          t1 = logger;
          t2 = S.SpanScanner$(text, null);
          new G.Parser1(
            t2,
            t1 == null ? C.C_StderrLogger : t1
          )._parser0$_parseIdentifier$0();
          return true;
        } catch (exception) {
          if (H.unwrapException(exception) instanceof E.SassFormatException0)
            return false;
          else throw exception;
        }
      },
      Parser1: function Parser1(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      Parser__parseIdentifier_closure0: function Parser__parseIdentifier_closure0(
        t0
      ) {
        this.$this = t0;
      },
      Parser_scanIdentChar_matches0: function Parser_scanIdentChar_matches0(
        t0,
        t1
      ) {
        this.caseSensitive = t0;
        this.char = t1;
      },
      Types: function Types() {},
      WhileRule$0(condition, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new G.WhileRule0(condition, span, t1, t2);
      },
      WhileRule0: function WhileRule0(t0, t1, t2, t3) {
        var _ = this;
        _.condition = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
    },
    H = {
      JS_CONST: function JS_CONST() {},
      CastIterable_CastIterable(source, $S, $T) {
        if ($S._eval$1('EfficientLengthIterable<0>')._is(source))
          return new H._EfficientLengthCastIterable(
            source,
            $S
              ._eval$1('@<0>')
              ._bind$1($T)
              ._eval$1('_EfficientLengthCastIterable<1,2>')
          );
        return new H.CastIterable(
          source,
          $S._eval$1('@<0>')._bind$1($T)._eval$1('CastIterable<1,2>')
        );
      },
      LateError$fieldADI(fieldName) {
        return new H.LateError(
          "Field '" + fieldName + "' has been assigned during initialization."
        );
      },
      LateError$localNI(localName) {
        return new H.LateError(
          "Local '" + localName + "' has not been initialized."
        );
      },
      hexDigitValue(char) {
        var letter,
          digit = char ^ 48;
        if (digit <= 9) return digit;
        letter = char | 32;
        if (97 <= letter && letter <= 102) return letter - 87;
        return -1;
      },
      checkNotNullable(value, $name, $T) {
        return value;
      },
      SubListIterable$(_iterable, _start, _endOrLength, $E) {
        P.RangeError_checkNotNegative(_start, 'start');
        if (_endOrLength != null) {
          P.RangeError_checkNotNegative(_endOrLength, 'end');
          if (_start > _endOrLength)
            H.throwExpression(
              P.RangeError$range(_start, 0, _endOrLength, 'start', null)
            );
        }
        return new H.SubListIterable(
          _iterable,
          _start,
          _endOrLength,
          $E._eval$1('SubListIterable<0>')
        );
      },
      MappedIterable_MappedIterable(iterable, $function, $S, $T) {
        if (type$.EfficientLengthIterable_dynamic._is(iterable))
          return new H.EfficientLengthMappedIterable(
            iterable,
            $function,
            $S
              ._eval$1('@<0>')
              ._bind$1($T)
              ._eval$1('EfficientLengthMappedIterable<1,2>')
          );
        return new H.MappedIterable(
          iterable,
          $function,
          $S._eval$1('@<0>')._bind$1($T)._eval$1('MappedIterable<1,2>')
        );
      },
      TakeIterable_TakeIterable(iterable, takeCount, $E) {
        P.RangeError_checkNotNegative(takeCount, 'takeCount');
        if (type$.EfficientLengthIterable_dynamic._is(iterable))
          return new H.EfficientLengthTakeIterable(
            iterable,
            takeCount,
            $E._eval$1('EfficientLengthTakeIterable<0>')
          );
        return new H.TakeIterable(
          iterable,
          takeCount,
          $E._eval$1('TakeIterable<0>')
        );
      },
      SkipIterable_SkipIterable(iterable, count, $E) {
        if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
          P.RangeError_checkNotNegative(count, 'count');
          return new H.EfficientLengthSkipIterable(
            iterable,
            count,
            $E._eval$1('EfficientLengthSkipIterable<0>')
          );
        }
        P.RangeError_checkNotNegative(count, 'count');
        return new H.SkipIterable(
          iterable,
          count,
          $E._eval$1('SkipIterable<0>')
        );
      },
      FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
        if ($E._eval$1('EfficientLengthIterable<0>')._is(second))
          return new H.EfficientLengthFollowedByIterable(
            first,
            second,
            $E._eval$1('EfficientLengthFollowedByIterable<0>')
          );
        return new H.FollowedByIterable(
          first,
          second,
          $E._eval$1('FollowedByIterable<0>')
        );
      },
      IterableElementError_noElement() {
        return new P.StateError('No element');
      },
      IterableElementError_tooMany() {
        return new P.StateError('Too many elements');
      },
      IterableElementError_tooFew() {
        return new P.StateError('Too few elements');
      },
      Sort_sort(a, compare) {
        H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare);
      },
      Sort__doSort(a, left, right, compare) {
        if (right - left <= 32) H.Sort__insertionSort(a, left, right, compare);
        else H.Sort__dualPivotQuicksort(a, left, right, compare);
      },
      Sort__insertionSort(a, left, right, compare) {
        var i, t1, el, j, j0;
        for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
          el = t1.$index(a, i);
          j = i;
          while (true) {
            if (!(j > left && compare.call$2(t1.$index(a, j - 1), el) > 0))
              break;
            j0 = j - 1;
            t1.$indexSet(a, j, t1.$index(a, j0));
            j = j0;
          }
          t1.$indexSet(a, j, el);
        }
      },
      Sort__dualPivotQuicksort(a, left, right, compare) {
        var t0,
          less,
          great,
          k,
          ak,
          comp,
          great0,
          less0,
          pivots_are_equal,
          t2,
          sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
          index1 = left + sixth,
          index5 = right - sixth,
          index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
          index2 = index3 - sixth,
          index4 = index3 + sixth,
          t1 = J.getInterceptor$asx(a),
          el1 = t1.$index(a, index1),
          el2 = t1.$index(a, index2),
          el3 = t1.$index(a, index3),
          el4 = t1.$index(a, index4),
          el5 = t1.$index(a, index5);
        if (compare.call$2(el1, el2) > 0) {
          t0 = el2;
          el2 = el1;
          el1 = t0;
        }
        if (compare.call$2(el4, el5) > 0) {
          t0 = el5;
          el5 = el4;
          el4 = t0;
        }
        if (compare.call$2(el1, el3) > 0) {
          t0 = el3;
          el3 = el1;
          el1 = t0;
        }
        if (compare.call$2(el2, el3) > 0) {
          t0 = el3;
          el3 = el2;
          el2 = t0;
        }
        if (compare.call$2(el1, el4) > 0) {
          t0 = el4;
          el4 = el1;
          el1 = t0;
        }
        if (compare.call$2(el3, el4) > 0) {
          t0 = el4;
          el4 = el3;
          el3 = t0;
        }
        if (compare.call$2(el2, el5) > 0) {
          t0 = el5;
          el5 = el2;
          el2 = t0;
        }
        if (compare.call$2(el2, el3) > 0) {
          t0 = el3;
          el3 = el2;
          el2 = t0;
        }
        if (compare.call$2(el4, el5) > 0) {
          t0 = el5;
          el5 = el4;
          el4 = t0;
        }
        t1.$indexSet(a, index1, el1);
        t1.$indexSet(a, index3, el3);
        t1.$indexSet(a, index5, el5);
        t1.$indexSet(a, index2, t1.$index(a, left));
        t1.$indexSet(a, index4, t1.$index(a, right));
        less = left + 1;
        great = right - 1;
        if (J.$eq$(compare.call$2(el2, el4), 0)) {
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            comp = compare.call$2(ak, el2);
            if (comp === 0) continue;
            if (comp < 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else
              for (; true; ) {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (comp > 0) {
                  --great;
                  continue;
                } else {
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    great = great0;
                    less = less0;
                    break;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    great = great0;
                    break;
                  }
                }
              }
          }
          pivots_are_equal = true;
        } else {
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            if (compare.call$2(ak, el2) < 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else if (compare.call$2(ak, el4) > 0)
              for (; true; )
                if (compare.call$2(t1.$index(a, great), el4) > 0) {
                  --great;
                  if (great < k) break;
                  continue;
                } else {
                  great0 = great - 1;
                  if (compare.call$2(t1.$index(a, great), el2) < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
          }
          pivots_are_equal = false;
        }
        t2 = less - 1;
        t1.$indexSet(a, left, t1.$index(a, t2));
        t1.$indexSet(a, t2, el2);
        t2 = great + 1;
        t1.$indexSet(a, right, t1.$index(a, t2));
        t1.$indexSet(a, t2, el4);
        H.Sort__doSort(a, left, less - 2, compare);
        H.Sort__doSort(a, great + 2, right, compare);
        if (pivots_are_equal) return;
        if (less < index1 && great > index5) {
          for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0); ) ++less;
          for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0); ) --great;
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            if (compare.call$2(ak, el2) === 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else if (compare.call$2(ak, el4) === 0)
              for (; true; )
                if (compare.call$2(t1.$index(a, great), el4) === 0) {
                  --great;
                  if (great < k) break;
                  continue;
                } else {
                  great0 = great - 1;
                  if (compare.call$2(t1.$index(a, great), el2) < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
          }
          H.Sort__doSort(a, less, great, compare);
        } else H.Sort__doSort(a, less, great, compare);
      },
      _CastIterableBase: function _CastIterableBase() {},
      CastIterator: function CastIterator(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      CastIterable: function CastIterable(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      _EfficientLengthCastIterable: function _EfficientLengthCastIterable(
        t0,
        t1
      ) {
        this._source = t0;
        this.$ti = t1;
      },
      _CastListBase: function _CastListBase() {},
      _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
        this.$this = t0;
        this.compare = t1;
      },
      CastList: function CastList(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      CastSet: function CastSet(t0, t1, t2) {
        this._source = t0;
        this._emptySet = t1;
        this.$ti = t2;
      },
      LateError: function LateError(t0) {
        this._message = t0;
      },
      CodeUnits: function CodeUnits(t0) {
        this._string = t0;
      },
      nullFuture_closure: function nullFuture_closure() {},
      EfficientLengthIterable: function EfficientLengthIterable() {},
      ListIterable: function ListIterable() {},
      SubListIterable: function SubListIterable(t0, t1, t2, t3) {
        var _ = this;
        _.__internal$_iterable = t0;
        _._start = t1;
        _._endOrLength = t2;
        _.$ti = t3;
      },
      ListIterator: function ListIterator(t0, t1) {
        var _ = this;
        _.__internal$_iterable = t0;
        _.__internal$_length = t1;
        _.__internal$_index = 0;
        _.__internal$_current = null;
      },
      MappedIterable: function MappedIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      EfficientLengthMappedIterable: function EfficientLengthMappedIterable(
        t0,
        t1,
        t2
      ) {
        this.__internal$_iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      MappedIterator: function MappedIterator(t0, t1) {
        this.__internal$_current = null;
        this._iterator = t0;
        this._f = t1;
      },
      MappedListIterable: function MappedListIterable(t0, t1, t2) {
        this._source = t0;
        this._f = t1;
        this.$ti = t2;
      },
      WhereIterable: function WhereIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      WhereIterator: function WhereIterator(t0, t1) {
        this._iterator = t0;
        this._f = t1;
      },
      ExpandIterable: function ExpandIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      ExpandIterator: function ExpandIterator(t0, t1, t2) {
        var _ = this;
        _._iterator = t0;
        _._f = t1;
        _._currentExpansion = t2;
        _.__internal$_current = null;
      },
      TakeIterable: function TakeIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._takeCount = t1;
        this.$ti = t2;
      },
      EfficientLengthTakeIterable: function EfficientLengthTakeIterable(
        t0,
        t1,
        t2
      ) {
        this.__internal$_iterable = t0;
        this._takeCount = t1;
        this.$ti = t2;
      },
      TakeIterator: function TakeIterator(t0, t1) {
        this._iterator = t0;
        this._remaining = t1;
      },
      SkipIterable: function SkipIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._skipCount = t1;
        this.$ti = t2;
      },
      EfficientLengthSkipIterable: function EfficientLengthSkipIterable(
        t0,
        t1,
        t2
      ) {
        this.__internal$_iterable = t0;
        this._skipCount = t1;
        this.$ti = t2;
      },
      SkipIterator: function SkipIterator(t0, t1) {
        this._iterator = t0;
        this._skipCount = t1;
      },
      SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
        this.__internal$_iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      SkipWhileIterator: function SkipWhileIterator(t0, t1) {
        this._iterator = t0;
        this._f = t1;
        this._hasSkipped = false;
      },
      EmptyIterable: function EmptyIterable(t0) {
        this.$ti = t0;
      },
      EmptyIterator: function EmptyIterator() {},
      FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
        this.__internal$_first = t0;
        this._second = t1;
        this.$ti = t2;
      },
      EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(
        t0,
        t1,
        t2
      ) {
        this.__internal$_first = t0;
        this._second = t1;
        this.$ti = t2;
      },
      FollowedByIterator: function FollowedByIterator(t0, t1) {
        this._currentIterator = t0;
        this._nextIterable = t1;
      },
      WhereTypeIterable: function WhereTypeIterable(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      WhereTypeIterator: function WhereTypeIterator(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      FixedLengthListMixin: function FixedLengthListMixin() {},
      UnmodifiableListMixin: function UnmodifiableListMixin() {},
      UnmodifiableListBase: function UnmodifiableListBase() {},
      ReversedListIterable: function ReversedListIterable(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      Symbol: function Symbol(t0) {
        this.__internal$_name = t0;
      },
      __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {},
      ConstantMap_ConstantMap$from(other, $K, $V) {
        var allStrings,
          k,
          object,
          t2,
          keys = P.List_List$from(other.get$keys(other), true, $K),
          t1 = keys.length,
          _i = 0;
        while (true) {
          if (!(_i < t1)) {
            allStrings = true;
            break;
          }
          k = keys[_i];
          if (typeof k != 'string' || '__proto__' === k) {
            allStrings = false;
            break;
          }
          ++_i;
        }
        if (allStrings) {
          object = {};
          for (
            _i = 0;
            (t2 = keys.length), _i < t2;
            keys.length === t1 || (0, H.throwConcurrentModificationError)(keys),
              ++_i
          ) {
            k = keys[_i];
            object[k] = other.$index(0, k);
          }
          return new H.ConstantStringMap(
            t2,
            object,
            keys,
            $K._eval$1('@<0>')._bind$1($V)._eval$1('ConstantStringMap<1,2>')
          );
        }
        return new H.ConstantMapView(
          P.LinkedHashMap_LinkedHashMap$from(other, $K, $V),
          $K._eval$1('@<0>')._bind$1($V)._eval$1('ConstantMapView<1,2>')
        );
      },
      ConstantMap__throwUnmodifiable() {
        throw H.wrapException(
          P.UnsupportedError$('Cannot modify unmodifiable Map')
        );
      },
      unminifyOrTag(rawClassName) {
        var preserved = init.mangledGlobalNames[rawClassName];
        if (preserved != null) return preserved;
        return rawClassName;
      },
      isJsIndexable(object, record) {
        var result;
        if (record != null) {
          result = record.x;
          if (result != null) return result;
        }
        return type$.JavaScriptIndexingBehavior_dynamic._is(object);
      },
      S(value) {
        var res;
        if (typeof value == 'string') return value;
        if (typeof value == 'number') {
          if (value !== 0) return '' + value;
        } else if (true === value) return 'true';
        else if (false === value) return 'false';
        else if (value == null) return 'null';
        res = J.toString$0$(value);
        return res;
      },
      Primitives_objectHashCode(object) {
        var hash = object.$identityHash;
        if (hash == null) {
          hash = (Math.random() * 0x3fffffff) | 0;
          object.$identityHash = hash;
        }
        return hash;
      },
      Primitives_parseInt(source, radix) {
        var decimalMatch,
          maxCharCode,
          digitsPart,
          t1,
          i,
          _null = null,
          match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(
            source
          );
        if (match == null) return _null;
        decimalMatch = match[3];
        if (radix == null) {
          if (decimalMatch != null) return parseInt(source, 10);
          if (match[2] != null) return parseInt(source, 16);
          return _null;
        }
        if (radix < 2 || radix > 36)
          throw H.wrapException(
            P.RangeError$range(radix, 2, 36, 'radix', _null)
          );
        if (radix === 10 && decimalMatch != null) return parseInt(source, 10);
        if (radix < 10 || decimalMatch == null) {
          maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
          digitsPart = match[1];
          for (t1 = digitsPart.length, i = 0; i < t1; ++i)
            if (
              (C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) >
              maxCharCode
            )
              return _null;
        }
        return parseInt(source, radix);
      },
      Primitives_parseDouble(source) {
        var result, trimmed;
        if (
          !/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(
            source
          )
        )
          return null;
        result = parseFloat(source);
        if (isNaN(result)) {
          trimmed = C.JSString_methods.trim$0(source);
          if (trimmed === 'NaN' || trimmed === '+NaN' || trimmed === '-NaN')
            return result;
          return null;
        }
        return result;
      },
      Primitives_objectTypeName(object) {
        return H.Primitives__objectTypeNameNewRti(object);
      },
      Primitives__objectTypeNameNewRti(object) {
        var dispatchName, t1, $constructor, constructorName;
        if (object instanceof P.Object)
          return H._rtiToString(H.instanceType(object), null);
        if (
          J.getInterceptor$(object) === C.Interceptor_methods ||
          type$.UnknownJavaScriptObject._is(object)
        ) {
          dispatchName = C.C_JS_CONST(object);
          t1 = dispatchName !== 'Object' && dispatchName !== '';
          if (t1) return dispatchName;
          $constructor = object.constructor;
          if (typeof $constructor == 'function') {
            constructorName = $constructor.name;
            if (typeof constructorName == 'string')
              t1 = constructorName !== 'Object' && constructorName !== '';
            else t1 = false;
            if (t1) return constructorName;
          }
        }
        return H._rtiToString(H.instanceType(object), null);
      },
      Primitives_currentUri() {
        if (!!self.location) return self.location.href;
        return null;
      },
      Primitives__fromCharCodeApply(array) {
        var result,
          i,
          i0,
          chunkEnd,
          end = array.length;
        if (end <= 500) return String.fromCharCode.apply(null, array);
        for (result = '', i = 0; i < end; i = i0) {
          i0 = i + 500;
          chunkEnd = i0 < end ? i0 : end;
          result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
        }
        return result;
      },
      Primitives_stringFromCodePoints(codePoints) {
        var t1,
          _i,
          i,
          a = H._setArrayType([], type$.JSArray_int);
        for (
          t1 = codePoints.length, _i = 0;
          _i < codePoints.length;
          codePoints.length === t1 ||
            (0, H.throwConcurrentModificationError)(codePoints),
            ++_i
        ) {
          i = codePoints[_i];
          if (!H._isInt(i)) throw H.wrapException(H.argumentErrorValue(i));
          if (i <= 65535) a.push(i);
          else if (i <= 1114111) {
            a.push(
              55296 +
                (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023)
            );
            a.push(56320 + (i & 1023));
          } else throw H.wrapException(H.argumentErrorValue(i));
        }
        return H.Primitives__fromCharCodeApply(a);
      },
      Primitives_stringFromCharCodes(charCodes) {
        var t1, _i, i;
        for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
          i = charCodes[_i];
          if (!H._isInt(i)) throw H.wrapException(H.argumentErrorValue(i));
          if (i < 0) throw H.wrapException(H.argumentErrorValue(i));
          if (i > 65535) return H.Primitives_stringFromCodePoints(charCodes);
        }
        return H.Primitives__fromCharCodeApply(charCodes);
      },
      Primitives_stringFromNativeUint8List(charCodes, start, end) {
        var i, result, i0, chunkEnd;
        if (end <= 500 && start === 0 && end === charCodes.length)
          return String.fromCharCode.apply(null, charCodes);
        for (i = start, result = ''; i < end; i = i0) {
          i0 = i + 500;
          chunkEnd = i0 < end ? i0 : end;
          result += String.fromCharCode.apply(
            null,
            charCodes.subarray(i, chunkEnd)
          );
        }
        return result;
      },
      Primitives_stringFromCharCode(charCode) {
        var bits;
        if (0 <= charCode) {
          if (charCode <= 65535) return String.fromCharCode(charCode);
          if (charCode <= 1114111) {
            bits = charCode - 65536;
            return String.fromCharCode(
              (C.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0,
              (bits & 1023) | 56320
            );
          }
        }
        throw H.wrapException(
          P.RangeError$range(charCode, 0, 1114111, null, null)
        );
      },
      Primitives_lazyAsJsDate(receiver) {
        if (receiver.date === void 0)
          receiver.date = new Date(receiver._core$_value);
        return receiver.date;
      },
      Primitives_getYear(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
        return t1;
      },
      Primitives_getMonth(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
        return t1;
      },
      Primitives_getDay(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
        return t1;
      },
      Primitives_getHours(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
        return t1;
      },
      Primitives_getMinutes(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
        return t1;
      },
      Primitives_getSeconds(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
        return t1;
      },
      Primitives_getMilliseconds(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
        return t1;
      },
      Primitives_functionNoSuchMethod(
        $function,
        positionalArguments,
        namedArguments
      ) {
        var $arguments,
          namedArgumentList,
          t1 = {};
        t1.argumentCount = 0;
        $arguments = [];
        namedArgumentList = [];
        t1.argumentCount = positionalArguments.length;
        C.JSArray_methods.addAll$1($arguments, positionalArguments);
        t1.names = '';
        if (
          namedArguments != null &&
          !namedArguments.get$isEmpty(namedArguments)
        )
          namedArguments.forEach$1(
            0,
            new H.Primitives_functionNoSuchMethod_closure(
              t1,
              namedArgumentList,
              $arguments
            )
          );
        '' + t1.argumentCount;
        return J.noSuchMethod$1$(
          $function,
          new H.JSInvocationMirror(
            C.Symbol_call,
            0,
            $arguments,
            namedArgumentList,
            0
          )
        );
      },
      Primitives_applyFunction($function, positionalArguments, namedArguments) {
        var t1, argumentCount, jsStub;
        if (Array.isArray(positionalArguments))
          t1 =
            namedArguments == null ||
            namedArguments.get$isEmpty(namedArguments);
        else t1 = false;
        if (t1) {
          argumentCount = positionalArguments.length;
          if (argumentCount === 0) {
            if (!!$function.call$0) return $function.call$0();
          } else if (argumentCount === 1) {
            if (!!$function.call$1)
              return $function.call$1(positionalArguments[0]);
          } else if (argumentCount === 2) {
            if (!!$function.call$2)
              return $function.call$2(
                positionalArguments[0],
                positionalArguments[1]
              );
          } else if (argumentCount === 3) {
            if (!!$function.call$3)
              return $function.call$3(
                positionalArguments[0],
                positionalArguments[1],
                positionalArguments[2]
              );
          } else if (argumentCount === 4) {
            if (!!$function.call$4)
              return $function.call$4(
                positionalArguments[0],
                positionalArguments[1],
                positionalArguments[2],
                positionalArguments[3]
              );
          } else if (argumentCount === 5)
            if (!!$function.call$5)
              return $function.call$5(
                positionalArguments[0],
                positionalArguments[1],
                positionalArguments[2],
                positionalArguments[3],
                positionalArguments[4]
              );
          jsStub = $function['call' + '$' + argumentCount];
          if (jsStub != null)
            return jsStub.apply($function, positionalArguments);
        }
        return H.Primitives__generalApplyFunction(
          $function,
          positionalArguments,
          namedArguments
        );
      },
      Primitives__generalApplyFunction(
        $function,
        positionalArguments,
        namedArguments
      ) {
        var defaultValuesClosure,
          t1,
          defaultValues,
          interceptor,
          jsFunction,
          maxArguments,
          missingDefaults,
          keys,
          _i,
          defaultValue,
          used,
          t2,
          $arguments = Array.isArray(positionalArguments)
            ? positionalArguments
            : P.List_List$of(positionalArguments, true, type$.dynamic),
          argumentCount = $arguments.length,
          requiredParameterCount = $function.$requiredArgCount;
        if (argumentCount < requiredParameterCount)
          return H.Primitives_functionNoSuchMethod(
            $function,
            $arguments,
            namedArguments
          );
        defaultValuesClosure = $function.$defaultValues;
        t1 = defaultValuesClosure == null;
        defaultValues = !t1 ? defaultValuesClosure() : null;
        interceptor = J.getInterceptor$($function);
        jsFunction = interceptor['call*'];
        if (typeof jsFunction == 'string') jsFunction = interceptor[jsFunction];
        if (t1) {
          if (
            namedArguments != null &&
            namedArguments.get$isNotEmpty(namedArguments)
          )
            return H.Primitives_functionNoSuchMethod(
              $function,
              $arguments,
              namedArguments
            );
          if (argumentCount === requiredParameterCount)
            return jsFunction.apply($function, $arguments);
          return H.Primitives_functionNoSuchMethod(
            $function,
            $arguments,
            namedArguments
          );
        }
        if (Array.isArray(defaultValues)) {
          if (
            namedArguments != null &&
            namedArguments.get$isNotEmpty(namedArguments)
          )
            return H.Primitives_functionNoSuchMethod(
              $function,
              $arguments,
              namedArguments
            );
          maxArguments = requiredParameterCount + defaultValues.length;
          if (argumentCount > maxArguments)
            return H.Primitives_functionNoSuchMethod(
              $function,
              $arguments,
              null
            );
          if (argumentCount < maxArguments) {
            missingDefaults = defaultValues.slice(
              argumentCount - requiredParameterCount
            );
            if ($arguments === positionalArguments)
              $arguments = P.List_List$of($arguments, true, type$.dynamic);
            C.JSArray_methods.addAll$1($arguments, missingDefaults);
          }
          return jsFunction.apply($function, $arguments);
        } else {
          if (argumentCount > requiredParameterCount)
            return H.Primitives_functionNoSuchMethod(
              $function,
              $arguments,
              namedArguments
            );
          if ($arguments === positionalArguments)
            $arguments = P.List_List$of($arguments, true, type$.dynamic);
          keys = Object.keys(defaultValues);
          if (namedArguments == null)
            for (
              t1 = keys.length, _i = 0;
              _i < keys.length;
              keys.length === t1 ||
                (0, H.throwConcurrentModificationError)(keys),
                ++_i
            ) {
              defaultValue = defaultValues[keys[_i]];
              if (C.C__Required === defaultValue)
                return H.Primitives_functionNoSuchMethod(
                  $function,
                  $arguments,
                  namedArguments
                );
              C.JSArray_methods.add$1($arguments, defaultValue);
            }
          else {
            for (
              t1 = keys.length, used = 0, _i = 0;
              _i < keys.length;
              keys.length === t1 ||
                (0, H.throwConcurrentModificationError)(keys),
                ++_i
            ) {
              t2 = keys[_i];
              if (namedArguments.containsKey$1(t2)) {
                ++used;
                C.JSArray_methods.add$1(
                  $arguments,
                  namedArguments.$index(0, t2)
                );
              } else {
                defaultValue = defaultValues[t2];
                if (C.C__Required === defaultValue)
                  return H.Primitives_functionNoSuchMethod(
                    $function,
                    $arguments,
                    namedArguments
                  );
                C.JSArray_methods.add$1($arguments, defaultValue);
              }
            }
            if (used !== namedArguments.get$length(namedArguments))
              return H.Primitives_functionNoSuchMethod(
                $function,
                $arguments,
                namedArguments
              );
          }
          return jsFunction.apply($function, $arguments);
        }
      },
      diagnoseIndexError(indexable, index) {
        var $length,
          _s5_ = 'index';
        if (!H._isInt(index))
          return new P.ArgumentError(true, index, _s5_, null);
        $length = J.get$length$asx(indexable);
        if (index < 0 || index >= $length)
          return P.IndexError$(index, indexable, _s5_, null, $length);
        return P.RangeError$value(index, _s5_, null);
      },
      diagnoseRangeError(start, end, $length) {
        if (start < 0 || start > $length)
          return P.RangeError$range(start, 0, $length, 'start', null);
        if (end != null)
          if (end < start || end > $length)
            return P.RangeError$range(end, start, $length, 'end', null);
        return new P.ArgumentError(true, end, 'end', null);
      },
      argumentErrorValue(object) {
        return new P.ArgumentError(true, object, null, null);
      },
      checkNum(value) {
        return value;
      },
      wrapException(ex) {
        var wrapper, t1;
        if (ex == null) ex = new P.NullThrownError();
        wrapper = new Error();
        wrapper.dartException = ex;
        t1 = H.toStringWrapper;
        if ('defineProperty' in Object) {
          Object.defineProperty(wrapper, 'message', { get: t1 });
          wrapper.name = '';
        } else wrapper.toString = t1;
        return wrapper;
      },
      toStringWrapper() {
        return J.toString$0$(this.dartException);
      },
      throwExpression(ex) {
        throw H.wrapException(ex);
      },
      throwConcurrentModificationError(collection) {
        throw H.wrapException(P.ConcurrentModificationError$(collection));
      },
      TypeErrorDecoder_extractPattern(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = H.quoteStringForRegExp(
          message.replace(String({}), '$receiver$')
        );
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null) match = H._setArrayType([], type$.JSArray_String);
        $arguments = match.indexOf('\\$arguments\\$');
        argumentsExpr = match.indexOf('\\$argumentsExpr\\$');
        expr = match.indexOf('\\$expr\\$');
        method = match.indexOf('\\$method\\$');
        receiver = match.indexOf('\\$receiver\\$');
        return new H.TypeErrorDecoder(
          message
            .replace(
              new RegExp('\\\\\\$arguments\\\\\\$', 'g'),
              '((?:x|[^x])*)'
            )
            .replace(
              new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'),
              '((?:x|[^x])*)'
            )
            .replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)')
            .replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)')
            .replace(
              new RegExp('\\\\\\$receiver\\\\\\$', 'g'),
              '((?:x|[^x])*)'
            ),
          $arguments,
          argumentsExpr,
          expr,
          method,
          receiver
        );
      },
      TypeErrorDecoder_provokeCallErrorOn(expression) {
        return (function ($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }
        })(expression);
      },
      TypeErrorDecoder_provokePropertyErrorOn(expression) {
        return (function ($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }
        })(expression);
      },
      JsNoSuchMethodError$(_message, match) {
        var t1 = match == null,
          t2 = t1 ? null : match.method;
        return new H.JsNoSuchMethodError(
          _message,
          t2,
          t1 ? null : match.receiver
        );
      },
      unwrapException(ex) {
        if (ex == null) return new H.NullThrownFromJavaScriptException(ex);
        if (ex instanceof H.ExceptionAndStackTrace)
          return H.saveStackTrace(ex, ex.dartException);
        if (typeof ex !== 'object') return ex;
        if ('dartException' in ex)
          return H.saveStackTrace(ex, ex.dartException);
        return H._unwrapNonDartException(ex);
      },
      saveStackTrace(ex, error) {
        if (type$.Error._is(error))
          if (error.$thrownJsError == null) error.$thrownJsError = ex;
        return error;
      },
      _unwrapNonDartException(ex) {
        var message,
          number,
          ieErrorCode,
          t1,
          nsme,
          notClosure,
          nullCall,
          nullLiteralCall,
          undefCall,
          undefLiteralCall,
          nullProperty,
          undefProperty,
          undefLiteralProperty,
          match,
          _null = null;
        if (!('message' in ex)) return ex;
        message = ex.message;
        if ('number' in ex && typeof ex.number == 'number') {
          number = ex.number;
          ieErrorCode = number & 65535;
          if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
            switch (ieErrorCode) {
              case 438:
                return H.saveStackTrace(
                  ex,
                  H.JsNoSuchMethodError$(
                    H.S(message) + ' (Error ' + ieErrorCode + ')',
                    _null
                  )
                );
              case 445:
              case 5007:
                t1 = H.S(message) + ' (Error ' + ieErrorCode + ')';
                return H.saveStackTrace(ex, new H.NullError(t1, _null));
            }
        }
        if (ex instanceof TypeError) {
          nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
          notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
          nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
          nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
          undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
          undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
          nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
          $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
          undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
          undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
          match = nsme.matchTypeError$1(message);
          if (match != null)
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(message, match));
          else {
            match = notClosure.matchTypeError$1(message);
            if (match != null) {
              match.method = 'call';
              return H.saveStackTrace(
                ex,
                H.JsNoSuchMethodError$(message, match)
              );
            } else {
              match = nullCall.matchTypeError$1(message);
              if (match == null) {
                match = nullLiteralCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefCall.matchTypeError$1(message);
                  if (match == null) {
                    match = undefLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = nullProperty.matchTypeError$1(message);
                      if (match == null) {
                        match = nullLiteralCall.matchTypeError$1(message);
                        if (match == null) {
                          match = undefProperty.matchTypeError$1(message);
                          if (match == null) {
                            match = undefLiteralProperty.matchTypeError$1(
                              message
                            );
                            t1 = match != null;
                          } else t1 = true;
                        } else t1 = true;
                      } else t1 = true;
                    } else t1 = true;
                  } else t1 = true;
                } else t1 = true;
              } else t1 = true;
              if (t1)
                return H.saveStackTrace(
                  ex,
                  new H.NullError(message, match == null ? _null : match.method)
                );
            }
          }
          return H.saveStackTrace(
            ex,
            new H.UnknownJsTypeError(typeof message == 'string' ? message : '')
          );
        }
        if (ex instanceof RangeError) {
          if (
            typeof message == 'string' &&
            message.indexOf('call stack') !== -1
          )
            return new P.StackOverflowError();
          message = (function (ex) {
            try {
              return String(ex);
            } catch (e) {}
            return null;
          })(ex);
          return H.saveStackTrace(
            ex,
            new P.ArgumentError(
              false,
              _null,
              _null,
              typeof message == 'string'
                ? message.replace(/^RangeError:\s*/, '')
                : message
            )
          );
        }
        if (typeof InternalError == 'function' && ex instanceof InternalError)
          if (typeof message == 'string' && message === 'too much recursion')
            return new P.StackOverflowError();
        return ex;
      },
      getTraceFromException(exception) {
        var trace;
        if (exception instanceof H.ExceptionAndStackTrace)
          return exception.stackTrace;
        if (exception == null) return new H._StackTrace(exception);
        trace = exception.$cachedTrace;
        if (trace != null) return trace;
        return (exception.$cachedTrace = new H._StackTrace(exception));
      },
      objectHashCode(object) {
        if (object == null || typeof object != 'object')
          return J.get$hashCode$(object);
        else return H.Primitives_objectHashCode(object);
      },
      fillLiteralMap(keyValuePairs, result) {
        var index,
          index0,
          index1,
          $length = keyValuePairs.length;
        for (index = 0; index < $length; index = index1) {
          index0 = index + 1;
          index1 = index0 + 1;
          result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
        }
        return result;
      },
      fillLiteralSet(values, result) {
        var index,
          $length = values.length;
        for (index = 0; index < $length; ++index)
          result.add$1(0, values[index]);
        return result;
      },
      invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
        switch (numberOfArguments) {
          case 0:
            return closure.call$0();
          case 1:
            return closure.call$1(arg1);
          case 2:
            return closure.call$2(arg1, arg2);
          case 3:
            return closure.call$3(arg1, arg2, arg3);
          case 4:
            return closure.call$4(arg1, arg2, arg3, arg4);
        }
        throw H.wrapException(
          new P._Exception(
            'Unsupported number of arguments for wrapped closure'
          )
        );
      },
      convertDartClosureToJS(closure, arity) {
        var $function;
        if (closure == null) return null;
        $function = closure.$identity;
        if (!!$function) return $function;
        $function = (function (closure, arity, invoke) {
          return function (a1, a2, a3, a4) {
            return invoke(closure, arity, a1, a2, a3, a4);
          };
        })(closure, arity, H.invokeClosure);
        closure.$identity = $function;
        return $function;
      },
      Closure_fromTearOff(parameters) {
        var $prototype,
          $constructor,
          t2,
          trampoline,
          applyTrampoline,
          i,
          stub,
          stub0,
          stubName,
          stubCallName,
          container = parameters.co,
          isStatic = parameters.iS,
          isIntercepted = parameters.iI,
          needsDirectAccess = parameters.nDA,
          applyTrampolineIndex = parameters.aI,
          funsOrNames = parameters.fs,
          callNames = parameters.cs,
          $name = funsOrNames[0],
          callName = callNames[0],
          $function = container[$name],
          t1 = parameters.fT;
        t1.toString;
        $prototype = isStatic
          ? Object.create(new H.StaticClosure().constructor.prototype)
          : Object.create(new H.BoundClosure(null, null).constructor.prototype);
        $prototype.$initialize = $prototype.constructor;
        if (isStatic)
          $constructor = function static_tear_off() {
            this.$initialize();
          };
        else {
          t2 = $.Closure_functionCounter;
          $.Closure_functionCounter = t2 + 1;
          t2 = new Function('a,b' + t2, 'this.$initialize(a,b' + t2 + ')');
          $constructor = t2;
        }
        $prototype.constructor = $constructor;
        $constructor.prototype = $prototype;
        $prototype.$_name = $name;
        $prototype.$_target = $function;
        t2 = !isStatic;
        if (t2)
          trampoline = H.Closure_forwardCallTo(
            $name,
            $function,
            isIntercepted,
            needsDirectAccess
          );
        else {
          $prototype.$static_name = $name;
          trampoline = $function;
        }
        $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(
          t1,
          isStatic,
          isIntercepted
        );
        $prototype[callName] = trampoline;
        for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
          stub = funsOrNames[i];
          if (typeof stub == 'string') {
            stub0 = container[stub];
            stubName = stub;
            stub = stub0;
          } else stubName = '';
          stubCallName = callNames[i];
          if (stubCallName != null) {
            if (t2)
              stub = H.Closure_forwardCallTo(
                stubName,
                stub,
                isIntercepted,
                needsDirectAccess
              );
            $prototype[stubCallName] = stub;
          }
          if (i === applyTrampolineIndex) applyTrampoline = stub;
        }
        $prototype['call*'] = applyTrampoline;
        $prototype.$requiredArgCount = parameters.rC;
        $prototype.$defaultValues = parameters.dV;
        return $constructor;
      },
      Closure__computeSignatureFunctionNewRti(
        functionType,
        isStatic,
        isIntercepted
      ) {
        if (typeof functionType == 'number') return functionType;
        if (typeof functionType == 'string') {
          if (isStatic)
            throw H.wrapException(
              'Cannot compute signature for static tearoff.'
            );
          return (function (recipe, evalOnReceiver) {
            return function () {
              return evalOnReceiver(this, recipe);
            };
          })(functionType, H.BoundClosure_evalRecipe);
        }
        throw H.wrapException('Error in functionType of tearoff');
      },
      Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
        var getReceiver = H.BoundClosure_receiverOf;
        switch (needsDirectAccess ? -1 : arity) {
          case 0:
            return (function (entry, receiverOf) {
              return function () {
                return receiverOf(this)[entry]();
              };
            })(stubName, getReceiver);
          case 1:
            return (function (entry, receiverOf) {
              return function (a) {
                return receiverOf(this)[entry](a);
              };
            })(stubName, getReceiver);
          case 2:
            return (function (entry, receiverOf) {
              return function (a, b) {
                return receiverOf(this)[entry](a, b);
              };
            })(stubName, getReceiver);
          case 3:
            return (function (entry, receiverOf) {
              return function (a, b, c) {
                return receiverOf(this)[entry](a, b, c);
              };
            })(stubName, getReceiver);
          case 4:
            return (function (entry, receiverOf) {
              return function (a, b, c, d) {
                return receiverOf(this)[entry](a, b, c, d);
              };
            })(stubName, getReceiver);
          case 5:
            return (function (entry, receiverOf) {
              return function (a, b, c, d, e) {
                return receiverOf(this)[entry](a, b, c, d, e);
              };
            })(stubName, getReceiver);
          default:
            return (function (f, receiverOf) {
              return function () {
                return f.apply(receiverOf(this), arguments);
              };
            })($function, getReceiver);
        }
      },
      Closure_forwardCallTo(
        stubName,
        $function,
        isIntercepted,
        needsDirectAccess
      ) {
        var arity,
          t1,
          selfName,
          t2,
          $arguments,
          _s8_ = 'receiver';
        if (isIntercepted)
          return H.Closure_forwardInterceptedCallTo(
            stubName,
            $function,
            needsDirectAccess
          );
        arity = $function.length;
        t1 = needsDirectAccess || arity >= 27;
        if (t1)
          return H.Closure_cspForwardCall(
            arity,
            needsDirectAccess,
            stubName,
            $function
          );
        if (arity === 0) {
          t1 = $.Closure_functionCounter;
          $.Closure_functionCounter = t1 + 1;
          selfName = 'self' + H.S(t1);
          t1 = 'return function(){var ' + selfName + ' = this.';
          t2 = $.BoundClosure__receiverFieldNameCache;
          return new Function(
            t1 +
              (t2 == null
                ? ($.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed(
                    _s8_
                  ))
                : t2) +
              ';return ' +
              selfName +
              '.' +
              stubName +
              '();}'
          )();
        }
        $arguments = 'abcdefghijklmnopqrstuvwxyz'
          .split('')
          .splice(0, arity)
          .join(',');
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = t1 + 1;
        $arguments += H.S(t1);
        t1 = 'return function(' + $arguments + '){return this.';
        t2 = $.BoundClosure__receiverFieldNameCache;
        return new Function(
          t1 +
            (t2 == null
              ? ($.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed(
                  _s8_
                ))
              : t2) +
            '.' +
            stubName +
            '(' +
            $arguments +
            ');}'
        )();
      },
      Closure_cspForwardInterceptedCall(
        arity,
        needsDirectAccess,
        stubName,
        $function
      ) {
        var getReceiver = H.BoundClosure_receiverOf,
          getInterceptor = H.BoundClosure_interceptorOf;
        switch (needsDirectAccess ? -1 : arity) {
          case 0:
            throw H.wrapException(
              new H.RuntimeError('Intercepted function with no arguments.')
            );
          case 1:
            return (function (entry, interceptorOf, receiverOf) {
              return function () {
                return interceptorOf(this)[entry](receiverOf(this));
              };
            })(stubName, getInterceptor, getReceiver);
          case 2:
            return (function (entry, interceptorOf, receiverOf) {
              return function (a) {
                return interceptorOf(this)[entry](receiverOf(this), a);
              };
            })(stubName, getInterceptor, getReceiver);
          case 3:
            return (function (entry, interceptorOf, receiverOf) {
              return function (a, b) {
                return interceptorOf(this)[entry](receiverOf(this), a, b);
              };
            })(stubName, getInterceptor, getReceiver);
          case 4:
            return (function (entry, interceptorOf, receiverOf) {
              return function (a, b, c) {
                return interceptorOf(this)[entry](receiverOf(this), a, b, c);
              };
            })(stubName, getInterceptor, getReceiver);
          case 5:
            return (function (entry, interceptorOf, receiverOf) {
              return function (a, b, c, d) {
                return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
              };
            })(stubName, getInterceptor, getReceiver);
          case 6:
            return (function (entry, interceptorOf, receiverOf) {
              return function (a, b, c, d, e) {
                return interceptorOf(this)[entry](
                  receiverOf(this),
                  a,
                  b,
                  c,
                  d,
                  e
                );
              };
            })(stubName, getInterceptor, getReceiver);
          default:
            return (function (f, interceptorOf, receiverOf) {
              return function () {
                var a = [receiverOf(this)];
                Array.prototype.push.apply(a, arguments);
                return f.apply(interceptorOf(this), a);
              };
            })($function, getInterceptor, getReceiver);
        }
      },
      Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
        var receiverField,
          arity,
          t1,
          t2,
          $arguments,
          interceptorField = $.BoundClosure__interceptorFieldNameCache;
        if (interceptorField == null)
          interceptorField = $.BoundClosure__interceptorFieldNameCache = H.BoundClosure__computeFieldNamed(
            'interceptor'
          );
        receiverField = $.BoundClosure__receiverFieldNameCache;
        if (receiverField == null)
          receiverField = $.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed(
            'receiver'
          );
        arity = $function.length;
        t1 = needsDirectAccess || arity >= 28;
        if (t1)
          return H.Closure_cspForwardInterceptedCall(
            arity,
            needsDirectAccess,
            stubName,
            $function
          );
        if (arity === 1) {
          t1 =
            'return function(){return this.' +
            interceptorField +
            '.' +
            stubName +
            '(this.' +
            receiverField +
            ');';
          t2 = $.Closure_functionCounter;
          $.Closure_functionCounter = t2 + 1;
          return new Function(t1 + H.S(t2) + '}')();
        }
        $arguments = 'abcdefghijklmnopqrstuvwxyz'
          .split('')
          .splice(0, arity - 1)
          .join(',');
        t1 =
          'return function(' +
          $arguments +
          '){return this.' +
          interceptorField +
          '.' +
          stubName +
          '(this.' +
          receiverField +
          ', ' +
          $arguments +
          ');';
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + '}')();
      },
      closureFromTearOff(parameters) {
        return H.Closure_fromTearOff(parameters);
      },
      BoundClosure_evalRecipe(closure, recipe) {
        return H._Universe_evalInEnvironment(
          init.typeUniverse,
          H.instanceType(closure._receiver),
          recipe
        );
      },
      BoundClosure_receiverOf(closure) {
        return closure._receiver;
      },
      BoundClosure_interceptorOf(closure) {
        return closure._interceptor;
      },
      BoundClosure__computeFieldNamed(fieldName) {
        var t1,
          i,
          $name,
          template = new H.BoundClosure('receiver', 'interceptor'),
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName) return $name;
        }
        throw H.wrapException(
          P.ArgumentError$('Field name ' + fieldName + ' not found.', null)
        );
      },
      throwCyclicInit(staticName) {
        throw H.wrapException(new P.CyclicInitializationError(staticName));
      },
      getIsolateAffinityTag($name) {
        return init.getIsolateTag($name);
      },
      defineProperty(obj, property, value) {
        Object.defineProperty(obj, property, {
          value: value,
          enumerable: false,
          writable: true,
          configurable: true,
        });
      },
      lookupAndCacheInterceptor(obj) {
        var interceptor,
          interceptorClass,
          altTag,
          mark,
          t1,
          tag = $.getTagFunction.call$1(obj),
          record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {
            value: record,
            enumerable: false,
            writable: true,
            configurable: true,
          });
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null) return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
        if (interceptorClass == null) {
          altTag = $.alternateTagFunction.call$2(obj, tag);
          if (altTag != null) {
            record = $.dispatchRecordsForInstanceTags[altTag];
            if (record != null) {
              Object.defineProperty(obj, init.dispatchPropertyName, {
                value: record,
                enumerable: false,
                writable: true,
                configurable: true,
              });
              return record.i;
            }
            interceptor = $.interceptorsForUncacheableTags[altTag];
            if (interceptor != null) return interceptor;
            interceptorClass = init.interceptorsByTag[altTag];
            tag = altTag;
          }
        }
        if (interceptorClass == null) return null;
        interceptor = interceptorClass.prototype;
        mark = tag[0];
        if (mark === '!') {
          record = H.makeLeafDispatchRecord(interceptor);
          $.dispatchRecordsForInstanceTags[tag] = record;
          Object.defineProperty(obj, init.dispatchPropertyName, {
            value: record,
            enumerable: false,
            writable: true,
            configurable: true,
          });
          return record.i;
        }
        if (mark === '~') {
          $.interceptorsForUncacheableTags[tag] = interceptor;
          return interceptor;
        }
        if (mark === '-') {
          t1 = H.makeLeafDispatchRecord(interceptor);
          Object.defineProperty(
            Object.getPrototypeOf(obj),
            init.dispatchPropertyName,
            { value: t1, enumerable: false, writable: true, configurable: true }
          );
          return t1.i;
        }
        if (mark === '+') return H.patchInteriorProto(obj, interceptor);
        if (mark === '*') throw H.wrapException(P.UnimplementedError$(tag));
        if (init.leafTags[tag] === true) {
          t1 = H.makeLeafDispatchRecord(interceptor);
          Object.defineProperty(
            Object.getPrototypeOf(obj),
            init.dispatchPropertyName,
            { value: t1, enumerable: false, writable: true, configurable: true }
          );
          return t1.i;
        } else return H.patchInteriorProto(obj, interceptor);
      },
      patchInteriorProto(obj, interceptor) {
        var proto = Object.getPrototypeOf(obj);
        Object.defineProperty(proto, init.dispatchPropertyName, {
          value: J.makeDispatchRecord(interceptor, proto, null, null),
          enumerable: false,
          writable: true,
          configurable: true,
        });
        return interceptor;
      },
      makeLeafDispatchRecord(interceptor) {
        return J.makeDispatchRecord(
          interceptor,
          false,
          null,
          !!interceptor.$isJavaScriptIndexingBehavior
        );
      },
      makeDefaultDispatchRecord(tag, interceptorClass, proto) {
        var interceptor = interceptorClass.prototype;
        if (init.leafTags[tag] === true)
          return H.makeLeafDispatchRecord(interceptor);
        else return J.makeDispatchRecord(interceptor, proto, null, null);
      },
      initNativeDispatch() {
        if (true === $.initNativeDispatchFlag) return;
        $.initNativeDispatchFlag = true;
        H.initNativeDispatchContinue();
      },
      initNativeDispatchContinue() {
        var map, tags, fun, i, tag, proto, record, interceptorClass;
        $.dispatchRecordsForInstanceTags = Object.create(null);
        $.interceptorsForUncacheableTags = Object.create(null);
        H.initHooks();
        map = init.interceptorsByTag;
        tags = Object.getOwnPropertyNames(map);
        if (typeof window != 'undefined') {
          window;
          fun = function () {};
          for (i = 0; i < tags.length; ++i) {
            tag = tags[i];
            proto = $.prototypeForTagFunction.call$1(tag);
            if (proto != null) {
              record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
              if (record != null) {
                Object.defineProperty(proto, init.dispatchPropertyName, {
                  value: record,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                });
                fun.prototype = proto;
              }
            }
          }
        }
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          if (/^[A-Za-z_]/.test(tag)) {
            interceptorClass = map[tag];
            map['!' + tag] = interceptorClass;
            map['~' + tag] = interceptorClass;
            map['-' + tag] = interceptorClass;
            map['+' + tag] = interceptorClass;
            map['*' + tag] = interceptorClass;
          }
        }
      },
      initHooks() {
        var transformers,
          i,
          transformer,
          getTag,
          getUnknownTag,
          prototypeForTag,
          hooks = C.C_JS_CONST0();
        hooks = H.applyHooksTransformer(
          C.C_JS_CONST1,
          H.applyHooksTransformer(
            C.C_JS_CONST2,
            H.applyHooksTransformer(
              C.C_JS_CONST3,
              H.applyHooksTransformer(
                C.C_JS_CONST3,
                H.applyHooksTransformer(
                  C.C_JS_CONST4,
                  H.applyHooksTransformer(
                    C.C_JS_CONST5,
                    H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)
                  )
                )
              )
            )
          )
        );
        if (typeof dartNativeDispatchHooksTransformer != 'undefined') {
          transformers = dartNativeDispatchHooksTransformer;
          if (typeof transformers == 'function') transformers = [transformers];
          if (transformers.constructor == Array)
            for (i = 0; i < transformers.length; ++i) {
              transformer = transformers[i];
              if (typeof transformer == 'function')
                hooks = transformer(hooks) || hooks;
            }
        }
        getTag = hooks.getTag;
        getUnknownTag = hooks.getUnknownTag;
        prototypeForTag = hooks.prototypeForTag;
        $.getTagFunction = new H.initHooks_closure(getTag);
        $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
        $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
      },
      applyHooksTransformer(transformer, hooks) {
        return transformer(hooks) || hooks;
      },
      JSSyntaxRegExp_makeNative(
        source,
        multiLine,
        caseSensitive,
        unicode,
        dotAll,
        global
      ) {
        var m = multiLine ? 'm' : '',
          i = caseSensitive ? '' : 'i',
          u = unicode ? 'u' : '',
          s = dotAll ? 's' : '',
          g = global ? 'g' : '',
          regexp = (function (source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          })(source, m + i + u + s + g);
        if (regexp instanceof RegExp) return regexp;
        throw H.wrapException(
          P.FormatException$(
            'Illegal RegExp pattern (' + String(regexp) + ')',
            source,
            null
          )
        );
      },
      stringContainsUnchecked(receiver, other, startIndex) {
        var t1;
        if (typeof other == 'string')
          return receiver.indexOf(other, startIndex) >= 0;
        else if (other instanceof H.JSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(t1);
        } else {
          t1 = J.allMatches$1$s(
            other,
            C.JSString_methods.substring$1(receiver, startIndex)
          );
          return !t1.get$isEmpty(t1);
        }
      },
      escapeReplacement(replacement) {
        if (replacement.indexOf('$', 0) >= 0)
          return replacement.replace(/\$/g, '$$$$');
        return replacement;
      },
      stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
        var match = regexp._execGlobal$2(receiver, startIndex);
        if (match == null) return receiver;
        return H.stringReplaceRangeUnchecked(
          receiver,
          match._match.index,
          match.get$end(match),
          replacement
        );
      },
      quoteStringForRegExp(string) {
        if (/[[\]{}()*+?.\\^$|]/.test(string))
          return string.replace(/[[\]{}()*+?.\\^$|]/g, '\\$&');
        return string;
      },
      stringReplaceAllUnchecked(receiver, pattern, replacement) {
        var nativeRegexp;
        if (typeof pattern == 'string')
          return H.stringReplaceAllUncheckedString(
            receiver,
            pattern,
            replacement
          );
        if (pattern instanceof H.JSSyntaxRegExp) {
          nativeRegexp = pattern.get$_nativeGlobalVersion();
          nativeRegexp.lastIndex = 0;
          return receiver.replace(
            nativeRegexp,
            H.escapeReplacement(replacement)
          );
        }
        throw H.wrapException('String.replaceAll(Pattern) UNIMPLEMENTED');
      },
      stringReplaceAllUncheckedString(receiver, pattern, replacement) {
        var $length, t1, i, index;
        if (pattern === '') {
          if (receiver === '') return replacement;
          $length = receiver.length;
          t1 = '' + replacement;
          for (i = 0; i < $length; ++i) t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
        index = receiver.indexOf(pattern, 0);
        if (index < 0) return receiver;
        if (receiver.length < 500 || replacement.indexOf('$', 0) >= 0)
          return receiver.split(pattern).join(replacement);
        return receiver.replace(
          new RegExp(H.quoteStringForRegExp(pattern), 'g'),
          H.escapeReplacement(replacement)
        );
      },
      stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
        var index, t1, matches, match;
        if (typeof pattern == 'string') {
          index = receiver.indexOf(pattern, startIndex);
          if (index < 0) return receiver;
          return H.stringReplaceRangeUnchecked(
            receiver,
            index,
            index + pattern.length,
            replacement
          );
        }
        if (pattern instanceof H.JSSyntaxRegExp)
          return startIndex === 0
            ? receiver.replace(
                pattern._nativeRegExp,
                H.escapeReplacement(replacement)
              )
            : H.stringReplaceFirstRE(
                receiver,
                pattern,
                replacement,
                startIndex
              );
        t1 = J.allMatches$2$s(pattern, receiver, startIndex);
        matches = t1.get$iterator(t1);
        if (!matches.moveNext$0()) return receiver;
        match = matches.get$current();
        return C.JSString_methods.replaceRange$3(
          receiver,
          match.get$start(match),
          match.get$end(match),
          replacement
        );
      },
      stringReplaceRangeUnchecked(receiver, start, end, replacement) {
        var prefix = receiver.substring(0, start),
          suffix = receiver.substring(end);
        return prefix + replacement + suffix;
      },
      ConstantMapView: function ConstantMapView(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      ConstantMap: function ConstantMap() {},
      ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
        var _ = this;
        _.__js_helper$_length = t0;
        _._jsObject = t1;
        _.__js_helper$_keys = t2;
        _.$ti = t3;
      },
      ConstantStringMap_values_closure: function ConstantStringMap_values_closure(
        t0
      ) {
        this.$this = t0;
      },
      _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
        this.__js_helper$_map = t0;
        this.$ti = t1;
      },
      Instantiation: function Instantiation() {},
      Instantiation1: function Instantiation1(t0, t1) {
        this._genericClosure = t0;
        this.$ti = t1;
      },
      JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
        var _ = this;
        _.__js_helper$_memberName = t0;
        _.__js_helper$_kind = t1;
        _._arguments = t2;
        _._namedArgumentNames = t3;
        _._typeArgumentCount = t4;
      },
      Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.namedArgumentList = t1;
        this.$arguments = t2;
      },
      TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._pattern = t0;
        _._arguments = t1;
        _._argumentsExpr = t2;
        _._expr = t3;
        _._method = t4;
        _._receiver = t5;
      },
      NullError: function NullError(t0, t1) {
        this.__js_helper$_message = t0;
        this._method = t1;
      },
      JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
        this.__js_helper$_message = t0;
        this._method = t1;
        this._receiver = t2;
      },
      UnknownJsTypeError: function UnknownJsTypeError(t0) {
        this.__js_helper$_message = t0;
      },
      NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(
        t0
      ) {
        this._irritant = t0;
      },
      ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
        this.dartException = t0;
        this.stackTrace = t1;
      },
      _StackTrace: function _StackTrace(t0) {
        this._exception = t0;
        this._trace = null;
      },
      Closure: function Closure() {},
      Closure0Args: function Closure0Args() {},
      Closure2Args: function Closure2Args() {},
      TearOffClosure: function TearOffClosure() {},
      StaticClosure: function StaticClosure() {},
      BoundClosure: function BoundClosure(t0, t1) {
        this._receiver = t0;
        this._interceptor = t1;
      },
      RuntimeError: function RuntimeError(t0) {
        this.message = t0;
      },
      _Required: function _Required() {},
      JsLinkedHashMap: function JsLinkedHashMap(t0) {
        var _ = this;
        _.__js_helper$_length = 0;
        _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
        _._modifications = 0;
        _.$ti = t0;
      },
      JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(
        t0
      ) {
        this.$this = t0;
      },
      JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(
        t0
      ) {
        this.$this = t0;
      },
      LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
        var _ = this;
        _.hashMapCellKey = t0;
        _.hashMapCellValue = t1;
        _._previous = _._next = null;
      },
      LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
        this.__js_helper$_map = t0;
        this.$ti = t1;
      },
      LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1) {
        var _ = this;
        _.__js_helper$_map = t0;
        _._modifications = t1;
        _.__js_helper$_current = _._cell = null;
      },
      initHooks_closure: function initHooks_closure(t0) {
        this.getTag = t0;
      },
      initHooks_closure0: function initHooks_closure0(t0) {
        this.getUnknownTag = t0;
      },
      initHooks_closure1: function initHooks_closure1(t0) {
        this.prototypeForTag = t0;
      },
      JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
        var _ = this;
        _.pattern = t0;
        _._nativeRegExp = t1;
        _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
      },
      _MatchImplementation: function _MatchImplementation(t0) {
        this._match = t0;
      },
      _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
        this._re = t0;
        this.__js_helper$_string = t1;
        this.__js_helper$_start = t2;
      },
      _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
        var _ = this;
        _._regExp = t0;
        _.__js_helper$_string = t1;
        _._nextIndex = t2;
        _.__js_helper$_current = null;
      },
      StringMatch: function StringMatch(t0, t1) {
        this.start = t0;
        this.pattern = t1;
      },
      _StringAllMatchesIterable: function _StringAllMatchesIterable(
        t0,
        t1,
        t2
      ) {
        this._input = t0;
        this._pattern = t1;
        this.__js_helper$_index = t2;
      },
      _StringAllMatchesIterator: function _StringAllMatchesIterator(
        t0,
        t1,
        t2
      ) {
        var _ = this;
        _._input = t0;
        _._pattern = t1;
        _.__js_helper$_index = t2;
        _.__js_helper$_current = null;
      },
      throwLateFieldADI(fieldName) {
        return H.throwExpression(H.LateError$fieldADI(fieldName));
      },
      _Cell$() {
        var t1 = new H._Cell('');
        return (t1._value = t1);
      },
      _Cell: function _Cell(t0) {
        this.__late_helper$_name = t0;
        this._value = null;
      },
      _ensureNativeList(list) {
        return list;
      },
      NativeInt8List__create1(arg) {
        return new Int8Array(arg);
      },
      _checkValidIndex(index, list, $length) {
        if (index >>> 0 !== index || index >= $length)
          throw H.wrapException(H.diagnoseIndexError(list, index));
      },
      _checkValidRange(start, end, $length) {
        var t1;
        if (!(start >>> 0 !== start))
          if (end == null) t1 = start > $length;
          else t1 = end >>> 0 !== end || start > end || end > $length;
        else t1 = true;
        if (t1)
          throw H.wrapException(H.diagnoseRangeError(start, end, $length));
        if (end == null) return $length;
        return end;
      },
      NativeTypedData: function NativeTypedData() {},
      NativeTypedArray: function NativeTypedArray() {},
      NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {},
      NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {},
      NativeFloat32List: function NativeFloat32List() {},
      NativeFloat64List: function NativeFloat64List() {},
      NativeInt16List: function NativeInt16List() {},
      NativeInt32List: function NativeInt32List() {},
      NativeInt8List: function NativeInt8List() {},
      NativeUint16List: function NativeUint16List() {},
      NativeUint32List: function NativeUint32List() {},
      NativeUint8ClampedList: function NativeUint8ClampedList() {},
      NativeUint8List: function NativeUint8List() {},
      _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {},
      _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {},
      _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {},
      _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {},
      Rti__getQuestionFromStar(universe, rti) {
        var question = rti._precomputed1;
        return question == null
          ? (rti._precomputed1 = H._Universe__lookupQuestionRti(
              universe,
              rti._primary,
              true
            ))
          : question;
      },
      Rti__getFutureFromFutureOr(universe, rti) {
        var future = rti._precomputed1;
        return future == null
          ? (rti._precomputed1 = H._Universe__lookupInterfaceRti(
              universe,
              'Future',
              [rti._primary]
            ))
          : future;
      },
      Rti__isUnionOfFunctionType(rti) {
        var kind = rti._kind;
        if (kind === 6 || kind === 7 || kind === 8)
          return H.Rti__isUnionOfFunctionType(rti._primary);
        return kind === 11 || kind === 12;
      },
      Rti__getCanonicalRecipe(rti) {
        return rti._canonicalRecipe;
      },
      findType(recipe) {
        return H._Universe_eval(init.typeUniverse, recipe, false);
      },
      instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
        var t1, cache, key, probe, rti;
        if (genericFunctionRti == null) return null;
        t1 = instantiationRti._rest;
        cache = genericFunctionRti._bindCache;
        if (cache == null) cache = genericFunctionRti._bindCache = new Map();
        key = instantiationRti._canonicalRecipe;
        probe = cache.get(key);
        if (probe != null) return probe;
        rti = H._substitute(
          init.typeUniverse,
          genericFunctionRti._primary,
          t1,
          0
        );
        cache.set(key, rti);
        return rti;
      },
      _substitute(universe, rti, typeArguments, depth) {
        var baseType,
          substitutedBaseType,
          interfaceTypeArguments,
          substitutedInterfaceTypeArguments,
          base,
          substitutedBase,
          $arguments,
          substitutedArguments,
          returnType,
          substitutedReturnType,
          functionParameters,
          substitutedFunctionParameters,
          bounds,
          substitutedBounds,
          index,
          argument,
          kind = rti._kind;
        switch (kind) {
          case 5:
          case 1:
          case 2:
          case 3:
          case 4:
            return rti;
          case 6:
            baseType = rti._primary;
            substitutedBaseType = H._substitute(
              universe,
              baseType,
              typeArguments,
              depth
            );
            if (substitutedBaseType === baseType) return rti;
            return H._Universe__lookupStarRti(
              universe,
              substitutedBaseType,
              true
            );
          case 7:
            baseType = rti._primary;
            substitutedBaseType = H._substitute(
              universe,
              baseType,
              typeArguments,
              depth
            );
            if (substitutedBaseType === baseType) return rti;
            return H._Universe__lookupQuestionRti(
              universe,
              substitutedBaseType,
              true
            );
          case 8:
            baseType = rti._primary;
            substitutedBaseType = H._substitute(
              universe,
              baseType,
              typeArguments,
              depth
            );
            if (substitutedBaseType === baseType) return rti;
            return H._Universe__lookupFutureOrRti(
              universe,
              substitutedBaseType,
              true
            );
          case 9:
            interfaceTypeArguments = rti._rest;
            substitutedInterfaceTypeArguments = H._substituteArray(
              universe,
              interfaceTypeArguments,
              typeArguments,
              depth
            );
            if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
              return rti;
            return H._Universe__lookupInterfaceRti(
              universe,
              rti._primary,
              substitutedInterfaceTypeArguments
            );
          case 10:
            base = rti._primary;
            substitutedBase = H._substitute(
              universe,
              base,
              typeArguments,
              depth
            );
            $arguments = rti._rest;
            substitutedArguments = H._substituteArray(
              universe,
              $arguments,
              typeArguments,
              depth
            );
            if (substitutedBase === base && substitutedArguments === $arguments)
              return rti;
            return H._Universe__lookupBindingRti(
              universe,
              substitutedBase,
              substitutedArguments
            );
          case 11:
            returnType = rti._primary;
            substitutedReturnType = H._substitute(
              universe,
              returnType,
              typeArguments,
              depth
            );
            functionParameters = rti._rest;
            substitutedFunctionParameters = H._substituteFunctionParameters(
              universe,
              functionParameters,
              typeArguments,
              depth
            );
            if (
              substitutedReturnType === returnType &&
              substitutedFunctionParameters === functionParameters
            )
              return rti;
            return H._Universe__lookupFunctionRti(
              universe,
              substitutedReturnType,
              substitutedFunctionParameters
            );
          case 12:
            bounds = rti._rest;
            depth += bounds.length;
            substitutedBounds = H._substituteArray(
              universe,
              bounds,
              typeArguments,
              depth
            );
            base = rti._primary;
            substitutedBase = H._substitute(
              universe,
              base,
              typeArguments,
              depth
            );
            if (substitutedBounds === bounds && substitutedBase === base)
              return rti;
            return H._Universe__lookupGenericFunctionRti(
              universe,
              substitutedBase,
              substitutedBounds,
              true
            );
          case 13:
            index = rti._primary;
            if (index < depth) return rti;
            argument = typeArguments[index - depth];
            if (argument == null) return rti;
            return argument;
          default:
            throw H.wrapException(
              P.AssertionError$(
                'Attempted to substitute unexpected RTI kind ' + kind
              )
            );
        }
      },
      _substituteArray(universe, rtiArray, typeArguments, depth) {
        var changed,
          i,
          rti,
          substitutedRti,
          $length = rtiArray.length,
          result = H._Utils_newArrayOrEmpty($length);
        for (changed = false, i = 0; i < $length; ++i) {
          rti = rtiArray[i];
          substitutedRti = H._substitute(universe, rti, typeArguments, depth);
          if (substitutedRti !== rti) changed = true;
          result[i] = substitutedRti;
        }
        return changed ? result : rtiArray;
      },
      _substituteNamed(universe, namedArray, typeArguments, depth) {
        var changed,
          i,
          t1,
          t2,
          rti,
          substitutedRti,
          $length = namedArray.length,
          result = H._Utils_newArrayOrEmpty($length);
        for (changed = false, i = 0; i < $length; i += 3) {
          t1 = namedArray[i];
          t2 = namedArray[i + 1];
          rti = namedArray[i + 2];
          substitutedRti = H._substitute(universe, rti, typeArguments, depth);
          if (substitutedRti !== rti) changed = true;
          result.splice(i, 3, t1, t2, substitutedRti);
        }
        return changed ? result : namedArray;
      },
      _substituteFunctionParameters(
        universe,
        functionParameters,
        typeArguments,
        depth
      ) {
        var result,
          requiredPositional = functionParameters._requiredPositional,
          substitutedRequiredPositional = H._substituteArray(
            universe,
            requiredPositional,
            typeArguments,
            depth
          ),
          optionalPositional = functionParameters._optionalPositional,
          substitutedOptionalPositional = H._substituteArray(
            universe,
            optionalPositional,
            typeArguments,
            depth
          ),
          named = functionParameters._named,
          substitutedNamed = H._substituteNamed(
            universe,
            named,
            typeArguments,
            depth
          );
        if (
          substitutedRequiredPositional === requiredPositional &&
          substitutedOptionalPositional === optionalPositional &&
          substitutedNamed === named
        )
          return functionParameters;
        result = new H._FunctionParameters();
        result._requiredPositional = substitutedRequiredPositional;
        result._optionalPositional = substitutedOptionalPositional;
        result._named = substitutedNamed;
        return result;
      },
      _setArrayType(target, rti) {
        target[init.arrayRti] = rti;
        return target;
      },
      closureFunctionType(closure) {
        var signature = closure.$signature;
        if (signature != null) {
          if (typeof signature == 'number')
            return H.getTypeFromTypesTable(signature);
          return closure.$signature();
        }
        return null;
      },
      instanceOrFunctionType(object, testRti) {
        var rti;
        if (H.Rti__isUnionOfFunctionType(testRti))
          if (object instanceof H.Closure) {
            rti = H.closureFunctionType(object);
            if (rti != null) return rti;
          }
        return H.instanceType(object);
      },
      instanceType(object) {
        var rti;
        if (object instanceof P.Object) {
          rti = object.$ti;
          return rti != null ? rti : H._instanceTypeFromConstructor(object);
        }
        if (Array.isArray(object)) return H._arrayInstanceType(object);
        return H._instanceTypeFromConstructor(J.getInterceptor$(object));
      },
      _arrayInstanceType(object) {
        var rti = object[init.arrayRti],
          defaultRti = type$.JSArray_dynamic;
        if (rti == null) return defaultRti;
        if (rti.constructor !== defaultRti.constructor) return defaultRti;
        return rti;
      },
      _instanceType(object) {
        var rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      },
      _instanceTypeFromConstructor(instance) {
        var $constructor = instance.constructor,
          probe = $constructor.$ccache;
        if (probe != null) return probe;
        return H._instanceTypeFromConstructorMiss(instance, $constructor);
      },
      _instanceTypeFromConstructorMiss(instance, $constructor) {
        var effectiveConstructor =
            instance instanceof H.Closure
              ? instance.__proto__.__proto__.constructor
              : $constructor,
          rti = H._Universe_findErasedType(
            init.typeUniverse,
            effectiveConstructor.name
          );
        $constructor.$ccache = rti;
        return rti;
      },
      getTypeFromTypesTable(index) {
        var rti,
          table = init.types,
          type = table[index];
        if (typeof type == 'string') {
          rti = H._Universe_eval(init.typeUniverse, type, false);
          table[index] = rti;
          return rti;
        }
        return type;
      },
      getRuntimeType(object) {
        var rti =
          object instanceof H.Closure ? H.closureFunctionType(object) : null;
        return H.createRuntimeType(rti == null ? H.instanceType(object) : rti);
      },
      createRuntimeType(rti) {
        var recipe,
          starErasedRecipe,
          starErasedRti,
          type = rti._cachedRuntimeType;
        if (type != null) return type;
        recipe = rti._canonicalRecipe;
        starErasedRecipe = recipe.replace(/\*/g, '');
        if (starErasedRecipe === recipe)
          return (rti._cachedRuntimeType = new H._Type(rti));
        starErasedRti = H._Universe_eval(
          init.typeUniverse,
          starErasedRecipe,
          true
        );
        type = starErasedRti._cachedRuntimeType;
        return (rti._cachedRuntimeType =
          type == null
            ? (starErasedRti._cachedRuntimeType = new H._Type(starErasedRti))
            : type);
      },
      typeLiteral(recipe) {
        return H.createRuntimeType(
          H._Universe_eval(init.typeUniverse, recipe, false)
        );
      },
      _installSpecializedIsTest(object) {
        var t1,
          unstarred,
          isFn,
          $name,
          testRti = this;
        if (testRti === type$.Object)
          return H._finishIsFn(testRti, object, H._isObject);
        if (!H.isStrongTopType(testRti))
          if (!(testRti === type$.legacy_Object)) t1 = false;
          else t1 = true;
        else t1 = true;
        if (t1) return H._finishIsFn(testRti, object, H._isTop);
        t1 = testRti._kind;
        unstarred = t1 === 6 ? testRti._primary : testRti;
        if (unstarred === type$.int) isFn = H._isInt;
        else if (unstarred === type$.double || unstarred === type$.num)
          isFn = H._isNum;
        else if (unstarred === type$.String) isFn = H._isString;
        else isFn = unstarred === type$.bool ? H._isBool : null;
        if (isFn != null) return H._finishIsFn(testRti, object, isFn);
        if (unstarred._kind === 9) {
          $name = unstarred._primary;
          if (unstarred._rest.every(H.isTopType)) {
            testRti._specializedTestResource = '$is' + $name;
            if ($name === 'List')
              return H._finishIsFn(testRti, object, H._isListTestViaProperty);
            return H._finishIsFn(testRti, object, H._isTestViaProperty);
          }
        } else if (t1 === 7)
          return H._finishIsFn(
            testRti,
            object,
            H._generalNullableIsTestImplementation
          );
        return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
      },
      _finishIsFn(testRti, object, isFn) {
        testRti._is = isFn;
        return testRti._is(object);
      },
      _installSpecializedAsCheck(object) {
        var t1,
          testRti = this,
          asFn = H._generalAsCheckImplementation;
        if (!H.isStrongTopType(testRti))
          if (!(testRti === type$.legacy_Object)) t1 = false;
          else t1 = true;
        else t1 = true;
        if (t1) asFn = H._asTop;
        else if (testRti === type$.Object) asFn = H._asObject;
        else {
          t1 = H.isNullable(testRti);
          if (t1) asFn = H._generalNullableAsCheckImplementation;
        }
        testRti._as = asFn;
        return testRti._as(object);
      },
      _nullIs(testRti) {
        var t1,
          kind = testRti._kind;
        if (!H.isStrongTopType(testRti))
          if (!(testRti === type$.legacy_Object))
            if (!(testRti === type$.legacy_Never))
              if (kind !== 7)
                t1 =
                  (kind === 8 && H._nullIs(testRti._primary)) ||
                  testRti === type$.Null ||
                  testRti === type$.JSNull;
              else t1 = true;
            else t1 = true;
          else t1 = true;
        else t1 = true;
        return t1;
      },
      _generalIsTestImplementation(object) {
        var testRti = this;
        if (object == null) return H._nullIs(testRti);
        return H._isSubtype(
          init.typeUniverse,
          H.instanceOrFunctionType(object, testRti),
          null,
          testRti,
          null
        );
      },
      _generalNullableIsTestImplementation(object) {
        if (object == null) return true;
        return this._primary._is(object);
      },
      _isTestViaProperty(object) {
        var tag,
          testRti = this;
        if (object == null) return H._nullIs(testRti);
        tag = testRti._specializedTestResource;
        if (object instanceof P.Object) return !!object[tag];
        return !!J.getInterceptor$(object)[tag];
      },
      _isListTestViaProperty(object) {
        var tag,
          testRti = this;
        if (object == null) return H._nullIs(testRti);
        if (typeof object != 'object') return false;
        if (Array.isArray(object)) return true;
        tag = testRti._specializedTestResource;
        if (object instanceof P.Object) return !!object[tag];
        return !!J.getInterceptor$(object)[tag];
      },
      _generalAsCheckImplementation(object) {
        var t1,
          testRti = this;
        if (object == null) {
          t1 = H.isNullable(testRti);
          if (t1) return object;
        } else if (testRti._is(object)) return object;
        H._failedAsCheck(object, testRti);
      },
      _generalNullableAsCheckImplementation(object) {
        var testRti = this;
        if (object == null) return object;
        else if (testRti._is(object)) return object;
        H._failedAsCheck(object, testRti);
      },
      _failedAsCheck(object, testRti) {
        throw H.wrapException(
          H._TypeError$fromMessage(
            H._Error_compose(
              object,
              H.instanceOrFunctionType(object, testRti),
              H._rtiToString(testRti, null)
            )
          )
        );
      },
      _Error_compose(object, objectRti, checkedTypeDescription) {
        var objectDescription = P.Error_safeToString(object),
          objectTypeDescription = H._rtiToString(
            objectRti == null ? H.instanceType(object) : objectRti,
            null
          );
        return (
          objectDescription +
          ": type '" +
          objectTypeDescription +
          "' is not a subtype of type '" +
          checkedTypeDescription +
          "'"
        );
      },
      _TypeError$fromMessage(message) {
        return new H._TypeError('TypeError: ' + message);
      },
      _TypeError__TypeError$forType(object, type) {
        return new H._TypeError(
          'TypeError: ' + H._Error_compose(object, null, type)
        );
      },
      _isObject(object) {
        return object != null;
      },
      _asObject(object) {
        if (object != null) return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'Object')
        );
      },
      _isTop(object) {
        return true;
      },
      _asTop(object) {
        return object;
      },
      _isBool(object) {
        return true === object || false === object;
      },
      _asBool(object) {
        if (true === object) return true;
        if (false === object) return false;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'bool'));
      },
      _asBoolS(object) {
        if (true === object) return true;
        if (false === object) return false;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'bool'));
      },
      _asBoolQ(object) {
        if (true === object) return true;
        if (false === object) return false;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'bool?'));
      },
      _asDouble(object) {
        if (typeof object == 'number') return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'double')
        );
      },
      _asDoubleS(object) {
        if (typeof object == 'number') return object;
        if (object == null) return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'double')
        );
      },
      _asDoubleQ(object) {
        if (typeof object == 'number') return object;
        if (object == null) return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'double?')
        );
      },
      _isInt(object) {
        return typeof object == 'number' && Math.floor(object) === object;
      },
      _asInt(object) {
        if (typeof object == 'number' && Math.floor(object) === object)
          return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'int'));
      },
      _asIntS(object) {
        if (typeof object == 'number' && Math.floor(object) === object)
          return object;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'int'));
      },
      _asIntQ(object) {
        if (typeof object == 'number' && Math.floor(object) === object)
          return object;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'int?'));
      },
      _isNum(object) {
        return typeof object == 'number';
      },
      _asNum(object) {
        if (typeof object == 'number') return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'num'));
      },
      _asNumS(object) {
        if (typeof object == 'number') return object;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'num'));
      },
      _asNumQ(object) {
        if (typeof object == 'number') return object;
        if (object == null) return object;
        throw H.wrapException(H._TypeError__TypeError$forType(object, 'num?'));
      },
      _isString(object) {
        return typeof object == 'string';
      },
      _asString(object) {
        if (typeof object == 'string') return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'String')
        );
      },
      _asStringS(object) {
        if (typeof object == 'string') return object;
        if (object == null) return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'String')
        );
      },
      _asStringQ(object) {
        if (typeof object == 'string') return object;
        if (object == null) return object;
        throw H.wrapException(
          H._TypeError__TypeError$forType(object, 'String?')
        );
      },
      _rtiArrayToString(array, genericContext) {
        var s, sep, i;
        for (s = '', sep = '', i = 0; i < array.length; ++i, sep = ', ')
          s += sep + H._rtiToString(array[i], genericContext);
        return s;
      },
      _functionRtiToString(functionType, genericContext, bounds) {
        var boundsLength,
          outerContextLength,
          offset,
          i,
          t1,
          t2,
          typeParametersText,
          typeSep,
          boundRti,
          kind,
          t3,
          parameters,
          requiredPositional,
          requiredPositionalLength,
          optionalPositional,
          optionalPositionalLength,
          named,
          namedLength,
          returnTypeText,
          argumentsText,
          sep,
          _s2_ = ', ';
        if (bounds != null) {
          boundsLength = bounds.length;
          if (genericContext == null) {
            genericContext = H._setArrayType([], type$.JSArray_String);
            outerContextLength = null;
          } else outerContextLength = genericContext.length;
          offset = genericContext.length;
          for (i = boundsLength; i > 0; --i)
            genericContext.push('T' + (offset + i));
          for (
            t1 = type$.nullable_Object,
              t2 = type$.legacy_Object,
              typeParametersText = '<',
              typeSep = '',
              i = 0;
            i < boundsLength;
            ++i, typeSep = _s2_
          ) {
            typeParametersText = C.JSString_methods.$add(
              typeParametersText + typeSep,
              genericContext[genericContext.length - 1 - i]
            );
            boundRti = bounds[i];
            kind = boundRti._kind;
            if (
              !(
                kind === 2 ||
                kind === 3 ||
                kind === 4 ||
                kind === 5 ||
                boundRti === t1
              )
            )
              if (!(boundRti === t2)) t3 = false;
              else t3 = true;
            else t3 = true;
            if (!t3)
              typeParametersText +=
                ' extends ' + H._rtiToString(boundRti, genericContext);
          }
          typeParametersText += '>';
        } else {
          typeParametersText = '';
          outerContextLength = null;
        }
        t1 = functionType._primary;
        parameters = functionType._rest;
        requiredPositional = parameters._requiredPositional;
        requiredPositionalLength = requiredPositional.length;
        optionalPositional = parameters._optionalPositional;
        optionalPositionalLength = optionalPositional.length;
        named = parameters._named;
        namedLength = named.length;
        returnTypeText = H._rtiToString(t1, genericContext);
        for (
          argumentsText = '', sep = '', i = 0;
          i < requiredPositionalLength;
          ++i, sep = _s2_
        )
          argumentsText +=
            sep + H._rtiToString(requiredPositional[i], genericContext);
        if (optionalPositionalLength > 0) {
          argumentsText += sep + '[';
          for (sep = '', i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
            argumentsText +=
              sep + H._rtiToString(optionalPositional[i], genericContext);
          argumentsText += ']';
        }
        if (namedLength > 0) {
          argumentsText += sep + '{';
          for (sep = '', i = 0; i < namedLength; i += 3, sep = _s2_) {
            argumentsText += sep;
            if (named[i + 1]) argumentsText += 'required ';
            argumentsText +=
              H._rtiToString(named[i + 2], genericContext) + ' ' + named[i];
          }
          argumentsText += '}';
        }
        if (outerContextLength != null) {
          genericContext.toString;
          genericContext.length = outerContextLength;
        }
        return (
          typeParametersText + '(' + argumentsText + ') => ' + returnTypeText
        );
      },
      _rtiToString(rti, genericContext) {
        var s,
          questionArgument,
          argumentKind,
          $name,
          $arguments,
          t1,
          kind = rti._kind;
        if (kind === 5) return 'erased';
        if (kind === 2) return 'dynamic';
        if (kind === 3) return 'void';
        if (kind === 1) return 'Never';
        if (kind === 4) return 'any';
        if (kind === 6) {
          s = H._rtiToString(rti._primary, genericContext);
          return s;
        }
        if (kind === 7) {
          questionArgument = rti._primary;
          s = H._rtiToString(questionArgument, genericContext);
          argumentKind = questionArgument._kind;
          return (
            (argumentKind === 11 || argumentKind === 12 ? '(' + s + ')' : s) +
            '?'
          );
        }
        if (kind === 8)
          return (
            'FutureOr<' + H._rtiToString(rti._primary, genericContext) + '>'
          );
        if (kind === 9) {
          $name = H._unminifyOrTag(rti._primary);
          $arguments = rti._rest;
          return $arguments.length > 0
            ? $name +
                ('<' + H._rtiArrayToString($arguments, genericContext) + '>')
            : $name;
        }
        if (kind === 11)
          return H._functionRtiToString(rti, genericContext, null);
        if (kind === 12)
          return H._functionRtiToString(
            rti._primary,
            genericContext,
            rti._rest
          );
        if (kind === 13) {
          t1 = rti._primary;
          return genericContext[genericContext.length - 1 - t1];
        }
        return '?';
      },
      _unminifyOrTag(rawClassName) {
        var preserved = init.mangledGlobalNames[rawClassName];
        if (preserved != null) return preserved;
        return rawClassName;
      },
      _Universe_findRule(universe, targetType) {
        var rule = universe.tR[targetType];
        for (; typeof rule == 'string'; ) rule = universe.tR[rule];
        return rule;
      },
      _Universe_findErasedType(universe, cls) {
        var $length,
          erased,
          $arguments,
          i,
          $interface,
          t1 = universe.eT,
          probe = t1[cls];
        if (probe == null) return H._Universe_eval(universe, cls, false);
        else if (typeof probe == 'number') {
          $length = probe;
          erased = H._Universe__lookupTerminalRti(universe, 5, '#');
          $arguments = H._Utils_newArrayOrEmpty($length);
          for (i = 0; i < $length; ++i) $arguments[i] = erased;
          $interface = H._Universe__lookupInterfaceRti(
            universe,
            cls,
            $arguments
          );
          t1[cls] = $interface;
          return $interface;
        } else return probe;
      },
      _Universe_addRules(universe, rules) {
        return H._Utils_objectAssign(universe.tR, rules);
      },
      _Universe_addErasedTypes(universe, types) {
        return H._Utils_objectAssign(universe.eT, types);
      },
      _Universe_eval(universe, recipe, normalize) {
        var rti,
          t1 = universe.eC,
          probe = t1.get(recipe);
        if (probe != null) return probe;
        rti = H._Parser_parse(
          H._Parser_create(universe, null, recipe, normalize)
        );
        t1.set(recipe, rti);
        return rti;
      },
      _Universe_evalInEnvironment(universe, environment, recipe) {
        var probe,
          rti,
          cache = environment._evalCache;
        if (cache == null) cache = environment._evalCache = new Map();
        probe = cache.get(recipe);
        if (probe != null) return probe;
        rti = H._Parser_parse(
          H._Parser_create(universe, environment, recipe, true)
        );
        cache.set(recipe, rti);
        return rti;
      },
      _Universe_bind(universe, environment, argumentsRti) {
        var argumentsRecipe,
          probe,
          rti,
          cache = environment._bindCache;
        if (cache == null) cache = environment._bindCache = new Map();
        argumentsRecipe = argumentsRti._canonicalRecipe;
        probe = cache.get(argumentsRecipe);
        if (probe != null) return probe;
        rti = H._Universe__lookupBindingRti(
          universe,
          environment,
          argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]
        );
        cache.set(argumentsRecipe, rti);
        return rti;
      },
      _Universe__installTypeTests(universe, rti) {
        rti._as = H._installSpecializedAsCheck;
        rti._is = H._installSpecializedIsTest;
        return rti;
      },
      _Universe__lookupTerminalRti(universe, kind, key) {
        var rti,
          t1,
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        rti = new H.Rti(null, null);
        rti._kind = kind;
        rti._canonicalRecipe = key;
        t1 = H._Universe__installTypeTests(universe, rti);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__lookupStarRti(universe, baseType, normalize) {
        var t1,
          key = baseType._canonicalRecipe + '*',
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__createStarRti(universe, baseType, key, normalize) {
        var baseKind, t1, rti;
        if (normalize) {
          baseKind = baseType._kind;
          if (!H.isStrongTopType(baseType))
            t1 =
              baseType === type$.Null ||
              baseType === type$.JSNull ||
              baseKind === 7 ||
              baseKind === 6;
          else t1 = true;
          if (t1) return baseType;
        }
        rti = new H.Rti(null, null);
        rti._kind = 6;
        rti._primary = baseType;
        rti._canonicalRecipe = key;
        return H._Universe__installTypeTests(universe, rti);
      },
      _Universe__lookupQuestionRti(universe, baseType, normalize) {
        var t1,
          key = baseType._canonicalRecipe + '?',
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__createQuestionRti(universe, baseType, key, normalize) {
        var baseKind, t1, starArgument, rti;
        if (normalize) {
          baseKind = baseType._kind;
          if (!H.isStrongTopType(baseType))
            if (!(baseType === type$.Null || baseType === type$.JSNull))
              if (baseKind !== 7)
                t1 = baseKind === 8 && H.isNullable(baseType._primary);
              else t1 = true;
            else t1 = true;
          else t1 = true;
          if (t1) return baseType;
          else if (baseKind === 1 || baseType === type$.legacy_Never)
            return type$.Null;
          else if (baseKind === 6) {
            starArgument = baseType._primary;
            if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
              return starArgument;
            else return H.Rti__getQuestionFromStar(universe, baseType);
          }
        }
        rti = new H.Rti(null, null);
        rti._kind = 7;
        rti._primary = baseType;
        rti._canonicalRecipe = key;
        return H._Universe__installTypeTests(universe, rti);
      },
      _Universe__lookupFutureOrRti(universe, baseType, normalize) {
        var t1,
          key = baseType._canonicalRecipe + '/',
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__createFutureOrRti(universe, baseType, key, normalize) {
        var t1, t2, rti;
        if (normalize) {
          t1 = baseType._kind;
          if (!H.isStrongTopType(baseType))
            if (!(baseType === type$.legacy_Object)) t2 = false;
            else t2 = true;
          else t2 = true;
          if (t2 || baseType === type$.Object) return baseType;
          else if (t1 === 1)
            return H._Universe__lookupInterfaceRti(universe, 'Future', [
              baseType,
            ]);
          else if (baseType === type$.Null || baseType === type$.JSNull)
            return type$.nullable_Future_Null;
        }
        rti = new H.Rti(null, null);
        rti._kind = 8;
        rti._primary = baseType;
        rti._canonicalRecipe = key;
        return H._Universe__installTypeTests(universe, rti);
      },
      _Universe__lookupGenericFunctionParameterRti(universe, index) {
        var rti,
          t1,
          key = '' + index + '^',
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        rti = new H.Rti(null, null);
        rti._kind = 13;
        rti._primary = index;
        rti._canonicalRecipe = key;
        t1 = H._Universe__installTypeTests(universe, rti);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__canonicalRecipeJoin($arguments) {
        var s,
          sep,
          i,
          $length = $arguments.length;
        for (s = '', sep = '', i = 0; i < $length; ++i, sep = ',')
          s += sep + $arguments[i]._canonicalRecipe;
        return s;
      },
      _Universe__canonicalRecipeJoinNamed($arguments) {
        var s,
          sep,
          i,
          t1,
          nameSep,
          s0,
          $length = $arguments.length;
        for (s = '', sep = '', i = 0; i < $length; i += 3, sep = ',') {
          t1 = $arguments[i];
          nameSep = $arguments[i + 1] ? '!' : ':';
          s0 = $arguments[i + 2]._canonicalRecipe;
          s += sep + t1 + nameSep + s0;
        }
        return s;
      },
      _Universe__lookupInterfaceRti(universe, $name, $arguments) {
        var probe,
          rti,
          t1,
          s = $name;
        if ($arguments.length > 0)
          s += '<' + H._Universe__canonicalRecipeJoin($arguments) + '>';
        probe = universe.eC.get(s);
        if (probe != null) return probe;
        rti = new H.Rti(null, null);
        rti._kind = 9;
        rti._primary = $name;
        rti._rest = $arguments;
        if ($arguments.length > 0) rti._precomputed1 = $arguments[0];
        rti._canonicalRecipe = s;
        t1 = H._Universe__installTypeTests(universe, rti);
        universe.eC.set(s, t1);
        return t1;
      },
      _Universe__lookupBindingRti(universe, base, $arguments) {
        var newBase, newArguments, key, probe, rti, t1;
        if (base._kind === 10) {
          newBase = base._primary;
          newArguments = base._rest.concat($arguments);
        } else {
          newArguments = $arguments;
          newBase = base;
        }
        key =
          newBase._canonicalRecipe +
          (';<' + H._Universe__canonicalRecipeJoin(newArguments) + '>');
        probe = universe.eC.get(key);
        if (probe != null) return probe;
        rti = new H.Rti(null, null);
        rti._kind = 10;
        rti._primary = newBase;
        rti._rest = newArguments;
        rti._canonicalRecipe = key;
        t1 = H._Universe__installTypeTests(universe, rti);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__lookupFunctionRti(universe, returnType, parameters) {
        var sep,
          t1,
          key,
          probe,
          rti,
          s = returnType._canonicalRecipe,
          requiredPositional = parameters._requiredPositional,
          requiredPositionalLength = requiredPositional.length,
          optionalPositional = parameters._optionalPositional,
          optionalPositionalLength = optionalPositional.length,
          named = parameters._named,
          namedLength = named.length,
          recipe = '(' + H._Universe__canonicalRecipeJoin(requiredPositional);
        if (optionalPositionalLength > 0) {
          sep = requiredPositionalLength > 0 ? ',' : '';
          t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
          recipe += sep + '[' + t1 + ']';
        }
        if (namedLength > 0) {
          sep = requiredPositionalLength > 0 ? ',' : '';
          t1 = H._Universe__canonicalRecipeJoinNamed(named);
          recipe += sep + '{' + t1 + '}';
        }
        key = s + (recipe + ')');
        probe = universe.eC.get(key);
        if (probe != null) return probe;
        rti = new H.Rti(null, null);
        rti._kind = 11;
        rti._primary = returnType;
        rti._rest = parameters;
        rti._canonicalRecipe = key;
        t1 = H._Universe__installTypeTests(universe, rti);
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__lookupGenericFunctionRti(
        universe,
        baseFunctionType,
        bounds,
        normalize
      ) {
        var t1,
          key =
            baseFunctionType._canonicalRecipe +
            ('<' + H._Universe__canonicalRecipeJoin(bounds) + '>'),
          probe = universe.eC.get(key);
        if (probe != null) return probe;
        t1 = H._Universe__createGenericFunctionRti(
          universe,
          baseFunctionType,
          bounds,
          key,
          normalize
        );
        universe.eC.set(key, t1);
        return t1;
      },
      _Universe__createGenericFunctionRti(
        universe,
        baseFunctionType,
        bounds,
        key,
        normalize
      ) {
        var $length,
          typeArguments,
          count,
          i,
          bound,
          substitutedBase,
          substitutedBounds,
          rti;
        if (normalize) {
          $length = bounds.length;
          typeArguments = H._Utils_newArrayOrEmpty($length);
          for (count = 0, i = 0; i < $length; ++i) {
            bound = bounds[i];
            if (bound._kind === 1) {
              typeArguments[i] = bound;
              ++count;
            }
          }
          if (count > 0) {
            substitutedBase = H._substitute(
              universe,
              baseFunctionType,
              typeArguments,
              0
            );
            substitutedBounds = H._substituteArray(
              universe,
              bounds,
              typeArguments,
              0
            );
            return H._Universe__lookupGenericFunctionRti(
              universe,
              substitutedBase,
              substitutedBounds,
              bounds !== substitutedBounds
            );
          }
        }
        rti = new H.Rti(null, null);
        rti._kind = 12;
        rti._primary = baseFunctionType;
        rti._rest = bounds;
        rti._canonicalRecipe = key;
        return H._Universe__installTypeTests(universe, rti);
      },
      _Parser_create(universe, environment, recipe, normalize) {
        return {
          u: universe,
          e: environment,
          r: recipe,
          s: [],
          p: 0,
          n: normalize,
        };
      },
      _Parser_parse(parser) {
        var t2,
          i,
          ch,
          t3,
          array,
          head,
          base,
          parameters,
          optionalPositional,
          named,
          item,
          source = parser.r,
          t1 = parser.s;
        for (t2 = source.length, i = 0; i < t2; ) {
          ch = source.charCodeAt(i);
          if (ch >= 48 && ch <= 57)
            i = H._Parser_handleDigit(i + 1, ch, source, t1);
          else if (
            ((((ch | 32) >>> 0) - 97) & 65535) < 26 ||
            ch === 95 ||
            ch === 36
          )
            i = H._Parser_handleIdentifier(parser, i, source, t1, false);
          else if (ch === 46)
            i = H._Parser_handleIdentifier(parser, i, source, t1, true);
          else {
            ++i;
            switch (ch) {
              case 44:
                break;
              case 58:
                t1.push(false);
                break;
              case 33:
                t1.push(true);
                break;
              case 59:
                t1.push(H._Parser_toType(parser.u, parser.e, t1.pop()));
                break;
              case 94:
                t1.push(
                  H._Universe__lookupGenericFunctionParameterRti(
                    parser.u,
                    t1.pop()
                  )
                );
                break;
              case 35:
                t1.push(H._Universe__lookupTerminalRti(parser.u, 5, '#'));
                break;
              case 64:
                t1.push(H._Universe__lookupTerminalRti(parser.u, 2, '@'));
                break;
              case 126:
                t1.push(H._Universe__lookupTerminalRti(parser.u, 3, '~'));
                break;
              case 60:
                t1.push(parser.p);
                parser.p = t1.length;
                break;
              case 62:
                t3 = parser.u;
                array = t1.splice(parser.p);
                H._Parser_toTypes(parser.u, parser.e, array);
                parser.p = t1.pop();
                head = t1.pop();
                if (typeof head == 'string')
                  t1.push(H._Universe__lookupInterfaceRti(t3, head, array));
                else {
                  base = H._Parser_toType(t3, parser.e, head);
                  switch (base._kind) {
                    case 11:
                      t1.push(
                        H._Universe__lookupGenericFunctionRti(
                          t3,
                          base,
                          array,
                          parser.n
                        )
                      );
                      break;
                    default:
                      t1.push(H._Universe__lookupBindingRti(t3, base, array));
                      break;
                  }
                }
                break;
              case 38:
                H._Parser_handleExtendedOperations(parser, t1);
                break;
              case 42:
                t3 = parser.u;
                t1.push(
                  H._Universe__lookupStarRti(
                    t3,
                    H._Parser_toType(t3, parser.e, t1.pop()),
                    parser.n
                  )
                );
                break;
              case 63:
                t3 = parser.u;
                t1.push(
                  H._Universe__lookupQuestionRti(
                    t3,
                    H._Parser_toType(t3, parser.e, t1.pop()),
                    parser.n
                  )
                );
                break;
              case 47:
                t3 = parser.u;
                t1.push(
                  H._Universe__lookupFutureOrRti(
                    t3,
                    H._Parser_toType(t3, parser.e, t1.pop()),
                    parser.n
                  )
                );
                break;
              case 40:
                t1.push(parser.p);
                parser.p = t1.length;
                break;
              case 41:
                t3 = parser.u;
                parameters = new H._FunctionParameters();
                optionalPositional = t3.sEA;
                named = t3.sEA;
                head = t1.pop();
                if (typeof head == 'number')
                  switch (head) {
                    case -1:
                      optionalPositional = t1.pop();
                      break;
                    case -2:
                      named = t1.pop();
                      break;
                    default:
                      t1.push(head);
                      break;
                  }
                else t1.push(head);
                array = t1.splice(parser.p);
                H._Parser_toTypes(parser.u, parser.e, array);
                parser.p = t1.pop();
                parameters._requiredPositional = array;
                parameters._optionalPositional = optionalPositional;
                parameters._named = named;
                t1.push(
                  H._Universe__lookupFunctionRti(
                    t3,
                    H._Parser_toType(t3, parser.e, t1.pop()),
                    parameters
                  )
                );
                break;
              case 91:
                t1.push(parser.p);
                parser.p = t1.length;
                break;
              case 93:
                array = t1.splice(parser.p);
                H._Parser_toTypes(parser.u, parser.e, array);
                parser.p = t1.pop();
                t1.push(array);
                t1.push(-1);
                break;
              case 123:
                t1.push(parser.p);
                parser.p = t1.length;
                break;
              case 125:
                array = t1.splice(parser.p);
                H._Parser_toTypesNamed(parser.u, parser.e, array);
                parser.p = t1.pop();
                t1.push(array);
                t1.push(-2);
                break;
              default:
                throw 'Bad character ' + ch;
            }
          }
        }
        item = t1.pop();
        return H._Parser_toType(parser.u, parser.e, item);
      },
      _Parser_handleDigit(i, digit, source, stack) {
        var t1,
          ch,
          value = digit - 48;
        for (t1 = source.length; i < t1; ++i) {
          ch = source.charCodeAt(i);
          if (!(ch >= 48 && ch <= 57)) break;
          value = value * 10 + (ch - 48);
        }
        stack.push(value);
        return i;
      },
      _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
        var t1,
          ch,
          t2,
          string,
          environment,
          recipe,
          i = start + 1;
        for (t1 = source.length; i < t1; ++i) {
          ch = source.charCodeAt(i);
          if (ch === 46) {
            if (hasPeriod) break;
            hasPeriod = true;
          } else {
            if (
              !(
                ((((ch | 32) >>> 0) - 97) & 65535) < 26 ||
                ch === 95 ||
                ch === 36
              )
            )
              t2 = ch >= 48 && ch <= 57;
            else t2 = true;
            if (!t2) break;
          }
        }
        string = source.substring(start, i);
        if (hasPeriod) {
          t1 = parser.u;
          environment = parser.e;
          if (environment._kind === 10) environment = environment._primary;
          recipe = H._Universe_findRule(t1, environment._primary)[string];
          if (recipe == null)
            H.throwExpression(
              'No "' +
                string +
                '" in "' +
                H.Rti__getCanonicalRecipe(environment) +
                '"'
            );
          stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
        } else stack.push(string);
        return i;
      },
      _Parser_handleExtendedOperations(parser, stack) {
        var $top = stack.pop();
        if (0 === $top) {
          stack.push(H._Universe__lookupTerminalRti(parser.u, 1, '0&'));
          return;
        }
        if (1 === $top) {
          stack.push(H._Universe__lookupTerminalRti(parser.u, 4, '1&'));
          return;
        }
        throw H.wrapException(
          P.AssertionError$('Unexpected extended operation ' + H.S($top))
        );
      },
      _Parser_toType(universe, environment, item) {
        if (typeof item == 'string')
          return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
        else if (typeof item == 'number')
          return H._Parser_indexToType(universe, environment, item);
        else return item;
      },
      _Parser_toTypes(universe, environment, items) {
        var i,
          $length = items.length;
        for (i = 0; i < $length; ++i)
          items[i] = H._Parser_toType(universe, environment, items[i]);
      },
      _Parser_toTypesNamed(universe, environment, items) {
        var i,
          $length = items.length;
        for (i = 2; i < $length; i += 3)
          items[i] = H._Parser_toType(universe, environment, items[i]);
      },
      _Parser_indexToType(universe, environment, index) {
        var typeArguments,
          len,
          kind = environment._kind;
        if (kind === 10) {
          if (index === 0) return environment._primary;
          typeArguments = environment._rest;
          len = typeArguments.length;
          if (index <= len) return typeArguments[index - 1];
          index -= len;
          environment = environment._primary;
          kind = environment._kind;
        } else if (index === 0) return environment;
        if (kind !== 9)
          throw H.wrapException(
            P.AssertionError$('Indexed base must be an interface type')
          );
        typeArguments = environment._rest;
        if (index <= typeArguments.length) return typeArguments[index - 1];
        throw H.wrapException(
          P.AssertionError$(
            'Bad index ' + index + ' for ' + environment.toString$0(0)
          )
        );
      },
      _isSubtype(universe, s, sEnv, t, tEnv) {
        var t1,
          sKind,
          leftTypeVariable,
          tKind,
          sBounds,
          tBounds,
          sLength,
          i,
          sBound,
          tBound;
        if (s === t) return true;
        if (!H.isStrongTopType(t))
          if (!(t === type$.legacy_Object)) t1 = false;
          else t1 = true;
        else t1 = true;
        if (t1) return true;
        sKind = s._kind;
        if (sKind === 4) return true;
        if (H.isStrongTopType(s)) return false;
        if (s._kind !== 1) t1 = false;
        else t1 = true;
        if (t1) return true;
        leftTypeVariable = sKind === 13;
        if (leftTypeVariable)
          if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
            return true;
        tKind = t._kind;
        t1 = s === type$.Null || s === type$.JSNull;
        if (t1) {
          if (tKind === 8)
            return H._isSubtype(universe, s, sEnv, t._primary, tEnv);
          return (
            t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6
          );
        }
        if (t === type$.Object) {
          if (sKind === 8)
            return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
          if (sKind === 6)
            return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
          return sKind !== 7;
        }
        if (sKind === 6)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (tKind === 6) {
          t1 = H.Rti__getQuestionFromStar(universe, t);
          return H._isSubtype(universe, s, sEnv, t1, tEnv);
        }
        if (sKind === 8) {
          if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv)) return false;
          return H._isSubtype(
            universe,
            H.Rti__getFutureFromFutureOr(universe, s),
            sEnv,
            t,
            tEnv
          );
        }
        if (sKind === 7) {
          t1 = H._isSubtype(universe, type$.Null, sEnv, t, tEnv);
          return t1 && H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        }
        if (tKind === 8) {
          if (H._isSubtype(universe, s, sEnv, t._primary, tEnv)) return true;
          return H._isSubtype(
            universe,
            s,
            sEnv,
            H.Rti__getFutureFromFutureOr(universe, t),
            tEnv
          );
        }
        if (tKind === 7) {
          t1 = H._isSubtype(universe, s, sEnv, type$.Null, tEnv);
          return t1 || H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        }
        if (leftTypeVariable) return false;
        t1 = sKind !== 11;
        if ((!t1 || sKind === 12) && t === type$.Function) return true;
        if (tKind === 12) {
          if (s === type$.JavaScriptFunction) return true;
          if (sKind !== 12) return false;
          sBounds = s._rest;
          tBounds = t._rest;
          sLength = sBounds.length;
          if (sLength !== tBounds.length) return false;
          sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
          tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
          for (i = 0; i < sLength; ++i) {
            sBound = sBounds[i];
            tBound = tBounds[i];
            if (
              !H._isSubtype(universe, sBound, sEnv, tBound, tEnv) ||
              !H._isSubtype(universe, tBound, tEnv, sBound, sEnv)
            )
              return false;
          }
          return H._isFunctionSubtype(
            universe,
            s._primary,
            sEnv,
            t._primary,
            tEnv
          );
        }
        if (tKind === 11) {
          if (s === type$.JavaScriptFunction) return true;
          if (t1) return false;
          return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
        }
        if (sKind === 9) {
          if (tKind !== 9) return false;
          return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
        }
        return false;
      },
      _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
        var sParameters,
          tParameters,
          sRequiredPositional,
          tRequiredPositional,
          sRequiredPositionalLength,
          tRequiredPositionalLength,
          requiredPositionalDelta,
          sOptionalPositional,
          tOptionalPositional,
          sOptionalPositionalLength,
          tOptionalPositionalLength,
          i,
          t1,
          sNamed,
          tNamed,
          sNamedLength,
          tNamedLength,
          sIndex,
          tIndex,
          tName,
          sName,
          sIsRequired;
        if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
          return false;
        sParameters = s._rest;
        tParameters = t._rest;
        sRequiredPositional = sParameters._requiredPositional;
        tRequiredPositional = tParameters._requiredPositional;
        sRequiredPositionalLength = sRequiredPositional.length;
        tRequiredPositionalLength = tRequiredPositional.length;
        if (sRequiredPositionalLength > tRequiredPositionalLength) return false;
        requiredPositionalDelta =
          tRequiredPositionalLength - sRequiredPositionalLength;
        sOptionalPositional = sParameters._optionalPositional;
        tOptionalPositional = tParameters._optionalPositional;
        sOptionalPositionalLength = sOptionalPositional.length;
        tOptionalPositionalLength = tOptionalPositional.length;
        if (
          sRequiredPositionalLength + sOptionalPositionalLength <
          tRequiredPositionalLength + tOptionalPositionalLength
        )
          return false;
        for (i = 0; i < sRequiredPositionalLength; ++i) {
          t1 = sRequiredPositional[i];
          if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
            return false;
        }
        for (i = 0; i < requiredPositionalDelta; ++i) {
          t1 = sOptionalPositional[i];
          if (
            !H._isSubtype(
              universe,
              tRequiredPositional[sRequiredPositionalLength + i],
              tEnv,
              t1,
              sEnv
            )
          )
            return false;
        }
        for (i = 0; i < tOptionalPositionalLength; ++i) {
          t1 = sOptionalPositional[requiredPositionalDelta + i];
          if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
            return false;
        }
        sNamed = sParameters._named;
        tNamed = tParameters._named;
        sNamedLength = sNamed.length;
        tNamedLength = tNamed.length;
        for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
          tName = tNamed[tIndex];
          for (; true; ) {
            if (sIndex >= sNamedLength) return false;
            sName = sNamed[sIndex];
            sIndex += 3;
            if (tName < sName) return false;
            sIsRequired = sNamed[sIndex - 2];
            if (sName < tName) {
              if (sIsRequired) return false;
              continue;
            }
            t1 = tNamed[tIndex + 1];
            if (sIsRequired && !t1) return false;
            t1 = sNamed[sIndex - 1];
            if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
              return false;
            break;
          }
        }
        for (; sIndex < sNamedLength; ) {
          if (sNamed[sIndex + 1]) return false;
          sIndex += 3;
        }
        return true;
      },
      _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
        var rule,
          recipes,
          $length,
          supertypeArgs,
          i,
          t1,
          t2,
          sName = s._primary,
          tName = t._primary;
        for (; sName !== tName; ) {
          rule = universe.tR[sName];
          if (rule == null) return false;
          if (typeof rule == 'string') {
            sName = rule;
            continue;
          }
          recipes = rule[tName];
          if (recipes == null) return false;
          $length = recipes.length;
          supertypeArgs =
            $length > 0 ? new Array($length) : init.typeUniverse.sEA;
          for (i = 0; i < $length; ++i)
            supertypeArgs[i] = H._Universe_evalInEnvironment(
              universe,
              s,
              recipes[i]
            );
          return H._areArgumentsSubtypes(
            universe,
            supertypeArgs,
            null,
            sEnv,
            t._rest,
            tEnv
          );
        }
        t1 = s._rest;
        t2 = t._rest;
        return H._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
      },
      _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
        var i,
          t1,
          t2,
          $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv)) return false;
        }
        return true;
      },
      isNullable(t) {
        var t1,
          kind = t._kind;
        if (!(t === type$.Null || t === type$.JSNull))
          if (!H.isStrongTopType(t))
            if (kind !== 7)
              if (!(kind === 6 && H.isNullable(t._primary)))
                t1 = kind === 8 && H.isNullable(t._primary);
              else t1 = true;
            else t1 = true;
          else t1 = true;
        else t1 = true;
        return t1;
      },
      isTopType(t) {
        var t1;
        if (!H.isStrongTopType(t))
          if (!(t === type$.legacy_Object)) t1 = false;
          else t1 = true;
        else t1 = true;
        return t1;
      },
      isStrongTopType(t) {
        var kind = t._kind;
        return (
          kind === 2 ||
          kind === 3 ||
          kind === 4 ||
          kind === 5 ||
          t === type$.nullable_Object
        );
      },
      _Utils_objectAssign(o, other) {
        var i,
          key,
          keys = Object.keys(other),
          $length = keys.length;
        for (i = 0; i < $length; ++i) {
          key = keys[i];
          o[key] = other[key];
        }
      },
      _Utils_newArrayOrEmpty($length) {
        return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
      },
      Rti: function Rti(t0, t1) {
        var _ = this;
        _._as = t0;
        _._is = t1;
        _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
        _._kind = 0;
        _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
      },
      _FunctionParameters: function _FunctionParameters() {
        this._named = this._optionalPositional = this._requiredPositional = null;
      },
      _Type: function _Type(t0) {
        this._rti = t0;
      },
      _Error: function _Error() {},
      _TypeError: function _TypeError(t0) {
        this.__rti$_message = t0;
      },
      printString(string) {
        if (typeof dartPrint == 'function') {
          dartPrint(string);
          return;
        }
        if (typeof console == 'object' && typeof console.log != 'undefined') {
          console.log(string);
          return;
        }
        if (typeof window == 'object') return;
        if (typeof print == 'function') {
          print(string);
          return;
        }
        throw 'Unable to print message: ' + String(string);
      },
    },
    J = {
      makeDispatchRecord(interceptor, proto, extension, indexability) {
        return { i: interceptor, p: proto, e: extension, x: indexability };
      },
      getNativeInterceptor(object) {
        var proto,
          objectProto,
          $constructor,
          interceptor,
          t1,
          record = object[init.dispatchPropertyName];
        if (record == null)
          if ($.initNativeDispatchFlag == null) {
            H.initNativeDispatch();
            record = object[init.dispatchPropertyName];
          }
        if (record != null) {
          proto = record.p;
          if (false === proto) return record.i;
          if (true === proto) return object;
          objectProto = Object.getPrototypeOf(object);
          if (proto === objectProto) return record.i;
          if (record.e === objectProto)
            throw H.wrapException(
              P.UnimplementedError$(
                'Return interceptor for ' + H.S(proto(object, record))
              )
            );
        }
        $constructor = object.constructor;
        if ($constructor == null) interceptor = null;
        else {
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
          if (t1 == null)
            t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag(
              '_$dart_js'
            );
          interceptor = $constructor[t1];
        }
        if (interceptor != null) return interceptor;
        interceptor = H.lookupAndCacheInterceptor(object);
        if (interceptor != null) return interceptor;
        if (typeof object == 'function') return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null) return C.PlainJavaScriptObject_methods;
        if (proto === Object.prototype) return C.PlainJavaScriptObject_methods;
        if (typeof $constructor == 'function') {
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
          if (t1 == null)
            t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag(
              '_$dart_js'
            );
          Object.defineProperty($constructor, t1, {
            value: C.UnknownJavaScriptObject_methods,
            enumerable: false,
            writable: true,
            configurable: true,
          });
          return C.UnknownJavaScriptObject_methods;
        }
        return C.UnknownJavaScriptObject_methods;
      },
      JSArray_JSArray$fixed($length, $E) {
        if ($length < 0 || $length > 4294967295)
          throw H.wrapException(
            P.RangeError$range($length, 0, 4294967295, 'length', null)
          );
        return J.JSArray_JSArray$markFixed(new Array($length), $E);
      },
      JSArray_JSArray$allocateFixed($length, $E) {
        if ($length > 4294967295)
          throw H.wrapException(
            P.RangeError$range($length, 0, 4294967295, 'length', null)
          );
        return J.JSArray_JSArray$markFixed(new Array($length), $E);
      },
      JSArray_JSArray$growable($length, $E) {
        if ($length < 0)
          throw H.wrapException(
            P.ArgumentError$(
              'Length must be a non-negative integer: ' + $length,
              null
            )
          );
        return H._setArrayType(new Array($length), $E._eval$1('JSArray<0>'));
      },
      JSArray_JSArray$allocateGrowable($length, $E) {
        if ($length < 0)
          throw H.wrapException(
            P.ArgumentError$(
              'Length must be a non-negative integer: ' + $length,
              null
            )
          );
        return H._setArrayType(new Array($length), $E._eval$1('JSArray<0>'));
      },
      JSArray_JSArray$markFixed(allocation, $E) {
        return J.JSArray_markFixedList(
          H._setArrayType(allocation, $E._eval$1('JSArray<0>'))
        );
      },
      JSArray_markFixedList(list) {
        list.fixed$length = Array;
        return list;
      },
      JSArray_markUnmodifiableList(list) {
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      JSArray__compareAny(a, b) {
        return J.compareTo$1$ns(a, b);
      },
      JSString__isWhitespace(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      },
      JSString__skipLeadingWhitespace(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1; ) {
          codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
          if (
            codeUnit !== 32 &&
            codeUnit !== 13 &&
            !J.JSString__isWhitespace(codeUnit)
          )
            break;
          ++index;
        }
        return index;
      },
      JSString__skipTrailingWhitespace(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (
            codeUnit !== 32 &&
            codeUnit !== 13 &&
            !J.JSString__isWhitespace(codeUnit)
          )
            break;
        }
        return index;
      },
      getInterceptor$(receiver) {
        if (typeof receiver == 'number') {
          if (Math.floor(receiver) == receiver) return J.JSInt.prototype;
          return J.JSNumNotInt.prototype;
        }
        if (typeof receiver == 'string') return J.JSString.prototype;
        if (receiver == null) return J.JSNull.prototype;
        if (typeof receiver == 'boolean') return J.JSBool.prototype;
        if (receiver.constructor == Array) return J.JSArray.prototype;
        if (typeof receiver != 'object') {
          if (typeof receiver == 'function')
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object) return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$ansx(receiver) {
        if (typeof receiver == 'number') return J.JSNumber.prototype;
        if (typeof receiver == 'string') return J.JSString.prototype;
        if (receiver == null) return receiver;
        if (receiver.constructor == Array) return J.JSArray.prototype;
        if (typeof receiver != 'object') {
          if (typeof receiver == 'function')
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object) return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$asx(receiver) {
        if (typeof receiver == 'string') return J.JSString.prototype;
        if (receiver == null) return receiver;
        if (receiver.constructor == Array) return J.JSArray.prototype;
        if (typeof receiver != 'object') {
          if (typeof receiver == 'function')
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object) return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$ax(receiver) {
        if (receiver == null) return receiver;
        if (receiver.constructor == Array) return J.JSArray.prototype;
        if (typeof receiver != 'object') {
          if (typeof receiver == 'function')
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object) return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$n(receiver) {
        if (typeof receiver == 'number') return J.JSNumber.prototype;
        if (receiver == null) return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$ns(receiver) {
        if (typeof receiver == 'number') return J.JSNumber.prototype;
        if (typeof receiver == 'string') return J.JSString.prototype;
        if (receiver == null) return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$s(receiver) {
        if (typeof receiver == 'string') return J.JSString.prototype;
        if (receiver == null) return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$u(receiver) {
        if (receiver == null) return J.JSNull.prototype;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$x(receiver) {
        if (receiver == null) return receiver;
        if (typeof receiver != 'object') {
          if (typeof receiver == 'function')
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object) return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$z(receiver) {
        if (receiver == null) return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      set$FALSE$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$FALSE(receiver, value);
      },
      set$NULL$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$NULL(receiver, value);
      },
      set$TRUE$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$TRUE(receiver, value);
      },
      set$cli_pkg_main_0_$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$cli_pkg_main_0_(
          receiver,
          value
        );
      },
      set$context$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$context(receiver, value);
      },
      set$dartValue$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$dartValue(receiver, value);
      },
      set$exitCode$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$exitCode(receiver, value);
      },
      set$info$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$info(receiver, value);
      },
      set$length$asx(receiver, value) {
        return J.getInterceptor$asx(receiver).set$length(receiver, value);
      },
      set$render$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$render(receiver, value);
      },
      set$types$x(receiver, value) {
        return J.getInterceptor$x(receiver).set$types(receiver, value);
      },
      get$code$x(receiver) {
        return J.getInterceptor$x(receiver).get$code(receiver);
      },
      get$dartValue$x(receiver) {
        return J.getInterceptor$x(receiver).get$dartValue(receiver);
      },
      get$end$z(receiver) {
        return J.getInterceptor$z(receiver).get$end(receiver);
      },
      get$env$x(receiver) {
        return J.getInterceptor$x(receiver).get$env(receiver);
      },
      get$exitCode$x(receiver) {
        return J.getInterceptor$x(receiver).get$exitCode(receiver);
      },
      get$file$x(receiver) {
        return J.getInterceptor$x(receiver).get$file(receiver);
      },
      get$first$ax(receiver) {
        return J.getInterceptor$ax(receiver).get$first(receiver);
      },
      get$functions$x(receiver) {
        return J.getInterceptor$x(receiver).get$functions(receiver);
      },
      get$hashCode$(receiver) {
        return J.getInterceptor$(receiver).get$hashCode(receiver);
      },
      get$isEmpty$asx(receiver) {
        return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
      },
      get$isNotEmpty$asx(receiver) {
        return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
      },
      get$isTTY$x(receiver) {
        return J.getInterceptor$x(receiver).get$isTTY(receiver);
      },
      get$iterator$ax(receiver) {
        return J.getInterceptor$ax(receiver).get$iterator(receiver);
      },
      get$keys$z(receiver) {
        return J.getInterceptor$z(receiver).get$keys(receiver);
      },
      get$last$ax(receiver) {
        return J.getInterceptor$ax(receiver).get$last(receiver);
      },
      get$length$asx(receiver) {
        return J.getInterceptor$asx(receiver).get$length(receiver);
      },
      get$message$x(receiver) {
        return J.getInterceptor$x(receiver).get$message(receiver);
      },
      get$mtime$x(receiver) {
        return J.getInterceptor$x(receiver).get$mtime(receiver);
      },
      get$name$x(receiver) {
        return J.getInterceptor$x(receiver).get$name(receiver);
      },
      get$options$x(receiver) {
        return J.getInterceptor$x(receiver).get$options(receiver);
      },
      get$parent$z(receiver) {
        return J.getInterceptor$z(receiver).get$parent(receiver);
      },
      get$path$x(receiver) {
        return J.getInterceptor$x(receiver).get$path(receiver);
      },
      get$platform$x(receiver) {
        return J.getInterceptor$x(receiver).get$platform(receiver);
      },
      get$reversed$ax(receiver) {
        return J.getInterceptor$ax(receiver).get$reversed(receiver);
      },
      get$runtimeType$u(receiver) {
        return J.getInterceptor$u(receiver).get$runtimeType(receiver);
      },
      get$single$ax(receiver) {
        return J.getInterceptor$ax(receiver).get$single(receiver);
      },
      get$stderr$x(receiver) {
        return J.getInterceptor$x(receiver).get$stderr(receiver);
      },
      get$stdin$x(receiver) {
        return J.getInterceptor$x(receiver).get$stdin(receiver);
      },
      get$values$z(receiver) {
        return J.getInterceptor$z(receiver).get$values(receiver);
      },
      $add$ansx(receiver, a0) {
        if (typeof receiver == 'number' && typeof a0 == 'number')
          return receiver + a0;
        return J.getInterceptor$ansx(receiver).$add(receiver, a0);
      },
      $eq$(receiver, a0) {
        if (receiver == null) return a0 == null;
        if (typeof receiver != 'object') return a0 != null && receiver === a0;
        return J.getInterceptor$(receiver).$eq(receiver, a0);
      },
      $index$asx(receiver, a0) {
        if (typeof a0 === 'number')
          if (
            receiver.constructor == Array ||
            typeof receiver == 'string' ||
            H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])
          )
            if (a0 >>> 0 === a0 && a0 < receiver.length) return receiver[a0];
        return J.getInterceptor$asx(receiver).$index(receiver, a0);
      },
      $indexSet$ax(receiver, a0, a1) {
        if (typeof a0 === 'number')
          if (
            (receiver.constructor == Array ||
              H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) &&
            !receiver.immutable$list &&
            a0 >>> 0 === a0 &&
            a0 < receiver.length
          )
            return (receiver[a0] = a1);
        return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
      },
      add$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).add$1(receiver, a0);
      },
      addAll$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
      },
      allMatches$1$s(receiver, a0) {
        return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
      },
      allMatches$2$s(receiver, a0, a1) {
        return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
      },
      any$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).any$1(receiver, a0);
      },
      apply$2$x(receiver, a0, a1) {
        return J.getInterceptor$x(receiver).apply$2(receiver, a0, a1);
      },
      cast$1$0$ax(receiver, $T1) {
        return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
      },
      close$0$x(receiver) {
        return J.getInterceptor$x(receiver).close$0(receiver);
      },
      codeUnitAt$1$s(receiver, a0) {
        return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
      },
      compareTo$1$ns(receiver, a0) {
        return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
      },
      contains$1$asx(receiver, a0) {
        return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
      },
      createInterface$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).createInterface$1(receiver, a0);
      },
      elementAt$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
      },
      endsWith$1$s(receiver, a0) {
        return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
      },
      every$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).every$1(receiver, a0);
      },
      existsSync$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).existsSync$1(receiver, a0);
      },
      expand$1$1$ax(receiver, a0, $T1) {
        return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
      },
      fillRange$3$ax(receiver, a0, a1, a2) {
        return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
      },
      fold$2$ax(receiver, a0, a1) {
        return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
      },
      getRange$2$ax(receiver, a0, a1) {
        return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
      },
      getTime$0$x(receiver) {
        return J.getInterceptor$x(receiver).getTime$0(receiver);
      },
      isDirectory$0$x(receiver) {
        return J.getInterceptor$x(receiver).isDirectory$0(receiver);
      },
      isFile$0$x(receiver) {
        return J.getInterceptor$x(receiver).isFile$0(receiver);
      },
      join$0$ax(receiver) {
        return J.getInterceptor$ax(receiver).join$0(receiver);
      },
      join$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).join$1(receiver, a0);
      },
      map$1$1$ax(receiver, a0, $T1) {
        return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
      },
      matchAsPrefix$2$s(receiver, a0, a1) {
        return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
      },
      mkdirSync$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).mkdirSync$1(receiver, a0);
      },
      noSuchMethod$1$(receiver, a0) {
        return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
      },
      on$2$x(receiver, a0, a1) {
        return J.getInterceptor$x(receiver).on$2(receiver, a0, a1);
      },
      readFileSync$2$x(receiver, a0, a1) {
        return J.getInterceptor$x(receiver).readFileSync$2(receiver, a0, a1);
      },
      readdirSync$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).readdirSync$1(receiver, a0);
      },
      remove$1$z(receiver, a0) {
        return J.getInterceptor$z(receiver).remove$1(receiver, a0);
      },
      setRange$4$ax(receiver, a0, a1, a2, a3) {
        return J.getInterceptor$ax(receiver).setRange$4(
          receiver,
          a0,
          a1,
          a2,
          a3
        );
      },
      skip$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
      },
      sort$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
      },
      startsWith$1$s(receiver, a0) {
        return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
      },
      statSync$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).statSync$1(receiver, a0);
      },
      substring$1$s(receiver, a0) {
        return J.getInterceptor$s(receiver).substring$1(receiver, a0);
      },
      substring$2$s(receiver, a0, a1) {
        return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
      },
      take$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).take$1(receiver, a0);
      },
      then$1$1$z(receiver, a0, $T1) {
        return J.getInterceptor$z(receiver).then$1$1(receiver, a0, $T1);
      },
      toList$0$ax(receiver) {
        return J.getInterceptor$ax(receiver).toList$0(receiver);
      },
      toList$1$growable$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
      },
      toRadixString$1$n(receiver, a0) {
        return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
      },
      toSet$0$ax(receiver) {
        return J.getInterceptor$ax(receiver).toSet$0(receiver);
      },
      toString$0$(receiver) {
        return J.getInterceptor$(receiver).toString$0(receiver);
      },
      toString$1$color$(receiver, a0) {
        return J.getInterceptor$(receiver).toString$1$color(receiver, a0);
      },
      trim$0$s(receiver) {
        return J.getInterceptor$s(receiver).trim$0(receiver);
      },
      unlinkSync$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).unlinkSync$1(receiver, a0);
      },
      where$1$ax(receiver, a0) {
        return J.getInterceptor$ax(receiver).where$1(receiver, a0);
      },
      write$1$x(receiver, a0) {
        return J.getInterceptor$x(receiver).write$1(receiver, a0);
      },
      writeFileSync$2$x(receiver, a0, a1) {
        return J.getInterceptor$x(receiver).writeFileSync$2(receiver, a0, a1);
      },
      Interceptor: function Interceptor() {},
      JSBool: function JSBool() {},
      JSNull: function JSNull() {},
      JavaScriptObject: function JavaScriptObject() {},
      PlainJavaScriptObject: function PlainJavaScriptObject() {},
      UnknownJavaScriptObject: function UnknownJavaScriptObject() {},
      JavaScriptFunction: function JavaScriptFunction() {},
      JSArray: function JSArray(t0) {
        this.$ti = t0;
      },
      JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
        this.$ti = t0;
      },
      ArrayIterator: function ArrayIterator(t0, t1) {
        var _ = this;
        _._iterable = t0;
        _._length = t1;
        _._index = 0;
        _._current = null;
      },
      JSNumber: function JSNumber() {},
      JSInt: function JSInt() {},
      JSNumNotInt: function JSNumNotInt() {},
      JSString: function JSString() {},
    },
    K = {
      PathMap__create(context, $V) {
        var t1 = {};
        t1.context = context;
        t1.context = $.$get$context();
        return P.LinkedHashMap_LinkedHashMap(
          new K.PathMap__create_closure(t1),
          new K.PathMap__create_closure0(t1),
          new K.PathMap__create_closure1(),
          type$.nullable_String,
          $V
        );
      },
      PathMap: function PathMap(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      PathMap__create_closure: function PathMap__create_closure(t0) {
        this._box_0 = t0;
      },
      PathMap__create_closure0: function PathMap__create_closure0(t0) {
        this._box_0 = t0;
      },
      PathMap__create_closure1: function PathMap__create_closure1() {},
      ColorExpression: function ColorExpression(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      _updateComponents($arguments, adjust, change, scale) {
        var keywords,
          alpha,
          red,
          green,
          blue,
          hueNumber,
          t2,
          hue,
          saturation,
          lightness,
          whiteness,
          blackness,
          hasRgb,
          hasSL,
          hasWB,
          t3,
          t4,
          t5,
          _null = null,
          t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color'),
          argumentList = type$.SassArgumentList._as(t1.$index($arguments, 1));
        if (argumentList._list$_contents.length !== 0)
          throw H.wrapException(E.SassScriptException$(string$.Only_op));
        argumentList._wereKeywordsAccessed = true;
        keywords = P.LinkedHashMap_LinkedHashMap$of(
          argumentList._keywords,
          type$.String,
          type$.Value
        );
        t1 = new K._updateComponents_getParam(keywords, scale, change);
        alpha = t1.call$2('alpha', 1);
        red = t1.call$2('red', 255);
        green = t1.call$2('green', 255);
        blue = t1.call$2('blue', 255);
        if (scale) hueNumber = _null;
        else {
          t2 = keywords.remove$1(0, 'hue');
          hueNumber = t2 == null ? _null : t2.assertNumber$1('hue');
        }
        t2 = hueNumber == null;
        if (!t2) K._checkAngle(hueNumber, 'hue');
        hue = t2 ? _null : hueNumber.value;
        saturation = t1.call$3$checkPercent('saturation', 100, true);
        lightness = t1.call$3$checkPercent('lightness', 100, true);
        whiteness = t1.call$3$assertPercent('whiteness', 100, true);
        blackness = t1.call$3$assertPercent('blackness', 100, true);
        if (keywords.get$isNotEmpty(keywords))
          throw H.wrapException(
            E.SassScriptException$(
              'No ' +
                B.pluralize('argument', keywords.get$length(keywords), _null) +
                ' named ' +
                H.S(
                  B.toSentence(
                    keywords
                      .get$keys(keywords)
                      .map$1$1(
                        0,
                        new K._updateComponents_closure(),
                        type$.Object
                      ),
                    'or'
                  )
                ) +
                '.'
            )
          );
        hasRgb = red != null || green != null || blue != null;
        hasSL = saturation != null || lightness != null;
        hasWB = whiteness != null || blackness != null;
        if (hasRgb) t1 = hasSL || hasWB || hue != null;
        else t1 = false;
        if (t1)
          throw H.wrapException(
            E.SassScriptException$(
              string$.RGB_pa + (hasWB ? 'HWB' : 'HSL') + ' parameters.'
            )
          );
        if (hasSL && hasWB)
          throw H.wrapException(E.SassScriptException$(string$.HSL_pa));
        t1 = new K._updateComponents_updateValue(change, adjust);
        t2 = new K._updateComponents_updateRgb(t1);
        if (hasRgb) {
          t3 = t2.call$2(color.get$red(), red);
          t4 = t2.call$2(color.get$green(), green);
          t2 = t2.call$2(color.get$blue(), blue);
          return color.changeRgb$4$alpha$blue$green$red(
            t1.call$3(color.alpha, alpha, 1),
            t2,
            t4,
            t3
          );
        } else if (hasWB) {
          if (change) t2 = hue;
          else {
            t2 = color.get$hue();
            t2 += hue == null ? 0 : hue;
          }
          t3 = t1.call$3(color.get$whiteness(), whiteness, 100);
          t4 = t1.call$3(color.get$blackness(), blackness, 100);
          t5 = color.alpha;
          t1 = t1.call$3(t5, alpha, 1);
          if (t2 == null) t2 = color.get$hue();
          if (t3 == null) t3 = color.get$whiteness();
          if (t4 == null) t4 = color.get$blackness();
          return K.SassColor_SassColor$hwb(t2, t3, t4, t1 == null ? t5 : t1);
        } else {
          t2 = hue == null;
          if (!t2 || hasSL) {
            if (change) t2 = hue;
            else {
              t3 = color.get$hue();
              t3 += t2 ? 0 : hue;
              t2 = t3;
            }
            t3 = t1.call$3(color.get$saturation(), saturation, 100);
            t4 = t1.call$3(color.get$lightness(), lightness, 100);
            return color.changeHsl$4$alpha$hue$lightness$saturation(
              t1.call$3(color.alpha, alpha, 1),
              t2,
              t4,
              t3
            );
          } else if (alpha != null)
            return color.changeAlpha$1(t1.call$3(color.alpha, alpha, 1));
          else return color;
        }
      },
      _functionString($name, $arguments) {
        return new D.SassString(
          $name +
            '(' +
            J.map$1$1$ax(
              $arguments,
              new K._functionString_closure(),
              type$.String
            ).join$1(0, ', ') +
            ')',
          false
        );
      },
      _removedColorFunction($name, argument, negative) {
        return Q.BuiltInCallable$function(
          $name,
          '$color, $amount',
          new K._removedColorFunction_closure($name, argument, negative),
          'sass:color'
        );
      },
      _rgb($name, $arguments) {
        var t2,
          red,
          green,
          blue,
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
        if (!t1.$index($arguments, 0).get$isSpecialNumber())
          if (!t1.$index($arguments, 1).get$isSpecialNumber())
            if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
              t2 = alpha == null ? null : alpha.get$isSpecialNumber();
              t2 = t2 === true;
            } else t2 = true;
          else t2 = true;
        else t2 = true;
        if (t2) return K._functionString($name, $arguments);
        red = t1.$index($arguments, 0).assertNumber$1('red');
        green = t1.$index($arguments, 1).assertNumber$1('green');
        blue = t1.$index($arguments, 2).assertNumber$1('blue');
        return K.SassColor$rgb(
          T.fuzzyRound(K._percentageOrUnitless(red, 255, 'red')),
          T.fuzzyRound(K._percentageOrUnitless(green, 255, 'green')),
          T.fuzzyRound(K._percentageOrUnitless(blue, 255, 'blue')),
          X.NullableExtension_andThen(alpha, new K._rgb_closure()),
          null
        );
      },
      _rgbTwoArg($name, $arguments) {
        var first,
          color,
          t1 = J.getInterceptor$asx($arguments);
        if (t1.$index($arguments, 0).get$isVar())
          return K._functionString($name, $arguments);
        else if (t1.$index($arguments, 1).get$isVar()) {
          first = t1.$index($arguments, 0);
          if (first instanceof K.SassColor)
            return new D.SassString(
              $name +
                '(' +
                first.get$red() +
                ', ' +
                first.get$green() +
                ', ' +
                first.get$blue() +
                ', ' +
                N.serializeValue0(t1.$index($arguments, 1), false, true) +
                ')',
              false
            );
          else return K._functionString($name, $arguments);
        } else if (t1.$index($arguments, 1).get$isSpecialNumber()) {
          color = t1.$index($arguments, 0).assertColor$1('color');
          return new D.SassString(
            $name +
              '(' +
              color.get$red() +
              ', ' +
              color.get$green() +
              ', ' +
              color.get$blue() +
              ', ' +
              N.serializeValue0(t1.$index($arguments, 1), false, true) +
              ')',
            false
          );
        }
        return t1
          .$index($arguments, 0)
          .assertColor$1('color')
          .changeAlpha$1(
            K._percentageOrUnitless(
              t1.$index($arguments, 1).assertNumber$1('alpha'),
              1,
              'alpha'
            )
          );
      },
      _hsl($name, $arguments) {
        var t2,
          hue,
          saturation,
          lightness,
          _s10_ = 'saturation',
          _s9_ = 'lightness',
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
        if (!t1.$index($arguments, 0).get$isSpecialNumber())
          if (!t1.$index($arguments, 1).get$isSpecialNumber())
            if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
              t2 = alpha == null ? null : alpha.get$isSpecialNumber();
              t2 = t2 === true;
            } else t2 = true;
          else t2 = true;
        else t2 = true;
        if (t2) return K._functionString($name, $arguments);
        hue = t1.$index($arguments, 0).assertNumber$1('hue');
        saturation = t1.$index($arguments, 1).assertNumber$1(_s10_);
        lightness = t1.$index($arguments, 2).assertNumber$1(_s9_);
        K._checkAngle(hue, 'hue');
        K._checkPercent(saturation, _s10_);
        K._checkPercent(lightness, _s9_);
        return K.SassColor$hsl(
          hue.value,
          C.JSNumber_methods.clamp$2(saturation.value, 0, 100),
          C.JSNumber_methods.clamp$2(lightness.value, 0, 100),
          X.NullableExtension_andThen(alpha, new K._hsl_closure())
        );
      },
      _checkAngle(angle, $name) {
        var t1,
          t2,
          t3,
          actualUnit,
          _s31_ = 'To preserve current behavior: $';
        if (!angle.get$hasUnits() || angle.hasUnit$1('deg')) return;
        t1 =
          '' +
          ('$' +
            H.S($name) +
            ': Passing a unit other than deg (' +
            angle.toString$0(0) +
            ') is deprecated.\n') +
          '\n';
        if (angle.compatibleWithUnit$1('deg')) {
          t2 = "You're passing " + angle.toString$0(0) + string$.x2c_whici;
          t3 = type$.JSArray_String;
          t3 =
            t1 +
            (t2 +
              new L.SingleUnitSassNumber('deg', angle.value, null).toString$0(
                0
              ) +
              '.\n') +
            (string$.Soon__ +
              angle
                .coerce$2(H._setArrayType(['deg'], t3), H._setArrayType([], t3))
                .toString$0(0) +
              '.\n') +
            '\n';
          actualUnit = J.get$first$ax(angle.get$numeratorUnits());
          t3 =
            t3 +
            (_s31_ + H.S($name) + ' * 1deg/1' + actualUnit + '\n') +
            ('To migrate to new behavior: 0deg + $' + H.S($name) + '\n') +
            '\n';
          t1 = t3;
        } else
          t1 = t1 + (_s31_ + H.S($name) + K._removeUnits(angle) + '\n') + '\n';
        t1 += 'See https://sass-lang.com/d/color-units';
        N.warn(t1.charCodeAt(0) == 0 ? t1 : t1, true);
      },
      _checkPercent(number, $name) {
        if (number.hasUnit$1('%')) return;
        N.warn(
          '$' +
            $name +
            ': Passing a number without unit % (' +
            number.toString$0(0) +
            string$.x29x20is_d +
            $name +
            K._removeUnits(number) +
            ' * 1%',
          true
        );
      },
      _removeUnits(number) {
        var t1 = number.get$denominatorUnits();
        return (
          new H.MappedListIterable(
            t1,
            new K._removeUnits_closure(),
            H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
          ).join$0(0) +
          J.map$1$1$ax(
            number.get$numeratorUnits(),
            new K._removeUnits_closure0(),
            type$.String
          ).join$0(0)
        );
      },
      _hwb($arguments) {
        var _s9_ = 'whiteness',
          _s9_0 = 'blackness',
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null,
          hue = t1.$index($arguments, 0).assertNumber$1('hue'),
          whiteness = t1.$index($arguments, 1).assertNumber$1(_s9_),
          blackness = t1.$index($arguments, 2).assertNumber$1(_s9_0);
        whiteness.assertUnit$2('%', _s9_);
        blackness.assertUnit$2('%', _s9_0);
        return K.SassColor_SassColor$hwb(
          hue.value,
          whiteness.valueInRange$3(0, 100, _s9_),
          blackness.valueInRange$3(0, 100, _s9_0),
          X.NullableExtension_andThen(alpha, new K._hwb_closure())
        );
      },
      _parseChannels($name, argumentNames, channels) {
        var list,
          t1,
          channels0,
          alphaFromSlashList,
          isCommaSeparated,
          isBracketed,
          buffer,
          maybeSlashSeparated,
          slash,
          _s17_ = '$channels must be';
        if (channels.get$isVar())
          return K._functionString(
            $name,
            H._setArrayType([channels], type$.JSArray_Value)
          );
        if (channels.get$separator() === C.ListSeparator_1gm) {
          list = channels.get$asList();
          t1 = list.length;
          if (t1 !== 2)
            throw H.wrapException(
              E.SassScriptException$(
                string$.Only_2 +
                  t1 +
                  ' ' +
                  B.pluralize('was', list.length, 'were') +
                  ' passed.'
              )
            );
          channels0 = list[0];
          alphaFromSlashList = list[1];
          if (!alphaFromSlashList.get$isSpecialNumber())
            alphaFromSlashList.assertNumber$1('alpha');
          if (list[0].get$isVar())
            return K._functionString(
              $name,
              H._setArrayType([channels], type$.JSArray_Value)
            );
        } else {
          channels0 = channels;
          alphaFromSlashList = null;
        }
        isCommaSeparated = channels0.get$separator() === C.ListSeparator_kWM;
        isBracketed = channels0.get$hasBrackets();
        if (isCommaSeparated || isBracketed) {
          buffer = new P.StringBuffer(_s17_);
          if (isBracketed) {
            t1 = _s17_ + ' an unbracketed';
            buffer._contents = t1;
          } else t1 = _s17_;
          if (isCommaSeparated) {
            t1 += isBracketed ? ',' : ' a';
            buffer._contents = t1;
            t1 = buffer._contents = t1 + ' space-separated';
          }
          buffer._contents = t1 + ' list.';
          throw H.wrapException(E.SassScriptException$(buffer.toString$0(0)));
        }
        list = channels0.get$asList();
        t1 = list.length;
        if (t1 > 3)
          throw H.wrapException(
            E.SassScriptException$(
              'Only 3 elements allowed, but ' + t1 + ' were passed.'
            )
          );
        else if (t1 < 3) {
          if (!C.JSArray_methods.any$1(list, new K._parseChannels_closure()))
            if (list.length !== 0) {
              t1 = C.JSArray_methods.get$last(list);
              if (t1 instanceof D.SassString)
                if (t1.hasQuotes) {
                  t1 = t1.text;
                  t1 =
                    B.startsWithIgnoreCase(t1, 'var(') &&
                    C.JSString_methods.contains$1(t1, '/');
                } else t1 = false;
              else t1 = false;
            } else t1 = false;
          else t1 = true;
          if (t1)
            return K._functionString(
              $name,
              H._setArrayType([channels], type$.JSArray_Value)
            );
          else
            throw H.wrapException(
              E.SassScriptException$(
                'Missing element ' + argumentNames[list.length] + '.'
              )
            );
        }
        if (alphaFromSlashList != null) {
          t1 = P.List_List$of(list, true, type$.Value);
          t1.push(alphaFromSlashList);
          return t1;
        }
        maybeSlashSeparated = list[2];
        if (maybeSlashSeparated instanceof T.SassNumber) {
          slash = maybeSlashSeparated.asSlash;
          if (slash == null) return list;
          return H._setArrayType(
            [list[0], list[1], slash.item1, slash.item2],
            type$.JSArray_Value
          );
        } else if (
          maybeSlashSeparated instanceof D.SassString &&
          !maybeSlashSeparated.hasQuotes &&
          C.JSString_methods.contains$1(maybeSlashSeparated.text, '/')
        )
          return K._functionString(
            $name,
            H._setArrayType([channels0], type$.JSArray_Value)
          );
        else return list;
      },
      _percentageOrUnitless(number, max, $name) {
        var value;
        if (!number.get$hasUnits()) value = number.value;
        else if (number.hasUnit$1('%')) value = (max * number.value) / 100;
        else
          throw H.wrapException(
            E.SassScriptException$(
              '$' +
                $name +
                ': Expected ' +
                number.toString$0(0) +
                ' to have no units or "%".'
            )
          );
        return C.JSNumber_methods.clamp$2(value, 0, max);
      },
      _mixColors(color1, color2, weight) {
        var weightScale = weight.valueInRange$3(0, 100, 'weight') / 100,
          normalizedWeight = weightScale * 2 - 1,
          t1 = color1.alpha,
          t2 = color2.alpha,
          alphaDistance = t1 - t2,
          t3 = normalizedWeight * alphaDistance,
          weight1 =
            ((t3 === -1
              ? normalizedWeight
              : (normalizedWeight + alphaDistance) / (1 + t3)) +
              1) /
            2,
          weight2 = 1 - weight1;
        return K.SassColor$rgb(
          T.fuzzyRound(color1.get$red() * weight1 + color2.get$red() * weight2),
          T.fuzzyRound(
            color1.get$green() * weight1 + color2.get$green() * weight2
          ),
          T.fuzzyRound(
            color1.get$blue() * weight1 + color2.get$blue() * weight2
          ),
          t1 * weightScale + t2 * (1 - weightScale),
          null
        );
      },
      _opacify($arguments) {
        var t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color');
        return color.changeAlpha$1(
          C.JSNumber_methods.clamp$2(
            color.alpha +
              t1
                .$index($arguments, 1)
                .assertNumber$1('amount')
                .valueInRange$3(0, 1, 'amount'),
            0,
            1
          )
        );
      },
      _transparentize($arguments) {
        var t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color');
        return color.changeAlpha$1(
          C.JSNumber_methods.clamp$2(
            color.alpha -
              t1
                .$index($arguments, 1)
                .assertNumber$1('amount')
                .valueInRange$3(0, 1, 'amount'),
            0,
            1
          )
        );
      },
      _function4($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:color'
        );
      },
      global_closure: function global_closure() {},
      global_closure0: function global_closure0() {},
      global_closure1: function global_closure1() {},
      global_closure2: function global_closure2() {},
      global_closure3: function global_closure3() {},
      global_closure4: function global_closure4() {},
      global_closure5: function global_closure5() {},
      global_closure6: function global_closure6() {},
      global_closure7: function global_closure7() {},
      global_closure8: function global_closure8() {},
      global_closure9: function global_closure9() {},
      global_closure10: function global_closure10() {},
      global_closure11: function global_closure11() {},
      global_closure12: function global_closure12() {},
      global_closure13: function global_closure13() {},
      global_closure14: function global_closure14() {},
      global_closure15: function global_closure15() {},
      global_closure16: function global_closure16() {},
      global_closure17: function global_closure17() {},
      global_closure18: function global_closure18() {},
      global_closure19: function global_closure19() {},
      global_closure20: function global_closure20() {},
      global_closure21: function global_closure21() {},
      global_closure22: function global_closure22() {},
      global_closure23: function global_closure23() {},
      global_closure24: function global_closure24() {},
      global__closure: function global__closure() {},
      global_closure25: function global_closure25() {},
      module_closure: function module_closure() {},
      module_closure0: function module_closure0() {},
      module_closure1: function module_closure1() {},
      module_closure2: function module_closure2() {},
      module_closure3: function module_closure3() {},
      module_closure4: function module_closure4() {},
      module_closure5: function module_closure5() {},
      module_closure6: function module_closure6() {},
      module__closure: function module__closure() {},
      module_closure7: function module_closure7() {},
      _red_closure: function _red_closure() {},
      _green_closure: function _green_closure() {},
      _blue_closure: function _blue_closure() {},
      _mix_closure: function _mix_closure() {},
      _hue_closure: function _hue_closure() {},
      _saturation_closure: function _saturation_closure() {},
      _lightness_closure: function _lightness_closure() {},
      _complement_closure: function _complement_closure() {},
      _adjust_closure: function _adjust_closure() {},
      _scale_closure: function _scale_closure() {},
      _change_closure: function _change_closure() {},
      _ieHexStr_closure: function _ieHexStr_closure() {},
      _ieHexStr_closure_hexString: function _ieHexStr_closure_hexString() {},
      _updateComponents_getParam: function _updateComponents_getParam(
        t0,
        t1,
        t2
      ) {
        this.keywords = t0;
        this.scale = t1;
        this.change = t2;
      },
      _updateComponents_closure: function _updateComponents_closure() {},
      _updateComponents_updateValue: function _updateComponents_updateValue(
        t0,
        t1
      ) {
        this.change = t0;
        this.adjust = t1;
      },
      _updateComponents_updateRgb: function _updateComponents_updateRgb(t0) {
        this.updateValue = t0;
      },
      _functionString_closure: function _functionString_closure() {},
      _removedColorFunction_closure: function _removedColorFunction_closure(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.argument = t1;
        this.negative = t2;
      },
      _rgb_closure: function _rgb_closure() {},
      _hsl_closure: function _hsl_closure() {},
      _removeUnits_closure: function _removeUnits_closure() {},
      _removeUnits_closure0: function _removeUnits_closure0() {},
      _hwb_closure: function _hwb_closure() {},
      _parseChannels_closure: function _parseChannels_closure() {},
      _fuzzyRoundIfZero(number) {
        if (!(Math.abs(number - 0) < $.$get$epsilon())) return number;
        return C.JSNumber_methods.get$isNegative(number) ? -0.0 : 0;
      },
      _numberFunction($name, transform) {
        return Q.BuiltInCallable$function(
          $name,
          '$number',
          new K._numberFunction_closure(transform),
          'sass:math'
        );
      },
      _function1($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:math'
        );
      },
      _ceil_closure: function _ceil_closure() {},
      _clamp_closure: function _clamp_closure() {},
      _floor_closure: function _floor_closure() {},
      _max_closure: function _max_closure() {},
      _min_closure: function _min_closure() {},
      _abs_closure: function _abs_closure() {},
      _hypot_closure: function _hypot_closure() {},
      _hypot__closure: function _hypot__closure() {},
      _log_closure: function _log_closure() {},
      _pow_closure: function _pow_closure() {},
      _sqrt_closure: function _sqrt_closure() {},
      _acos_closure: function _acos_closure() {},
      _asin_closure: function _asin_closure() {},
      _atan_closure: function _atan_closure() {},
      _atan2_closure: function _atan2_closure() {},
      _cos_closure: function _cos_closure() {},
      _sin_closure: function _sin_closure() {},
      _tan_closure: function _tan_closure() {},
      _compatible_closure: function _compatible_closure() {},
      _isUnitless_closure: function _isUnitless_closure() {},
      _unit_closure: function _unit_closure() {},
      _percentage_closure: function _percentage_closure() {},
      _randomFunction_closure: function _randomFunction_closure() {},
      _div_closure: function _div_closure() {},
      _numberFunction_closure: function _numberFunction_closure(t0) {
        this.transform = t0;
      },
      LimitedMapView$blocklist(_map, blocklist, $K, $V) {
        var t2,
          key,
          t1 = P.LinkedHashSet_LinkedHashSet$_empty($K);
        for (t2 = J.get$iterator$ax(_map.get$keys(_map)); t2.moveNext$0(); ) {
          key = t2.get$current();
          if (!blocklist.contains$1(0, key)) t1.add$1(0, key);
        }
        return new K.LimitedMapView(
          _map,
          t1,
          $K._eval$1('@<0>')._bind$1($V)._eval$1('LimitedMapView<1,2>')
        );
      },
      LimitedMapView: function LimitedMapView(t0, t1, t2) {
        this._limited_map_view$_map = t0;
        this._limited_map_view$_keys = t1;
        this.$ti = t2;
      },
      SassColor$rgb(_red, _green, _blue, alpha, originalSpan) {
        var t1 = new K.SassColor(
          _red,
          _green,
          _blue,
          null,
          null,
          null,
          alpha == null ? 1 : T.fuzzyAssertRange(alpha, 0, 1, 'alpha'),
          originalSpan
        );
        P.RangeError_checkValueInInterval(t1.get$red(), 0, 255, 'red');
        P.RangeError_checkValueInInterval(t1.get$green(), 0, 255, 'green');
        P.RangeError_checkValueInInterval(t1.get$blue(), 0, 255, 'blue');
        return t1;
      },
      SassColor$hsl(hue, saturation, lightness, alpha) {
        var _null = null,
          t1 = C.JSNumber_methods.$mod(hue, 360),
          t2 = T.fuzzyAssertRange(saturation, 0, 100, 'saturation'),
          t3 = T.fuzzyAssertRange(lightness, 0, 100, 'lightness');
        return new K.SassColor(
          _null,
          _null,
          _null,
          t1,
          t2,
          t3,
          alpha == null ? 1 : T.fuzzyAssertRange(alpha, 0, 1, 'alpha'),
          _null
        );
      },
      SassColor_SassColor$hwb(hue, whiteness, blackness, alpha) {
        var t2,
          t1 = {},
          scaledHue = C.JSNumber_methods.$mod(hue, 360) / 360,
          scaledWhiteness = (t1.scaledWhiteness =
            T.fuzzyAssertRange(whiteness, 0, 100, 'whiteness') / 100),
          scaledBlackness =
            T.fuzzyAssertRange(blackness, 0, 100, 'blackness') / 100,
          sum = scaledWhiteness + scaledBlackness;
        if (sum > 1) {
          t2 = t1.scaledWhiteness = scaledWhiteness / sum;
          scaledBlackness /= sum;
        } else t2 = scaledWhiteness;
        t2 = new K.SassColor_SassColor$hwb_toRgb(t1, 1 - t2 - scaledBlackness);
        return K.SassColor$rgb(
          t2.call$1(scaledHue + 0.3333333333333333),
          t2.call$1(scaledHue),
          t2.call$1(scaledHue - 0.3333333333333333),
          alpha,
          null
        );
      },
      SassColor__hueToRgb(m1, m2, hue) {
        if (hue < 0) ++hue;
        if (hue > 1) --hue;
        if (hue < 0.16666666666666666) return m1 + (m2 - m1) * hue * 6;
        else if (hue < 0.5) return m2;
        else if (hue < 0.6666666666666666)
          return m1 + (m2 - m1) * (0.6666666666666666 - hue) * 6;
        else return m1;
      },
      SassColor: function SassColor(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _._red = t0;
        _._green = t1;
        _._blue = t2;
        _._hue = t3;
        _._saturation = t4;
        _._lightness = t5;
        _.alpha = t6;
        _.originalSpan = t7;
      },
      SassColor_SassColor$hwb_toRgb: function SassColor_SassColor$hwb_toRgb(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.factor = t1;
      },
      UnicodeGlyphSet: function UnicodeGlyphSet() {},
      ColorExpression0: function ColorExpression0(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      _updateComponents0($arguments, adjust, change, scale) {
        var keywords,
          alpha,
          red,
          green,
          blue,
          hueNumber,
          t2,
          hue,
          saturation,
          lightness,
          whiteness,
          blackness,
          hasRgb,
          hasSL,
          hasWB,
          t3,
          t4,
          t5,
          _null = null,
          t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color'),
          argumentList = type$.SassArgumentList_2._as(t1.$index($arguments, 1));
        if (argumentList._list1$_contents.length !== 0)
          throw H.wrapException(E.SassScriptException$0(string$.Only_op));
        argumentList._argument_list$_wereKeywordsAccessed = true;
        keywords = P.LinkedHashMap_LinkedHashMap$of(
          argumentList._argument_list$_keywords,
          type$.String,
          type$.Value_2
        );
        t1 = new K._updateComponents_getParam0(keywords, scale, change);
        alpha = t1.call$2('alpha', 1);
        red = t1.call$2('red', 255);
        green = t1.call$2('green', 255);
        blue = t1.call$2('blue', 255);
        if (scale) hueNumber = _null;
        else {
          t2 = keywords.remove$1(0, 'hue');
          hueNumber = t2 == null ? _null : t2.assertNumber$1('hue');
        }
        t2 = hueNumber == null;
        if (!t2) K._checkAngle0(hueNumber, 'hue');
        hue = t2 ? _null : hueNumber.value;
        saturation = t1.call$3$checkPercent('saturation', 100, true);
        lightness = t1.call$3$checkPercent('lightness', 100, true);
        whiteness = t1.call$3$assertPercent('whiteness', 100, true);
        blackness = t1.call$3$assertPercent('blackness', 100, true);
        if (keywords.get$isNotEmpty(keywords))
          throw H.wrapException(
            E.SassScriptException$0(
              'No ' +
                B.pluralize0('argument', keywords.get$length(keywords), _null) +
                ' named ' +
                H.S(
                  B.toSentence0(
                    keywords
                      .get$keys(keywords)
                      .map$1$1(
                        0,
                        new K._updateComponents_closure0(),
                        type$.Object
                      ),
                    'or'
                  )
                ) +
                '.'
            )
          );
        hasRgb = red != null || green != null || blue != null;
        hasSL = saturation != null || lightness != null;
        hasWB = whiteness != null || blackness != null;
        if (hasRgb) t1 = hasSL || hasWB || hue != null;
        else t1 = false;
        if (t1)
          throw H.wrapException(
            E.SassScriptException$0(
              string$.RGB_pa + (hasWB ? 'HWB' : 'HSL') + ' parameters.'
            )
          );
        if (hasSL && hasWB)
          throw H.wrapException(E.SassScriptException$0(string$.HSL_pa));
        t1 = new K._updateComponents_updateValue0(change, adjust);
        t2 = new K._updateComponents_updateRgb0(t1);
        if (hasRgb) {
          t3 = t2.call$2(color.get$red(), red);
          t4 = t2.call$2(color.get$green(), green);
          t2 = t2.call$2(color.get$blue(), blue);
          return color.changeRgb$4$alpha$blue$green$red(
            t1.call$3(color.alpha, alpha, 1),
            t2,
            t4,
            t3
          );
        } else if (hasWB) {
          if (change) t2 = hue;
          else {
            t2 = color.get$hue();
            t2 += hue == null ? 0 : hue;
          }
          t3 = t1.call$3(color.get$whiteness(), whiteness, 100);
          t4 = t1.call$3(color.get$blackness(), blackness, 100);
          t5 = color.alpha;
          t1 = t1.call$3(t5, alpha, 1);
          if (t2 == null) t2 = color.get$hue();
          if (t3 == null) t3 = color.get$whiteness();
          if (t4 == null) t4 = color.get$blackness();
          return K.SassColor_SassColor$hwb0(t2, t3, t4, t1 == null ? t5 : t1);
        } else {
          t2 = hue == null;
          if (!t2 || hasSL) {
            if (change) t2 = hue;
            else {
              t3 = color.get$hue();
              t3 += t2 ? 0 : hue;
              t2 = t3;
            }
            t3 = t1.call$3(color.get$saturation(), saturation, 100);
            t4 = t1.call$3(color.get$lightness(), lightness, 100);
            return color.changeHsl$4$alpha$hue$lightness$saturation(
              t1.call$3(color.alpha, alpha, 1),
              t2,
              t4,
              t3
            );
          } else if (alpha != null)
            return color.changeAlpha$1(t1.call$3(color.alpha, alpha, 1));
          else return color;
        }
      },
      _functionString0($name, $arguments) {
        return new D.SassString0(
          $name +
            '(' +
            J.map$1$1$ax(
              $arguments,
              new K._functionString_closure0(),
              type$.String
            ).join$1(0, ', ') +
            ')',
          false
        );
      },
      _removedColorFunction0($name, argument, negative) {
        return Q.BuiltInCallable$function0(
          $name,
          '$color, $amount',
          new K._removedColorFunction_closure0($name, argument, negative),
          'sass:color'
        );
      },
      _rgb0($name, $arguments) {
        var t2,
          red,
          green,
          blue,
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
        if (!t1.$index($arguments, 0).get$isSpecialNumber())
          if (!t1.$index($arguments, 1).get$isSpecialNumber())
            if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
              t2 = alpha == null ? null : alpha.get$isSpecialNumber();
              t2 = t2 === true;
            } else t2 = true;
          else t2 = true;
        else t2 = true;
        if (t2) return K._functionString0($name, $arguments);
        red = t1.$index($arguments, 0).assertNumber$1('red');
        green = t1.$index($arguments, 1).assertNumber$1('green');
        blue = t1.$index($arguments, 2).assertNumber$1('blue');
        return K.SassColor$rgb0(
          T.fuzzyRound0(K._percentageOrUnitless0(red, 255, 'red')),
          T.fuzzyRound0(K._percentageOrUnitless0(green, 255, 'green')),
          T.fuzzyRound0(K._percentageOrUnitless0(blue, 255, 'blue')),
          X.NullableExtension_andThen0(alpha, new K._rgb_closure0()),
          null
        );
      },
      _rgbTwoArg0($name, $arguments) {
        var first,
          color,
          t1 = J.getInterceptor$asx($arguments);
        if (t1.$index($arguments, 0).get$isVar())
          return K._functionString0($name, $arguments);
        else if (t1.$index($arguments, 1).get$isVar()) {
          first = t1.$index($arguments, 0);
          if (first instanceof K.SassColor0)
            return new D.SassString0(
              $name +
                '(' +
                first.get$red() +
                ', ' +
                first.get$green() +
                ', ' +
                first.get$blue() +
                ', ' +
                N.serializeValue(t1.$index($arguments, 1), false, true) +
                ')',
              false
            );
          else return K._functionString0($name, $arguments);
        } else if (t1.$index($arguments, 1).get$isSpecialNumber()) {
          color = t1.$index($arguments, 0).assertColor$1('color');
          return new D.SassString0(
            $name +
              '(' +
              color.get$red() +
              ', ' +
              color.get$green() +
              ', ' +
              color.get$blue() +
              ', ' +
              N.serializeValue(t1.$index($arguments, 1), false, true) +
              ')',
            false
          );
        }
        return t1
          .$index($arguments, 0)
          .assertColor$1('color')
          .changeAlpha$1(
            K._percentageOrUnitless0(
              t1.$index($arguments, 1).assertNumber$1('alpha'),
              1,
              'alpha'
            )
          );
      },
      _hsl0($name, $arguments) {
        var t2,
          hue,
          saturation,
          lightness,
          _s10_ = 'saturation',
          _s9_ = 'lightness',
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
        if (!t1.$index($arguments, 0).get$isSpecialNumber())
          if (!t1.$index($arguments, 1).get$isSpecialNumber())
            if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
              t2 = alpha == null ? null : alpha.get$isSpecialNumber();
              t2 = t2 === true;
            } else t2 = true;
          else t2 = true;
        else t2 = true;
        if (t2) return K._functionString0($name, $arguments);
        hue = t1.$index($arguments, 0).assertNumber$1('hue');
        saturation = t1.$index($arguments, 1).assertNumber$1(_s10_);
        lightness = t1.$index($arguments, 2).assertNumber$1(_s9_);
        K._checkAngle0(hue, 'hue');
        K._checkPercent0(saturation, _s10_);
        K._checkPercent0(lightness, _s9_);
        return K.SassColor$hsl0(
          hue.value,
          C.JSNumber_methods.clamp$2(saturation.value, 0, 100),
          C.JSNumber_methods.clamp$2(lightness.value, 0, 100),
          X.NullableExtension_andThen0(alpha, new K._hsl_closure0())
        );
      },
      _checkAngle0(angle, $name) {
        var t1,
          t2,
          t3,
          actualUnit,
          _s31_ = 'To preserve current behavior: $';
        if (!angle.get$hasUnits() || angle.hasUnit$1('deg')) return;
        t1 =
          '' +
          ('$' +
            H.S($name) +
            ': Passing a unit other than deg (' +
            angle.toString$0(0) +
            ') is deprecated.\n') +
          '\n';
        if (angle.compatibleWithUnit$1('deg')) {
          t2 = "You're passing " + angle.toString$0(0) + string$.x2c_whici;
          t3 = type$.JSArray_String;
          t3 =
            t1 +
            (t2 +
              new L.SingleUnitSassNumber0('deg', angle.value, null).toString$0(
                0
              ) +
              '.\n') +
            (string$.Soon__ +
              angle
                .coerce$2(H._setArrayType(['deg'], t3), H._setArrayType([], t3))
                .toString$0(0) +
              '.\n') +
            '\n';
          actualUnit = J.get$first$ax(angle.get$numeratorUnits());
          t3 =
            t3 +
            (_s31_ + H.S($name) + ' * 1deg/1' + actualUnit + '\n') +
            ('To migrate to new behavior: 0deg + $' + H.S($name) + '\n') +
            '\n';
          t1 = t3;
        } else
          t1 = t1 + (_s31_ + H.S($name) + K._removeUnits0(angle) + '\n') + '\n';
        t1 += 'See https://sass-lang.com/d/color-units';
        N.warn0(t1.charCodeAt(0) == 0 ? t1 : t1, true);
      },
      _checkPercent0(number, $name) {
        if (number.hasUnit$1('%')) return;
        N.warn0(
          '$' +
            $name +
            ': Passing a number without unit % (' +
            number.toString$0(0) +
            string$.x29x20is_d +
            $name +
            K._removeUnits0(number) +
            ' * 1%',
          true
        );
      },
      _removeUnits0(number) {
        var t1 = number.get$denominatorUnits();
        return (
          new H.MappedListIterable(
            t1,
            new K._removeUnits_closure1(),
            H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
          ).join$0(0) +
          J.map$1$1$ax(
            number.get$numeratorUnits(),
            new K._removeUnits_closure2(),
            type$.String
          ).join$0(0)
        );
      },
      _hwb0($arguments) {
        var _s9_ = 'whiteness',
          _s9_0 = 'blackness',
          t1 = J.getInterceptor$asx($arguments),
          alpha =
            t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null,
          hue = t1.$index($arguments, 0).assertNumber$1('hue'),
          whiteness = t1.$index($arguments, 1).assertNumber$1(_s9_),
          blackness = t1.$index($arguments, 2).assertNumber$1(_s9_0);
        whiteness.assertUnit$2('%', _s9_);
        blackness.assertUnit$2('%', _s9_0);
        return K.SassColor_SassColor$hwb0(
          hue.value,
          whiteness.valueInRange$3(0, 100, _s9_),
          blackness.valueInRange$3(0, 100, _s9_0),
          X.NullableExtension_andThen0(alpha, new K._hwb_closure0())
        );
      },
      _parseChannels0($name, argumentNames, channels) {
        var list,
          t1,
          channels0,
          alphaFromSlashList,
          isCommaSeparated,
          isBracketed,
          buffer,
          maybeSlashSeparated,
          slash,
          _s17_ = '$channels must be';
        if (channels.get$isVar())
          return K._functionString0(
            $name,
            H._setArrayType([channels], type$.JSArray_Value_2)
          );
        if (channels.get$separator() === C.ListSeparator_1gm0) {
          list = channels.get$asList();
          t1 = list.length;
          if (t1 !== 2)
            throw H.wrapException(
              E.SassScriptException$0(
                string$.Only_2 +
                  t1 +
                  ' ' +
                  B.pluralize0('was', list.length, 'were') +
                  ' passed.'
              )
            );
          channels0 = list[0];
          alphaFromSlashList = list[1];
          if (!alphaFromSlashList.get$isSpecialNumber())
            alphaFromSlashList.assertNumber$1('alpha');
          if (list[0].get$isVar())
            return K._functionString0(
              $name,
              H._setArrayType([channels], type$.JSArray_Value_2)
            );
        } else {
          channels0 = channels;
          alphaFromSlashList = null;
        }
        isCommaSeparated = channels0.get$separator() === C.ListSeparator_kWM0;
        isBracketed = channels0.get$hasBrackets();
        if (isCommaSeparated || isBracketed) {
          buffer = new P.StringBuffer(_s17_);
          if (isBracketed) {
            t1 = _s17_ + ' an unbracketed';
            buffer._contents = t1;
          } else t1 = _s17_;
          if (isCommaSeparated) {
            t1 += isBracketed ? ',' : ' a';
            buffer._contents = t1;
            t1 = buffer._contents = t1 + ' space-separated';
          }
          buffer._contents = t1 + ' list.';
          throw H.wrapException(E.SassScriptException$0(buffer.toString$0(0)));
        }
        list = channels0.get$asList();
        t1 = list.length;
        if (t1 > 3)
          throw H.wrapException(
            E.SassScriptException$0(
              'Only 3 elements allowed, but ' + t1 + ' were passed.'
            )
          );
        else if (t1 < 3) {
          if (!C.JSArray_methods.any$1(list, new K._parseChannels_closure0()))
            if (list.length !== 0) {
              t1 = C.JSArray_methods.get$last(list);
              if (t1 instanceof D.SassString0)
                if (t1.hasQuotes) {
                  t1 = t1.text;
                  t1 =
                    B.startsWithIgnoreCase0(t1, 'var(') &&
                    C.JSString_methods.contains$1(t1, '/');
                } else t1 = false;
              else t1 = false;
            } else t1 = false;
          else t1 = true;
          if (t1)
            return K._functionString0(
              $name,
              H._setArrayType([channels], type$.JSArray_Value_2)
            );
          else
            throw H.wrapException(
              E.SassScriptException$0(
                'Missing element ' + argumentNames[list.length] + '.'
              )
            );
        }
        if (alphaFromSlashList != null) {
          t1 = P.List_List$of(list, true, type$.Value_2);
          t1.push(alphaFromSlashList);
          return t1;
        }
        maybeSlashSeparated = list[2];
        if (maybeSlashSeparated instanceof T.SassNumber0) {
          slash = maybeSlashSeparated.asSlash;
          if (slash == null) return list;
          return H._setArrayType(
            [list[0], list[1], slash.item1, slash.item2],
            type$.JSArray_Value_2
          );
        } else if (
          maybeSlashSeparated instanceof D.SassString0 &&
          !maybeSlashSeparated.hasQuotes &&
          C.JSString_methods.contains$1(maybeSlashSeparated.text, '/')
        )
          return K._functionString0(
            $name,
            H._setArrayType([channels0], type$.JSArray_Value_2)
          );
        else return list;
      },
      _percentageOrUnitless0(number, max, $name) {
        var value;
        if (!number.get$hasUnits()) value = number.value;
        else if (number.hasUnit$1('%')) value = (max * number.value) / 100;
        else
          throw H.wrapException(
            E.SassScriptException$0(
              '$' +
                $name +
                ': Expected ' +
                number.toString$0(0) +
                ' to have no units or "%".'
            )
          );
        return C.JSNumber_methods.clamp$2(value, 0, max);
      },
      _mixColors0(color1, color2, weight) {
        var weightScale = weight.valueInRange$3(0, 100, 'weight') / 100,
          normalizedWeight = weightScale * 2 - 1,
          t1 = color1.alpha,
          t2 = color2.alpha,
          alphaDistance = t1 - t2,
          t3 = normalizedWeight * alphaDistance,
          weight1 =
            ((t3 === -1
              ? normalizedWeight
              : (normalizedWeight + alphaDistance) / (1 + t3)) +
              1) /
            2,
          weight2 = 1 - weight1;
        return K.SassColor$rgb0(
          T.fuzzyRound0(
            color1.get$red() * weight1 + color2.get$red() * weight2
          ),
          T.fuzzyRound0(
            color1.get$green() * weight1 + color2.get$green() * weight2
          ),
          T.fuzzyRound0(
            color1.get$blue() * weight1 + color2.get$blue() * weight2
          ),
          t1 * weightScale + t2 * (1 - weightScale),
          null
        );
      },
      _opacify0($arguments) {
        var t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color');
        return color.changeAlpha$1(
          C.JSNumber_methods.clamp$2(
            color.alpha +
              t1
                .$index($arguments, 1)
                .assertNumber$1('amount')
                .valueInRange$3(0, 1, 'amount'),
            0,
            1
          )
        );
      },
      _transparentize0($arguments) {
        var t1 = J.getInterceptor$asx($arguments),
          color = t1.$index($arguments, 0).assertColor$1('color');
        return color.changeAlpha$1(
          C.JSNumber_methods.clamp$2(
            color.alpha -
              t1
                .$index($arguments, 1)
                .assertNumber$1('amount')
                .valueInRange$3(0, 1, 'amount'),
            0,
            1
          )
        );
      },
      _function11($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:color'
        );
      },
      global_closure30: function global_closure30() {},
      global_closure31: function global_closure31() {},
      global_closure32: function global_closure32() {},
      global_closure33: function global_closure33() {},
      global_closure34: function global_closure34() {},
      global_closure35: function global_closure35() {},
      global_closure36: function global_closure36() {},
      global_closure37: function global_closure37() {},
      global_closure38: function global_closure38() {},
      global_closure39: function global_closure39() {},
      global_closure40: function global_closure40() {},
      global_closure41: function global_closure41() {},
      global_closure42: function global_closure42() {},
      global_closure43: function global_closure43() {},
      global_closure44: function global_closure44() {},
      global_closure45: function global_closure45() {},
      global_closure46: function global_closure46() {},
      global_closure47: function global_closure47() {},
      global_closure48: function global_closure48() {},
      global_closure49: function global_closure49() {},
      global_closure50: function global_closure50() {},
      global_closure51: function global_closure51() {},
      global_closure52: function global_closure52() {},
      global_closure53: function global_closure53() {},
      global_closure54: function global_closure54() {},
      global_closure55: function global_closure55() {},
      global__closure0: function global__closure0() {},
      global_closure56: function global_closure56() {},
      module_closure8: function module_closure8() {},
      module_closure9: function module_closure9() {},
      module_closure10: function module_closure10() {},
      module_closure11: function module_closure11() {},
      module_closure12: function module_closure12() {},
      module_closure13: function module_closure13() {},
      module_closure14: function module_closure14() {},
      module_closure15: function module_closure15() {},
      module__closure0: function module__closure0() {},
      module_closure16: function module_closure16() {},
      _red_closure0: function _red_closure0() {},
      _green_closure0: function _green_closure0() {},
      _blue_closure0: function _blue_closure0() {},
      _mix_closure0: function _mix_closure0() {},
      _hue_closure0: function _hue_closure0() {},
      _saturation_closure0: function _saturation_closure0() {},
      _lightness_closure0: function _lightness_closure0() {},
      _complement_closure0: function _complement_closure0() {},
      _adjust_closure0: function _adjust_closure0() {},
      _scale_closure0: function _scale_closure0() {},
      _change_closure0: function _change_closure0() {},
      _ieHexStr_closure0: function _ieHexStr_closure0() {},
      _ieHexStr_closure_hexString0: function _ieHexStr_closure_hexString0() {},
      _updateComponents_getParam0: function _updateComponents_getParam0(
        t0,
        t1,
        t2
      ) {
        this.keywords = t0;
        this.scale = t1;
        this.change = t2;
      },
      _updateComponents_closure0: function _updateComponents_closure0() {},
      _updateComponents_updateValue0: function _updateComponents_updateValue0(
        t0,
        t1
      ) {
        this.change = t0;
        this.adjust = t1;
      },
      _updateComponents_updateRgb0: function _updateComponents_updateRgb0(t0) {
        this.updateValue = t0;
      },
      _functionString_closure0: function _functionString_closure0() {},
      _removedColorFunction_closure0: function _removedColorFunction_closure0(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.argument = t1;
        this.negative = t2;
      },
      _rgb_closure0: function _rgb_closure0() {},
      _hsl_closure0: function _hsl_closure0() {},
      _removeUnits_closure1: function _removeUnits_closure1() {},
      _removeUnits_closure2: function _removeUnits_closure2() {},
      _hwb_closure0: function _hwb_closure0() {},
      _parseChannels_closure0: function _parseChannels_closure0() {},
      _NodeSassColor: function _NodeSassColor() {},
      colorConstructor_closure: function colorConstructor_closure() {},
      colorConstructor_closure0: function colorConstructor_closure0() {},
      colorConstructor_closure1: function colorConstructor_closure1() {},
      colorConstructor_closure2: function colorConstructor_closure2() {},
      colorConstructor_closure3: function colorConstructor_closure3() {},
      colorConstructor_closure4: function colorConstructor_closure4() {},
      colorConstructor_closure5: function colorConstructor_closure5() {},
      colorConstructor_closure6: function colorConstructor_closure6() {},
      colorConstructor_closure7: function colorConstructor_closure7() {},
      colorConstructor_closure8: function colorConstructor_closure8() {},
      SassColor$rgb0(_red, _green, _blue, alpha, originalSpan) {
        var t1 = new K.SassColor0(
          _red,
          _green,
          _blue,
          null,
          null,
          null,
          alpha == null ? 1 : T.fuzzyAssertRange0(alpha, 0, 1, 'alpha'),
          originalSpan
        );
        P.RangeError_checkValueInInterval(t1.get$red(), 0, 255, 'red');
        P.RangeError_checkValueInInterval(t1.get$green(), 0, 255, 'green');
        P.RangeError_checkValueInInterval(t1.get$blue(), 0, 255, 'blue');
        return t1;
      },
      SassColor$hsl0(hue, saturation, lightness, alpha) {
        var _null = null,
          t1 = C.JSNumber_methods.$mod(hue, 360),
          t2 = T.fuzzyAssertRange0(saturation, 0, 100, 'saturation'),
          t3 = T.fuzzyAssertRange0(lightness, 0, 100, 'lightness');
        return new K.SassColor0(
          _null,
          _null,
          _null,
          t1,
          t2,
          t3,
          alpha == null ? 1 : T.fuzzyAssertRange0(alpha, 0, 1, 'alpha'),
          _null
        );
      },
      SassColor_SassColor$hwb0(hue, whiteness, blackness, alpha) {
        var t2,
          t1 = {},
          scaledHue = C.JSNumber_methods.$mod(hue, 360) / 360,
          scaledWhiteness = (t1.scaledWhiteness =
            T.fuzzyAssertRange0(whiteness, 0, 100, 'whiteness') / 100),
          scaledBlackness =
            T.fuzzyAssertRange0(blackness, 0, 100, 'blackness') / 100,
          sum = scaledWhiteness + scaledBlackness;
        if (sum > 1) {
          t2 = t1.scaledWhiteness = scaledWhiteness / sum;
          scaledBlackness /= sum;
        } else t2 = scaledWhiteness;
        t2 = new K.SassColor_SassColor$hwb_toRgb0(t1, 1 - t2 - scaledBlackness);
        return K.SassColor$rgb0(
          t2.call$1(scaledHue + 0.3333333333333333),
          t2.call$1(scaledHue),
          t2.call$1(scaledHue - 0.3333333333333333),
          alpha,
          null
        );
      },
      SassColor__hueToRgb0(m1, m2, hue) {
        if (hue < 0) ++hue;
        if (hue > 1) --hue;
        if (hue < 0.16666666666666666) return m1 + (m2 - m1) * hue * 6;
        else if (hue < 0.5) return m2;
        else if (hue < 0.6666666666666666)
          return m1 + (m2 - m1) * (0.6666666666666666 - hue) * 6;
        else return m1;
      },
      SassColor0: function SassColor0(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _._color1$_red = t0;
        _._color1$_green = t1;
        _._color1$_blue = t2;
        _._color1$_hue = t3;
        _._color1$_saturation = t4;
        _._color1$_lightness = t5;
        _.alpha = t6;
        _.originalSpan = t7;
      },
      SassColor_SassColor$hwb_toRgb0: function SassColor_SassColor$hwb_toRgb0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.factor = t1;
      },
      LimitedMapView$blocklist0(_map, blocklist, $K, $V) {
        var t2,
          key,
          t1 = P.LinkedHashSet_LinkedHashSet$_empty($K);
        for (t2 = J.get$iterator$ax(_map.get$keys(_map)); t2.moveNext$0(); ) {
          key = t2.get$current();
          if (!blocklist.contains$1(0, key)) t1.add$1(0, key);
        }
        return new K.LimitedMapView0(
          _map,
          t1,
          $K._eval$1('@<0>')._bind$1($V)._eval$1('LimitedMapView0<1,2>')
        );
      },
      LimitedMapView0: function LimitedMapView0(t0, t1, t2) {
        this._limited_map_view0$_map = t0;
        this._limited_map_view0$_keys = t1;
        this.$ti = t2;
      },
      _fuzzyRoundIfZero0(number) {
        if (!(Math.abs(number - 0) < $.$get$epsilon0())) return number;
        return C.JSNumber_methods.get$isNegative(number) ? -0.0 : 0;
      },
      _numberFunction0($name, transform) {
        return Q.BuiltInCallable$function0(
          $name,
          '$number',
          new K._numberFunction_closure0(transform),
          'sass:math'
        );
      },
      _function8($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:math'
        );
      },
      _ceil_closure0: function _ceil_closure0() {},
      _clamp_closure0: function _clamp_closure0() {},
      _floor_closure0: function _floor_closure0() {},
      _max_closure0: function _max_closure0() {},
      _min_closure0: function _min_closure0() {},
      _abs_closure0: function _abs_closure0() {},
      _hypot_closure0: function _hypot_closure0() {},
      _hypot__closure0: function _hypot__closure0() {},
      _log_closure0: function _log_closure0() {},
      _pow_closure0: function _pow_closure0() {},
      _sqrt_closure0: function _sqrt_closure0() {},
      _acos_closure0: function _acos_closure0() {},
      _asin_closure0: function _asin_closure0() {},
      _atan_closure0: function _atan_closure0() {},
      _atan2_closure0: function _atan2_closure0() {},
      _cos_closure0: function _cos_closure0() {},
      _sin_closure0: function _sin_closure0() {},
      _tan_closure0: function _tan_closure0() {},
      _compatible_closure0: function _compatible_closure0() {},
      _isUnitless_closure0: function _isUnitless_closure0() {},
      _unit_closure0: function _unit_closure0() {},
      _percentage_closure0: function _percentage_closure0() {},
      _randomFunction_closure0: function _randomFunction_closure0() {},
      _div_closure0: function _div_closure0() {},
      _numberFunction_closure0: function _numberFunction_closure0(t0) {
        this.transform = t0;
      },
    },
    L = {
      UnmodifiableSetMixin__throw() {
        throw H.wrapException(
          P.UnsupportedError$('Cannot modify an unmodifiable Set')
        );
      },
      UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
        this._base = t0;
        this.$ti = t1;
      },
      UnmodifiableSetMixin: function UnmodifiableSetMixin() {},
      _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {},
      Immediate: function Immediate() {},
      Timeout: function Timeout() {},
      WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
        var _ = this;
        _.separatorPattern = t0;
        _.needsSeparatorPattern = t1;
        _.rootPattern = t2;
        _.relativeRootPattern = t3;
      },
      WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {},
      ModifiableCssDeclaration$(
        $name,
        value,
        span,
        parsedAsCustomProperty,
        valueSpanForMap
      ) {
        var t1 = valueSpanForMap == null ? value.get$span() : valueSpanForMap;
        if (parsedAsCustomProperty)
          if (!J.startsWith$1$s($name.get$value($name), '--'))
            H.throwExpression(P.ArgumentError$(string$.parsed, null));
          else if (!(value.get$value(value) instanceof D.SassString))
            H.throwExpression(
              P.ArgumentError$(
                string$.If_par +
                  value.toString$0(0) +
                  '` of type ' +
                  H.getRuntimeType(value.get$value(value)).toString$0(0) +
                  ').',
                null
              )
            );
        return new L.ModifiableCssDeclaration(
          $name,
          value,
          parsedAsCustomProperty,
          t1,
          span
        );
      },
      ModifiableCssDeclaration: function ModifiableCssDeclaration(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.parsedAsCustomProperty = t2;
        _.valueSpanForMap = t3;
        _.span = t4;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      IfExpression: function IfExpression(t0, t1) {
        this.$arguments = t0;
        this.span = t1;
      },
      Declaration$($name, value, span) {
        if (
          C.JSString_methods.startsWith$1($name.get$initialPlain(), '--') &&
          !(value instanceof D.StringExpression)
        )
          H.throwExpression(
            P.ArgumentError$(
              string$.Declarwu +
                value.toString$0(0) +
                '` of type ' +
                H.getRuntimeType(value).toString$0(0) +
                ').',
              null
            )
          );
        return new L.Declaration($name, value, span, null, false);
      },
      Declaration$nested($name, children, span, value) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        if (
          C.JSString_methods.startsWith$1($name.get$initialPlain(), '--') &&
          !(value instanceof D.StringExpression)
        )
          H.throwExpression(P.ArgumentError$(string$.Declarwa, null));
        return new L.Declaration($name, value, span, t1, t2);
      },
      Declaration: function Declaration(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      ForwardRule: function ForwardRule(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _.url = t0;
        _.shownMixinsAndFunctions = t1;
        _.shownVariables = t2;
        _.hiddenMixinsAndFunctions = t3;
        _.hiddenVariables = t4;
        _.prefix = t5;
        _.configuration = t6;
        _.span = t7;
      },
      LoudComment: function LoudComment(t0) {
        this.text = t0;
      },
      SupportsDeclaration: function SupportsDeclaration(t0, t1, t2) {
        this.name = t0;
        this.value = t1;
        this.span = t2;
      },
      PlainCssCallable: function PlainCssCallable(t0) {
        this.name = t0;
      },
      ExtendMode: function ExtendMode(t0) {
        this.name = t0;
      },
      ScssParser$(contents, logger, url) {
        var t1 = S.SpanScanner$(contents, url),
          t2 = logger == null ? C.StderrLogger_false : logger;
        return new L.ScssParser(
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.String,
            type$.VariableDeclaration
          ),
          t1,
          t2
        );
      },
      ScssParser: function ScssParser(t0, t1, t2) {
        var _ = this;
        _._isUseAllowed = true;
        _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
        _._globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      SingleUnitSassNumber: function SingleUnitSassNumber(t0, t1, t2) {
        this._unit = t0;
        this.value = t1;
        this.asSlash = t2;
      },
      SingleUnitSassNumber__coerceToUnit_closure: function SingleUnitSassNumber__coerceToUnit_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.unit = t1;
      },
      SingleUnitSassNumber__coerceValueToUnit_closure: function SingleUnitSassNumber__coerceValueToUnit_closure(
        t0
      ) {
        this.$this = t0;
      },
      SingleUnitSassNumber_multiplyUnits_closure: function SingleUnitSassNumber_multiplyUnits_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      SingleUnitSassNumber_multiplyUnits_closure0: function SingleUnitSassNumber_multiplyUnits_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      Entry: function Entry(t0, t1, t2) {
        this.source = t0;
        this.target = t1;
        this.identifierName = t2;
      },
      ModifiableCssDeclaration$0(
        $name,
        value,
        span,
        parsedAsCustomProperty,
        valueSpanForMap
      ) {
        var t1 = valueSpanForMap == null ? value.get$span() : valueSpanForMap;
        if (parsedAsCustomProperty)
          if (!J.startsWith$1$s($name.get$value($name), '--'))
            H.throwExpression(P.ArgumentError$(string$.parsed, null));
          else if (!(value.get$value(value) instanceof D.SassString0))
            H.throwExpression(
              P.ArgumentError$(
                string$.If_par +
                  value.toString$0(0) +
                  '` of type ' +
                  H.getRuntimeType(value.get$value(value)).toString$0(0) +
                  ').',
                null
              )
            );
        return new L.ModifiableCssDeclaration0(
          $name,
          value,
          parsedAsCustomProperty,
          t1,
          span
        );
      },
      ModifiableCssDeclaration0: function ModifiableCssDeclaration0(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.parsedAsCustomProperty = t2;
        _.valueSpanForMap = t3;
        _.span = t4;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      Declaration$0($name, value, span) {
        if (
          C.JSString_methods.startsWith$1($name.get$initialPlain(), '--') &&
          !(value instanceof D.StringExpression0)
        )
          H.throwExpression(
            P.ArgumentError$(
              string$.Declarwu +
                value.toString$0(0) +
                '` of type ' +
                H.getRuntimeType(value).toString$0(0) +
                ').',
              null
            )
          );
        return new L.Declaration0($name, value, span, null, false);
      },
      Declaration$nested0($name, children, span, value) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        if (
          C.JSString_methods.startsWith$1($name.get$initialPlain(), '--') &&
          !(value instanceof D.StringExpression0)
        )
          H.throwExpression(P.ArgumentError$(string$.Declarwa, null));
        return new L.Declaration0($name, value, span, t1, t2);
      },
      Declaration0: function Declaration0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      SupportsDeclaration0: function SupportsDeclaration0(t0, t1, t2) {
        this.name = t0;
        this.value = t1;
        this.span = t2;
      },
      ForwardRule0: function ForwardRule0(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _.url = t0;
        _.shownMixinsAndFunctions = t1;
        _.shownVariables = t2;
        _.hiddenMixinsAndFunctions = t3;
        _.hiddenVariables = t4;
        _.prefix = t5;
        _.configuration = t6;
        _.span = t7;
      },
      IfExpression0: function IfExpression0(t0, t1) {
        this.$arguments = t0;
        this.span = t1;
      },
      LoudComment0: function LoudComment0(t0) {
        this.text = t0;
      },
      ExtendMode0: function ExtendMode0(t0) {
        this.name = t0;
      },
      PlainCssCallable0: function PlainCssCallable0(t0) {
        this.name = t0;
      },
      ScssParser$0(contents, logger, url) {
        var t1 = S.SpanScanner$(contents, url),
          t2 = logger == null ? C.C_StderrLogger : logger;
        return new L.ScssParser0(
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.String,
            type$.VariableDeclaration_2
          ),
          t1,
          t2
        );
      },
      ScssParser0: function ScssParser0(t0, t1, t2) {
        var _ = this;
        _._stylesheet0$_isUseAllowed = true;
        _._stylesheet0$_inParentheses = _._stylesheet0$_inStyleRule = _._stylesheet0$_inUnknownAtRule = _._stylesheet0$_inControlDirective = _._stylesheet0$_inContentBlock = _._stylesheet0$_inMixin = false;
        _._stylesheet0$_globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      SingleUnitSassNumber0: function SingleUnitSassNumber0(t0, t1, t2) {
        this._single_unit$_unit = t0;
        this.value = t1;
        this.asSlash = t2;
      },
      SingleUnitSassNumber__coerceToUnit_closure0: function SingleUnitSassNumber__coerceToUnit_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.unit = t1;
      },
      SingleUnitSassNumber__coerceValueToUnit_closure0: function SingleUnitSassNumber__coerceValueToUnit_closure0(
        t0
      ) {
        this.$this = t0;
      },
      SingleUnitSassNumber_multiplyUnits_closure1: function SingleUnitSassNumber_multiplyUnits_closure1(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      SingleUnitSassNumber_multiplyUnits_closure2: function SingleUnitSassNumber_multiplyUnits_closure2(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      encodeVlq(value) {
        var res, signBit, digit, t1;
        if (value < $.$get$MIN_INT32() || value > $.$get$MAX_INT32())
          throw H.wrapException(
            P.ArgumentError$('expected 32 bit int, got: ' + value, null)
          );
        res = H._setArrayType([], type$.JSArray_String);
        if (value < 0) {
          value = -value;
          signBit = 1;
        } else signBit = 0;
        value = (value << 1) | signBit;
        do {
          digit = value & 31;
          value = value >>> 5;
          t1 = value > 0;
          res.push(string$.ABCDEF[t1 ? digit | 32 : digit]);
        } while (t1);
        return res;
      },
    },
    M = {
      _DelegatingIterableBase: function _DelegatingIterableBase() {},
      DelegatingSet: function DelegatingSet(t0, t1) {
        this._base = t0;
        this.$ti = t1;
      },
      MapKeySet: function MapKeySet(t0, t1) {
        this._baseMap = t0;
        this.$ti = t1;
      },
      MapKeySet_difference_closure: function MapKeySet_difference_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.other = t1;
      },
      _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {},
      futureToPromise(future, $T) {
        return new self.Promise(
          P.allowInterop(new M.futureToPromise_closure(future, $T))
        );
      },
      Util: function Util() {},
      futureToPromise_closure: function futureToPromise_closure(t0, t1) {
        this.future = t0;
        this.T = t1;
      },
      futureToPromise__closure: function futureToPromise__closure(t0, t1) {
        this.resolve = t0;
        this.T = t1;
      },
      Context_Context(style) {
        var current = style == null ? D.current() : '.';
        if (style == null) style = $.$get$Style_platform();
        return new M.Context(type$.InternalStyle._as(style), current);
      },
      _parseUri(uri) {
        if (typeof uri == 'string') return P.Uri_parse(uri);
        if (type$.Uri._is(uri)) return uri;
        throw H.wrapException(
          P.ArgumentError$value(uri, 'uri', 'Value must be a String or a Uri')
        );
      },
      _validateArgList(method, args) {
        var numArgs, i, numArgs0, message, t1, t2, t3, t4;
        for (numArgs = args.length, i = 1; i < numArgs; ++i) {
          if (args[i] == null || args[i - 1] != null) continue;
          for (; numArgs >= 1; numArgs = numArgs0) {
            numArgs0 = numArgs - 1;
            if (args[numArgs0] != null) break;
          }
          message = new P.StringBuffer('');
          t1 = '' + (method + '(');
          message._contents = t1;
          t2 = H._arrayInstanceType(args);
          t3 = t2._eval$1('SubListIterable<1>');
          t4 = new H.SubListIterable(args, 0, numArgs, t3);
          t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
          t3 =
            t1 +
            new H.MappedListIterable(
              t4,
              new M._validateArgList_closure(),
              t3._eval$1('MappedListIterable<ListIterable.E,String>')
            ).join$1(0, ', ');
          message._contents = t3;
          message._contents =
            t3 +
            ('): part ' + (i - 1) + ' was null, but part ' + i + ' was not.');
          throw H.wrapException(P.ArgumentError$(message.toString$0(0), null));
        }
      },
      Context: function Context(t0, t1) {
        this.style = t0;
        this._context$_current = t1;
      },
      Context_joinAll_closure: function Context_joinAll_closure() {},
      Context_split_closure: function Context_split_closure() {},
      _validateArgList_closure: function _validateArgList_closure() {},
      _PathDirection: function _PathDirection(t0) {
        this.name = t0;
      },
      _PathRelation: function _PathRelation(t0) {
        this.name = t0;
      },
      CallableDeclaration: function CallableDeclaration() {},
      FunctionRule$($name, $arguments, children, span, comment) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new M.FunctionRule($name, $arguments, span, t1, t2);
      },
      FunctionRule: function FunctionRule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      ParentStatement: function ParentStatement() {},
      ParentStatement_closure: function ParentStatement_closure() {},
      ParentStatement__closure: function ParentStatement__closure() {},
      SupportsNegation: function SupportsNegation(t0, t1) {
        this.condition = t0;
        this.span = t1;
      },
      ParentSelector: function ParentSelector(t0) {
        this.suffix = t0;
      },
      SimpleSelector: function SimpleSelector() {},
      Importer: function Importer() {},
      StylesheetNode$_(_stylesheet, importer, canonicalUrl, allUpstream) {
        var t1 = new M.StylesheetNode(
          _stylesheet,
          importer,
          canonicalUrl,
          allUpstream.item1,
          allUpstream.item2,
          P.LinkedHashSet_LinkedHashSet$_empty(type$.StylesheetNode)
        );
        t1.StylesheetNode$_$4(_stylesheet, importer, canonicalUrl, allUpstream);
        return t1;
      },
      StylesheetGraph: function StylesheetGraph(t0, t1, t2) {
        this._nodes = t0;
        this.importCache = t1;
        this._transitiveModificationTimes = t2;
      },
      StylesheetGraph_modifiedSince_transitiveModificationTime: function StylesheetGraph_modifiedSince_transitiveModificationTime(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetGraph_modifiedSince_transitiveModificationTime_closure: function StylesheetGraph_modifiedSince_transitiveModificationTime_closure(
        t0,
        t1
      ) {
        this.node = t0;
        this.transitiveModificationTime = t1;
      },
      StylesheetGraph__add_closure: function StylesheetGraph__add_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.url = t1;
        _.baseImporter = t2;
        _.baseUrl = t3;
      },
      StylesheetGraph_addCanonical_closure: function StylesheetGraph_addCanonical_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.originalUrl = t3;
      },
      StylesheetGraph__recanonicalizeImportsForNode_closure: function StylesheetGraph__recanonicalizeImportsForNode_closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.node = t3;
        _.forImport = t4;
        _.newMap = t5;
      },
      StylesheetGraph__nodeFor_closure: function StylesheetGraph__nodeFor_closure(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.url = t1;
        _.baseImporter = t2;
        _.baseUrl = t3;
        _.forImport = t4;
      },
      StylesheetGraph__nodeFor_closure0: function StylesheetGraph__nodeFor_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.resolvedUrl = t3;
      },
      StylesheetNode: function StylesheetNode(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._stylesheet = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _._upstream = t3;
        _._upstreamImports = t4;
        _._downstream = t5;
      },
      Syntax_forPath(path) {
        switch (
          X.ParsedPath_ParsedPath$parse(
            path,
            $.$get$context().style
          )._splitExtension$1(1)[1]
        ) {
          case '.sass':
            return C.Syntax_Sass;
          case '.css':
            return C.Syntax_CSS;
          default:
            return C.Syntax_SCSS;
        }
      },
      Syntax: function Syntax(t0) {
        this._syntax$_name = t0;
      },
      CallableDeclaration0: function CallableDeclaration0() {},
      FunctionRule$0($name, $arguments, children, span, comment) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new M.FunctionRule0($name, $arguments, span, t1, t2);
      },
      FunctionRule0: function FunctionRule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      Importer0: function Importer0() {},
      SupportsNegation0: function SupportsNegation0(t0, t1) {
        this.condition = t0;
        this.span = t1;
      },
      ParentSelector0: function ParentSelector0(t0) {
        this.suffix = t0;
      },
      ParentStatement0: function ParentStatement0() {},
      ParentStatement_closure0: function ParentStatement_closure0() {},
      ParentStatement__closure0: function ParentStatement__closure0() {},
      SimpleSelector0: function SimpleSelector0() {},
      Syntax_forPath0(path) {
        switch (
          X.ParsedPath_ParsedPath$parse(
            path,
            $.$get$context().style
          )._splitExtension$1(1)[1]
        ) {
          case '.sass':
            return C.Syntax_Sass0;
          case '.css':
            return C.Syntax_CSS0;
          default:
            return C.Syntax_SCSS0;
        }
      },
      Syntax0: function Syntax0(t0) {
        this._syntax0$_name = t0;
      },
    },
    N = {
      ArgParser: function ArgParser(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _._arg_parser$_options = t0;
        _._aliases = t1;
        _.options = t2;
        _.commands = t3;
        _._optionsAndSeparators = t4;
        _.allowTrailingOptions = t5;
        _.usageLineLength = t6;
      },
      ArgParser__addOption_closure: function ArgParser__addOption_closure(t0) {
        this.$this = t0;
      },
      TTY: function TTY() {},
      TTYReadStream: function TTYReadStream() {},
      TTYWriteStream: function TTYWriteStream() {},
      InterpolatedFunctionExpression: function InterpolatedFunctionExpression(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.$arguments = t1;
        this.span = t2;
      },
      AttributeSelector: function AttributeSelector(t0, t1, t2, t3) {
        var _ = this;
        _.name = t0;
        _.op = t1;
        _.value = t2;
        _.modifier = t3;
      },
      AttributeOperator: function AttributeOperator(t0) {
        this._attribute$_text = t0;
      },
      IDSelector: function IDSelector(t0) {
        this.name = t0;
      },
      IDSelector_unify_closure: function IDSelector_unify_closure(t0) {
        this.$this = t0;
      },
      PlaceholderSelector: function PlaceholderSelector(t0) {
        this.name = t0;
      },
      UniversalSelector: function UniversalSelector(t0) {
        this.namespace = t0;
      },
      NoSourceMapBuffer0: function NoSourceMapBuffer0(t0) {
        this._no_source_map_buffer0$_buffer = t0;
      },
      UnitlessSassNumber: function UnitlessSassNumber(t0, t1) {
        this.value = t0;
        this.asSlash = t1;
      },
      serialize(
        node,
        charset,
        indentWidth,
        inspect,
        lineFeed,
        sourceMap,
        style,
        useSpaces
      ) {
        var t1,
          css,
          t2,
          prefix,
          visitor = N._SerializeVisitor$0(
            2,
            inspect,
            lineFeed,
            true,
            sourceMap,
            style,
            true
          );
        node.accept$1(visitor);
        t1 = visitor._serialize$_buffer;
        css = t1.toString$0(0);
        if (charset) {
          t2 = new H.CodeUnits(css);
          t2 = t2.any$1(t2, new N.serialize_closure());
        } else t2 = false;
        if (t2)
          prefix =
            style === C.OutputStyle_compressed
              ? '\ufeff'
              : '@charset "UTF-8";\n';
        else prefix = '';
        t2 = prefix + css;
        return new N.SerializeResult(
          t2,
          sourceMap ? t1.buildSourceMap$1$prefix(prefix) : null
        );
      },
      serializeValue0(value, inspect, quote) {
        var visitor = N._SerializeVisitor$0(
          null,
          inspect,
          null,
          quote,
          false,
          null,
          true
        );
        value.accept$1(visitor);
        return visitor._serialize$_buffer.toString$0(0);
      },
      serializeSelector(selector, inspect) {
        var visitor = N._SerializeVisitor$0(
          null,
          true,
          null,
          true,
          false,
          null,
          true
        );
        selector.accept$1(visitor);
        return visitor._serialize$_buffer.toString$0(0);
      },
      _SerializeVisitor$0(
        indentWidth,
        inspect,
        lineFeed,
        quote,
        sourceMap,
        style,
        useSpaces
      ) {
        var t1 = sourceMap
            ? new D.SourceMapBuffer0(
                new P.StringBuffer(''),
                H._setArrayType([], type$.JSArray_Entry)
              )
            : new N.NoSourceMapBuffer0(new P.StringBuffer('')),
          t2 = style == null ? C.OutputStyle_expanded0 : style,
          t3 = indentWidth == null ? 2 : indentWidth;
        P.RangeError_checkValueInInterval(t3, 0, 10, 'indentWidth');
        return new N._SerializeVisitor0(
          t1,
          t2,
          inspect,
          quote,
          32,
          t3,
          C.C_LineFeed
        );
      },
      serialize_closure: function serialize_closure() {},
      _SerializeVisitor0: function _SerializeVisitor0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._serialize$_buffer = t0;
        _._indentation = 0;
        _._style = t1;
        _._serialize$_inspect = t2;
        _._quote = t3;
        _._indentCharacter = t4;
        _._indentWidth = t5;
        _._serialize$_lineFeed = t6;
      },
      _SerializeVisitor_visitCssComment_closure: function _SerializeVisitor_visitCssComment_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssAtRule_closure: function _SerializeVisitor_visitCssAtRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssMediaRule_closure: function _SerializeVisitor_visitCssMediaRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssImport_closure: function _SerializeVisitor_visitCssImport_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssImport__closure: function _SerializeVisitor_visitCssImport__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssKeyframeBlock_closure: function _SerializeVisitor_visitCssKeyframeBlock_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssStyleRule_closure: function _SerializeVisitor_visitCssStyleRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssSupportsRule_closure: function _SerializeVisitor_visitCssSupportsRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssDeclaration_closure: function _SerializeVisitor_visitCssDeclaration_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssDeclaration_closure0: function _SerializeVisitor_visitCssDeclaration_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitList_closure: function _SerializeVisitor_visitList_closure() {},
      _SerializeVisitor_visitList_closure0: function _SerializeVisitor_visitList_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _SerializeVisitor_visitList_closure1: function _SerializeVisitor_visitList_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _SerializeVisitor_visitMap_closure: function _SerializeVisitor_visitMap_closure(
        t0
      ) {
        this.$this = t0;
      },
      _SerializeVisitor_visitSelectorList_closure: function _SerializeVisitor_visitSelectorList_closure() {},
      _SerializeVisitor__write_closure: function _SerializeVisitor__write_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _SerializeVisitor__visitChildren_closure: function _SerializeVisitor__visitChildren_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.children = t2;
      },
      OutputStyle: function OutputStyle(t0) {
        this._serialize$_name = t0;
      },
      LineFeed: function LineFeed() {},
      SerializeResult: function SerializeResult(t0, t1) {
        this.css = t0;
        this.sourceMap = t1;
      },
      warn(message, deprecation) {
        var warnDefinition = $.Zone__current.$index(0, C.Symbol__warn);
        if (warnDefinition == null)
          throw H.wrapException(P.ArgumentError$(string$.warn__, null));
        warnDefinition.call$2(message, deprecation);
      },
      withWarnCallback(warn, callback, $T) {
        var t1 = type$.nullable_Object;
        return P.runZoned(
          new N.withWarnCallback_closure(callback, $T),
          P.LinkedHashMap_LinkedHashMap$_literal(
            [C.Symbol__warn, warn],
            t1,
            t1
          ),
          $T
        );
      },
      withWarnCallback_closure: function withWarnCallback_closure(t0, t1) {
        this.callback = t0;
        this.T = t1;
      },
      UnparsedFrame: function UnparsedFrame(t0, t1) {
        this.uri = t0;
        this.member = t1;
      },
      AttributeSelector0: function AttributeSelector0(t0, t1, t2, t3) {
        var _ = this;
        _.name = t0;
        _.op = t1;
        _.value = t2;
        _.modifier = t3;
      },
      AttributeOperator0: function AttributeOperator0(t0) {
        this._attribute0$_text = t0;
      },
      IDSelector0: function IDSelector0(t0) {
        this.name = t0;
      },
      IDSelector_unify_closure0: function IDSelector_unify_closure0(t0) {
        this.$this = t0;
      },
      InterpolatedFunctionExpression0: function InterpolatedFunctionExpression0(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.$arguments = t1;
        this.span = t2;
      },
      NoSourceMapBuffer: function NoSourceMapBuffer(t0) {
        this._no_source_map_buffer$_buffer = t0;
      },
      PlaceholderSelector0: function PlaceholderSelector0(t0) {
        this.name = t0;
      },
      serialize0(
        node,
        charset,
        indentWidth,
        inspect,
        lineFeed,
        sourceMap,
        style,
        useSpaces
      ) {
        var t1,
          css,
          t2,
          prefix,
          visitor = N._SerializeVisitor$(
            indentWidth == null ? 2 : indentWidth,
            inspect,
            lineFeed,
            true,
            sourceMap,
            style,
            useSpaces
          );
        node.accept$1(visitor);
        t1 = visitor._buffer;
        css = t1.toString$0(0);
        if (charset) {
          t2 = new H.CodeUnits(css);
          t2 = t2.any$1(t2, new N.serialize_closure0());
        } else t2 = false;
        if (t2)
          prefix =
            style === C.OutputStyle_compressed0
              ? '\ufeff'
              : '@charset "UTF-8";\n';
        else prefix = '';
        t2 = prefix + css;
        return new N.SerializeResult0(
          t2,
          sourceMap ? t1.buildSourceMap$1$prefix(prefix) : null
        );
      },
      serializeValue(value, inspect, quote) {
        var visitor = N._SerializeVisitor$(
          null,
          inspect,
          null,
          quote,
          false,
          null,
          true
        );
        value.accept$1(visitor);
        return visitor._buffer.toString$0(0);
      },
      serializeSelector0(selector, inspect) {
        var visitor = N._SerializeVisitor$(
          null,
          true,
          null,
          true,
          false,
          null,
          true
        );
        selector.accept$1(visitor);
        return visitor._buffer.toString$0(0);
      },
      _SerializeVisitor$(
        indentWidth,
        inspect,
        lineFeed,
        quote,
        sourceMap,
        style,
        useSpaces
      ) {
        var t1 = sourceMap
            ? new D.SourceMapBuffer(
                new P.StringBuffer(''),
                H._setArrayType([], type$.JSArray_Entry)
              )
            : new N.NoSourceMapBuffer(new P.StringBuffer('')),
          t2 = style == null ? C.OutputStyle_expanded : style,
          t3 = useSpaces ? 32 : 9,
          t4 = indentWidth == null ? 2 : indentWidth,
          t5 = lineFeed == null ? C.LineFeed_D6m : lineFeed;
        P.RangeError_checkValueInInterval(t4, 0, 10, 'indentWidth');
        return new N._SerializeVisitor(t1, t2, inspect, quote, t3, t4, t5);
      },
      serialize_closure0: function serialize_closure0() {},
      _SerializeVisitor: function _SerializeVisitor(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._buffer = t0;
        _._serialize0$_indentation = 0;
        _._serialize0$_style = t1;
        _._inspect = t2;
        _._serialize0$_quote = t3;
        _._serialize0$_indentCharacter = t4;
        _._serialize0$_indentWidth = t5;
        _._lineFeed = t6;
      },
      _SerializeVisitor_visitCssComment_closure0: function _SerializeVisitor_visitCssComment_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssAtRule_closure0: function _SerializeVisitor_visitCssAtRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssMediaRule_closure0: function _SerializeVisitor_visitCssMediaRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssImport_closure0: function _SerializeVisitor_visitCssImport_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssImport__closure0: function _SerializeVisitor_visitCssImport__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssKeyframeBlock_closure0: function _SerializeVisitor_visitCssKeyframeBlock_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssStyleRule_closure0: function _SerializeVisitor_visitCssStyleRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssSupportsRule_closure0: function _SerializeVisitor_visitCssSupportsRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssDeclaration_closure1: function _SerializeVisitor_visitCssDeclaration_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitCssDeclaration_closure2: function _SerializeVisitor_visitCssDeclaration_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _SerializeVisitor_visitList_closure2: function _SerializeVisitor_visitList_closure2() {},
      _SerializeVisitor_visitList_closure3: function _SerializeVisitor_visitList_closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _SerializeVisitor_visitList_closure4: function _SerializeVisitor_visitList_closure4(
        t0
      ) {
        this.$this = t0;
      },
      _SerializeVisitor_visitMap_closure0: function _SerializeVisitor_visitMap_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _SerializeVisitor_visitSelectorList_closure0: function _SerializeVisitor_visitSelectorList_closure0() {},
      _SerializeVisitor__write_closure0: function _SerializeVisitor__write_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _SerializeVisitor__visitChildren_closure0: function _SerializeVisitor__visitChildren_closure0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.children = t2;
      },
      OutputStyle0: function OutputStyle0(t0) {
        this._name = t0;
      },
      LineFeed0: function LineFeed0(t0, t1) {
        this.name = t0;
        this.text = t1;
      },
      SerializeResult0: function SerializeResult0(t0, t1) {
        this.css = t0;
        this.sourceMap = t1;
      },
      UnitlessSassNumber0: function UnitlessSassNumber0(t0, t1) {
        this.value = t0;
        this.asSlash = t1;
      },
      UniversalSelector0: function UniversalSelector0(t0) {
        this.namespace = t0;
      },
      warn0(message, deprecation) {
        var warnDefinition = $.Zone__current.$index(0, C.Symbol__warn);
        if (warnDefinition == null)
          throw H.wrapException(P.ArgumentError$(string$.warn__, null));
        warnDefinition.call$2(message, deprecation);
      },
      withWarnCallback0(warn, callback, $T) {
        var t1 = type$.nullable_Object;
        return P.runZoned(
          new N.withWarnCallback_closure0(callback, $T),
          P.LinkedHashMap_LinkedHashMap$_literal(
            [C.Symbol__warn, warn],
            t1,
            t1
          ),
          $T
        );
      },
      withWarnCallback_closure0: function withWarnCallback_closure0(t0, t1) {
        this.callback = t0;
        this.T = t1;
      },
    },
    O = {
      EmptyUnmodifiableSet: function EmptyUnmodifiableSet(t0) {
        this.$ti = t0;
      },
      _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin: function _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin() {},
      Style__getPlatformStyle() {
        if (P.Uri_base().get$scheme() !== 'file') return $.$get$Style_url();
        var t1 = P.Uri_base();
        if (!C.JSString_methods.endsWith$1(t1.get$path(t1), '/'))
          return $.$get$Style_url();
        if (P._Uri__Uri(null, 'a/b', null, null).toFilePath$0() === 'a\\b')
          return $.$get$Style_windows();
        return $.$get$Style_posix();
      },
      Style: function Style() {},
      NullExpression: function NullExpression(t0) {
        this.span = t0;
      },
      AsyncImportCache__toImporters(importers, loadPaths, packageConfig) {
        var t2,
          t3,
          _i,
          path,
          _null = null,
          sassPath = H._asStringQ(
            type$.Object._as(J.get$env$x(self.process)).SASS_PATH
          ),
          t1 = H._setArrayType([], type$.JSArray_AsyncImporter);
        for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          t1.push(
            new F.FilesystemImporter(
              $.$get$context().absolute$7(
                t3,
                _null,
                _null,
                _null,
                _null,
                _null,
                _null
              )
            )
          );
        }
        if (sassPath != null) {
          t2 = sassPath.split(
            J.$eq$(J.get$platform$x(self.process), 'win32') ? ';' : ':'
          );
          t3 = t2.length;
          _i = 0;
          for (; _i < t3; ++_i) {
            path = t2[_i];
            t1.push(
              new F.FilesystemImporter(
                $.$get$context().absolute$7(
                  path,
                  _null,
                  _null,
                  _null,
                  _null,
                  _null,
                  _null
                )
              )
            );
          }
        }
        return t1;
      },
      AsyncImportCache: function AsyncImportCache(t0, t1, t2, t3, t4) {
        var _ = this;
        _._async_import_cache$_importers = t0;
        _._async_import_cache$_logger = t1;
        _._async_import_cache$_canonicalizeCache = t2;
        _._async_import_cache$_importCache = t3;
        _._async_import_cache$_resultsCache = t4;
      },
      AsyncImportCache_canonicalize_closure: function AsyncImportCache_canonicalize_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.url = t1;
        this.forImport = t2;
      },
      AsyncImportCache__canonicalize_closure: function AsyncImportCache__canonicalize_closure(
        t0,
        t1
      ) {
        this.importer = t0;
        this.url = t1;
      },
      AsyncImportCache_importCanonical_closure: function AsyncImportCache_importCanonical_closure(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.originalUrl = t3;
        _.quiet = t4;
      },
      AsyncImportCache_humanize_closure: function AsyncImportCache_humanize_closure(
        t0
      ) {
        this.canonicalUrl = t0;
      },
      AsyncImportCache_humanize_closure0: function AsyncImportCache_humanize_closure0() {},
      AsyncImportCache_humanize_closure1: function AsyncImportCache_humanize_closure1() {},
      Environment$() {
        var t1 = type$.String,
          t2 = type$.Module_Callable,
          t3 = type$.AstNode,
          t4 = type$.int,
          t5 = type$.Callable,
          t6 = type$.JSArray_Map_String_Callable;
        return new O.Environment(
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          null,
          null,
          H._setArrayType([], type$.JSArray_Module_Callable),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)],
            type$.JSArray_Map_String_Value
          ),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, t3)],
            type$.JSArray_Map_String_AstNode
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          null
        );
      },
      Environment$_(
        _modules,
        _namespaceNodes,
        _globalModules,
        _importedModules,
        _forwardedModules,
        _nestedForwardedModules,
        _allModules,
        _variables,
        _variableNodes,
        _functions,
        _mixins,
        _content
      ) {
        var t1 = type$.String,
          t2 = type$.int;
        return new O.Environment(
          _modules,
          _namespaceNodes,
          _globalModules,
          _importedModules,
          _forwardedModules,
          _nestedForwardedModules,
          _allModules,
          _variables,
          _variableNodes,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _functions,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _mixins,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _content
        );
      },
      _EnvironmentModule__EnvironmentModule(
        environment,
        css,
        extensionStore,
        forwarded
      ) {
        var t1, t2, t3, t4, t5, t6;
        if (forwarded == null) forwarded = C.Set_empty;
        t1 = O._EnvironmentModule__makeModulesByVariable(forwarded);
        t2 = O._EnvironmentModule__memberMap(
          C.JSArray_methods.get$first(environment._variables),
          forwarded.map$1$1(
            0,
            new O._EnvironmentModule__EnvironmentModule_closure(),
            type$.Map_String_Value
          ),
          type$.Value
        );
        t3 = O._EnvironmentModule__memberMap(
          C.JSArray_methods.get$first(environment._variableNodes),
          forwarded.map$1$1(
            0,
            new O._EnvironmentModule__EnvironmentModule_closure0(),
            type$.Map_String_AstNode
          ),
          type$.AstNode
        );
        t4 = type$.Map_String_Callable;
        t5 = type$.Callable;
        t6 = O._EnvironmentModule__memberMap(
          C.JSArray_methods.get$first(environment._functions),
          forwarded.map$1$1(
            0,
            new O._EnvironmentModule__EnvironmentModule_closure1(),
            t4
          ),
          t5
        );
        t5 = O._EnvironmentModule__memberMap(
          C.JSArray_methods.get$first(environment._mixins),
          forwarded.map$1$1(
            0,
            new O._EnvironmentModule__EnvironmentModule_closure2(),
            t4
          ),
          t5
        );
        t4 =
          J.get$isNotEmpty$asx(css.get$children(css)) ||
          C.JSArray_methods.any$1(
            environment._allModules,
            new O._EnvironmentModule__EnvironmentModule_closure3()
          );
        return O._EnvironmentModule$_(
          environment,
          css,
          extensionStore,
          t1,
          t2,
          t3,
          t6,
          t5,
          t4,
          !extensionStore.get$isEmpty(extensionStore) ||
            C.JSArray_methods.any$1(
              environment._allModules,
              new O._EnvironmentModule__EnvironmentModule_closure4()
            )
        );
      },
      _EnvironmentModule__makeModulesByVariable(forwarded) {
        var modulesByVariable, t1, t2, t3, t4, t5;
        if (forwarded.get$isEmpty(forwarded)) return C.Map_empty;
        modulesByVariable = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.Module_Callable
        );
        for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0(); ) {
          t2 = t1.get$current();
          if (t2 instanceof O._EnvironmentModule) {
            for (
              t3 = t2._modulesByVariable,
                t3 = t3.get$values(t3),
                t3 = t3.get$iterator(t3);
              t3.moveNext$0();

            ) {
              t4 = t3.get$current();
              t5 = t4.get$variables();
              B.setAll(modulesByVariable, t5.get$keys(t5), t4);
            }
            B.setAll(
              modulesByVariable,
              J.get$keys$z(
                C.JSArray_methods.get$first(
                  t2._environment$_environment._variables
                )
              ),
              t2
            );
          } else {
            t3 = t2.get$variables();
            B.setAll(modulesByVariable, t3.get$keys(t3), t2);
          }
        }
        return modulesByVariable;
      },
      _EnvironmentModule__memberMap(localMap, otherMaps, $V) {
        var t1, t2, t3;
        localMap = new U.PublicMemberMapView(
          localMap,
          $V._eval$1('PublicMemberMapView<0>')
        );
        if (otherMaps.get$isEmpty(otherMaps)) return localMap;
        t1 = H._setArrayType([], $V._eval$1('JSArray<Map<String,0>>'));
        for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          if (t3.get$isNotEmpty(t3)) t1.push(t3);
        }
        t1.push(localMap);
        if (t1.length === 1) return localMap;
        return Z.MergedMapView$(t1, type$.String, $V);
      },
      _EnvironmentModule$_(
        _environment,
        css,
        extensionStore,
        _modulesByVariable,
        variables,
        variableNodes,
        functions,
        mixins,
        transitivelyContainsCss,
        transitivelyContainsExtensions
      ) {
        return new O._EnvironmentModule(
          _environment._allModules,
          variables,
          variableNodes,
          functions,
          mixins,
          extensionStore,
          css,
          transitivelyContainsCss,
          transitivelyContainsExtensions,
          _environment,
          _modulesByVariable
        );
      },
      Environment: function Environment(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._environment$_modules = t0;
        _._namespaceNodes = t1;
        _._globalModules = t2;
        _._importedModules = t3;
        _._forwardedModules = t4;
        _._nestedForwardedModules = t5;
        _._allModules = t6;
        _._variables = t7;
        _._variableNodes = t8;
        _._variableIndices = t9;
        _._functions = t10;
        _._functionIndices = t11;
        _._mixins = t12;
        _._mixinIndices = t13;
        _._content = t14;
        _._inMixin = false;
        _._inSemiGlobalScope = true;
        _._lastVariableIndex = _._lastVariableName = null;
      },
      Environment_importForwards_closure: function Environment_importForwards_closure() {},
      Environment_importForwards_closure0: function Environment_importForwards_closure0() {},
      Environment_importForwards_closure1: function Environment_importForwards_closure1() {},
      Environment__getVariableFromGlobalModule_closure: function Environment__getVariableFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      Environment_setVariable_closure: function Environment_setVariable_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      Environment_setVariable_closure0: function Environment_setVariable_closure0(
        t0
      ) {
        this.name = t0;
      },
      Environment_setVariable_closure1: function Environment_setVariable_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      Environment__getFunctionFromGlobalModule_closure: function Environment__getFunctionFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      Environment__getMixinFromGlobalModule_closure: function Environment__getMixinFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      Environment_toModule_closure: function Environment_toModule_closure() {},
      Environment_toDummyModule_closure: function Environment_toDummyModule_closure() {},
      Environment__fromOneModule_closure: function Environment__fromOneModule_closure(
        t0,
        t1
      ) {
        this.callback = t0;
        this.T = t1;
      },
      Environment__fromOneModule__closure: function Environment__fromOneModule__closure(
        t0,
        t1
      ) {
        this.entry = t0;
        this.T = t1;
      },
      _EnvironmentModule: function _EnvironmentModule(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10
      ) {
        var _ = this;
        _.upstream = t0;
        _.variables = t1;
        _.variableNodes = t2;
        _.functions = t3;
        _.mixins = t4;
        _.extensionStore = t5;
        _.css = t6;
        _.transitivelyContainsCss = t7;
        _.transitivelyContainsExtensions = t8;
        _._environment$_environment = t9;
        _._modulesByVariable = t10;
      },
      _EnvironmentModule__EnvironmentModule_closure: function _EnvironmentModule__EnvironmentModule_closure() {},
      _EnvironmentModule__EnvironmentModule_closure0: function _EnvironmentModule__EnvironmentModule_closure0() {},
      _EnvironmentModule__EnvironmentModule_closure1: function _EnvironmentModule__EnvironmentModule_closure1() {},
      _EnvironmentModule__EnvironmentModule_closure2: function _EnvironmentModule__EnvironmentModule_closure2() {},
      _EnvironmentModule__EnvironmentModule_closure3: function _EnvironmentModule__EnvironmentModule_closure3() {},
      _EnvironmentModule__EnvironmentModule_closure4: function _EnvironmentModule__EnvironmentModule_closure4() {},
      _SassNull: function _SassNull() {},
      AsyncImportCache$none(logger) {
        var t1 = logger == null ? C.C_StderrLogger : logger,
          t2 = type$.Uri;
        return new O.AsyncImportCache0(
          t1,
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.Tuple2_Uri_bool,
            type$.nullable_Tuple3_AsyncImporter_Uri_Uri_2
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.nullable_Stylesheet_2),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ImporterResult_2)
        );
      },
      AsyncImportCache0: function AsyncImportCache0(t0, t1, t2, t3) {
        var _ = this;
        _._async_import_cache0$_logger = t0;
        _._async_import_cache0$_canonicalizeCache = t1;
        _._async_import_cache0$_importCache = t2;
        _._async_import_cache0$_resultsCache = t3;
      },
      AsyncImportCache_canonicalize_closure0: function AsyncImportCache_canonicalize_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.url = t1;
        this.forImport = t2;
      },
      AsyncImportCache__canonicalize_closure0: function AsyncImportCache__canonicalize_closure0(
        t0,
        t1
      ) {
        this.importer = t0;
        this.url = t1;
      },
      AsyncImportCache_importCanonical_closure0: function AsyncImportCache_importCanonical_closure0(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.originalUrl = t3;
        _.quiet = t4;
      },
      AsyncImportCache_humanize_closure2: function AsyncImportCache_humanize_closure2(
        t0
      ) {
        this.canonicalUrl = t0;
      },
      AsyncImportCache_humanize_closure3: function AsyncImportCache_humanize_closure3() {},
      AsyncImportCache_humanize_closure4: function AsyncImportCache_humanize_closure4() {},
      NullExpression0: function NullExpression0(t0) {
        this.span = t0;
      },
      nullConstructor_closure: function nullConstructor_closure() {},
      nullConstructor__closure: function nullConstructor__closure() {},
      nullConstructor__closure0: function nullConstructor__closure0() {},
      _SassNull0: function _SassNull0() {},
    },
    P = {
      _AsyncRun__initializeScheduleImmediate() {
        var div,
          span,
          t1 = {};
        if (self.scheduleImmediate != null)
          return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
        if (self.MutationObserver != null && self.document != null) {
          div = self.document.createElement('div');
          span = self.document.createElement('span');
          t1.storedCallback = null;
          new self.MutationObserver(
            H.convertDartClosureToJS(
              new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1),
              1
            )
          ).observe(div, { childList: true });
          return new P._AsyncRun__initializeScheduleImmediate_closure(
            t1,
            div,
            span
          );
        } else if (self.setImmediate != null)
          return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
        return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
      },
      _AsyncRun__scheduleImmediateJsOverride(callback) {
        self.scheduleImmediate(
          H.convertDartClosureToJS(
            new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(
              callback
            ),
            0
          )
        );
      },
      _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
        self.setImmediate(
          H.convertDartClosureToJS(
            new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(
              callback
            ),
            0
          )
        );
      },
      _AsyncRun__scheduleImmediateWithTimer(callback) {
        P.Timer__createTimer(C.Duration_0, callback);
      },
      Timer__createTimer(duration, callback) {
        var milliseconds = C.JSInt_methods._tdivFast$1(
          duration._duration,
          1000
        );
        return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
      },
      _TimerImpl$(milliseconds, callback) {
        var t1 = new P._TimerImpl();
        t1._TimerImpl$2(milliseconds, callback);
        return t1;
      },
      _TimerImpl$periodic(milliseconds, callback) {
        var t1 = new P._TimerImpl();
        t1._TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      },
      _makeAsyncAwaitCompleter($T) {
        return new P._AsyncAwaitCompleter(
          new P._Future($.Zone__current, $T._eval$1('_Future<0>')),
          $T._eval$1('_AsyncAwaitCompleter<0>')
        );
      },
      _asyncStartSync(bodyFunction, completer) {
        bodyFunction.call$2(0, null);
        completer.isSync = true;
        return completer._future;
      },
      _asyncAwait(object, bodyFunction) {
        P._awaitOnObject(object, bodyFunction);
      },
      _asyncReturn(object, completer) {
        completer.complete$1(object);
      },
      _asyncRethrow(object, completer) {
        completer.completeError$2(
          H.unwrapException(object),
          H.getTraceFromException(object)
        );
      },
      _awaitOnObject(object, bodyFunction) {
        var t1,
          future,
          thenCallback = new P._awaitOnObject_closure(bodyFunction),
          errorCallback = new P._awaitOnObject_closure0(bodyFunction);
        if (object instanceof P._Future)
          object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
        else {
          t1 = type$.dynamic;
          if (type$.Future_dynamic._is(object))
            object.then$1$2$onError(0, thenCallback, errorCallback, t1);
          else {
            future = new P._Future($.Zone__current, type$._Future_dynamic);
            future._state = 8;
            future._resultOrListeners = object;
            future._thenAwait$1$2(thenCallback, errorCallback, t1);
          }
        }
      },
      _wrapJsFunctionForAsync($function) {
        var $protected = (function (fn, ERROR) {
          return function (errorCode, result) {
            while (true)
              try {
                fn(errorCode, result);
                break;
              } catch (error) {
                result = error;
                errorCode = ERROR;
              }
          };
        })($function, 1);
        return $.Zone__current.registerBinaryCallback$3$1(
          new P._wrapJsFunctionForAsync_closure($protected),
          type$.void,
          type$.int,
          type$.dynamic
        );
      },
      _IterationMarker_yieldStar(values) {
        return new P._IterationMarker(values, 1);
      },
      _IterationMarker_endOfIteration() {
        return C._IterationMarker_null_2;
      },
      _IterationMarker_uncaughtError(error) {
        return new P._IterationMarker(error, 3);
      },
      _makeSyncStarIterable(body, $T) {
        return new P._SyncStarIterable(
          body,
          $T._eval$1('_SyncStarIterable<0>')
        );
      },
      AsyncError$(error, stackTrace) {
        var t1 = H.checkNotNullable(error, 'error', type$.Object);
        return new P.AsyncError(
          t1,
          stackTrace == null
            ? P.AsyncError_defaultStackTrace(error)
            : stackTrace
        );
      },
      AsyncError_defaultStackTrace(error) {
        var stackTrace;
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace != null) return stackTrace;
        }
        return C._StringStackTrace_3uE;
      },
      _Future__chainCoreFuture(source, target) {
        var t1, listeners;
        for (; (t1 = source._state), (t1 & 4) !== 0; )
          source = source._resultOrListeners;
        if ((t1 & 24) !== 0) {
          listeners = target._removeListeners$0();
          target._cloneResult$1(source);
          P._Future__propagateToListeners(target, listeners);
        } else {
          listeners = target._resultOrListeners;
          target._state = (target._state & 1) | 4;
          target._resultOrListeners = source;
          source._prependListeners$1(listeners);
        }
      },
      _Future__propagateToListeners(source, listeners) {
        var t2,
          _box_0,
          t3,
          t4,
          hasError,
          nextListener,
          nextListener0,
          sourceResult,
          t5,
          zone,
          oldZone,
          result,
          current,
          _box_1 = {},
          t1 = (_box_1.source = source);
        for (t2 = type$.Future_dynamic; true; ) {
          _box_0 = {};
          t3 = t1._state;
          t4 = (t3 & 16) === 0;
          hasError = !t4;
          if (listeners == null) {
            if (hasError && (t3 & 1) === 0) {
              t2 = t1._resultOrListeners;
              t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
            }
            return;
          }
          _box_0.listener = listeners;
          nextListener = listeners._nextListener;
          for (
            t1 = listeners;
            nextListener != null;
            t1 = nextListener, nextListener = nextListener0
          ) {
            t1._nextListener = null;
            P._Future__propagateToListeners(_box_1.source, t1);
            _box_0.listener = nextListener;
            nextListener0 = nextListener._nextListener;
          }
          t3 = _box_1.source;
          sourceResult = t3._resultOrListeners;
          _box_0.listenerHasError = hasError;
          _box_0.listenerValueOrError = sourceResult;
          if (t4) {
            t5 = t1.state;
            t5 = (t5 & 1) !== 0 || (t5 & 15) === 8;
          } else t5 = true;
          if (t5) {
            zone = t1.result._zone;
            if (hasError) {
              t1 = t3._zone;
              t1 = !(
                t1 === zone || t1.get$errorZone() === zone.get$errorZone()
              );
            } else t1 = false;
            if (t1) {
              t1 = _box_1.source;
              t2 = t1._resultOrListeners;
              t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone !== zone) $.Zone__current = zone;
            else oldZone = null;
            t1 = _box_0.listener.state;
            if ((t1 & 15) === 8)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(
                _box_0,
                _box_1,
                hasError
              ).call$0();
            else if (t4) {
              if ((t1 & 1) !== 0)
                new P._Future__propagateToListeners_handleValueCallback(
                  _box_0,
                  sourceResult
                ).call$0();
            } else if ((t1 & 2) !== 0)
              new P._Future__propagateToListeners_handleError(
                _box_1,
                _box_0
              ).call$0();
            if (oldZone != null) $.Zone__current = oldZone;
            t1 = _box_0.listenerValueOrError;
            if (t2._is(t1)) {
              t3 = _box_0.listener.$ti;
              t3 = t3._eval$1('Future<2>')._is(t1) || !t3._rest[1]._is(t1);
            } else t3 = false;
            if (t3) {
              result = _box_0.listener.result;
              if ((t1._state & 24) !== 0) {
                current = result._resultOrListeners;
                result._resultOrListeners = null;
                listeners = result._reverseListeners$1(current);
                result._state = (t1._state & 30) | (result._state & 1);
                result._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else P._Future__chainCoreFuture(t1, result);
              return;
            }
          }
          result = _box_0.listener.result;
          current = result._resultOrListeners;
          result._resultOrListeners = null;
          listeners = result._reverseListeners$1(current);
          t1 = _box_0.listenerHasError;
          t3 = _box_0.listenerValueOrError;
          if (!t1) {
            result._state = 8;
            result._resultOrListeners = t3;
          } else {
            result._state = (result._state & 1) | 16;
            result._resultOrListeners = t3;
          }
          _box_1.source = result;
          t1 = result;
        }
      },
      _registerErrorHandler(errorHandler, zone) {
        if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
          return zone.registerBinaryCallback$3$1(
            errorHandler,
            type$.dynamic,
            type$.Object,
            type$.StackTrace
          );
        if (type$.dynamic_Function_Object._is(errorHandler))
          return zone.registerUnaryCallback$2$1(
            errorHandler,
            type$.dynamic,
            type$.Object
          );
        throw H.wrapException(
          P.ArgumentError$value(errorHandler, 'onError', string$.Error_)
        );
      },
      _microtaskLoop() {
        var entry, next;
        for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
          $._lastPriorityCallback = null;
          next = entry.next;
          $._nextCallback = next;
          if (next == null) $._lastCallback = null;
          entry.callback.call$0();
        }
      },
      _startMicrotaskLoop() {
        $._isInCallbackLoop = true;
        try {
          P._microtaskLoop();
        } finally {
          $._lastPriorityCallback = null;
          $._isInCallbackLoop = false;
          if ($._nextCallback != null)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(
              P.async___startMicrotaskLoop$closure()
            );
        }
      },
      _scheduleAsyncCallback(callback) {
        var newEntry = new P._AsyncCallbackEntry(callback),
          lastCallback = $._lastCallback;
        if (lastCallback == null) {
          $._nextCallback = $._lastCallback = newEntry;
          if (!$._isInCallbackLoop)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(
              P.async___startMicrotaskLoop$closure()
            );
        } else $._lastCallback = lastCallback.next = newEntry;
      },
      _schedulePriorityAsyncCallback(callback) {
        var entry,
          lastPriorityCallback,
          next,
          t1 = $._nextCallback;
        if (t1 == null) {
          P._scheduleAsyncCallback(callback);
          $._lastPriorityCallback = $._lastCallback;
          return;
        }
        entry = new P._AsyncCallbackEntry(callback);
        lastPriorityCallback = $._lastPriorityCallback;
        if (lastPriorityCallback == null) {
          entry.next = t1;
          $._nextCallback = $._lastPriorityCallback = entry;
        } else {
          next = lastPriorityCallback.next;
          entry.next = next;
          $._lastPriorityCallback = lastPriorityCallback.next = entry;
          if (next == null) $._lastCallback = entry;
        }
      },
      scheduleMicrotask(callback) {
        var t1,
          _null = null,
          currentZone = $.Zone__current;
        if (C.C__RootZone === currentZone) {
          P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
          return;
        }
        if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
          t1 = C.C__RootZone.get$errorZone() === currentZone.get$errorZone();
        else t1 = false;
        if (t1) {
          P._rootScheduleMicrotask(
            _null,
            _null,
            currentZone,
            currentZone.registerCallback$1$1(callback, type$.void)
          );
          return;
        }
        t1 = $.Zone__current;
        t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
      },
      StreamIterator_StreamIterator(stream) {
        return new P._StreamIterator(
          H.checkNotNullable(stream, 'stream', type$.Object)
        );
      },
      StreamController_StreamController(onCancel, onListen, $T) {
        return new P._AsyncStreamController(
          onListen,
          null,
          null,
          onCancel,
          $T._eval$1('_AsyncStreamController<0>')
        );
      },
      _runGuarded(notificationHandler) {
        var e, s, exception;
        if (notificationHandler == null) return;
        try {
          notificationHandler.call$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          $.Zone__current.handleUncaughtError$2(e, s);
        }
      },
      _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
        var t1 =
          handleData == null ? P.async___nullDataHandler$closure() : handleData;
        return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
      },
      _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
        if (type$.void_Function_Object_StackTrace._is(handleError))
          return zone.registerBinaryCallback$3$1(
            handleError,
            type$.dynamic,
            type$.Object,
            type$.StackTrace
          );
        if (type$.void_Function_Object._is(handleError))
          return zone.registerUnaryCallback$2$1(
            handleError,
            type$.dynamic,
            type$.Object
          );
        throw H.wrapException(
          P.ArgumentError$(
            'handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.',
            null
          )
        );
      },
      _nullDataHandler(value) {},
      _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
        P._rootHandleError(error, stackTrace);
      },
      _rootHandleError(error, stackTrace) {
        P._schedulePriorityAsyncCallback(
          new P._rootHandleError_closure(error, stackTrace)
        );
      },
      _rootRun($self, $parent, zone, f) {
        var old,
          t1 = $.Zone__current;
        if (t1 === zone) return f.call$0();
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$0();
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootRunUnary($self, $parent, zone, f, arg) {
        var old,
          t1 = $.Zone__current;
        if (t1 === zone) return f.call$1(arg);
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$1(arg);
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootRunBinary($self, $parent, zone, f, arg1, arg2) {
        var old,
          t1 = $.Zone__current;
        if (t1 === zone) return f.call$2(arg1, arg2);
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$2(arg1, arg2);
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootRegisterCallback($self, $parent, zone, f) {
        return f;
      },
      _rootRegisterUnaryCallback($self, $parent, zone, f) {
        return f;
      },
      _rootRegisterBinaryCallback($self, $parent, zone, f) {
        return f;
      },
      _rootErrorCallback($self, $parent, zone, error, stackTrace) {
        return null;
      },
      _rootScheduleMicrotask($self, $parent, zone, f) {
        var t1, t2;
        if (C.C__RootZone !== zone) {
          t1 = C.C__RootZone.get$errorZone();
          t2 = zone.get$errorZone();
          f =
            t1 !== t2
              ? zone.bindCallbackGuarded$1(f)
              : zone.bindCallback$1$1(f, type$.void);
        }
        P._scheduleAsyncCallback(f);
      },
      _rootCreateTimer($self, $parent, zone, duration, callback) {
        return P.Timer__createTimer(
          duration,
          C.C__RootZone !== zone
            ? zone.bindCallback$1$1(callback, type$.void)
            : callback
        );
      },
      _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
        var milliseconds;
        if (C.C__RootZone !== zone)
          callback = zone.bindUnaryCallback$2$1(
            callback,
            type$.void,
            type$.Timer
          );
        milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
        return P._TimerImpl$periodic(
          milliseconds < 0 ? 0 : milliseconds,
          callback
        );
      },
      _rootPrint($self, $parent, zone, line) {
        H.printString(line);
      },
      _printToZone(line) {
        $.Zone__current.print$1(line);
      },
      _rootFork($self, $parent, zone, specification, zoneValues) {
        var valueMap, t1, handleUncaughtError;
        $.printToZone = P.async___printToZone$closure();
        if (specification == null) specification = C._ZoneSpecification_ALf;
        if (zoneValues == null) valueMap = zone.get$_async$_map();
        else {
          t1 = type$.nullable_Object;
          valueMap = P.HashMap_HashMap$from(zoneValues, t1, t1);
        }
        t1 = new P._CustomZone(
          zone.get$_run(),
          zone.get$_runUnary(),
          zone.get$_runBinary(),
          zone.get$_registerCallback(),
          zone.get$_registerUnaryCallback(),
          zone.get$_registerBinaryCallback(),
          zone.get$_errorCallback(),
          zone.get$_scheduleMicrotask(),
          zone.get$_createTimer(),
          zone.get$_createPeriodicTimer(),
          zone.get$_print(),
          zone.get$_fork(),
          zone.get$_handleUncaughtError(),
          zone,
          valueMap
        );
        handleUncaughtError = specification.handleUncaughtError;
        if (handleUncaughtError != null)
          t1._handleUncaughtError = new P._ZoneFunction(
            t1,
            handleUncaughtError
          );
        return t1;
      },
      runZoned(body, zoneValues, $R) {
        H.checkNotNullable(body, 'body', $R._eval$1('0()'));
        return P._runZoned(body, zoneValues, null, $R);
      },
      _runZoned(body, zoneValues, specification, $R) {
        return $.Zone__current.fork$2$specification$zoneValues(
          specification,
          zoneValues
        ).run$1$1(body, $R);
      },
      _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(
        t0
      ) {
        this._box_0 = t0;
      },
      _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.div = t1;
        this.span = t2;
      },
      _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(
        t0
      ) {
        this.callback = t0;
      },
      _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(
        t0
      ) {
        this.callback = t0;
      },
      _TimerImpl: function _TimerImpl() {
        this._tick = 0;
      },
      _TimerImpl_internalCallback: function _TimerImpl_internalCallback(
        t0,
        t1
      ) {
        this.$this = t0;
        this.callback = t1;
      },
      _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.milliseconds = t1;
        _.start = t2;
        _.callback = t3;
      },
      _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
        this._future = t0;
        this.isSync = false;
        this.$ti = t1;
      },
      _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
        this.bodyFunction = t0;
      },
      _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
        this.bodyFunction = t0;
      },
      _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(
        t0
      ) {
        this.$protected = t0;
      },
      _IterationMarker: function _IterationMarker(t0, t1) {
        this.value = t0;
        this.state = t1;
      },
      _SyncStarIterator: function _SyncStarIterator(t0) {
        var _ = this;
        _._body = t0;
        _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      },
      _SyncStarIterable: function _SyncStarIterable(t0, t1) {
        this._outerHelper = t0;
        this.$ti = t1;
      },
      AsyncError: function AsyncError(t0, t1) {
        this.error = t0;
        this.stackTrace = t1;
      },
      _Completer: function _Completer() {},
      _AsyncCompleter: function _AsyncCompleter(t0, t1) {
        this.future = t0;
        this.$ti = t1;
      },
      _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
        var _ = this;
        _._nextListener = null;
        _.result = t0;
        _.state = t1;
        _.callback = t2;
        _.errorCallback = t3;
        _.$ti = t4;
      },
      _Future: function _Future(t0, t1) {
        var _ = this;
        _._state = 0;
        _._zone = t0;
        _._resultOrListeners = null;
        _.$ti = t1;
      },
      _Future__addListener_closure: function _Future__addListener_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.listener = t1;
      },
      _Future__prependListeners_closure: function _Future__prependListeners_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(
        t0
      ) {
        this.$this = t0;
      },
      _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.e = t1;
        this.s = t2;
      },
      _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _Future__chainFuture_closure: function _Future__chainFuture_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.value = t1;
      },
      _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.error = t1;
        this.stackTrace = t2;
      },
      _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this._box_1 = t1;
        this.hasError = t2;
      },
      _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(
        t0
      ) {
        this.originalSource = t0;
      },
      _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.sourceResult = t1;
      },
      _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(
        t0,
        t1
      ) {
        this._box_1 = t0;
        this._box_0 = t1;
      },
      _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
        this.callback = t0;
        this.next = null;
      },
      Stream: function Stream() {},
      Stream_length_closure: function Stream_length_closure(t0, t1) {
        this._box_0 = t0;
        this.$this = t1;
      },
      Stream_length_closure0: function Stream_length_closure0(t0, t1) {
        this._box_0 = t0;
        this.future = t1;
      },
      StreamTransformerBase: function StreamTransformerBase() {},
      _StreamController: function _StreamController() {},
      _StreamController__subscribe_closure: function _StreamController__subscribe_closure(
        t0
      ) {
        this.$this = t0;
      },
      _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(
        t0
      ) {
        this.$this = t0;
      },
      _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {},
      _AsyncStreamController: function _AsyncStreamController(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _._varData = null;
        _._state = 0;
        _._doneFuture = null;
        _.onListen = t0;
        _.onPause = t1;
        _.onResume = t2;
        _.onCancel = t3;
        _.$ti = t4;
      },
      _ControllerStream: function _ControllerStream(t0, t1) {
        this._controller = t0;
        this.$ti = t1;
      },
      _ControllerSubscription: function _ControllerSubscription(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._controller = t0;
        _._onData = t1;
        _._onError = t2;
        _._onDone = t3;
        _._zone = t4;
        _._state = t5;
        _._pending = _._cancelFuture = null;
        _.$ti = t6;
      },
      _BufferingStreamSubscription: function _BufferingStreamSubscription() {},
      _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.error = t1;
        this.stackTrace = t2;
      },
      _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(
        t0
      ) {
        this.$this = t0;
      },
      _StreamImpl: function _StreamImpl() {},
      _DelayedEvent: function _DelayedEvent() {},
      _DelayedData: function _DelayedData(t0) {
        this.value = t0;
        this.next = null;
      },
      _DelayedError: function _DelayedError(t0, t1) {
        this.error = t0;
        this.stackTrace = t1;
        this.next = null;
      },
      _DelayedDone: function _DelayedDone() {},
      _PendingEvents: function _PendingEvents() {},
      _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.dispatch = t1;
      },
      _StreamImplEvents: function _StreamImplEvents() {
        this.lastPendingEvent = this.firstPendingEvent = null;
        this._state = 0;
      },
      _StreamIterator: function _StreamIterator(t0) {
        this._subscription = null;
        this._stateData = t0;
        this._async$_hasValue = false;
      },
      _ZoneFunction: function _ZoneFunction(t0, t1) {
        this.zone = t0;
        this.$function = t1;
      },
      _RunNullaryZoneFunction: function _RunNullaryZoneFunction(t0, t1) {
        this.zone = t0;
        this.$function = t1;
      },
      _RunUnaryZoneFunction: function _RunUnaryZoneFunction(t0, t1) {
        this.zone = t0;
        this.$function = t1;
      },
      _RunBinaryZoneFunction: function _RunBinaryZoneFunction(t0, t1) {
        this.zone = t0;
        this.$function = t1;
      },
      _RegisterNullaryZoneFunction: function _RegisterNullaryZoneFunction(
        t0,
        t1
      ) {
        this.zone = t0;
        this.$function = t1;
      },
      _RegisterUnaryZoneFunction: function _RegisterUnaryZoneFunction(t0, t1) {
        this.zone = t0;
        this.$function = t1;
      },
      _RegisterBinaryZoneFunction: function _RegisterBinaryZoneFunction(
        t0,
        t1
      ) {
        this.zone = t0;
        this.$function = t1;
      },
      _ZoneSpecification: function _ZoneSpecification(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12
      ) {
        var _ = this;
        _.handleUncaughtError = t0;
        _.run = t1;
        _.runUnary = t2;
        _.runBinary = t3;
        _.registerCallback = t4;
        _.registerUnaryCallback = t5;
        _.registerBinaryCallback = t6;
        _.errorCallback = t7;
        _.scheduleMicrotask = t8;
        _.createTimer = t9;
        _.createPeriodicTimer = t10;
        _.print = t11;
        _.fork = t12;
      },
      _ZoneDelegate: function _ZoneDelegate(t0) {
        this._delegationTarget = t0;
      },
      _Zone: function _Zone() {},
      _CustomZone: function _CustomZone(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._run = t0;
        _._runUnary = t1;
        _._runBinary = t2;
        _._registerCallback = t3;
        _._registerUnaryCallback = t4;
        _._registerBinaryCallback = t5;
        _._errorCallback = t6;
        _._scheduleMicrotask = t7;
        _._createTimer = t8;
        _._createPeriodicTimer = t9;
        _._print = t10;
        _._fork = t11;
        _._handleUncaughtError = t12;
        _._delegateCache = null;
        _.parent = t13;
        _._async$_map = t14;
      },
      _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.registered = t1;
        this.R = t2;
      },
      _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.registered = t1;
        _.T = t2;
        _.R = t3;
      },
      _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.registered = t1;
      },
      _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
        this.error = t0;
        this.stackTrace = t1;
      },
      _RootZone: function _RootZone() {},
      _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.f = t1;
        this.R = t2;
      },
      _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.f = t1;
        _.T = t2;
        _.R = t3;
      },
      _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.f = t1;
      },
      HashMap_HashMap($K, $V) {
        return new P._HashMap(
          $K._eval$1('@<0>')._bind$1($V)._eval$1('_HashMap<1,2>')
        );
      },
      _HashMap__getTableEntry(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      },
      _HashMap__setTableEntry(table, key, value) {
        if (value == null) table[key] = table;
        else table[key] = value;
      },
      _HashMap__newHashTable() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, '<non-identifier-key>', table);
        delete table['<non-identifier-key>'];
        return table;
      },
      LinkedHashMap_LinkedHashMap(equals, hashCode, isValidKey, $K, $V) {
        if (isValidKey == null)
          if (hashCode == null) {
            if (equals == null)
              return new H.JsLinkedHashMap(
                $K._eval$1('@<0>')._bind$1($V)._eval$1('JsLinkedHashMap<1,2>')
              );
            hashCode = P.collection___defaultHashCode$closure();
          } else {
            if (
              P.core__identityHashCode$closure() === hashCode &&
              P.core__identical$closure() === equals
            )
              return P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(
                $K,
                $V
              );
            if (equals == null) equals = P.collection___defaultEquals$closure();
          }
        else {
          if (hashCode == null)
            hashCode = P.collection___defaultHashCode$closure();
          if (equals == null) equals = P.collection___defaultEquals$closure();
        }
        return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
      },
      LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
        return H.fillLiteralMap(
          keyValuePairs,
          new H.JsLinkedHashMap(
            $K._eval$1('@<0>')._bind$1($V)._eval$1('JsLinkedHashMap<1,2>')
          )
        );
      },
      LinkedHashMap_LinkedHashMap$_empty($K, $V) {
        return new H.JsLinkedHashMap(
          $K._eval$1('@<0>')._bind$1($V)._eval$1('JsLinkedHashMap<1,2>')
        );
      },
      _LinkedIdentityHashMap__LinkedIdentityHashMap$es6($K, $V) {
        return new P._LinkedIdentityHashMap(
          $K._eval$1('@<0>')._bind$1($V)._eval$1('_LinkedIdentityHashMap<1,2>')
        );
      },
      _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
        var t1 =
          validKey != null ? validKey : new P._LinkedCustomHashMap_closure($K);
        return new P._LinkedCustomHashMap(
          _equals,
          _hashCode,
          t1,
          $K._eval$1('@<0>')._bind$1($V)._eval$1('_LinkedCustomHashMap<1,2>')
        );
      },
      LinkedHashSet_LinkedHashSet($E) {
        return new P._LinkedHashSet($E._eval$1('_LinkedHashSet<0>'));
      },
      LinkedHashSet_LinkedHashSet$_empty($E) {
        return new P._LinkedHashSet($E._eval$1('_LinkedHashSet<0>'));
      },
      LinkedHashSet_LinkedHashSet$_literal(values, $E) {
        return H.fillLiteralSet(
          values,
          new P._LinkedHashSet($E._eval$1('_LinkedHashSet<0>'))
        );
      },
      _LinkedHashSet__newHashTable() {
        var table = Object.create(null);
        table['<non-identifier-key>'] = table;
        delete table['<non-identifier-key>'];
        return table;
      },
      _LinkedHashSetIterator$(_set, _modifications) {
        var t1 = new P._LinkedHashSetIterator(_set, _modifications);
        t1._collection$_cell = _set._collection$_first;
        return t1;
      },
      UnmodifiableListView$(source, $E) {
        return new P.UnmodifiableListView(
          source,
          $E._eval$1('UnmodifiableListView<0>')
        );
      },
      _defaultEquals(a, b) {
        return J.$eq$(a, b);
      },
      _defaultHashCode(a) {
        return J.get$hashCode$(a);
      },
      HashMap_HashMap$from(other, $K, $V) {
        var result = P.HashMap_HashMap($K, $V);
        other.forEach$1(0, new P.HashMap_HashMap$from_closure(result, $K, $V));
        return result;
      },
      IterableBase_iterableToShortString(
        iterable,
        leftDelimiter,
        rightDelimiter
      ) {
        var parts, t1;
        if (P._isToStringVisiting(iterable)) {
          if (leftDelimiter === '(' && rightDelimiter === ')') return '(...)';
          return leftDelimiter + '...' + rightDelimiter;
        }
        parts = H._setArrayType([], type$.JSArray_String);
        $._toStringVisiting.push(iterable);
        try {
          P._iterablePartsToStrings(iterable, parts);
        } finally {
          $._toStringVisiting.pop();
        }
        t1 =
          P.StringBuffer__writeAll(leftDelimiter, parts, ', ') + rightDelimiter;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      IterableBase_iterableToFullString(
        iterable,
        leftDelimiter,
        rightDelimiter
      ) {
        var buffer, t1;
        if (P._isToStringVisiting(iterable))
          return leftDelimiter + '...' + rightDelimiter;
        buffer = new P.StringBuffer(leftDelimiter);
        $._toStringVisiting.push(iterable);
        try {
          t1 = buffer;
          t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ', ');
        } finally {
          $._toStringVisiting.pop();
        }
        buffer._contents += rightDelimiter;
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _isToStringVisiting(o) {
        var t1, i;
        for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
          if (o === $._toStringVisiting[i]) return true;
        return false;
      },
      _iterablePartsToStrings(iterable, parts) {
        var next,
          ultimateString,
          penultimateString,
          penultimate,
          ultimate,
          ultimate0,
          elision,
          it = iterable.get$iterator(iterable),
          $length = 0,
          count = 0;
        while (true) {
          if (!($length < 80 || count < 3)) break;
          if (!it.moveNext$0()) return;
          next = H.S(it.get$current());
          parts.push(next);
          $length += next.length + 2;
          ++count;
        }
        if (!it.moveNext$0()) {
          if (count <= 5) return;
          ultimateString = parts.pop();
          penultimateString = parts.pop();
        } else {
          penultimate = it.get$current();
          ++count;
          if (!it.moveNext$0()) {
            if (count <= 4) {
              parts.push(H.S(penultimate));
              return;
            }
            ultimateString = H.S(penultimate);
            penultimateString = parts.pop();
            $length += ultimateString.length + 2;
          } else {
            ultimate = it.get$current();
            ++count;
            for (
              ;
              it.moveNext$0();
              penultimate = ultimate, ultimate = ultimate0
            ) {
              ultimate0 = it.get$current();
              ++count;
              if (count > 100) {
                while (true) {
                  if (!($length > 75 && count > 3)) break;
                  $length -= parts.pop().length + 2;
                  --count;
                }
                parts.push('...');
                return;
              }
            }
            penultimateString = H.S(penultimate);
            ultimateString = H.S(ultimate);
            $length += ultimateString.length + penultimateString.length + 4;
          }
        }
        if (count > parts.length + 2) {
          $length += 5;
          elision = '...';
        } else elision = null;
        while (true) {
          if (!($length > 80 && parts.length > 3)) break;
          $length -= parts.pop().length + 2;
          if (elision == null) {
            $length += 5;
            elision = '...';
          }
        }
        if (elision != null) parts.push(elision);
        parts.push(penultimateString);
        parts.push(ultimateString);
      },
      LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
        var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
        other.forEach$1(
          0,
          new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V)
        );
        return result;
      },
      LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
        var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
        t1.addAll$1(0, other);
        return t1;
      },
      LinkedHashSet_LinkedHashSet$from(elements, $E) {
        var t1,
          _i,
          result = P.LinkedHashSet_LinkedHashSet($E);
        for (
          t1 = elements.length, _i = 0;
          _i < elements.length;
          elements.length === t1 ||
            (0, H.throwConcurrentModificationError)(elements),
            ++_i
        )
          result.add$1(0, $E._as(elements[_i]));
        return result;
      },
      LinkedHashSet_LinkedHashSet$of(elements, $E) {
        var t1 = P.LinkedHashSet_LinkedHashSet($E);
        t1.addAll$1(0, elements);
        return t1;
      },
      ListMixin__compareAny(a, b) {
        var t1 = type$.Comparable_dynamic;
        return J.compareTo$1$ns(t1._as(a), t1._as(b));
      },
      MapBase_mapToString(m) {
        var result,
          t1 = {};
        if (P._isToStringVisiting(m)) return '{...}';
        result = new P.StringBuffer('');
        try {
          $._toStringVisiting.push(m);
          result._contents += '{';
          t1.first = true;
          m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
          result._contents += '}';
        } finally {
          $._toStringVisiting.pop();
        }
        t1 = result._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      MapBase__fillMapWithIterables(map, keys, values) {
        var keyIterator = keys.get$iterator(keys),
          valueIterator = values.get$iterator(values),
          hasNextKey = keyIterator.moveNext$0(),
          hasNextValue = valueIterator.moveNext$0();
        while (true) {
          if (!(hasNextKey && hasNextValue)) break;
          map.$indexSet(
            0,
            keyIterator.get$current(),
            valueIterator.get$current()
          );
          hasNextKey = keyIterator.moveNext$0();
          hasNextValue = valueIterator.moveNext$0();
        }
        if (hasNextKey || hasNextValue)
          throw H.wrapException(
            P.ArgumentError$('Iterables do not have same length.', null)
          );
      },
      ListQueue$($E) {
        return new P.ListQueue(
          P.List_List$filled(
            P.ListQueue__calculateCapacity(null),
            null,
            false,
            $E._eval$1('0?')
          ),
          $E._eval$1('ListQueue<0>')
        );
      },
      ListQueue__calculateCapacity(initialCapacity) {
        return 8;
      },
      ListQueue_ListQueue$of(elements, $E) {
        var t1 = P.ListQueue$($E);
        t1.addAll$1(0, elements);
        return t1;
      },
      ListQueue__nextPowerOf2(number) {
        var nextNumber;
        number = ((number << 1) >>> 0) - 1;
        for (; true; number = nextNumber) {
          nextNumber = (number & (number - 1)) >>> 0;
          if (nextNumber === 0) return number;
        }
      },
      _ListQueueIterator$(queue) {
        return new P._ListQueueIterator(
          queue,
          queue._collection$_tail,
          queue._modificationCount,
          queue._collection$_head
        );
      },
      _UnmodifiableSetMixin__throwUnmodifiable() {
        throw H.wrapException(
          P.UnsupportedError$('Cannot change an unmodifiable set')
        );
      },
      _HashMap: function _HashMap(t0) {
        var _ = this;
        _._collection$_length = 0;
        _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
        _.$ti = t0;
      },
      _HashMap_values_closure: function _HashMap_values_closure(t0) {
        this.$this = t0;
      },
      _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
        this.$this = t0;
      },
      _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1) {
        var _ = this;
        _._map = t0;
        _._keys = t1;
        _._offset = 0;
        _._collection$_current = null;
      },
      _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
        var _ = this;
        _.__js_helper$_length = 0;
        _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
        _._modifications = 0;
        _.$ti = t0;
      },
      _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
        var _ = this;
        _._equals = t0;
        _._hashCode = t1;
        _._validKey = t2;
        _.__js_helper$_length = 0;
        _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
        _._modifications = 0;
        _.$ti = t3;
      },
      _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
        this.K = t0;
      },
      _LinkedHashSet: function _LinkedHashSet(t0) {
        var _ = this;
        _._collection$_length = 0;
        _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
        _._collection$_modifications = 0;
        _.$ti = t0;
      },
      _LinkedIdentityHashSet: function _LinkedIdentityHashSet(t0) {
        var _ = this;
        _._collection$_length = 0;
        _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
        _._collection$_modifications = 0;
        _.$ti = t0;
      },
      _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
        this._element = t0;
        this._collection$_previous = this._collection$_next = null;
      },
      _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1) {
        var _ = this;
        _._set = t0;
        _._collection$_modifications = t1;
        _._collection$_current = _._collection$_cell = null;
      },
      UnmodifiableListView: function UnmodifiableListView(t0, t1) {
        this._collection$_source = t0;
        this.$ti = t1;
      },
      HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(
        t0,
        t1,
        t2
      ) {
        this.result = t0;
        this.K = t1;
        this.V = t2;
      },
      IterableBase: function IterableBase() {},
      LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(
        t0,
        t1,
        t2
      ) {
        this.result = t0;
        this.K = t1;
        this.V = t2;
      },
      ListBase: function ListBase() {},
      ListMixin: function ListMixin() {},
      MapBase: function MapBase() {},
      MapBase_mapToString_closure: function MapBase_mapToString_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.result = t1;
      },
      MapMixin: function MapMixin() {},
      MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
        this.$this = t0;
      },
      UnmodifiableMapBase: function UnmodifiableMapBase() {},
      _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1) {
        this._keys = t0;
        this._map = t1;
        this._collection$_current = null;
      },
      _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {},
      MapView: function MapView() {},
      UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      ListQueue: function ListQueue(t0, t1) {
        var _ = this;
        _._collection$_table = t0;
        _._modificationCount = _._collection$_tail = _._collection$_head = 0;
        _.$ti = t1;
      },
      _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3) {
        var _ = this;
        _._queue = t0;
        _._collection$_end = t1;
        _._modificationCount = t2;
        _._collection$_position = t3;
        _._collection$_current = null;
      },
      SetMixin: function SetMixin() {},
      _SetBase: function _SetBase() {},
      _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {},
      _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {},
      _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {},
      __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {},
      __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {},
      Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
        var casted, result;
        if (codeUnits instanceof Uint8Array) {
          casted = codeUnits;
          end = casted.length;
          if (end - start < 15) return null;
          result = P.Utf8Decoder__convertInterceptedUint8List(
            allowMalformed,
            casted,
            start,
            end
          );
          if (result != null && allowMalformed)
            if (result.indexOf('\ufffd') >= 0) return null;
          return result;
        }
        return null;
      },
      Utf8Decoder__convertInterceptedUint8List(
        allowMalformed,
        codeUnits,
        start,
        end
      ) {
        var decoder = allowMalformed
          ? $.$get$Utf8Decoder__decoderNonfatal()
          : $.$get$Utf8Decoder__decoder();
        if (decoder == null) return null;
        if (0 === start && end === codeUnits.length)
          return P.Utf8Decoder__useTextDecoder(decoder, codeUnits);
        return P.Utf8Decoder__useTextDecoder(
          decoder,
          codeUnits.subarray(
            start,
            P.RangeError_checkValidRange(start, end, codeUnits.length)
          )
        );
      },
      Utf8Decoder__useTextDecoder(decoder, codeUnits) {
        var t1, exception;
        try {
          t1 = decoder.decode(codeUnits);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
        }
        return null;
      },
      Base64Codec__checkPadding(
        source,
        sourceIndex,
        sourceEnd,
        firstPadding,
        paddingCount,
        $length
      ) {
        if (C.JSInt_methods.$mod($length, 4) !== 0)
          throw H.wrapException(
            P.FormatException$(
              'Invalid base64 padding, padded length must be multiple of four, is ' +
                $length,
              source,
              sourceEnd
            )
          );
        if (firstPadding + paddingCount !== $length)
          throw H.wrapException(
            P.FormatException$(
              "Invalid base64 padding, '=' not at the end",
              source,
              sourceIndex
            )
          );
        if (paddingCount > 2)
          throw H.wrapException(
            P.FormatException$(
              "Invalid base64 padding, more than two '=' characters",
              source,
              sourceIndex
            )
          );
      },
      _Base64Encoder_encodeChunk(
        alphabet,
        bytes,
        start,
        end,
        isLast,
        output,
        outputIndex,
        state
      ) {
        var t1,
          i,
          byteOr,
          byte,
          outputIndex0,
          outputIndex1,
          bits = state >>> 2,
          expectedChars = 3 - (state & 3);
        for (
          t1 = J.getInterceptor$asx(bytes), i = start, byteOr = 0;
          i < end;
          ++i
        ) {
          byte = t1.$index(bytes, i);
          byteOr = (byteOr | byte) >>> 0;
          bits = ((bits << 8) | byte) & 16777215;
          --expectedChars;
          if (expectedChars === 0) {
            outputIndex0 = outputIndex + 1;
            output[outputIndex] = C.JSString_methods._codeUnitAt$1(
              alphabet,
              (bits >>> 18) & 63
            );
            outputIndex = outputIndex0 + 1;
            output[outputIndex0] = C.JSString_methods._codeUnitAt$1(
              alphabet,
              (bits >>> 12) & 63
            );
            outputIndex0 = outputIndex + 1;
            output[outputIndex] = C.JSString_methods._codeUnitAt$1(
              alphabet,
              (bits >>> 6) & 63
            );
            outputIndex = outputIndex0 + 1;
            output[outputIndex0] = C.JSString_methods._codeUnitAt$1(
              alphabet,
              bits & 63
            );
            bits = 0;
            expectedChars = 3;
          }
        }
        if (byteOr >= 0 && byteOr <= 255) {
          if (isLast && expectedChars < 3) {
            outputIndex0 = outputIndex + 1;
            outputIndex1 = outputIndex0 + 1;
            if (3 - expectedChars === 1) {
              output[outputIndex] = C.JSString_methods._codeUnitAt$1(
                alphabet,
                (bits >>> 2) & 63
              );
              output[outputIndex0] = C.JSString_methods._codeUnitAt$1(
                alphabet,
                (bits << 4) & 63
              );
              output[outputIndex1] = 61;
              output[outputIndex1 + 1] = 61;
            } else {
              output[outputIndex] = C.JSString_methods._codeUnitAt$1(
                alphabet,
                (bits >>> 10) & 63
              );
              output[outputIndex0] = C.JSString_methods._codeUnitAt$1(
                alphabet,
                (bits >>> 4) & 63
              );
              output[outputIndex1] = C.JSString_methods._codeUnitAt$1(
                alphabet,
                (bits << 2) & 63
              );
              output[outputIndex1 + 1] = 61;
            }
            return 0;
          }
          return ((bits << 2) | (3 - expectedChars)) >>> 0;
        }
        for (i = start; i < end; ) {
          byte = t1.$index(bytes, i);
          if (byte < 0 || byte > 255) break;
          ++i;
        }
        throw H.wrapException(
          P.ArgumentError$value(
            bytes,
            'Not a byte value at index ' +
              i +
              ': 0x' +
              J.toRadixString$1$n(t1.$index(bytes, i), 16),
            null
          )
        );
      },
      JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
      },
      _defaultToEncodable(object) {
        return object.toJson$0();
      },
      _JsonStringStringifier$(_sink, _toEncodable) {
        return new P._JsonStringStringifier(
          _sink,
          [],
          P.convert___defaultToEncodable$closure()
        );
      },
      _JsonStringStringifier_stringify(object, toEncodable, indent) {
        var t1,
          output = new P.StringBuffer(''),
          stringifier = P._JsonStringStringifier$(output, toEncodable);
        stringifier.writeObject$1(object);
        t1 = output._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _Utf8Decoder_errorDescription(state) {
        switch (state) {
          case 65:
            return 'Missing extension byte';
          case 67:
            return 'Unexpected extension byte';
          case 69:
            return 'Invalid UTF-8 byte';
          case 71:
            return 'Overlong encoding';
          case 73:
            return 'Out of unicode range';
          case 75:
            return 'Encoded surrogate';
          case 77:
            return 'Unfinished UTF-8 octet sequence';
          default:
            return '';
        }
      },
      _Utf8Decoder__makeUint8List(codeUnits, start, end) {
        var t1,
          i,
          b,
          $length = end - start,
          bytes = new Uint8Array($length);
        for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
          b = t1.$index(codeUnits, start + i);
          bytes[i] = (b & 4294967040) >>> 0 !== 0 ? 255 : b;
        }
        return bytes;
      },
      Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {},
      Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {},
      AsciiCodec: function AsciiCodec() {},
      _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {},
      AsciiEncoder: function AsciiEncoder(t0) {
        this._subsetMask = t0;
      },
      Base64Codec: function Base64Codec() {},
      Base64Encoder: function Base64Encoder() {},
      _Base64Encoder: function _Base64Encoder(t0) {
        this._convert$_state = 0;
        this._alphabet = t0;
      },
      _Base64EncoderSink: function _Base64EncoderSink() {},
      _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
        this._sink = t0;
        this._encoder = t1;
      },
      ByteConversionSink: function ByteConversionSink() {},
      ByteConversionSinkBase: function ByteConversionSinkBase() {},
      ChunkedConversionSink: function ChunkedConversionSink() {},
      Codec: function Codec() {},
      Converter: function Converter() {},
      Encoding: function Encoding() {},
      JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
        this.unsupportedObject = t0;
        this.cause = t1;
      },
      JsonCyclicError: function JsonCyclicError(t0, t1) {
        this.unsupportedObject = t0;
        this.cause = t1;
      },
      JsonCodec: function JsonCodec() {},
      JsonEncoder: function JsonEncoder(t0) {
        this._toEncodable = t0;
      },
      _JsonStringifier: function _JsonStringifier() {},
      _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.keyValueList = t1;
      },
      _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
        this._sink = t0;
        this._seen = t1;
        this._toEncodable = t2;
      },
      StringConversionSinkBase: function StringConversionSinkBase() {},
      StringConversionSinkMixin: function StringConversionSinkMixin() {},
      _StringSinkConversionSink: function _StringSinkConversionSink(t0) {
        this._stringSink = t0;
      },
      _StringCallbackSink: function _StringCallbackSink(t0, t1) {
        this._convert$_callback = t0;
        this._stringSink = t1;
      },
      _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter(t0, t1, t2) {
        this._decoder = t0;
        this._sink = t1;
        this._stringSink = t2;
      },
      Utf8Codec: function Utf8Codec() {},
      Utf8Encoder: function Utf8Encoder() {},
      _Utf8Encoder: function _Utf8Encoder(t0) {
        this._bufferIndex = 0;
        this._convert$_buffer = t0;
      },
      Utf8Decoder: function Utf8Decoder(t0) {
        this._allowMalformed = t0;
      },
      _Utf8Decoder: function _Utf8Decoder(t0) {
        this.allowMalformed = t0;
        this._convert$_state = 16;
        this._charOrIndex = 0;
      },
      identityHashCode(object) {
        return H.objectHashCode(object);
      },
      Function_apply($function, positionalArguments) {
        return H.Primitives_applyFunction($function, positionalArguments, null);
      },
      int_parse(source, radix) {
        var value = H.Primitives_parseInt(source, radix);
        if (value != null) return value;
        throw H.wrapException(P.FormatException$(source, null, null));
      },
      double_parse(source) {
        var value = H.Primitives_parseDouble(source);
        if (value != null) return value;
        throw H.wrapException(
          P.FormatException$('Invalid double', source, null)
        );
      },
      Error__objectToString(object) {
        if (object instanceof H.Closure) return object.toString$0(0);
        return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
      },
      List_List$filled($length, fill, growable, $E) {
        var i,
          result = growable
            ? J.JSArray_JSArray$growable($length, $E)
            : J.JSArray_JSArray$fixed($length, $E);
        if ($length !== 0 && fill != null)
          for (i = 0; i < result.length; ++i) result[i] = fill;
        return result;
      },
      List_List$from(elements, growable, $E) {
        var t1,
          list = H._setArrayType([], $E._eval$1('JSArray<0>'));
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0(); )
          list.push(t1.get$current());
        if (growable) return list;
        return J.JSArray_markFixedList(list);
      },
      List_List$of(elements, growable, $E) {
        var t1;
        if (growable) return P.List_List$_of(elements, $E);
        t1 = J.JSArray_markFixedList(P.List_List$_of(elements, $E));
        return t1;
      },
      List_List$_of(elements, $E) {
        var list, t1;
        if (Array.isArray(elements))
          return H._setArrayType(elements.slice(0), $E._eval$1('JSArray<0>'));
        list = H._setArrayType([], $E._eval$1('JSArray<0>'));
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0(); )
          list.push(t1.get$current());
        return list;
      },
      List_List$unmodifiable(elements, $E) {
        return J.JSArray_markUnmodifiableList(
          P.List_List$from(elements, false, $E)
        );
      },
      String_String$fromCharCodes(charCodes, start, end) {
        var array, len;
        if (Array.isArray(charCodes)) {
          array = charCodes;
          len = array.length;
          end = P.RangeError_checkValidRange(start, end, len);
          return H.Primitives_stringFromCharCodes(
            start > 0 || end < len ? array.slice(start, end) : array
          );
        }
        if (type$.NativeUint8List._is(charCodes))
          return H.Primitives_stringFromNativeUint8List(
            charCodes,
            start,
            P.RangeError_checkValidRange(start, end, charCodes.length)
          );
        return P.String__stringFromIterable(charCodes, start, end);
      },
      String_String$fromCharCode(charCode) {
        return H.Primitives_stringFromCharCode(charCode);
      },
      String__stringFromIterable(charCodes, start, end) {
        var t1,
          it,
          i,
          list,
          _null = null;
        if (start < 0)
          throw H.wrapException(
            P.RangeError$range(
              start,
              0,
              J.get$length$asx(charCodes),
              _null,
              _null
            )
          );
        t1 = end == null;
        if (!t1 && end < start)
          throw H.wrapException(
            P.RangeError$range(
              end,
              start,
              J.get$length$asx(charCodes),
              _null,
              _null
            )
          );
        it = J.get$iterator$ax(charCodes);
        for (i = 0; i < start; ++i)
          if (!it.moveNext$0())
            throw H.wrapException(
              P.RangeError$range(start, 0, i, _null, _null)
            );
        list = [];
        if (t1) for (; it.moveNext$0(); ) list.push(it.get$current());
        else
          for (i = start; i < end; ++i) {
            if (!it.moveNext$0())
              throw H.wrapException(
                P.RangeError$range(end, start, i, _null, _null)
              );
            list.push(it.get$current());
          }
        return H.Primitives_stringFromCharCodes(list);
      },
      RegExp_RegExp(source, multiLine) {
        return new H.JSSyntaxRegExp(
          source,
          H.JSSyntaxRegExp_makeNative(
            source,
            multiLine,
            true,
            false,
            false,
            false
          )
        );
      },
      identical(a, b) {
        return a == null ? b == null : a === b;
      },
      StringBuffer__writeAll(string, objects, separator) {
        var iterator = J.get$iterator$ax(objects);
        if (!iterator.moveNext$0()) return string;
        if (separator.length === 0) {
          do string += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          string += H.S(iterator.get$current());
          for (; iterator.moveNext$0(); )
            string = string + separator + H.S(iterator.get$current());
        }
        return string;
      },
      NoSuchMethodError$(
        receiver,
        memberName,
        positionalArguments,
        namedArguments
      ) {
        return new P.NoSuchMethodError(
          receiver,
          memberName,
          positionalArguments,
          namedArguments
        );
      },
      Uri_base() {
        var uri = H.Primitives_currentUri();
        if (uri != null) return P.Uri_parse(uri);
        throw H.wrapException(
          P.UnsupportedError$("'Uri.base' is not supported")
        );
      },
      _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
        var t1,
          bytes,
          i,
          t2,
          byte,
          _s16_ = '0123456789ABCDEF';
        if (encoding === C.C_Utf8Codec) {
          t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
          t1 = t1.test(text);
        } else t1 = false;
        if (t1) return text;
        bytes = encoding.get$encoder().convert$1(text);
        for (t1 = bytes.length, i = 0, t2 = ''; i < t1; ++i) {
          byte = bytes[i];
          if (
            byte < 128 &&
            (canonicalTable[byte >>> 4] & (1 << (byte & 15))) !== 0
          )
            t2 += H.Primitives_stringFromCharCode(byte);
          else
            t2 =
              spaceToPlus && byte === 32
                ? t2 + '+'
                : t2 + '%' + _s16_[(byte >>> 4) & 15] + _s16_[byte & 15];
        }
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      },
      StackTrace_current() {
        var stackTrace, exception;
        if ($.$get$_hasErrorStackProperty())
          return H.getTraceFromException(new Error());
        try {
          throw H.wrapException('');
        } catch (exception) {
          H.unwrapException(exception);
          stackTrace = H.getTraceFromException(exception);
          return stackTrace;
        }
      },
      DateTime$_withValue(_value, isUtc) {
        var t1;
        if (Math.abs(_value) <= 864e13) t1 = false;
        else t1 = true;
        if (t1)
          H.throwExpression(
            P.ArgumentError$('DateTime is outside valid range: ' + _value, null)
          );
        H.checkNotNullable(false, 'isUtc', type$.bool);
        return new P.DateTime(_value, false);
      },
      DateTime__fourDigits(n) {
        var absN = Math.abs(n),
          sign = n < 0 ? '-' : '';
        if (absN >= 1000) return '' + n;
        if (absN >= 100) return sign + '0' + absN;
        if (absN >= 10) return sign + '00' + absN;
        return sign + '000' + absN;
      },
      DateTime__threeDigits(n) {
        if (n >= 100) return '' + n;
        if (n >= 10) return '0' + n;
        return '00' + n;
      },
      DateTime__twoDigits(n) {
        if (n >= 10) return '' + n;
        return '0' + n;
      },
      Error_safeToString(object) {
        if (typeof object == 'number' || H._isBool(object) || object == null)
          return J.toString$0$(object);
        if (typeof object == 'string') return JSON.stringify(object);
        return P.Error__objectToString(object);
      },
      AssertionError$(message) {
        return new P.AssertionError(message);
      },
      ArgumentError$(message, $name) {
        return new P.ArgumentError(false, null, $name, message);
      },
      ArgumentError$value(value, $name, message) {
        return new P.ArgumentError(true, value, $name, message);
      },
      RangeError$(message) {
        var _null = null;
        return new P.RangeError(_null, _null, false, _null, _null, message);
      },
      RangeError$value(value, $name, message) {
        return new P.RangeError(
          null,
          null,
          true,
          value,
          $name,
          message == null ? 'Value not in range' : message
        );
      },
      RangeError$range(invalidValue, minValue, maxValue, $name, message) {
        return new P.RangeError(
          minValue,
          maxValue,
          true,
          invalidValue,
          $name,
          message == null ? 'Invalid value' : message
        );
      },
      RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
        if (value < minValue || value > maxValue)
          throw H.wrapException(
            P.RangeError$range(value, minValue, maxValue, $name, null)
          );
        return value;
      },
      RangeError_checkValidIndex(index, indexable, $name) {
        var $length = indexable.get$length(indexable);
        if (0 > index || index >= $length)
          throw H.wrapException(
            P.IndexError$(
              index,
              indexable,
              $name == null ? 'index' : $name,
              null,
              $length
            )
          );
        return index;
      },
      RangeError_checkValidRange(start, end, $length) {
        if (0 > start || start > $length)
          throw H.wrapException(
            P.RangeError$range(start, 0, $length, 'start', null)
          );
        if (end != null) {
          if (start > end || end > $length)
            throw H.wrapException(
              P.RangeError$range(end, start, $length, 'end', null)
            );
          return end;
        }
        return $length;
      },
      RangeError_checkNotNegative(value, $name) {
        if (value < 0)
          throw H.wrapException(
            P.RangeError$range(value, 0, null, $name, null)
          );
        return value;
      },
      IndexError$(invalidValue, indexable, $name, message, $length) {
        var t1 = $length == null ? J.get$length$asx(indexable) : $length;
        return new P.IndexError(
          t1,
          true,
          invalidValue,
          $name,
          'Index out of range'
        );
      },
      UnsupportedError$(message) {
        return new P.UnsupportedError(message);
      },
      UnimplementedError$(message) {
        return new P.UnimplementedError(message);
      },
      StateError$(message) {
        return new P.StateError(message);
      },
      ConcurrentModificationError$(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      },
      FormatException$(message, source, offset) {
        return new P.FormatException(message, source, offset);
      },
      Iterable_Iterable$generate(count, generator, $E) {
        if (count <= 0)
          return new H.EmptyIterable($E._eval$1('EmptyIterable<0>'));
        return new P._GeneratorIterable(
          count,
          generator,
          $E._eval$1('_GeneratorIterable<0>')
        );
      },
      print(object) {
        var line = J.toString$0$(object),
          toZone = $.printToZone;
        if (toZone == null) H.printString(line);
        else toZone.call$1(line);
      },
      Set_castFrom(source, newSet, $S, $T) {
        return new H.CastSet(
          source,
          newSet,
          $S._eval$1('@<0>')._bind$1($T)._eval$1('CastSet<1,2>')
        );
      },
      _combineSurrogatePair(start, end) {
        return 65536 + ((start & 1023) << 10) + (end & 1023);
      },
      Uri_Uri$dataFromString($content, encoding, mimeType) {
        var encodingName,
          t1,
          buffer = new P.StringBuffer(''),
          indices = H._setArrayType([-1], type$.JSArray_int);
        if (encoding == null) encodingName = null;
        else encodingName = 'utf-8';
        if (encoding == null) encoding = C.C_AsciiCodec;
        P.UriData__writeUri(mimeType, encodingName, null, buffer, indices);
        indices.push(buffer._contents.length);
        buffer._contents += ',';
        P.UriData__uriEncodeBytes(
          C.List_CVk,
          encoding.encode$1($content),
          buffer
        );
        t1 = buffer._contents;
        return new P.UriData(
          t1.charCodeAt(0) == 0 ? t1 : t1,
          indices,
          null
        ).get$uri();
      },
      Uri_parse(uri) {
        var delta,
          indices,
          schemeEnd,
          hostStart,
          portStart,
          pathStart,
          queryStart,
          fragmentStart,
          isSimple,
          scheme,
          t1,
          t2,
          schemeAuth,
          queryStart0,
          pathStart0,
          userInfoStart,
          userInfo,
          host,
          portNumber,
          port,
          path,
          query,
          _null = null,
          end = uri.length;
        if (end >= 5) {
          delta =
            (((C.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3) |
              (C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100) |
              (C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97) |
              (C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116) |
              (C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97)) >>>
            0;
          if (delta === 0)
            return P.UriData__parse(
              end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri,
              5,
              _null
            ).get$uri();
          else if (delta === 32)
            return P.UriData__parse(
              C.JSString_methods.substring$2(uri, 5, end),
              0,
              _null
            ).get$uri();
        }
        indices = P.List_List$filled(8, 0, false, type$.int);
        indices[0] = 0;
        indices[1] = -1;
        indices[2] = -1;
        indices[7] = -1;
        indices[3] = 0;
        indices[4] = 0;
        indices[5] = end;
        indices[6] = end;
        if (P._scan(uri, 0, end, 0, indices) >= 14) indices[7] = end;
        schemeEnd = indices[1];
        if (schemeEnd >= 0)
          if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
            indices[7] = schemeEnd;
        hostStart = indices[2] + 1;
        portStart = indices[3];
        pathStart = indices[4];
        queryStart = indices[5];
        fragmentStart = indices[6];
        if (fragmentStart < queryStart) queryStart = fragmentStart;
        if (pathStart < hostStart) pathStart = queryStart;
        else if (pathStart <= schemeEnd) pathStart = schemeEnd + 1;
        if (portStart < hostStart) portStart = pathStart;
        isSimple = indices[7] < 0;
        if (isSimple)
          if (hostStart > schemeEnd + 3) {
            scheme = _null;
            isSimple = false;
          } else {
            t1 = portStart > 0;
            if (t1 && portStart + 1 === pathStart) {
              scheme = _null;
              isSimple = false;
            } else {
              if (
                !(
                  queryStart < end &&
                  queryStart === pathStart + 2 &&
                  C.JSString_methods.startsWith$2(uri, '..', pathStart)
                )
              )
                t2 =
                  queryStart > pathStart + 2 &&
                  C.JSString_methods.startsWith$2(uri, '/..', queryStart - 3);
              else t2 = true;
              if (t2) {
                scheme = _null;
                isSimple = false;
              } else {
                if (schemeEnd === 4)
                  if (C.JSString_methods.startsWith$2(uri, 'file', 0)) {
                    if (hostStart <= 0) {
                      if (
                        !C.JSString_methods.startsWith$2(uri, '/', pathStart)
                      ) {
                        schemeAuth = 'file:///';
                        delta = 3;
                      } else {
                        schemeAuth = 'file://';
                        delta = 2;
                      }
                      uri =
                        schemeAuth +
                        C.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= 0;
                      t1 = delta - 0;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = C.JSString_methods.replaceRange$3(
                        uri,
                        pathStart,
                        queryStart,
                        '/'
                      );
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = 'file';
                  } else if (C.JSString_methods.startsWith$2(uri, 'http', 0)) {
                    if (
                      t1 &&
                      portStart + 3 === pathStart &&
                      C.JSString_methods.startsWith$2(uri, '80', portStart + 1)
                    ) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = C.JSString_methods.replaceRange$3(
                        uri,
                        portStart,
                        pathStart,
                        ''
                      );
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = 'http';
                  } else scheme = _null;
                else if (
                  schemeEnd === 5 &&
                  C.JSString_methods.startsWith$2(uri, 'https', 0)
                ) {
                  if (
                    t1 &&
                    portStart + 4 === pathStart &&
                    C.JSString_methods.startsWith$2(uri, '443', portStart + 1)
                  ) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = C.JSString_methods.replaceRange$3(
                      uri,
                      portStart,
                      pathStart,
                      ''
                    );
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = 'https';
                } else scheme = _null;
                isSimple = true;
              }
            }
          }
        else scheme = _null;
        if (isSimple) {
          if (end < uri.length) {
            uri = C.JSString_methods.substring$2(uri, 0, end);
            schemeEnd -= 0;
            hostStart -= 0;
            portStart -= 0;
            pathStart -= 0;
            queryStart -= 0;
            fragmentStart -= 0;
          }
          return new P._SimpleUri(
            uri,
            schemeEnd,
            hostStart,
            portStart,
            pathStart,
            queryStart,
            fragmentStart,
            scheme
          );
        }
        if (scheme == null)
          if (schemeEnd > 0) scheme = P._Uri__makeScheme(uri, 0, schemeEnd);
          else {
            if (schemeEnd === 0) P._Uri__fail(uri, 0, 'Invalid empty scheme');
            scheme = '';
          }
        if (hostStart > 0) {
          userInfoStart = schemeEnd + 3;
          userInfo =
            userInfoStart < hostStart
              ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1)
              : '';
          host = P._Uri__makeHost(uri, hostStart, portStart, false);
          t1 = portStart + 1;
          if (t1 < pathStart) {
            portNumber = H.Primitives_parseInt(
              C.JSString_methods.substring$2(uri, t1, pathStart),
              _null
            );
            port = P._Uri__makePort(
              portNumber == null
                ? H.throwExpression(P.FormatException$('Invalid port', uri, t1))
                : portNumber,
              scheme
            );
          } else port = _null;
        } else {
          port = _null;
          host = port;
          userInfo = '';
        }
        path = P._Uri__makePath(
          uri,
          pathStart,
          queryStart,
          _null,
          scheme,
          host != null
        );
        query =
          queryStart < fragmentStart
            ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null)
            : _null;
        return new P._Uri(
          scheme,
          userInfo,
          host,
          port,
          path,
          query,
          fragmentStart < end
            ? P._Uri__makeFragment(uri, fragmentStart + 1, end)
            : _null
        );
      },
      Uri_decodeComponent(encodedComponent) {
        return P._Uri__uriDecode(
          encodedComponent,
          0,
          encodedComponent.length,
          C.C_Utf8Codec,
          false
        );
      },
      Uri__parseIPv4Address(host, start, end) {
        var i,
          partStart,
          partIndex,
          char,
          part,
          partIndex0,
          _s43_ = 'IPv4 address should contain exactly 4 parts',
          _s37_ = 'each part must be in the range 0..255',
          error = new P.Uri__parseIPv4Address_error(host),
          result = new Uint8Array(4);
        for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
          char = C.JSString_methods.codeUnitAt$1(host, i);
          if (char !== 46) {
            if ((char ^ 48) > 9) error.call$2('invalid character', i);
          } else {
            if (partIndex === 3) error.call$2(_s43_, i);
            part = P.int_parse(
              C.JSString_methods.substring$2(host, partStart, i),
              null
            );
            if (part > 255) error.call$2(_s37_, partStart);
            partIndex0 = partIndex + 1;
            result[partIndex] = part;
            partStart = i + 1;
            partIndex = partIndex0;
          }
        }
        if (partIndex !== 3) error.call$2(_s43_, end);
        part = P.int_parse(
          C.JSString_methods.substring$2(host, partStart, end),
          null
        );
        if (part > 255) error.call$2(_s37_, partStart);
        result[partIndex] = part;
        return result;
      },
      Uri_parseIPv6Address(host, start, end) {
        var parts,
          i,
          partStart,
          wildcardSeen,
          seenDot,
          char,
          atEnd,
          t1,
          last,
          bytes,
          wildCardLength,
          index,
          value,
          j,
          error = new P.Uri_parseIPv6Address_error(host),
          parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
        if (host.length < 2) error.call$1('address is too short');
        parts = H._setArrayType([], type$.JSArray_int);
        for (
          i = start, partStart = i, wildcardSeen = false, seenDot = false;
          i < end;
          ++i
        ) {
          char = C.JSString_methods.codeUnitAt$1(host, i);
          if (char === 58) {
            if (i === start) {
              ++i;
              if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
                error.call$2('invalid start colon.', i);
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$2('only one wildcard `::` is allowed', i);
              parts.push(-1);
              wildcardSeen = true;
            } else parts.push(parseHex.call$2(partStart, i));
            partStart = i + 1;
          } else if (char === 46) seenDot = true;
        }
        if (parts.length === 0) error.call$1('too few parts');
        atEnd = partStart === end;
        t1 = C.JSArray_methods.get$last(parts);
        if (atEnd && t1 !== -1)
          error.call$2('expected a part after last `:`', end);
        if (!atEnd)
          if (!seenDot) parts.push(parseHex.call$2(partStart, end));
          else {
            last = P.Uri__parseIPv4Address(host, partStart, end);
            parts.push(((last[0] << 8) | last[1]) >>> 0);
            parts.push(((last[2] << 8) | last[3]) >>> 0);
          }
        if (wildcardSeen) {
          if (parts.length > 7)
            error.call$1(
              'an address with a wildcard must have less than 7 parts'
            );
        } else if (parts.length !== 8)
          error.call$1(
            'an address without a wildcard must contain exactly 8 parts'
          );
        bytes = new Uint8Array(16);
        for (
          t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0;
          i < t1;
          ++i
        ) {
          value = parts[i];
          if (value === -1)
            for (j = 0; j < wildCardLength; ++j) {
              bytes[index] = 0;
              bytes[index + 1] = 0;
              index += 2;
            }
          else {
            bytes[index] = C.JSInt_methods._shrOtherPositive$1(value, 8);
            bytes[index + 1] = value & 255;
            index += 2;
          }
        }
        return bytes;
      },
      _Uri__Uri(host, path, pathSegments, scheme) {
        var userInfo,
          query,
          fragment,
          port,
          isFile,
          t1,
          hasAuthority,
          t2,
          _null = null;
        scheme =
          scheme == null ? '' : P._Uri__makeScheme(scheme, 0, scheme.length);
        userInfo = P._Uri__makeUserInfo(_null, 0, 0);
        host = P._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
        query = P._Uri__makeQuery(_null, 0, 0, _null);
        fragment = P._Uri__makeFragment(_null, 0, 0);
        port = P._Uri__makePort(_null, scheme);
        isFile = scheme === 'file';
        if (host == null) t1 = userInfo.length !== 0 || port != null || isFile;
        else t1 = false;
        if (t1) host = '';
        t1 = host == null;
        hasAuthority = !t1;
        path = P._Uri__makePath(
          path,
          0,
          path == null ? 0 : path.length,
          pathSegments,
          scheme,
          hasAuthority
        );
        t2 = scheme.length === 0;
        if (t2 && t1 && !C.JSString_methods.startsWith$1(path, '/'))
          path = P._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
        else path = P._Uri__removeDotSegments(path);
        return new P._Uri(
          scheme,
          userInfo,
          t1 && C.JSString_methods.startsWith$1(path, '//') ? '' : host,
          port,
          path,
          query,
          fragment
        );
      },
      _Uri__defaultPort(scheme) {
        if (scheme === 'http') return 80;
        if (scheme === 'https') return 443;
        return 0;
      },
      _Uri__compareScheme(scheme, uri) {
        var t1, i, schemeChar, uriChar, delta, lowerChar;
        for (t1 = scheme.length, i = 0; i < t1; ++i) {
          schemeChar = C.JSString_methods._codeUnitAt$1(scheme, i);
          uriChar = C.JSString_methods._codeUnitAt$1(uri, i);
          delta = schemeChar ^ uriChar;
          if (delta !== 0) {
            if (delta === 32) {
              lowerChar = uriChar | delta;
              if (97 <= lowerChar && lowerChar <= 122) continue;
            }
            return false;
          }
        }
        return true;
      },
      _Uri__fail(uri, index, message) {
        throw H.wrapException(P.FormatException$(message, uri, index));
      },
      _Uri__Uri$file(path, windows) {
        return windows
          ? P._Uri__makeWindowsFileUrl(path, false)
          : P._Uri__makeFileUri(path, false);
      },
      _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
        var t1, _i, segment, t2, t3;
        for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
          segment = segments[_i];
          t2 = J.getInterceptor$asx(segment);
          t3 = t2.get$length(segment);
          if (0 > t3)
            H.throwExpression(
              P.RangeError$range(0, 0, t2.get$length(segment), null, null)
            );
          if (H.stringContainsUnchecked(segment, '/', 0)) {
            t1 = P.UnsupportedError$('Illegal path character ' + H.S(segment));
            throw H.wrapException(t1);
          }
        }
      },
      _Uri__checkWindowsPathReservedCharacters(
        segments,
        argumentError,
        firstSegment
      ) {
        var t1, t2, t3, t4;
        for (
          t1 = H.SubListIterable$(
            segments,
            firstSegment,
            null,
            H._arrayInstanceType(segments)._precomputed1
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        ) {
          t3 = t2._as(t1.__internal$_current);
          t4 = P.RegExp_RegExp('["*/:<>?\\\\|]', false);
          if (H.stringContainsUnchecked(t3, t4, 0))
            if (argumentError)
              throw H.wrapException(
                P.ArgumentError$('Illegal character in path', null)
              );
            else
              throw H.wrapException(
                P.UnsupportedError$('Illegal character in path: ' + t3)
              );
        }
      },
      _Uri__checkWindowsDriveLetter(charCode, argumentError) {
        var t1,
          _s21_ = 'Illegal drive letter ';
        if (!(65 <= charCode && charCode <= 90))
          t1 = 97 <= charCode && charCode <= 122;
        else t1 = true;
        if (t1) return;
        if (argumentError)
          throw H.wrapException(
            P.ArgumentError$(
              _s21_ + P.String_String$fromCharCode(charCode),
              null
            )
          );
        else
          throw H.wrapException(
            P.UnsupportedError$(_s21_ + P.String_String$fromCharCode(charCode))
          );
      },
      _Uri__makeFileUri(path, slashTerminated) {
        var _null = null,
          segments = H._setArrayType(path.split('/'), type$.JSArray_String);
        if (C.JSString_methods.startsWith$1(path, '/'))
          return P._Uri__Uri(_null, _null, segments, 'file');
        else return P._Uri__Uri(_null, _null, segments, _null);
      },
      _Uri__makeWindowsFileUrl(path, slashTerminated) {
        var t1,
          pathSegments,
          pathStart,
          hostPart,
          _s1_ = '\\',
          _null = null,
          _s4_ = 'file';
        if (C.JSString_methods.startsWith$1(path, '\\\\?\\'))
          if (C.JSString_methods.startsWith$2(path, 'UNC\\', 4))
            path = C.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
          else {
            path = C.JSString_methods.substring$1(path, 4);
            if (
              path.length < 3 ||
              C.JSString_methods._codeUnitAt$1(path, 1) !== 58 ||
              C.JSString_methods._codeUnitAt$1(path, 2) !== 92
            )
              throw H.wrapException(
                P.ArgumentError$(
                  'Windows paths with \\\\?\\ prefix must be absolute',
                  _null
                )
              );
          }
        else path = H.stringReplaceAllUnchecked(path, '/', _s1_);
        t1 = path.length;
        if (t1 > 1 && C.JSString_methods._codeUnitAt$1(path, 1) === 58) {
          P._Uri__checkWindowsDriveLetter(
            C.JSString_methods._codeUnitAt$1(path, 0),
            true
          );
          if (t1 === 2 || C.JSString_methods._codeUnitAt$1(path, 2) !== 92)
            throw H.wrapException(
              P.ArgumentError$(
                'Windows paths with drive letter must be absolute',
                _null
              )
            );
          pathSegments = H._setArrayType(
            path.split(_s1_),
            type$.JSArray_String
          );
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
          return P._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
        if (C.JSString_methods.startsWith$1(path, _s1_))
          if (C.JSString_methods.startsWith$2(path, _s1_, 1)) {
            pathStart = C.JSString_methods.indexOf$2(path, _s1_, 2);
            t1 = pathStart < 0;
            hostPart = t1
              ? C.JSString_methods.substring$1(path, 2)
              : C.JSString_methods.substring$2(path, 2, pathStart);
            pathSegments = H._setArrayType(
              (t1
                ? ''
                : C.JSString_methods.substring$1(path, pathStart + 1)
              ).split(_s1_),
              type$.JSArray_String
            );
            P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
            return P._Uri__Uri(hostPart, _null, pathSegments, _s4_);
          } else {
            pathSegments = H._setArrayType(
              path.split(_s1_),
              type$.JSArray_String
            );
            P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
            return P._Uri__Uri(_null, _null, pathSegments, _s4_);
          }
        else {
          pathSegments = H._setArrayType(
            path.split(_s1_),
            type$.JSArray_String
          );
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return P._Uri__Uri(_null, _null, pathSegments, _null);
        }
      },
      _Uri__makePort(port, scheme) {
        if (port != null && port === P._Uri__defaultPort(scheme)) return null;
        return port;
      },
      _Uri__makeHost(host, start, end, strictIPv6) {
        var t1, t2, index, zoneIDstart, zoneID, i;
        if (host == null) return null;
        if (start === end) return '';
        if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
          t1 = end - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            P._Uri__fail(host, start, 'Missing end `]` to match `[` in host');
          t2 = start + 1;
          index = P._Uri__checkZoneID(host, t2, t1);
          if (index < t1) {
            zoneIDstart = index + 1;
            zoneID = P._Uri__normalizeZoneID(
              host,
              C.JSString_methods.startsWith$2(host, '25', zoneIDstart)
                ? index + 3
                : zoneIDstart,
              t1,
              '%25'
            );
          } else zoneID = '';
          P.Uri_parseIPv6Address(host, t2, index);
          return (
            C.JSString_methods.substring$2(host, start, index).toLowerCase() +
            zoneID +
            ']'
          );
        }
        for (i = start; i < end; ++i)
          if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
            index = C.JSString_methods.indexOf$2(host, '%', start);
            index = index >= start && index < end ? index : end;
            if (index < end) {
              zoneIDstart = index + 1;
              zoneID = P._Uri__normalizeZoneID(
                host,
                C.JSString_methods.startsWith$2(host, '25', zoneIDstart)
                  ? index + 3
                  : zoneIDstart,
                end,
                '%25'
              );
            } else zoneID = '';
            P.Uri_parseIPv6Address(host, start, index);
            return (
              '[' +
              C.JSString_methods.substring$2(host, start, index) +
              zoneID +
              ']'
            );
          }
        return P._Uri__normalizeRegName(host, start, end);
      },
      _Uri__checkZoneID(host, start, end) {
        var index = C.JSString_methods.indexOf$2(host, '%', start);
        return index >= start && index < end ? index : end;
      },
      _Uri__normalizeZoneID(host, start, end, prefix) {
        var index,
          sectionStart,
          isNormalized,
          char,
          replacement,
          t1,
          t2,
          tail,
          sourceLength,
          slice,
          buffer = prefix !== '' ? new P.StringBuffer(prefix) : null;
        for (
          index = start, sectionStart = index, isNormalized = true;
          index < end;

        ) {
          char = C.JSString_methods.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t1 = replacement == null;
            if (t1 && isNormalized) {
              index += 3;
              continue;
            }
            if (buffer == null) buffer = new P.StringBuffer('');
            t2 = buffer._contents += C.JSString_methods.substring$2(
              host,
              sectionStart,
              index
            );
            if (t1)
              replacement = C.JSString_methods.substring$2(
                host,
                index,
                index + 3
              );
            else if (replacement === '%')
              P._Uri__fail(host, index, 'ZoneID should not contain % anymore');
            buffer._contents = t2 + replacement;
            index += 3;
            sectionStart = index;
            isNormalized = true;
          } else if (
            char < 127 &&
            (C.List_nxB[char >>> 4] & (1 << (char & 15))) !== 0
          ) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null) buffer = new P.StringBuffer('');
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(
                  host,
                  sectionStart,
                  index
                );
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = ((char & 1023) << 10) | (tail & 1023) | 65536;
                sourceLength = 2;
              } else sourceLength = 1;
            } else sourceLength = 1;
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new P.StringBuffer('');
              t1 = buffer;
            } else t1 = buffer;
            t1._contents += slice;
            t1._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
        if (buffer == null)
          return C.JSString_methods.substring$2(host, start, end);
        if (sectionStart < end)
          buffer._contents += C.JSString_methods.substring$2(
            host,
            sectionStart,
            end
          );
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _Uri__normalizeRegName(host, start, end) {
        var index,
          sectionStart,
          buffer,
          isNormalized,
          char,
          replacement,
          t1,
          slice,
          t2,
          sourceLength,
          tail;
        for (
          index = start,
            sectionStart = index,
            buffer = null,
            isNormalized = true;
          index < end;

        ) {
          char = C.JSString_methods.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t1 = replacement == null;
            if (t1 && isNormalized) {
              index += 3;
              continue;
            }
            if (buffer == null) buffer = new P.StringBuffer('');
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            t2 = buffer._contents += !isNormalized
              ? slice.toLowerCase()
              : slice;
            if (t1) {
              replacement = C.JSString_methods.substring$2(
                host,
                index,
                index + 3
              );
              sourceLength = 3;
            } else if (replacement === '%') {
              replacement = '%25';
              sourceLength = 1;
            } else sourceLength = 3;
            buffer._contents = t2 + replacement;
            index += sourceLength;
            sectionStart = index;
            isNormalized = true;
          } else if (
            char < 127 &&
            (C.List_qNA[char >>> 4] & (1 << (char & 15))) !== 0
          ) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null) buffer = new P.StringBuffer('');
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(
                  host,
                  sectionStart,
                  index
                );
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else if (
            char <= 93 &&
            (C.List_2Vk[char >>> 4] & (1 << (char & 15))) !== 0
          )
            P._Uri__fail(host, index, 'Invalid character');
          else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = ((char & 1023) << 10) | (tail & 1023) | 65536;
                sourceLength = 2;
              } else sourceLength = 1;
            } else sourceLength = 1;
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            if (!isNormalized) slice = slice.toLowerCase();
            if (buffer == null) {
              buffer = new P.StringBuffer('');
              t1 = buffer;
            } else t1 = buffer;
            t1._contents += slice;
            t1._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
        if (buffer == null)
          return C.JSString_methods.substring$2(host, start, end);
        if (sectionStart < end) {
          slice = C.JSString_methods.substring$2(host, sectionStart, end);
          buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _Uri__makeScheme(scheme, start, end) {
        var i, containsUpperCase, codeUnit;
        if (start === end) return '';
        if (
          !P._Uri__isAlphabeticCharacter(
            C.JSString_methods._codeUnitAt$1(scheme, start)
          )
        )
          P._Uri__fail(
            scheme,
            start,
            'Scheme not starting with alphabetic character'
          );
        for (i = start, containsUpperCase = false; i < end; ++i) {
          codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
          if (
            !(
              codeUnit < 128 &&
              (C.List_JYB[codeUnit >>> 4] & (1 << (codeUnit & 15))) !== 0
            )
          )
            P._Uri__fail(scheme, i, 'Illegal scheme character');
          if (65 <= codeUnit && codeUnit <= 90) containsUpperCase = true;
        }
        scheme = C.JSString_methods.substring$2(scheme, start, end);
        return P._Uri__canonicalizeScheme(
          containsUpperCase ? scheme.toLowerCase() : scheme
        );
      },
      _Uri__canonicalizeScheme(scheme) {
        if (scheme === 'http') return 'http';
        if (scheme === 'file') return 'file';
        if (scheme === 'https') return 'https';
        if (scheme === 'package') return 'package';
        return scheme;
      },
      _Uri__makeUserInfo(userInfo, start, end) {
        if (userInfo == null) return '';
        return P._Uri__normalizeOrSubstring(
          userInfo,
          start,
          end,
          C.List_gRj,
          false
        );
      },
      _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
        var result,
          isFile = scheme === 'file',
          ensureLeadingSlash = isFile || hasAuthority;
        if (path == null) {
          if (pathSegments == null) return isFile ? '/' : '';
          result = new H.MappedListIterable(
            pathSegments,
            new P._Uri__makePath_closure(),
            H._arrayInstanceType(pathSegments)._eval$1(
              'MappedListIterable<1,String>'
            )
          ).join$1(0, '/');
        } else if (pathSegments != null)
          throw H.wrapException(
            P.ArgumentError$('Both path and pathSegments specified', null)
          );
        else
          result = P._Uri__normalizeOrSubstring(
            path,
            start,
            end,
            C.List_qg4,
            true
          );
        if (result.length === 0) {
          if (isFile) return '/';
        } else if (
          ensureLeadingSlash &&
          !C.JSString_methods.startsWith$1(result, '/')
        )
          result = '/' + result;
        return P._Uri__normalizePath(result, scheme, hasAuthority);
      },
      _Uri__normalizePath(path, scheme, hasAuthority) {
        var t1 = scheme.length === 0;
        if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, '/'))
          return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
        return P._Uri__removeDotSegments(path);
      },
      _Uri__makeQuery(query, start, end, queryParameters) {
        if (query != null)
          return P._Uri__normalizeOrSubstring(
            query,
            start,
            end,
            C.List_CVk,
            true
          );
        return null;
      },
      _Uri__makeFragment(fragment, start, end) {
        if (fragment == null) return null;
        return P._Uri__normalizeOrSubstring(
          fragment,
          start,
          end,
          C.List_CVk,
          true
        );
      },
      _Uri__normalizeEscape(source, index, lowerCase) {
        var firstDigit,
          secondDigit,
          firstDigitValue,
          secondDigitValue,
          value,
          t1 = index + 2;
        if (t1 >= source.length) return '%';
        firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
        secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
        firstDigitValue = H.hexDigitValue(firstDigit);
        secondDigitValue = H.hexDigitValue(secondDigit);
        if (firstDigitValue < 0 || secondDigitValue < 0) return '%';
        value = firstDigitValue * 16 + secondDigitValue;
        if (
          value < 127 &&
          (C.List_nxB[C.JSInt_methods._shrOtherPositive$1(value, 4)] &
            (1 << (value & 15))) !==
            0
        )
          return H.Primitives_stringFromCharCode(
            lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value
          );
        if (firstDigit >= 97 || secondDigit >= 97)
          return C.JSString_methods.substring$2(
            source,
            index,
            index + 3
          ).toUpperCase();
        return null;
      },
      _Uri__escapeChar(char) {
        var codeUnits,
          flag,
          encodedBytes,
          index,
          byte,
          _s16_ = '0123456789ABCDEF';
        if (char < 128) {
          codeUnits = new Uint8Array(3);
          codeUnits[0] = 37;
          codeUnits[1] = C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
          codeUnits[2] = C.JSString_methods._codeUnitAt$1(_s16_, char & 15);
        } else {
          if (char > 2047)
            if (char > 65535) {
              flag = 240;
              encodedBytes = 4;
            } else {
              flag = 224;
              encodedBytes = 3;
            }
          else {
            flag = 192;
            encodedBytes = 2;
          }
          codeUnits = new Uint8Array(3 * encodedBytes);
          for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
            byte =
              (C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) &
                63) |
              flag;
            codeUnits[index] = 37;
            codeUnits[index + 1] = C.JSString_methods._codeUnitAt$1(
              _s16_,
              byte >>> 4
            );
            codeUnits[index + 2] = C.JSString_methods._codeUnitAt$1(
              _s16_,
              byte & 15
            );
            index += 3;
          }
        }
        return P.String_String$fromCharCodes(codeUnits, 0, null);
      },
      _Uri__normalizeOrSubstring(
        component,
        start,
        end,
        charTable,
        escapeDelimiters
      ) {
        var t1 = P._Uri__normalize(
          component,
          start,
          end,
          charTable,
          escapeDelimiters
        );
        return t1 == null
          ? C.JSString_methods.substring$2(component, start, end)
          : t1;
      },
      _Uri__normalize(component, start, end, charTable, escapeDelimiters) {
        var t1,
          index,
          sectionStart,
          buffer,
          char,
          replacement,
          sourceLength,
          t2,
          tail,
          _null = null;
        for (
          t1 = !escapeDelimiters,
            index = start,
            sectionStart = index,
            buffer = _null;
          index < end;

        ) {
          char = C.JSString_methods.codeUnitAt$1(component, index);
          if (char < 127 && (charTable[char >>> 4] & (1 << (char & 15))) !== 0)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                continue;
              }
              if ('%' === replacement) {
                replacement = '%25';
                sourceLength = 1;
              } else sourceLength = 3;
            } else if (
              t1 &&
              char <= 93 &&
              (C.List_2Vk[char >>> 4] & (1 << (char & 15))) !== 0
            ) {
              P._Uri__fail(component, index, 'Invalid character');
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t2 = index + 1;
                if (t2 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t2);
                  if ((tail & 64512) === 56320) {
                    char = ((char & 1023) << 10) | (tail & 1023) | 65536;
                    sourceLength = 2;
                  } else sourceLength = 1;
                } else sourceLength = 1;
              } else sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
            if (buffer == null) {
              buffer = new P.StringBuffer('');
              t2 = buffer;
            } else t2 = buffer;
            t2._contents += C.JSString_methods.substring$2(
              component,
              sectionStart,
              index
            );
            t2._contents += H.S(replacement);
            index += sourceLength;
            sectionStart = index;
          }
        }
        if (buffer == null) return _null;
        if (sectionStart < end)
          buffer._contents += C.JSString_methods.substring$2(
            component,
            sectionStart,
            end
          );
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _Uri__mayContainDotSegments(path) {
        if (C.JSString_methods.startsWith$1(path, '.')) return true;
        return C.JSString_methods.indexOf$1(path, '/.') !== -1;
      },
      _Uri__removeDotSegments(path) {
        var output, t1, t2, appendSlash, _i, segment;
        if (!P._Uri__mayContainDotSegments(path)) return path;
        output = H._setArrayType([], type$.JSArray_String);
        for (
          t1 = path.split('/'), t2 = t1.length, appendSlash = false, _i = 0;
          _i < t2;
          ++_i
        ) {
          segment = t1[_i];
          if (J.$eq$(segment, '..')) {
            if (output.length !== 0) {
              output.pop();
              if (output.length === 0) output.push('');
            }
            appendSlash = true;
          } else if ('.' === segment) appendSlash = true;
          else {
            output.push(segment);
            appendSlash = false;
          }
        }
        if (appendSlash) output.push('');
        return C.JSArray_methods.join$1(output, '/');
      },
      _Uri__normalizeRelativePath(path, allowScheme) {
        var output, t1, t2, appendSlash, _i, segment;
        if (!P._Uri__mayContainDotSegments(path))
          return !allowScheme ? P._Uri__escapeScheme(path) : path;
        output = H._setArrayType([], type$.JSArray_String);
        for (
          t1 = path.split('/'), t2 = t1.length, appendSlash = false, _i = 0;
          _i < t2;
          ++_i
        ) {
          segment = t1[_i];
          if ('..' === segment)
            if (
              output.length !== 0 &&
              C.JSArray_methods.get$last(output) !== '..'
            ) {
              output.pop();
              appendSlash = true;
            } else {
              output.push('..');
              appendSlash = false;
            }
          else if ('.' === segment) appendSlash = true;
          else {
            output.push(segment);
            appendSlash = false;
          }
        }
        t1 = output.length;
        if (t1 !== 0) t1 = t1 === 1 && output[0].length === 0;
        else t1 = true;
        if (t1) return './';
        if (appendSlash || C.JSArray_methods.get$last(output) === '..')
          output.push('');
        if (!allowScheme) output[0] = P._Uri__escapeScheme(output[0]);
        return C.JSArray_methods.join$1(output, '/');
      },
      _Uri__escapeScheme(path) {
        var i,
          char,
          t1 = path.length;
        if (
          t1 >= 2 &&
          P._Uri__isAlphabeticCharacter(
            C.JSString_methods._codeUnitAt$1(path, 0)
          )
        )
          for (i = 1; i < t1; ++i) {
            char = C.JSString_methods._codeUnitAt$1(path, i);
            if (char === 58)
              return (
                C.JSString_methods.substring$2(path, 0, i) +
                '%3A' +
                C.JSString_methods.substring$1(path, i + 1)
              );
            if (
              char > 127 ||
              (C.List_JYB[char >>> 4] & (1 << (char & 15))) === 0
            )
              break;
          }
        return path;
      },
      _Uri__packageNameEnd(uri, path) {
        if (uri.isScheme$1('package') && uri._host == null)
          return P._skipPackageNameChars(path, 0, path.length);
        return -1;
      },
      _Uri__toWindowsFilePath(uri) {
        var hasDriveLetter,
          t2,
          host,
          segments = uri.get$pathSegments(),
          t1 = segments.length;
        if (
          t1 > 0 &&
          J.get$length$asx(segments[0]) === 2 &&
          J.codeUnitAt$1$s(segments[0], 1) === 58
        ) {
          P._Uri__checkWindowsDriveLetter(
            J.codeUnitAt$1$s(segments[0], 0),
            false
          );
          P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
          hasDriveLetter = true;
        } else {
          P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
          hasDriveLetter = false;
        }
        t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? '' + '\\' : '';
        if (uri.get$hasAuthority()) {
          host = uri.get$host();
          if (host.length !== 0) t2 = t2 + '\\' + host + '\\';
        }
        t2 = P.StringBuffer__writeAll(t2, segments, '\\');
        t1 = hasDriveLetter && t1 === 1 ? t2 + '\\' : t2;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _Uri__hexCharPairToByte(s, pos) {
        var byte, i, charCode;
        for (byte = 0, i = 0; i < 2; ++i) {
          charCode = C.JSString_methods._codeUnitAt$1(s, pos + i);
          if (48 <= charCode && charCode <= 57)
            byte = byte * 16 + charCode - 48;
          else {
            charCode |= 32;
            if (97 <= charCode && charCode <= 102)
              byte = byte * 16 + charCode - 87;
            else
              throw H.wrapException(
                P.ArgumentError$('Invalid URL encoding', null)
              );
          }
        }
        return byte;
      },
      _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
        var simple,
          codeUnit,
          t1,
          bytes,
          i = start;
        while (true) {
          if (!(i < end)) {
            simple = true;
            break;
          }
          codeUnit = C.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit <= 127)
            if (codeUnit !== 37) t1 = false;
            else t1 = true;
          else t1 = true;
          if (t1) {
            simple = false;
            break;
          }
          ++i;
        }
        if (simple) {
          if (C.C_Utf8Codec !== encoding) t1 = false;
          else t1 = true;
          if (t1) return C.JSString_methods.substring$2(text, start, end);
          else
            bytes = new H.CodeUnits(
              C.JSString_methods.substring$2(text, start, end)
            );
        } else {
          bytes = H._setArrayType([], type$.JSArray_int);
          for (t1 = text.length, i = start; i < end; ++i) {
            codeUnit = C.JSString_methods._codeUnitAt$1(text, i);
            if (codeUnit > 127)
              throw H.wrapException(
                P.ArgumentError$('Illegal percent encoding in URI', null)
              );
            if (codeUnit === 37) {
              if (i + 3 > t1)
                throw H.wrapException(P.ArgumentError$('Truncated URI', null));
              bytes.push(P._Uri__hexCharPairToByte(text, i + 1));
              i += 2;
            } else bytes.push(codeUnit);
          }
        }
        return C.Utf8Decoder_false.convert$1(bytes);
      },
      _Uri__isAlphabeticCharacter(codeUnit) {
        var lowerCase = codeUnit | 32;
        return 97 <= lowerCase && lowerCase <= 122;
      },
      UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
        var t1, slashIndex;
        if (mimeType == null || mimeType === 'text/plain') mimeType = '';
        if (mimeType.length === 0 || mimeType === 'application/octet-stream')
          t1 = buffer._contents += mimeType;
        else {
          slashIndex = P.UriData__validateMimeType(mimeType);
          if (slashIndex < 0)
            throw H.wrapException(
              P.ArgumentError$value(mimeType, 'mimeType', 'Invalid MIME type')
            );
          t1 = buffer._contents += P._Uri__uriEncode(
            C.List_qFt,
            C.JSString_methods.substring$2(mimeType, 0, slashIndex),
            C.C_Utf8Codec,
            false
          );
          buffer._contents = t1 + '/';
          t1 = buffer._contents += P._Uri__uriEncode(
            C.List_qFt,
            C.JSString_methods.substring$1(mimeType, slashIndex + 1),
            C.C_Utf8Codec,
            false
          );
        }
        if (charsetName != null) {
          indices.push(t1.length);
          indices.push(buffer._contents.length + 8);
          buffer._contents += ';charset=';
          buffer._contents += P._Uri__uriEncode(
            C.List_qFt,
            charsetName,
            C.C_Utf8Codec,
            false
          );
        }
      },
      UriData__validateMimeType(mimeType) {
        var t1, slashIndex, i;
        for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
          if (C.JSString_methods._codeUnitAt$1(mimeType, i) !== 47) continue;
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          return -1;
        }
        return slashIndex;
      },
      UriData__parse(text, start, sourceUri) {
        var t1,
          i,
          slashIndex,
          char,
          equalsIndex,
          lastSeparator,
          t2,
          data,
          _s17_ = 'Invalid MIME type',
          indices = H._setArrayType([start - 1], type$.JSArray_int);
        for (
          t1 = text.length, i = start, slashIndex = -1, char = null;
          i < t1;
          ++i
        ) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 44 || char === 59) break;
          if (char === 47) {
            if (slashIndex < 0) {
              slashIndex = i;
              continue;
            }
            throw H.wrapException(P.FormatException$(_s17_, text, i));
          }
        }
        if (slashIndex < 0 && i > start)
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        for (; char !== 44; ) {
          indices.push(i);
          ++i;
          for (equalsIndex = -1; i < t1; ++i) {
            char = C.JSString_methods._codeUnitAt$1(text, i);
            if (char === 61) {
              if (equalsIndex < 0) equalsIndex = i;
            } else if (char === 59 || char === 44) break;
          }
          if (equalsIndex >= 0) indices.push(equalsIndex);
          else {
            lastSeparator = C.JSArray_methods.get$last(indices);
            if (
              char !== 44 ||
              i !== lastSeparator + 7 ||
              !C.JSString_methods.startsWith$2(
                text,
                'base64',
                lastSeparator + 1
              )
            )
              throw H.wrapException(
                P.FormatException$("Expecting '='", text, i)
              );
            break;
          }
        }
        indices.push(i);
        t2 = i + 1;
        if ((indices.length & 1) === 1)
          text = C.C_Base64Codec.normalize$3(text, t2, t1);
        else {
          data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
          if (data != null)
            text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
        }
        return new P.UriData(text, indices, sourceUri);
      },
      UriData__uriEncodeBytes(canonicalTable, bytes, buffer) {
        var t1,
          byteOr,
          i,
          byte,
          t2,
          t3,
          _s16_ = '0123456789ABCDEF';
        for (
          t1 = J.getInterceptor$asx(bytes), byteOr = 0, i = 0;
          i < t1.get$length(bytes);
          ++i
        ) {
          byte = t1.$index(bytes, i);
          byteOr |= byte;
          t2 =
            byte < 128 &&
            (canonicalTable[C.JSInt_methods._shrOtherPositive$1(byte, 4)] &
              (1 << (byte & 15))) !==
              0;
          t3 = buffer._contents;
          if (t2) buffer._contents = t3 + H.Primitives_stringFromCharCode(byte);
          else {
            t2 = t3 + H.Primitives_stringFromCharCode(37);
            buffer._contents = t2;
            t2 += H.Primitives_stringFromCharCode(
              C.JSString_methods._codeUnitAt$1(
                _s16_,
                C.JSInt_methods._shrOtherPositive$1(byte, 4)
              )
            );
            buffer._contents = t2;
            buffer._contents =
              t2 +
              H.Primitives_stringFromCharCode(
                C.JSString_methods._codeUnitAt$1(_s16_, byte & 15)
              );
          }
        }
        if ((byteOr & 4294967040) >>> 0 !== 0)
          for (i = 0; i < t1.get$length(bytes); ++i) {
            byte = t1.$index(bytes, i);
            if (byte < 0 || byte > 255)
              throw H.wrapException(
                P.ArgumentError$value(byte, 'non-byte value', null)
              );
          }
      },
      _createTables() {
        var _i,
          t1,
          t2,
          t3,
          b,
          _s77_ =
            "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
          _s1_ = '.',
          _s1_0 = ':',
          _s1_1 = '/',
          _s1_2 = '?',
          _s1_3 = '#',
          tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
        for (_i = 0; _i < 22; ++_i) tables[_i] = new Uint8Array(96);
        t1 = new P._createTables_build(tables);
        t2 = new P._createTables_setChars();
        t3 = new P._createTables_setRange();
        b = t1.call$2(0, 225);
        t2.call$3(b, _s77_, 1);
        t2.call$3(b, _s1_, 14);
        t2.call$3(b, _s1_0, 34);
        t2.call$3(b, _s1_1, 3);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(14, 225);
        t2.call$3(b, _s77_, 1);
        t2.call$3(b, _s1_, 15);
        t2.call$3(b, _s1_0, 34);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(15, 225);
        t2.call$3(b, _s77_, 1);
        t2.call$3(b, '%', 225);
        t2.call$3(b, _s1_0, 34);
        t2.call$3(b, _s1_1, 9);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(1, 225);
        t2.call$3(b, _s77_, 1);
        t2.call$3(b, _s1_0, 34);
        t2.call$3(b, _s1_1, 10);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(2, 235);
        t2.call$3(b, _s77_, 139);
        t2.call$3(b, _s1_1, 131);
        t2.call$3(b, _s1_, 146);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(3, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_1, 68);
        t2.call$3(b, _s1_, 18);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(4, 229);
        t2.call$3(b, _s77_, 5);
        t3.call$3(b, 'AZ', 229);
        t2.call$3(b, _s1_0, 102);
        t2.call$3(b, '@', 68);
        t2.call$3(b, '[', 232);
        t2.call$3(b, _s1_1, 138);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(5, 229);
        t2.call$3(b, _s77_, 5);
        t3.call$3(b, 'AZ', 229);
        t2.call$3(b, _s1_0, 102);
        t2.call$3(b, '@', 68);
        t2.call$3(b, _s1_1, 138);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(6, 231);
        t3.call$3(b, '19', 7);
        t2.call$3(b, '@', 68);
        t2.call$3(b, _s1_1, 138);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(7, 231);
        t3.call$3(b, '09', 7);
        t2.call$3(b, '@', 68);
        t2.call$3(b, _s1_1, 138);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        t2.call$3(t1.call$2(8, 8), ']', 5);
        b = t1.call$2(9, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_, 16);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(16, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_, 17);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(17, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_1, 9);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(10, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_, 18);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(18, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_, 19);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(19, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_1, 234);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(11, 235);
        t2.call$3(b, _s77_, 11);
        t2.call$3(b, _s1_1, 10);
        t2.call$3(b, _s1_2, 172);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(12, 236);
        t2.call$3(b, _s77_, 12);
        t2.call$3(b, _s1_2, 12);
        t2.call$3(b, _s1_3, 205);
        b = t1.call$2(13, 237);
        t2.call$3(b, _s77_, 13);
        t2.call$3(b, _s1_2, 13);
        t3.call$3(t1.call$2(20, 245), 'az', 21);
        b = t1.call$2(21, 245);
        t3.call$3(b, 'az', 21);
        t3.call$3(b, '09', 21);
        t2.call$3(b, '+-.', 21);
        return tables;
      },
      _scan(uri, start, end, state, indices) {
        var i,
          table,
          char,
          transition,
          tables = $.$get$_scannerTables();
        for (i = start; i < end; ++i) {
          table = tables[state];
          char = C.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
          transition = table[char > 95 ? 31 : char];
          state = transition & 31;
          indices[transition >>> 5] = i;
        }
        return state;
      },
      _SimpleUri__packageNameEnd(uri) {
        if (
          uri._schemeEnd === 7 &&
          C.JSString_methods.startsWith$1(uri._uri, 'package') &&
          uri._hostStart <= 0
        )
          return P._skipPackageNameChars(
            uri._uri,
            uri._pathStart,
            uri._queryStart
          );
        return -1;
      },
      _skipPackageNameChars(source, start, end) {
        var i, dots, char;
        for (i = start, dots = 0; i < end; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 47) return dots !== 0 ? i : -1;
          if (char === 37 || char === 58) return -1;
          dots |= char ^ 46;
        }
        return -1;
      },
      NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.sb = t1;
      },
      DateTime: function DateTime(t0, t1) {
        this._core$_value = t0;
        this.isUtc = t1;
      },
      Duration: function Duration(t0) {
        this._duration = t0;
      },
      Duration_toString_sixDigits: function Duration_toString_sixDigits() {},
      Duration_toString_twoDigits: function Duration_toString_twoDigits() {},
      Error: function Error() {},
      AssertionError: function AssertionError(t0) {
        this.message = t0;
      },
      TypeError: function TypeError() {},
      NullThrownError: function NullThrownError() {},
      ArgumentError: function ArgumentError(t0, t1, t2, t3) {
        var _ = this;
        _._hasValue = t0;
        _.invalidValue = t1;
        _.name = t2;
        _.message = t3;
      },
      RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.start = t0;
        _.end = t1;
        _._hasValue = t2;
        _.invalidValue = t3;
        _.name = t4;
        _.message = t5;
      },
      IndexError: function IndexError(t0, t1, t2, t3, t4) {
        var _ = this;
        _.length = t0;
        _._hasValue = t1;
        _.invalidValue = t2;
        _.name = t3;
        _.message = t4;
      },
      NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
        var _ = this;
        _._core$_receiver = t0;
        _._memberName = t1;
        _._core$_arguments = t2;
        _._namedArguments = t3;
      },
      UnsupportedError: function UnsupportedError(t0) {
        this.message = t0;
      },
      UnimplementedError: function UnimplementedError(t0) {
        this.message = t0;
      },
      StateError: function StateError(t0) {
        this.message = t0;
      },
      ConcurrentModificationError: function ConcurrentModificationError(t0) {
        this.modifiedObject = t0;
      },
      OutOfMemoryError: function OutOfMemoryError() {},
      StackOverflowError: function StackOverflowError() {},
      CyclicInitializationError: function CyclicInitializationError(t0) {
        this.variableName = t0;
      },
      _Exception: function _Exception(t0) {
        this.message = t0;
      },
      FormatException: function FormatException(t0, t1, t2) {
        this.message = t0;
        this.source = t1;
        this.offset = t2;
      },
      Iterable: function Iterable() {},
      _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
        this.length = t0;
        this._generator = t1;
        this.$ti = t2;
      },
      Iterator: function Iterator() {},
      MapEntry: function MapEntry(t0, t1, t2) {
        this.key = t0;
        this.value = t1;
        this.$ti = t2;
      },
      Null: function Null() {},
      Object: function Object() {},
      _StringStackTrace: function _StringStackTrace(t0) {
        this._stackTrace = t0;
      },
      Runes: function Runes(t0) {
        this.string = t0;
      },
      RuneIterator: function RuneIterator(t0) {
        var _ = this;
        _.string = t0;
        _._nextPosition = _._position = 0;
        _._currentCodePoint = -1;
      },
      StringBuffer: function StringBuffer(t0) {
        this._contents = t0;
      },
      Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
        this.host = t0;
      },
      Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
        this.host = t0;
      },
      Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(
        t0,
        t1
      ) {
        this.error = t0;
        this.host = t1;
      },
      _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.scheme = t0;
        _._userInfo = t1;
        _._host = t2;
        _._port = t3;
        _.path = t4;
        _._query = t5;
        _._fragment = t6;
        _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = null;
      },
      _Uri__makePath_closure: function _Uri__makePath_closure() {},
      UriData: function UriData(t0, t1, t2) {
        this._text = t0;
        this._separatorIndices = t1;
        this._uriCache = t2;
      },
      _createTables_build: function _createTables_build(t0) {
        this.tables = t0;
      },
      _createTables_setChars: function _createTables_setChars() {},
      _createTables_setRange: function _createTables_setRange() {},
      _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _._uri = t0;
        _._schemeEnd = t1;
        _._hostStart = t2;
        _._portStart = t3;
        _._pathStart = t4;
        _._queryStart = t5;
        _._fragmentStart = t6;
        _._schemeCache = t7;
        _._hashCodeCache = null;
      },
      _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.scheme = t0;
        _._userInfo = t1;
        _._host = t2;
        _._port = t3;
        _.path = t4;
        _._query = t5;
        _._fragment = t6;
        _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = null;
      },
      max(a, b) {
        return Math.max(H.checkNum(a), H.checkNum(b));
      },
      pow(x, exponent) {
        return Math.pow(x, exponent);
      },
      Random_Random() {
        return C.C__JSRandom;
      },
      _JSRandom: function _JSRandom() {},
      _convertDartFunctionFast(f) {
        var ret,
          existing = f.$dart_jsFunction;
        if (existing != null) return existing;
        ret = (function (_call, f) {
          return function () {
            return _call(f, Array.prototype.slice.apply(arguments));
          };
        })(P._callDartFunctionFast, f);
        ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
        f.$dart_jsFunction = ret;
        return ret;
      },
      _convertDartFunctionFastCaptureThis(f) {
        var ret,
          existing = f._$dart_jsFunctionCaptureThis;
        if (existing != null) return existing;
        ret = (function (_call, f) {
          return function () {
            return _call(f, this, Array.prototype.slice.apply(arguments));
          };
        })(P._callDartFunctionFastCaptureThis, f);
        ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
        f._$dart_jsFunctionCaptureThis = ret;
        return ret;
      },
      _callDartFunctionFast(callback, $arguments) {
        return P.Function_apply(callback, $arguments);
      },
      _callDartFunctionFastCaptureThis(callback, $self, $arguments) {
        var t1 = [$self];
        C.JSArray_methods.addAll$1(t1, $arguments);
        return P.Function_apply(callback, t1);
      },
      allowInterop(f) {
        if (typeof f == 'function') return f;
        else return P._convertDartFunctionFast(f);
      },
      allowInteropCaptureThis(f) {
        if (typeof f == 'function')
          throw H.wrapException(
            P.ArgumentError$(
              'Function is already a JS function so cannot capture this.',
              null
            )
          );
        else return P._convertDartFunctionFastCaptureThis(f);
      },
      callConstructor(constr, $arguments) {
        var args, factoryFunction;
        if ($arguments instanceof Array)
          switch ($arguments.length) {
            case 0:
              return new constr();
            case 1:
              return new constr($arguments[0]);
            case 2:
              return new constr($arguments[0], $arguments[1]);
            case 3:
              return new constr($arguments[0], $arguments[1], $arguments[2]);
            case 4:
              return new constr(
                $arguments[0],
                $arguments[1],
                $arguments[2],
                $arguments[3]
              );
          }
        args = [null];
        C.JSArray_methods.addAll$1(args, $arguments);
        factoryFunction = constr.bind.apply(constr, args);
        String(factoryFunction);
        return new factoryFunction();
      },
    },
    Q = {
      Repl: function Repl(t0, t1, t2, t3) {
        var _ = this;
        _.prompt = t0;
        _.continuation = t1;
        _.validator = t2;
        _.__Repl__adapter = null;
        _.history = t3;
      },
      alwaysValid_closure: function alwaysValid_closure() {},
      QueueList$(initialCapacity, $E) {
        return new Q.QueueList(
          P.List_List$filled(
            Q.QueueList__computeInitialCapacity(initialCapacity),
            null,
            false,
            $E._eval$1('0?')
          ),
          0,
          0,
          $E._eval$1('QueueList<0>')
        );
      },
      QueueList_QueueList$from(source, $E) {
        var $length, queue, t1;
        if (type$.List_dynamic._is(source)) {
          $length = J.get$length$asx(source);
          queue = Q.QueueList$($length + 1, $E);
          J.setRange$4$ax(queue._table, 0, $length, source, 0);
          queue._tail = $length;
          return queue;
        } else {
          t1 = Q.QueueList$(null, $E);
          t1.addAll$1(0, source);
          return t1;
        }
      },
      QueueList__computeInitialCapacity(initialCapacity) {
        if (initialCapacity == null || initialCapacity < 8) return 8;
        ++initialCapacity;
        if ((initialCapacity & (initialCapacity - 1)) >>> 0 === 0)
          return initialCapacity;
        return Q.QueueList__nextPowerOf2(initialCapacity);
      },
      QueueList__nextPowerOf2(number) {
        var nextNumber;
        number = ((number << 1) >>> 0) - 1;
        for (; true; number = nextNumber) {
          nextNumber = (number & (number - 1)) >>> 0;
          if (nextNumber === 0) return number;
        }
      },
      QueueList: function QueueList(t0, t1, t2, t3) {
        var _ = this;
        _._table = t0;
        _._head = t1;
        _._tail = t2;
        _.$ti = t3;
      },
      _CastQueueList: function _CastQueueList(t0, t1, t2, t3, t4) {
        var _ = this;
        _._queue_list$_delegate = t0;
        _._table = t1;
        _._head = t2;
        _._tail = t3;
        _.$ti = t4;
      },
      _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {},
      StaticImport: function StaticImport(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.supports = t1;
        _.media = t2;
        _.span = t3;
      },
      ContentRule: function ContentRule(t0, t1) {
        this.$arguments = t0;
        this.span = t1;
      },
      DebugRule: function DebugRule(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      AsyncEnvironment$() {
        var t1 = type$.String,
          t2 = type$.Module_AsyncCallable,
          t3 = type$.AstNode,
          t4 = type$.int,
          t5 = type$.AsyncCallable,
          t6 = type$.JSArray_Map_String_AsyncCallable;
        return new Q.AsyncEnvironment(
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          null,
          null,
          H._setArrayType([], type$.JSArray_Module_AsyncCallable),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)],
            type$.JSArray_Map_String_Value
          ),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, t3)],
            type$.JSArray_Map_String_AstNode
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          null
        );
      },
      AsyncEnvironment$_(
        _modules,
        _namespaceNodes,
        _globalModules,
        _importedModules,
        _forwardedModules,
        _nestedForwardedModules,
        _allModules,
        _variables,
        _variableNodes,
        _functions,
        _mixins,
        _content
      ) {
        var t1 = type$.String,
          t2 = type$.int;
        return new Q.AsyncEnvironment(
          _modules,
          _namespaceNodes,
          _globalModules,
          _importedModules,
          _forwardedModules,
          _nestedForwardedModules,
          _allModules,
          _variables,
          _variableNodes,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _functions,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _mixins,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _content
        );
      },
      _EnvironmentModule__EnvironmentModule0(
        environment,
        css,
        extensionStore,
        forwarded
      ) {
        var t1, t2, t3, t4, t5, t6;
        if (forwarded == null) forwarded = C.Set_empty0;
        t1 = Q._EnvironmentModule__makeModulesByVariable0(forwarded);
        t2 = Q._EnvironmentModule__memberMap0(
          C.JSArray_methods.get$first(
            environment._async_environment$_variables
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure5(),
            type$.Map_String_Value
          ),
          type$.Value
        );
        t3 = Q._EnvironmentModule__memberMap0(
          C.JSArray_methods.get$first(
            environment._async_environment$_variableNodes
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure6(),
            type$.Map_String_AstNode
          ),
          type$.AstNode
        );
        t4 = type$.Map_String_AsyncCallable;
        t5 = type$.AsyncCallable;
        t6 = Q._EnvironmentModule__memberMap0(
          C.JSArray_methods.get$first(
            environment._async_environment$_functions
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure7(),
            t4
          ),
          t5
        );
        t5 = Q._EnvironmentModule__memberMap0(
          C.JSArray_methods.get$first(environment._async_environment$_mixins),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure8(),
            t4
          ),
          t5
        );
        t4 =
          J.get$isNotEmpty$asx(css.get$children(css)) ||
          C.JSArray_methods.any$1(
            environment._async_environment$_allModules,
            new Q._EnvironmentModule__EnvironmentModule_closure9()
          );
        return Q._EnvironmentModule$_0(
          environment,
          css,
          extensionStore,
          t1,
          t2,
          t3,
          t6,
          t5,
          t4,
          !extensionStore.get$isEmpty(extensionStore) ||
            C.JSArray_methods.any$1(
              environment._async_environment$_allModules,
              new Q._EnvironmentModule__EnvironmentModule_closure10()
            )
        );
      },
      _EnvironmentModule__makeModulesByVariable0(forwarded) {
        var modulesByVariable, t1, t2, t3, t4, t5;
        if (forwarded.get$isEmpty(forwarded)) return C.Map_empty3;
        modulesByVariable = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.Module_AsyncCallable
        );
        for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0(); ) {
          t2 = t1.get$current();
          if (t2 instanceof Q._EnvironmentModule0) {
            for (
              t3 = t2._async_environment$_modulesByVariable,
                t3 = t3.get$values(t3),
                t3 = t3.get$iterator(t3);
              t3.moveNext$0();

            ) {
              t4 = t3.get$current();
              t5 = t4.get$variables();
              B.setAll(modulesByVariable, t5.get$keys(t5), t4);
            }
            B.setAll(
              modulesByVariable,
              J.get$keys$z(
                C.JSArray_methods.get$first(
                  t2._async_environment$_environment
                    ._async_environment$_variables
                )
              ),
              t2
            );
          } else {
            t3 = t2.get$variables();
            B.setAll(modulesByVariable, t3.get$keys(t3), t2);
          }
        }
        return modulesByVariable;
      },
      _EnvironmentModule__memberMap0(localMap, otherMaps, $V) {
        var t1, t2, t3;
        localMap = new U.PublicMemberMapView(
          localMap,
          $V._eval$1('PublicMemberMapView<0>')
        );
        if (otherMaps.get$isEmpty(otherMaps)) return localMap;
        t1 = H._setArrayType([], $V._eval$1('JSArray<Map<String,0>>'));
        for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          if (t3.get$isNotEmpty(t3)) t1.push(t3);
        }
        t1.push(localMap);
        if (t1.length === 1) return localMap;
        return Z.MergedMapView$(t1, type$.String, $V);
      },
      _EnvironmentModule$_0(
        _environment,
        css,
        extensionStore,
        _modulesByVariable,
        variables,
        variableNodes,
        functions,
        mixins,
        transitivelyContainsCss,
        transitivelyContainsExtensions
      ) {
        return new Q._EnvironmentModule0(
          _environment._async_environment$_allModules,
          variables,
          variableNodes,
          functions,
          mixins,
          extensionStore,
          css,
          transitivelyContainsCss,
          transitivelyContainsExtensions,
          _environment,
          _modulesByVariable
        );
      },
      AsyncEnvironment: function AsyncEnvironment(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._async_environment$_modules = t0;
        _._async_environment$_namespaceNodes = t1;
        _._async_environment$_globalModules = t2;
        _._async_environment$_importedModules = t3;
        _._async_environment$_forwardedModules = t4;
        _._async_environment$_nestedForwardedModules = t5;
        _._async_environment$_allModules = t6;
        _._async_environment$_variables = t7;
        _._async_environment$_variableNodes = t8;
        _._async_environment$_variableIndices = t9;
        _._async_environment$_functions = t10;
        _._async_environment$_functionIndices = t11;
        _._async_environment$_mixins = t12;
        _._async_environment$_mixinIndices = t13;
        _._async_environment$_content = t14;
        _._async_environment$_inMixin = false;
        _._async_environment$_inSemiGlobalScope = true;
        _._async_environment$_lastVariableIndex = _._async_environment$_lastVariableName = null;
      },
      AsyncEnvironment_importForwards_closure: function AsyncEnvironment_importForwards_closure() {},
      AsyncEnvironment_importForwards_closure0: function AsyncEnvironment_importForwards_closure0() {},
      AsyncEnvironment_importForwards_closure1: function AsyncEnvironment_importForwards_closure1() {},
      AsyncEnvironment__getVariableFromGlobalModule_closure: function AsyncEnvironment__getVariableFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_setVariable_closure: function AsyncEnvironment_setVariable_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      AsyncEnvironment_setVariable_closure0: function AsyncEnvironment_setVariable_closure0(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_setVariable_closure1: function AsyncEnvironment_setVariable_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      AsyncEnvironment__getFunctionFromGlobalModule_closure: function AsyncEnvironment__getFunctionFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment__getMixinFromGlobalModule_closure: function AsyncEnvironment__getMixinFromGlobalModule_closure(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_toModule_closure: function AsyncEnvironment_toModule_closure() {},
      AsyncEnvironment_toDummyModule_closure: function AsyncEnvironment_toDummyModule_closure() {},
      AsyncEnvironment__fromOneModule_closure: function AsyncEnvironment__fromOneModule_closure(
        t0,
        t1
      ) {
        this.callback = t0;
        this.T = t1;
      },
      AsyncEnvironment__fromOneModule__closure: function AsyncEnvironment__fromOneModule__closure(
        t0,
        t1
      ) {
        this.entry = t0;
        this.T = t1;
      },
      _EnvironmentModule0: function _EnvironmentModule0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10
      ) {
        var _ = this;
        _.upstream = t0;
        _.variables = t1;
        _.variableNodes = t2;
        _.functions = t3;
        _.mixins = t4;
        _.extensionStore = t5;
        _.css = t6;
        _.transitivelyContainsCss = t7;
        _.transitivelyContainsExtensions = t8;
        _._async_environment$_environment = t9;
        _._async_environment$_modulesByVariable = t10;
      },
      _EnvironmentModule__EnvironmentModule_closure5: function _EnvironmentModule__EnvironmentModule_closure5() {},
      _EnvironmentModule__EnvironmentModule_closure6: function _EnvironmentModule__EnvironmentModule_closure6() {},
      _EnvironmentModule__EnvironmentModule_closure7: function _EnvironmentModule__EnvironmentModule_closure7() {},
      _EnvironmentModule__EnvironmentModule_closure8: function _EnvironmentModule__EnvironmentModule_closure8() {},
      _EnvironmentModule__EnvironmentModule_closure9: function _EnvironmentModule__EnvironmentModule_closure9() {},
      _EnvironmentModule__EnvironmentModule_closure10: function _EnvironmentModule__EnvironmentModule_closure10() {},
      BuiltInCallable$function($name, $arguments, callback, url) {
        return new Q.BuiltInCallable(
          $name,
          H._setArrayType(
            [
              new S.Tuple2(
                L.ScssParser$(
                  '@function ' + $name + '(' + $arguments + ') {',
                  null,
                  url
                ).parseArgumentDeclaration$0(),
                callback,
                type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value
              ),
            ],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value
          )
        );
      },
      BuiltInCallable$mixin($name, $arguments, callback, url) {
        return new Q.BuiltInCallable(
          $name,
          H._setArrayType(
            [
              new S.Tuple2(
                L.ScssParser$(
                  '@mixin ' + $name + '(' + $arguments + ') {',
                  null,
                  url
                ).parseArgumentDeclaration$0(),
                new Q.BuiltInCallable$mixin_closure(callback),
                type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value
              ),
            ],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value
          )
        );
      },
      BuiltInCallable$overloadedFunction($name, overloads) {
        var t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t1 = H._setArrayType(
            [],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value
          );
        for (
          t2 = overloads.get$entries(overloads),
            t2 = t2.get$iterator(t2),
            t3 =
              type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value,
            t4 = type$.String,
            t5 = type$.VariableDeclaration;
          t2.moveNext$0();

        ) {
          t6 = t2.get$current();
          t7 = S.SpanScanner$(
            '@function ' + $name + '(' + H.S(t6.key) + ') {',
            null
          );
          t1.push(
            new S.Tuple2(
              new L.ScssParser(
                P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                t7,
                C.StderrLogger_false
              ).parseArgumentDeclaration$0(),
              t6.value,
              t3
            )
          );
        }
        return new Q.BuiltInCallable($name, t1);
      },
      BuiltInCallable: function BuiltInCallable(t0, t1) {
        this.name = t0;
        this._overloads = t1;
      },
      BuiltInCallable$mixin_closure: function BuiltInCallable$mixin_closure(
        t0
      ) {
        this.callback = t0;
      },
      _function5($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:meta'
        );
      },
      global_closure26: function global_closure26() {},
      global_closure27: function global_closure27() {},
      global_closure28: function global_closure28() {},
      global_closure29: function global_closure29() {},
      BuiltInModule$($name, functions, mixins, variables, $T) {
        var t1 = P._Uri__Uri(null, $name, null, 'sass'),
          t2 = Q.BuiltInModule__callableMap(functions, $T),
          t3 = Q.BuiltInModule__callableMap(mixins, $T),
          t4 =
            variables == null
              ? C.Map_empty1
              : new P.UnmodifiableMapView(
                  variables,
                  type$.UnmodifiableMapView_String_Value
                );
        return new Q.BuiltInModule(
          t1,
          t2,
          t3,
          t4,
          $T._eval$1('BuiltInModule<0>')
        );
      },
      BuiltInModule__callableMap(callables, $T) {
        var t2,
          _i,
          callable,
          t1 = type$.String;
        if (callables == null)
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
        else {
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
          for (
            t2 = callables.length, _i = 0;
            _i < callables.length;
            callables.length === t2 ||
              (0, H.throwConcurrentModificationError)(callables),
              ++_i
          ) {
            callable = callables[_i];
            t1.$indexSet(0, J.get$name$x(callable), callable);
          }
          t1 = new P.UnmodifiableMapView(
            t1,
            type$.$env_1_1_String
              ._bind$1($T)
              ._eval$1('UnmodifiableMapView<1,2>')
          );
        }
        return new P.UnmodifiableMapView(
          t1,
          type$.$env_1_1_String._bind$1($T)._eval$1('UnmodifiableMapView<1,2>')
        );
      },
      BuiltInModule: function BuiltInModule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.url = t0;
        _.functions = t1;
        _.mixins = t2;
        _.variables = t3;
        _.$ti = t4;
      },
      _disallowedFunctionNames_closure: function _disallowedFunctionNames_closure() {},
      CssParser: function CssParser(t0, t1, t2) {
        var _ = this;
        _._isUseAllowed = true;
        _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
        _._globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      AsyncEnvironment$0() {
        var t1 = type$.String,
          t2 = type$.Module_AsyncCallable_2,
          t3 = type$.AstNode_2,
          t4 = type$.int,
          t5 = type$.AsyncCallable_2,
          t6 = type$.JSArray_Map_String_AsyncCallable_2;
        return new Q.AsyncEnvironment0(
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3),
          null,
          null,
          H._setArrayType([], type$.JSArray_Module_AsyncCallable_2),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value_2)],
            type$.JSArray_Map_String_Value_2
          ),
          H._setArrayType(
            [P.LinkedHashMap_LinkedHashMap$_empty(t1, t3)],
            type$.JSArray_Map_String_AstNode_2
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          H._setArrayType([P.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t4),
          null
        );
      },
      AsyncEnvironment$_0(
        _modules,
        _namespaceNodes,
        _globalModules,
        _importedModules,
        _forwardedModules,
        _nestedForwardedModules,
        _allModules,
        _variables,
        _variableNodes,
        _functions,
        _mixins,
        _content
      ) {
        var t1 = type$.String,
          t2 = type$.int;
        return new Q.AsyncEnvironment0(
          _modules,
          _namespaceNodes,
          _globalModules,
          _importedModules,
          _forwardedModules,
          _nestedForwardedModules,
          _allModules,
          _variables,
          _variableNodes,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _functions,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _mixins,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          _content
        );
      },
      _EnvironmentModule__EnvironmentModule1(
        environment,
        css,
        extensionStore,
        forwarded
      ) {
        var t1, t2, t3, t4, t5, t6;
        if (forwarded == null) forwarded = C.Set_empty2;
        t1 = Q._EnvironmentModule__makeModulesByVariable1(forwarded);
        t2 = Q._EnvironmentModule__memberMap1(
          C.JSArray_methods.get$first(
            environment._async_environment0$_variables
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure11(),
            type$.Map_String_Value_2
          ),
          type$.Value_2
        );
        t3 = Q._EnvironmentModule__memberMap1(
          C.JSArray_methods.get$first(
            environment._async_environment0$_variableNodes
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure12(),
            type$.Map_String_AstNode_2
          ),
          type$.AstNode_2
        );
        t4 = type$.Map_String_AsyncCallable_2;
        t5 = type$.AsyncCallable_2;
        t6 = Q._EnvironmentModule__memberMap1(
          C.JSArray_methods.get$first(
            environment._async_environment0$_functions
          ),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure13(),
            t4
          ),
          t5
        );
        t5 = Q._EnvironmentModule__memberMap1(
          C.JSArray_methods.get$first(environment._async_environment0$_mixins),
          forwarded.map$1$1(
            0,
            new Q._EnvironmentModule__EnvironmentModule_closure14(),
            t4
          ),
          t5
        );
        t4 =
          J.get$isNotEmpty$asx(css.get$children(css)) ||
          C.JSArray_methods.any$1(
            environment._async_environment0$_allModules,
            new Q._EnvironmentModule__EnvironmentModule_closure15()
          );
        return Q._EnvironmentModule$_1(
          environment,
          css,
          extensionStore,
          t1,
          t2,
          t3,
          t6,
          t5,
          t4,
          !extensionStore.get$isEmpty(extensionStore) ||
            C.JSArray_methods.any$1(
              environment._async_environment0$_allModules,
              new Q._EnvironmentModule__EnvironmentModule_closure16()
            )
        );
      },
      _EnvironmentModule__makeModulesByVariable1(forwarded) {
        var modulesByVariable, t1, t2, t3, t4, t5;
        if (forwarded.get$isEmpty(forwarded)) return C.Map_empty5;
        modulesByVariable = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.Module_AsyncCallable_2
        );
        for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0(); ) {
          t2 = t1.get$current();
          if (t2 instanceof Q._EnvironmentModule1) {
            for (
              t3 = t2._async_environment0$_modulesByVariable,
                t3 = t3.get$values(t3),
                t3 = t3.get$iterator(t3);
              t3.moveNext$0();

            ) {
              t4 = t3.get$current();
              t5 = t4.get$variables();
              B.setAll0(modulesByVariable, t5.get$keys(t5), t4);
            }
            B.setAll0(
              modulesByVariable,
              J.get$keys$z(
                C.JSArray_methods.get$first(
                  t2._async_environment0$_environment
                    ._async_environment0$_variables
                )
              ),
              t2
            );
          } else {
            t3 = t2.get$variables();
            B.setAll0(modulesByVariable, t3.get$keys(t3), t2);
          }
        }
        return modulesByVariable;
      },
      _EnvironmentModule__memberMap1(localMap, otherMaps, $V) {
        var t1, t2, t3;
        localMap = new U.PublicMemberMapView0(
          localMap,
          $V._eval$1('PublicMemberMapView0<0>')
        );
        if (otherMaps.get$isEmpty(otherMaps)) return localMap;
        t1 = H._setArrayType([], $V._eval$1('JSArray<Map<String,0>>'));
        for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          if (t3.get$isNotEmpty(t3)) t1.push(t3);
        }
        t1.push(localMap);
        if (t1.length === 1) return localMap;
        t2 = type$.String;
        t3 = type$.$env_1_1_String._bind$1($V);
        t3 = new Z.MergedMapView0(
          P.LinkedHashMap_LinkedHashMap$_empty(t2, t3._eval$1('Map<1,2>')),
          t3._eval$1('MergedMapView0<1,2>')
        );
        t3.MergedMapView$10(t1, t2, $V);
        return t3;
      },
      _EnvironmentModule$_1(
        _environment,
        css,
        extensionStore,
        _modulesByVariable,
        variables,
        variableNodes,
        functions,
        mixins,
        transitivelyContainsCss,
        transitivelyContainsExtensions
      ) {
        return new Q._EnvironmentModule1(
          _environment._async_environment0$_allModules,
          variables,
          variableNodes,
          functions,
          mixins,
          extensionStore,
          css,
          transitivelyContainsCss,
          transitivelyContainsExtensions,
          _environment,
          _modulesByVariable
        );
      },
      AsyncEnvironment0: function AsyncEnvironment0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._async_environment0$_modules = t0;
        _._async_environment0$_namespaceNodes = t1;
        _._async_environment0$_globalModules = t2;
        _._async_environment0$_importedModules = t3;
        _._async_environment0$_forwardedModules = t4;
        _._async_environment0$_nestedForwardedModules = t5;
        _._async_environment0$_allModules = t6;
        _._async_environment0$_variables = t7;
        _._async_environment0$_variableNodes = t8;
        _._async_environment0$_variableIndices = t9;
        _._async_environment0$_functions = t10;
        _._async_environment0$_functionIndices = t11;
        _._async_environment0$_mixins = t12;
        _._async_environment0$_mixinIndices = t13;
        _._async_environment0$_content = t14;
        _._async_environment0$_inMixin = false;
        _._async_environment0$_inSemiGlobalScope = true;
        _._async_environment0$_lastVariableIndex = _._async_environment0$_lastVariableName = null;
      },
      AsyncEnvironment_importForwards_closure2: function AsyncEnvironment_importForwards_closure2() {},
      AsyncEnvironment_importForwards_closure3: function AsyncEnvironment_importForwards_closure3() {},
      AsyncEnvironment_importForwards_closure4: function AsyncEnvironment_importForwards_closure4() {},
      AsyncEnvironment__getVariableFromGlobalModule_closure0: function AsyncEnvironment__getVariableFromGlobalModule_closure0(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_setVariable_closure2: function AsyncEnvironment_setVariable_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      AsyncEnvironment_setVariable_closure3: function AsyncEnvironment_setVariable_closure3(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_setVariable_closure4: function AsyncEnvironment_setVariable_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.name = t1;
      },
      AsyncEnvironment__getFunctionFromGlobalModule_closure0: function AsyncEnvironment__getFunctionFromGlobalModule_closure0(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment__getMixinFromGlobalModule_closure0: function AsyncEnvironment__getMixinFromGlobalModule_closure0(
        t0
      ) {
        this.name = t0;
      },
      AsyncEnvironment_toModule_closure0: function AsyncEnvironment_toModule_closure0() {},
      AsyncEnvironment_toDummyModule_closure0: function AsyncEnvironment_toDummyModule_closure0() {},
      AsyncEnvironment__fromOneModule_closure0: function AsyncEnvironment__fromOneModule_closure0(
        t0,
        t1
      ) {
        this.callback = t0;
        this.T = t1;
      },
      AsyncEnvironment__fromOneModule__closure0: function AsyncEnvironment__fromOneModule__closure0(
        t0,
        t1
      ) {
        this.entry = t0;
        this.T = t1;
      },
      _EnvironmentModule1: function _EnvironmentModule1(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10
      ) {
        var _ = this;
        _.upstream = t0;
        _.variables = t1;
        _.variableNodes = t2;
        _.functions = t3;
        _.mixins = t4;
        _.extensionStore = t5;
        _.css = t6;
        _.transitivelyContainsCss = t7;
        _.transitivelyContainsExtensions = t8;
        _._async_environment0$_environment = t9;
        _._async_environment0$_modulesByVariable = t10;
      },
      _EnvironmentModule__EnvironmentModule_closure11: function _EnvironmentModule__EnvironmentModule_closure11() {},
      _EnvironmentModule__EnvironmentModule_closure12: function _EnvironmentModule__EnvironmentModule_closure12() {},
      _EnvironmentModule__EnvironmentModule_closure13: function _EnvironmentModule__EnvironmentModule_closure13() {},
      _EnvironmentModule__EnvironmentModule_closure14: function _EnvironmentModule__EnvironmentModule_closure14() {},
      _EnvironmentModule__EnvironmentModule_closure15: function _EnvironmentModule__EnvironmentModule_closure15() {},
      _EnvironmentModule__EnvironmentModule_closure16: function _EnvironmentModule__EnvironmentModule_closure16() {},
      BuiltInCallable$function0($name, $arguments, callback, url) {
        return new Q.BuiltInCallable0(
          $name,
          H._setArrayType(
            [
              new S.Tuple2(
                L.ScssParser$0(
                  '@function ' + $name + '(' + $arguments + ') {',
                  null,
                  url
                ).parseArgumentDeclaration$0(),
                callback,
                type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2
              ),
            ],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2
          )
        );
      },
      BuiltInCallable$parsed($name, $arguments, callback) {
        return new Q.BuiltInCallable0(
          $name,
          H._setArrayType(
            [
              new S.Tuple2(
                $arguments,
                callback,
                type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2
              ),
            ],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2
          )
        );
      },
      BuiltInCallable$overloadedFunction0($name, overloads) {
        var t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t1 = H._setArrayType(
            [],
            type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2
          );
        for (
          t2 = overloads.get$entries(overloads),
            t2 = t2.get$iterator(t2),
            t3 =
              type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2,
            t4 = type$.String,
            t5 = type$.VariableDeclaration_2;
          t2.moveNext$0();

        ) {
          t6 = t2.get$current();
          t7 = S.SpanScanner$(
            '@function ' + $name + '(' + H.S(t6.key) + ') {',
            null
          );
          t1.push(
            new S.Tuple2(
              new L.ScssParser0(
                P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                t7,
                C.C_StderrLogger
              ).parseArgumentDeclaration$0(),
              t6.value,
              t3
            )
          );
        }
        return new Q.BuiltInCallable0($name, t1);
      },
      BuiltInCallable0: function BuiltInCallable0(t0, t1) {
        this.name = t0;
        this._built_in$_overloads = t1;
      },
      BuiltInModule$0($name, functions, mixins, variables, $T) {
        var t1 = P._Uri__Uri(null, $name, null, 'sass'),
          t2 = Q.BuiltInModule__callableMap0(functions, $T),
          t3 = Q.BuiltInModule__callableMap0(mixins, $T),
          t4 =
            variables == null
              ? C.Map_empty7
              : new P.UnmodifiableMapView(
                  variables,
                  type$.UnmodifiableMapView_String_Value_2
                );
        return new Q.BuiltInModule0(
          t1,
          t2,
          t3,
          t4,
          $T._eval$1('BuiltInModule0<0>')
        );
      },
      BuiltInModule__callableMap0(callables, $T) {
        var t2,
          _i,
          callable,
          t1 = type$.String;
        if (callables == null)
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
        else {
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
          for (
            t2 = callables.length, _i = 0;
            _i < callables.length;
            callables.length === t2 ||
              (0, H.throwConcurrentModificationError)(callables),
              ++_i
          ) {
            callable = callables[_i];
            t1.$indexSet(0, J.get$name$x(callable), callable);
          }
          t1 = new P.UnmodifiableMapView(
            t1,
            type$.$env_1_1_String
              ._bind$1($T)
              ._eval$1('UnmodifiableMapView<1,2>')
          );
        }
        return new P.UnmodifiableMapView(
          t1,
          type$.$env_1_1_String._bind$1($T)._eval$1('UnmodifiableMapView<1,2>')
        );
      },
      BuiltInModule0: function BuiltInModule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.url = t0;
        _.functions = t1;
        _.mixins = t2;
        _.variables = t3;
        _.$ti = t4;
      },
      ContentRule0: function ContentRule0(t0, t1) {
        this.$arguments = t0;
        this.span = t1;
      },
      _disallowedFunctionNames_closure0: function _disallowedFunctionNames_closure0() {},
      CssParser0: function CssParser0(t0, t1, t2) {
        var _ = this;
        _._stylesheet0$_isUseAllowed = true;
        _._stylesheet0$_inParentheses = _._stylesheet0$_inStyleRule = _._stylesheet0$_inUnknownAtRule = _._stylesheet0$_inControlDirective = _._stylesheet0$_inContentBlock = _._stylesheet0$_inMixin = false;
        _._stylesheet0$_globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      DebugRule0: function DebugRule0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      _function12($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:meta'
        );
      },
      global_closure57: function global_closure57() {},
      global_closure58: function global_closure58() {},
      global_closure59: function global_closure59() {},
      global_closure60: function global_closure60() {},
      StaticImport0: function StaticImport0(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.supports = t1;
        _.media = t2;
        _.span = t3;
      },
    },
    R = {
      ModifiableCssComment: function ModifiableCssComment(t0, t1) {
        var _ = this;
        _.text = t0;
        _.span = t1;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      ImportCache$(loadPaths, logger) {
        var t1 = R.ImportCache__toImporters(null, loadPaths, null),
          t2 = logger == null ? C.StderrLogger_false : logger,
          t3 = type$.Uri;
        return new R.ImportCache(
          t1,
          t2,
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.Tuple2_Uri_bool,
            type$.nullable_Tuple3_Importer_Uri_Uri
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t3, type$.nullable_Stylesheet),
          P.LinkedHashMap_LinkedHashMap$_empty(t3, type$.ImporterResult)
        );
      },
      ImportCache__toImporters(importers, loadPaths, packageConfig) {
        var t2,
          t3,
          _i,
          path,
          _null = null,
          sassPath = H._asStringQ(
            type$.Object._as(J.get$env$x(self.process)).SASS_PATH
          ),
          t1 = H._setArrayType([], type$.JSArray_Importer);
        for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          t1.push(
            new F.FilesystemImporter(
              $.$get$context().absolute$7(
                t3,
                _null,
                _null,
                _null,
                _null,
                _null,
                _null
              )
            )
          );
        }
        if (sassPath != null) {
          t2 = sassPath.split(
            J.$eq$(J.get$platform$x(self.process), 'win32') ? ';' : ':'
          );
          t3 = t2.length;
          _i = 0;
          for (; _i < t3; ++_i) {
            path = t2[_i];
            t1.push(
              new F.FilesystemImporter(
                $.$get$context().absolute$7(
                  path,
                  _null,
                  _null,
                  _null,
                  _null,
                  _null,
                  _null
                )
              )
            );
          }
        }
        return t1;
      },
      ImportCache: function ImportCache(t0, t1, t2, t3, t4) {
        var _ = this;
        _._importers = t0;
        _._logger = t1;
        _._canonicalizeCache = t2;
        _._importCache = t3;
        _._resultsCache = t4;
      },
      ImportCache_canonicalize_closure: function ImportCache_canonicalize_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.url = t1;
        this.forImport = t2;
      },
      ImportCache__canonicalize_closure: function ImportCache__canonicalize_closure(
        t0,
        t1
      ) {
        this.importer = t0;
        this.url = t1;
      },
      ImportCache_importCanonical_closure: function ImportCache_importCanonical_closure(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.canonicalUrl = t2;
        _.originalUrl = t3;
        _.quiet = t4;
      },
      ImportCache_humanize_closure: function ImportCache_humanize_closure(t0) {
        this.canonicalUrl = t0;
      },
      ImportCache_humanize_closure0: function ImportCache_humanize_closure0() {},
      ImportCache_humanize_closure1: function ImportCache_humanize_closure1() {},
      ForwardedModuleView_ifNecessary(inner, rule, $T) {
        var t1;
        if (rule.prefix == null)
          if (rule.shownMixinsAndFunctions == null)
            if (rule.shownVariables == null) {
              t1 = rule.hiddenMixinsAndFunctions;
              if (t1 == null) t1 = null;
              else {
                t1 = t1._base;
                t1 = t1.get$isEmpty(t1);
              }
              if (t1 === true) {
                t1 = rule.hiddenVariables;
                if (t1 == null) t1 = null;
                else {
                  t1 = t1._base;
                  t1 = t1.get$isEmpty(t1);
                }
                t1 = t1 === true;
              } else t1 = false;
            } else t1 = false;
          else t1 = false;
        else t1 = false;
        if (t1) return inner;
        else return R.ForwardedModuleView$(inner, rule, $T);
      },
      ForwardedModuleView$(_inner, _rule, $T) {
        var t1 = _rule.prefix,
          t2 = _rule.shownVariables,
          t3 = _rule.hiddenVariables,
          t4 = _rule.shownMixinsAndFunctions,
          t5 = _rule.hiddenMixinsAndFunctions;
        return new R.ForwardedModuleView(
          _inner,
          _rule,
          R.ForwardedModuleView__forwardedMap(
            _inner.get$variables(),
            t1,
            t2,
            t3,
            type$.Value
          ),
          R.ForwardedModuleView__forwardedMap(
            _inner.get$variableNodes(),
            t1,
            t2,
            t3,
            type$.AstNode
          ),
          R.ForwardedModuleView__forwardedMap(
            _inner.get$functions(_inner),
            t1,
            t4,
            t5,
            $T
          ),
          R.ForwardedModuleView__forwardedMap(
            _inner.get$mixins(),
            t1,
            t4,
            t5,
            $T
          ),
          $T._eval$1('ForwardedModuleView<0>')
        );
      },
      ForwardedModuleView__forwardedMap(map, prefix, safelist, blocklist, $V) {
        var t2,
          t1 = prefix == null;
        if (t1)
          if (safelist == null)
            if (blocklist != null) {
              t2 = blocklist._base;
              t2 = t2.get$isEmpty(t2);
            } else t2 = true;
          else t2 = false;
        else t2 = false;
        if (t2) return map;
        if (!t1)
          map = new F.PrefixedMapView(
            map,
            prefix,
            $V._eval$1('PrefixedMapView<0>')
          );
        if (safelist != null)
          map = new K.LimitedMapView(
            map,
            safelist._base.intersection$1(
              new M.MapKeySet(map, type$.MapKeySet_nullable_Object)
            ),
            type$.$env_1_1_String._bind$1($V)._eval$1('LimitedMapView<1,2>')
          );
        else {
          if (blocklist != null) {
            t1 = blocklist._base;
            t1 = t1.get$isNotEmpty(t1);
          } else t1 = false;
          if (t1)
            map = K.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
        }
        return map;
      },
      ForwardedModuleView: function ForwardedModuleView(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._forwarded_view$_inner = t0;
        _._rule = t1;
        _.variables = t2;
        _.variableNodes = t3;
        _.functions = t4;
        _.mixins = t5;
        _.$ti = t6;
      },
      UnprefixedMapView: function UnprefixedMapView(t0, t1, t2) {
        this._unprefixed_map_view$_map = t0;
        this._unprefixed_map_view$_prefix = t1;
        this.$ti = t2;
      },
      _UnprefixedKeys: function _UnprefixedKeys(t0) {
        this._unprefixed_map_view$_view = t0;
      },
      _UnprefixedKeys_iterator_closure: function _UnprefixedKeys_iterator_closure(
        t0
      ) {
        this.$this = t0;
      },
      _UnprefixedKeys_iterator_closure0: function _UnprefixedKeys_iterator_closure0(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor$(
        functions,
        importCache,
        logger,
        nodeImporter,
        quietDeps,
        sourceMap
      ) {
        var t1 = type$.Uri,
          t2 = type$.Module_Callable,
          t3 = H._setArrayType([], type$.JSArray_Tuple2_String_AstNode),
          t4 = logger == null ? C.StderrLogger_false : logger;
        t3 = new R._EvaluateVisitor(
          importCache,
          nodeImporter,
          P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Callable),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode),
          t4,
          P.LinkedHashSet_LinkedHashSet$_empty(type$.Tuple2_String_SourceSpan),
          quietDeps,
          sourceMap,
          O.Environment$(),
          P.LinkedHashSet_LinkedHashSet$_empty(t1),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_AstNode),
          t3,
          C.Configuration_Map_empty
        );
        t3._EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap(
          functions,
          importCache,
          logger,
          nodeImporter,
          quietDeps,
          sourceMap
        );
        return t3;
      },
      Evaluator: function Evaluator(t0, t1) {
        this._visitor = t0;
        this._importer = t1;
      },
      _EvaluateVisitor: function _EvaluateVisitor(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        t12,
        t13,
        t14
      ) {
        var _ = this;
        _._evaluate$_importCache = t0;
        _._nodeImporter = t1;
        _._builtInFunctions = t2;
        _._builtInModules = t3;
        _._modules = t4;
        _._moduleNodes = t5;
        _._evaluate$_logger = t6;
        _._warningsEmitted = t7;
        _._quietDeps = t8;
        _._sourceMap = t9;
        _._environment = t10;
        _._declarationName = _.__parent = _._mediaQueries = _._styleRuleIgnoringAtRoot = null;
        _._member = 'root stylesheet';
        _._importSpan = _._callableNode = null;
        _._inKeyframes = _._atRootExcludingStyleRule = _._inUnknownAtRule = _._inFunction = false;
        _._loadedUrls = t11;
        _._activeModules = t12;
        _._stack = t13;
        _._importer = null;
        _._inDependency = false;
        _.__extensionStore = _._outOfOrderImports = _.__endOfImports = _.__root = _.__stylesheet = null;
        _._configuration = t14;
      },
      _EvaluateVisitor_closure: function _EvaluateVisitor_closure(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure0: function _EvaluateVisitor_closure0(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure1: function _EvaluateVisitor_closure1(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure2: function _EvaluateVisitor_closure2(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure3: function _EvaluateVisitor_closure3(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure4: function _EvaluateVisitor_closure4(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure5: function _EvaluateVisitor_closure5(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure6: function _EvaluateVisitor_closure6(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure1: function _EvaluateVisitor__closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.name = t1;
        this.module = t2;
      },
      _EvaluateVisitor_closure7: function _EvaluateVisitor_closure7(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_closure8: function _EvaluateVisitor_closure8(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor__closure: function _EvaluateVisitor__closure(
        t0,
        t1,
        t2
      ) {
        this.values = t0;
        this.span = t1;
        this.callableNode = t2;
      },
      _EvaluateVisitor__closure0: function _EvaluateVisitor__closure0(t0) {
        this.$this = t0;
      },
      _EvaluateVisitor_run_closure: function _EvaluateVisitor_run_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.importer = t2;
      },
      _EvaluateVisitor_runExpression_closure: function _EvaluateVisitor_runExpression_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.importer = t1;
        this.expression = t2;
      },
      _EvaluateVisitor_runExpression__closure: function _EvaluateVisitor_runExpression__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.expression = t1;
      },
      _EvaluateVisitor_runStatement_closure: function _EvaluateVisitor_runStatement_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.importer = t1;
        this.statement = t2;
      },
      _EvaluateVisitor_runStatement__closure: function _EvaluateVisitor_runStatement__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.statement = t1;
      },
      _EvaluateVisitor__withWarnCallback_closure: function _EvaluateVisitor__withWarnCallback_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.nodeWithSpan = t1;
      },
      _EvaluateVisitor__loadModule_closure: function _EvaluateVisitor__loadModule_closure(
        t0,
        t1
      ) {
        this.callback = t0;
        this.builtInModule = t1;
      },
      _EvaluateVisitor__loadModule_closure0: function _EvaluateVisitor__loadModule_closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _.$this = t0;
        _.url = t1;
        _.nodeWithSpan = t2;
        _.baseUrl = t3;
        _.namesInErrors = t4;
        _.configuration = t5;
        _.callback = t6;
      },
      _EvaluateVisitor__loadModule__closure: function _EvaluateVisitor__loadModule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.message = t1;
      },
      _EvaluateVisitor__execute_closure: function _EvaluateVisitor__execute_closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.importer = t1;
        _.stylesheet = t2;
        _.extensionStore = t3;
        _.configuration = t4;
        _.css = t5;
      },
      _EvaluateVisitor__combineCss_closure: function _EvaluateVisitor__combineCss_closure() {},
      _EvaluateVisitor__combineCss_closure0: function _EvaluateVisitor__combineCss_closure0(
        t0
      ) {
        this.selectors = t0;
      },
      _EvaluateVisitor__combineCss_closure1: function _EvaluateVisitor__combineCss_closure1() {},
      _EvaluateVisitor__extendModules_closure: function _EvaluateVisitor__extendModules_closure(
        t0
      ) {
        this.originalSelectors = t0;
      },
      _EvaluateVisitor__extendModules_closure0: function _EvaluateVisitor__extendModules_closure0() {},
      _EvaluateVisitor__topologicalModules_visitModule: function _EvaluateVisitor__topologicalModules_visitModule(
        t0,
        t1
      ) {
        this.seen = t0;
        this.sorted = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure: function _EvaluateVisitor_visitAtRootRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure0: function _EvaluateVisitor_visitAtRootRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitAtRootRule_closure1: function _EvaluateVisitor_visitAtRootRule_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure: function _EvaluateVisitor__scopeForAtRoot_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.newParent = t1;
        this.node = t2;
      },
      _EvaluateVisitor__scopeForAtRoot_closure0: function _EvaluateVisitor__scopeForAtRoot_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure1: function _EvaluateVisitor__scopeForAtRoot_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot__closure: function _EvaluateVisitor__scopeForAtRoot__closure(
        t0,
        t1
      ) {
        this.innerScope = t0;
        this.callback = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure2: function _EvaluateVisitor__scopeForAtRoot_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor__scopeForAtRoot_closure3: function _EvaluateVisitor__scopeForAtRoot_closure3() {},
      _EvaluateVisitor__scopeForAtRoot_closure4: function _EvaluateVisitor__scopeForAtRoot_closure4(
        t0,
        t1
      ) {
        this.$this = t0;
        this.innerScope = t1;
      },
      _EvaluateVisitor_visitContentRule_closure: function _EvaluateVisitor_visitContentRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.content = t1;
      },
      _EvaluateVisitor_visitDeclaration_closure: function _EvaluateVisitor_visitDeclaration_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitDeclaration_closure0: function _EvaluateVisitor_visitDeclaration_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitEachRule_closure: function _EvaluateVisitor_visitEachRule_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure0: function _EvaluateVisitor_visitEachRule_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitEachRule_closure1: function _EvaluateVisitor_visitEachRule_closure1(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.list = t1;
        _.setVariables = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitEachRule__closure: function _EvaluateVisitor_visitEachRule__closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.setVariables = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitEachRule___closure: function _EvaluateVisitor_visitEachRule___closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitExtendRule_closure: function _EvaluateVisitor_visitExtendRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.targetText = t1;
      },
      _EvaluateVisitor_visitAtRule_closure: function _EvaluateVisitor_visitAtRule_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitAtRule_closure0: function _EvaluateVisitor_visitAtRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule__closure: function _EvaluateVisitor_visitAtRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.children = t1;
      },
      _EvaluateVisitor_visitAtRule_closure1: function _EvaluateVisitor_visitAtRule_closure1() {},
      _EvaluateVisitor_visitForRule_closure: function _EvaluateVisitor_visitForRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure0: function _EvaluateVisitor_visitForRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForRule_closure1: function _EvaluateVisitor_visitForRule_closure1(
        t0
      ) {
        this.fromNumber = t0;
      },
      _EvaluateVisitor_visitForRule_closure2: function _EvaluateVisitor_visitForRule_closure2(
        t0,
        t1
      ) {
        this.toNumber = t0;
        this.fromNumber = t1;
      },
      _EvaluateVisitor_visitForRule_closure3: function _EvaluateVisitor_visitForRule_closure3(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.node = t2;
        _.from = t3;
        _.direction = t4;
        _.fromNumber = t5;
      },
      _EvaluateVisitor_visitForRule__closure: function _EvaluateVisitor_visitForRule__closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitForwardRule_closure: function _EvaluateVisitor_visitForwardRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitForwardRule_closure0: function _EvaluateVisitor_visitForwardRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIfRule_closure: function _EvaluateVisitor_visitIfRule_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitIfRule__closure: function _EvaluateVisitor_visitIfRule__closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport_closure: function _EvaluateVisitor__visitDynamicImport_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.$import = t1;
      },
      _EvaluateVisitor__visitDynamicImport__closure: function _EvaluateVisitor__visitDynamicImport__closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__visitDynamicImport__closure0: function _EvaluateVisitor__visitDynamicImport__closure0(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.$this = t0;
        _.result = t1;
        _.stylesheet = t2;
        _.environment = t3;
        _.children = t4;
      },
      _EvaluateVisitor__visitStaticImport_closure: function _EvaluateVisitor__visitStaticImport_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure: function _EvaluateVisitor_visitIncludeRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitIncludeRule_closure0: function _EvaluateVisitor_visitIncludeRule_closure0(
        t0
      ) {
        this.node = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure2: function _EvaluateVisitor_visitIncludeRule_closure2(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitIncludeRule_closure1: function _EvaluateVisitor_visitIncludeRule_closure1(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.contentCallable = t1;
        _.mixin = t2;
        _.nodeWithSpan = t3;
      },
      _EvaluateVisitor_visitIncludeRule__closure: function _EvaluateVisitor_visitIncludeRule__closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule___closure: function _EvaluateVisitor_visitIncludeRule___closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mixin = t1;
        this.nodeWithSpan = t2;
      },
      _EvaluateVisitor_visitIncludeRule____closure: function _EvaluateVisitor_visitIncludeRule____closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.statement = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure: function _EvaluateVisitor_visitMediaRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.queries = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure0: function _EvaluateVisitor_visitMediaRule_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.mergedQueries = t1;
        _.queries = t2;
        _.node = t3;
      },
      _EvaluateVisitor_visitMediaRule__closure: function _EvaluateVisitor_visitMediaRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule___closure: function _EvaluateVisitor_visitMediaRule___closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitMediaRule_closure1: function _EvaluateVisitor_visitMediaRule_closure1(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor__visitMediaQueries_closure: function _EvaluateVisitor__visitMediaQueries_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.resolved = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure: function _EvaluateVisitor_visitStyleRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure0: function _EvaluateVisitor_visitStyleRule_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure1: function _EvaluateVisitor_visitStyleRule_closure1() {},
      _EvaluateVisitor_visitStyleRule_closure2: function _EvaluateVisitor_visitStyleRule_closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.selectorText = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure3: function _EvaluateVisitor_visitStyleRule_closure3(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure4: function _EvaluateVisitor_visitStyleRule_closure4(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitStyleRule__closure: function _EvaluateVisitor_visitStyleRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitStyleRule_closure5: function _EvaluateVisitor_visitStyleRule_closure5() {},
      _EvaluateVisitor_visitSupportsRule_closure: function _EvaluateVisitor_visitSupportsRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule__closure: function _EvaluateVisitor_visitSupportsRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitSupportsRule_closure0: function _EvaluateVisitor_visitSupportsRule_closure0() {},
      _EvaluateVisitor_visitVariableDeclaration_closure: function _EvaluateVisitor_visitVariableDeclaration_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.override = t2;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure0: function _EvaluateVisitor_visitVariableDeclaration_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitVariableDeclaration_closure1: function _EvaluateVisitor_visitVariableDeclaration_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.value = t2;
      },
      _EvaluateVisitor_visitUseRule_closure: function _EvaluateVisitor_visitUseRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWarnRule_closure: function _EvaluateVisitor_visitWarnRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule_closure: function _EvaluateVisitor_visitWhileRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitWhileRule__closure: function _EvaluateVisitor_visitWhileRule__closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure: function _EvaluateVisitor_visitBinaryOperationExpression_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation: function _EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation() {},
      _EvaluateVisitor_visitVariableExpression_closure: function _EvaluateVisitor_visitVariableExpression_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitListExpression_closure: function _EvaluateVisitor_visitListExpression_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitFunctionExpression_closure: function _EvaluateVisitor_visitFunctionExpression_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitFunctionExpression_closure0: function _EvaluateVisitor_visitFunctionExpression_closure0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitInterpolatedFunctionExpression_closure: function _EvaluateVisitor_visitInterpolatedFunctionExpression_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.node = t1;
        this.$function = t2;
      },
      _EvaluateVisitor__runUserDefinedCallable_closure: function _EvaluateVisitor__runUserDefinedCallable_closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.callable = t1;
        _.evaluated = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable__closure: function _EvaluateVisitor__runUserDefinedCallable__closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable___closure: function _EvaluateVisitor__runUserDefinedCallable___closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.evaluated = t1;
        _.callable = t2;
        _.nodeWithSpan = t3;
        _.run = t4;
        _.V = t5;
      },
      _EvaluateVisitor__runUserDefinedCallable____closure: function _EvaluateVisitor__runUserDefinedCallable____closure() {},
      _EvaluateVisitor__runFunctionCallable_closure: function _EvaluateVisitor__runFunctionCallable_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.callable = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure: function _EvaluateVisitor__runBuiltInCallable_closure(
        t0,
        t1,
        t2
      ) {
        this.overload = t0;
        this.evaluated = t1;
        this.namedSet = t2;
      },
      _EvaluateVisitor__runBuiltInCallable_closure0: function _EvaluateVisitor__runBuiltInCallable_closure0(
        t0,
        t1
      ) {
        this.callback = t0;
        this.evaluated = t1;
      },
      _EvaluateVisitor__runBuiltInCallable_closure1: function _EvaluateVisitor__runBuiltInCallable_closure1() {},
      _EvaluateVisitor__evaluateArguments_closure: function _EvaluateVisitor__evaluateArguments_closure() {},
      _EvaluateVisitor__evaluateArguments_closure0: function _EvaluateVisitor__evaluateArguments_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
      },
      _EvaluateVisitor__evaluateArguments_closure1: function _EvaluateVisitor__evaluateArguments_closure1(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.namedNodes = t3;
      },
      _EvaluateVisitor__evaluateArguments_closure2: function _EvaluateVisitor__evaluateArguments_closure2() {},
      _EvaluateVisitor__evaluateMacroArguments_closure: function _EvaluateVisitor__evaluateMacroArguments_closure(
        t0
      ) {
        this.restArgs = t0;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure0: function _EvaluateVisitor__evaluateMacroArguments_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.restNodeForSpan = t1;
        this.restArgs = t2;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure1: function _EvaluateVisitor__evaluateMacroArguments_closure1(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.named = t1;
        _.restNodeForSpan = t2;
        _.restArgs = t3;
      },
      _EvaluateVisitor__evaluateMacroArguments_closure2: function _EvaluateVisitor__evaluateMacroArguments_closure2(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.keywordRestNodeForSpan = t1;
        this.keywordRestArgs = t2;
      },
      _EvaluateVisitor__addRestMap_closure: function _EvaluateVisitor__addRestMap_closure(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.$this = t0;
        _.values = t1;
        _.convert = t2;
        _.expressionNode = t3;
        _.map = t4;
        _.nodeWithSpan = t5;
      },
      _EvaluateVisitor__verifyArguments_closure: function _EvaluateVisitor__verifyArguments_closure(
        t0,
        t1,
        t2
      ) {
        this.$arguments = t0;
        this.positional = t1;
        this.named = t2;
      },
      _EvaluateVisitor_visitStringExpression_closure: function _EvaluateVisitor_visitStringExpression_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor_visitCssAtRule_closure: function _EvaluateVisitor_visitCssAtRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssAtRule_closure0: function _EvaluateVisitor_visitCssAtRule_closure0() {},
      _EvaluateVisitor_visitCssKeyframeBlock_closure: function _EvaluateVisitor_visitCssKeyframeBlock_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssKeyframeBlock_closure0: function _EvaluateVisitor_visitCssKeyframeBlock_closure0() {},
      _EvaluateVisitor_visitCssMediaRule_closure: function _EvaluateVisitor_visitCssMediaRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure0: function _EvaluateVisitor_visitCssMediaRule_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.mergedQueries = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssMediaRule__closure: function _EvaluateVisitor_visitCssMediaRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule___closure: function _EvaluateVisitor_visitCssMediaRule___closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssMediaRule_closure1: function _EvaluateVisitor_visitCssMediaRule_closure1(
        t0
      ) {
        this.mergedQueries = t0;
      },
      _EvaluateVisitor_visitCssStyleRule_closure: function _EvaluateVisitor_visitCssStyleRule_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.rule = t1;
        this.node = t2;
      },
      _EvaluateVisitor_visitCssStyleRule__closure: function _EvaluateVisitor_visitCssStyleRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssStyleRule_closure0: function _EvaluateVisitor_visitCssStyleRule_closure0() {},
      _EvaluateVisitor_visitCssSupportsRule_closure: function _EvaluateVisitor_visitCssSupportsRule_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule__closure: function _EvaluateVisitor_visitCssSupportsRule__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.node = t1;
      },
      _EvaluateVisitor_visitCssSupportsRule_closure0: function _EvaluateVisitor_visitCssSupportsRule_closure0() {},
      _EvaluateVisitor__performInterpolation_closure: function _EvaluateVisitor__performInterpolation_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.warnForColor = t1;
        this.interpolation = t2;
      },
      _EvaluateVisitor__serialize_closure: function _EvaluateVisitor__serialize_closure(
        t0,
        t1
      ) {
        this.value = t0;
        this.quote = t1;
      },
      _EvaluateVisitor__expressionNode_closure: function _EvaluateVisitor__expressionNode_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.expression = t1;
      },
      _EvaluateVisitor__withoutSlash_recommendation: function _EvaluateVisitor__withoutSlash_recommendation() {},
      _EvaluateVisitor__stackFrame_closure: function _EvaluateVisitor__stackFrame_closure(
        t0
      ) {
        this.$this = t0;
      },
      _EvaluateVisitor__stackTrace_closure: function _EvaluateVisitor__stackTrace_closure(
        t0
      ) {
        this.$this = t0;
      },
      _ImportedCssVisitor: function _ImportedCssVisitor(t0) {
        this._visitor = t0;
      },
      _ImportedCssVisitor_visitCssAtRule_closure: function _ImportedCssVisitor_visitCssAtRule_closure() {},
      _ImportedCssVisitor_visitCssMediaRule_closure: function _ImportedCssVisitor_visitCssMediaRule_closure(
        t0
      ) {
        this.hasBeenMerged = t0;
      },
      _ImportedCssVisitor_visitCssStyleRule_closure: function _ImportedCssVisitor_visitCssStyleRule_closure() {},
      _ImportedCssVisitor_visitCssSupportsRule_closure: function _ImportedCssVisitor_visitCssSupportsRule_closure() {},
      _ArgumentResults: function _ArgumentResults(t0, t1, t2, t3, t4) {
        var _ = this;
        _.positional = t0;
        _.positionalNodes = t1;
        _.named = t2;
        _.namedNodes = t3;
        _.separator = t4;
      },
      _LoadedStylesheet: function _LoadedStylesheet(t0, t1, t2) {
        this.stylesheet = t0;
        this.importer = t1;
        this.isDependency = t2;
      },
      ModifiableCssComment0: function ModifiableCssComment0(t0, t1) {
        var _ = this;
        _.text = t0;
        _.span = t1;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      ForwardedModuleView_ifNecessary0(inner, rule, $T) {
        var t1;
        if (rule.prefix == null)
          if (rule.shownMixinsAndFunctions == null)
            if (rule.shownVariables == null) {
              t1 = rule.hiddenMixinsAndFunctions;
              if (t1 == null) t1 = null;
              else {
                t1 = t1._base;
                t1 = t1.get$isEmpty(t1);
              }
              if (t1 === true) {
                t1 = rule.hiddenVariables;
                if (t1 == null) t1 = null;
                else {
                  t1 = t1._base;
                  t1 = t1.get$isEmpty(t1);
                }
                t1 = t1 === true;
              } else t1 = false;
            } else t1 = false;
          else t1 = false;
        else t1 = false;
        if (t1) return inner;
        else return R.ForwardedModuleView$0(inner, rule, $T);
      },
      ForwardedModuleView$0(_inner, _rule, $T) {
        var t1 = _rule.prefix,
          t2 = _rule.shownVariables,
          t3 = _rule.hiddenVariables,
          t4 = _rule.shownMixinsAndFunctions,
          t5 = _rule.hiddenMixinsAndFunctions;
        return new R.ForwardedModuleView0(
          _inner,
          _rule,
          R.ForwardedModuleView__forwardedMap0(
            _inner.get$variables(),
            t1,
            t2,
            t3,
            type$.Value_2
          ),
          R.ForwardedModuleView__forwardedMap0(
            _inner.get$variableNodes(),
            t1,
            t2,
            t3,
            type$.AstNode_2
          ),
          R.ForwardedModuleView__forwardedMap0(
            _inner.get$functions(_inner),
            t1,
            t4,
            t5,
            $T
          ),
          R.ForwardedModuleView__forwardedMap0(
            _inner.get$mixins(),
            t1,
            t4,
            t5,
            $T
          ),
          $T._eval$1('ForwardedModuleView0<0>')
        );
      },
      ForwardedModuleView__forwardedMap0(map, prefix, safelist, blocklist, $V) {
        var t2,
          t1 = prefix == null;
        if (t1)
          if (safelist == null)
            if (blocklist != null) {
              t2 = blocklist._base;
              t2 = t2.get$isEmpty(t2);
            } else t2 = true;
          else t2 = false;
        else t2 = false;
        if (t2) return map;
        if (!t1)
          map = new F.PrefixedMapView0(
            map,
            prefix,
            $V._eval$1('PrefixedMapView0<0>')
          );
        if (safelist != null)
          map = new K.LimitedMapView0(
            map,
            safelist._base.intersection$1(
              new M.MapKeySet(map, type$.MapKeySet_nullable_Object)
            ),
            type$.$env_1_1_String._bind$1($V)._eval$1('LimitedMapView0<1,2>')
          );
        else {
          if (blocklist != null) {
            t1 = blocklist._base;
            t1 = t1.get$isNotEmpty(t1);
          } else t1 = false;
          if (t1)
            map = K.LimitedMapView$blocklist0(map, blocklist, type$.String, $V);
        }
        return map;
      },
      ForwardedModuleView0: function ForwardedModuleView0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._forwarded_view0$_inner = t0;
        _._forwarded_view0$_rule = t1;
        _.variables = t2;
        _.variableNodes = t3;
        _.functions = t4;
        _.mixins = t5;
        _.$ti = t6;
      },
      RenderOptions: function RenderOptions() {},
      _translateReturnValue(val) {
        if (type$.Future_dynamic._is(val))
          return M.futureToPromise(val, type$.dynamic);
        else return val;
      },
      main0() {
        new Uint8Array(0);
        J.set$render$x(self.exports, P.allowInterop(B.node___render$closure()));
        J.set$info$x(
          self.exports,
          'dart-sass\t1.39.0\t(Sass Compiler)\t[Dart]\ndart2js\t2.14.1\t(Dart Compiler)\t[Dart]'
        );
        J.set$types$x(self.exports, {
          Boolean: $.$get$booleanConstructor(),
          Color: $.$get$colorConstructor(),
          List: $.$get$listConstructor(),
          Map: $.$get$mapConstructor(),
          Null: $.$get$nullConstructor(),
          Number: $.$get$numberConstructor(),
          String: $.$get$stringConstructor(),
          Error: self.Error,
        });
        J.set$NULL$x(self.exports, C.C__SassNull);
        J.set$TRUE$x(self.exports, C.SassBoolean_true);
        J.set$FALSE$x(self.exports, C.SassBoolean_false);
        J.set$cli_pkg_main_0_$x(
          self.exports,
          R._wrapMain(U.sass__main$closure())
        );
      },
      _wrapMain(main) {
        if (type$.dynamic_Function._is(main))
          return P.allowInterop(new R._wrapMain_closure(main));
        else return P.allowInterop(new R._wrapMain_closure0(main));
      },
      _Exports: function _Exports() {},
      _wrapMain_closure: function _wrapMain_closure(t0) {
        this.main = t0;
      },
      _wrapMain_closure0: function _wrapMain_closure0(t0) {
        this.main = t0;
      },
      UnprefixedMapView0: function UnprefixedMapView0(t0, t1, t2) {
        this._unprefixed_map_view0$_map = t0;
        this._unprefixed_map_view0$_prefix = t1;
        this.$ti = t2;
      },
      _UnprefixedKeys0: function _UnprefixedKeys0(t0) {
        this._unprefixed_map_view0$_view = t0;
      },
      _UnprefixedKeys_iterator_closure1: function _UnprefixedKeys_iterator_closure1(
        t0
      ) {
        this.$this = t0;
      },
      _UnprefixedKeys_iterator_closure2: function _UnprefixedKeys_iterator_closure2(
        t0
      ) {
        this.$this = t0;
      },
    },
    S = {
      VariableExpression: function VariableExpression(t0, t1, t2) {
        this.namespace = t0;
        this.name = t1;
        this.span = t2;
      },
      ComplexSelector$(components, lineBreak) {
        var t1 = P.List_List$unmodifiable(
          components,
          type$.ComplexSelectorComponent
        );
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new S.ComplexSelector(t1, lineBreak);
      },
      ComplexSelector: function ComplexSelector(t0, t1) {
        var _ = this;
        _.components = t0;
        _.lineBreak = t1;
        _.__ComplexSelector_isInvisible = _._complex$_maxSpecificity = _._minSpecificity = null;
      },
      ComplexSelector_isInvisible_closure: function ComplexSelector_isInvisible_closure() {},
      Combinator: function Combinator(t0) {
        this._complex$_text = t0;
      },
      AsyncBuiltInCallable$mixin($name, $arguments, callback, url) {
        return new S.AsyncBuiltInCallable(
          $name,
          L.ScssParser$(
            '@mixin ' + $name + '(' + $arguments + ') {',
            null,
            url
          ).parseArgumentDeclaration$0(),
          new S.AsyncBuiltInCallable$mixin_closure(callback)
        );
      },
      AsyncBuiltInCallable: function AsyncBuiltInCallable(t0, t1, t2) {
        this.name = t0;
        this._async_built_in$_arguments = t1;
        this._async_built_in$_callback = t2;
      },
      AsyncBuiltInCallable$mixin_closure: function AsyncBuiltInCallable$mixin_closure(
        t0
      ) {
        this.callback = t0;
      },
      Extension: function Extension(t0, t1, t2, t3, t4) {
        var _ = this;
        _.extender = t0;
        _.target = t1;
        _.mediaContext = t2;
        _.isOptional = t3;
        _.span = t4;
      },
      Extender: function Extender(t0, t1, t2) {
        var _ = this;
        _.selector = t0;
        _.isOriginal = t1;
        _._extension = null;
        _.span = t2;
      },
      StderrLogger: function StderrLogger(t0) {
        this.color = t0;
      },
      ComplexSassNumber$(value, numeratorUnits, denominatorUnits) {
        var t1 = type$.String;
        return new S.ComplexSassNumber(
          P.List_List$unmodifiable(numeratorUnits, t1),
          P.List_List$unmodifiable(denominatorUnits, t1),
          value,
          null
        );
      },
      ComplexSassNumber: function ComplexSassNumber(t0, t1, t2, t3) {
        var _ = this;
        _.numeratorUnits = t0;
        _.denominatorUnits = t1;
        _.value = t2;
        _.asSlash = t3;
      },
      SpanScanner$(string, sourceUrl) {
        var t2,
          t1 = Y.SourceFile$fromString(string, sourceUrl);
        if (sourceUrl == null) t2 = null;
        else
          t2 =
            typeof sourceUrl == 'string'
              ? P.Uri_parse(sourceUrl)
              : type$.Uri._as(sourceUrl);
        return new S.SpanScanner(t1, t2, string);
      },
      SpanScanner: function SpanScanner(t0, t1, t2) {
        var _ = this;
        _._sourceFile = t0;
        _.sourceUrl = t1;
        _.string = t2;
        _._string_scanner$_position = 0;
        _._lastMatchPosition = _._lastMatch = null;
      },
      _SpanScannerState: function _SpanScannerState(t0, t1) {
        this._scanner = t0;
        this.position = t1;
      },
      Tuple2: function Tuple2(t0, t1, t2) {
        this.item1 = t0;
        this.item2 = t1;
        this.$ti = t2;
      },
      Tuple3: function Tuple3(t0, t1, t2, t3) {
        var _ = this;
        _.item1 = t0;
        _.item2 = t1;
        _.item3 = t2;
        _.$ti = t3;
      },
      AsyncBuiltInCallable$mixin0($name, $arguments, callback, url) {
        return new S.AsyncBuiltInCallable0(
          $name,
          L.ScssParser$0(
            '@mixin ' + $name + '(' + $arguments + ') {',
            null,
            url
          ).parseArgumentDeclaration$0(),
          new S.AsyncBuiltInCallable$mixin_closure0(callback)
        );
      },
      AsyncBuiltInCallable0: function AsyncBuiltInCallable0(t0, t1, t2) {
        this.name = t0;
        this._async_built_in0$_arguments = t1;
        this._async_built_in0$_callback = t2;
      },
      AsyncBuiltInCallable$mixin_closure0: function AsyncBuiltInCallable$mixin_closure0(
        t0
      ) {
        this.callback = t0;
      },
      ComplexSassNumber$0(value, numeratorUnits, denominatorUnits) {
        var t1 = type$.String;
        return new S.ComplexSassNumber0(
          P.List_List$unmodifiable(numeratorUnits, t1),
          P.List_List$unmodifiable(denominatorUnits, t1),
          value,
          null
        );
      },
      ComplexSassNumber0: function ComplexSassNumber0(t0, t1, t2, t3) {
        var _ = this;
        _.numeratorUnits = t0;
        _.denominatorUnits = t1;
        _.value = t2;
        _.asSlash = t3;
      },
      ComplexSelector$0(components, lineBreak) {
        var t1 = P.List_List$unmodifiable(
          components,
          type$.ComplexSelectorComponent_2
        );
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new S.ComplexSelector0(t1, lineBreak);
      },
      ComplexSelector0: function ComplexSelector0(t0, t1) {
        var _ = this;
        _.components = t0;
        _.lineBreak = t1;
        _._complex0$__ComplexSelector_isInvisible = _._complex0$_maxSpecificity = _._complex0$_minSpecificity = null;
      },
      ComplexSelector_isInvisible_closure0: function ComplexSelector_isInvisible_closure0() {},
      Combinator0: function Combinator0(t0) {
        this._complex0$_text = t0;
      },
      Extension0: function Extension0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.extender = t0;
        _.target = t1;
        _.mediaContext = t2;
        _.isOptional = t3;
        _.span = t4;
      },
      Extender0: function Extender0(t0, t1, t2) {
        var _ = this;
        _.selector = t0;
        _.isOriginal = t1;
        _._extension$_extension = null;
        _.span = t2;
      },
      StderrLogger0: function StderrLogger0() {},
      VariableExpression0: function VariableExpression0(t0, t1, t2) {
        this.namespace = t0;
        this.name = t1;
        this.span = t2;
      },
    },
    T = {
      NumberExpression: function NumberExpression(t0, t1, t2) {
        this.value = t0;
        this.unit = t1;
        this.span = t2;
      },
      ParenthesizedExpression: function ParenthesizedExpression(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      SelectorExpression: function SelectorExpression(t0) {
        this.span = t0;
      },
      MixinRule$($name, $arguments, children, span, comment) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new T.MixinRule($name, $arguments, span, t1, t2);
      },
      MixinRule: function MixinRule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.__MixinRule_hasContent = null;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      _HasContentVisitor: function _HasContentVisitor() {},
      UseRule: function UseRule(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.namespace = t1;
        _.configuration = t2;
        _.span = t3;
      },
      Selector: function Selector() {},
      _prependParent(compound) {
        var t2,
          _null = null,
          t1 = compound.components,
          first = C.JSArray_methods.get$first(t1);
        if (first instanceof N.UniversalSelector) return _null;
        if (first instanceof F.TypeSelector) {
          t2 = first.name;
          if (t2.namespace != null) return _null;
          t2 = H._setArrayType(
            [new M.ParentSelector(t2.name)],
            type$.JSArray_SimpleSelector
          );
          C.JSArray_methods.addAll$1(
            t2,
            H.SubListIterable$(
              t1,
              1,
              _null,
              H._arrayInstanceType(t1)._precomputed1
            )
          );
          return X.CompoundSelector$(t2);
        } else {
          t2 = H._setArrayType(
            [new M.ParentSelector(_null)],
            type$.JSArray_SimpleSelector
          );
          C.JSArray_methods.addAll$1(t2, t1);
          return X.CompoundSelector$(t2);
        }
      },
      _function0($name, $arguments, callback) {
        return Q.BuiltInCallable$function(
          $name,
          $arguments,
          callback,
          'sass:selector'
        );
      },
      _nest_closure: function _nest_closure() {},
      _nest__closure: function _nest__closure(t0) {
        this._box_0 = t0;
      },
      _nest__closure0: function _nest__closure0() {},
      _append_closure: function _append_closure() {},
      _append__closure: function _append__closure() {},
      _append__closure0: function _append__closure0() {},
      _append___closure: function _append___closure(t0) {
        this.parent = t0;
      },
      _extend_closure: function _extend_closure() {},
      _replace_closure: function _replace_closure() {},
      _unify_closure: function _unify_closure() {},
      _isSuperselector_closure: function _isSuperselector_closure() {},
      _simpleSelectors_closure: function _simpleSelectors_closure() {},
      _simpleSelectors__closure: function _simpleSelectors__closure() {},
      _parse_closure: function _parse_closure() {},
      TrackingLogger: function TrackingLogger(t0) {
        this._tracking$_logger = t0;
        this._emittedDebug = this._emittedWarning = false;
      },
      SelectorParser$(contents, allowParent, allowPlaceholder, logger, url) {
        var t1 = S.SpanScanner$(contents, url);
        return new T.SelectorParser(
          allowParent,
          allowPlaceholder,
          t1,
          logger == null ? C.StderrLogger_false : logger
        );
      },
      SelectorParser: function SelectorParser(t0, t1, t2, t3) {
        var _ = this;
        _._allowParent = t0;
        _._allowPlaceholder = t1;
        _.scanner = t2;
        _.logger = t3;
      },
      SelectorParser_parse_closure: function SelectorParser_parse_closure(t0) {
        this.$this = t0;
      },
      SelectorParser_parseCompoundSelector_closure: function SelectorParser_parseCompoundSelector_closure(
        t0
      ) {
        this.$this = t0;
      },
      SassNumber_SassNumber(value, unit) {
        return unit == null
          ? new N.UnitlessSassNumber(value, null)
          : new L.SingleUnitSassNumber(unit, value, null);
      },
      SassNumber_SassNumber$withUnits(value, denominatorUnits, numeratorUnits) {
        var t1, t2;
        if (denominatorUnits == null || J.get$isEmpty$asx(denominatorUnits)) {
          t1 = J.getInterceptor$asx(numeratorUnits);
          t2 = t1.get$isEmpty(numeratorUnits);
          if (t2) return new N.UnitlessSassNumber(value, null);
          else if (t1.get$length(numeratorUnits) === 1)
            return new L.SingleUnitSassNumber(
              t1.$index(numeratorUnits, 0),
              value,
              null
            );
          else
            return S.ComplexSassNumber$(
              value,
              P.List_List$unmodifiable(numeratorUnits, type$.String),
              C.List_empty
            );
        } else {
          t1 = J.get$isEmpty$asx(numeratorUnits);
          t1 = t1
            ? C.List_empty
            : P.List_List$unmodifiable(numeratorUnits, type$.String);
          return S.ComplexSassNumber$(
            value,
            t1,
            P.List_List$unmodifiable(denominatorUnits, type$.String)
          );
        }
      },
      SassNumber: function SassNumber() {},
      SassNumber__coerceOrConvertValue__compatibilityException: function SassNumber__coerceOrConvertValue__compatibilityException(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _.$this = t0;
        _.other = t1;
        _.otherName = t2;
        _.otherHasUnits = t3;
        _.name = t4;
        _.newNumerators = t5;
        _.newDenominators = t6;
      },
      SassNumber__coerceOrConvertValue_closure: function SassNumber__coerceOrConvertValue_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.newNumerator = t2;
      },
      SassNumber__coerceOrConvertValue_closure0: function SassNumber__coerceOrConvertValue_closure0(
        t0
      ) {
        this._compatibilityException = t0;
      },
      SassNumber__coerceOrConvertValue_closure1: function SassNumber__coerceOrConvertValue_closure1(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.newDenominator = t2;
      },
      SassNumber__coerceOrConvertValue_closure2: function SassNumber__coerceOrConvertValue_closure2(
        t0
      ) {
        this._compatibilityException = t0;
      },
      SassNumber_plus_closure: function SassNumber_plus_closure() {},
      SassNumber_minus_closure: function SassNumber_minus_closure() {},
      SassNumber_multiplyUnits_closure: function SassNumber_multiplyUnits_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.numerator = t2;
      },
      SassNumber_multiplyUnits_closure0: function SassNumber_multiplyUnits_closure0(
        t0,
        t1
      ) {
        this.newNumerators = t0;
        this.numerator = t1;
      },
      SassNumber_multiplyUnits_closure1: function SassNumber_multiplyUnits_closure1(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.numerator = t2;
      },
      SassNumber_multiplyUnits_closure2: function SassNumber_multiplyUnits_closure2(
        t0,
        t1
      ) {
        this.newNumerators = t0;
        this.numerator = t1;
      },
      SassNumber__areAnyConvertible_closure: function SassNumber__areAnyConvertible_closure(
        t0
      ) {
        this.units2 = t0;
      },
      SassNumber__canonicalizeUnitList_closure: function SassNumber__canonicalizeUnitList_closure() {},
      SassNumber__canonicalMultiplier_closure: function SassNumber__canonicalMultiplier_closure(
        t0
      ) {
        this.$this = t0;
      },
      SingleMapping_SingleMapping$fromEntries(entries) {
        var lines,
          t1,
          t2,
          urls,
          names,
          files,
          targetEntries,
          t3,
          t4,
          lineNum,
          _i,
          sourceEntry,
          t5,
          t6,
          sourceUrl,
          t7,
          urlId,
          sourceEntries = J.toList$0$ax(entries);
        C.JSArray_methods.sort$0(sourceEntries);
        lines = H._setArrayType([], type$.JSArray_TargetLineEntry);
        t1 = type$.String;
        t2 = type$.int;
        urls = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        names = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        files = P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.SourceFile);
        targetEntries = H._Cell$();
        for (
          t2 = sourceEntries.length,
            t3 = type$.JSArray_TargetEntry,
            t4 = targetEntries.__late_helper$_name,
            lineNum = null,
            _i = 0;
          _i < sourceEntries.length;
          sourceEntries.length === t2 ||
            (0, H.throwConcurrentModificationError)(sourceEntries),
            ++_i
        ) {
          sourceEntry = sourceEntries[_i];
          if (lineNum == null || sourceEntry.target.line > lineNum) {
            lineNum = sourceEntry.target.line;
            t5 = H._setArrayType([], t3);
            targetEntries._value = t5;
            lines.push(new T.TargetLineEntry(lineNum, t5));
          }
          t5 = sourceEntry.source;
          t6 = t5.file;
          sourceUrl = t6.url;
          t7 = sourceUrl == null ? '' : sourceUrl.toString$0(0);
          urlId = urls.putIfAbsent$2(
            t7,
            new T.SingleMapping_SingleMapping$fromEntries_closure(urls)
          );
          files.putIfAbsent$2(
            urlId,
            new T.SingleMapping_SingleMapping$fromEntries_closure0(sourceEntry)
          );
          t7 = targetEntries._value;
          if (t7 === targetEntries) H.throwExpression(H.LateError$localNI(t4));
          t5 = t5.offset;
          J.add$1$ax(
            t7,
            new T.TargetEntry(
              sourceEntry.target.column,
              urlId,
              t6.getLine$1(t5),
              t6.getColumn$1(t5),
              null
            )
          );
        }
        t2 = urls.get$values(urls);
        t2 = H.MappedIterable_MappedIterable(
          t2,
          new T.SingleMapping_SingleMapping$fromEntries_closure1(files),
          H._instanceType(t2)._eval$1('Iterable.E'),
          type$.nullable_SourceFile
        );
        t2 = P.List_List$of(
          t2,
          true,
          H._instanceType(t2)._eval$1('Iterable.E')
        );
        t3 = urls.get$keys(urls);
        t3 = P.List_List$of(
          t3,
          true,
          H._instanceType(t3)._eval$1('Iterable.E')
        );
        t4 = names.get$keys(names);
        return new T.SingleMapping(
          t3,
          P.List_List$of(t4, true, H._instanceType(t4)._eval$1('Iterable.E')),
          t2,
          lines,
          null,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.dynamic)
        );
      },
      Mapping: function Mapping() {},
      SingleMapping: function SingleMapping(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.urls = t0;
        _.names = t1;
        _.files = t2;
        _.lines = t3;
        _.targetUrl = t4;
        _.sourceRoot = null;
        _.extensions = t5;
      },
      SingleMapping_SingleMapping$fromEntries_closure: function SingleMapping_SingleMapping$fromEntries_closure(
        t0
      ) {
        this.urls = t0;
      },
      SingleMapping_SingleMapping$fromEntries_closure0: function SingleMapping_SingleMapping$fromEntries_closure0(
        t0
      ) {
        this.sourceEntry = t0;
      },
      SingleMapping_SingleMapping$fromEntries_closure1: function SingleMapping_SingleMapping$fromEntries_closure1(
        t0
      ) {
        this.files = t0;
      },
      SingleMapping_toJson_closure: function SingleMapping_toJson_closure() {},
      SingleMapping_toJson_closure0: function SingleMapping_toJson_closure0(
        t0
      ) {
        this.result = t0;
      },
      TargetLineEntry: function TargetLineEntry(t0, t1) {
        this.line = t0;
        this.entries = t1;
      },
      TargetEntry: function TargetEntry(t0, t1, t2, t3, t4) {
        var _ = this;
        _.column = t0;
        _.sourceUrlId = t1;
        _.sourceLine = t2;
        _.sourceColumn = t3;
        _.sourceNameId = t4;
      },
      LazyTrace: function LazyTrace(t0) {
        this._thunk = t0;
        this.__LazyTrace__trace = null;
      },
      LazyTrace_terse_closure: function LazyTrace_terse_closure(t0) {
        this.$this = t0;
      },
      MixinRule$0($name, $arguments, children, span, comment) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new T.MixinRule0($name, $arguments, span, t1, t2);
      },
      MixinRule0: function MixinRule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _._mixin_rule$__MixinRule_hasContent = null;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      _HasContentVisitor0: function _HasContentVisitor0() {},
      NumberExpression0: function NumberExpression0(t0, t1, t2) {
        this.value = t0;
        this.unit = t1;
        this.span = t2;
      },
      _parseNumber(value, unit) {
        var invalidUnit,
          operands,
          t1,
          numerator,
          denominator,
          numeratorUnits,
          denominatorUnits;
        if (unit == null || unit.length === 0)
          return new N.UnitlessSassNumber0(value, null);
        if (
          !J.contains$1$asx(unit, '*') &&
          !C.JSString_methods.contains$1(unit, '/')
        )
          return new L.SingleUnitSassNumber0(unit, value, null);
        invalidUnit = new P.ArgumentError(true, unit, 'unit', 'is invalid.');
        operands = unit.split('/');
        t1 = operands.length;
        if (t1 > 2) throw H.wrapException(invalidUnit);
        numerator = operands[0];
        denominator = t1 === 1 ? null : operands[1];
        t1 = type$.JSArray_String;
        numeratorUnits =
          numerator.length === 0
            ? H._setArrayType([], t1)
            : H._setArrayType(numerator.split('*'), t1);
        if (
          C.JSArray_methods.any$1(numeratorUnits, new T._parseNumber_closure())
        )
          throw H.wrapException(invalidUnit);
        denominatorUnits =
          denominator == null
            ? H._setArrayType([], t1)
            : H._setArrayType(denominator.split('*'), t1);
        if (
          C.JSArray_methods.any$1(
            denominatorUnits,
            new T._parseNumber_closure0()
          )
        )
          throw H.wrapException(invalidUnit);
        return T.SassNumber_SassNumber$withUnits0(
          value,
          denominatorUnits,
          numeratorUnits
        );
      },
      _NodeSassNumber: function _NodeSassNumber() {},
      numberConstructor_closure: function numberConstructor_closure() {},
      numberConstructor_closure0: function numberConstructor_closure0() {},
      numberConstructor_closure1: function numberConstructor_closure1() {},
      numberConstructor_closure2: function numberConstructor_closure2() {},
      numberConstructor_closure3: function numberConstructor_closure3() {},
      numberConstructor_closure4: function numberConstructor_closure4() {},
      _parseNumber_closure: function _parseNumber_closure() {},
      _parseNumber_closure0: function _parseNumber_closure0() {},
      SassNumber_SassNumber0(value, unit) {
        return unit == null
          ? new N.UnitlessSassNumber0(value, null)
          : new L.SingleUnitSassNumber0(unit, value, null);
      },
      SassNumber_SassNumber$withUnits0(
        value,
        denominatorUnits,
        numeratorUnits
      ) {
        var t1, t2;
        if (denominatorUnits == null || J.get$isEmpty$asx(denominatorUnits)) {
          t1 = J.getInterceptor$asx(numeratorUnits);
          t2 = t1.get$isEmpty(numeratorUnits);
          if (t2) return new N.UnitlessSassNumber0(value, null);
          else if (t1.get$length(numeratorUnits) === 1)
            return new L.SingleUnitSassNumber0(
              t1.$index(numeratorUnits, 0),
              value,
              null
            );
          else
            return S.ComplexSassNumber$0(
              value,
              P.List_List$unmodifiable(numeratorUnits, type$.String),
              C.List_empty
            );
        } else {
          t1 = J.get$isEmpty$asx(numeratorUnits);
          t1 = t1
            ? C.List_empty
            : P.List_List$unmodifiable(numeratorUnits, type$.String);
          return S.ComplexSassNumber$0(
            value,
            t1,
            P.List_List$unmodifiable(denominatorUnits, type$.String)
          );
        }
      },
      SassNumber0: function SassNumber0() {},
      SassNumber__coerceOrConvertValue__compatibilityException0: function SassNumber__coerceOrConvertValue__compatibilityException0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _.$this = t0;
        _.other = t1;
        _.otherName = t2;
        _.otherHasUnits = t3;
        _.name = t4;
        _.newNumerators = t5;
        _.newDenominators = t6;
      },
      SassNumber__coerceOrConvertValue_closure3: function SassNumber__coerceOrConvertValue_closure3(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.newNumerator = t2;
      },
      SassNumber__coerceOrConvertValue_closure4: function SassNumber__coerceOrConvertValue_closure4(
        t0
      ) {
        this._compatibilityException = t0;
      },
      SassNumber__coerceOrConvertValue_closure5: function SassNumber__coerceOrConvertValue_closure5(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.newDenominator = t2;
      },
      SassNumber__coerceOrConvertValue_closure6: function SassNumber__coerceOrConvertValue_closure6(
        t0
      ) {
        this._compatibilityException = t0;
      },
      SassNumber_plus_closure0: function SassNumber_plus_closure0() {},
      SassNumber_minus_closure0: function SassNumber_minus_closure0() {},
      SassNumber_multiplyUnits_closure3: function SassNumber_multiplyUnits_closure3(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.numerator = t2;
      },
      SassNumber_multiplyUnits_closure4: function SassNumber_multiplyUnits_closure4(
        t0,
        t1
      ) {
        this.newNumerators = t0;
        this.numerator = t1;
      },
      SassNumber_multiplyUnits_closure5: function SassNumber_multiplyUnits_closure5(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.numerator = t2;
      },
      SassNumber_multiplyUnits_closure6: function SassNumber_multiplyUnits_closure6(
        t0,
        t1
      ) {
        this.newNumerators = t0;
        this.numerator = t1;
      },
      SassNumber__areAnyConvertible_closure0: function SassNumber__areAnyConvertible_closure0(
        t0
      ) {
        this.units2 = t0;
      },
      SassNumber__canonicalizeUnitList_closure0: function SassNumber__canonicalizeUnitList_closure0() {},
      SassNumber__canonicalMultiplier_closure0: function SassNumber__canonicalMultiplier_closure0(
        t0
      ) {
        this.$this = t0;
      },
      ParenthesizedExpression0: function ParenthesizedExpression0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      Selector0: function Selector0() {},
      SelectorExpression0: function SelectorExpression0(t0) {
        this.span = t0;
      },
      _prependParent0(compound) {
        var t2,
          _null = null,
          t1 = compound.components,
          first = C.JSArray_methods.get$first(t1);
        if (first instanceof N.UniversalSelector0) return _null;
        if (first instanceof F.TypeSelector0) {
          t2 = first.name;
          if (t2.namespace != null) return _null;
          t2 = H._setArrayType(
            [new M.ParentSelector0(t2.name)],
            type$.JSArray_SimpleSelector_2
          );
          C.JSArray_methods.addAll$1(
            t2,
            H.SubListIterable$(
              t1,
              1,
              _null,
              H._arrayInstanceType(t1)._precomputed1
            )
          );
          return X.CompoundSelector$0(t2);
        } else {
          t2 = H._setArrayType(
            [new M.ParentSelector0(_null)],
            type$.JSArray_SimpleSelector_2
          );
          C.JSArray_methods.addAll$1(t2, t1);
          return X.CompoundSelector$0(t2);
        }
      },
      _function7($name, $arguments, callback) {
        return Q.BuiltInCallable$function0(
          $name,
          $arguments,
          callback,
          'sass:selector'
        );
      },
      _nest_closure0: function _nest_closure0() {},
      _nest__closure1: function _nest__closure1(t0) {
        this._box_0 = t0;
      },
      _nest__closure2: function _nest__closure2() {},
      _append_closure1: function _append_closure1() {},
      _append__closure1: function _append__closure1() {},
      _append__closure2: function _append__closure2() {},
      _append___closure0: function _append___closure0(t0) {
        this.parent = t0;
      },
      _extend_closure0: function _extend_closure0() {},
      _replace_closure0: function _replace_closure0() {},
      _unify_closure0: function _unify_closure0() {},
      _isSuperselector_closure0: function _isSuperselector_closure0() {},
      _simpleSelectors_closure0: function _simpleSelectors_closure0() {},
      _simpleSelectors__closure0: function _simpleSelectors__closure0() {},
      _parse_closure0: function _parse_closure0() {},
      SelectorParser$0(contents, allowParent, allowPlaceholder, logger, url) {
        var t1 = S.SpanScanner$(contents, url);
        return new T.SelectorParser0(
          allowParent,
          allowPlaceholder,
          t1,
          logger == null ? C.C_StderrLogger : logger
        );
      },
      SelectorParser0: function SelectorParser0(t0, t1, t2, t3) {
        var _ = this;
        _._selector$_allowParent = t0;
        _._selector$_allowPlaceholder = t1;
        _.scanner = t2;
        _.logger = t3;
      },
      SelectorParser_parse_closure0: function SelectorParser_parse_closure0(
        t0
      ) {
        this.$this = t0;
      },
      SelectorParser_parseCompoundSelector_closure0: function SelectorParser_parseCompoundSelector_closure0(
        t0
      ) {
        this.$this = t0;
      },
      UseRule0: function UseRule0(t0, t1, t2, t3) {
        var _ = this;
        _.url = t0;
        _.namespace = t1;
        _.configuration = t2;
        _.span = t3;
      },
      isWhitespace(character) {
        return (
          character === 32 ||
          character === 9 ||
          character === 10 ||
          character === 13 ||
          character === 12
        );
      },
      isNewline(character) {
        return character === 10 || character === 13 || character === 12;
      },
      isAlphabetic0(character) {
        var t1;
        if (!(character >= 97 && character <= 122))
          t1 = character >= 65 && character <= 90;
        else t1 = true;
        return t1;
      },
      isDigit(character) {
        return character != null && character >= 48 && character <= 57;
      },
      isHex(character) {
        if (character == null) return false;
        if (T.isDigit(character)) return true;
        if (character >= 97 && character <= 102) return true;
        if (character >= 65 && character <= 70) return true;
        return false;
      },
      asHex(character) {
        if (character <= 57) return character - 48;
        if (character <= 70) return 10 + character - 65;
        return 10 + character - 97;
      },
      hexCharFor(number) {
        return number < 10 ? 48 + number : 87 + number;
      },
      opposite(character) {
        switch (character) {
          case 40:
            return 41;
          case 123:
            return 125;
          case 91:
            return 93;
          default:
            throw H.wrapException(
              P.ArgumentError$(
                '"' +
                  P.String_String$fromCharCode(character) +
                  '" isn\'t a brace-like character.',
                null
              )
            );
        }
      },
      characterEqualsIgnoreCase(character1, character2) {
        var upperCase1;
        if (character1 === character2) return true;
        if ((character1 ^ character2) >>> 0 !== 32) return false;
        upperCase1 = (character1 & 4294967263) >>> 0;
        return upperCase1 >= 65 && upperCase1 <= 90;
      },
      fuzzyHashCode(number) {
        return number == 1 / 0 || number == -1 / 0 || isNaN(number)
          ? C.JSNumber_methods.get$hashCode(number)
          : C.JSInt_methods.get$hashCode(
              C.JSNumber_methods.round$0(number * $.$get$_inverseEpsilon())
            );
      },
      fuzzyLessThan(number1, number2) {
        return (
          number1 < number2 && !(Math.abs(number1 - number2) < $.$get$epsilon())
        );
      },
      fuzzyLessThanOrEquals(number1, number2) {
        return (
          number1 < number2 || Math.abs(number1 - number2) < $.$get$epsilon()
        );
      },
      fuzzyGreaterThan(number1, number2) {
        return (
          number1 > number2 && !(Math.abs(number1 - number2) < $.$get$epsilon())
        );
      },
      fuzzyGreaterThanOrEquals(number1, number2) {
        return (
          number1 > number2 || Math.abs(number1 - number2) < $.$get$epsilon()
        );
      },
      fuzzyIsInt(number) {
        if (number == 1 / 0 || number == -1 / 0 || isNaN(number)) return false;
        if (H._isInt(number)) return true;
        return (
          Math.abs(C.JSNumber_methods.$mod(Math.abs(number - 0.5), 1) - 0.5) <
          $.$get$epsilon()
        );
      },
      fuzzyRound(number) {
        var t1;
        if (number > 0) {
          t1 = C.JSNumber_methods.$mod(number, 1);
          return t1 < 0.5 && !(Math.abs(t1 - 0.5) < $.$get$epsilon())
            ? C.JSNumber_methods.floor$0(number)
            : C.JSNumber_methods.ceil$0(number);
        } else {
          t1 = C.JSNumber_methods.$mod(number, 1);
          return t1 < 0.5 || Math.abs(t1 - 0.5) < $.$get$epsilon()
            ? C.JSNumber_methods.floor$0(number)
            : C.JSNumber_methods.ceil$0(number);
        }
      },
      fuzzyCheckRange(number, min, max) {
        var t1 = $.$get$epsilon();
        if (Math.abs(number - min) < t1) return min;
        if (Math.abs(number - max) < t1) return max;
        if (number > min && number < max) return number;
        return null;
      },
      fuzzyAssertRange(number, min, max, $name) {
        var result = T.fuzzyCheckRange(number, min, max);
        if (result != null) return result;
        throw H.wrapException(
          P.RangeError$range(
            number,
            min,
            max,
            $name,
            'must be between ' + min + ' and ' + max
          )
        );
      },
      isWhitespace0(character) {
        return (
          character === 32 ||
          character === 9 ||
          character === 10 ||
          character === 13 ||
          character === 12
        );
      },
      isNewline0(character) {
        return character === 10 || character === 13 || character === 12;
      },
      isAlphabetic1(character) {
        var t1;
        if (!(character >= 97 && character <= 122))
          t1 = character >= 65 && character <= 90;
        else t1 = true;
        return t1;
      },
      isDigit0(character) {
        return character != null && character >= 48 && character <= 57;
      },
      isHex0(character) {
        if (character == null) return false;
        if (T.isDigit0(character)) return true;
        if (character >= 97 && character <= 102) return true;
        if (character >= 65 && character <= 70) return true;
        return false;
      },
      asHex0(character) {
        if (character <= 57) return character - 48;
        if (character <= 70) return 10 + character - 65;
        return 10 + character - 97;
      },
      hexCharFor0(number) {
        return number < 10 ? 48 + number : 87 + number;
      },
      opposite0(character) {
        switch (character) {
          case 40:
            return 41;
          case 123:
            return 125;
          case 91:
            return 93;
          default:
            throw H.wrapException(
              P.ArgumentError$(
                '"' +
                  P.String_String$fromCharCode(character) +
                  '" isn\'t a brace-like character.',
                null
              )
            );
        }
      },
      characterEqualsIgnoreCase0(character1, character2) {
        var upperCase1;
        if (character1 === character2) return true;
        if ((character1 ^ character2) >>> 0 !== 32) return false;
        upperCase1 = (character1 & 4294967263) >>> 0;
        return upperCase1 >= 65 && upperCase1 <= 90;
      },
      fuzzyHashCode0(number) {
        return number == 1 / 0 || number == -1 / 0 || isNaN(number)
          ? C.JSNumber_methods.get$hashCode(number)
          : C.JSInt_methods.get$hashCode(
              C.JSNumber_methods.round$0(number * $.$get$_inverseEpsilon0())
            );
      },
      fuzzyLessThan0(number1, number2) {
        return (
          number1 < number2 &&
          !(Math.abs(number1 - number2) < $.$get$epsilon0())
        );
      },
      fuzzyLessThanOrEquals0(number1, number2) {
        return (
          number1 < number2 || Math.abs(number1 - number2) < $.$get$epsilon0()
        );
      },
      fuzzyGreaterThan0(number1, number2) {
        return (
          number1 > number2 &&
          !(Math.abs(number1 - number2) < $.$get$epsilon0())
        );
      },
      fuzzyGreaterThanOrEquals0(number1, number2) {
        return (
          number1 > number2 || Math.abs(number1 - number2) < $.$get$epsilon0()
        );
      },
      fuzzyIsInt0(number) {
        if (number == 1 / 0 || number == -1 / 0 || isNaN(number)) return false;
        if (H._isInt(number)) return true;
        return (
          Math.abs(C.JSNumber_methods.$mod(Math.abs(number - 0.5), 1) - 0.5) <
          $.$get$epsilon0()
        );
      },
      fuzzyRound0(number) {
        var t1;
        if (number > 0) {
          t1 = C.JSNumber_methods.$mod(number, 1);
          return t1 < 0.5 && !(Math.abs(t1 - 0.5) < $.$get$epsilon0())
            ? C.JSNumber_methods.floor$0(number)
            : C.JSNumber_methods.ceil$0(number);
        } else {
          t1 = C.JSNumber_methods.$mod(number, 1);
          return t1 < 0.5 || Math.abs(t1 - 0.5) < $.$get$epsilon0()
            ? C.JSNumber_methods.floor$0(number)
            : C.JSNumber_methods.ceil$0(number);
        }
      },
      fuzzyCheckRange0(number, min, max) {
        var t1 = $.$get$epsilon0();
        if (Math.abs(number - min) < t1) return min;
        if (Math.abs(number - max) < t1) return max;
        if (number > min && number < max) return number;
        return null;
      },
      fuzzyAssertRange0(number, min, max, $name) {
        var result = T.fuzzyCheckRange0(number, min, max);
        if (result != null) return result;
        throw H.wrapException(
          P.RangeError$range(
            number,
            min,
            max,
            $name,
            'must be between ' + min + ' and ' + max
          )
        );
      },
    },
    U = {
      DefaultEquality: function DefaultEquality() {},
      IterableEquality: function IterableEquality() {},
      ListEquality: function ListEquality() {},
      _MapEntry: function _MapEntry(t0, t1, t2) {
        this.equality = t0;
        this.key = t1;
        this.value = t2;
      },
      MapEquality: function MapEquality() {},
      ModifiableCssAtRule$($name, span, childless, value) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        return new U.ModifiableCssAtRule(
          $name,
          value,
          childless,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t1
        );
      },
      ModifiableCssAtRule: function ModifiableCssAtRule(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.isChildless = t2;
        _.span = t3;
        _.children = t4;
        _._children = t5;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      ModifiableCssKeyframeBlock$(selector, span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        return new U.ModifiableCssKeyframeBlock(
          selector,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t1
        );
      },
      ModifiableCssKeyframeBlock: function ModifiableCssKeyframeBlock(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.selector = t0;
        _.span = t1;
        _.children = t2;
        _._children = t3;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      AtRule$($name, span, children, value) {
        var t1 =
            children == null
              ? null
              : P.List_List$unmodifiable(children, type$.Statement),
          t2 =
            t1 == null
              ? null
              : C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new U.AtRule($name, value, span, t1, t2 === true);
      },
      AtRule: function AtRule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      SupportsOperation: function SupportsOperation(t0, t1, t2, t3) {
        var _ = this;
        _.left = t0;
        _.right = t1;
        _.operator = t2;
        _.span = t3;
      },
      _compileStylesheet(
        stylesheet,
        logger,
        importCache,
        nodeImporter,
        importer,
        functions,
        style,
        useSpaces,
        indentWidth,
        lineFeed,
        quietDeps,
        sourceMap,
        charset
      ) {
        var serializeResult = N.serialize(
            R._EvaluateVisitor$(
              functions,
              importCache,
              logger,
              nodeImporter,
              quietDeps,
              sourceMap
            ).run$2(importer, stylesheet).stylesheet,
            charset,
            indentWidth,
            false,
            lineFeed,
            sourceMap,
            style,
            true
          ),
          resultSourceMap = serializeResult.sourceMap;
        if (resultSourceMap != null && true)
          B.mapInPlace(
            resultSourceMap.urls,
            new U._compileStylesheet_closure(stylesheet, importCache)
          );
        return new U.CompileResult(serializeResult);
      },
      _compileStylesheet_closure: function _compileStylesheet_closure(t0, t1) {
        this.stylesheet = t0;
        this.importCache = t1;
      },
      CompileResult: function CompileResult(t0) {
        this._serialize = t0;
      },
      SassParser: function SassParser(t0, t1, t2) {
        var _ = this;
        _._currentIndentation = 0;
        _._spaces = _._nextIndentationEnd = _._nextIndentation = null;
        _._isUseAllowed = true;
        _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
        _._globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      SassParser_children_closure: function SassParser_children_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.child = t1;
        this.children = t2;
      },
      PublicMemberMapView: function PublicMemberMapView(t0, t1) {
        this._public_member_map_view$_inner = t0;
        this.$ti = t1;
      },
      Highlighter$(span, color) {
        var t1 = U.Highlighter__collateLines(
            H._setArrayType(
              [U._Highlight$(span, null, true)],
              type$.JSArray__Highlight
            )
          ),
          t2 = new U.Highlighter_closure(color).call$0(),
          t3 = C.JSInt_methods.toString$0(
            C.JSArray_methods.get$last(t1).number + 1
          ),
          t4 = U.Highlighter__contiguous(t1) ? 0 : 3,
          t5 = H._arrayInstanceType(t1);
        return new U.Highlighter(
          t1,
          t2,
          null,
          1 + Math.max(t3.length, t4),
          new H.MappedListIterable(
            t1,
            new U.Highlighter$__closure(),
            t5._eval$1('MappedListIterable<1,int>')
          ).reduce$1(0, C.CONSTANT),
          !B.isAllTheSame(
            new H.MappedListIterable(
              t1,
              new U.Highlighter$__closure0(),
              t5._eval$1('MappedListIterable<1,Object?>')
            )
          ),
          new P.StringBuffer('')
        );
      },
      Highlighter$multiple(
        primarySpan,
        primaryLabel,
        secondarySpans,
        color,
        primaryColor,
        secondaryColor
      ) {
        var t2,
          t3,
          t4,
          t5,
          t6,
          t1 = H._setArrayType(
            [U._Highlight$(primarySpan, primaryLabel, true)],
            type$.JSArray__Highlight
          );
        for (
          t2 = secondarySpans.get$entries(secondarySpans),
            t2 = t2.get$iterator(t2);
          t2.moveNext$0();

        ) {
          t3 = t2.get$current();
          t1.push(U._Highlight$(t3.key, t3.value, false));
        }
        t1 = U.Highlighter__collateLines(t1);
        if (color) t2 = '\x1b[31m';
        else t2 = null;
        if (color) t3 = '\x1b[34m';
        else t3 = null;
        t4 = C.JSInt_methods.toString$0(
          C.JSArray_methods.get$last(t1).number + 1
        );
        t5 = U.Highlighter__contiguous(t1) ? 0 : 3;
        t6 = H._arrayInstanceType(t1);
        return new U.Highlighter(
          t1,
          t2,
          t3,
          1 + Math.max(t4.length, t5),
          new H.MappedListIterable(
            t1,
            new U.Highlighter$__closure(),
            t6._eval$1('MappedListIterable<1,int>')
          ).reduce$1(0, C.CONSTANT),
          !B.isAllTheSame(
            new H.MappedListIterable(
              t1,
              new U.Highlighter$__closure0(),
              t6._eval$1('MappedListIterable<1,Object?>')
            )
          ),
          new P.StringBuffer('')
        );
      },
      Highlighter__contiguous(lines) {
        var i, thisLine, nextLine;
        for (i = 0; i < lines.length - 1; ) {
          thisLine = lines[i];
          ++i;
          nextLine = lines[i];
          if (
            thisLine.number + 1 !== nextLine.number &&
            J.$eq$(thisLine.url, nextLine.url)
          )
            return false;
        }
        return true;
      },
      Highlighter__collateLines(highlights) {
        var t1,
          t2,
          highlightsByUrl = Y.groupBy(
            highlights,
            new U.Highlighter__collateLines_closure(),
            type$._Highlight,
            type$.nullable_Uri
          );
        for (
          t1 = highlightsByUrl.get$values(highlightsByUrl),
            t1 = t1.get$iterator(t1);
          t1.moveNext$0();

        )
          J.sort$1$ax(
            t1.get$current(),
            new U.Highlighter__collateLines_closure0()
          );
        t1 = highlightsByUrl.get$values(highlightsByUrl);
        t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,_Line>');
        return P.List_List$of(
          new H.ExpandIterable(
            t1,
            new U.Highlighter__collateLines_closure1(),
            t2
          ),
          true,
          t2._eval$1('Iterable.E')
        );
      },
      _Highlight$(span, label, primary) {
        return new U._Highlight(
          new U._Highlight_closure(span).call$0(),
          primary,
          label
        );
      },
      _Highlight__normalizeNewlines(span) {
        var endOffset,
          t1,
          i,
          t2,
          t3,
          t4,
          text = span.get$text();
        if (!C.JSString_methods.contains$1(text, '\r\n')) return span;
        endOffset = span.get$end(span).get$offset();
        for (t1 = text.length - 1, i = 0; i < t1; ++i)
          if (
            C.JSString_methods._codeUnitAt$1(text, i) === 13 &&
            C.JSString_methods._codeUnitAt$1(text, i + 1) === 10
          )
            --endOffset;
        t1 = span.get$start(span);
        t2 = span.get$sourceUrl(span);
        t3 = span.get$end(span).get$line();
        t2 = V.SourceLocation$(
          endOffset,
          span.get$end(span).get$column(),
          t3,
          t2
        );
        t3 = H.stringReplaceAllUnchecked(text, '\r\n', '\n');
        t4 = span.get$context(span);
        return X.SourceSpanWithContext$(
          t1,
          t2,
          t3,
          H.stringReplaceAllUnchecked(t4, '\r\n', '\n')
        );
      },
      _Highlight__normalizeTrailingNewline(span) {
        var context, text, start, end, t1, t2, t3;
        if (!C.JSString_methods.endsWith$1(span.get$context(span), '\n'))
          return span;
        if (C.JSString_methods.endsWith$1(span.get$text(), '\n\n')) return span;
        context = C.JSString_methods.substring$2(
          span.get$context(span),
          0,
          span.get$context(span).length - 1
        );
        text = span.get$text();
        start = span.get$start(span);
        end = span.get$end(span);
        if (C.JSString_methods.endsWith$1(span.get$text(), '\n')) {
          t1 = B.findLineStart(
            span.get$context(span),
            span.get$text(),
            span.get$start(span).get$column()
          );
          t1.toString;
          t1 =
            t1 + span.get$start(span).get$column() + span.get$length(span) ===
            span.get$context(span).length;
        } else t1 = false;
        if (t1) {
          text = C.JSString_methods.substring$2(
            span.get$text(),
            0,
            span.get$text().length - 1
          );
          if (text.length === 0) end = start;
          else {
            t1 = span.get$end(span).get$offset();
            t2 = span.get$sourceUrl(span);
            t3 = span.get$end(span).get$line();
            end = V.SourceLocation$(
              t1 - 1,
              U._Highlight__lastLineLength(context),
              t3 - 1,
              t2
            );
            start =
              span.get$start(span).get$offset() ===
              span.get$end(span).get$offset()
                ? end
                : span.get$start(span);
          }
        }
        return X.SourceSpanWithContext$(start, end, text, context);
      },
      _Highlight__normalizeEndOfLine(span) {
        var text, t1, t2, t3, t4;
        if (span.get$end(span).get$column() !== 0) return span;
        if (span.get$end(span).get$line() === span.get$start(span).get$line())
          return span;
        text = C.JSString_methods.substring$2(
          span.get$text(),
          0,
          span.get$text().length - 1
        );
        t1 = span.get$start(span);
        t2 = span.get$end(span).get$offset();
        t3 = span.get$sourceUrl(span);
        t4 = span.get$end(span).get$line();
        t3 = V.SourceLocation$(
          t2 - 1,
          text.length - C.JSString_methods.lastIndexOf$1(text, '\n') - 1,
          t4 - 1,
          t3
        );
        return X.SourceSpanWithContext$(
          t1,
          t3,
          text,
          C.JSString_methods.endsWith$1(span.get$context(span), '\n')
            ? C.JSString_methods.substring$2(
                span.get$context(span),
                0,
                span.get$context(span).length - 1
              )
            : span.get$context(span)
        );
      },
      _Highlight__lastLineLength(text) {
        var t1 = text.length;
        if (t1 === 0) return 0;
        else if (C.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
          return t1 === 1
            ? 0
            : t1 - C.JSString_methods.lastIndexOf$2(text, '\n', t1 - 2) - 1;
        else return t1 - C.JSString_methods.lastIndexOf$1(text, '\n') - 1;
      },
      Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _._lines = t0;
        _._primaryColor = t1;
        _._secondaryColor = t2;
        _._paddingBeforeSidebar = t3;
        _._maxMultilineSpans = t4;
        _._multipleFiles = t5;
        _._highlighter$_buffer = t6;
      },
      Highlighter_closure: function Highlighter_closure(t0) {
        this.color = t0;
      },
      Highlighter$__closure: function Highlighter$__closure() {},
      Highlighter$___closure: function Highlighter$___closure() {},
      Highlighter$__closure0: function Highlighter$__closure0() {},
      Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {},
      Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {},
      Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {},
      Highlighter__collateLines__closure: function Highlighter__collateLines__closure(
        t0
      ) {
        this.line = t0;
      },
      Highlighter_highlight_closure: function Highlighter_highlight_closure() {},
      Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(
        t0
      ) {
        this.$this = t0;
      },
      Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.startLine = t1;
        this.line = t2;
      },
      Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.highlight = t1;
      },
      Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(
        t0
      ) {
        this.$this = t0;
      },
      Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.current = t2;
        _.startLine = t3;
        _.line = t4;
        _.highlight = t5;
        _.endLine = t6;
      },
      Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.vertical = t1;
      },
      Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.text = t1;
        _.startColumn = t2;
        _.endColumn = t3;
      },
      Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.line = t1;
        this.highlight = t2;
      },
      Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.line = t1;
        this.highlight = t2;
      },
      Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.coversWholeLine = t1;
        _.line = t2;
        _.highlight = t3;
      },
      Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.end = t2;
      },
      _Highlight: function _Highlight(t0, t1, t2) {
        this.span = t0;
        this.isPrimary = t1;
        this.label = t2;
      },
      _Highlight_closure: function _Highlight_closure(t0) {
        this.span = t0;
      },
      _Line: function _Line(t0, t1, t2, t3) {
        var _ = this;
        _.text = t0;
        _.number = t1;
        _.url = t2;
        _.highlights = t3;
      },
      Chain_Chain$parse(chain) {
        var t1,
          t2,
          _s51_ = string$.x3d_____;
        if (chain.length === 0)
          return new U.Chain(
            P.List_List$unmodifiable(
              H._setArrayType([], type$.JSArray_Trace),
              type$.Trace
            )
          );
        t1 = $.$get$vmChainGap();
        if (C.JSString_methods.contains$1(chain, t1)) {
          t1 = C.JSString_methods.split$1(chain, t1);
          t2 = H._arrayInstanceType(t1);
          return new U.Chain(
            P.List_List$unmodifiable(
              new H.MappedIterable(
                new H.WhereIterable(
                  t1,
                  new U.Chain_Chain$parse_closure(),
                  t2._eval$1('WhereIterable<1>')
                ),
                new U.Chain_Chain$parse_closure0(),
                t2._eval$1('MappedIterable<1,Trace>')
              ),
              type$.Trace
            )
          );
        }
        if (!C.JSString_methods.contains$1(chain, _s51_))
          return new U.Chain(
            P.List_List$unmodifiable(
              H._setArrayType(
                [Y.Trace_Trace$parse(chain)],
                type$.JSArray_Trace
              ),
              type$.Trace
            )
          );
        return new U.Chain(
          P.List_List$unmodifiable(
            new H.MappedListIterable(
              H._setArrayType(chain.split(_s51_), type$.JSArray_String),
              new U.Chain_Chain$parse_closure1(),
              type$.MappedListIterable_String_Trace
            ),
            type$.Trace
          )
        );
      },
      Chain: function Chain(t0) {
        this.traces = t0;
      },
      Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {},
      Chain_Chain$parse_closure0: function Chain_Chain$parse_closure0() {},
      Chain_Chain$parse_closure1: function Chain_Chain$parse_closure1() {},
      Chain_toTrace_closure: function Chain_toTrace_closure() {},
      Chain_toString_closure0: function Chain_toString_closure0() {},
      Chain_toString__closure0: function Chain_toString__closure0() {},
      Chain_toString_closure: function Chain_toString_closure(t0) {
        this.longest = t0;
      },
      Chain_toString__closure: function Chain_toString__closure(t0) {
        this.longest = t0;
      },
      ModifiableCssAtRule$0($name, span, childless, value) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        return new U.ModifiableCssAtRule0(
          $name,
          value,
          childless,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t1
        );
      },
      ModifiableCssAtRule0: function ModifiableCssAtRule0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.isChildless = t2;
        _.span = t3;
        _.children = t4;
        _._node2$_children = t5;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      AtRule$0($name, span, children, value) {
        var t1 =
            children == null
              ? null
              : P.List_List$unmodifiable(children, type$.Statement_2),
          t2 =
            t1 == null
              ? null
              : C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new U.AtRule0($name, value, span, t1, t2 === true);
      },
      AtRule0: function AtRule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.value = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      CompileResult0: function CompileResult0(t0, t1) {
        this._evaluate = t0;
        this._compile_result$_serialize = t1;
      },
      ModifiableCssKeyframeBlock$0(selector, span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        return new U.ModifiableCssKeyframeBlock0(
          selector,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t1
        );
      },
      ModifiableCssKeyframeBlock0: function ModifiableCssKeyframeBlock0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.selector = t0;
        _.span = t1;
        _.children = t2;
        _._node2$_children = t3;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      SupportsOperation0: function SupportsOperation0(t0, t1, t2, t3) {
        var _ = this;
        _.left = t0;
        _.right = t1;
        _.operator = t2;
        _.span = t3;
      },
      PublicMemberMapView0: function PublicMemberMapView0(t0, t1) {
        this._public_member_map_view0$_inner = t0;
        this.$ti = t1;
      },
      RenderResult: function RenderResult() {},
      RenderResultStats: function RenderResultStats() {},
      main(args) {
        return U.main$body(args);
      },
      main$body(args) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.void),
          $async$returnValue,
          $async$handler = 2,
          $async$currentError,
          $async$next = [],
          printError,
          graph,
          source,
          destination,
          error,
          stackTrace,
          error0,
          stackTrace0,
          path,
          error1,
          error2,
          stackTrace1,
          buffer,
          options,
          t1,
          t2,
          t3,
          exception,
          _box_0,
          $async$exception,
          $async$exception1,
          $async$temp1;
        var $async$main = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                _box_0 = {};
                _box_0.printedError = false;
                printError = new U.main_printError(_box_0);
                _box_0.options = null;
                $async$handler = 4;
                options = B.ExecutableOptions_ExecutableOptions$parse(args);
                _box_0.options = options;
                t1 = options._options;
                $._glyphs = !(t1.wasParsed$1('unicode')
                  ? H._asBool(t1.$index(0, 'unicode'))
                  : $._glyphs !== C.C_AsciiGlyphSet)
                  ? C.C_AsciiGlyphSet
                  : C.C_UnicodeGlyphSet;
                $async$goto = H._asBool(
                  _box_0.options._options.$index(0, 'version')
                )
                  ? 7
                  : 8;
                break;
              case 7:
                // then
                $async$temp1 = P;
                $async$goto = 9;
                return P._asyncAwait(U._loadVersion(), $async$main);
              case 9:
                // returning from await.
                $async$temp1.print($async$result);
                J.set$exitCode$x(self.process, 0);
                // goto return
                $async$goto = 1;
                break;
              case 8:
                // join
                $async$goto = _box_0.options.get$interactive() ? 10 : 11;
                break;
              case 10:
                // then
                $async$goto = 12;
                return P._asyncAwait(Y.repl(_box_0.options), $async$main);
              case 12:
                // returning from await.
                // goto return
                $async$goto = 1;
                break;
              case 11:
                // join
                t1 = type$.List_String._as(
                  _box_0.options._options.$index(0, 'load-path')
                );
                t2 = _box_0.options;
                t3 = type$.Uri;
                graph = new M.StylesheetGraph(
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    t3,
                    type$.StylesheetNode
                  ),
                  R.ImportCache$(
                    t1,
                    H._asBool(t2._options.$index(0, 'quiet'))
                      ? $.$get$Logger_quiet()
                      : new S.StderrLogger(t2.get$color())
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(t3, type$.DateTime)
                );
                (t1 = _box_0.options),
                  t1._ensureSources$0(),
                  (t1 = t1._sourcesToDestinations),
                  (t1 = J.get$iterator$ax(t1.get$keys(t1)));
              case 13:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 14;
                  break;
                }
                source = t1.get$current();
                t2 = _box_0.options;
                t2._ensureSources$0();
                destination = t2._sourcesToDestinations.$index(0, source);
                $async$handler = 16;
                t2 = _box_0.options;
                $async$goto = 19;
                return P._asyncAwait(
                  D.compileStylesheet(
                    t2,
                    graph,
                    source,
                    destination,
                    H._asBool(t2._options.$index(0, 'update'))
                  ),
                  $async$main
                );
              case 19:
                // returning from await.
                $async$handler = 4;
                // goto after finally
                $async$goto = 18;
                break;
              case 16:
                // catch
                $async$handler = 15;
                $async$exception = $async$currentError;
                t2 = H.unwrapException($async$exception);
                if (t2 instanceof E.SassException) {
                  error = t2;
                  stackTrace = H.getTraceFromException($async$exception);
                  new U.main_closure(_box_0, destination).call$0();
                  t2 = _box_0.options._options;
                  if (!t2._parser.options._map.containsKey$1('color'))
                    H.throwExpression(
                      P.ArgumentError$(
                        'Could not find an option named "color".',
                        null
                      )
                    );
                  t2 = t2._parsed.containsKey$1('color')
                    ? H._asBool(t2.$index(0, 'color'))
                    : J.$eq$(self.process.stdout.isTTY, true);
                  t2 = J.toString$1$color$(error, t2);
                  t3 = H._asBool(_box_0.options._options.$index(0, 'trace'))
                    ? stackTrace
                    : null;
                  printError.call$2(t2, t3);
                  if (J.get$exitCode$x(self.process) !== 66)
                    J.set$exitCode$x(self.process, 65);
                  if (
                    H._asBool(
                      _box_0.options._options.$index(0, 'stop-on-error')
                    )
                  ) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                } else if (t2 instanceof B.FileSystemException) {
                  error0 = t2;
                  stackTrace0 = H.getTraceFromException($async$exception);
                  path = error0.path;
                  t2 =
                    path == null
                      ? error0.message
                      : 'Error reading ' +
                        $.$get$context().relative$2$from(path, null) +
                        ': ' +
                        error0.message +
                        '.';
                  t3 = H._asBool(_box_0.options._options.$index(0, 'trace'))
                    ? stackTrace0
                    : null;
                  printError.call$2(t2, t3);
                  J.set$exitCode$x(self.process, 66);
                  if (
                    H._asBool(
                      _box_0.options._options.$index(0, 'stop-on-error')
                    )
                  ) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                } else throw $async$exception;
                // goto after finally
                $async$goto = 18;
                break;
              case 15:
                // uncaught
                // goto catch
                $async$goto = 4;
                break;
              case 18:
                // after finally
                // goto for condition
                $async$goto = 13;
                break;
              case 14:
                // after for
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception1 = $async$currentError;
                t1 = H.unwrapException($async$exception1);
                if (t1 instanceof B.UsageException) {
                  error1 = t1;
                  P.print(error1.message + '\n');
                  P.print(
                    'Usage: sass <input.scss> [output.css]\n       sass <input.scss>:<output.css> <input/>:<output/> <dir/>\n'
                  );
                  t1 = $.$get$ExecutableOptions__parser();
                  P.print(
                    new G._Usage(
                      t1._optionsAndSeparators,
                      new P.StringBuffer(''),
                      t1.usageLineLength
                    ).generate$0()
                  );
                  J.set$exitCode$x(self.process, 64);
                } else {
                  error2 = t1;
                  stackTrace1 = H.getTraceFromException($async$exception1);
                  buffer = new P.StringBuffer('');
                  t1 = _box_0.options;
                  if (t1 != null && t1.get$color())
                    buffer._contents += '\x1b[31m\x1b[1m';
                  buffer._contents += 'Unexpected exception:';
                  t1 = _box_0.options;
                  if (t1 != null && t1.get$color())
                    buffer._contents += '\x1b[0m';
                  buffer._contents += '\n';
                  buffer._contents += H.S(error2) + '\n';
                  t1 = buffer._contents;
                  printError.call$2(
                    t1.charCodeAt(0) == 0 ? t1 : t1,
                    stackTrace1
                  );
                  J.set$exitCode$x(self.process, 255);
                }
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        });
        return P._asyncStartSync($async$main, $async$completer);
      },
      _loadVersion() {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.String),
          $async$returnValue;
        var $async$_loadVersion = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$returnValue = '1.39.0 compiled with dart2js 2.14.1';
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$_loadVersion, $async$completer);
      },
      main_printError: function main_printError(t0) {
        this._box_0 = t0;
      },
      main_closure: function main_closure(t0, t1) {
        this._box_0 = t0;
        this.destination = t1;
      },
      SassParser0: function SassParser0(t0, t1, t2) {
        var _ = this;
        _._sass0$_currentIndentation = 0;
        _._sass0$_spaces = _._sass0$_nextIndentationEnd = _._sass0$_nextIndentation = null;
        _._stylesheet0$_isUseAllowed = true;
        _._stylesheet0$_inParentheses = _._stylesheet0$_inStyleRule = _._stylesheet0$_inUnknownAtRule = _._stylesheet0$_inControlDirective = _._stylesheet0$_inContentBlock = _._stylesheet0$_inMixin = false;
        _._stylesheet0$_globalVariables = t0;
        _.lastSilentComment = null;
        _.scanner = t1;
        _.logger = t2;
      },
      SassParser_children_closure0: function SassParser_children_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.child = t1;
        this.children = t2;
      },
    },
    V = {
      ArgResults: function ArgResults(t0, t1, t2, t3) {
        var _ = this;
        _._parser = t0;
        _._parsed = t1;
        _.name = t2;
        _.rest = t3;
      },
      ErrorResult: function ErrorResult(t0, t1) {
        this.error = t0;
        this.stackTrace = t1;
      },
      BufferModule: function BufferModule() {},
      BufferConstants: function BufferConstants() {},
      Buffer: function Buffer() {},
      ModifiableCssStylesheet$(span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        return new V.ModifiableCssStylesheet(
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t1
        );
      },
      ModifiableCssStylesheet: function ModifiableCssStylesheet(t0, t1, t2) {
        var _ = this;
        _.span = t0;
        _.children = t1;
        _._children = t2;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      CssStylesheet: function CssStylesheet(t0, t1) {
        this.children = t0;
        this.span = t1;
      },
      AtRootQuery: function AtRootQuery(t0, t1, t2, t3) {
        var _ = this;
        _.include = t0;
        _.names = t1;
        _._all = t2;
        _._at_root_query$_rule = t3;
      },
      BinaryOperationExpression: function BinaryOperationExpression(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.operator = t0;
        _.left = t1;
        _.right = t2;
        _.allowsSlash = t3;
      },
      BinaryOperator: function BinaryOperator(t0, t1, t2) {
        this.name = t0;
        this.operator = t1;
        this.precedence = t2;
      },
      AtRootRule$(children, span, query) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new V.AtRootRule(query, span, t1, t2);
      },
      AtRootRule: function AtRootRule(t0, t1, t2, t3) {
        var _ = this;
        _.query = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      EachRule$(variables, list, children, span) {
        var t1 = P.List_List$unmodifiable(variables, type$.String),
          t2 = P.List_List$unmodifiable(children, type$.Statement),
          t3 = C.JSArray_methods.any$1(t2, new M.ParentStatement_closure());
        return new V.EachRule(t1, list, span, t2, t3);
      },
      EachRule: function EachRule(t0, t1, t2, t3, t4) {
        var _ = this;
        _.variables = t0;
        _.list = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      EachRule_toString_closure: function EachRule_toString_closure() {},
      IfClause$(expression, children) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement);
        return new V.IfClause(
          expression,
          t1,
          C.JSArray_methods.any$1(t1, new V.IfRuleClause$__closure())
        );
      },
      ElseClause$(children) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement);
        return new V.ElseClause(
          t1,
          C.JSArray_methods.any$1(t1, new V.IfRuleClause$__closure())
        );
      },
      IfRule: function IfRule(t0, t1, t2) {
        this.clauses = t0;
        this.lastClause = t1;
        this.span = t2;
      },
      IfRule_toString_closure: function IfRule_toString_closure(t0) {
        this.first = t0;
      },
      IfRuleClause: function IfRuleClause() {},
      IfRuleClause$__closure: function IfRuleClause$__closure() {},
      IfRuleClause$___closure: function IfRuleClause$___closure() {},
      IfClause: function IfClause(t0, t1, t2) {
        this.expression = t0;
        this.children = t1;
        this.hasDeclarations = t2;
      },
      ElseClause: function ElseClause(t0, t1) {
        this.children = t0;
        this.hasDeclarations = t1;
      },
      Stylesheet$(children, span) {
        var t1 = H._setArrayType([], type$.JSArray_UseRule),
          t2 = H._setArrayType([], type$.JSArray_ForwardRule),
          t3 = P.List_List$unmodifiable(children, type$.Statement),
          t4 = C.JSArray_methods.any$1(t3, new M.ParentStatement_closure());
        t1 = new V.Stylesheet(span, false, t1, t2, t3, t4);
        t1.Stylesheet$internal$3$plainCss(children, span, false);
        return t1;
      },
      Stylesheet$internal(children, span, plainCss) {
        var t1 = H._setArrayType([], type$.JSArray_UseRule),
          t2 = H._setArrayType([], type$.JSArray_ForwardRule),
          t3 = P.List_List$unmodifiable(children, type$.Statement),
          t4 = C.JSArray_methods.any$1(t3, new M.ParentStatement_closure());
        t1 = new V.Stylesheet(span, plainCss, t1, t2, t3, t4);
        t1.Stylesheet$internal$3$plainCss(children, span, plainCss);
        return t1;
      },
      Stylesheet_Stylesheet$parse(contents, syntax, logger, url) {
        var t1, t2;
        switch (syntax) {
          case C.Syntax_Sass:
            t1 = S.SpanScanner$(contents, url);
            t2 = logger == null ? C.StderrLogger_false : logger;
            return new U.SassParser(
              P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.VariableDeclaration
              ),
              t1,
              t2
            ).parse$0();
          case C.Syntax_SCSS:
            return L.ScssParser$(contents, logger, url).parse$0();
          case C.Syntax_CSS:
            t1 = S.SpanScanner$(contents, url);
            t2 = logger == null ? C.StderrLogger_false : logger;
            return new Q.CssParser(
              P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.VariableDeclaration
              ),
              t1,
              t2
            ).parse$0();
          default:
            throw H.wrapException(
              P.ArgumentError$(
                'Unknown syntax ' + syntax.toString$0(0) + '.',
                null
              )
            );
        }
      },
      Stylesheet: function Stylesheet(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.span = t0;
        _.plainCss = t1;
        _._uses = t2;
        _._forwards = t3;
        _.children = t4;
        _.hasDeclarations = t5;
      },
      AtRootQueryParser: function AtRootQueryParser(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      AtRootQueryParser_parse_closure: function AtRootQueryParser_parse_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser: function StylesheetParser() {},
      StylesheetParser_parse_closure: function StylesheetParser_parse_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parse__closure: function StylesheetParser_parse__closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parse__closure0: function StylesheetParser_parse__closure0() {},
      StylesheetParser_parseArgumentDeclaration_closure: function StylesheetParser_parseArgumentDeclaration_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parseVariableDeclaration_closure: function StylesheetParser_parseVariableDeclaration_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parseUseRule_closure: function StylesheetParser_parseUseRule_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__parseSingleProduction_closure: function StylesheetParser__parseSingleProduction_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.production = t1;
        this.T = t2;
      },
      StylesheetParser__statement_closure: function StylesheetParser__statement_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_variableDeclarationWithoutNamespace_closure: function StylesheetParser_variableDeclarationWithoutNamespace_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      StylesheetParser_variableDeclarationWithoutNamespace_closure0: function StylesheetParser_variableDeclarationWithoutNamespace_closure0(
        t0
      ) {
        this.declaration = t0;
      },
      StylesheetParser__declarationOrBuffer_closure: function StylesheetParser__declarationOrBuffer_closure(
        t0
      ) {
        this.name = t0;
      },
      StylesheetParser__declarationOrBuffer_closure0: function StylesheetParser__declarationOrBuffer_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.name = t1;
      },
      StylesheetParser__styleRule_closure: function StylesheetParser__styleRule_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.wasInStyleRule = t2;
        _.start = t3;
      },
      StylesheetParser__propertyOrVariableDeclaration_closure: function StylesheetParser__propertyOrVariableDeclaration_closure(
        t0
      ) {
        this._box_0 = t0;
      },
      StylesheetParser__propertyOrVariableDeclaration_closure0: function StylesheetParser__propertyOrVariableDeclaration_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.value = t1;
      },
      StylesheetParser__atRootRule_closure: function StylesheetParser__atRootRule_closure(
        t0
      ) {
        this.query = t0;
      },
      StylesheetParser__atRootRule_closure0: function StylesheetParser__atRootRule_closure0() {},
      StylesheetParser__eachRule_closure: function StylesheetParser__eachRule_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.wasInControlDirective = t1;
        _.variables = t2;
        _.list = t3;
      },
      StylesheetParser__functionRule_closure: function StylesheetParser__functionRule_closure(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.$arguments = t1;
        this.precedingComment = t2;
      },
      StylesheetParser__forRule_closure: function StylesheetParser__forRule_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      StylesheetParser__forRule_closure0: function StylesheetParser__forRule_closure0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.wasInControlDirective = t2;
        _.variable = t3;
        _.from = t4;
        _.to = t5;
      },
      StylesheetParser__memberList_closure: function StylesheetParser__memberList_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.variables = t1;
        this.identifiers = t2;
      },
      StylesheetParser__includeRule_closure: function StylesheetParser__includeRule_closure(
        t0
      ) {
        this.contentArguments_ = t0;
      },
      StylesheetParser_mediaRule_closure: function StylesheetParser_mediaRule_closure(
        t0
      ) {
        this.query = t0;
      },
      StylesheetParser__mixinRule_closure: function StylesheetParser__mixinRule_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.name = t1;
        _.$arguments = t2;
        _.precedingComment = t3;
      },
      StylesheetParser_mozDocumentRule_closure: function StylesheetParser_mozDocumentRule_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.name = t2;
        _.value = t3;
      },
      StylesheetParser_supportsRule_closure: function StylesheetParser_supportsRule_closure(
        t0
      ) {
        this.condition = t0;
      },
      StylesheetParser__whileRule_closure: function StylesheetParser__whileRule_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.wasInControlDirective = t1;
        this.condition = t2;
      },
      StylesheetParser_unknownAtRule_closure: function StylesheetParser_unknownAtRule_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.name = t1;
      },
      StylesheetParser_expression_resetState: function StylesheetParser_expression_resetState(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.start = t2;
      },
      StylesheetParser_expression_resolveOneOperation: function StylesheetParser_expression_resolveOneOperation(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      StylesheetParser_expression_resolveOperations: function StylesheetParser_expression_resolveOperations(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.resolveOneOperation = t1;
      },
      StylesheetParser_expression_addSingleExpression: function StylesheetParser_expression_addSingleExpression(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.resetState = t2;
        _.resolveOperations = t3;
      },
      StylesheetParser_expression_addOperator: function StylesheetParser_expression_addOperator(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.resolveOneOperation = t2;
      },
      StylesheetParser_expression_resolveSpaceExpressions: function StylesheetParser_expression_resolveSpaceExpressions(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.resolveOperations = t2;
      },
      StylesheetParser__expressionUntilComma_closure: function StylesheetParser__expressionUntilComma_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__unicodeRange_closure: function StylesheetParser__unicodeRange_closure() {},
      StylesheetParser__unicodeRange_closure0: function StylesheetParser__unicodeRange_closure0() {},
      StylesheetParser_identifierLike_closure: function StylesheetParser_identifierLike_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      StylesheetParser_trySpecialFunction_closure: function StylesheetParser_trySpecialFunction_closure() {},
      StylesheetParser__expressionUntilComparison_closure: function StylesheetParser__expressionUntilComparison_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__publicIdentifier_closure: function StylesheetParser__publicIdentifier_closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      cloneCssStylesheet(stylesheet, extensionStore) {
        var result = extensionStore.clone$0();
        return new S.Tuple2(
          new V._CloneCssVisitor(result.item2)._visitChildren$2(
            V.ModifiableCssStylesheet$(stylesheet.get$span()),
            stylesheet
          ),
          result.item1,
          type$.Tuple2_ModifiableCssStylesheet_ExtensionStore
        );
      },
      _CloneCssVisitor: function _CloneCssVisitor(t0) {
        this._oldToNewSelectors = t0;
      },
      SourceLocation$(offset, column, line, sourceUrl) {
        if (offset < 0)
          H.throwExpression(
            P.RangeError$('Offset may not be negative, was ' + offset + '.')
          );
        else if (line < 0)
          H.throwExpression(
            P.RangeError$('Line may not be negative, was ' + line + '.')
          );
        else if (column < 0)
          H.throwExpression(
            P.RangeError$('Column may not be negative, was ' + column + '.')
          );
        return new V.SourceLocation(sourceUrl, offset, line, column);
      },
      SourceLocation: function SourceLocation(t0, t1, t2, t3) {
        var _ = this;
        _.sourceUrl = t0;
        _.offset = t1;
        _.line = t2;
        _.column = t3;
      },
      SourceSpanBase: function SourceSpanBase() {},
      AtRootQueryParser0: function AtRootQueryParser0(t0, t1) {
        this.scanner = t0;
        this.logger = t1;
      },
      AtRootQueryParser_parse_closure0: function AtRootQueryParser_parse_closure0(
        t0
      ) {
        this.$this = t0;
      },
      AtRootQuery0: function AtRootQuery0(t0, t1, t2, t3) {
        var _ = this;
        _.include = t0;
        _.names = t1;
        _._at_root_query0$_all = t2;
        _._at_root_query0$_rule = t3;
      },
      AtRootRule$0(children, span, query) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new V.AtRootRule0(query, span, t1, t2);
      },
      AtRootRule0: function AtRootRule0(t0, t1, t2, t3) {
        var _ = this;
        _.query = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      BinaryOperationExpression0: function BinaryOperationExpression0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.operator = t0;
        _.left = t1;
        _.right = t2;
        _.allowsSlash = t3;
      },
      BinaryOperator0: function BinaryOperator0(t0, t1, t2) {
        this.name = t0;
        this.operator = t1;
        this.precedence = t2;
      },
      _CloneCssVisitor0: function _CloneCssVisitor0(t0) {
        this._clone_css$_oldToNewSelectors = t0;
      },
      EachRule$0(variables, list, children, span) {
        var t1 = P.List_List$unmodifiable(variables, type$.String),
          t2 = P.List_List$unmodifiable(children, type$.Statement_2),
          t3 = C.JSArray_methods.any$1(t2, new M.ParentStatement_closure0());
        return new V.EachRule0(t1, list, span, t2, t3);
      },
      EachRule0: function EachRule0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.variables = t0;
        _.list = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      EachRule_toString_closure0: function EachRule_toString_closure0() {},
      IfClause$0(expression, children) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2);
        return new V.IfClause0(
          expression,
          t1,
          C.JSArray_methods.any$1(t1, new V.IfRuleClause$__closure0())
        );
      },
      ElseClause$0(children) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2);
        return new V.ElseClause0(
          t1,
          C.JSArray_methods.any$1(t1, new V.IfRuleClause$__closure0())
        );
      },
      IfRule0: function IfRule0(t0, t1, t2) {
        this.clauses = t0;
        this.lastClause = t1;
        this.span = t2;
      },
      IfRule_toString_closure0: function IfRule_toString_closure0(t0) {
        this.first = t0;
      },
      IfRuleClause0: function IfRuleClause0() {},
      IfRuleClause$__closure0: function IfRuleClause$__closure0() {},
      IfRuleClause$___closure0: function IfRuleClause$___closure0() {},
      IfClause0: function IfClause0(t0, t1, t2) {
        this.expression = t0;
        this.children = t1;
        this.hasDeclarations = t2;
      },
      ElseClause0: function ElseClause0(t0, t1) {
        this.children = t0;
        this.hasDeclarations = t1;
      },
      CssStylesheet0: function CssStylesheet0(t0, t1) {
        this.children = t0;
        this.span = t1;
      },
      ModifiableCssStylesheet$0(span) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        return new V.ModifiableCssStylesheet0(
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t1
        );
      },
      ModifiableCssStylesheet0: function ModifiableCssStylesheet0(t0, t1, t2) {
        var _ = this;
        _.span = t0;
        _.children = t1;
        _._node2$_children = t2;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      StylesheetParser0: function StylesheetParser0() {},
      StylesheetParser_parse_closure0: function StylesheetParser_parse_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parse__closure1: function StylesheetParser_parse__closure1(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_parse__closure2: function StylesheetParser_parse__closure2() {},
      StylesheetParser_parseArgumentDeclaration_closure0: function StylesheetParser_parseArgumentDeclaration_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__parseSingleProduction_closure0: function StylesheetParser__parseSingleProduction_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.production = t1;
        this.T = t2;
      },
      StylesheetParser_parseSignature_closure: function StylesheetParser_parseSignature_closure(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__statement_closure0: function StylesheetParser__statement_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser_variableDeclarationWithoutNamespace_closure1: function StylesheetParser_variableDeclarationWithoutNamespace_closure1(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      StylesheetParser_variableDeclarationWithoutNamespace_closure2: function StylesheetParser_variableDeclarationWithoutNamespace_closure2(
        t0
      ) {
        this.declaration = t0;
      },
      StylesheetParser__declarationOrBuffer_closure1: function StylesheetParser__declarationOrBuffer_closure1(
        t0
      ) {
        this.name = t0;
      },
      StylesheetParser__declarationOrBuffer_closure2: function StylesheetParser__declarationOrBuffer_closure2(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.name = t1;
      },
      StylesheetParser__styleRule_closure0: function StylesheetParser__styleRule_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.wasInStyleRule = t2;
        _.start = t3;
      },
      StylesheetParser__propertyOrVariableDeclaration_closure1: function StylesheetParser__propertyOrVariableDeclaration_closure1(
        t0
      ) {
        this._box_0 = t0;
      },
      StylesheetParser__propertyOrVariableDeclaration_closure2: function StylesheetParser__propertyOrVariableDeclaration_closure2(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.value = t1;
      },
      StylesheetParser__atRootRule_closure1: function StylesheetParser__atRootRule_closure1(
        t0
      ) {
        this.query = t0;
      },
      StylesheetParser__atRootRule_closure2: function StylesheetParser__atRootRule_closure2() {},
      StylesheetParser__eachRule_closure0: function StylesheetParser__eachRule_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.wasInControlDirective = t1;
        _.variables = t2;
        _.list = t3;
      },
      StylesheetParser__functionRule_closure0: function StylesheetParser__functionRule_closure0(
        t0,
        t1,
        t2
      ) {
        this.name = t0;
        this.$arguments = t1;
        this.precedingComment = t2;
      },
      StylesheetParser__forRule_closure1: function StylesheetParser__forRule_closure1(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      StylesheetParser__forRule_closure2: function StylesheetParser__forRule_closure2(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.wasInControlDirective = t2;
        _.variable = t3;
        _.from = t4;
        _.to = t5;
      },
      StylesheetParser__memberList_closure0: function StylesheetParser__memberList_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.variables = t1;
        this.identifiers = t2;
      },
      StylesheetParser__includeRule_closure0: function StylesheetParser__includeRule_closure0(
        t0
      ) {
        this.contentArguments_ = t0;
      },
      StylesheetParser_mediaRule_closure0: function StylesheetParser_mediaRule_closure0(
        t0
      ) {
        this.query = t0;
      },
      StylesheetParser__mixinRule_closure0: function StylesheetParser__mixinRule_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.name = t1;
        _.$arguments = t2;
        _.precedingComment = t3;
      },
      StylesheetParser_mozDocumentRule_closure0: function StylesheetParser_mozDocumentRule_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.name = t2;
        _.value = t3;
      },
      StylesheetParser_supportsRule_closure0: function StylesheetParser_supportsRule_closure0(
        t0
      ) {
        this.condition = t0;
      },
      StylesheetParser__whileRule_closure0: function StylesheetParser__whileRule_closure0(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.wasInControlDirective = t1;
        this.condition = t2;
      },
      StylesheetParser_unknownAtRule_closure0: function StylesheetParser_unknownAtRule_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.name = t1;
      },
      StylesheetParser_expression_resetState0: function StylesheetParser_expression_resetState0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.start = t2;
      },
      StylesheetParser_expression_resolveOneOperation0: function StylesheetParser_expression_resolveOneOperation0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      StylesheetParser_expression_resolveOperations0: function StylesheetParser_expression_resolveOperations0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.resolveOneOperation = t1;
      },
      StylesheetParser_expression_addSingleExpression0: function StylesheetParser_expression_addSingleExpression0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.resetState = t2;
        _.resolveOperations = t3;
      },
      StylesheetParser_expression_addOperator0: function StylesheetParser_expression_addOperator0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.resolveOneOperation = t2;
      },
      StylesheetParser_expression_resolveSpaceExpressions0: function StylesheetParser_expression_resolveSpaceExpressions0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.resolveOperations = t2;
      },
      StylesheetParser__expressionUntilComma_closure0: function StylesheetParser__expressionUntilComma_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__unicodeRange_closure1: function StylesheetParser__unicodeRange_closure1() {},
      StylesheetParser__unicodeRange_closure2: function StylesheetParser__unicodeRange_closure2() {},
      StylesheetParser_identifierLike_closure0: function StylesheetParser_identifierLike_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      StylesheetParser_trySpecialFunction_closure0: function StylesheetParser_trySpecialFunction_closure0() {},
      StylesheetParser__expressionUntilComparison_closure0: function StylesheetParser__expressionUntilComparison_closure0(
        t0
      ) {
        this.$this = t0;
      },
      StylesheetParser__publicIdentifier_closure0: function StylesheetParser__publicIdentifier_closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.start = t1;
      },
      Stylesheet$internal0(children, span, plainCss) {
        var t1 = H._setArrayType([], type$.JSArray_UseRule_2),
          t2 = H._setArrayType([], type$.JSArray_ForwardRule_2),
          t3 = P.List_List$unmodifiable(children, type$.Statement_2),
          t4 = C.JSArray_methods.any$1(t3, new M.ParentStatement_closure0());
        t1 = new V.Stylesheet0(span, plainCss, t1, t2, t3, t4);
        t1.Stylesheet$internal$3$plainCss0(children, span, plainCss);
        return t1;
      },
      Stylesheet_Stylesheet$parse0(contents, syntax, logger, url) {
        var t1, t2;
        switch (syntax) {
          case C.Syntax_Sass0:
            t1 = S.SpanScanner$(contents, url);
            t2 = logger == null ? C.C_StderrLogger : logger;
            return new U.SassParser0(
              P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.VariableDeclaration_2
              ),
              t1,
              t2
            ).parse$0();
          case C.Syntax_SCSS0:
            return L.ScssParser$0(contents, logger, url).parse$0();
          case C.Syntax_CSS0:
            t1 = S.SpanScanner$(contents, url);
            t2 = logger == null ? C.C_StderrLogger : logger;
            return new Q.CssParser0(
              P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.VariableDeclaration_2
              ),
              t1,
              t2
            ).parse$0();
          default:
            throw H.wrapException(
              P.ArgumentError$(
                'Unknown syntax ' + syntax.toString$0(0) + '.',
                null
              )
            );
        }
      },
      Stylesheet0: function Stylesheet0(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.span = t0;
        _.plainCss = t1;
        _._stylesheet1$_uses = t2;
        _._stylesheet1$_forwards = t3;
        _.children = t4;
        _.hasDeclarations = t5;
      },
      SpanExtensions_trimLeft(_this) {
        var t5,
          t1 = _this._file$_start,
          t2 = _this._end,
          t3 = _this.file._decodedChars,
          t4 = t3.length,
          start = 0;
        while (true) {
          t5 = C.JSString_methods._codeUnitAt$1(
            P.String_String$fromCharCodes(
              new Uint32Array(t3.subarray(t1, H._checkValidRange(t1, t2, t4))),
              0,
              null
            ),
            start
          );
          if (!(t5 === 32 || t5 === 9 || t5 === 10 || t5 === 13 || t5 === 12))
            break;
          ++start;
        }
        return Y.FileSpanExtension_subspan(_this, start, null);
      },
      SpanExtensions_trimRight(_this) {
        var t5,
          t1 = _this._file$_start,
          t2 = _this._end,
          t3 = _this.file._decodedChars,
          end =
            P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(t3, t1, t2),
              0,
              null
            ).length - 1,
          t4 = t3.length;
        while (true) {
          t5 = C.JSString_methods.codeUnitAt$1(
            P.String_String$fromCharCodes(
              new Uint32Array(t3.subarray(t1, H._checkValidRange(t1, t2, t4))),
              0,
              null
            ),
            end
          );
          if (!(t5 === 32 || t5 === 9 || t5 === 10 || t5 === 13 || t5 === 12))
            break;
          --end;
        }
        return Y.FileSpanExtension_subspan(_this, 0, end + 1);
      },
      SpanExtensions_trimLeft0(_this) {
        var t5,
          t1 = _this._file$_start,
          t2 = _this._end,
          t3 = _this.file._decodedChars,
          t4 = t3.length,
          start = 0;
        while (true) {
          t5 = C.JSString_methods._codeUnitAt$1(
            P.String_String$fromCharCodes(
              new Uint32Array(t3.subarray(t1, H._checkValidRange(t1, t2, t4))),
              0,
              null
            ),
            start
          );
          if (!(t5 === 32 || t5 === 9 || t5 === 10 || t5 === 13 || t5 === 12))
            break;
          ++start;
        }
        return Y.FileSpanExtension_subspan(_this, start, null);
      },
      SpanExtensions_trimRight0(_this) {
        var t5,
          t1 = _this._file$_start,
          t2 = _this._end,
          t3 = _this.file._decodedChars,
          end =
            P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(t3, t1, t2),
              0,
              null
            ).length - 1,
          t4 = t3.length;
        while (true) {
          t5 = C.JSString_methods.codeUnitAt$1(
            P.String_String$fromCharCodes(
              new Uint32Array(t3.subarray(t1, H._checkValidRange(t1, t2, t4))),
              0,
              null
            ),
            end
          );
          if (!(t5 === 32 || t5 === 9 || t5 === 10 || t5 === 13 || t5 === 12))
            break;
          --end;
        }
        return Y.FileSpanExtension_subspan(_this, 0, end + 1);
      },
    },
    X = {
      NodeJsError: function NodeJsError() {},
      JsAssertionError: function JsAssertionError() {},
      JsRangeError: function JsRangeError() {},
      JsReferenceError: function JsReferenceError() {},
      JsSyntaxError: function JsSyntaxError() {},
      JsTypeError: function JsTypeError() {},
      JsSystemError: function JsSystemError() {},
      Process: function Process() {},
      CPUUsage: function CPUUsage() {},
      Release: function Release() {},
      ParsedPath_ParsedPath$parse(path, style) {
        var t1,
          parts,
          separators,
          start,
          i,
          root = style.getRoot$1(path),
          isRootRelative = style.isRootRelative$1(path);
        if (root != null)
          path = C.JSString_methods.substring$1(path, root.length);
        t1 = type$.JSArray_String;
        parts = H._setArrayType([], t1);
        separators = H._setArrayType([], t1);
        t1 = path.length;
        if (
          t1 !== 0 &&
          style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))
        ) {
          separators.push(path[0]);
          start = 1;
        } else {
          separators.push('');
          start = 0;
        }
        for (i = start; i < t1; ++i)
          if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
            parts.push(C.JSString_methods.substring$2(path, start, i));
            separators.push(path[i]);
            start = i + 1;
          }
        if (start < t1) {
          parts.push(C.JSString_methods.substring$1(path, start));
          separators.push('');
        }
        return new X.ParsedPath(style, root, isRootRelative, parts, separators);
      },
      ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
        var _ = this;
        _.style = t0;
        _.root = t1;
        _.isRootRelative = t2;
        _.parts = t3;
        _.separators = t4;
      },
      ParsedPath__splitExtension_closure: function ParsedPath__splitExtension_closure() {},
      ParsedPath__splitExtension_closure0: function ParsedPath__splitExtension_closure0() {},
      PathException$(message) {
        return new X.PathException(message);
      },
      PathException: function PathException(t0) {
        this.message = t0;
      },
      ModifiableCssStyleRule$(selector, span, originalSelector) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode);
        return new X.ModifiableCssStyleRule(
          selector,
          originalSelector,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode
          ),
          t1
        );
      },
      ModifiableCssStyleRule: function ModifiableCssStyleRule(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.selector = t0;
        _.originalSelector = t1;
        _.span = t2;
        _.children = t3;
        _._children = t4;
        _._indexInParent = _._parent = null;
        _.isGroupEnd = false;
      },
      ArgumentInvocation$empty(span) {
        return new X.ArgumentInvocation(
          C.List_empty7,
          C.Map_empty2,
          null,
          null,
          span
        );
      },
      ArgumentInvocation: function ArgumentInvocation(t0, t1, t2, t3, t4) {
        var _ = this;
        _.positional = t0;
        _.named = t1;
        _.rest = t2;
        _.keywordRest = t3;
        _.span = t4;
      },
      UnaryOperationExpression: function UnaryOperationExpression(t0, t1, t2) {
        this.operator = t0;
        this.operand = t1;
        this.span = t2;
      },
      UnaryOperator: function UnaryOperator(t0, t1) {
        this.name = t0;
        this.operator = t1;
      },
      Interpolation$(contents, span) {
        var t1 = new X.Interpolation(
          P.List_List$unmodifiable(contents, type$.Object),
          span
        );
        t1.Interpolation$2(contents, span);
        return t1;
      },
      Interpolation: function Interpolation(t0, t1) {
        this.contents = t0;
        this.span = t1;
      },
      Interpolation_toString_closure: function Interpolation_toString_closure() {},
      ExtendRule: function ExtendRule(t0, t1, t2) {
        this.selector = t0;
        this.isOptional = t1;
        this.span = t2;
      },
      StyleRule$(selector, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new X.StyleRule(selector, span, t1, t2);
      },
      StyleRule: function StyleRule(t0, t1, t2, t3) {
        var _ = this;
        _.selector = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      SupportsInterpolation: function SupportsInterpolation(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      ClassSelector: function ClassSelector(t0) {
        this.name = t0;
      },
      CompoundSelector$(components) {
        var t1 = P.List_List$unmodifiable(components, type$.SimpleSelector);
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new X.CompoundSelector(t1);
      },
      CompoundSelector: function CompoundSelector(t0) {
        this.components = t0;
        this._maxSpecificity = this._compound$_minSpecificity = null;
      },
      CompoundSelector_isInvisible_closure: function CompoundSelector_isInvisible_closure() {},
      compileAsync(
        path,
        charset,
        importCache,
        logger,
        quietDeps,
        sourceMap,
        style,
        syntax,
        verbose
      ) {
        return X.compileAsync$body(
          path,
          charset,
          importCache,
          logger,
          quietDeps,
          sourceMap,
          style,
          syntax,
          verbose
        );
      },
      compileAsync$body(
        path,
        charset,
        importCache,
        logger,
        quietDeps,
        sourceMap,
        style,
        syntax,
        verbose
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult),
          $async$returnValue,
          t1,
          terseLogger,
          t2,
          stylesheet,
          result;
        var $async$compileAsync = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!verbose) {
                  t1 = logger == null ? new S.StderrLogger(false) : logger;
                  terseLogger = new Y.TerseLogger(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    t1
                  );
                  logger = terseLogger;
                } else terseLogger = null;
                t1 = syntax === M.Syntax_forPath(path);
                $async$goto = t1 ? 3 : 5;
                break;
              case 3:
                // then
                t1 = $.$get$context();
                t2 = t1.absolute$7('.', null, null, null, null, null, null);
                $async$goto = 6;
                return P._asyncAwait(
                  importCache.importCanonical$3$originalUrl(
                    new F.FilesystemImporter(t2),
                    t1.toUri$1(
                      J.$eq$(J.get$platform$x(self.process), 'win32') ||
                        J.$eq$(J.get$platform$x(self.process), 'darwin')
                        ? F._realCasePath(
                            t1.absolute$7(
                              t1.normalize$1(path),
                              null,
                              null,
                              null,
                              null,
                              null,
                              null
                            )
                          )
                        : t1.canonicalize$1(path)
                    ),
                    t1.toUri$1(path)
                  ),
                  $async$compileAsync
                );
              case 6:
                // returning from await.
                t2 = $async$result;
                t2.toString;
                stylesheet = t2;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                t1 = B.readFile(path);
                t2 = $.$get$context();
                stylesheet = V.Stylesheet_Stylesheet$parse(
                  t1,
                  syntax,
                  logger,
                  t2.toUri$1(path)
                );
                t1 = t2;
              case 4:
                // join
                $async$goto = 7;
                return P._asyncAwait(
                  X._compileStylesheet0(
                    stylesheet,
                    logger,
                    importCache,
                    null,
                    new F.FilesystemImporter(
                      t1.absolute$7('.', null, null, null, null, null, null)
                    ),
                    null,
                    style,
                    true,
                    null,
                    null,
                    quietDeps,
                    sourceMap,
                    charset
                  ),
                  $async$compileAsync
                );
              case 7:
                // returning from await.
                result = $async$result;
                if (terseLogger != null) terseLogger.summarize$1$node(false);
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$compileAsync, $async$completer);
      },
      compileStringAsync(
        source,
        charset,
        importCache,
        importer,
        logger,
        quietDeps,
        sourceMap,
        style,
        syntax,
        verbose
      ) {
        return X.compileStringAsync$body(
          source,
          charset,
          importCache,
          importer,
          logger,
          quietDeps,
          sourceMap,
          style,
          syntax,
          verbose
        );
      },
      compileStringAsync$body(
        source,
        charset,
        importCache,
        importer,
        logger,
        quietDeps,
        sourceMap,
        style,
        syntax,
        verbose
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult),
          $async$returnValue,
          t1,
          terseLogger,
          stylesheet,
          result;
        var $async$compileStringAsync = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!verbose) {
                  t1 = logger == null ? new S.StderrLogger(false) : logger;
                  terseLogger = new Y.TerseLogger(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    t1
                  );
                  logger = terseLogger;
                } else terseLogger = null;
                stylesheet = V.Stylesheet_Stylesheet$parse(
                  source,
                  syntax,
                  logger,
                  null
                );
                $async$goto = 3;
                return P._asyncAwait(
                  X._compileStylesheet0(
                    stylesheet,
                    logger,
                    importCache,
                    null,
                    importer,
                    null,
                    style,
                    true,
                    null,
                    null,
                    quietDeps,
                    sourceMap,
                    charset
                  ),
                  $async$compileStringAsync
                );
              case 3:
                // returning from await.
                result = $async$result;
                if (terseLogger != null) terseLogger.summarize$1$node(false);
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$compileStringAsync, $async$completer);
      },
      _compileStylesheet0(
        stylesheet,
        logger,
        importCache,
        nodeImporter,
        importer,
        functions,
        style,
        useSpaces,
        indentWidth,
        lineFeed,
        quietDeps,
        sourceMap,
        charset
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult),
          $async$returnValue,
          serializeResult,
          resultSourceMap,
          $async$temp1;
        var $async$_compileStylesheet0 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = N;
                $async$goto = 3;
                return P._asyncAwait(
                  E._EvaluateVisitor$0(
                    functions,
                    importCache,
                    logger,
                    nodeImporter,
                    quietDeps,
                    sourceMap
                  ).run$2(importer, stylesheet),
                  $async$_compileStylesheet0
                );
              case 3:
                // returning from await.
                serializeResult = $async$temp1.serialize(
                  $async$result.stylesheet,
                  charset,
                  indentWidth,
                  false,
                  lineFeed,
                  sourceMap,
                  style,
                  true
                );
                resultSourceMap = serializeResult.sourceMap;
                if (resultSourceMap != null && true)
                  B.mapInPlace(
                    resultSourceMap.urls,
                    new X._compileStylesheet_closure0(stylesheet, importCache)
                  );
                $async$returnValue = new U.CompileResult(serializeResult);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$_compileStylesheet0, $async$completer);
      },
      _compileStylesheet_closure0: function _compileStylesheet_closure0(
        t0,
        t1
      ) {
        this.stylesheet = t0;
        this.importCache = t1;
      },
      ExtensionStore__extendOrReplace(selector, source, targets, mode, span) {
        var t1,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t8,
          t9,
          _i,
          complex,
          t10,
          t11,
          t12,
          _i0,
          simple,
          t13,
          _i1,
          t14,
          t15,
          extender = X.ExtensionStore$_mode(mode);
        if (!selector.get$isInvisible())
          extender._originals.addAll$1(0, selector.components);
        for (
          t1 = targets.components,
            t2 = t1.length,
            t3 = source.components,
            t4 = t3.length,
            t5 = type$.ComplexSelector,
            t6 = type$.Extension,
            t7 = type$.CompoundSelector,
            t8 = type$.SimpleSelector,
            t9 = type$.Map_ComplexSelector_Extension,
            _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          t10 = complex.components;
          if (t10.length !== 1)
            throw H.wrapException(
              E.SassScriptException$(
                "Can't extend complex selector " + H.S(complex) + '.'
              )
            );
          t11 = P.LinkedHashMap_LinkedHashMap$_empty(t8, t9);
          for (
            t10 = t7._as(C.JSArray_methods.get$first(t10)).components,
              t12 = t10.length,
              _i0 = 0;
            _i0 < t12;
            ++_i0
          ) {
            simple = t10[_i0];
            t13 = P.LinkedHashMap_LinkedHashMap$_empty(t5, t6);
            for (_i1 = 0; _i1 < t4; ++_i1) {
              complex = t3[_i1];
              if (complex._complex$_maxSpecificity == null)
                complex._computeSpecificity$0();
              complex._complex$_maxSpecificity.toString;
              t14 = new S.Extender(complex, false, span);
              t15 = new S.Extension(t14, simple, null, true, span);
              t14._extension = t15;
              t13.$indexSet(0, complex, t15);
            }
            t11.$indexSet(0, simple, t13);
          }
          selector = extender._extendList$3(selector, span, t11);
        }
        return selector;
      },
      ExtensionStore$() {
        var t1 = type$.SimpleSelector;
        return new X.ExtensionStore(
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Set_ModifiableCssValue_SelectorList
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Map_ComplexSelector_Extension
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension_2),
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.ModifiableCssValue_SelectorList,
            type$.List_CssMediaQuery
          ),
          P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(t1, type$.int),
          new P._LinkedIdentityHashSet(
            type$._LinkedIdentityHashSet_ComplexSelector
          ),
          C.ExtendMode_normal
        );
      },
      ExtensionStore$_mode(_mode) {
        var t1 = type$.SimpleSelector;
        return new X.ExtensionStore(
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Set_ModifiableCssValue_SelectorList
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Map_ComplexSelector_Extension
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension_2),
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.ModifiableCssValue_SelectorList,
            type$.List_CssMediaQuery
          ),
          P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(t1, type$.int),
          new P._LinkedIdentityHashSet(
            type$._LinkedIdentityHashSet_ComplexSelector
          ),
          _mode
        );
      },
      ExtensionStore: function ExtensionStore(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _._selectors = t0;
        _._extensions = t1;
        _._extensionsByExtender = t2;
        _._mediaContexts = t3;
        _._sourceSpecificity = t4;
        _._originals = t5;
        _._mode = t6;
      },
      ExtensionStore_extensionsWhereTarget_closure: function ExtensionStore_extensionsWhereTarget_closure() {},
      ExtensionStore__registerSelector_closure: function ExtensionStore__registerSelector_closure() {},
      ExtensionStore_addExtension_closure: function ExtensionStore_addExtension_closure() {},
      ExtensionStore_addExtension_closure0: function ExtensionStore_addExtension_closure0() {},
      ExtensionStore_addExtension_closure1: function ExtensionStore_addExtension_closure1(
        t0
      ) {
        this.complex = t0;
      },
      ExtensionStore__extendExistingExtensions_closure: function ExtensionStore__extendExistingExtensions_closure() {},
      ExtensionStore__extendExistingExtensions_closure0: function ExtensionStore__extendExistingExtensions_closure0() {},
      ExtensionStore_addExtensions_closure: function ExtensionStore_addExtensions_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      ExtensionStore_addExtensions__closure1: function ExtensionStore_addExtensions__closure1(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _._box_0 = t0;
        _.existingSources = t1;
        _.extensionsForTarget = t2;
        _.selectorsForTarget = t3;
        _.target = t4;
      },
      ExtensionStore_addExtensions___closure: function ExtensionStore_addExtensions___closure() {},
      ExtensionStore_addExtensions_closure0: function ExtensionStore_addExtensions_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      ExtensionStore_addExtensions__closure: function ExtensionStore_addExtensions__closure(
        t0,
        t1
      ) {
        this.$this = t0;
        this.newExtensions = t1;
      },
      ExtensionStore_addExtensions__closure0: function ExtensionStore_addExtensions__closure0(
        t0,
        t1
      ) {
        this.$this = t0;
        this.newExtensions = t1;
      },
      ExtensionStore__extendComplex_closure: function ExtensionStore__extendComplex_closure(
        t0
      ) {
        this.complex = t0;
      },
      ExtensionStore__extendComplex_closure0: function ExtensionStore__extendComplex_closure0(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.complex = t2;
      },
      ExtensionStore__extendComplex__closure: function ExtensionStore__extendComplex__closure() {},
      ExtensionStore__extendComplex__closure0: function ExtensionStore__extendComplex__closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.complex = t2;
        _.path = t3;
      },
      ExtensionStore__extendComplex___closure: function ExtensionStore__extendComplex___closure() {},
      ExtensionStore__extendCompound_closure: function ExtensionStore__extendCompound_closure(
        t0
      ) {
        this.mediaQueryContext = t0;
      },
      ExtensionStore__extendCompound_closure0: function ExtensionStore__extendCompound_closure0(
        t0,
        t1
      ) {
        this._box_1 = t0;
        this.mediaQueryContext = t1;
      },
      ExtensionStore__extendCompound__closure: function ExtensionStore__extendCompound__closure() {},
      ExtensionStore__extendCompound__closure0: function ExtensionStore__extendCompound__closure0(
        t0
      ) {
        this._box_0 = t0;
      },
      ExtensionStore__extendCompound_closure1: function ExtensionStore__extendCompound_closure1() {},
      ExtensionStore__extendCompound_closure2: function ExtensionStore__extendCompound_closure2() {},
      ExtensionStore__extendCompound_closure3: function ExtensionStore__extendCompound_closure3(
        t0
      ) {
        this.original = t0;
      },
      ExtensionStore__extendSimple_withoutPseudo: function ExtensionStore__extendSimple_withoutPseudo(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.extensions = t1;
        _.targetsUsed = t2;
        _.simpleSpan = t3;
      },
      ExtensionStore__extendSimple_closure: function ExtensionStore__extendSimple_closure(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.withoutPseudo = t1;
        this.simpleSpan = t2;
      },
      ExtensionStore__extendSimple_closure0: function ExtensionStore__extendSimple_closure0() {},
      ExtensionStore__extendPseudo_closure: function ExtensionStore__extendPseudo_closure() {},
      ExtensionStore__extendPseudo_closure0: function ExtensionStore__extendPseudo_closure0() {},
      ExtensionStore__extendPseudo_closure1: function ExtensionStore__extendPseudo_closure1() {},
      ExtensionStore__extendPseudo_closure2: function ExtensionStore__extendPseudo_closure2(
        t0
      ) {
        this.pseudo = t0;
      },
      ExtensionStore__extendPseudo_closure3: function ExtensionStore__extendPseudo_closure3(
        t0
      ) {
        this.pseudo = t0;
      },
      ExtensionStore__trim_closure: function ExtensionStore__trim_closure(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.complex1 = t1;
      },
      ExtensionStore__trim_closure0: function ExtensionStore__trim_closure0(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.complex1 = t1;
      },
      ExtensionStore_clone_closure: function ExtensionStore_clone_closure(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.newSelectors = t1;
        _.oldToNewSelectors = t2;
        _.newMediaContexts = t3;
      },
      SourceSpanWithContext$(start, end, text, _context) {
        var t1 = new X.SourceSpanWithContext(_context, start, end, text);
        t1.SourceSpanBase$3(start, end, text);
        if (!C.JSString_methods.contains$1(_context, text))
          H.throwExpression(
            P.ArgumentError$(
              'The context line "' +
                _context +
                '" must contain "' +
                text +
                '".',
              null
            )
          );
        if (B.findLineStart(_context, text, start.get$column()) == null)
          H.throwExpression(
            P.ArgumentError$(
              'The span text "' +
                text +
                '" must start at column ' +
                (start.get$column() + 1) +
                ' in a line within "' +
                _context +
                '".',
              null
            )
          );
        return t1;
      },
      SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
        var _ = this;
        _._context = t0;
        _.start = t1;
        _.end = t2;
        _.text = t3;
      },
      StringScanner$(string, position, sourceUrl) {
        var t1;
        if (sourceUrl == null) t1 = null;
        else
          t1 =
            typeof sourceUrl == 'string'
              ? P.Uri_parse(sourceUrl)
              : type$.Uri._as(sourceUrl);
        return new X.StringScanner(t1, string);
      },
      StringScanner: function StringScanner(t0, t1) {
        var _ = this;
        _.sourceUrl = t0;
        _.string = t1;
        _._string_scanner$_position = 0;
        _._lastMatchPosition = _._lastMatch = null;
      },
      ArgumentInvocation$empty0(span) {
        return new X.ArgumentInvocation0(
          C.List_empty17,
          C.Map_empty8,
          null,
          null,
          span
        );
      },
      ArgumentInvocation0: function ArgumentInvocation0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.positional = t0;
        _.named = t1;
        _.rest = t2;
        _.keywordRest = t3;
        _.span = t4;
      },
      compileAsync0(
        path,
        charset,
        functions,
        indentWidth,
        lineFeed,
        nodeImporter,
        quietDeps,
        sourceMap,
        style,
        syntax,
        useSpaces,
        verbose
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult_2),
          $async$returnValue,
          terseLogger,
          logger,
          t1,
          t2,
          t3,
          stylesheet,
          result;
        var $async$compileAsync0 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!verbose) {
                  terseLogger = new Y.TerseLogger0(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    new S.StderrLogger0()
                  );
                  logger = terseLogger;
                } else {
                  logger = null;
                  terseLogger = null;
                }
                t1 = B.readFile0(path);
                t2 = syntax == null ? M.Syntax_forPath0(path) : syntax;
                t3 = $.$get$context();
                stylesheet = V.Stylesheet_Stylesheet$parse0(
                  t1,
                  t2,
                  logger,
                  t3.toUri$1(path)
                );
                t1 = t3;
                $async$goto = 3;
                return P._asyncAwait(
                  X._compileStylesheet1(
                    stylesheet,
                    logger,
                    null,
                    nodeImporter,
                    new F.FilesystemImporter0(
                      t1.absolute$7('.', null, null, null, null, null, null)
                    ),
                    functions,
                    style,
                    useSpaces,
                    indentWidth,
                    lineFeed,
                    quietDeps,
                    sourceMap,
                    charset
                  ),
                  $async$compileAsync0
                );
              case 3:
                // returning from await.
                result = $async$result;
                if (terseLogger != null) terseLogger.summarize$1$node(true);
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$compileAsync0, $async$completer);
      },
      compileStringAsync0(
        source,
        charset,
        functions,
        indentWidth,
        lineFeed,
        nodeImporter,
        quietDeps,
        sourceMap,
        style,
        syntax,
        url,
        useSpaces,
        verbose
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult_2),
          $async$returnValue,
          terseLogger,
          logger,
          stylesheet,
          t1,
          result;
        var $async$compileStringAsync0 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!verbose) {
                  terseLogger = new Y.TerseLogger0(
                    P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.String,
                      type$.int
                    ),
                    new S.StderrLogger0()
                  );
                  logger = terseLogger;
                } else {
                  logger = null;
                  terseLogger = null;
                }
                stylesheet = V.Stylesheet_Stylesheet$parse0(
                  source,
                  syntax == null ? C.Syntax_SCSS0 : syntax,
                  logger,
                  url
                );
                t1 = $.$get$context().absolute$7(
                  '.',
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                );
                $async$goto = 3;
                return P._asyncAwait(
                  X._compileStylesheet1(
                    stylesheet,
                    logger,
                    null,
                    nodeImporter,
                    new F.FilesystemImporter0(t1),
                    functions,
                    style,
                    useSpaces,
                    indentWidth,
                    lineFeed,
                    quietDeps,
                    sourceMap,
                    charset
                  ),
                  $async$compileStringAsync0
                );
              case 3:
                // returning from await.
                result = $async$result;
                if (terseLogger != null) terseLogger.summarize$1$node(true);
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$compileStringAsync0, $async$completer);
      },
      _compileStylesheet1(
        stylesheet,
        logger,
        importCache,
        nodeImporter,
        importer,
        functions,
        style,
        useSpaces,
        indentWidth,
        lineFeed,
        quietDeps,
        sourceMap,
        charset
      ) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.CompileResult_2),
          $async$returnValue,
          evaluateResult,
          serializeResult,
          resultSourceMap;
        var $async$_compileStylesheet1 = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  E._EvaluateVisitor$1(
                    functions,
                    importCache,
                    logger,
                    nodeImporter,
                    quietDeps,
                    sourceMap
                  ).run$2(importer, stylesheet),
                  $async$_compileStylesheet1
                );
              case 3:
                // returning from await.
                evaluateResult = $async$result;
                serializeResult = N.serialize0(
                  evaluateResult.stylesheet,
                  charset,
                  indentWidth,
                  false,
                  lineFeed,
                  sourceMap,
                  style,
                  useSpaces
                );
                resultSourceMap = serializeResult.sourceMap;
                if (resultSourceMap != null && importCache != null)
                  B.mapInPlace0(
                    resultSourceMap.urls,
                    new X._compileStylesheet_closure1(stylesheet, importCache)
                  );
                $async$returnValue = new U.CompileResult0(
                  evaluateResult,
                  serializeResult
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$_compileStylesheet1, $async$completer);
      },
      _compileStylesheet_closure1: function _compileStylesheet_closure1(
        t0,
        t1
      ) {
        this.stylesheet = t0;
        this.importCache = t1;
      },
      ClassSelector0: function ClassSelector0(t0) {
        this.name = t0;
      },
      CompoundSelector$0(components) {
        var t1 = P.List_List$unmodifiable(components, type$.SimpleSelector_2);
        if (t1.length === 0)
          H.throwExpression(
            P.ArgumentError$('components may not be empty.', null)
          );
        return new X.CompoundSelector0(t1);
      },
      CompoundSelector0: function CompoundSelector0(t0) {
        this.components = t0;
        this._compound0$_maxSpecificity = this._compound0$_minSpecificity = null;
      },
      CompoundSelector_isInvisible_closure0: function CompoundSelector_isInvisible_closure0() {},
      ExtendRule0: function ExtendRule0(t0, t1, t2) {
        this.selector = t0;
        this.isOptional = t1;
        this.span = t2;
      },
      ExtensionStore__extendOrReplace0(selector, source, targets, mode, span) {
        var t1,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          t8,
          t9,
          _i,
          complex,
          t10,
          t11,
          t12,
          _i0,
          simple,
          t13,
          _i1,
          t14,
          t15,
          extender = X.ExtensionStore$_mode0(mode);
        if (!selector.get$isInvisible())
          extender._extension_store$_originals.addAll$1(0, selector.components);
        for (
          t1 = targets.components,
            t2 = t1.length,
            t3 = source.components,
            t4 = t3.length,
            t5 = type$.ComplexSelector_2,
            t6 = type$.Extension_2,
            t7 = type$.CompoundSelector_2,
            t8 = type$.SimpleSelector_2,
            t9 = type$.Map_ComplexSelector_Extension_2,
            _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          t10 = complex.components;
          if (t10.length !== 1)
            throw H.wrapException(
              E.SassScriptException$0(
                "Can't extend complex selector " + H.S(complex) + '.'
              )
            );
          t11 = P.LinkedHashMap_LinkedHashMap$_empty(t8, t9);
          for (
            t10 = t7._as(C.JSArray_methods.get$first(t10)).components,
              t12 = t10.length,
              _i0 = 0;
            _i0 < t12;
            ++_i0
          ) {
            simple = t10[_i0];
            t13 = P.LinkedHashMap_LinkedHashMap$_empty(t5, t6);
            for (_i1 = 0; _i1 < t4; ++_i1) {
              complex = t3[_i1];
              if (complex._complex0$_maxSpecificity == null)
                complex._complex0$_computeSpecificity$0();
              complex._complex0$_maxSpecificity.toString;
              t14 = new S.Extender0(complex, false, span);
              t15 = new S.Extension0(t14, simple, null, true, span);
              t14._extension$_extension = t15;
              t13.$indexSet(0, complex, t15);
            }
            t11.$indexSet(0, simple, t13);
          }
          selector = extender._extension_store$_extendList$3(
            selector,
            span,
            t11
          );
        }
        return selector;
      },
      ExtensionStore$_mode0(_mode) {
        var t1 = type$.SimpleSelector_2;
        return new X.ExtensionStore0(
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Set_ModifiableCssValue_SelectorList_2
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(
            t1,
            type$.Map_ComplexSelector_Extension_2
          ),
          P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension),
          P.LinkedHashMap_LinkedHashMap$_empty(
            type$.ModifiableCssValue_SelectorList_2,
            type$.List_CssMediaQuery_2
          ),
          P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(t1, type$.int),
          new P._LinkedIdentityHashSet(
            type$._LinkedIdentityHashSet_ComplexSelector_2
          ),
          _mode
        );
      },
      ExtensionStore0: function ExtensionStore0(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _._extension_store$_selectors = t0;
        _._extension_store$_extensions = t1;
        _._extension_store$_extensionsByExtender = t2;
        _._extension_store$_mediaContexts = t3;
        _._extension_store$_sourceSpecificity = t4;
        _._extension_store$_originals = t5;
        _._extension_store$_mode = t6;
      },
      ExtensionStore_extensionsWhereTarget_closure0: function ExtensionStore_extensionsWhereTarget_closure0() {},
      ExtensionStore__registerSelector_closure0: function ExtensionStore__registerSelector_closure0() {},
      ExtensionStore_addExtension_closure2: function ExtensionStore_addExtension_closure2() {},
      ExtensionStore_addExtension_closure3: function ExtensionStore_addExtension_closure3() {},
      ExtensionStore_addExtension_closure4: function ExtensionStore_addExtension_closure4(
        t0
      ) {
        this.complex = t0;
      },
      ExtensionStore__extendExistingExtensions_closure1: function ExtensionStore__extendExistingExtensions_closure1() {},
      ExtensionStore__extendExistingExtensions_closure2: function ExtensionStore__extendExistingExtensions_closure2() {},
      ExtensionStore_addExtensions_closure1: function ExtensionStore_addExtensions_closure1(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      ExtensionStore_addExtensions__closure4: function ExtensionStore_addExtensions__closure4(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _._box_0 = t0;
        _.existingSources = t1;
        _.extensionsForTarget = t2;
        _.selectorsForTarget = t3;
        _.target = t4;
      },
      ExtensionStore_addExtensions___closure0: function ExtensionStore_addExtensions___closure0() {},
      ExtensionStore_addExtensions_closure2: function ExtensionStore_addExtensions_closure2(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.$this = t1;
      },
      ExtensionStore_addExtensions__closure2: function ExtensionStore_addExtensions__closure2(
        t0,
        t1
      ) {
        this.$this = t0;
        this.newExtensions = t1;
      },
      ExtensionStore_addExtensions__closure3: function ExtensionStore_addExtensions__closure3(
        t0,
        t1
      ) {
        this.$this = t0;
        this.newExtensions = t1;
      },
      ExtensionStore__extendComplex_closure1: function ExtensionStore__extendComplex_closure1(
        t0
      ) {
        this.complex = t0;
      },
      ExtensionStore__extendComplex_closure2: function ExtensionStore__extendComplex_closure2(
        t0,
        t1,
        t2
      ) {
        this._box_0 = t0;
        this.$this = t1;
        this.complex = t2;
      },
      ExtensionStore__extendComplex__closure1: function ExtensionStore__extendComplex__closure1() {},
      ExtensionStore__extendComplex__closure2: function ExtensionStore__extendComplex__closure2(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.complex = t2;
        _.path = t3;
      },
      ExtensionStore__extendComplex___closure0: function ExtensionStore__extendComplex___closure0() {},
      ExtensionStore__extendCompound_closure4: function ExtensionStore__extendCompound_closure4(
        t0
      ) {
        this.mediaQueryContext = t0;
      },
      ExtensionStore__extendCompound_closure5: function ExtensionStore__extendCompound_closure5(
        t0,
        t1
      ) {
        this._box_1 = t0;
        this.mediaQueryContext = t1;
      },
      ExtensionStore__extendCompound__closure1: function ExtensionStore__extendCompound__closure1() {},
      ExtensionStore__extendCompound__closure2: function ExtensionStore__extendCompound__closure2(
        t0
      ) {
        this._box_0 = t0;
      },
      ExtensionStore__extendCompound_closure6: function ExtensionStore__extendCompound_closure6() {},
      ExtensionStore__extendCompound_closure7: function ExtensionStore__extendCompound_closure7() {},
      ExtensionStore__extendCompound_closure8: function ExtensionStore__extendCompound_closure8(
        t0
      ) {
        this.original = t0;
      },
      ExtensionStore__extendSimple_withoutPseudo0: function ExtensionStore__extendSimple_withoutPseudo0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.extensions = t1;
        _.targetsUsed = t2;
        _.simpleSpan = t3;
      },
      ExtensionStore__extendSimple_closure1: function ExtensionStore__extendSimple_closure1(
        t0,
        t1,
        t2
      ) {
        this.$this = t0;
        this.withoutPseudo = t1;
        this.simpleSpan = t2;
      },
      ExtensionStore__extendSimple_closure2: function ExtensionStore__extendSimple_closure2() {},
      ExtensionStore__extendPseudo_closure4: function ExtensionStore__extendPseudo_closure4() {},
      ExtensionStore__extendPseudo_closure5: function ExtensionStore__extendPseudo_closure5() {},
      ExtensionStore__extendPseudo_closure6: function ExtensionStore__extendPseudo_closure6() {},
      ExtensionStore__extendPseudo_closure7: function ExtensionStore__extendPseudo_closure7(
        t0
      ) {
        this.pseudo = t0;
      },
      ExtensionStore__extendPseudo_closure8: function ExtensionStore__extendPseudo_closure8(
        t0
      ) {
        this.pseudo = t0;
      },
      ExtensionStore__trim_closure1: function ExtensionStore__trim_closure1(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.complex1 = t1;
      },
      ExtensionStore__trim_closure2: function ExtensionStore__trim_closure2(
        t0,
        t1
      ) {
        this._box_0 = t0;
        this.complex1 = t1;
      },
      ExtensionStore_clone_closure0: function ExtensionStore_clone_closure0(
        t0,
        t1,
        t2,
        t3
      ) {
        var _ = this;
        _.$this = t0;
        _.newSelectors = t1;
        _.oldToNewSelectors = t2;
        _.newMediaContexts = t3;
      },
      Interpolation$0(contents, span) {
        var t1 = new X.Interpolation0(
          P.List_List$unmodifiable(contents, type$.Object),
          span
        );
        t1.Interpolation$20(contents, span);
        return t1;
      },
      Interpolation0: function Interpolation0(t0, t1) {
        this.contents = t0;
        this.span = t1;
      },
      Interpolation_toString_closure0: function Interpolation_toString_closure0() {},
      SupportsInterpolation0: function SupportsInterpolation0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      ModifiableCssStyleRule$0(selector, span, originalSelector) {
        var t1 = H._setArrayType([], type$.JSArray_ModifiableCssNode_2);
        return new X.ModifiableCssStyleRule0(
          selector,
          originalSelector,
          span,
          new P.UnmodifiableListView(
            t1,
            type$.UnmodifiableListView_ModifiableCssNode_2
          ),
          t1
        );
      },
      ModifiableCssStyleRule0: function ModifiableCssStyleRule0(
        t0,
        t1,
        t2,
        t3,
        t4
      ) {
        var _ = this;
        _.selector = t0;
        _.originalSelector = t1;
        _.span = t2;
        _.children = t3;
        _._node2$_children = t4;
        _._node2$_indexInParent = _._node2$_parent = null;
        _.isGroupEnd = false;
      },
      StyleRule$0(selector, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new X.StyleRule0(selector, span, t1, t2);
      },
      StyleRule0: function StyleRule0(t0, t1, t2, t3) {
        var _ = this;
        _.selector = t0;
        _.span = t1;
        _.children = t2;
        _.hasDeclarations = t3;
      },
      UnaryOperationExpression0: function UnaryOperationExpression0(
        t0,
        t1,
        t2
      ) {
        this.operator = t0;
        this.operand = t1;
        this.span = t2;
      },
      UnaryOperator0: function UnaryOperator0(t0, t1) {
        this.name = t0;
        this.operator = t1;
      },
      NullableExtension_andThen(_this, fn) {
        return _this == null ? null : fn.call$1(_this);
      },
      SetExtension_removeNull(_this, $T) {
        _this.remove$1(0, null);
        return P.Set_castFrom(
          _this,
          _this.get$_newSimilarSet(),
          H._instanceType(_this)._precomputed1,
          $T
        );
      },
      NullableExtension_andThen0(_this, fn) {
        return _this == null ? null : fn.call$1(_this);
      },
    },
    Y = {
      Modules: function Modules() {},
      Module1: function Module1() {},
      Net: function Net() {},
      Socket: function Socket() {},
      NetAddress: function NetAddress() {},
      NetServer: function NetServer() {},
      ContentBlock$($arguments, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure());
        return new Y.ContentBlock('@content', $arguments, span, t1, t2);
      },
      ContentBlock: function ContentBlock(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      WarnRule: function WarnRule(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      SupportsAnything: function SupportsAnything(t0, t1) {
        this.contents = t0;
        this.span = t1;
      },
      unifyComplex(complexes) {
        var t2,
          unifiedBase,
          base,
          t3,
          t4,
          _i,
          complexesWithoutBases,
          t1 = J.getInterceptor$asx(complexes);
        if (t1.get$length(complexes) === 1) return complexes;
        for (
          t2 = t1.get$iterator(complexes), unifiedBase = null;
          t2.moveNext$0();

        ) {
          base = J.get$last$ax(t2.get$current());
          if (!(base instanceof X.CompoundSelector)) return null;
          if (unifiedBase == null) unifiedBase = base.components;
          else
            for (t3 = base.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
              unifiedBase = t3[_i].unify$1(unifiedBase);
              if (unifiedBase == null) return null;
            }
        }
        t1 = t1.map$1$1(
          complexes,
          new Y.unifyComplex_closure(),
          type$.List_ComplexSelectorComponent
        );
        complexesWithoutBases = P.List_List$of(
          t1,
          true,
          t1.$ti._eval$1('ListIterable.E')
        );
        t1 = C.JSArray_methods.get$last(complexesWithoutBases);
        unifiedBase.toString;
        J.add$1$ax(t1, X.CompoundSelector$(unifiedBase));
        return Y.weave(complexesWithoutBases);
      },
      unifyCompound(compound1, compound2) {
        var t1, result, _i, unified;
        for (
          t1 = compound1.length, result = compound2, _i = 0;
          _i < t1;
          ++_i, result = unified
        ) {
          unified = compound1[_i].unify$1(result);
          if (unified == null) return null;
        }
        return X.CompoundSelector$(result);
      },
      unifyUniversalAndElement(selector1, selector2) {
        var namespace1,
          name1,
          t1,
          namespace2,
          name2,
          namespace,
          $name,
          _null = null,
          _s45_ = string$.must_b;
        if (selector1 instanceof N.UniversalSelector) {
          namespace1 = selector1.namespace;
          name1 = _null;
        } else if (selector1 instanceof F.TypeSelector) {
          t1 = selector1.name;
          namespace1 = t1.namespace;
          name1 = t1.name;
        } else
          throw H.wrapException(
            P.ArgumentError$value(selector1, 'selector1', _s45_)
          );
        if (selector2 instanceof N.UniversalSelector) {
          namespace2 = selector2.namespace;
          name2 = _null;
        } else if (selector2 instanceof F.TypeSelector) {
          t1 = selector2.name;
          namespace2 = t1.namespace;
          name2 = t1.name;
        } else
          throw H.wrapException(
            P.ArgumentError$value(selector2, 'selector2', _s45_)
          );
        if (namespace1 == namespace2 || namespace2 === '*')
          namespace = namespace1;
        else {
          if (namespace1 !== '*') return _null;
          namespace = namespace2;
        }
        if (name1 == name2 || name2 == null) $name = name1;
        else {
          if (!(name1 == null || name1 === '*')) return _null;
          $name = name2;
        }
        return $name == null
          ? new N.UniversalSelector(namespace)
          : new F.TypeSelector(new D.QualifiedName($name, namespace));
      },
      weave(complexes) {
        var t2,
          t3,
          t4,
          t5,
          target,
          _i,
          parents,
          newPrefixes,
          parentPrefixes,
          t6,
          t1 = type$.JSArray_List_ComplexSelectorComponent,
          prefixes = H._setArrayType(
            [J.toList$0$ax(C.JSArray_methods.get$first(complexes))],
            t1
          );
        for (
          t2 = H.SubListIterable$(
            complexes,
            1,
            null,
            H._arrayInstanceType(complexes)._precomputed1
          ),
            t2 = new H.ListIterator(t2, t2.get$length(t2)),
            t3 = H._instanceType(t2)._precomputed1;
          t2.moveNext$0();

        ) {
          t4 = t3._as(t2.__internal$_current);
          t5 = J.getInterceptor$asx(t4);
          if (t5.get$isEmpty(t4)) continue;
          target = t5.get$last(t4);
          if (t5.get$length(t4) === 1) {
            for (
              t4 = prefixes.length, _i = 0;
              _i < prefixes.length;
              prefixes.length === t4 ||
                (0, H.throwConcurrentModificationError)(prefixes),
                ++_i
            )
              J.add$1$ax(prefixes[_i], target);
            continue;
          }
          parents = t5.take$1(t4, t5.get$length(t4) - 1).toList$0(0);
          newPrefixes = H._setArrayType([], t1);
          for (
            t4 = prefixes.length, _i = 0;
            _i < prefixes.length;
            prefixes.length === t4 ||
              (0, H.throwConcurrentModificationError)(prefixes),
              ++_i
          ) {
            parentPrefixes = Y._weaveParents(prefixes[_i], parents);
            if (parentPrefixes == null) continue;
            for (
              t5 = parentPrefixes.get$iterator(parentPrefixes);
              t5.moveNext$0();

            ) {
              t6 = t5.get$current();
              J.add$1$ax(t6, target);
              newPrefixes.push(t6);
            }
          }
          prefixes = newPrefixes;
        }
        return prefixes;
      },
      _weaveParents(parents1, parents2) {
        var finalCombinators,
          root1,
          root2,
          root,
          groups1,
          groups2,
          lcs,
          t2,
          choices,
          t3,
          _i,
          group,
          t4,
          t5,
          _null = null,
          t1 = type$.ComplexSelectorComponent,
          queue1 = P.ListQueue_ListQueue$of(parents1, t1),
          queue2 = P.ListQueue_ListQueue$of(parents2, t1),
          initialCombinators = Y._mergeInitialCombinators(queue1, queue2);
        if (initialCombinators == null) return _null;
        finalCombinators = Y._mergeFinalCombinators(queue1, queue2, _null);
        if (finalCombinators == null) return _null;
        root1 = Y._firstIfRoot(queue1);
        root2 = Y._firstIfRoot(queue2);
        t1 = root1 != null;
        if (t1 && root2 != null) {
          root = Y.unifyCompound(root1.components, root2.components);
          if (root == null) return _null;
          queue1.addFirst$1(root);
          queue2.addFirst$1(root);
        } else if (t1) queue2.addFirst$1(root1);
        else if (root2 != null) queue1.addFirst$1(root2);
        groups1 = Y._groupSelectors(queue1);
        groups2 = Y._groupSelectors(queue2);
        t1 = type$.List_ComplexSelectorComponent;
        lcs = B.longestCommonSubsequence(
          groups2,
          groups1,
          new Y._weaveParents_closure(),
          t1
        );
        t2 = type$.JSArray_Iterable_ComplexSelectorComponent;
        choices = H._setArrayType(
          [H._setArrayType([initialCombinators], t2)],
          type$.JSArray_List_Iterable_ComplexSelectorComponent
        );
        for (
          t3 = lcs.length, _i = 0;
          _i < lcs.length;
          lcs.length === t3 || (0, H.throwConcurrentModificationError)(lcs),
            ++_i
        ) {
          group = lcs[_i];
          t4 = Y._chunks(
            groups1,
            groups2,
            new Y._weaveParents_closure0(group),
            t1
          );
          t5 = H._arrayInstanceType(t4)._eval$1(
            'MappedListIterable<1,Iterable<ComplexSelectorComponent>>'
          );
          choices.push(
            P.List_List$of(
              new H.MappedListIterable(t4, new Y._weaveParents_closure1(), t5),
              true,
              t5._eval$1('ListIterable.E')
            )
          );
          choices.push(H._setArrayType([group], t2));
          groups1.removeFirst$0();
          groups2.removeFirst$0();
        }
        t2 = Y._chunks(groups1, groups2, new Y._weaveParents_closure2(), t1);
        t3 = H._arrayInstanceType(t2)._eval$1(
          'MappedListIterable<1,Iterable<ComplexSelectorComponent>>'
        );
        choices.push(
          P.List_List$of(
            new H.MappedListIterable(t2, new Y._weaveParents_closure3(), t3),
            true,
            t3._eval$1('ListIterable.E')
          )
        );
        C.JSArray_methods.addAll$1(choices, finalCombinators);
        return J.map$1$1$ax(
          Y.paths(
            new H.WhereIterable(
              choices,
              new Y._weaveParents_closure4(),
              type$.WhereIterable_List_Iterable_ComplexSelectorComponent
            ),
            type$.Iterable_ComplexSelectorComponent
          ),
          new Y._weaveParents_closure5(),
          t1
        );
      },
      _firstIfRoot(queue) {
        var first;
        if (queue._collection$_head === queue._collection$_tail) return null;
        first = queue.get$first(queue);
        if (first instanceof X.CompoundSelector) {
          if (!Y._hasRoot(first)) return null;
          queue.removeFirst$0();
          return first;
        } else return null;
      },
      _mergeInitialCombinators(components1, components2) {
        var t4,
          combinators2,
          lcs,
          t1 = type$.JSArray_Combinator,
          combinators1 = H._setArrayType([], t1),
          t2 = type$.Combinator,
          t3 = components1.$ti._precomputed1;
        while (true) {
          if (!components1.get$isEmpty(components1)) {
            t4 = components1._collection$_head;
            if (t4 === components1._collection$_tail)
              H.throwExpression(H.IterableElementError_noElement());
            t4 =
              t3._as(components1._collection$_table[t4]) instanceof
              S.Combinator;
          } else t4 = false;
          if (!t4) break;
          combinators1.push(t2._as(components1.removeFirst$0()));
        }
        combinators2 = H._setArrayType([], t1);
        t1 = components2.$ti._precomputed1;
        while (true) {
          if (!components2.get$isEmpty(components2)) {
            t3 = components2._collection$_head;
            if (t3 === components2._collection$_tail)
              H.throwExpression(H.IterableElementError_noElement());
            t3 =
              t1._as(components2._collection$_table[t3]) instanceof
              S.Combinator;
          } else t3 = false;
          if (!t3) break;
          combinators2.push(t2._as(components2.removeFirst$0()));
        }
        lcs = B.longestCommonSubsequence(combinators1, combinators2, null, t2);
        if (C.C_ListEquality.equals$2(0, lcs, combinators1))
          return combinators2;
        if (C.C_ListEquality.equals$2(0, lcs, combinators2))
          return combinators1;
        return null;
      },
      _mergeFinalCombinators(components1, components2, result) {
        var t1,
          combinators1,
          t2,
          combinators2,
          lcs,
          combinator1,
          combinator2,
          compound1,
          compound2,
          choices,
          unified,
          followingSiblingSelector,
          nextSiblingSelector,
          _null = null;
        if (result == null)
          result = Q.QueueList$(
            _null,
            type$.List_List_ComplexSelectorComponent
          );
        if (
          components1._collection$_head === components1._collection$_tail ||
          !(components1.get$last(components1) instanceof S.Combinator)
        )
          t1 =
            components2._collection$_head === components2._collection$_tail ||
            !(components2.get$last(components2) instanceof S.Combinator);
        else t1 = false;
        if (t1) return result;
        t1 = type$.JSArray_Combinator;
        combinators1 = H._setArrayType([], t1);
        t2 = type$.Combinator;
        while (true) {
          if (
            !(
              !components1.get$isEmpty(components1) &&
              components1.get$last(components1) instanceof S.Combinator
            )
          )
            break;
          combinators1.push(t2._as(components1.removeLast$0(0)));
        }
        combinators2 = H._setArrayType([], t1);
        while (true) {
          if (
            !(
              !components2.get$isEmpty(components2) &&
              components2.get$last(components2) instanceof S.Combinator
            )
          )
            break;
          combinators2.push(t2._as(components2.removeLast$0(0)));
        }
        t1 = combinators1.length;
        if (t1 > 1 || combinators2.length > 1) {
          lcs = B.longestCommonSubsequence(
            combinators1,
            combinators2,
            _null,
            t2
          );
          if (C.C_ListEquality.equals$2(0, lcs, combinators1))
            result.addFirst$1(
              H._setArrayType(
                [
                  P.List_List$of(
                    new H.ReversedListIterable(
                      combinators2,
                      type$.ReversedListIterable_Combinator
                    ),
                    true,
                    type$.ComplexSelectorComponent
                  ),
                ],
                type$.JSArray_List_ComplexSelectorComponent
              )
            );
          else if (C.C_ListEquality.equals$2(0, lcs, combinators2))
            result.addFirst$1(
              H._setArrayType(
                [
                  P.List_List$of(
                    new H.ReversedListIterable(
                      combinators1,
                      type$.ReversedListIterable_Combinator
                    ),
                    true,
                    type$.ComplexSelectorComponent
                  ),
                ],
                type$.JSArray_List_ComplexSelectorComponent
              )
            );
          else return _null;
          return result;
        }
        combinator1 =
          t1 === 0 ? _null : C.JSArray_methods.get$first(combinators1);
        combinator2 =
          combinators2.length === 0
            ? _null
            : C.JSArray_methods.get$first(combinators2);
        t1 = combinator1 != null;
        if (t1 && combinator2 != null) {
          t1 = type$.CompoundSelector;
          compound1 = t1._as(components1.removeLast$0(0));
          compound2 = t1._as(components2.removeLast$0(0));
          t1 = combinator1 === C.Combinator_CzM;
          if (t1 && combinator2 === C.Combinator_CzM)
            if (Y.compoundIsSuperselector(compound1, compound2, _null))
              result.addFirst$1(
                H._setArrayType(
                  [
                    H._setArrayType(
                      [compound2, C.Combinator_CzM],
                      type$.JSArray_ComplexSelectorComponent
                    ),
                  ],
                  type$.JSArray_List_ComplexSelectorComponent
                )
              );
            else {
              t1 = type$.JSArray_ComplexSelectorComponent;
              t2 = type$.JSArray_List_ComplexSelectorComponent;
              if (Y.compoundIsSuperselector(compound2, compound1, _null))
                result.addFirst$1(
                  H._setArrayType(
                    [H._setArrayType([compound1, C.Combinator_CzM], t1)],
                    t2
                  )
                );
              else {
                choices = H._setArrayType(
                  [
                    H._setArrayType(
                      [
                        compound1,
                        C.Combinator_CzM,
                        compound2,
                        C.Combinator_CzM,
                      ],
                      t1
                    ),
                    H._setArrayType(
                      [
                        compound2,
                        C.Combinator_CzM,
                        compound1,
                        C.Combinator_CzM,
                      ],
                      t1
                    ),
                  ],
                  t2
                );
                unified = Y.unifyCompound(
                  compound1.components,
                  compound2.components
                );
                if (unified != null)
                  choices.push(
                    H._setArrayType([unified, C.Combinator_CzM], t1)
                  );
                result.addFirst$1(choices);
              }
            }
          else {
            if (!(t1 && combinator2 === C.Combinator_uzg))
              t2 =
                combinator1 === C.Combinator_uzg &&
                combinator2 === C.Combinator_CzM;
            else t2 = true;
            if (t2) {
              followingSiblingSelector = t1 ? compound1 : compound2;
              nextSiblingSelector = t1 ? compound2 : compound1;
              t1 = type$.JSArray_ComplexSelectorComponent;
              t2 = type$.JSArray_List_ComplexSelectorComponent;
              if (
                Y.compoundIsSuperselector(
                  followingSiblingSelector,
                  nextSiblingSelector,
                  _null
                )
              )
                result.addFirst$1(
                  H._setArrayType(
                    [
                      H._setArrayType(
                        [nextSiblingSelector, C.Combinator_uzg],
                        t1
                      ),
                    ],
                    t2
                  )
                );
              else {
                unified = Y.unifyCompound(
                  compound1.components,
                  compound2.components
                );
                t2 = H._setArrayType(
                  [
                    H._setArrayType(
                      [
                        followingSiblingSelector,
                        C.Combinator_CzM,
                        nextSiblingSelector,
                        C.Combinator_uzg,
                      ],
                      t1
                    ),
                  ],
                  t2
                );
                if (unified != null)
                  t2.push(H._setArrayType([unified, C.Combinator_uzg], t1));
                result.addFirst$1(t2);
              }
            } else {
              if (combinator1 === C.Combinator_sgq)
                t2 =
                  combinator2 === C.Combinator_uzg ||
                  combinator2 === C.Combinator_CzM;
              else t2 = false;
              if (t2) {
                result.addFirst$1(
                  H._setArrayType(
                    [
                      H._setArrayType(
                        [compound2, combinator2],
                        type$.JSArray_ComplexSelectorComponent
                      ),
                    ],
                    type$.JSArray_List_ComplexSelectorComponent
                  )
                );
                components1._add$1(compound1);
                components1._add$1(C.Combinator_sgq);
              } else {
                if (combinator2 === C.Combinator_sgq)
                  t1 = combinator1 === C.Combinator_uzg || t1;
                else t1 = false;
                if (t1) {
                  result.addFirst$1(
                    H._setArrayType(
                      [
                        H._setArrayType(
                          [compound1, combinator1],
                          type$.JSArray_ComplexSelectorComponent
                        ),
                      ],
                      type$.JSArray_List_ComplexSelectorComponent
                    )
                  );
                  components2._add$1(compound2);
                  components2._add$1(C.Combinator_sgq);
                } else if (combinator1 === combinator2) {
                  unified = Y.unifyCompound(
                    compound1.components,
                    compound2.components
                  );
                  if (unified == null) return _null;
                  result.addFirst$1(
                    H._setArrayType(
                      [
                        H._setArrayType(
                          [unified, combinator1],
                          type$.JSArray_ComplexSelectorComponent
                        ),
                      ],
                      type$.JSArray_List_ComplexSelectorComponent
                    )
                  );
                } else return _null;
              }
            }
          }
          return Y._mergeFinalCombinators(components1, components2, result);
        } else if (t1) {
          if (combinator1 === C.Combinator_sgq)
            if (!components2.get$isEmpty(components2)) {
              t1 = type$.CompoundSelector;
              t1 = Y.compoundIsSuperselector(
                t1._as(components2.get$last(components2)),
                t1._as(components1.get$last(components1)),
                _null
              );
            } else t1 = false;
          else t1 = false;
          if (t1) components2.removeLast$0(0);
          result.addFirst$1(
            H._setArrayType(
              [
                H._setArrayType(
                  [components1.removeLast$0(0), combinator1],
                  type$.JSArray_ComplexSelectorComponent
                ),
              ],
              type$.JSArray_List_ComplexSelectorComponent
            )
          );
          return Y._mergeFinalCombinators(components1, components2, result);
        } else {
          if (combinator2 === C.Combinator_sgq)
            if (!components1.get$isEmpty(components1)) {
              t1 = type$.CompoundSelector;
              t1 = Y.compoundIsSuperselector(
                t1._as(components1.get$last(components1)),
                t1._as(components2.get$last(components2)),
                _null
              );
            } else t1 = false;
          else t1 = false;
          if (t1) components1.removeLast$0(0);
          t1 = components2.removeLast$0(0);
          combinator2.toString;
          result.addFirst$1(
            H._setArrayType(
              [
                H._setArrayType(
                  [t1, combinator2],
                  type$.JSArray_ComplexSelectorComponent
                ),
              ],
              type$.JSArray_List_ComplexSelectorComponent
            )
          );
          return Y._mergeFinalCombinators(components1, components2, result);
        }
      },
      _mustUnify(complex1, complex2) {
        var t2,
          t3,
          t4,
          t1 = P.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
        for (t2 = J.get$iterator$ax(complex1); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          if (t3 instanceof X.CompoundSelector)
            for (
              t3 = C.JSArray_methods.get$iterator(t3.components),
                t4 = new H.WhereIterator(t3, Y.functions___isUnique$closure());
              t4.moveNext$0();

            )
              t1.add$1(0, t3.get$current());
        }
        if (t1._collection$_length === 0) return false;
        return J.any$1$ax(complex2, new Y._mustUnify_closure(t1));
      },
      _isUnique(simple) {
        var t1;
        if (!(simple instanceof N.IDSelector))
          t1 = simple instanceof D.PseudoSelector && !simple.isClass;
        else t1 = true;
        return t1;
      },
      _chunks(queue1, queue2, done, $T) {
        var chunk2,
          t2,
          t1 = $T._eval$1('JSArray<0>'),
          chunk1 = H._setArrayType([], t1);
        for (; !done.call$1(queue1); ) chunk1.push(queue1.removeFirst$0());
        chunk2 = H._setArrayType([], t1);
        for (; !done.call$1(queue2); ) chunk2.push(queue2.removeFirst$0());
        t1 = chunk1.length === 0;
        if (t1 && chunk2.length === 0)
          return H._setArrayType([], $T._eval$1('JSArray<List<0>>'));
        if (t1)
          return H._setArrayType([chunk2], $T._eval$1('JSArray<List<0>>'));
        if (chunk2.length === 0)
          return H._setArrayType([chunk1], $T._eval$1('JSArray<List<0>>'));
        t1 = P.List_List$of(chunk1, true, $T);
        C.JSArray_methods.addAll$1(t1, chunk2);
        t2 = P.List_List$of(chunk2, true, $T);
        C.JSArray_methods.addAll$1(t2, chunk1);
        return H._setArrayType([t1, t2], $T._eval$1('JSArray<List<0>>'));
      },
      paths(choices, $T) {
        return J.fold$2$ax(
          choices,
          H._setArrayType(
            [H._setArrayType([], $T._eval$1('JSArray<0>'))],
            $T._eval$1('JSArray<List<0>>')
          ),
          new Y.paths_closure($T)
        );
      },
      _groupSelectors(complex) {
        var t1,
          t2,
          group,
          t3,
          t4,
          groups = Q.QueueList$(null, type$.List_ComplexSelectorComponent),
          iterator = P._ListQueueIterator$(complex);
        if (!iterator.moveNext$0()) return groups;
        t1 = H._instanceType(iterator)._precomputed1;
        t2 = type$.JSArray_ComplexSelectorComponent;
        group = H._setArrayType([t1._as(iterator._collection$_current)], t2);
        groups._queue_list$_add$1(group);
        for (; iterator.moveNext$0(); ) {
          t3 =
            C.JSArray_methods.get$last(group) instanceof S.Combinator ||
            t1._as(iterator._collection$_current) instanceof S.Combinator;
          t4 = iterator._collection$_current;
          if (t3) group.push(t1._as(t4));
          else {
            group = H._setArrayType([t1._as(t4)], t2);
            groups._queue_list$_add$1(group);
          }
        }
        return groups;
      },
      _hasRoot(compound) {
        return C.JSArray_methods.any$1(
          compound.components,
          new Y._hasRoot_closure()
        );
      },
      listIsSuperselector(list1, list2) {
        return C.JSArray_methods.every$1(
          list2,
          new Y.listIsSuperselector_closure(list1)
        );
      },
      complexIsParentSuperselector(complex1, complex2) {
        var t2,
          base,
          t1 = J.getInterceptor$ax(complex1);
        if (t1.get$first(complex1) instanceof S.Combinator) return false;
        t2 = J.getInterceptor$ax(complex2);
        if (t2.get$first(complex2) instanceof S.Combinator) return false;
        if (t1.get$length(complex1) > t2.get$length(complex2)) return false;
        base = X.CompoundSelector$(
          H._setArrayType(
            [new N.PlaceholderSelector('<temp>')],
            type$.JSArray_SimpleSelector
          )
        );
        t1 = type$.ComplexSelectorComponent;
        t2 = P.List_List$of(complex1, true, t1);
        t2.push(base);
        t1 = P.List_List$of(complex2, true, t1);
        t1.push(base);
        return Y.complexIsSuperselector(t2, t1);
      },
      complexIsSuperselector(complex1, complex2) {
        var t1,
          t2,
          t3,
          i1,
          i2,
          remaining1,
          remaining2,
          t4,
          t5,
          t6,
          afterSuperselector,
          afterSuperselector0,
          compound2,
          i10,
          combinator1,
          combinator2;
        if (C.JSArray_methods.get$last(complex1) instanceof S.Combinator)
          return false;
        if (C.JSArray_methods.get$last(complex2) instanceof S.Combinator)
          return false;
        for (
          t1 = H._arrayInstanceType(complex2),
            t2 = t1._precomputed1,
            t1 = t1._eval$1('SubListIterable<1>'),
            t3 = type$.CompoundSelector,
            i1 = 0,
            i2 = 0;
          true;

        ) {
          remaining1 = complex1.length - i1;
          remaining2 = complex2.length - i2;
          if (remaining1 === 0 || remaining2 === 0) return false;
          if (remaining1 > remaining2) return false;
          t4 = complex1[i1];
          if (t4 instanceof S.Combinator) return false;
          if (complex2[i2] instanceof S.Combinator) return false;
          t3._as(t4);
          if (remaining1 === 1) {
            t5 = t3._as(C.JSArray_methods.get$last(complex2));
            t6 = complex2.length - 1;
            t3 = new H.SubListIterable(complex2, 0, t6, t1);
            t3.SubListIterable$3(complex2, 0, t6, t2);
            return Y.compoundIsSuperselector(t4, t5, t3.skip$1(0, i2));
          }
          afterSuperselector = i2 + 1;
          for (
            afterSuperselector0 = afterSuperselector;
            afterSuperselector0 < complex2.length;
            ++afterSuperselector0
          ) {
            t5 = afterSuperselector0 - 1;
            compound2 = complex2[t5];
            if (compound2 instanceof X.CompoundSelector) {
              t6 = new H.SubListIterable(complex2, 0, t5, t1);
              t6.SubListIterable$3(complex2, 0, t5, t2);
              if (
                Y.compoundIsSuperselector(
                  t4,
                  compound2,
                  t6.skip$1(0, afterSuperselector)
                )
              )
                break;
            }
          }
          if (afterSuperselector0 === complex2.length) return false;
          i10 = i1 + 1;
          combinator1 = complex1[i10];
          combinator2 = complex2[afterSuperselector0];
          if (combinator1 instanceof S.Combinator) {
            if (!(combinator2 instanceof S.Combinator)) return false;
            if (combinator1 === C.Combinator_CzM) {
              if (combinator2 === C.Combinator_sgq) return false;
            } else if (combinator2 !== combinator1) return false;
            if (remaining1 === 3 && remaining2 > 3) return false;
            i1 += 2;
            i2 = afterSuperselector0 + 1;
          } else {
            if (combinator2 instanceof S.Combinator) {
              if (combinator2 !== C.Combinator_sgq) return false;
              i2 = afterSuperselector0 + 1;
            } else i2 = afterSuperselector0;
            i1 = i10;
          }
        }
      },
      compoundIsSuperselector(compound1, compound2, parents) {
        var t1, t2, _i, simple1, simple2;
        for (t1 = compound1.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          simple1 = t1[_i];
          if (simple1 instanceof D.PseudoSelector && simple1.selector != null) {
            if (!Y._selectorPseudoIsSuperselector(simple1, compound2, parents))
              return false;
          } else if (!Y._simpleIsSuperselectorOfCompound(simple1, compound2))
            return false;
        }
        for (t1 = compound2.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          simple2 = t1[_i];
          if (
            simple2 instanceof D.PseudoSelector &&
            !simple2.isClass &&
            simple2.selector == null &&
            !Y._simpleIsSuperselectorOfCompound(simple2, compound1)
          )
            return false;
        }
        return true;
      },
      _simpleIsSuperselectorOfCompound(simple, compound) {
        return C.JSArray_methods.any$1(
          compound.components,
          new Y._simpleIsSuperselectorOfCompound_closure(simple)
        );
      },
      _selectorPseudoIsSuperselector(pseudo1, compound2, parents) {
        var selector1_ = pseudo1.selector;
        if (selector1_ == null)
          throw H.wrapException(
            P.ArgumentError$(
              'Selector ' +
                pseudo1.toString$0(0) +
                ' must have a selector argument.',
              null
            )
          );
        switch (pseudo1.normalizedName) {
          case 'is':
          case 'matches':
          case 'any':
            return (
              Y._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(
                0,
                new Y._selectorPseudoIsSuperselector_closure(selector1_)
              ) ||
              C.JSArray_methods.any$1(
                selector1_.components,
                new Y._selectorPseudoIsSuperselector_closure0(
                  parents,
                  compound2
                )
              )
            );
          case 'has':
          case 'host':
          case 'host-context':
            return Y._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure1(selector1_)
            );
          case 'slotted':
            return Y._selectorPseudoArgs(compound2, pseudo1.name, false).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure2(selector1_)
            );
          case 'not':
            return C.JSArray_methods.every$1(
              selector1_.components,
              new Y._selectorPseudoIsSuperselector_closure3(compound2, pseudo1)
            );
          case 'current':
            return Y._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure4(selector1_)
            );
          case 'nth-child':
          case 'nth-last-child':
            return C.JSArray_methods.any$1(
              compound2.components,
              new Y._selectorPseudoIsSuperselector_closure5(pseudo1, selector1_)
            );
          default:
            throw H.wrapException('unreachable');
        }
      },
      _selectorPseudoArgs(compound, $name, isClass) {
        var t1 = type$.WhereTypeIterable_PseudoSelector;
        return A.IterableNullableExtension_whereNotNull(
          new H.MappedIterable(
            new H.WhereIterable(
              new H.WhereTypeIterable(compound.components, t1),
              new Y._selectorPseudoArgs_closure(isClass, $name),
              t1._eval$1('WhereIterable<Iterable.E>')
            ),
            new Y._selectorPseudoArgs_closure0(),
            t1._eval$1('MappedIterable<Iterable.E,SelectorList?>')
          ),
          type$.SelectorList
        );
      },
      unifyComplex_closure: function unifyComplex_closure() {},
      _weaveParents_closure: function _weaveParents_closure() {},
      _weaveParents_closure0: function _weaveParents_closure0(t0) {
        this.group = t0;
      },
      _weaveParents_closure1: function _weaveParents_closure1() {},
      _weaveParents__closure1: function _weaveParents__closure1() {},
      _weaveParents_closure2: function _weaveParents_closure2() {},
      _weaveParents_closure3: function _weaveParents_closure3() {},
      _weaveParents__closure0: function _weaveParents__closure0() {},
      _weaveParents_closure4: function _weaveParents_closure4() {},
      _weaveParents_closure5: function _weaveParents_closure5() {},
      _weaveParents__closure: function _weaveParents__closure() {},
      _mustUnify_closure: function _mustUnify_closure(t0) {
        this.uniqueSelectors = t0;
      },
      _mustUnify__closure: function _mustUnify__closure(t0) {
        this.uniqueSelectors = t0;
      },
      paths_closure: function paths_closure(t0) {
        this.T = t0;
      },
      paths__closure: function paths__closure(t0, t1) {
        this.paths = t0;
        this.T = t1;
      },
      paths___closure: function paths___closure(t0, t1) {
        this.option = t0;
        this.T = t1;
      },
      _hasRoot_closure: function _hasRoot_closure() {},
      listIsSuperselector_closure: function listIsSuperselector_closure(t0) {
        this.list1 = t0;
      },
      listIsSuperselector__closure: function listIsSuperselector__closure(t0) {
        this.complex1 = t0;
      },
      _simpleIsSuperselectorOfCompound_closure: function _simpleIsSuperselectorOfCompound_closure(
        t0
      ) {
        this.simple = t0;
      },
      _simpleIsSuperselectorOfCompound__closure: function _simpleIsSuperselectorOfCompound__closure(
        t0
      ) {
        this.simple = t0;
      },
      _selectorPseudoIsSuperselector_closure: function _selectorPseudoIsSuperselector_closure(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure0: function _selectorPseudoIsSuperselector_closure0(
        t0,
        t1
      ) {
        this.parents = t0;
        this.compound2 = t1;
      },
      _selectorPseudoIsSuperselector_closure1: function _selectorPseudoIsSuperselector_closure1(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure2: function _selectorPseudoIsSuperselector_closure2(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure3: function _selectorPseudoIsSuperselector_closure3(
        t0,
        t1
      ) {
        this.compound2 = t0;
        this.pseudo1 = t1;
      },
      _selectorPseudoIsSuperselector__closure: function _selectorPseudoIsSuperselector__closure(
        t0,
        t1
      ) {
        this.complex = t0;
        this.pseudo1 = t1;
      },
      _selectorPseudoIsSuperselector___closure: function _selectorPseudoIsSuperselector___closure(
        t0
      ) {
        this.simple2 = t0;
      },
      _selectorPseudoIsSuperselector___closure0: function _selectorPseudoIsSuperselector___closure0(
        t0
      ) {
        this.simple2 = t0;
      },
      _selectorPseudoIsSuperselector_closure4: function _selectorPseudoIsSuperselector_closure4(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure5: function _selectorPseudoIsSuperselector_closure5(
        t0,
        t1
      ) {
        this.pseudo1 = t0;
        this.selector1 = t1;
      },
      _selectorPseudoArgs_closure: function _selectorPseudoArgs_closure(
        t0,
        t1
      ) {
        this.isClass = t0;
        this.name = t1;
      },
      _selectorPseudoArgs_closure0: function _selectorPseudoArgs_closure0() {},
      currentCallableSpan() {
        var node = $.Zone__current.$index(0, C.Symbol__currentCallableNode);
        if (type$.AstNode._is(node)) return node.get$span();
        throw H.wrapException(P.StateError$(string$.curren));
      },
      globalFunctions_closure: function globalFunctions_closure() {},
      TerseLogger: function TerseLogger(t0, t1) {
        this._warningCounts = t0;
        this._inner = t1;
      },
      TerseLogger_summarize_closure: function TerseLogger_summarize_closure() {},
      TerseLogger_summarize_closure0: function TerseLogger_summarize_closure0() {},
      SourceFile$fromString(text, url) {
        var t1 = new H.CodeUnits(text),
          t2 = H._setArrayType([0], type$.JSArray_int),
          t3 =
            typeof url == 'string'
              ? P.Uri_parse(url)
              : type$.nullable_Uri._as(url);
        t2 = new Y.SourceFile(
          t3,
          t2,
          new Uint32Array(H._ensureNativeList(t1.toList$0(t1)))
        );
        t2.SourceFile$decoded$2$url(t1, url);
        return t2;
      },
      SourceFile$decoded(decodedChars, url) {
        var t1 = H._setArrayType([0], type$.JSArray_int),
          t2 =
            typeof url == 'string'
              ? P.Uri_parse(url)
              : type$.nullable_Uri._as(url);
        t1 = new Y.SourceFile(
          t2,
          t1,
          new Uint32Array(H._ensureNativeList(J.toList$0$ax(decodedChars)))
        );
        t1.SourceFile$decoded$2$url(decodedChars, url);
        return t1;
      },
      FileLocation$_(file, offset) {
        if (offset < 0)
          H.throwExpression(
            P.RangeError$('Offset may not be negative, was ' + offset + '.')
          );
        else if (offset > file._decodedChars.length)
          H.throwExpression(
            P.RangeError$(
              'Offset ' +
                offset +
                string$.x20must_ +
                file.get$length(file) +
                '.'
            )
          );
        return new Y.FileLocation(file, offset);
      },
      _FileSpan$(file, _start, _end) {
        if (_end < _start)
          H.throwExpression(
            P.ArgumentError$(
              'End ' + _end + ' must come after start ' + _start + '.',
              null
            )
          );
        else if (_end > file._decodedChars.length)
          H.throwExpression(
            P.RangeError$(
              'End ' + _end + string$.x20must_ + file.get$length(file) + '.'
            )
          );
        else if (_start < 0)
          H.throwExpression(
            P.RangeError$('Start may not be negative, was ' + _start + '.')
          );
        return new Y._FileSpan(file, _start, _end);
      },
      FileSpanExtension_subspan(_this, start, end) {
        var startOffset,
          t1 = _this._end,
          t2 = _this._file$_start,
          t3 = t1 - t2;
        P.RangeError_checkValidRange(start, end, t3);
        if (start === 0) t3 = end == null || end === t3;
        else t3 = false;
        if (t3) return _this;
        t3 = _this.file;
        startOffset = Y.FileLocation$_(t3, t2).offset;
        t1 = end == null ? Y.FileLocation$_(t3, t1).offset : startOffset + end;
        return t3.span$2(startOffset + start, t1);
      },
      SourceFile: function SourceFile(t0, t1, t2) {
        var _ = this;
        _.url = t0;
        _._lineStarts = t1;
        _._decodedChars = t2;
        _._cachedLine = null;
      },
      FileLocation: function FileLocation(t0, t1) {
        this.file = t0;
        this.offset = t1;
      },
      _FileSpan: function _FileSpan(t0, t1, t2) {
        this.file = t0;
        this._file$_start = t1;
        this._end = t2;
      },
      SourceSpanMixin: function SourceSpanMixin() {},
      Trace_Trace$from(trace) {
        if (type$.Trace._is(trace)) return trace;
        if (trace instanceof U.Chain) return trace.toTrace$0();
        return new T.LazyTrace(new Y.Trace_Trace$from_closure(trace));
      },
      Trace_Trace$parse(trace) {
        var error, t1, exception;
        try {
          if (trace.length === 0) {
            t1 = Y.Trace$(H._setArrayType([], type$.JSArray_Frame), null);
            return t1;
          }
          if (C.JSString_methods.contains$1(trace, $.$get$_v8Trace())) {
            t1 = Y.Trace$parseV8(trace);
            return t1;
          }
          if (C.JSString_methods.contains$1(trace, '\tat ')) {
            t1 = Y.Trace$parseJSCore(trace);
            return t1;
          }
          if (
            C.JSString_methods.contains$1(
              trace,
              $.$get$_firefoxSafariTrace()
            ) ||
            C.JSString_methods.contains$1(trace, $.$get$_firefoxEvalTrace())
          ) {
            t1 = Y.Trace$parseFirefox(trace);
            return t1;
          }
          if (C.JSString_methods.contains$1(trace, string$.x3d_____)) {
            t1 = U.Chain_Chain$parse(trace).toTrace$0();
            return t1;
          }
          if (C.JSString_methods.contains$1(trace, $.$get$_friendlyTrace())) {
            t1 = Y.Trace$parseFriendly(trace);
            return t1;
          }
          t1 = Y.Trace$parseVM(trace);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            error = t1;
            throw H.wrapException(
              P.FormatException$(
                J.get$message$x(error) + '\nStack trace:\n' + trace,
                null,
                null
              )
            );
          } else throw exception;
        }
      },
      Trace$parseVM(trace) {
        var t1 = P.List_List$unmodifiable(Y.Trace__parseVM(trace), type$.Frame);
        return new Y.Trace(t1, new P._StringStackTrace(trace));
      },
      Trace__parseVM(trace) {
        var $frames,
          t1 = C.JSString_methods.trim$0(trace),
          t2 = $.$get$vmChainGap(),
          t3 = type$.WhereIterable_String,
          lines = new H.WhereIterable(
            H._setArrayType(
              H.stringReplaceAllUnchecked(t1, t2, '').split('\n'),
              type$.JSArray_String
            ),
            new Y.Trace__parseVM_closure(),
            t3
          );
        if (!lines.get$iterator(lines).moveNext$0())
          return H._setArrayType([], type$.JSArray_Frame);
        t1 = H.TakeIterable_TakeIterable(
          lines,
          lines.get$length(lines) - 1,
          t3._eval$1('Iterable.E')
        );
        t1 = H.MappedIterable_MappedIterable(
          t1,
          new Y.Trace__parseVM_closure0(),
          H._instanceType(t1)._eval$1('Iterable.E'),
          type$.Frame
        );
        $frames = P.List_List$of(
          t1,
          true,
          H._instanceType(t1)._eval$1('Iterable.E')
        );
        if (!J.endsWith$1$s(lines.get$last(lines), '.da'))
          C.JSArray_methods.add$1(
            $frames,
            A.Frame_Frame$parseVM(lines.get$last(lines))
          );
        return $frames;
      },
      Trace$parseV8(trace) {
        var t1 = H.SubListIterable$(
            H._setArrayType(trace.split('\n'), type$.JSArray_String),
            1,
            null,
            type$.String
          ).super$Iterable$skipWhile(0, new Y.Trace$parseV8_closure()),
          t2 = type$.Frame;
        t2 = P.List_List$unmodifiable(
          H.MappedIterable_MappedIterable(
            t1,
            new Y.Trace$parseV8_closure0(),
            t1.$ti._eval$1('Iterable.E'),
            t2
          ),
          t2
        );
        return new Y.Trace(t2, new P._StringStackTrace(trace));
      },
      Trace$parseJSCore(trace) {
        var t1 = P.List_List$unmodifiable(
          new H.MappedIterable(
            new H.WhereIterable(
              H._setArrayType(trace.split('\n'), type$.JSArray_String),
              new Y.Trace$parseJSCore_closure(),
              type$.WhereIterable_String
            ),
            new Y.Trace$parseJSCore_closure0(),
            type$.MappedIterable_String_Frame
          ),
          type$.Frame
        );
        return new Y.Trace(t1, new P._StringStackTrace(trace));
      },
      Trace$parseFirefox(trace) {
        var t1 = P.List_List$unmodifiable(
          new H.MappedIterable(
            new H.WhereIterable(
              H._setArrayType(
                C.JSString_methods.trim$0(trace).split('\n'),
                type$.JSArray_String
              ),
              new Y.Trace$parseFirefox_closure(),
              type$.WhereIterable_String
            ),
            new Y.Trace$parseFirefox_closure0(),
            type$.MappedIterable_String_Frame
          ),
          type$.Frame
        );
        return new Y.Trace(t1, new P._StringStackTrace(trace));
      },
      Trace$parseFriendly(trace) {
        var t1 =
          trace.length === 0
            ? H._setArrayType([], type$.JSArray_Frame)
            : new H.MappedIterable(
                new H.WhereIterable(
                  H._setArrayType(
                    C.JSString_methods.trim$0(trace).split('\n'),
                    type$.JSArray_String
                  ),
                  new Y.Trace$parseFriendly_closure(),
                  type$.WhereIterable_String
                ),
                new Y.Trace$parseFriendly_closure0(),
                type$.MappedIterable_String_Frame
              );
        t1 = P.List_List$unmodifiable(t1, type$.Frame);
        return new Y.Trace(t1, new P._StringStackTrace(trace));
      },
      Trace$($frames, original) {
        var t1 = P.List_List$unmodifiable($frames, type$.Frame);
        return new Y.Trace(
          t1,
          new P._StringStackTrace(original == null ? '' : original)
        );
      },
      Trace: function Trace(t0, t1) {
        this.frames = t0;
        this.original = t1;
      },
      Trace_Trace$from_closure: function Trace_Trace$from_closure(t0) {
        this.trace = t0;
      },
      Trace__parseVM_closure: function Trace__parseVM_closure() {},
      Trace__parseVM_closure0: function Trace__parseVM_closure0() {},
      Trace$parseV8_closure: function Trace$parseV8_closure() {},
      Trace$parseV8_closure0: function Trace$parseV8_closure0() {},
      Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {},
      Trace$parseJSCore_closure0: function Trace$parseJSCore_closure0() {},
      Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {},
      Trace$parseFirefox_closure0: function Trace$parseFirefox_closure0() {},
      Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {},
      Trace$parseFriendly_closure0: function Trace$parseFriendly_closure0() {},
      Trace_terse_closure: function Trace_terse_closure() {},
      Trace_foldFrames_closure: function Trace_foldFrames_closure(t0) {
        this.oldPredicate = t0;
      },
      Trace_foldFrames_closure0: function Trace_foldFrames_closure0(t0) {
        this._box_0 = t0;
      },
      Trace_toString_closure0: function Trace_toString_closure0() {},
      Trace_toString_closure: function Trace_toString_closure(t0) {
        this.longest = t0;
      },
      SupportsAnything0: function SupportsAnything0(t0, t1) {
        this.contents = t0;
        this.span = t1;
      },
      ContentBlock$0($arguments, children, span) {
        var t1 = P.List_List$unmodifiable(children, type$.Statement_2),
          t2 = C.JSArray_methods.any$1(t1, new M.ParentStatement_closure0());
        return new Y.ContentBlock0('@content', $arguments, span, t1, t2);
      },
      ContentBlock0: function ContentBlock0(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.$arguments = t1;
        _.span = t2;
        _.children = t3;
        _.hasDeclarations = t4;
      },
      unifyComplex0(complexes) {
        var t2,
          unifiedBase,
          base,
          t3,
          t4,
          _i,
          complexesWithoutBases,
          t1 = J.getInterceptor$asx(complexes);
        if (t1.get$length(complexes) === 1) return complexes;
        for (
          t2 = t1.get$iterator(complexes), unifiedBase = null;
          t2.moveNext$0();

        ) {
          base = J.get$last$ax(t2.get$current());
          if (!(base instanceof X.CompoundSelector0)) return null;
          if (unifiedBase == null) unifiedBase = base.components;
          else
            for (t3 = base.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
              unifiedBase = t3[_i].unify$1(unifiedBase);
              if (unifiedBase == null) return null;
            }
        }
        t1 = t1.map$1$1(
          complexes,
          new Y.unifyComplex_closure0(),
          type$.List_ComplexSelectorComponent_2
        );
        complexesWithoutBases = P.List_List$of(
          t1,
          true,
          t1.$ti._eval$1('ListIterable.E')
        );
        t1 = C.JSArray_methods.get$last(complexesWithoutBases);
        unifiedBase.toString;
        J.add$1$ax(t1, X.CompoundSelector$0(unifiedBase));
        return Y.weave0(complexesWithoutBases);
      },
      unifyCompound0(compound1, compound2) {
        var t1, result, _i, unified;
        for (
          t1 = compound1.length, result = compound2, _i = 0;
          _i < t1;
          ++_i, result = unified
        ) {
          unified = compound1[_i].unify$1(result);
          if (unified == null) return null;
        }
        return X.CompoundSelector$0(result);
      },
      unifyUniversalAndElement0(selector1, selector2) {
        var namespace1,
          name1,
          t1,
          namespace2,
          name2,
          namespace,
          $name,
          _null = null,
          _s45_ = string$.must_b;
        if (selector1 instanceof N.UniversalSelector0) {
          namespace1 = selector1.namespace;
          name1 = _null;
        } else if (selector1 instanceof F.TypeSelector0) {
          t1 = selector1.name;
          namespace1 = t1.namespace;
          name1 = t1.name;
        } else
          throw H.wrapException(
            P.ArgumentError$value(selector1, 'selector1', _s45_)
          );
        if (selector2 instanceof N.UniversalSelector0) {
          namespace2 = selector2.namespace;
          name2 = _null;
        } else if (selector2 instanceof F.TypeSelector0) {
          t1 = selector2.name;
          namespace2 = t1.namespace;
          name2 = t1.name;
        } else
          throw H.wrapException(
            P.ArgumentError$value(selector2, 'selector2', _s45_)
          );
        if (namespace1 == namespace2 || namespace2 === '*')
          namespace = namespace1;
        else {
          if (namespace1 !== '*') return _null;
          namespace = namespace2;
        }
        if (name1 == name2 || name2 == null) $name = name1;
        else {
          if (!(name1 == null || name1 === '*')) return _null;
          $name = name2;
        }
        return $name == null
          ? new N.UniversalSelector0(namespace)
          : new F.TypeSelector0(new D.QualifiedName0($name, namespace));
      },
      weave0(complexes) {
        var t2,
          t3,
          t4,
          t5,
          target,
          _i,
          parents,
          newPrefixes,
          parentPrefixes,
          t6,
          t1 = type$.JSArray_List_ComplexSelectorComponent_2,
          prefixes = H._setArrayType(
            [J.toList$0$ax(C.JSArray_methods.get$first(complexes))],
            t1
          );
        for (
          t2 = H.SubListIterable$(
            complexes,
            1,
            null,
            H._arrayInstanceType(complexes)._precomputed1
          ),
            t2 = new H.ListIterator(t2, t2.get$length(t2)),
            t3 = H._instanceType(t2)._precomputed1;
          t2.moveNext$0();

        ) {
          t4 = t3._as(t2.__internal$_current);
          t5 = J.getInterceptor$asx(t4);
          if (t5.get$isEmpty(t4)) continue;
          target = t5.get$last(t4);
          if (t5.get$length(t4) === 1) {
            for (
              t4 = prefixes.length, _i = 0;
              _i < prefixes.length;
              prefixes.length === t4 ||
                (0, H.throwConcurrentModificationError)(prefixes),
                ++_i
            )
              J.add$1$ax(prefixes[_i], target);
            continue;
          }
          parents = t5.take$1(t4, t5.get$length(t4) - 1).toList$0(0);
          newPrefixes = H._setArrayType([], t1);
          for (
            t4 = prefixes.length, _i = 0;
            _i < prefixes.length;
            prefixes.length === t4 ||
              (0, H.throwConcurrentModificationError)(prefixes),
              ++_i
          ) {
            parentPrefixes = Y._weaveParents0(prefixes[_i], parents);
            if (parentPrefixes == null) continue;
            for (
              t5 = parentPrefixes.get$iterator(parentPrefixes);
              t5.moveNext$0();

            ) {
              t6 = t5.get$current();
              J.add$1$ax(t6, target);
              newPrefixes.push(t6);
            }
          }
          prefixes = newPrefixes;
        }
        return prefixes;
      },
      _weaveParents0(parents1, parents2) {
        var finalCombinators,
          root1,
          root2,
          root,
          groups1,
          groups2,
          lcs,
          t2,
          choices,
          t3,
          _i,
          group,
          t4,
          t5,
          _null = null,
          t1 = type$.ComplexSelectorComponent_2,
          queue1 = P.ListQueue_ListQueue$of(parents1, t1),
          queue2 = P.ListQueue_ListQueue$of(parents2, t1),
          initialCombinators = Y._mergeInitialCombinators0(queue1, queue2);
        if (initialCombinators == null) return _null;
        finalCombinators = Y._mergeFinalCombinators0(queue1, queue2, _null);
        if (finalCombinators == null) return _null;
        root1 = Y._firstIfRoot0(queue1);
        root2 = Y._firstIfRoot0(queue2);
        t1 = root1 != null;
        if (t1 && root2 != null) {
          root = Y.unifyCompound0(root1.components, root2.components);
          if (root == null) return _null;
          queue1.addFirst$1(root);
          queue2.addFirst$1(root);
        } else if (t1) queue2.addFirst$1(root1);
        else if (root2 != null) queue1.addFirst$1(root2);
        groups1 = Y._groupSelectors0(queue1);
        groups2 = Y._groupSelectors0(queue2);
        t1 = type$.List_ComplexSelectorComponent_2;
        lcs = B.longestCommonSubsequence0(
          groups2,
          groups1,
          new Y._weaveParents_closure6(),
          t1
        );
        t2 = type$.JSArray_Iterable_ComplexSelectorComponent_2;
        choices = H._setArrayType(
          [H._setArrayType([initialCombinators], t2)],
          type$.JSArray_List_Iterable_ComplexSelectorComponent_2
        );
        for (
          t3 = lcs.length, _i = 0;
          _i < lcs.length;
          lcs.length === t3 || (0, H.throwConcurrentModificationError)(lcs),
            ++_i
        ) {
          group = lcs[_i];
          t4 = Y._chunks0(
            groups1,
            groups2,
            new Y._weaveParents_closure7(group),
            t1
          );
          t5 = H._arrayInstanceType(t4)._eval$1(
            'MappedListIterable<1,Iterable<ComplexSelectorComponent0>>'
          );
          choices.push(
            P.List_List$of(
              new H.MappedListIterable(t4, new Y._weaveParents_closure8(), t5),
              true,
              t5._eval$1('ListIterable.E')
            )
          );
          choices.push(H._setArrayType([group], t2));
          groups1.removeFirst$0();
          groups2.removeFirst$0();
        }
        t2 = Y._chunks0(groups1, groups2, new Y._weaveParents_closure9(), t1);
        t3 = H._arrayInstanceType(t2)._eval$1(
          'MappedListIterable<1,Iterable<ComplexSelectorComponent0>>'
        );
        choices.push(
          P.List_List$of(
            new H.MappedListIterable(t2, new Y._weaveParents_closure10(), t3),
            true,
            t3._eval$1('ListIterable.E')
          )
        );
        C.JSArray_methods.addAll$1(choices, finalCombinators);
        return J.map$1$1$ax(
          Y.paths0(
            new H.WhereIterable(
              choices,
              new Y._weaveParents_closure11(),
              type$.WhereIterable_List_Iterable_ComplexSelectorComponent_2
            ),
            type$.Iterable_ComplexSelectorComponent_2
          ),
          new Y._weaveParents_closure12(),
          t1
        );
      },
      _firstIfRoot0(queue) {
        var first;
        if (queue._collection$_head === queue._collection$_tail) return null;
        first = queue.get$first(queue);
        if (first instanceof X.CompoundSelector0) {
          if (!Y._hasRoot0(first)) return null;
          queue.removeFirst$0();
          return first;
        } else return null;
      },
      _mergeInitialCombinators0(components1, components2) {
        var t4,
          combinators2,
          lcs,
          t1 = type$.JSArray_Combinator_2,
          combinators1 = H._setArrayType([], t1),
          t2 = type$.Combinator_2,
          t3 = components1.$ti._precomputed1;
        while (true) {
          if (!components1.get$isEmpty(components1)) {
            t4 = components1._collection$_head;
            if (t4 === components1._collection$_tail)
              H.throwExpression(H.IterableElementError_noElement());
            t4 =
              t3._as(components1._collection$_table[t4]) instanceof
              S.Combinator0;
          } else t4 = false;
          if (!t4) break;
          combinators1.push(t2._as(components1.removeFirst$0()));
        }
        combinators2 = H._setArrayType([], t1);
        t1 = components2.$ti._precomputed1;
        while (true) {
          if (!components2.get$isEmpty(components2)) {
            t3 = components2._collection$_head;
            if (t3 === components2._collection$_tail)
              H.throwExpression(H.IterableElementError_noElement());
            t3 =
              t1._as(components2._collection$_table[t3]) instanceof
              S.Combinator0;
          } else t3 = false;
          if (!t3) break;
          combinators2.push(t2._as(components2.removeFirst$0()));
        }
        lcs = B.longestCommonSubsequence0(combinators1, combinators2, null, t2);
        if (C.C_ListEquality.equals$2(0, lcs, combinators1))
          return combinators2;
        if (C.C_ListEquality.equals$2(0, lcs, combinators2))
          return combinators1;
        return null;
      },
      _mergeFinalCombinators0(components1, components2, result) {
        var t1,
          combinators1,
          t2,
          combinators2,
          lcs,
          combinator1,
          combinator2,
          compound1,
          compound2,
          choices,
          unified,
          followingSiblingSelector,
          nextSiblingSelector,
          _null = null;
        if (result == null)
          result = Q.QueueList$(
            _null,
            type$.List_List_ComplexSelectorComponent_2
          );
        if (
          components1._collection$_head === components1._collection$_tail ||
          !(components1.get$last(components1) instanceof S.Combinator0)
        )
          t1 =
            components2._collection$_head === components2._collection$_tail ||
            !(components2.get$last(components2) instanceof S.Combinator0);
        else t1 = false;
        if (t1) return result;
        t1 = type$.JSArray_Combinator_2;
        combinators1 = H._setArrayType([], t1);
        t2 = type$.Combinator_2;
        while (true) {
          if (
            !(
              !components1.get$isEmpty(components1) &&
              components1.get$last(components1) instanceof S.Combinator0
            )
          )
            break;
          combinators1.push(t2._as(components1.removeLast$0(0)));
        }
        combinators2 = H._setArrayType([], t1);
        while (true) {
          if (
            !(
              !components2.get$isEmpty(components2) &&
              components2.get$last(components2) instanceof S.Combinator0
            )
          )
            break;
          combinators2.push(t2._as(components2.removeLast$0(0)));
        }
        t1 = combinators1.length;
        if (t1 > 1 || combinators2.length > 1) {
          lcs = B.longestCommonSubsequence0(
            combinators1,
            combinators2,
            _null,
            t2
          );
          if (C.C_ListEquality.equals$2(0, lcs, combinators1))
            result.addFirst$1(
              H._setArrayType(
                [
                  P.List_List$of(
                    new H.ReversedListIterable(
                      combinators2,
                      type$.ReversedListIterable_Combinator_2
                    ),
                    true,
                    type$.ComplexSelectorComponent_2
                  ),
                ],
                type$.JSArray_List_ComplexSelectorComponent_2
              )
            );
          else if (C.C_ListEquality.equals$2(0, lcs, combinators2))
            result.addFirst$1(
              H._setArrayType(
                [
                  P.List_List$of(
                    new H.ReversedListIterable(
                      combinators1,
                      type$.ReversedListIterable_Combinator_2
                    ),
                    true,
                    type$.ComplexSelectorComponent_2
                  ),
                ],
                type$.JSArray_List_ComplexSelectorComponent_2
              )
            );
          else return _null;
          return result;
        }
        combinator1 =
          t1 === 0 ? _null : C.JSArray_methods.get$first(combinators1);
        combinator2 =
          combinators2.length === 0
            ? _null
            : C.JSArray_methods.get$first(combinators2);
        t1 = combinator1 != null;
        if (t1 && combinator2 != null) {
          t1 = type$.CompoundSelector_2;
          compound1 = t1._as(components1.removeLast$0(0));
          compound2 = t1._as(components2.removeLast$0(0));
          t1 = combinator1 === C.Combinator_CzM0;
          if (t1 && combinator2 === C.Combinator_CzM0)
            if (Y.compoundIsSuperselector0(compound1, compound2, _null))
              result.addFirst$1(
                H._setArrayType(
                  [
                    H._setArrayType(
                      [compound2, C.Combinator_CzM0],
                      type$.JSArray_ComplexSelectorComponent_2
                    ),
                  ],
                  type$.JSArray_List_ComplexSelectorComponent_2
                )
              );
            else {
              t1 = type$.JSArray_ComplexSelectorComponent_2;
              t2 = type$.JSArray_List_ComplexSelectorComponent_2;
              if (Y.compoundIsSuperselector0(compound2, compound1, _null))
                result.addFirst$1(
                  H._setArrayType(
                    [H._setArrayType([compound1, C.Combinator_CzM0], t1)],
                    t2
                  )
                );
              else {
                choices = H._setArrayType(
                  [
                    H._setArrayType(
                      [
                        compound1,
                        C.Combinator_CzM0,
                        compound2,
                        C.Combinator_CzM0,
                      ],
                      t1
                    ),
                    H._setArrayType(
                      [
                        compound2,
                        C.Combinator_CzM0,
                        compound1,
                        C.Combinator_CzM0,
                      ],
                      t1
                    ),
                  ],
                  t2
                );
                unified = Y.unifyCompound0(
                  compound1.components,
                  compound2.components
                );
                if (unified != null)
                  choices.push(
                    H._setArrayType([unified, C.Combinator_CzM0], t1)
                  );
                result.addFirst$1(choices);
              }
            }
          else {
            if (!(t1 && combinator2 === C.Combinator_uzg0))
              t2 =
                combinator1 === C.Combinator_uzg0 &&
                combinator2 === C.Combinator_CzM0;
            else t2 = true;
            if (t2) {
              followingSiblingSelector = t1 ? compound1 : compound2;
              nextSiblingSelector = t1 ? compound2 : compound1;
              t1 = type$.JSArray_ComplexSelectorComponent_2;
              t2 = type$.JSArray_List_ComplexSelectorComponent_2;
              if (
                Y.compoundIsSuperselector0(
                  followingSiblingSelector,
                  nextSiblingSelector,
                  _null
                )
              )
                result.addFirst$1(
                  H._setArrayType(
                    [
                      H._setArrayType(
                        [nextSiblingSelector, C.Combinator_uzg0],
                        t1
                      ),
                    ],
                    t2
                  )
                );
              else {
                unified = Y.unifyCompound0(
                  compound1.components,
                  compound2.components
                );
                t2 = H._setArrayType(
                  [
                    H._setArrayType(
                      [
                        followingSiblingSelector,
                        C.Combinator_CzM0,
                        nextSiblingSelector,
                        C.Combinator_uzg0,
                      ],
                      t1
                    ),
                  ],
                  t2
                );
                if (unified != null)
                  t2.push(H._setArrayType([unified, C.Combinator_uzg0], t1));
                result.addFirst$1(t2);
              }
            } else {
              if (combinator1 === C.Combinator_sgq0)
                t2 =
                  combinator2 === C.Combinator_uzg0 ||
                  combinator2 === C.Combinator_CzM0;
              else t2 = false;
              if (t2) {
                result.addFirst$1(
                  H._setArrayType(
                    [
                      H._setArrayType(
                        [compound2, combinator2],
                        type$.JSArray_ComplexSelectorComponent_2
                      ),
                    ],
                    type$.JSArray_List_ComplexSelectorComponent_2
                  )
                );
                components1._add$1(compound1);
                components1._add$1(C.Combinator_sgq0);
              } else {
                if (combinator2 === C.Combinator_sgq0)
                  t1 = combinator1 === C.Combinator_uzg0 || t1;
                else t1 = false;
                if (t1) {
                  result.addFirst$1(
                    H._setArrayType(
                      [
                        H._setArrayType(
                          [compound1, combinator1],
                          type$.JSArray_ComplexSelectorComponent_2
                        ),
                      ],
                      type$.JSArray_List_ComplexSelectorComponent_2
                    )
                  );
                  components2._add$1(compound2);
                  components2._add$1(C.Combinator_sgq0);
                } else if (combinator1 === combinator2) {
                  unified = Y.unifyCompound0(
                    compound1.components,
                    compound2.components
                  );
                  if (unified == null) return _null;
                  result.addFirst$1(
                    H._setArrayType(
                      [
                        H._setArrayType(
                          [unified, combinator1],
                          type$.JSArray_ComplexSelectorComponent_2
                        ),
                      ],
                      type$.JSArray_List_ComplexSelectorComponent_2
                    )
                  );
                } else return _null;
              }
            }
          }
          return Y._mergeFinalCombinators0(components1, components2, result);
        } else if (t1) {
          if (combinator1 === C.Combinator_sgq0)
            if (!components2.get$isEmpty(components2)) {
              t1 = type$.CompoundSelector_2;
              t1 = Y.compoundIsSuperselector0(
                t1._as(components2.get$last(components2)),
                t1._as(components1.get$last(components1)),
                _null
              );
            } else t1 = false;
          else t1 = false;
          if (t1) components2.removeLast$0(0);
          result.addFirst$1(
            H._setArrayType(
              [
                H._setArrayType(
                  [components1.removeLast$0(0), combinator1],
                  type$.JSArray_ComplexSelectorComponent_2
                ),
              ],
              type$.JSArray_List_ComplexSelectorComponent_2
            )
          );
          return Y._mergeFinalCombinators0(components1, components2, result);
        } else {
          if (combinator2 === C.Combinator_sgq0)
            if (!components1.get$isEmpty(components1)) {
              t1 = type$.CompoundSelector_2;
              t1 = Y.compoundIsSuperselector0(
                t1._as(components1.get$last(components1)),
                t1._as(components2.get$last(components2)),
                _null
              );
            } else t1 = false;
          else t1 = false;
          if (t1) components1.removeLast$0(0);
          t1 = components2.removeLast$0(0);
          combinator2.toString;
          result.addFirst$1(
            H._setArrayType(
              [
                H._setArrayType(
                  [t1, combinator2],
                  type$.JSArray_ComplexSelectorComponent_2
                ),
              ],
              type$.JSArray_List_ComplexSelectorComponent_2
            )
          );
          return Y._mergeFinalCombinators0(components1, components2, result);
        }
      },
      _mustUnify0(complex1, complex2) {
        var t2,
          t3,
          t4,
          t1 = P.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector_2);
        for (t2 = J.get$iterator$ax(complex1); t2.moveNext$0(); ) {
          t3 = t2.get$current();
          if (t3 instanceof X.CompoundSelector0)
            for (
              t3 = C.JSArray_methods.get$iterator(t3.components),
                t4 = new H.WhereIterator(t3, Y.functions0___isUnique$closure());
              t4.moveNext$0();

            )
              t1.add$1(0, t3.get$current());
        }
        if (t1._collection$_length === 0) return false;
        return J.any$1$ax(complex2, new Y._mustUnify_closure0(t1));
      },
      _isUnique0(simple) {
        var t1;
        if (!(simple instanceof N.IDSelector0))
          t1 = simple instanceof D.PseudoSelector0 && !simple.isClass;
        else t1 = true;
        return t1;
      },
      _chunks0(queue1, queue2, done, $T) {
        var chunk2,
          t2,
          t1 = $T._eval$1('JSArray<0>'),
          chunk1 = H._setArrayType([], t1);
        for (; !done.call$1(queue1); ) chunk1.push(queue1.removeFirst$0());
        chunk2 = H._setArrayType([], t1);
        for (; !done.call$1(queue2); ) chunk2.push(queue2.removeFirst$0());
        t1 = chunk1.length === 0;
        if (t1 && chunk2.length === 0)
          return H._setArrayType([], $T._eval$1('JSArray<List<0>>'));
        if (t1)
          return H._setArrayType([chunk2], $T._eval$1('JSArray<List<0>>'));
        if (chunk2.length === 0)
          return H._setArrayType([chunk1], $T._eval$1('JSArray<List<0>>'));
        t1 = P.List_List$of(chunk1, true, $T);
        C.JSArray_methods.addAll$1(t1, chunk2);
        t2 = P.List_List$of(chunk2, true, $T);
        C.JSArray_methods.addAll$1(t2, chunk1);
        return H._setArrayType([t1, t2], $T._eval$1('JSArray<List<0>>'));
      },
      paths0(choices, $T) {
        return J.fold$2$ax(
          choices,
          H._setArrayType(
            [H._setArrayType([], $T._eval$1('JSArray<0>'))],
            $T._eval$1('JSArray<List<0>>')
          ),
          new Y.paths_closure0($T)
        );
      },
      _groupSelectors0(complex) {
        var t1,
          t2,
          group,
          t3,
          t4,
          groups = Q.QueueList$(null, type$.List_ComplexSelectorComponent_2),
          iterator = P._ListQueueIterator$(complex);
        if (!iterator.moveNext$0()) return groups;
        t1 = H._instanceType(iterator)._precomputed1;
        t2 = type$.JSArray_ComplexSelectorComponent_2;
        group = H._setArrayType([t1._as(iterator._collection$_current)], t2);
        groups._queue_list$_add$1(group);
        for (; iterator.moveNext$0(); ) {
          t3 =
            C.JSArray_methods.get$last(group) instanceof S.Combinator0 ||
            t1._as(iterator._collection$_current) instanceof S.Combinator0;
          t4 = iterator._collection$_current;
          if (t3) group.push(t1._as(t4));
          else {
            group = H._setArrayType([t1._as(t4)], t2);
            groups._queue_list$_add$1(group);
          }
        }
        return groups;
      },
      _hasRoot0(compound) {
        return C.JSArray_methods.any$1(
          compound.components,
          new Y._hasRoot_closure0()
        );
      },
      listIsSuperselector0(list1, list2) {
        return C.JSArray_methods.every$1(
          list2,
          new Y.listIsSuperselector_closure0(list1)
        );
      },
      complexIsParentSuperselector0(complex1, complex2) {
        var t2,
          base,
          t1 = J.getInterceptor$ax(complex1);
        if (t1.get$first(complex1) instanceof S.Combinator0) return false;
        t2 = J.getInterceptor$ax(complex2);
        if (t2.get$first(complex2) instanceof S.Combinator0) return false;
        if (t1.get$length(complex1) > t2.get$length(complex2)) return false;
        base = X.CompoundSelector$0(
          H._setArrayType(
            [new N.PlaceholderSelector0('<temp>')],
            type$.JSArray_SimpleSelector_2
          )
        );
        t1 = type$.ComplexSelectorComponent_2;
        t2 = P.List_List$of(complex1, true, t1);
        t2.push(base);
        t1 = P.List_List$of(complex2, true, t1);
        t1.push(base);
        return Y.complexIsSuperselector0(t2, t1);
      },
      complexIsSuperselector0(complex1, complex2) {
        var t1,
          t2,
          t3,
          i1,
          i2,
          remaining1,
          remaining2,
          t4,
          t5,
          t6,
          afterSuperselector,
          afterSuperselector0,
          compound2,
          i10,
          combinator1,
          combinator2;
        if (C.JSArray_methods.get$last(complex1) instanceof S.Combinator0)
          return false;
        if (C.JSArray_methods.get$last(complex2) instanceof S.Combinator0)
          return false;
        for (
          t1 = H._arrayInstanceType(complex2),
            t2 = t1._precomputed1,
            t1 = t1._eval$1('SubListIterable<1>'),
            t3 = type$.CompoundSelector_2,
            i1 = 0,
            i2 = 0;
          true;

        ) {
          remaining1 = complex1.length - i1;
          remaining2 = complex2.length - i2;
          if (remaining1 === 0 || remaining2 === 0) return false;
          if (remaining1 > remaining2) return false;
          t4 = complex1[i1];
          if (t4 instanceof S.Combinator0) return false;
          if (complex2[i2] instanceof S.Combinator0) return false;
          t3._as(t4);
          if (remaining1 === 1) {
            t5 = t3._as(C.JSArray_methods.get$last(complex2));
            t6 = complex2.length - 1;
            t3 = new H.SubListIterable(complex2, 0, t6, t1);
            t3.SubListIterable$3(complex2, 0, t6, t2);
            return Y.compoundIsSuperselector0(t4, t5, t3.skip$1(0, i2));
          }
          afterSuperselector = i2 + 1;
          for (
            afterSuperselector0 = afterSuperselector;
            afterSuperselector0 < complex2.length;
            ++afterSuperselector0
          ) {
            t5 = afterSuperselector0 - 1;
            compound2 = complex2[t5];
            if (compound2 instanceof X.CompoundSelector0) {
              t6 = new H.SubListIterable(complex2, 0, t5, t1);
              t6.SubListIterable$3(complex2, 0, t5, t2);
              if (
                Y.compoundIsSuperselector0(
                  t4,
                  compound2,
                  t6.skip$1(0, afterSuperselector)
                )
              )
                break;
            }
          }
          if (afterSuperselector0 === complex2.length) return false;
          i10 = i1 + 1;
          combinator1 = complex1[i10];
          combinator2 = complex2[afterSuperselector0];
          if (combinator1 instanceof S.Combinator0) {
            if (!(combinator2 instanceof S.Combinator0)) return false;
            if (combinator1 === C.Combinator_CzM0) {
              if (combinator2 === C.Combinator_sgq0) return false;
            } else if (combinator2 !== combinator1) return false;
            if (remaining1 === 3 && remaining2 > 3) return false;
            i1 += 2;
            i2 = afterSuperselector0 + 1;
          } else {
            if (combinator2 instanceof S.Combinator0) {
              if (combinator2 !== C.Combinator_sgq0) return false;
              i2 = afterSuperselector0 + 1;
            } else i2 = afterSuperselector0;
            i1 = i10;
          }
        }
      },
      compoundIsSuperselector0(compound1, compound2, parents) {
        var t1, t2, _i, simple1, simple2;
        for (t1 = compound1.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          simple1 = t1[_i];
          if (
            simple1 instanceof D.PseudoSelector0 &&
            simple1.selector != null
          ) {
            if (!Y._selectorPseudoIsSuperselector0(simple1, compound2, parents))
              return false;
          } else if (!Y._simpleIsSuperselectorOfCompound0(simple1, compound2))
            return false;
        }
        for (t1 = compound2.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          simple2 = t1[_i];
          if (
            simple2 instanceof D.PseudoSelector0 &&
            !simple2.isClass &&
            simple2.selector == null &&
            !Y._simpleIsSuperselectorOfCompound0(simple2, compound1)
          )
            return false;
        }
        return true;
      },
      _simpleIsSuperselectorOfCompound0(simple, compound) {
        return C.JSArray_methods.any$1(
          compound.components,
          new Y._simpleIsSuperselectorOfCompound_closure0(simple)
        );
      },
      _selectorPseudoIsSuperselector0(pseudo1, compound2, parents) {
        var selector1_ = pseudo1.selector;
        if (selector1_ == null)
          throw H.wrapException(
            P.ArgumentError$(
              'Selector ' +
                pseudo1.toString$0(0) +
                ' must have a selector argument.',
              null
            )
          );
        switch (pseudo1.normalizedName) {
          case 'is':
          case 'matches':
          case 'any':
            return (
              Y._selectorPseudoArgs0(compound2, pseudo1.name, true).any$1(
                0,
                new Y._selectorPseudoIsSuperselector_closure6(selector1_)
              ) ||
              C.JSArray_methods.any$1(
                selector1_.components,
                new Y._selectorPseudoIsSuperselector_closure7(
                  parents,
                  compound2
                )
              )
            );
          case 'has':
          case 'host':
          case 'host-context':
            return Y._selectorPseudoArgs0(compound2, pseudo1.name, true).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure8(selector1_)
            );
          case 'slotted':
            return Y._selectorPseudoArgs0(compound2, pseudo1.name, false).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure9(selector1_)
            );
          case 'not':
            return C.JSArray_methods.every$1(
              selector1_.components,
              new Y._selectorPseudoIsSuperselector_closure10(compound2, pseudo1)
            );
          case 'current':
            return Y._selectorPseudoArgs0(compound2, pseudo1.name, true).any$1(
              0,
              new Y._selectorPseudoIsSuperselector_closure11(selector1_)
            );
          case 'nth-child':
          case 'nth-last-child':
            return C.JSArray_methods.any$1(
              compound2.components,
              new Y._selectorPseudoIsSuperselector_closure12(
                pseudo1,
                selector1_
              )
            );
          default:
            throw H.wrapException('unreachable');
        }
      },
      _selectorPseudoArgs0(compound, $name, isClass) {
        var t1 = type$.WhereTypeIterable_PseudoSelector_2;
        return A.IterableNullableExtension_whereNotNull(
          new H.MappedIterable(
            new H.WhereIterable(
              new H.WhereTypeIterable(compound.components, t1),
              new Y._selectorPseudoArgs_closure1(isClass, $name),
              t1._eval$1('WhereIterable<Iterable.E>')
            ),
            new Y._selectorPseudoArgs_closure2(),
            t1._eval$1('MappedIterable<Iterable.E,SelectorList0?>')
          ),
          type$.SelectorList_2
        );
      },
      unifyComplex_closure0: function unifyComplex_closure0() {},
      _weaveParents_closure6: function _weaveParents_closure6() {},
      _weaveParents_closure7: function _weaveParents_closure7(t0) {
        this.group = t0;
      },
      _weaveParents_closure8: function _weaveParents_closure8() {},
      _weaveParents__closure4: function _weaveParents__closure4() {},
      _weaveParents_closure9: function _weaveParents_closure9() {},
      _weaveParents_closure10: function _weaveParents_closure10() {},
      _weaveParents__closure3: function _weaveParents__closure3() {},
      _weaveParents_closure11: function _weaveParents_closure11() {},
      _weaveParents_closure12: function _weaveParents_closure12() {},
      _weaveParents__closure2: function _weaveParents__closure2() {},
      _mustUnify_closure0: function _mustUnify_closure0(t0) {
        this.uniqueSelectors = t0;
      },
      _mustUnify__closure0: function _mustUnify__closure0(t0) {
        this.uniqueSelectors = t0;
      },
      paths_closure0: function paths_closure0(t0) {
        this.T = t0;
      },
      paths__closure0: function paths__closure0(t0, t1) {
        this.paths = t0;
        this.T = t1;
      },
      paths___closure0: function paths___closure0(t0, t1) {
        this.option = t0;
        this.T = t1;
      },
      _hasRoot_closure0: function _hasRoot_closure0() {},
      listIsSuperselector_closure0: function listIsSuperselector_closure0(t0) {
        this.list1 = t0;
      },
      listIsSuperselector__closure0: function listIsSuperselector__closure0(
        t0
      ) {
        this.complex1 = t0;
      },
      _simpleIsSuperselectorOfCompound_closure0: function _simpleIsSuperselectorOfCompound_closure0(
        t0
      ) {
        this.simple = t0;
      },
      _simpleIsSuperselectorOfCompound__closure0: function _simpleIsSuperselectorOfCompound__closure0(
        t0
      ) {
        this.simple = t0;
      },
      _selectorPseudoIsSuperselector_closure6: function _selectorPseudoIsSuperselector_closure6(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure7: function _selectorPseudoIsSuperselector_closure7(
        t0,
        t1
      ) {
        this.parents = t0;
        this.compound2 = t1;
      },
      _selectorPseudoIsSuperselector_closure8: function _selectorPseudoIsSuperselector_closure8(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure9: function _selectorPseudoIsSuperselector_closure9(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure10: function _selectorPseudoIsSuperselector_closure10(
        t0,
        t1
      ) {
        this.compound2 = t0;
        this.pseudo1 = t1;
      },
      _selectorPseudoIsSuperselector__closure0: function _selectorPseudoIsSuperselector__closure0(
        t0,
        t1
      ) {
        this.complex = t0;
        this.pseudo1 = t1;
      },
      _selectorPseudoIsSuperselector___closure1: function _selectorPseudoIsSuperselector___closure1(
        t0
      ) {
        this.simple2 = t0;
      },
      _selectorPseudoIsSuperselector___closure2: function _selectorPseudoIsSuperselector___closure2(
        t0
      ) {
        this.simple2 = t0;
      },
      _selectorPseudoIsSuperselector_closure11: function _selectorPseudoIsSuperselector_closure11(
        t0
      ) {
        this.selector1 = t0;
      },
      _selectorPseudoIsSuperselector_closure12: function _selectorPseudoIsSuperselector_closure12(
        t0,
        t1
      ) {
        this.pseudo1 = t0;
        this.selector1 = t1;
      },
      _selectorPseudoArgs_closure1: function _selectorPseudoArgs_closure1(
        t0,
        t1
      ) {
        this.isClass = t0;
        this.name = t1;
      },
      _selectorPseudoArgs_closure2: function _selectorPseudoArgs_closure2() {},
      currentCallableSpan0() {
        var node = $.Zone__current.$index(0, C.Symbol__currentCallableNode);
        if (type$.AstNode_2._is(node)) return node.get$span();
        throw H.wrapException(P.StateError$(string$.curren));
      },
      globalFunctions_closure0: function globalFunctions_closure0() {},
      TerseLogger0: function TerseLogger0(t0, t1) {
        this._terse$_warningCounts = t0;
        this._terse$_inner = t1;
      },
      TerseLogger_summarize_closure1: function TerseLogger_summarize_closure1() {},
      TerseLogger_summarize_closure2: function TerseLogger_summarize_closure2() {},
      WarnRule0: function WarnRule0(t0, t1) {
        this.expression = t0;
        this.span = t1;
      },
      mergeMaps(map1, map2, $K, $V) {
        var result = P.LinkedHashMap_LinkedHashMap$of(map1, $K, $V);
        result.addAll$1(0, map2);
        return result;
      },
      groupBy(values, key, $S, $T) {
        var t1,
          t2,
          _i,
          element,
          t3,
          t4,
          map = P.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1('List<0>'));
        for (
          t1 = values.length, t2 = $S._eval$1('JSArray<0>'), _i = 0;
          _i < values.length;
          values.length === t1 ||
            (0, H.throwConcurrentModificationError)(values),
            ++_i
        ) {
          element = values[_i];
          t3 = key.call$1(element);
          t4 = map.$index(0, t3);
          if (t4 == null) {
            t4 = H._setArrayType([], t2);
            map.$indexSet(0, t3, t4);
            t3 = t4;
          } else t3 = t4;
          t3.push(element);
        }
        return map;
      },
      minBy(values, orderBy) {
        var t1, t2, minValue, minOrderBy, element, elementOrderBy;
        for (
          t1 = new H.MappedIterator(
            J.get$iterator$ax(values.__internal$_iterable),
            values._f
          ),
            t2 = H._instanceType(t1)._rest[1],
            minValue = null,
            minOrderBy = null;
          t1.moveNext$0();

        ) {
          element = t2._as(t1.__internal$_current);
          elementOrderBy = orderBy.call$1(element);
          if (
            minOrderBy == null ||
            B.defaultCompare(elementOrderBy, minOrderBy) < 0
          ) {
            minOrderBy = elementOrderBy;
            minValue = element;
          }
        }
        return minValue;
      },
      repl(options) {
        return Y.repl$body(options);
      },
      repl$body(options) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(type$.void),
          $async$handler = 1,
          $async$currentError,
          $async$next = [],
          repl,
          logger,
          evaluator,
          line,
          declaration,
          error,
          stackTrace,
          t4,
          t5,
          t6,
          t7,
          t8,
          line0,
          toZone,
          exception,
          t1,
          t2,
          t3,
          repl0;
        var $async$repl = P._wrapJsFunctionForAsync(function (
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = H._setArrayType([], type$.JSArray_String);
                t2 = C.JSString_methods.$mul(' ', 3);
                t3 = $.$get$alwaysValid();
                repl0 = new Q.Repl('>> ', t2, t3, t1);
                repl0.__Repl__adapter = new B.ReplAdapter(repl0);
                repl = repl0;
                t1 = options._options;
                logger = new T.TrackingLogger(
                  H._asBool(t1.$index(0, 'quiet'))
                    ? $.$get$Logger_quiet()
                    : new S.StderrLogger(options.get$color())
                );
                t2 = $.$get$context().absolute$7(
                  '.',
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                );
                evaluator = new R.Evaluator(
                  R._EvaluateVisitor$(
                    null,
                    R.ImportCache$(
                      type$.List_String._as(t1.$index(0, 'load-path')),
                      logger
                    ),
                    logger,
                    null,
                    false,
                    false
                  ),
                  new F.FilesystemImporter(t2)
                );
                t2 = repl.__Repl__adapter;
                t1 = new P._StreamIterator(
                  H.checkNotNullable(
                    (t2 == null
                      ? H.throwExpression(
                          new H.LateError(
                            "Field '_adapter' has not been initialized."
                          )
                        )
                      : t2
                    ).runAsync$0(),
                    'stream',
                    type$.Object
                  )
                );
                $async$handler = 2;
                (t2 = type$.Expression),
                  (t3 = type$.String),
                  (t4 = type$.VariableDeclaration);
              case 5:
                // for condition
                $async$goto = 7;
                return P._asyncAwait(t1.moveNext$0(), $async$repl);
              case 7:
                // returning from await.
                if (!$async$result) {
                  // goto after for
                  $async$goto = 6;
                  break;
                }
                line = t1.get$current();
                if (J.trim$0$s(line).length === 0) {
                  // goto for condition
                  $async$goto = 5;
                  break;
                }
                try {
                  if (J.startsWith$1$s(line, '@')) {
                    t5 = evaluator;
                    t6 = logger;
                    t7 = S.SpanScanner$(line, null);
                    if (t6 == null) t6 = C.StderrLogger_false;
                    t6 = new L.ScssParser(
                      P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
                      t7,
                      t6
                    ).parseUseRule$0();
                    t5._visitor.runStatement$2(t5._importer, t6);
                    // goto for condition
                    $async$goto = 5;
                    break;
                  }
                  t5 = S.SpanScanner$(line, null);
                  if (
                    new G.Parser(
                      t5,
                      C.StderrLogger_false
                    )._isVariableDeclarationLike$0()
                  ) {
                    t5 = logger;
                    t6 = S.SpanScanner$(line, null);
                    if (t5 == null) t5 = C.StderrLogger_false;
                    declaration = new L.ScssParser(
                      P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
                      t6,
                      t5
                    ).parseVariableDeclaration$0();
                    t5 = evaluator;
                    t5._visitor.runStatement$2(t5._importer, declaration);
                    t5 = evaluator;
                    t6 = declaration.name;
                    t7 = declaration.span;
                    t8 = declaration.namespace;
                    line0 = t5._visitor
                      .runExpression$2(
                        t5._importer,
                        new S.VariableExpression(t8, t6, t7)
                      )
                      .toString$0(0);
                    toZone = $.printToZone;
                    if (toZone == null) H.printString(line0);
                    else toZone.call$1(line0);
                  } else {
                    t5 = evaluator;
                    t6 = logger;
                    t7 = S.SpanScanner$(line, null);
                    if (t6 == null) t6 = C.StderrLogger_false;
                    t6 = new L.ScssParser(
                      P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
                      t7,
                      t6
                    );
                    t6 = t6._parseSingleProduction$1$1(t6.get$expression(), t2);
                    line0 = t5._visitor
                      .runExpression$2(t5._importer, t6)
                      .toString$0(0);
                    toZone = $.printToZone;
                    if (toZone == null) H.printString(line0);
                    else toZone.call$1(line0);
                  }
                } catch (exception) {
                  t5 = H.unwrapException(exception);
                  if (t5 instanceof E.SassException) {
                    error = t5;
                    stackTrace = H.getTraceFromException(exception);
                    Y._logError(error, stackTrace, line, repl, options, logger);
                  } else throw exception;
                }
                // goto for condition
                $async$goto = 5;
                break;
              case 6:
                // after for
                $async$next.push(4);
                // goto finally
                $async$goto = 3;
                break;
              case 2:
                // uncaught
                $async$next = [1];
              case 3:
                // finally
                $async$handler = 1;
                $async$goto = 8;
                return P._asyncAwait(t1.cancel$0(), $async$repl);
              case 8:
                // returning from await.
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 4:
                // after finally
                // implicit return
                return P._asyncReturn(null, $async$completer);
              case 1:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        });
        return P._asyncStartSync($async$repl, $async$completer);
      },
      _logError(error, stackTrace, line, repl, options, logger) {
        var t1, t2, spacesBeforeError;
        if (
          G.SourceSpanException.prototype.get$span.call(error).file.url == null
        )
          if (!H._asBool(options._options.$index(0, 'quiet')))
            t1 = logger._emittedDebug || logger._emittedWarning;
          else t1 = false;
        else t1 = true;
        if (t1) {
          P.print(error.toString$1$color(0, options.get$color()));
          return;
        }
        t1 = options.get$color() ? '' + '\x1b[31m' : '';
        t2 = G.SourceSpanException.prototype.get$span.call(error);
        t2 = Y.FileLocation$_(t2.file, t2._file$_start);
        spacesBeforeError = repl.prompt.length + t2.file.getColumn$1(t2.offset);
        if (options.get$color()) {
          t2 = G.SourceSpanException.prototype.get$span.call(error);
          t2 = Y.FileLocation$_(t2.file, t2._file$_start);
          t2 = t2.file.getColumn$1(t2.offset) < line.length;
        } else t2 = false;
        if (t2) {
          t1 += '\x1b[1F\x1b[' + spacesBeforeError + 'C';
          t2 = G.SourceSpanException.prototype.get$span.call(error);
          t2 =
            t1 +
            (P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                t2.file._decodedChars,
                t2._file$_start,
                t2._end
              ),
              0,
              null
            ) +
              '\n');
          t1 = t2;
        }
        t1 += C.JSString_methods.$mul(' ', spacesBeforeError);
        t2 = G.SourceSpanException.prototype.get$span.call(error);
        t2 =
          t1 +
          (C.JSString_methods.$mul(
            '^',
            Math.max(1, t2._end - t2._file$_start)
          ) +
            '\n');
        t1 = options.get$color() ? t2 + '\x1b[0m' : t2;
        t1 += 'Error: ' + error._span_exception$_message + '\n';
        if (H._asBool(options._options.$index(0, 'trace')))
          t1 += Y.Trace_Trace$from(stackTrace).get$terse().toString$0(0);
        P.print(
          C.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1)
        );
      },
    },
    Z = {
      ArgParserException$(message, commands) {
        return new Z.ArgParserException(
          commands == null
            ? C.List_empty
            : P.List_List$unmodifiable(commands, type$.String),
          message,
          null,
          null
        );
      },
      ArgParserException: function ArgParserException(t0, t1, t2, t3) {
        var _ = this;
        _.commands = t0;
        _.message = t1;
        _.source = t2;
        _.offset = t3;
      },
      Argument: function Argument(t0, t1, t2) {
        this.name = t0;
        this.defaultValue = t1;
        this.span = t2;
      },
      ConfiguredVariable: function ConfiguredVariable(t0, t1, t2, t3) {
        var _ = this;
        _.name = t0;
        _.expression = t1;
        _.isGuarded = t2;
        _.span = t3;
      },
      BooleanExpression: function BooleanExpression(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      VariableDeclaration$(
        $name,
        expression,
        span,
        comment,
        global,
        guarded,
        namespace
      ) {
        if (namespace != null && global)
          H.throwExpression(P.ArgumentError$(string$.Other_, null));
        return new Z.VariableDeclaration(
          namespace,
          $name,
          expression,
          guarded,
          global,
          span
        );
      },
      VariableDeclaration: function VariableDeclaration(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.namespace = t0;
        _.name = t1;
        _.expression = t2;
        _.isGuarded = t3;
        _.isGlobal = t4;
        _.span = t5;
      },
      ConfiguredValue: function ConfiguredValue(t0, t1, t2) {
        this.value = t0;
        this.configurationSpan = t1;
        this.assignmentNode = t2;
      },
      InterpolationBuffer: function InterpolationBuffer(t0, t1) {
        this._interpolation_buffer$_text = t0;
        this._interpolation_buffer$_contents = t1;
      },
      RenderContext: function RenderContext() {},
      RenderContextOptions: function RenderContextOptions() {},
      RenderContextResult: function RenderContextResult() {},
      RenderContextResultStats: function RenderContextResultStats() {},
      MergedMapView$(maps, $K, $V) {
        var t1 = $K._eval$1('@<0>')._bind$1($V);
        t1 = new Z.MergedMapView(
          P.LinkedHashMap_LinkedHashMap$_empty($K, t1._eval$1('Map<1,2>')),
          t1._eval$1('MergedMapView<1,2>')
        );
        t1.MergedMapView$1(maps, $K, $V);
        return t1;
      },
      MergedMapView: function MergedMapView(t0, t1) {
        this._mapsByKey = t0;
        this.$ti = t1;
      },
      SassBoolean: function SassBoolean(t0) {
        this.value = t0;
      },
      LineScanner$(string) {
        return new Z.LineScanner(null, string);
      },
      LineScanner: function LineScanner(t0, t1) {
        var _ = this;
        _._line_scanner$_column = _._line_scanner$_line = 0;
        _.sourceUrl = t0;
        _.string = t1;
        _._string_scanner$_position = 0;
        _._lastMatchPosition = _._lastMatch = null;
      },
      Argument0: function Argument0(t0, t1, t2) {
        this.name = t0;
        this.defaultValue = t1;
        this.span = t2;
      },
      BooleanExpression0: function BooleanExpression0(t0, t1) {
        this.value = t0;
        this.span = t1;
      },
      booleanConstructor_closure: function booleanConstructor_closure() {},
      booleanConstructor__closure: function booleanConstructor__closure() {},
      booleanConstructor__closure0: function booleanConstructor__closure0() {},
      SassBoolean0: function SassBoolean0(t0) {
        this.value = t0;
      },
      ConfiguredValue0: function ConfiguredValue0(t0, t1, t2) {
        this.value = t0;
        this.configurationSpan = t1;
        this.assignmentNode = t2;
      },
      ConfiguredVariable0: function ConfiguredVariable0(t0, t1, t2, t3) {
        var _ = this;
        _.name = t0;
        _.expression = t1;
        _.isGuarded = t2;
        _.span = t3;
      },
      InterpolationBuffer0: function InterpolationBuffer0(t0, t1) {
        this._interpolation_buffer0$_text = t0;
        this._interpolation_buffer0$_contents = t1;
      },
      MergedMapView0: function MergedMapView0(t0, t1) {
        this._merged_map_view$_mapsByKey = t0;
        this.$ti = t1;
      },
      RenderContext0: function RenderContext0() {},
      RenderContextOptions0: function RenderContextOptions0() {},
      RenderContextResult0: function RenderContextResult0() {},
      RenderContextResultStats0: function RenderContextResultStats0() {},
      VariableDeclaration$0(
        $name,
        expression,
        span,
        comment,
        global,
        guarded,
        namespace
      ) {
        if (namespace != null && global)
          H.throwExpression(P.ArgumentError$(string$.Other_, null));
        return new Z.VariableDeclaration0(
          namespace,
          $name,
          expression,
          guarded,
          global,
          span
        );
      },
      VariableDeclaration0: function VariableDeclaration0(
        t0,
        t1,
        t2,
        t3,
        t4,
        t5
      ) {
        var _ = this;
        _.namespace = t0;
        _.name = t1;
        _.expression = t2;
        _.isGuarded = t3;
        _.isGlobal = t4;
        _.span = t5;
      },
    };
  var holders = [
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    X,
    Y,
    Z,
  ];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw H.wrapException(
        P.NoSuchMethodError$(
          receiver,
          invocation.get$memberName(),
          invocation.get$positionalArguments(),
          invocation.get$namedArguments()
        )
      );
    },
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1,
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return 'null';
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return C.Type_Null_Yyn;
    },
    $isNull: 1,
  };
  J.JavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isJsSystemError: 1,
    $is_NodeSassColor: 1,
    $isJSFunction0: 1,
    $isNodeImporterResult0: 1,
    $is_NodeSassList: 1,
    $is_NodeSassMap: 1,
    $is_NodeSassNumber: 1,
    $isRenderContextOptions0: 1,
    $isRenderOptions: 1,
    $isRenderResult: 1,
    $is_NodeSassString: 1,
    get$isTTY(obj) {
      return obj.isTTY;
    },
    get$write(obj) {
      return obj.write;
    },
    write$1(receiver, p0) {
      return receiver.write(p0);
    },
    createInterface$1(receiver, p0) {
      return receiver.createInterface(p0);
    },
    on$2(receiver, p0, p1) {
      return receiver.on(p0, p1);
    },
    close$0(receiver) {
      return receiver.close();
    },
    setPrompt$1(receiver, p0) {
      return receiver.setPrompt(p0);
    },
    get$length(obj) {
      return obj.length;
    },
    toString$0(receiver) {
      return receiver.toString();
    },
    clear$0(receiver) {
      return receiver.clear();
    },
    existsSync$1(receiver, p0) {
      return receiver.existsSync(p0);
    },
    mkdirSync$1(receiver, p0) {
      return receiver.mkdirSync(p0);
    },
    readdirSync$1(receiver, p0) {
      return receiver.readdirSync(p0);
    },
    readFileSync$2(receiver, p0, p1) {
      return receiver.readFileSync(p0, p1);
    },
    statSync$1(receiver, p0) {
      return receiver.statSync(p0);
    },
    unlinkSync$1(receiver, p0) {
      return receiver.unlinkSync(p0);
    },
    writeFileSync$2(receiver, p0, p1) {
      return receiver.writeFileSync(p0, p1);
    },
    get$path(obj) {
      return obj.path;
    },
    isDirectory$0(receiver) {
      return receiver.isDirectory();
    },
    isFile$0(receiver) {
      return receiver.isFile();
    },
    get$mtime(obj) {
      return obj.mtime;
    },
    getTime$0(receiver) {
      return receiver.getTime();
    },
    get$message(obj) {
      return obj.message;
    },
    message$1(receiver, p0) {
      return receiver.message(p0);
    },
    get$code(obj) {
      return obj.code;
    },
    get$syscall(obj) {
      return obj.syscall;
    },
    get$env(obj) {
      return obj.env;
    },
    get$exitCode(obj) {
      return obj.exitCode;
    },
    set$exitCode(obj, v) {
      return (obj.exitCode = v);
    },
    get$platform(obj) {
      return obj.platform;
    },
    get$stderr(obj) {
      return obj.stderr;
    },
    get$stdin(obj) {
      return obj.stdin;
    },
    get$name(obj) {
      return obj.name;
    },
    call$2(receiver, p0, p1) {
      return receiver.call(p0, p1);
    },
    call$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$0(receiver) {
      return receiver.call();
    },
    call$3$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$2$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$1$1(receiver, p0) {
      return receiver.call(p0);
    },
    call$3(receiver, p0, p1, p2) {
      return receiver.call(p0, p1, p2);
    },
    call$3$3(receiver, p0, p1, p2) {
      return receiver.call(p0, p1, p2);
    },
    call$2$2(receiver, p0, p1) {
      return receiver.call(p0, p1);
    },
    call$1$0(receiver) {
      return receiver.call();
    },
    call$2$3(receiver, p0, p1, p2) {
      return receiver.call(p0, p1, p2);
    },
    call$1$2(receiver, p0, p1) {
      return receiver.call(p0, p1);
    },
    apply$2(receiver, p0, p1) {
      return receiver.apply(p0, p1);
    },
    get$file(obj) {
      return obj.file;
    },
    get$contents(obj) {
      return obj.contents;
    },
    get$isIndentedSyntax(obj) {
      return obj.isIndentedSyntax;
    },
    get$options(obj) {
      return obj.options;
    },
    get$data(obj) {
      return obj.data;
    },
    get$includePaths(obj) {
      return obj.includePaths;
    },
    get$indentType(obj) {
      return obj.indentType;
    },
    get$indentWidth(obj) {
      return obj.indentWidth;
    },
    get$linefeed(obj) {
      return obj.linefeed;
    },
    set$context(obj, v) {
      return (obj.context = v);
    },
    get$dartValue(obj) {
      return obj.dartValue;
    },
    set$dartValue(obj, v) {
      return (obj.dartValue = v);
    },
    set$render(obj, v) {
      return (obj.render = v);
    },
    set$info(obj, v) {
      return (obj.info = v);
    },
    set$types(obj, v) {
      return (obj.types = v);
    },
    set$NULL(obj, v) {
      return (obj.NULL = v);
    },
    set$TRUE(obj, v) {
      return (obj.TRUE = v);
    },
    set$FALSE(obj, v) {
      return (obj.FALSE = v);
    },
    get$importer(obj) {
      return obj.importer;
    },
    get$functions(obj) {
      return obj.functions;
    },
    get$indentedSyntax(obj) {
      return obj.indentedSyntax;
    },
    get$omitSourceMapUrl(obj) {
      return obj.omitSourceMapUrl;
    },
    get$outFile(obj) {
      return obj.outFile;
    },
    get$outputStyle(obj) {
      return obj.outputStyle;
    },
    get$sourceMap(obj) {
      return obj.sourceMap;
    },
    get$sourceMapContents(obj) {
      return obj.sourceMapContents;
    },
    get$sourceMapEmbed(obj) {
      return obj.sourceMapEmbed;
    },
    get$sourceMapRoot(obj) {
      return obj.sourceMapRoot;
    },
    get$quietDeps(obj) {
      return obj.quietDeps;
    },
    get$verbose(obj) {
      return obj.verbose;
    },
    get$charset(obj) {
      return obj.charset;
    },
    set$cli_pkg_main_0_(obj, v) {
      return (obj.cli_pkg_main_0_ = v);
    },
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return 'JavaScript function for ' + H.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1,
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new H.CastList(
        receiver,
        H._arrayInstanceType(receiver)
          ._eval$1('@<1>')
          ._bind$1($R)
          ._eval$1('CastList<1,2>')
      );
    },
    add$1(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('add'));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('removeAt'));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('insert'));
      t1 = receiver.length;
      if (index > t1)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('insertAll'));
      P.RangeError_checkValueInInterval(index, 0, receiver.length, 'index');
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('removeLast'));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var i,
        element,
        t1,
        retained = [],
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element)) retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end) return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i) receiver[i] = retained[i];
    },
    where$1(receiver, f) {
      return new H.WhereIterable(
        receiver,
        f,
        H._arrayInstanceType(receiver)._eval$1('WhereIterable<1>')
      );
    },
    expand$1$1(receiver, f, $T) {
      return new H.ExpandIterable(
        receiver,
        f,
        H._arrayInstanceType(receiver)
          ._eval$1('@<1>')
          ._bind$1($T)
          ._eval$1('ExpandIterable<1,2>')
      );
    },
    addAll$1(receiver, collection) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('addAll'));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0(); )
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var i,
        len = array.length;
      if (len === 0) return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i) receiver.push(array[i]);
    },
    map$1$1(receiver, f, $T) {
      return new H.MappedListIterable(
        receiver,
        f,
        H._arrayInstanceType(receiver)
          ._eval$1('@<1>')
          ._bind$1($T)
          ._eval$1('MappedListIterable<1,2>')
      );
    },
    join$1(receiver, separator) {
      var i,
        list = P.List_List$filled(receiver.length, '', false, type$.String);
      for (i = 0; i < receiver.length; ++i) list[i] = H.S(receiver[i]);
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    take$1(receiver, n) {
      return H.SubListIterable$(
        receiver,
        0,
        H.checkNotNullable(n, 'count', type$.int),
        H._arrayInstanceType(receiver)._precomputed1
      );
    },
    skip$1(receiver, n) {
      return H.SubListIterable$(
        receiver,
        n,
        null,
        H._arrayInstanceType(receiver)._precomputed1
      );
    },
    fold$1$2(receiver, initialValue, combine) {
      var value,
        i,
        $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    elementAt$1(receiver, index) {
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      var end0 = receiver.length;
      if (start > end0)
        throw H.wrapException(
          P.RangeError$range(start, 0, end0, 'start', null)
        );
      if (end == null) end = end0;
      else if (end < start || end > end0)
        throw H.wrapException(
          P.RangeError$range(end, start, end0, 'end', null)
        );
      if (start === end)
        return H._setArrayType([], H._arrayInstanceType(receiver));
      return H._setArrayType(
        receiver.slice(start, end),
        H._arrayInstanceType(receiver)
      );
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      P.RangeError_checkValidRange(start, end, receiver.length);
      return H.SubListIterable$(
        receiver,
        start,
        end,
        H._arrayInstanceType(receiver)._precomputed1
      );
    },
    get$first(receiver) {
      if (receiver.length > 0) return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0) return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) return receiver[0];
      if (t1 === 0) throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    removeRange$2(receiver, start, end) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('removeRange'));
      P.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$('setRange'));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0) return;
      P.RangeError_checkNotNegative(skipCount, 'skipCount');
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(
          0,
          false
        );
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$('fill range'));
      P.RangeError_checkValidRange(start, end, receiver.length);
      H._arrayInstanceType(receiver)._precomputed1._as(fillValue);
      for (i = start; i < end; ++i) receiver[i] = fillValue;
    },
    any$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i])) return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var i,
        end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!test.call$1(receiver[i])) return false;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$reversed(receiver) {
      return new H.ReversedListIterable(
        receiver,
        H._arrayInstanceType(receiver)._eval$1('ReversedListIterable<1>')
      );
    },
    sort$1(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$('sort'));
      H.Sort_sort(
        receiver,
        compare == null
          ? J._interceptors_JSArray__compareAny$closure()
          : compare
      );
    },
    sort$0($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length) return -1;
      for (i = 0; i < $length; ++i) if (J.$eq$(receiver[i], element)) return i;
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other)) return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return P.IterableBase_iterableToFullString(receiver, '[', ']');
    },
    toList$1$growable(receiver, growable) {
      var t1 = H._setArrayType(
        receiver.slice(0),
        H._arrayInstanceType(receiver)
      );
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(receiver) {
      return P.LinkedHashSet_LinkedHashSet$from(
        receiver,
        H._arrayInstanceType(receiver)._precomputed1
      );
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length);
    },
    get$hashCode(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$('set length'));
      if (newLength < 0)
        throw H.wrapException(
          P.RangeError$range(newLength, 0, null, 'newLength', null)
        );
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$('indexed set'));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add(receiver, other) {
      var t1 = P.List_List$of(
        receiver,
        true,
        H._arrayInstanceType(receiver)._precomputed1
      );
      this.addAll$1(t1, other);
      return t1;
    },
    indexWhere$1(receiver, test) {
      var i;
      if (0 >= receiver.length) return -1;
      for (i = 0; i < receiver.length; ++i)
        if (test.call$1(receiver[i])) return i;
      return -1;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      return H._instanceType(this)._precomputed1._as(this._current);
    },
    moveNext$0() {
      var t2,
        _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    },
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      if (receiver < b) return -1;
      else if (receiver > b) return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative) return 0;
          if (this.get$isNegative(receiver)) return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b)) return 0;
        return 1;
      } else return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648) return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d)) return d;
      throw H.wrapException(P.UnsupportedError$('' + receiver + '.ceil()'));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d)) return d;
      throw H.wrapException(P.UnsupportedError$('' + receiver + '.floor()'));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0) return Math.round(receiver);
      } else if (receiver > -1 / 0) return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$('' + receiver + '.round()'));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0) return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0) return upperLimit;
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, match, exponent, t1;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, 'radix', null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(
          P.UnsupportedError$('Unexpected toString result: ' + result)
        );
      result = match[1];
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul('0', exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0) return '-0.0';
      else return '' + receiver;
    },
    get$hashCode(receiver) {
      var absolute,
        floorLog2,
        factor,
        scaled,
        intValue = receiver | 0;
      if (receiver === intValue) return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = (Math.log(absolute) / 0.6931471805599453) | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return (
        ((((scaled * 9007199254740992) | 0) +
          ((scaled * 3542243181176521) | 0)) *
          599197 +
          floorLog2 * 1259) &
        536870911
      );
    },
    $add(receiver, other) {
      return receiver + other;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0) return 0;
      if (result > 0) return result;
      if (other < 0) return result - other;
      else return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1) return (receiver / other) | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver
        ? (receiver / other) | 0
        : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0) return Math.floor(quotient);
      } else if (quotient > -1 / 0) return Math.ceil(quotient);
      throw H.wrapException(
        P.UnsupportedError$(
          'Result of truncating division is ' +
            H.S(quotient) +
            ': ' +
            H.S(receiver) +
            ' ~/ ' +
            other
        )
      );
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0) t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = (receiver >> t1) >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other) throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1,
  };
  J.JSInt.prototype = { $isint: 1 };
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1,
        i,
        _null = null;
      if (start < 0 || start > string.length)
        throw H.wrapException(
          P.RangeError$range(start, 0, string.length, _null, _null)
        );
      t1 = receiver.length;
      if (start + t1 > string.length) return _null;
      for (i = 0; i < t1; ++i)
        if (
          this.codeUnitAt$1(string, start + i) !==
          this._codeUnitAt$1(receiver, i)
        )
          return _null;
      return new H.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1) return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      P.RangeError_checkValueInInterval(0, 0, receiver.length, 'startIndex');
      return H.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      if (typeof pattern == 'string')
        return H._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else if (
        pattern instanceof H.JSSyntaxRegExp &&
        pattern.get$_nativeAnchoredVersion().exec('').length - 2 === 0
      )
        return H._setArrayType(
          receiver.split(pattern._nativeRegExp),
          type$.JSArray_String
        );
      else return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = P.RangeError_checkValidRange(start, end, receiver.length);
      return H.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1,
        start,
        $length,
        match,
        matchStart,
        matchEnd,
        result = H._setArrayType([], type$.JSArray_String);
      for (
        t1 = J.allMatches$1$s(pattern, receiver),
          t1 = t1.get$iterator(t1),
          start = 0,
          $length = 1;
        t1.moveNext$0();

      ) {
        match = t1.get$current();
        matchStart = match.get$start(match);
        matchEnd = match.get$end(match);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart) continue;
        result.push(this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        result.push(this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw H.wrapException(
          P.RangeError$range(index, 0, receiver.length, null, null)
        );
      if (typeof pattern == 'string') {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length) return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(
        start,
        P.RangeError_checkValidRange(start, end, receiver.length)
      );
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex,
        t1,
        endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0) return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex) return '';
      } else startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 =
        this.codeUnitAt$1(result, t1) === 133
          ? J.JSString__skipTrailingWhitespace(result, t1)
          : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex) return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != 'undefined') {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0) return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(
          receiver,
          receiver.length
        );
        result = receiver;
      }
      if (endIndex === result.length) return result;
      if (endIndex === 0) return '';
      return result.substring(0, endIndex);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times) return '';
      if (times === 1 || receiver.length === 0) return receiver;
      if (times !== times >>> 0) throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ''; true; ) {
        if ((times & 1) === 1) result = s + result;
        times = times >>> 1;
        if (times === 0) break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0) return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0) return receiver;
      return receiver + this.$mul(' ', delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(
          P.RangeError$range(start, 0, receiver.length, null, null)
        );
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2, i;
      if (start == null) start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(
          P.RangeError$range(start, 0, receiver.length, null, null)
        );
      if (typeof pattern == 'string') {
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2) start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null) return i;
      return -1;
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw H.wrapException(
          P.RangeError$range(startIndex, 0, t1, null, null)
        );
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1(receiver, other) {
      var t1;
      if (receiver === other) t1 = 0;
      else t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = (hash + receiver.charCodeAt(i)) & 536870911;
        hash = (hash + ((hash & 524287) << 10)) & 536870911;
        hash ^= hash >> 6;
      }
      hash = (hash + ((hash & 67108863) << 3)) & 536870911;
      hash ^= hash >> 11;
      return (hash + ((hash & 16383) << 15)) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isComparable: 1,
    $isString: 1,
  };
  H._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = H._instanceType(this);
      return new H.CastIterator(
        J.get$iterator$ax(this.get$_source()),
        t1._eval$1('@<1>')._bind$1(t1._rest[1])._eval$1('CastIterator<1,2>')
      );
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(
        J.skip$1$ax(this.get$_source(), count),
        t1._precomputed1,
        t1._rest[1]
      );
    },
    take$1(_, count) {
      var t1 = H._instanceType(this);
      return H.CastIterable_CastIterable(
        J.take$1$ax(this.get$_source(), count),
        t1._precomputed1,
        t1._rest[1]
      );
    },
    elementAt$1(_, index) {
      return H._instanceType(this)._rest[1]._as(
        J.elementAt$1$ax(this.get$_source(), index)
      );
    },
    get$first(_) {
      return H._instanceType(this)._rest[1]._as(
        J.get$first$ax(this.get$_source())
      );
    },
    get$last(_) {
      return H._instanceType(this)._rest[1]._as(
        J.get$last$ax(this.get$_source())
      );
    },
    get$single(_) {
      return H._instanceType(this)._rest[1]._as(
        J.get$single$ax(this.get$_source())
      );
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    },
  };
  H.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
  };
  H.CastIterable.prototype = {
    get$_source() {
      return this._source;
    },
  };
  H._EfficientLengthCastIterable.prototype = { $isEfficientLengthIterable: 1 };
  H._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      J.$indexSet$ax(this._source, index, this.$ti._precomputed1._as(value));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      J.add$1$ax(this._source, this.$ti._precomputed1._as(value));
    },
    sort$1(_, compare) {
      var t1 =
        compare == null
          ? null
          : new H._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return H.CastIterable_CastIterable(
        J.getRange$2$ax(this._source, start, end),
        t1._precomputed1,
        t1._rest[1]
      );
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(
        this._source,
        start,
        end,
        H.CastIterable_CastIterable(iterable, t1._rest[1], t1._precomputed1),
        skipCount
      );
    },
    fillRange$3(_, start, end, fillValue) {
      J.fillRange$3$ax(
        this._source,
        start,
        end,
        this.$ti._precomputed1._as(fillValue)
      );
    },
    $isEfficientLengthIterable: 1,
    $isList: 1,
  };
  H._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1('int(1,1)');
    },
  };
  H.CastList.prototype = {
    cast$1$0(_, $R) {
      return new H.CastList(
        this._source,
        this.$ti._eval$1('@<1>')._bind$1($R)._eval$1('CastList<1,2>')
      );
    },
    get$_source() {
      return this._source;
    },
  };
  H.CastSet.prototype = {
    add$1(_, value) {
      return this._source.add$1(0, this.$ti._precomputed1._as(value));
    },
    addAll$1(_, elements) {
      var t1 = this.$ti;
      this._source.addAll$1(
        0,
        H.CastIterable_CastIterable(elements, t1._rest[1], t1._precomputed1)
      );
    },
    difference$1(other) {
      var t1,
        _this = this;
      if (_this._emptySet != null) return _this._conditionalAdd$2(other, false);
      t1 = _this.$ti;
      return new H.CastSet(
        _this._source.difference$1(other),
        null,
        t1._eval$1('@<1>')._bind$1(t1._rest[1])._eval$1('CastSet<1,2>')
      );
    },
    _conditionalAdd$2(other, otherContains) {
      var t3,
        castElement,
        emptySet = this._emptySet,
        t1 = this.$ti,
        t2 = t1._rest[1],
        result =
          emptySet == null
            ? P.LinkedHashSet_LinkedHashSet(t2)
            : emptySet.call$1$0(t2);
      for (
        t2 = this._source,
          t2 = t2.get$iterator(t2),
          t3 = other._source,
          t1 = t1._rest[1];
        t2.moveNext$0();

      ) {
        castElement = t1._as(t2.get$current());
        if (otherContains === t3.contains$1(0, castElement))
          result.add$1(0, castElement);
      }
      return result;
    },
    toSet$0(_) {
      var emptySet = this._emptySet,
        t1 = this.$ti._rest[1],
        result =
          emptySet == null
            ? P.LinkedHashSet_LinkedHashSet(t1)
            : emptySet.call$1$0(t1);
      result.addAll$1(0, this);
      return result;
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_source() {
      return this._source;
    },
  };
  H.LateError.prototype = {
    toString$0(_) {
      var t1 = 'LateInitializationError: ' + this._message;
      return t1;
    },
  };
  H.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    },
  };
  H.nullFuture_closure.prototype = {
    call$0() {
      var t1 = new P._Future($.Zone__current, type$._Future_Null);
      t1._asyncComplete$1(null);
      return t1;
    },
    $signature: 1,
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator(_) {
      return new H.ListIterator(this, this.get$length(this));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    get$single(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      return _this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i,
        _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element)) return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    any$1(_, test) {
      var i,
        _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(_this.elementAt$1(0, i))) return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first,
        t1,
        i,
        _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0) return '';
        first = H.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ''; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, test);
    },
    map$1$1(_, toElement, $T) {
      return new H.MappedListIterable(
        this,
        toElement,
        H._instanceType(this)
          ._eval$1('@<ListIterable.E>')
          ._bind$1($T)
          ._eval$1('MappedListIterable<1,2>')
      );
    },
    reduce$1(_, combine) {
      var value,
        i,
        _this = this,
        $length = _this.get$length(_this);
      if ($length === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$1$2(_, initialValue, combine) {
      var value,
        i,
        _this = this,
        $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    skip$1(_, count) {
      return H.SubListIterable$(
        this,
        count,
        null,
        H._instanceType(this)._eval$1('ListIterable.E')
      );
    },
    take$1(_, count) {
      return H.SubListIterable$(
        this,
        0,
        H.checkNotNullable(count, 'count', type$.int),
        H._instanceType(this)._eval$1('ListIterable.E')
      );
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(
        this,
        true,
        H._instanceType(this)._eval$1('ListIterable.E')
      );
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      var i,
        _this = this,
        result = P.LinkedHashSet_LinkedHashSet(
          H._instanceType(_this)._eval$1('ListIterable.E')
        );
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    },
  };
  H.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      P.RangeError_checkNotNegative(t1, 'start');
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        P.RangeError_checkNotNegative(endOrLength, 'end');
        if (t1 > endOrLength)
          throw H.wrapException(
            P.RangeError$range(t1, 0, endOrLength, 'start', null)
          );
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length) return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length) return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length) return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length) return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, 'index', null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart,
        endOrLength,
        _this = this;
      P.RangeError_checkNotNegative(count, 'count');
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new H.EmptyIterable(_this.$ti._eval$1('EmptyIterable<1>'));
      return H.SubListIterable$(
        _this.__internal$_iterable,
        newStart,
        endOrLength,
        _this.$ti._precomputed1
      );
    },
    take$1(_, count) {
      var endOrLength,
        t1,
        newEnd,
        _this = this;
      P.RangeError_checkNotNegative(count, 'count');
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return H.SubListIterable$(
          _this.__internal$_iterable,
          t1,
          newEnd,
          _this.$ti._precomputed1
        );
      else {
        if (endOrLength < newEnd) return _this;
        return H.SubListIterable$(
          _this.__internal$_iterable,
          t1,
          newEnd,
          _this.$ti._precomputed1
        );
      }
    },
    toList$1$growable(_, growable) {
      var $length,
        result,
        i,
        _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end) end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable
          ? J.JSArray_JSArray$growable(0, t1)
          : J.JSArray_JSArray$fixed(0, t1);
      }
      result = P.List_List$filled(
        $length,
        t2.elementAt$1(t1, start),
        growable,
        _this.$ti._precomputed1
      );
      for (i = 1; i < $length; ++i) {
        result[i] = t2.elementAt$1(t1, start + i);
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
  };
  H.ListIterator.prototype = {
    get$current() {
      return H._instanceType(this)._precomputed1._as(this.__internal$_current);
    },
    moveNext$0() {
      var t3,
        _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    },
  };
  H.MappedIterable.prototype = {
    get$iterator(_) {
      return new H.MappedIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._f
      );
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    get$single(_) {
      return this._f.call$1(J.get$single$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    },
  };
  H.EfficientLengthMappedIterable.prototype = { $isEfficientLengthIterable: 1 };
  H.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      return H._instanceType(this)._rest[1]._as(this.__internal$_current);
    },
  };
  H.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
  };
  H.WhereIterable.prototype = {
    get$iterator(_) {
      return new H.WhereIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._f
      );
    },
    map$1$1(_, toElement, $T) {
      return new H.MappedIterable(
        this,
        toElement,
        this.$ti._eval$1('@<1>')._bind$1($T)._eval$1('MappedIterable<1,2>')
      );
    },
  };
  H.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0(); )
        if (t2.call$1(t1.get$current())) return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
  };
  H.ExpandIterable.prototype = {
    get$iterator(_) {
      return new H.ExpandIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._f,
        C.C_EmptyIterator
      );
    },
  };
  H.ExpandIterator.prototype = {
    get$current() {
      return H._instanceType(this)._rest[1]._as(this.__internal$_current);
    },
    moveNext$0() {
      var t2,
        t3,
        _this = this,
        t1 = _this._currentExpansion;
      if (t1 == null) return false;
      for (t2 = _this._iterator, t3 = _this._f; !t1.moveNext$0(); ) {
        _this.__internal$_current = null;
        if (t2.moveNext$0()) {
          _this._currentExpansion = null;
          t1 = J.get$iterator$ax(t3.call$1(t2.get$current()));
          _this._currentExpansion = t1;
        } else return false;
      }
      _this.__internal$_current = _this._currentExpansion.get$current();
      return true;
    },
  };
  H.TakeIterable.prototype = {
    get$iterator(_) {
      return new H.TakeIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._takeCount
      );
    },
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1) return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1,
  };
  H.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0) return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0)
        return H._instanceType(this)._precomputed1._as(null);
      return this._iterator.get$current();
    },
  };
  H.SkipIterable.prototype = {
    skip$1(_, count) {
      P.RangeError_checkNotNegative(count, 'count');
      return new H.SkipIterable(
        this.__internal$_iterable,
        this._skipCount + count,
        H._instanceType(this)._eval$1('SkipIterable<1>')
      );
    },
    get$iterator(_) {
      return new H.SkipIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._skipCount
      );
    },
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length =
        J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0) return $length;
      return 0;
    },
    skip$1(_, count) {
      P.RangeError_checkNotNegative(count, 'count');
      return new H.EfficientLengthSkipIterable(
        this.__internal$_iterable,
        this._skipCount + count,
        this.$ti
      );
    },
    $isEfficientLengthIterable: 1,
  };
  H.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
  };
  H.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new H.SkipWhileIterator(
        J.get$iterator$ax(this.__internal$_iterable),
        this._f
      );
    },
  };
  H.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1,
        t2,
        _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0(); )
          if (!t2.call$1(t1.get$current())) return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
  };
  H.EmptyIterable.prototype = {
    get$iterator(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, 'index', null));
    },
    contains$1(_, element) {
      return false;
    },
    join$1(_, separator) {
      return '';
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    where$1(_, test) {
      return this;
    },
    map$1$1(_, toElement, $T) {
      return new H.EmptyIterable($T._eval$1('EmptyIterable<0>'));
    },
    skip$1(_, count) {
      P.RangeError_checkNotNegative(count, 'count');
      return this;
    },
    take$1(_, count) {
      P.RangeError_checkNotNegative(count, 'count');
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      return P.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    },
  };
  H.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw H.wrapException(H.IterableElementError_noElement());
    },
  };
  H.FollowedByIterable.prototype = {
    get$iterator(_) {
      return new H.FollowedByIterator(
        J.get$iterator$ax(this.__internal$_first),
        this._second
      );
    },
    get$length(_) {
      var t1 = this._second;
      return J.get$length$asx(this.__internal$_first) + t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1;
      if (J.get$isEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = t1.get$isEmpty(t1);
      } else t1 = false;
      return t1;
    },
    get$isNotEmpty(_) {
      var t1;
      if (!J.get$isNotEmpty$asx(this.__internal$_first)) {
        t1 = this._second;
        t1 = t1.get$isNotEmpty(t1);
      } else t1 = true;
      return t1;
    },
    contains$1(_, value) {
      return (
        J.contains$1$asx(this.__internal$_first, value) ||
        this._second.contains$1(0, value)
      );
    },
    get$first(_) {
      var t1,
        iterator = J.get$iterator$ax(this.__internal$_first);
      if (iterator.moveNext$0()) return iterator.get$current();
      t1 = this._second;
      return t1.get$first(t1);
    },
    get$last(_) {
      var last,
        t1 = this._second,
        iterator = t1.get$iterator(t1);
      if (iterator.moveNext$0()) {
        last = iterator.get$current();
        for (; iterator.moveNext$0(); ) last = iterator.get$current();
        return last;
      }
      return J.get$last$ax(this.__internal$_first);
    },
  };
  H.EfficientLengthFollowedByIterable.prototype = {
    elementAt$1(_, index) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1),
        firstLength = t2.get$length(t1);
      if (index < firstLength) return t2.elementAt$1(t1, index);
      return this._second.elementAt$1(0, index - firstLength);
    },
    get$first(_) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1)) return t2.get$first(t1);
      t1 = this._second;
      return t1.get$first(t1);
    },
    get$last(_) {
      var t1 = this._second;
      if (t1.get$isNotEmpty(t1)) return t1.get$last(t1);
      return J.get$last$ax(this.__internal$_first);
    },
    $isEfficientLengthIterable: 1,
  };
  H.FollowedByIterator.prototype = {
    moveNext$0() {
      var t1,
        _this = this;
      if (_this._currentIterator.moveNext$0()) return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        t1 = t1.get$iterator(t1);
        _this._currentIterator = t1;
        _this._nextIterable = null;
        return t1.moveNext$0();
      }
      return false;
    },
    get$current() {
      return this._currentIterator.get$current();
    },
  };
  H.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new H.WhereTypeIterator(
        J.get$iterator$ax(this._source),
        this.$ti._eval$1('WhereTypeIterator<1>')
      );
    },
  };
  H.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0(); )
        if (t2._is(t1.get$current())) return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
  };
  H.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot change the length of a fixed-length list')
      );
    },
    add$1(receiver, value) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot add to a fixed-length list')
      );
    },
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify an unmodifiable list')
      );
    },
    set$length(_, newLength) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot change the length of an unmodifiable list')
      );
    },
    add$1(_, value) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot add to an unmodifiable list')
      );
    },
    sort$1(_, compare) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify an unmodifiable list')
      );
    },
    setRange$4(_, start, end, iterable, skipCount) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify an unmodifiable list')
      );
    },
    fillRange$3(_, start, end, fillValue) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify an unmodifiable list')
      );
    },
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    },
  };
  H.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null) return hash;
      hash = (664597 * J.get$hashCode$(this.__internal$_name)) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof H.Symbol &&
        this.__internal$_name == other.__internal$_name
      );
    },
    $isSymbol0: 1,
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet(_, key, val) {
      H.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      H.ConstantMap__throwUnmodifiable();
    },
    addAll$1(_, other) {
      H.ConstantMap__throwUnmodifiable();
    },
    get$entries(_) {
      return this.entries$body$ConstantMap(
        0,
        H._instanceType(this)._eval$1('MapEntry<1,2>')
      );
    },
    entries$body$ConstantMap($async$_, $async$type) {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var _ = $async$_;
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          t1,
          t2,
          key;
        return function $async$get$entries($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = $async$self.get$keys($async$self)),
                  (t1 = t1.get$iterator(t1)),
                  (t2 = H._instanceType($async$self)),
                  (t2 = t2
                    ._eval$1('@<1>')
                    ._bind$1(t2._rest[1])
                    ._eval$1('MapEntry<1,2>'));
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                $async$goto = 4;
                return new P.MapEntry(key, $async$self.$index(0, key), t2);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    $isMap: 1,
  };
  H.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != 'string') return false;
      if ('__proto__' === key) return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key)) return null;
      return this._jsObject[key];
    },
    forEach$1(_, f) {
      var t1,
        t2,
        i,
        key,
        keys = this.__js_helper$_keys;
      for (t1 = keys.length, t2 = this._jsObject, i = 0; i < t1; ++i) {
        key = keys[i];
        f.call$2(key, t2[key]);
      }
    },
    get$keys(_) {
      return new H._ConstantMapKeyIterable(
        this,
        this.$ti._eval$1('_ConstantMapKeyIterable<1>')
      );
    },
    get$values(_) {
      var t1 = this.$ti;
      return H.MappedIterable_MappedIterable(
        this.__js_helper$_keys,
        new H.ConstantStringMap_values_closure(this),
        t1._precomputed1,
        t1._rest[1]
      );
    },
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1(key) {
      return this.$this._jsObject[key];
    },
    $signature() {
      return this.$this.$ti._eval$1('2(1)');
    },
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__js_helper$_map.__js_helper$_keys;
      return new J.ArrayIterator(t1, t1.length);
    },
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_keys.length;
    },
  };
  H.Instantiation.prototype = {
    toString$0(_) {
      var types =
        '<' +
        C.JSArray_methods.join$1(
          [H.createRuntimeType(this.$ti._precomputed1)],
          ', '
        ) +
        '>';
      return this._genericClosure.toString$0(0) + ' with ' + types;
    },
  };
  H.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return H.instantiatedGenericFunctionType(
        H.closureFunctionType(this._genericClosure),
        this.$ti
      );
    },
  };
  H.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this.__js_helper$_memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1,
        argumentCount,
        list,
        index,
        _this = this;
      if (_this.__js_helper$_kind === 1) return C.List_empty20;
      t1 = _this._arguments;
      argumentCount =
        t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0) return C.List_empty20;
      list = [];
      for (index = 0; index < argumentCount; ++index) list.push(t1[index]);
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1,
        namedArgumentCount,
        t2,
        namedArgumentsStartIndex,
        map,
        i,
        _this = this;
      if (_this.__js_helper$_kind !== 0) return C.Map_empty9;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex =
        t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0) return C.Map_empty9;
      map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new H.Symbol(t1[i]), t2[namedArgumentsStartIndex + i]);
      return new H.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1 = this._box_0;
      t1.names = t1.names + '$' + $name;
      this.namedArgumentList.push($name);
      this.$arguments.push(argument);
      ++t1.argumentCount;
    },
    $signature: 156,
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result,
        t1,
        _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null) return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1) result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1) result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1) result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1) result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1) result.receiver = match[t1 + 1];
      return result;
    },
  };
  H.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null) return 'NoSuchMethodError: ' + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    },
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2,
        _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null) return 'NoSuchMethodError: ' + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ')';
      return (
        _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ')'
      );
    },
  };
  H.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? 'Error' : 'Error: ' + t1;
    },
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return (
        "Throw of null ('" +
        (this._irritant === null ? 'null' : 'undefined') +
        "' from JavaScript)"
      );
    },
    $isException: 1,
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null) return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === 'object' ? t1.stack : null;
      return (this._trace = trace == null ? '' : trace);
    },
    $isStackTrace: 1,
  };
  H.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return (
        "Closure '" + H.unminifyOrTag($name == null ? 'unknown' : $name) + "'"
      );
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    'call*': 'call$1',
    $requiredArgCount: 1,
    $defaultValues: null,
  };
  H.Closure0Args.prototype = { 'call*': 'call$0', $requiredArgCount: 0 };
  H.Closure2Args.prototype = { 'call*': 'call$2', $requiredArgCount: 2 };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null) return 'Closure of unknown static method';
      return "Closure '" + H.unminifyOrTag($name) + "'";
    },
  };
  H.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!(other instanceof H.BoundClosure)) return false;
      return (
        this.$_target === other.$_target && this._receiver === other._receiver
      );
    },
    get$hashCode(_) {
      return (
        (H.objectHashCode(this._receiver) ^
          H.Primitives_objectHashCode(this.$_target)) >>>
        0
      );
    },
    toString$0(_) {
      return (
        "Closure '" +
        this.$_name +
        "' of " +
        ("Instance of '" + H.Primitives_objectTypeName(this._receiver) + "'")
      );
    },
  };
  H.RuntimeError.prototype = {
    toString$0(_) {
      return 'RuntimeError: ' + this.message;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  H._Required.prototype = {};
  H.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    get$keys(_) {
      return new H.LinkedHashMapKeyIterable(
        this,
        H._instanceType(this)._eval$1('LinkedHashMapKeyIterable<1>')
      );
    },
    get$values(_) {
      var _this = this,
        t1 = H._instanceType(_this);
      return H.MappedIterable_MappedIterable(
        _this.get$keys(_this),
        new H.JsLinkedHashMap_values_closure(_this),
        t1._precomputed1,
        t1._rest[1]
      );
    },
    containsKey$1(key) {
      var strings,
        nums,
        _this = this;
      if (typeof key == 'string') {
        strings = _this._strings;
        if (strings == null) return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key == 'number' && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null) return false;
        return _this._containsTableEntry$2(nums, key);
      } else return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null) return false;
      return (
        _this.internalFindBucketIndex$2(
          _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)),
          key
        ) >= 0
      );
    },
    addAll$1(_, other) {
      other.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings,
        cell,
        t1,
        nums,
        _this = this,
        _null = null;
      if (typeof key == 'string') {
        strings = _this._strings;
        if (strings == null) return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == 'number' && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null) return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else return _this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket,
        index,
        _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null) return null;
      bucket = _this._getTableBucket$2(
        rest,
        _this.internalComputeHashCode$1(key)
      );
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0) return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings,
        nums,
        _this = this;
      if (typeof key == 'string') {
        strings = _this._strings;
        _this._addHashTableEntry$3(
          strings == null
            ? (_this._strings = _this._newHashTable$0())
            : strings,
          key,
          value
        );
      } else if (typeof key == 'number' && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(
          nums == null ? (_this._nums = _this._newHashTable$0()) : nums,
          key,
          value
        );
      } else _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var hash,
        bucket,
        index,
        _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [
          _this._newLinkedCell$2(key, value),
        ]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0) bucket[index].hashMapCellValue = value;
        else bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var value,
        _this = this;
      if (_this.containsKey$1(key))
        return H._instanceType(_this)._rest[1]._as(_this.$index(0, key));
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == 'string')
        return _this.__js_helper$_removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == 'number' && (key & 0x3ffffff) === key)
        return _this.__js_helper$_removeHashTableEntry$2(_this._nums, key);
      else return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash,
        bucket,
        index,
        cell,
        _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null) return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0) return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0) _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1(_, action) {
      var _this = this,
        cell = _this._first,
        modifications = _this._modifications;
      for (; cell != null; ) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell = this._getTableCell$2(table, key);
      if (cell == null)
        this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
      else cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null) return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null) return null;
      this.__js_helper$_unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = (this._modifications + 1) & 67108863;
    },
    _newLinkedCell$2(key, value) {
      var t1,
        _this = this,
        cell = new H.LinkedHashMapCell(key, value);
      if (_this._first == null) _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null) _this._first = next;
      else previous._next = next;
      if (next == null) _this._last = previous;
      else next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key)) return i;
      return -1;
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2(table, key) {
      return table[key];
    },
    _getTableBucket$2(table, key) {
      return table[key];
    },
    _setTableEntry$3(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2(table, key) {
      delete table[key];
    },
    _containsTableEntry$2(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0() {
      var _s20_ = '<non-identifier-key>',
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this;
      return H._instanceType(t1)._rest[1]._as(t1.$index(0, each));
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1('2(1)');
    },
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      this.$this.$indexSet(0, key, value);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1('~(1,2)');
    },
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications);
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    },
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell,
        _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this._cell = cell._next;
        return true;
      }
    },
  };
  H.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 80,
  };
  H.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 490,
  };
  H.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(tag);
    },
    $signature: 485,
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return 'RegExp/' + this.pattern + '/' + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null) return t1;
      t1 = _this._nativeRegExp;
      return (_this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(
        _this.pattern,
        t1.multiline,
        !t1.ignoreCase,
        t1.unicode,
        t1.dotAll,
        true
      ));
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null) return t1;
      t1 = _this._nativeRegExp;
      return (_this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(
        _this.pattern + '|()',
        t1.multiline,
        !t1.ignoreCase,
        t1.unicode,
        t1.dotAll,
        true
      ));
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null) return null;
      return new H._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null) return null;
      return new H._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null) return null;
      if (match.pop() != null) return null;
      return new H._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(
          P.RangeError$range(start, 0, string.length, null, null)
        );
      return this._execAnchored$2(string, start);
    },
  };
  H._MatchImplementation.prototype = {
    get$start(_) {
      return this._match.index;
    },
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $isMatch: 1,
    $isRegExpMatch: 1,
  };
  H._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new H._AllMatchesIterator(
        this._re,
        this.__js_helper$_string,
        this.__js_helper$_start
      );
    },
  };
  H._AllMatchesIterator.prototype = {
    get$current() {
      return type$.RegExpMatch._as(this.__js_helper$_current);
    },
    moveNext$0() {
      var t1,
        t2,
        t3,
        match,
        nextIndex,
        _this = this,
        string = _this.__js_helper$_string;
      if (string == null) return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = C.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else t1 = false;
              } else t1 = false;
            } else t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
  };
  H.StringMatch.prototype = {
    get$end(_) {
      return this.start + this.pattern.length;
    },
    $isMatch: 1,
    get$start(receiver) {
      return this.start;
    },
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new H._StringAllMatchesIterator(
        this._input,
        this._pattern,
        this.__js_helper$_index
      );
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0) return new H.StringMatch(index, t1);
      throw H.wrapException(H.IterableElementError_noElement());
    },
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index,
        end,
        _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new H.StringMatch(index, t2);
      _this.__js_helper$_index =
        end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
  };
  H._Cell.prototype = {
    _readLocal$0() {
      var t1 = this._value;
      if (t1 === this)
        throw H.wrapException(
          new H.LateError(
            "Local '" + this.__late_helper$_name + "' has not been initialized."
          )
        );
      return t1;
    },
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
  };
  H.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count,
        sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, 'start');
      this._checkPosition$3(receiver, end, targetLength, 'end');
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$('Not enough elements'));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1,
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
  };
  H.NativeFloat32List.prototype = {
    sublist$2(receiver, start, end) {
      return new Float32Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeFloat64List.prototype = {
    sublist$2(receiver, start, end) {
      return new Float64Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeInt16List.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeInt32List.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeInt8List.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeUint16List.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeUint32List.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeUint8ClampedList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
  };
  H.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(
        receiver.subarray(
          start,
          H._checkValidRange(start, end, receiver.length)
        )
      );
    },
    $isNativeUint8List: 1,
    $isUint8List: 1,
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    },
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    toString$0(_) {
      return H._rtiToString(this._rti, null);
    },
  };
  H._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    },
  };
  H._TypeError.prototype = {
    get$message(_) {
      return this.__rti$_message;
    },
    $isTypeError: 1,
  };
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 132,
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = callback;
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 40,
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 2,
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 2,
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(
          H.convertDartClosureToJS(
            new P._TimerImpl_internalCallback(this, callback),
            0
          ),
          milliseconds
        );
      else
        throw H.wrapException(P.UnsupportedError$('`setTimeout()` not found.'));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setInterval(
          H.convertDartClosureToJS(
            new P._TimerImpl$periodic_closure(
              this,
              milliseconds,
              Date.now(),
              callback
            ),
            0
          ),
          milliseconds
        );
      else throw H.wrapException(P.UnsupportedError$('Periodic timer.'));
    },
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    $signature: 0,
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration,
        _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 2,
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t1,
        _this = this;
      if (value == null) value = _this.$ti._precomputed1._as(value);
      if (!_this.isSync) _this._future._asyncComplete$1(value);
      else {
        t1 = _this._future;
        if (_this.$ti._eval$1('Future<1>')._is(value)) t1._chainFuture$1(value);
        else t1._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync) t1._completeError$2(e, st);
      else t1._asyncCompleteError$2(e, st);
    },
  };
  P._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 112,
  };
  P._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(
        1,
        new H.ExceptionAndStackTrace(error, stackTrace)
      );
    },
    $signature: 484,
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(errorCode, result);
    },
    $signature: 470,
  };
  P._IterationMarker.prototype = {
    toString$0(_) {
      return 'IterationMarker(' + this.state + ', ' + H.S(this.value) + ')';
    },
  };
  P._SyncStarIterator.prototype = {
    get$current() {
      var nested = this._nestedIterator;
      if (nested == null) return this._async$_current;
      return nested.get$current();
    },
    moveNext$0() {
      var t1,
        value,
        state,
        suspendedBodies,
        inner,
        _this = this;
      for (; true; ) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0()) return true;
          else _this._nestedIterator = null;
        value = (function (body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        })(_this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this._async$_current = null;
              return false;
            }
            _this._body = suspendedBodies.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3) throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (inner instanceof P._SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null) t1 = _this._suspendedBodies = [];
                t1.push(_this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this._async$_current = value;
          return true;
        }
      }
      return false;
    },
  };
  P._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new P._SyncStarIterator(this._outerHelper());
    },
  };
  P.AsyncError.prototype = {
    toString$0(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    },
  };
  P._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1, replacement;
      H.checkNotNullable(error, 'error', type$.Object);
      t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw H.wrapException(P.StateError$('Future already completed'));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
  };
  P._AsyncCompleter.prototype = {
    complete$1(value) {
      var t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw H.wrapException(P.StateError$('Future already completed'));
      t1._asyncComplete$1(value);
    },
    complete$0() {
      return this.complete$1(null);
    },
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6) return true;
      return this.result._zone.runUnary$2$2(
        this.callback,
        asyncError.error,
        type$.bool,
        type$.Object
      );
    },
    handleError$1(asyncError) {
      var exception,
        errorCallback = this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(
          errorCallback,
          t3,
          asyncError.stackTrace,
          t1,
          t2,
          type$.StackTrace
        );
      else result = t4.runUnary$2$2(errorCallback, t3, t1, t2);
      try {
        t1 = result;
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(H.unwrapException(exception))) {
          if ((this.state & 1) !== 0)
            throw H.wrapException(
              P.ArgumentError$(
                "The error handler of Future.then must return a value of the returned future's type",
                'onError'
              )
            );
          throw H.wrapException(
            P.ArgumentError$(
              "The error handler of Future.catchError must return a value of the future's type",
              'onError'
            )
          );
        } else throw exception;
      }
    },
  };
  P._Future.prototype = {
    then$1$2$onError(_, f, onError, $R) {
      var result,
        t1,
        currentZone = $.Zone__current;
      if (currentZone === C.C__RootZone) {
        if (
          onError != null &&
          !type$.dynamic_Function_Object_StackTrace._is(onError) &&
          !type$.dynamic_Function_Object._is(onError)
        )
          throw H.wrapException(
            P.ArgumentError$value(onError, 'onError', string$.Error_)
          );
      } else {
        f = currentZone.registerUnaryCallback$2$1(
          f,
          $R._eval$1('0/'),
          this.$ti._precomputed1
        );
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, $R._eval$1('_Future<0>'));
      t1 = onError == null ? 1 : 3;
      this._addListener$1(
        new P._FutureListener(
          result,
          t1,
          f,
          onError,
          this.$ti._eval$1('@<1>')._bind$1($R)._eval$1('_FutureListener<1,2>')
        )
      );
      return result;
    },
    then$1$1($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result = new P._Future($.Zone__current, $E._eval$1('_Future<0>'));
      this._addListener$1(
        new P._FutureListener(
          result,
          19,
          f,
          onError,
          this.$ti._eval$1('@<1>')._bind$1($E)._eval$1('_FutureListener<1,2>')
        )
      );
      return result;
    },
    whenComplete$1(action) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new P._Future(t2, t1);
      if (t2 !== C.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(
        new P._FutureListener(
          result,
          8,
          action,
          null,
          t1
            ._eval$1('@<1>')
            ._bind$1(t1._precomputed1)
            ._eval$1('_FutureListener<1,2>')
        )
      );
      return result;
    },
    _setValue$1(value) {
      this._state = 8;
      this._resultOrListeners = value;
    },
    _setErrorObject$1(error) {
      this._state = (this._state & 1) | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = (source._state & 30) | (this._state & 1);
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = _this._resultOrListeners;
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(t1);
        }
        _this._zone.scheduleMicrotask$1(
          new P._Future__addListener_closure(_this, listener)
        );
      }
    },
    _prependListeners$1(listeners) {
      var t1,
        existingListeners,
        next,
        cursor,
        next0,
        _this = this,
        _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null) return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = _this._resultOrListeners;
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          t1 = _this._resultOrListeners;
          if ((t1._state & 24) === 0) {
            t1._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(t1);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(
          new P._Future__prependListeners_closure(_box_0, _this)
        );
      }
    },
    _removeListeners$0() {
      var current = this._resultOrListeners;
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (
        current = listeners, prev = null;
        current != null;
        prev = current, current = next
      ) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e,
        s,
        exception,
        _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(
          0,
          new P._Future__chainForeignFuture_closure(_this),
          new P._Future__chainForeignFuture_closure0(_this),
          type$.Null
        );
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(
          new P._Future__chainForeignFuture_closure1(_this, e, s)
        );
      }
    },
    _complete$1(value) {
      var _this = this,
        listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeWithValue$1(value) {
      var _this = this,
        listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(P.AsyncError$(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      if (this.$ti._eval$1('Future<1>')._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(
        new P._Future__asyncCompleteWithValue_closure(this, value)
      );
    },
    _chainFuture$1(value) {
      var _this = this;
      if (_this.$ti._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          _this._zone.scheduleMicrotask$1(
            new P._Future__chainFuture_closure(_this, value)
          );
        } else P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(
        new P._Future__asyncCompleteError_closure(this, error, stackTrace)
      );
    },
    $isFuture: 1,
  };
  P._Future__addListener_closure.prototype = {
    call$0() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0,
  };
  P._Future__prependListeners_closure.prototype = {
    call$0() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0,
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error,
        stackTrace,
        exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 132,
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(error, stackTrace);
    },
    $signature: 96,
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0,
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0,
  };
  P._Future__chainFuture_closure.prototype = {
    call$0() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0,
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0,
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e,
        s,
        t1,
        exception,
        t2,
        originalSource,
        _this = this,
        completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(t1.callback, type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 =
          _this.hasError && _this._box_1.source._resultOrListeners.error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source._resultOrListeners;
        else t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (
        completeResult instanceof P._Future &&
        (completeResult._state & 24) !== 0
      ) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = completeResult._resultOrListeners;
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$z(
          completeResult,
          new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(
            originalSource
          ),
          type$.dynamic
        );
        t1.listenerHasError = false;
      }
    },
    $signature: 0,
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 469,
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(
          t2.callback,
          this.sourceResult,
          t3._eval$1('2/'),
          t3._precomputed1
        );
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0,
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError,
        e,
        s,
        t1,
        exception,
        t2,
        _this = this;
      try {
        asyncError = _this._box_1.source._resultOrListeners;
        t1 = _this._box_0;
        if (
          t1.listener.matchesErrorTest$1(asyncError) &&
          t1.listener.errorCallback != null
        ) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_1.source._resultOrListeners;
        t2 = _this._box_0;
        if (t1.error === e) t2.listenerValueOrError = t1;
        else t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0,
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(
        0,
        new P.Stream_length_closure(t1, this),
        true,
        new P.Stream_length_closure0(t1, future),
        future.get$_completeError()
      );
      return future;
    },
  };
  P.Stream_length_closure.prototype = {
    call$1(_) {
      ++this._box_0.count;
    },
    $signature() {
      return this.$this.$ti._eval$1('~(1)');
    },
  };
  P.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0,
  };
  P.StreamTransformerBase.prototype = {};
  P._StreamController.prototype = {
    get$_pendingEvents() {
      if ((this._state & 8) === 0) return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0() {
      var events,
        _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        return events == null
          ? (_this._varData = new P._StreamImplEvents())
          : events;
      }
      events = _this._varData.get$varData();
      return events;
    },
    get$_subscription() {
      var varData = this._varData;
      return (this._state & 8) !== 0 ? varData.get$varData() : varData;
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new P.StateError('Cannot add event after closing');
      return new P.StateError('Cannot add event while adding a stream');
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture =
          (this._state & 2) !== 0
            ? $.$get$Future__nullFuture()
            : new P._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this,
        t1 = _this._state;
      if (t1 >= 4) throw H.wrapException(_this._badEventState$0());
      if ((t1 & 1) !== 0) _this._sendData$1(value);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value));
    },
    close$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0) return _this._ensureDoneFuture$0();
      if (t1 >= 4) throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0) _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        subscription,
        pendingEvents,
        addState,
        _this = this;
      if ((_this._state & 3) !== 0)
        throw H.wrapException(
          P.StateError$('Stream has already been listened to.')
        );
      t1 = H._instanceType(_this);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = P._BufferingStreamSubscription__registerDataHandler(
        t2,
        onData,
        t1._precomputed1
      );
      t5 = P._BufferingStreamSubscription__registerErrorHandler(t2, onError);
      subscription = new P._ControllerSubscription(
        _this,
        t4,
        t5,
        t2.registerCallback$1$1(onDone, type$.void),
        t2,
        t3,
        t1._eval$1('_ControllerSubscription<1>')
      );
      pendingEvents = _this.get$_pendingEvents();
      t1 = _this._state |= 1;
      if ((t1 & 8) !== 0) {
        addState = _this._varData;
        addState.set$varData(subscription);
        addState.resume$0(0);
      } else _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(
        new P._StreamController__subscribe_closure(_this)
      );
      return subscription;
    },
    _recordCancel$1(subscription) {
      var onCancel,
        cancelResult,
        e,
        s,
        exception,
        result0,
        t1,
        _this = this,
        result = null;
      if ((_this._state & 8) !== 0) result = _this._varData.cancel$0();
      _this._varData = null;
      _this._state = (_this._state & 4294967286) | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult)) result = cancelResult;
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            result0 = new P._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else result = result.whenComplete$1(onCancel);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null) result = result.whenComplete$1(t1);
      else t1.call$0();
      return result;
    },
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 0,
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0,
  };
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(
        new P._DelayedError(error, stackTrace)
      );
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    },
  };
  P._AsyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    get$hashCode(_) {
      return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null) return false;
      if (this === other) return true;
      return (
        other instanceof P._ControllerStream &&
        other._controller === this._controller
      );
    },
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      var t1 = this._controller;
      if ((t1._state & 8) !== 0) t1._varData.pause$0(0);
      P._runGuarded(t1.onPause);
    },
    _onResume$0() {
      var t1 = this._controller;
      if ((t1._state & 8) !== 0) t1._varData.resume$0(0);
      P._runGuarded(t1.onResume);
    },
  };
  P._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      if (pendingEvents == null) return;
      _this._pending = pendingEvents;
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    pause$0(_) {
      var t2,
        t3,
        _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0) return;
      t2 = ((t1 + 128) | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._pending;
        if (t3 != null) if (t3._state === 1) t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0) return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0) _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0) _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0() {
      var t2,
        _this = this,
        t1 = (_this._state = (_this._state | 8) >>> 0);
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1) t2._state = 3;
      }
      if ((t1 & 32) === 0) _this._pending = null;
      _this._cancelFuture = _this._onCancel$0();
    },
    _onPause$0() {},
    _onResume$0() {},
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1,
        _this = this,
        pending = _this._pending;
      if (pending == null) pending = new P._StreamImplEvents();
      _this._pending = pending;
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128) pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var _this = this,
        t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(
        _this._onData,
        data,
        H._instanceType(_this)._precomputed1
      );
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture,
        _this = this,
        t1 = _this._state,
        t2 = new P._BufferingStreamSubscription__sendError_sendError(
          _this,
          error,
          stackTrace
        );
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (
          cancelFuture != null &&
          cancelFuture !== $.$get$Future__nullFuture()
        )
          cancelFuture.whenComplete$1(t2);
        else t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture,
        _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else t1.call$0();
    },
    _guardCallback$1(callback) {
      var _this = this,
        t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2,
        isInputPaused,
        _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else t2 = false;
        else t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused) break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused) _this._onPause$0();
        else _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128) _this._pending.schedule$1(_this);
    },
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError,
        t3,
        t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0) return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(
          onError,
          t2,
          this.stackTrace,
          t3,
          type$.StackTrace
        );
      else t4.runUnaryGuarded$1$2(onError, t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0,
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0) return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0,
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(
      _,
      onData,
      cancelOnError,
      onDone,
      onError
    ) {
      return this._controller._subscribe$4(
        onData,
        onError,
        onDone,
        cancelOnError === true
      );
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(
        $receiver,
        onData,
        null,
        onDone,
        onError
      );
    },
  };
  P._DelayedEvent.prototype = {
    get$next() {
      return this.next;
    },
    set$next(val) {
      return (this.next = val);
    },
  };
  P._DelayedData.prototype = {
    perform$1(dispatch) {
      dispatch._sendData$1(this.value);
    },
  };
  P._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    },
  };
  P._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw H.wrapException(P.StateError$('No events after a done.'));
    },
  };
  P._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var _this = this,
        t1 = _this._state;
      if (t1 === 1) return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(
        new P._PendingEvents_schedule_closure(_this, dispatch)
      );
      _this._state = 1;
    },
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var $event,
        nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3) return;
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null) t1.lastPendingEvent = null;
      $event.perform$1(this.dispatch);
    },
    $signature: 0,
  };
  P._StreamImplEvents.prototype = {
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    },
  };
  P._StreamIterator.prototype = {
    get$current() {
      if (this._async$_hasValue) return this._stateData;
      return null;
    },
    moveNext$0() {
      var future,
        _this = this,
        subscription = _this._subscription;
      if (subscription != null) {
        if (_this._async$_hasValue) {
          future = new P._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0(0);
          return future;
        }
        throw H.wrapException(P.StateError$('Already waiting for next.'));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0() {
      var future,
        subscription,
        _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        future = new P._Future($.Zone__current, type$._Future_bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(
          0,
          _this.get$_onData(),
          true,
          _this.get$_onDone(),
          _this.get$_onError()
        );
        if (_this._stateData != null) _this._subscription = subscription;
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0() {
      var _this = this,
        subscription = _this._subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this._subscription = null;
        if (!_this._async$_hasValue) stateData._asyncComplete$1(false);
        else _this._async$_hasValue = false;
        return subscription.cancel$0();
      }
      return $.$get$Future__nullFuture();
    },
    _onData$1(data) {
      var moveNextFuture,
        t1,
        _this = this;
      if (_this._subscription == null) return;
      moveNextFuture = _this._stateData;
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (_this._async$_hasValue) {
        t1 = _this._subscription;
        if (t1 != null) t1.pause$0(0);
      }
    },
    _onError$2(error, stackTrace) {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = _this._stateData;
      _this._stateData = _this._subscription = null;
      if (subscription != null)
        moveNextFuture._completeError$2(error, stackTrace);
      else moveNextFuture._asyncCompleteError$2(error, stackTrace);
    },
    _onDone$0() {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = _this._stateData;
      _this._stateData = _this._subscription = null;
      if (subscription != null) moveNextFuture._completeWithValue$1(false);
      else moveNextFuture._asyncCompleteWithValue$1(false);
    },
  };
  P._ZoneFunction.prototype = {};
  P._RunNullaryZoneFunction.prototype = {};
  P._RunUnaryZoneFunction.prototype = {};
  P._RunBinaryZoneFunction.prototype = {};
  P._RegisterNullaryZoneFunction.prototype = {};
  P._RegisterUnaryZoneFunction.prototype = {};
  P._RegisterBinaryZoneFunction.prototype = {};
  P._ZoneSpecification.prototype = { $isZoneSpecification: 1 };
  P._ZoneDelegate.prototype = { $isZoneDelegate: 1 };
  P._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var handler,
        parentDelegate,
        parentZone,
        currentZone,
        e,
        s,
        t1,
        exception,
        implementation = this.get$_handleUncaughtError(),
        implZone = implementation.zone;
      if (implZone === C.C__RootZone) {
        P._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = J.get$parent$z(implZone);
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1,
  };
  P._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null
        ? (this._delegateCache = new P._ZoneDelegate(this))
        : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this._processUncaughtError$3(this, e, s);
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this._processUncaughtError$3(this, e, s);
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this._processUncaughtError$3(this, e, s);
      }
    },
    bindCallback$1$1(f, $R) {
      return new P._CustomZone_bindCallback_closure(
        this,
        this.registerCallback$1$1(f, $R),
        $R
      );
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new P._CustomZone_bindUnaryCallback_closure(
        this,
        this.registerUnaryCallback$2$1(f, $R, $T),
        $T,
        $R
      );
    },
    bindCallbackGuarded$1(f) {
      return new P._CustomZone_bindCallbackGuarded_closure(
        this,
        this.registerCallback$1$1(f, type$.void)
      );
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key)) return result;
      value = this.parent.$index(0, key);
      if (value != null) t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, stackTrace);
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(
        t1,
        t1.get$_parentDelegate(),
        this,
        specification,
        zoneValues
      );
    },
    run$1$1(f) {
      var implementation = this._run,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        f
      );
    },
    runUnary$2$2(f, arg) {
      var implementation = this._runUnary,
        t1 = implementation.zone;
      return implementation.$function.call$5(
        t1,
        t1.get$_parentDelegate(),
        this,
        f,
        arg
      );
    },
    runBinary$3$3(f, arg1, arg2) {
      var implementation = this._runBinary,
        t1 = implementation.zone;
      return implementation.$function.call$6(
        t1,
        t1.get$_parentDelegate(),
        this,
        f,
        arg1,
        arg2
      );
    },
    registerCallback$1$1(callback) {
      var implementation = this._registerCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        callback
      );
    },
    registerUnaryCallback$2$1(callback) {
      var implementation = this._registerUnaryCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        callback
      );
    },
    registerBinaryCallback$3$1(callback) {
      var implementation = this._registerBinaryCallback,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        callback
      );
    },
    errorCallback$2(error, stackTrace) {
      var implementation, implementationZone;
      H.checkNotNullable(error, 'error', type$.Object);
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === C.C__RootZone) return null;
      return implementation.$function.call$5(
        implementationZone,
        implementationZone.get$_parentDelegate(),
        this,
        error,
        stackTrace
      );
    },
    scheduleMicrotask$1(f) {
      var implementation = this._scheduleMicrotask,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        f
      );
    },
    print$1(line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(
        t1,
        t1.get$_parentDelegate(),
        this,
        line
      );
    },
    get$_run() {
      return this._run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_registerCallback() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_handleUncaughtError() {
      return this._handleUncaughtError;
    },
    get$parent(receiver) {
      return this.parent;
    },
    get$_async$_map() {
      return this._async$_map;
    },
  };
  P._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1('0()');
    },
  };
  P._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this;
      return _this.$this.runUnary$2$2(_this.registered, arg, _this.R, _this.T);
    },
    $signature() {
      return this.R._eval$1('@<0>')._bind$1(this.T)._eval$1('1(2)');
    },
  };
  P._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 0,
  };
  P._rootHandleError_closure.prototype = {
    call$0() {
      var error = H.wrapException(this.error);
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0,
  };
  P._RootZone.prototype = {
    get$_run() {
      return C._RunNullaryZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return C._RunUnaryZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return C._RunBinaryZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback() {
      return C._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback() {
      return C._RegisterUnaryZoneFunction_Bqo;
    },
    get$_registerBinaryCallback() {
      return C._RegisterBinaryZoneFunction_kGu;
    },
    get$_errorCallback() {
      return C._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return C._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return C._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return C._ZoneFunction_3bB;
    },
    get$_print() {
      return C._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return C._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError() {
      return C._ZoneFunction_NMc;
    },
    get$parent(_) {
      return null;
    },
    get$_async$_map() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null
        ? ($._RootZone__rootDelegate = new P._ZoneDelegate(this))
        : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null
        ? ($._RootZone__rootDelegate = new P._ZoneDelegate(this))
        : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleError(e, s);
      }
    },
    runUnaryGuarded$1$2(f, arg) {
      var e, s, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleError(e, s);
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2) {
      var e, s, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(null, null, this, f, arg1, arg2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleError(e, s);
      }
    },
    bindCallback$1$1(f, $R) {
      return new P._RootZone_bindCallback_closure(this, f, $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new P._RootZone_bindUnaryCallback_closure(this, f, $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, f);
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      P._rootHandleError(error, stackTrace);
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return P._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f) {
      if ($.Zone__current === C.C__RootZone) return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2$2(f, arg) {
      if ($.Zone__current === C.C__RootZone) return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3$3(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone) return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    registerCallback$1$1(f) {
      return f;
    },
    registerUnaryCallback$2$1(f) {
      return f;
    },
    registerBinaryCallback$3$1(f) {
      return f;
    },
    errorCallback$2(error, stackTrace) {
      return null;
    },
    scheduleMicrotask$1(f) {
      P._rootScheduleMicrotask(null, null, this, f);
    },
    print$1(line) {
      H.printString(line);
    },
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1('0()');
    },
  };
  P._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this;
      return _this.$this.runUnary$2$2(_this.f, arg, _this.R, _this.T);
    },
    $signature() {
      return this.R._eval$1('@<0>')._bind$1(this.T)._eval$1('1(2)');
    },
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0,
  };
  P._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys(_) {
      return new P._HashMapKeyIterable(
        this,
        H._instanceType(this)._eval$1('_HashMapKeyIterable<1>')
      );
    },
    get$values(_) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(
        new P._HashMapKeyIterable(this, t1._eval$1('_HashMapKeyIterable<1>')),
        new P._HashMap_values_closure(this),
        t1._precomputed1,
        t1._rest[1]
      );
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == 'string' && key !== '__proto__') {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == 'number' && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null) return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    addAll$1(_, other) {
      other.forEach$1(0, new P._HashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == 'string' && key !== '__proto__') {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == 'number' && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else return this._get$1(key);
    },
    _get$1(key) {
      var bucket,
        index,
        rest = this._collection$_rest;
      if (rest == null) return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings,
        nums,
        _this = this;
      if (typeof key == 'string' && key !== '__proto__') {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(
          strings == null
            ? (_this._collection$_strings = P._HashMap__newHashTable())
            : strings,
          key,
          value
        );
      } else if (typeof key == 'number' && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(
          nums == null
            ? (_this._collection$_nums = P._HashMap__newHashTable())
            : nums,
          key,
          value
        );
      } else _this._set$2(key, value);
    },
    _set$2(key, value) {
      var hash,
        bucket,
        index,
        _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0) bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    remove$1(_, key) {
      var t1;
      if (typeof key == 'string' && key !== '__proto__')
        return this._removeHashTableEntry$2(this._collection$_strings, key);
      else {
        t1 = this._remove$1(key);
        return t1;
      }
    },
    _remove$1(key) {
      var hash,
        bucket,
        index,
        result,
        _this = this,
        rest = _this._collection$_rest;
      if (rest == null) return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0) return null;
      --_this._collection$_length;
      _this._keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length) delete rest[hash];
      return result;
    },
    forEach$1(_, action) {
      var $length,
        t1,
        i,
        key,
        _this = this,
        keys = _this._computeKeys$0();
      for (
        $length = keys.length, t1 = H._instanceType(_this)._rest[1], i = 0;
        i < $length;
        ++i
      ) {
        key = keys[i];
        action.call$2(key, t1._as(_this.$index(0, key)));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings,
        names,
        entries,
        index,
        i,
        nums,
        rest,
        bucket,
        $length,
        i0,
        _this = this,
        result = _this._keys;
      if (result != null) return result;
      result = P.List_List$filled(
        _this._collection$_length,
        null,
        false,
        type$.dynamic
      );
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return (_this._keys = result);
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) if (J.$eq$(bucket[i], key)) return i;
      return -1;
    },
  };
  P._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this;
      return H._instanceType(t1)._rest[1]._as(t1.$index(0, each));
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1('2(1)');
    },
  };
  P._HashMap_addAll_closure.prototype = {
    call$2(key, value) {
      this.$this.$indexSet(0, key, value);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1('~(1,2)');
    },
  };
  P._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new P._HashMapKeyIterator(t1, t1._computeKeys$0());
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
  };
  P._HashMapKeyIterator.prototype = {
    get$current() {
      return H._instanceType(this)._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = keys[offset];
        _this._offset = offset + 1;
        return true;
      }
    },
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key) return i;
      }
      return -1;
    },
  };
  P._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key)) return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      this.super$JsLinkedHashMap$internalSet(key, value);
    },
    containsKey$1(key) {
      if (!this._validKey.call$1(key)) return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!this._validKey.call$1(key)) return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, i;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (t1 = this._equals, i = 0; i < $length; ++i)
        if (t1.call$2(bucket[i].hashMapCellKey, key)) return i;
      return -1;
    },
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 88,
  };
  P._LinkedHashSet.prototype = {
    _newSet$0() {
      return new P._LinkedHashSet(
        H._instanceType(this)._eval$1('_LinkedHashSet<1>')
      );
    },
    _newSimilarSet$1$0($R) {
      return new P._LinkedHashSet($R._eval$1('_LinkedHashSet<0>'));
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator(_) {
      var t1 = new P._LinkedHashSetIterator(
        this,
        this._collection$_modifications
      );
      t1._collection$_cell = this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == 'string' && object !== '__proto__') {
        strings = this._collection$_strings;
        if (strings == null) return false;
        return strings[object] != null;
      } else if (
        typeof object == 'number' &&
        (object & 1073741823) === object
      ) {
        nums = this._collection$_nums;
        if (nums == null) return false;
        return nums[object] != null;
      } else return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null) return false;
      return (
        this._findBucketIndex$2(
          rest[this._computeHashCode$1(object)],
          object
        ) >= 0
      );
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null) throw H.wrapException(P.StateError$('No elements'));
      return first._element;
    },
    get$last(_) {
      var last = this._collection$_last;
      if (last == null) throw H.wrapException(P.StateError$('No elements'));
      return last._element;
    },
    add$1(_, element) {
      var strings,
        nums,
        _this = this;
      if (typeof element == 'string' && element !== '__proto__') {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(
          strings == null
            ? (_this._collection$_strings = P._LinkedHashSet__newHashTable())
            : strings,
          element
        );
      } else if (
        typeof element == 'number' &&
        (element & 1073741823) === element
      ) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(
          nums == null
            ? (_this._collection$_nums = P._LinkedHashSet__newHashTable())
            : nums,
          element
        );
      } else return _this._add$1(element);
    },
    _add$1(element) {
      var hash,
        bucket,
        _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0) return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == 'string' && object !== '__proto__')
        return _this._removeHashTableEntry$2(
          _this._collection$_strings,
          object
        );
      else if (typeof object == 'number' && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._collection$_nums, object);
      else return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash,
        bucket,
        index,
        cell,
        _this = this,
        rest = _this._collection$_rest;
      if (rest == null) return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0) return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length) delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      if (table[element] != null) return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null) return false;
      cell = table[element];
      if (cell == null) return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications =
        (this._collection$_modifications + 1) & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1,
        _this = this,
        cell = new P._LinkedHashSetCell(element);
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null) _this._collection$_first = next;
      else previous._collection$_next = next;
      if (next == null) _this._collection$_last = previous;
      else next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element)) return i;
      return -1;
    },
  };
  P._LinkedIdentityHashSet.prototype = {
    _newSet$0() {
      return new P._LinkedIdentityHashSet(this.$ti);
    },
    _newSimilarSet$1$0($R) {
      return new P._LinkedIdentityHashSet(
        $R._eval$1('_LinkedIdentityHashSet<0>')
      );
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    _computeHashCode$1(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i, t1;
      if (bucket == null) return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i]._element;
        if (t1 == null ? element == null : t1 === element) return i;
      }
      return -1;
    },
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current() {
      return H._instanceType(this)._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = cell._element;
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
  };
  P.UnmodifiableListView.prototype = {
    cast$1$0(_, $R) {
      return new P.UnmodifiableListView(
        J.cast$1$0$ax(this._collection$_source, $R),
        $R._eval$1('UnmodifiableListView<0>')
      );
    },
    get$length(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index(_, index) {
      return J.elementAt$1$ax(this._collection$_source, index);
    },
  };
  P.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 198,
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 198,
  };
  P.ListBase.prototype = {
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
  };
  P.ListMixin.prototype = {
    get$iterator(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    get$single(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      if (this.get$length(receiver) > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element)) return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!test.call$1(this.$index(receiver, i))) return false;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    any$1(receiver, test) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i))) return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    lastWhere$2$orElse(receiver, test, orElse) {
      var i,
        element,
        $length = this.get$length(receiver);
      for (i = $length - 1; i >= 0; --i) {
        element = this.$index(receiver, i);
        if (test.call$1(element)) return element;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null) return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0) return '';
      t1 = P.StringBuffer__writeAll('', receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    where$1(receiver, test) {
      return new H.WhereIterable(
        receiver,
        test,
        H.instanceType(receiver)._eval$1('WhereIterable<ListMixin.E>')
      );
    },
    map$1$1(receiver, f, $T) {
      return new H.MappedListIterable(
        receiver,
        f,
        H.instanceType(receiver)
          ._eval$1('@<ListMixin.E>')
          ._bind$1($T)
          ._eval$1('MappedListIterable<1,2>')
      );
    },
    expand$1$1(receiver, f, $T) {
      return new H.ExpandIterable(
        receiver,
        f,
        H.instanceType(receiver)
          ._eval$1('@<ListMixin.E>')
          ._bind$1($T)
          ._eval$1('ExpandIterable<1,2>')
      );
    },
    fold$1$2(receiver, initialValue, combine) {
      var value,
        i,
        $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    skip$1(receiver, count) {
      return H.SubListIterable$(
        receiver,
        count,
        null,
        H.instanceType(receiver)._eval$1('ListMixin.E')
      );
    },
    take$1(receiver, count) {
      return H.SubListIterable$(
        receiver,
        0,
        H.checkNotNullable(count, 'count', type$.int),
        H.instanceType(receiver)._eval$1('ListMixin.E')
      );
    },
    toList$1$growable(receiver, growable) {
      var t1,
        first,
        result,
        i,
        _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(
          0,
          H.instanceType(receiver)._eval$1('ListMixin.E')
        );
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = P.List_List$filled(
        _this.get$length(receiver),
        first,
        true,
        H.instanceType(receiver)._eval$1('ListMixin.E')
      );
      for (i = 1; i < _this.get$length(receiver); ++i)
        result[i] = _this.$index(receiver, i);
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(receiver) {
      var i,
        result = P.LinkedHashSet_LinkedHashSet(
          H.instanceType(receiver)._eval$1('ListMixin.E')
        );
      for (i = 0; i < this.get$length(receiver); ++i)
        result.add$1(0, this.$index(receiver, i));
      return result;
    },
    add$1(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    cast$1$0(receiver, $R) {
      return new H.CastList(
        receiver,
        H.instanceType(receiver)
          ._eval$1('@<ListMixin.E>')
          ._bind$1($R)
          ._eval$1('CastList<1,2>')
      );
    },
    sort$1(receiver, compare) {
      H.Sort_sort(
        receiver,
        compare == null ? P.collection_ListMixin__compareAny$closure() : compare
      );
    },
    sublist$2(receiver, start, end) {
      var listLength = this.get$length(receiver);
      P.RangeError_checkValidRange(start, end, listLength);
      return P.List_List$from(
        this.getRange$2(receiver, start, end),
        true,
        H.instanceType(receiver)._eval$1('ListMixin.E')
      );
    },
    getRange$2(receiver, start, end) {
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return H.SubListIterable$(
        receiver,
        start,
        end,
        H.instanceType(receiver)._eval$1('ListMixin.E')
      );
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      H.instanceType(receiver)._eval$1('ListMixin.E')._as(fill);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i) this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0) return;
      P.RangeError_checkNotNegative(skipCount, 'skipCount');
      if (H.instanceType(receiver)._eval$1('List<ListMixin.E>')._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(
          0,
          false
        );
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(
            receiver,
            start + i,
            t1.$index(otherList, otherStart + i)
          );
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(
            receiver,
            start + i,
            t1.$index(otherList, otherStart + i)
          );
    },
    get$reversed(receiver) {
      return new H.ReversedListIterable(
        receiver,
        H.instanceType(receiver)._eval$1('ReversedListIterable<ListMixin.E>')
      );
    },
    toString$0(receiver) {
      return P.IterableBase_iterableToFullString(receiver, '[', ']');
    },
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first) this.result._contents += ', ';
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ': ';
      t1._contents += H.S(v);
    },
    $signature: 201,
  };
  P.MapMixin.prototype = {
    forEach$1(_, action) {
      var t1,
        t2,
        key,
        _this = this;
      for (
        t1 = J.get$iterator$ax(_this.get$keys(_this)),
          t2 = H._instanceType(_this)._eval$1('MapMixin.V');
        t1.moveNext$0();

      ) {
        key = t1.get$current();
        action.call$2(key, t2._as(_this.$index(0, key)));
      }
    },
    addAll$1(_, other) {
      var t1, t2, key;
      for (
        t1 = J.get$iterator$ax(other.get$keys(other)),
          t2 = H._instanceType(this)._eval$1('MapMixin.V');
        t1.moveNext$0();

      ) {
        key = t1.get$current();
        this.$indexSet(0, key, t2._as(other.$index(0, key)));
      }
    },
    get$entries(_) {
      var _this = this;
      return J.map$1$1$ax(
        _this.get$keys(_this),
        new P.MapMixin_entries_closure(_this),
        H._instanceType(_this)._eval$1('MapEntry<MapMixin.K,MapMixin.V>')
      );
    },
    containsKey$1(key) {
      return J.contains$1$asx(this.get$keys(this), key);
    },
    get$length(_) {
      return J.get$length$asx(this.get$keys(this));
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$keys(this));
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$keys(this));
    },
    get$values(_) {
      var t1 = H._instanceType(this);
      return new P._MapBaseValueIterable(
        this,
        t1
          ._eval$1('@<MapMixin.K>')
          ._bind$1(t1._eval$1('MapMixin.V'))
          ._eval$1('_MapBaseValueIterable<1,2>')
      );
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1,
  };
  P.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = H._instanceType(t1),
        t3 = t2._eval$1('MapMixin.V');
      return new P.MapEntry(
        key,
        t3._as(t1.$index(0, key)),
        t2._eval$1('@<MapMixin.K>')._bind$1(t3)._eval$1('MapEntry<1,2>')
      );
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)'
      );
    },
  };
  P.UnmodifiableMapBase.prototype = {};
  P._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._map;
      return this.$ti._rest[1]._as(
        t1.$index(0, J.get$first$ax(t1.get$keys(t1)))
      );
    },
    get$single(_) {
      var t1 = this._map;
      return this.$ti._rest[1]._as(
        t1.$index(0, J.get$single$ax(t1.get$keys(t1)))
      );
    },
    get$last(_) {
      var t1 = this._map;
      return this.$ti._rest[1]._as(
        t1.$index(0, J.get$last$ax(t1.get$keys(t1)))
      );
    },
    get$iterator(_) {
      var t1 = this._map;
      return new P._MapBaseValueIterator(
        J.get$iterator$ax(t1.get$keys(t1)),
        t1
      );
    },
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this._collection$_current = _this._map.$index(0, t1.get$current());
        return true;
      }
      _this._collection$_current = null;
      return false;
    },
    get$current() {
      return H._instanceType(this)._rest[1]._as(this._collection$_current);
    },
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify unmodifiable map')
      );
    },
    addAll$1(_, other) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify unmodifiable map')
      );
    },
    remove$1(_, key) {
      throw H.wrapException(
        P.UnsupportedError$('Cannot modify unmodifiable map')
      );
    },
  };
  P.MapView.prototype = {
    $index(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet(_, key, value) {
      this._map.$indexSet(0, key, value);
    },
    addAll$1(_, other) {
      this._map.addAll$1(0, other);
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, action);
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys(_) {
      var t1 = this._map;
      return t1.get$keys(t1);
    },
    remove$1(_, key) {
      return this._map.remove$1(0, key);
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    get$values(_) {
      var t1 = this._map;
      return t1.get$values(t1);
    },
    get$entries(_) {
      var t1 = this._map;
      return t1.get$entries(t1);
    },
    $isMap: 1,
  };
  P.UnmodifiableMapView.prototype = {};
  P.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new P._ListQueueIterator(
        _this,
        _this._collection$_tail,
        _this._modificationCount,
        _this._collection$_head
      );
    },
    get$isEmpty(_) {
      return this._collection$_head === this._collection$_tail;
    },
    get$length(_) {
      return (
        ((this._collection$_tail - this._collection$_head) &
          (this._collection$_table.length - 1)) >>>
        0
      );
    },
    get$first(_) {
      var _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw H.wrapException(H.IterableElementError_noElement());
      return _this.$ti._precomputed1._as(_this._collection$_table[t1]);
    },
    get$last(_) {
      var _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if (t1 === t2) throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this._collection$_table;
      return _this.$ti._precomputed1._as(
        t1[((t2 - 1) & (t1.length - 1)) >>> 0]
      );
    },
    get$single(_) {
      var _this = this;
      if (_this._collection$_head === _this._collection$_tail)
        throw H.wrapException(H.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      return _this.$ti._precomputed1._as(
        _this._collection$_table[_this._collection$_head]
      );
    },
    elementAt$1(_, index) {
      var t1,
        _this = this;
      P.RangeError_checkValidIndex(index, _this, null);
      t1 = _this._collection$_table;
      return _this.$ti._precomputed1._as(
        t1[((_this._collection$_head + index) & (t1.length - 1)) >>> 0]
      );
    },
    toList$1$growable(_, growable) {
      var t1,
        list,
        t2,
        t3,
        i,
        _this = this,
        mask = _this._collection$_table.length - 1,
        $length =
          ((_this._collection$_tail - _this._collection$_head) & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = P.List_List$filled($length, _this.get$first(_this), true, t1);
      for (
        t2 = _this._collection$_table, t3 = _this._collection$_head, i = 0;
        i < $length;
        ++i
      )
        list[i] = t1._as(t2[((t3 + i) & mask) >>> 0]);
      return list;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(_, value) {
      this._add$1(value);
    },
    addAll$1(_, elements) {
      var addCount,
        $length,
        t2,
        t3,
        t4,
        newTable,
        endSpace,
        preSpace,
        _this = this,
        t1 = _this.$ti;
      if (t1._eval$1('List<1>')._is(elements)) {
        addCount = J.get$length$asx(elements);
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._collection$_table;
        t4 = t3.length;
        if (t2 >= t4) {
          newTable = P.List_List$filled(
            P.ListQueue__nextPowerOf2(
              t2 + C.JSInt_methods._shrOtherPositive$1(t2, 1)
            ),
            null,
            false,
            t1._eval$1('1?')
          );
          _this._collection$_tail = _this._collection$_writeToList$1(newTable);
          _this._collection$_table = newTable;
          _this._collection$_head = 0;
          C.JSArray_methods.setRange$4(newTable, $length, t2, elements, 0);
          _this._collection$_tail += addCount;
        } else {
          t1 = _this._collection$_tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            C.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._collection$_tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            C.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            C.JSArray_methods.setRange$4(
              _this._collection$_table,
              0,
              preSpace,
              elements,
              endSpace
            );
            _this._collection$_tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0(); )
          _this._add$1(t1.get$current());
    },
    clear$0(_) {
      var t2,
        t3,
        _this = this,
        i = _this._collection$_head,
        t1 = _this._collection$_tail;
      if (i !== t1) {
        for (
          t2 = _this._collection$_table, t3 = t2.length - 1;
          i !== t1;
          i = ((i + 1) & t3) >>> 0
        )
          t2[i] = null;
        _this._collection$_head = _this._collection$_tail = 0;
        ++_this._modificationCount;
      }
    },
    toString$0(_) {
      return P.IterableBase_iterableToFullString(this, '{', '}');
    },
    addFirst$1(value) {
      var _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_table;
      t1 = _this._collection$_head = ((t1 - 1) & (t2.length - 1)) >>> 0;
      t2[t1] = value;
      if (t1 === _this._collection$_tail) _this._collection$_grow$0();
      ++_this._modificationCount;
    },
    removeFirst$0() {
      var t2,
        result,
        _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._collection$_table;
      result = _this.$ti._precomputed1._as(t2[t1]);
      t2[t1] = null;
      _this._collection$_head = ((t1 + 1) & (t2.length - 1)) >>> 0;
      return result;
    },
    removeLast$0(_) {
      var result,
        _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if (t1 === t2) throw H.wrapException(H.IterableElementError_noElement());
      ++_this._modificationCount;
      t1 = _this._collection$_table;
      t2 = _this._collection$_tail = ((t2 - 1) & (t1.length - 1)) >>> 0;
      result = _this.$ti._precomputed1._as(t1[t2]);
      t1[t2] = null;
      return result;
    },
    _add$1(element) {
      var _this = this,
        t1 = _this._collection$_table,
        t2 = _this._collection$_tail;
      t1[t2] = element;
      t1 = ((t2 + 1) & (t1.length - 1)) >>> 0;
      _this._collection$_tail = t1;
      if (_this._collection$_head === t1) _this._collection$_grow$0();
      ++_this._modificationCount;
    },
    _collection$_grow$0() {
      var _this = this,
        newTable = P.List_List$filled(
          _this._collection$_table.length * 2,
          null,
          false,
          _this.$ti._eval$1('1?')
        ),
        t1 = _this._collection$_table,
        t2 = _this._collection$_head,
        split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(
        newTable,
        split,
        split + _this._collection$_head,
        _this._collection$_table,
        0
      );
      _this._collection$_head = 0;
      _this._collection$_tail = _this._collection$_table.length;
      _this._collection$_table = newTable;
    },
    _collection$_writeToList$1(target) {
      var $length,
        firstPartSize,
        _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail,
        t3 = _this._collection$_table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(
          target,
          firstPartSize,
          firstPartSize + _this._collection$_tail,
          _this._collection$_table,
          0
        );
        return _this._collection$_tail + firstPartSize;
      }
    },
    $isQueue: 1,
  };
  P._ListQueueIterator.prototype = {
    get$current() {
      return H._instanceType(this)._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var t2,
        _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._collection$_end) {
        _this._collection$_current = null;
        return false;
      }
      t1 = t1._collection$_table;
      _this._collection$_current = t1[t2];
      _this._collection$_position = ((t2 + 1) & (t1.length - 1)) >>> 0;
      return true;
    },
  };
  P.SetMixin.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0(); )
        this.add$1(0, t1.get$current());
    },
    removeAll$1(elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0(); )
        this.remove$1(0, t1.get$current());
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(this, true, H._instanceType(this)._precomputed1);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1(_, f, $T) {
      return new H.EfficientLengthMappedIterable(
        this,
        f,
        H._instanceType(this)
          ._eval$1('@<1>')
          ._bind$1($T)
          ._eval$1('EfficientLengthMappedIterable<1,2>')
      );
    },
    get$single(_) {
      var it,
        _this = this;
      if (_this.get$length(_this) > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      it = _this.get$iterator(_this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    toString$0(_) {
      return P.IterableBase_iterableToFullString(this, '{', '}');
    },
    where$1(_, f) {
      return new H.WhereIterable(
        this,
        f,
        H._instanceType(this)._eval$1('WhereIterable<1>')
      );
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0()) return '';
      if (separator === '') {
        t1 = '';
        do t1 += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = '' + H.S(iterator.get$current());
        for (; iterator.moveNext$0(); )
          t1 = t1 + separator + H.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0(); )
        if (test.call$1(t1.get$current())) return true;
      return false;
    },
    take$1(_, n) {
      return H.TakeIterable_TakeIterable(
        this,
        n,
        H._instanceType(this)._precomputed1
      );
    },
    skip$1(_, n) {
      return H.SkipIterable_SkipIterable(
        this,
        n,
        H._instanceType(this)._precomputed1
      );
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var t1,
        elementIndex,
        element,
        _s5_ = 'index';
      H.checkNotNullable(index, _s5_, type$.int);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0(); ) {
        element = t1.get$current();
        if (index === elementIndex) return element;
        ++elementIndex;
      }
      throw H.wrapException(
        P.IndexError$(index, this, _s5_, null, elementIndex)
      );
    },
  };
  P._SetBase.prototype = {
    difference$1(other) {
      var t1,
        t2,
        element,
        result = this._newSet$0();
      for (
        t1 = this.get$iterator(this), t2 = other._source;
        t1.moveNext$0();

      ) {
        element = t1.get$current();
        if (!t2.contains$1(0, element)) result.add$1(0, element);
      }
      return result;
    },
    intersection$1(other) {
      var t1,
        t2,
        element,
        result = this._newSet$0();
      for (
        t1 = this.get$iterator(this), t2 = other._baseMap;
        t1.moveNext$0();

      ) {
        element = t1.get$current();
        if (t2.containsKey$1(element)) result.add$1(0, element);
      }
      return result;
    },
    toSet$0(_) {
      var t1 = this._newSet$0();
      t1.addAll$1(0, this);
      return t1;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1,
  };
  P._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      return P._UnmodifiableSetMixin__throwUnmodifiable();
    },
    addAll$1(_, elements) {
      return P._UnmodifiableSetMixin__throwUnmodifiable();
    },
    remove$1(_, value) {
      return P._UnmodifiableSetMixin__throwUnmodifiable();
    },
  };
  P._UnmodifiableSet.prototype = {
    _newSet$0() {
      return P.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
    get$iterator(_) {
      var t1 = this._map;
      return J.get$iterator$ax(t1.get$keys(t1));
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P.__SetBase_Object_SetMixin.prototype = {};
  P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  P.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder('utf-8', { fatal: true });
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 70,
  };
  P.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder('utf-8', { fatal: false });
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 70,
  };
  P.AsciiCodec.prototype = {
    encode$1(source) {
      return C.AsciiEncoder_127.convert$1(source);
    },
    get$encoder() {
      return C.AsciiEncoder_127;
    },
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var t1,
        i,
        codeUnit,
        $length = P.RangeError_checkValidRange(0, null, string.length) - 0,
        result = new Uint8Array($length);
      for (t1 = ~this._subsetMask, i = 0; i < $length; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & t1) !== 0)
          throw H.wrapException(
            P.ArgumentError$value(
              string,
              'string',
              'Contains invalid characters.'
            )
          );
        result[i] = codeUnit;
      }
      return result;
    },
  };
  P.AsciiEncoder.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder() {
      return C.C_Base64Encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet,
        i,
        sliceStart,
        buffer,
        firstPadding,
        firstPaddingSourceIndex,
        paddingCount,
        i0,
        char,
        i1,
        digit1,
        digit2,
        char0,
        value,
        t1,
        t2,
        endLength,
        $length,
        _s31_ = 'Invalid base64 encoding length ';
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (
        i = start,
          sliceStart = i,
          buffer = null,
          firstPadding = -1,
          firstPaddingSourceIndex = -1,
          paddingCount = 0;
        i < end;
        i = i0
      ) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(
              C.JSString_methods._codeUnitAt$1(source, i0)
            );
            digit2 = H.hexDigitValue(
              C.JSString_methods._codeUnitAt$1(source, i0 + 1)
            );
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37) char0 = -1;
            i0 = i1;
          } else char0 = -1;
        } else char0 = char;
        if (0 <= char0 && char0 <= 127) {
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1(string$.ABCDEF, value);
            if (char0 === char) continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null) t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61) continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new P.StringBuffer('');
              t1 = buffer;
            } else t1 = buffer;
            t2 = t1._contents += C.JSString_methods.substring$2(
              source,
              sliceStart,
              i
            );
            t1._contents = t2 + H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(
          P.FormatException$('Invalid base64 data', source, i)
        );
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(
          source,
          sliceStart,
          end
        );
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(
            source,
            firstPaddingSourceIndex,
            end,
            firstPadding,
            paddingCount,
            t2
          );
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4; ) {
            t1 += '=';
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(
          source,
          start,
          end,
          t1.charCodeAt(0) == 0 ? t1 : t1
        );
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(
          source,
          firstPaddingSourceIndex,
          end,
          firstPadding,
          paddingCount,
          $length
        );
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(
            source,
            end,
            end,
            endLength === 2 ? '==' : '='
          );
      }
      return source;
    },
  };
  P.Base64Encoder.prototype = {
    convert$1(input) {
      var t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input)) return '';
      t1 = new P._Base64Encoder(string$.ABCDEF).encode$4(
        input,
        0,
        t1.get$length(input),
        true
      );
      t1.toString;
      return P.String_String$fromCharCodes(t1, 0, null);
    },
    startChunkedConversion$1(sink) {
      return new P._Utf8Base64EncoderSink(
        new P._Utf8StringSinkAdapter(
          new P._Utf8Decoder(false),
          sink,
          sink._stringSink
        ),
        new P._Base64Encoder(string$.ABCDEF)
      );
    },
  };
  P._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4(bytes, start, end, isLast) {
      var output,
        _this = this,
        byteCount = (_this._convert$_state & 3) + (end - start),
        fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3),
        bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0) bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = P._Base64Encoder_encodeChunk(
        _this._alphabet,
        bytes,
        start,
        end,
        isLast,
        output,
        0,
        _this._convert$_state
      );
      if (bufferLength > 0) return output;
      return null;
    },
  };
  P._Base64EncoderSink.prototype = {
    add$1(_, source) {
      this._convert$_add$4(source, 0, source.get$length(source), false);
    },
  };
  P._Utf8Base64EncoderSink.prototype = {
    _convert$_add$4(source, start, end, isLast) {
      var buffer = this._encoder.encode$4(source, start, end, isLast);
      if (buffer != null)
        this._sink.addSlice$4(buffer, 0, buffer.length, isLast);
    },
  };
  P.ByteConversionSink.prototype = {};
  P.ByteConversionSinkBase.prototype = {};
  P.ChunkedConversionSink.prototype = {};
  P.Codec.prototype = {
    encode$1(input) {
      return this.get$encoder().convert$1(input);
    },
  };
  P.Converter.prototype = {};
  P.Encoding.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (
        (this.cause != null
          ? 'Converting object to an encodable object failed:'
          : 'Converting object did not return an encodable object:') +
        ' ' +
        safeString
      );
    },
  };
  P.JsonCyclicError.prototype = {
    toString$0(_) {
      return 'Cyclic error in JSON stringify';
    },
  };
  P.JsonCodec.prototype = {
    encode$2$toEncodable(value, toEncodable) {
      var t1 = P._JsonStringStringifier_stringify(
        value,
        this.get$encoder()._toEncodable,
        null
      );
      return t1;
    },
    get$encoder() {
      return C.JsonEncoder_null;
    },
  };
  P.JsonEncoder.prototype = {
    convert$1(object) {
      var t1,
        output = new P.StringBuffer(''),
        stringifier = P._JsonStringStringifier$(output, this._toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset,
        i,
        charCode,
        t1,
        t2,
        _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = C.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(
                t2 < $length &&
                (C.JSString_methods._codeUnitAt$1(s, t2) & 64512) === 56320
              );
            } else t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(
                  t1 >= 0 &&
                  (C.JSString_methods.codeUnitAt$1(s, t1) & 64512) === 55296
                );
              } else t1 = false;
            else t1 = true;
            if (t1) {
              if (i > offset) _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = (charCode >>> 8) & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = (charCode >>> 4) & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset) _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = (charCode >>> 4) & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset) _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0) _this.writeString$1(s);
      else if (offset < $length) _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      t1.push(object);
    },
    writeObject$1(object) {
      var customJson,
        e,
        t1,
        exception,
        _this = this;
      if (_this.writeJsonValue$1(object)) return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(
            object,
            null,
            _this.get$_partialResult()
          );
          throw H.wrapException(t1);
        }
        _this._seen.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(
          object,
          e,
          _this.get$_partialResult()
        );
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var success,
        _this = this;
      if (typeof object == 'number') {
        if (!isFinite(object)) return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1('true');
        return true;
      } else if (object === false) {
        _this.writeString$1('false');
        return true;
      } else if (object == null) {
        _this.writeString$1('null');
        return true;
      } else if (typeof object == 'string') {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        _this._seen.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        _this._seen.pop();
        return success;
      } else return false;
    },
    writeList$1(list) {
      var t1,
        i,
        _this = this;
      _this.writeString$1('[');
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(',');
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1(']');
    },
    writeMap$1(map) {
      var t1,
        keyValueList,
        i,
        separator,
        _this = this,
        _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1('{}');
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = P.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(
        0,
        new P._JsonStringifier_writeMap_closure(_box_0, keyValueList)
      );
      if (!_box_0.allStringKeys) return false;
      _this.writeString$1('{');
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(H._asString(keyValueList[i]));
        _this.writeString$1('":');
        _this.writeObject$1(keyValueList[i + 1]);
      }
      _this.writeString$1('}');
      return true;
    },
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3, i;
      if (typeof key != 'string') this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      t3 = t2.i;
      i = t2.i = t3 + 1;
      t1[t3] = key;
      t2.i = i + 1;
      t1[i] = value;
    },
    $signature: 201,
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    writeNumber$1(number) {
      this._sink._contents += C.JSNumber_methods.toString$0(number);
    },
    writeString$1(string) {
      this._sink._contents += string;
    },
    writeStringSlice$3(string, start, end) {
      this._sink._contents += C.JSString_methods.substring$2(
        string,
        start,
        end
      );
    },
    writeCharCode$1(charCode) {
      this._sink._contents += H.Primitives_stringFromCharCode(charCode);
    },
  };
  P.StringConversionSinkBase.prototype = {};
  P.StringConversionSinkMixin.prototype = {
    add$1(_, str) {
      this.addSlice$4(str, 0, str.length, false);
    },
  };
  P._StringSinkConversionSink.prototype = {
    close$0(_) {},
    addSlice$4(str, start, end, isLast) {
      var t1, i;
      if (start !== 0 || end !== str.length)
        for (t1 = this._stringSink, i = start; i < end; ++i)
          t1._contents += H.Primitives_stringFromCharCode(
            C.JSString_methods._codeUnitAt$1(str, i)
          );
      else this._stringSink._contents += str;
      if (isLast) this.close$0(0);
    },
    add$1(_, str) {
      this._stringSink._contents += str;
    },
  };
  P._StringCallbackSink.prototype = {
    close$0(_) {
      var t1 = this._stringSink,
        t2 = t1._contents;
      t1._contents = '';
      this._convert$_callback.call$1(t2.charCodeAt(0) == 0 ? t2 : t2);
    },
    asUtf8Sink$1(allowMalformed) {
      return new P._Utf8StringSinkAdapter(
        new P._Utf8Decoder(allowMalformed),
        this,
        this._stringSink
      );
    },
  };
  P._Utf8StringSinkAdapter.prototype = {
    close$0(_) {
      this._decoder.flush$1(this._stringSink);
      this._sink.close$0(0);
    },
    add$1(_, chunk) {
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(codeUnits, startIndex, endIndex, isLast) {
      this._stringSink._contents += this._decoder.convertGeneral$4(
        codeUnits,
        startIndex,
        endIndex,
        false
      );
      if (isLast) this.close$0(0);
    },
  };
  P.Utf8Codec.prototype = {
    get$encoder() {
      return C.C_Utf8Encoder;
    },
  };
  P.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1,
        encoder,
        end = P.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0) return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        C.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
  };
  P._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = (_this._bufferIndex = t2 + 1);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune,
        t1,
        t2,
        t3,
        _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune =
          (65536 + ((leadingSurrogate & 1023) << 10)) | (nextCodeUnit & 1023);
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = (rune >>> 18) | 240;
        t2 = _this._bufferIndex = t3 + 1;
        t1[t3] = ((rune >>> 12) & 63) | 128;
        t3 = _this._bufferIndex = t2 + 1;
        t1[t2] = ((rune >>> 6) & 63) | 128;
        _this._bufferIndex = t3 + 1;
        t1[t3] = (rune & 63) | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1,
        t2,
        stringIndex,
        codeUnit,
        t3,
        stringIndex0,
        t4,
        _this = this;
      if (
        start !== end &&
        (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296
      )
        --end;
      for (
        t1 = _this._convert$_buffer, t2 = t1.length, stringIndex = start;
        stringIndex < end;
        ++stringIndex
      ) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2) break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2) break;
            stringIndex0 = stringIndex + 1;
            if (
              _this._writeSurrogate$2(
                codeUnit,
                C.JSString_methods._codeUnitAt$1(str, stringIndex0)
              )
            )
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2) break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2) break;
            _this._bufferIndex = t4;
            t1[t3] = (codeUnit >>> 6) | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = (codeUnit & 63) | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2) break;
            t4 = _this._bufferIndex = t3 + 1;
            t1[t3] = (codeUnit >>> 12) | 224;
            t3 = _this._bufferIndex = t4 + 1;
            t1[t4] = ((codeUnit >>> 6) & 63) | 128;
            _this._bufferIndex = t3 + 1;
            t1[t3] = (codeUnit & 63) | 128;
          }
        }
      }
      return stringIndex;
    },
  };
  P.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1 = this._allowMalformed,
        result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null) return result;
      return new P._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    },
  };
  P._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var bytes,
        errorOffset,
        result,
        t1,
        message,
        _this = this,
        end = P.RangeError_checkValidRange(
          start,
          maybeEnd,
          J.get$length$asx(codeUnits)
        );
      if (start === end) return '';
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = P._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = P._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw H.wrapException(
          P.FormatException$(
            message,
            codeUnits,
            errorOffset + _this._charOrIndex
          )
        );
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid,
        s1,
        _this = this;
      if (end - start > 1000) {
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0) return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    flush$1(sink) {
      var state = this._convert$_state;
      this._convert$_state = 0;
      if (state <= 32) return;
      if (this.allowMalformed)
        sink._contents += H.Primitives_stringFromCharCode(65533);
      else
        throw H.wrapException(
          P.FormatException$(P._Utf8Decoder_errorDescription(77), null, null)
        );
    },
    decodeGeneral$4(bytes, start, end, single) {
      var t1,
        type,
        t2,
        i0,
        markEnd,
        i1,
        m,
        _this = this,
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new P.StringBuffer(''),
        i = start + 1,
        byte = bytes[start];
      $label0$0: for (t1 = _this.allowMalformed; true; ) {
        for (; true; i = i0) {
          type =
            C.JSString_methods._codeUnitAt$1(
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE',
              byte
            ) & 31;
          char =
            state <= 32
              ? byte & (61694 >>> type)
              : ((byte & 63) | (char << 6)) >>> 0;
          state = C.JSString_methods._codeUnitAt$1(
            ' \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA',
            state + type
          );
          if (state === 0) {
            buffer._contents += H.Primitives_stringFromCharCode(char);
            if (i === end) break $label0$0;
            break;
          } else if ((state & 1) !== 0) {
            if (t1)
              switch (state) {
                case 69:
                case 67:
                  buffer._contents += H.Primitives_stringFromCharCode(_65533);
                  break;
                case 65:
                  buffer._contents += H.Primitives_stringFromCharCode(_65533);
                  --i;
                  break;
                default:
                  t2 = buffer._contents += H.Primitives_stringFromCharCode(
                    _65533
                  );
                  buffer._contents =
                    t2 + H.Primitives_stringFromCharCode(_65533);
                  break;
              }
            else {
              _this._convert$_state = state;
              _this._charOrIndex = i - 1;
              return '';
            }
            state = 0;
          }
          if (i === end) break $label0$0;
          i0 = i + 1;
          byte = bytes[i];
        }
        i0 = i + 1;
        byte = bytes[i];
        if (byte < 128) {
          while (true) {
            if (!(i0 < end)) {
              markEnd = end;
              break;
            }
            i1 = i0 + 1;
            byte = bytes[i0];
            if (byte >= 128) {
              markEnd = i1 - 1;
              i0 = i1;
              break;
            }
            i0 = i1;
          }
          if (markEnd - i < 20)
            for (m = i; m < markEnd; ++m)
              buffer._contents += H.Primitives_stringFromCharCode(bytes[m]);
          else
            buffer._contents += P.String_String$fromCharCodes(
              bytes,
              i,
              markEnd
            );
          if (markEnd === end) break $label0$0;
          i = i0;
        } else i = i0;
      }
      if (single && state > 32)
        if (t1) buffer._contents += H.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return '';
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1 = this.sb,
        t2 = this._box_0,
        t3 = (t1._contents += t2.comma);
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ': ';
      t1._contents += P.Error_safeToString(value);
      t2.comma = ', ';
    },
    $signature: 453,
  };
  P.DateTime.prototype = {
    add$1(_, duration) {
      return P.DateTime$_withValue(
        C.JSInt_methods.$add(this._core$_value, duration.get$inMilliseconds()),
        false
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof P.DateTime &&
        this._core$_value === other._core$_value &&
        true
      );
    },
    compareTo$1(_, other) {
      return C.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
    },
    get$hashCode(_) {
      var t1 = this._core$_value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + '-' + m + '-' + d + ' ' + h + ':' + min + ':' + sec + '.' + ms;
      return t1;
    },
    $isComparable: 1,
  };
  P.Duration.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other._duration);
    },
    toString$0(_) {
      var twoDigitMinutes,
        twoDigitSeconds,
        sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0) return '-' + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(
        C.JSInt_methods._tdivFast$1(t2, 60000000) % 60
      );
      twoDigitSeconds = t1.call$1(
        C.JSInt_methods._tdivFast$1(t2, 1000000) % 60
      );
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return (
        '' +
        C.JSInt_methods._tdivFast$1(t2, 3600000000) +
        ':' +
        twoDigitMinutes +
        ':' +
        twoDigitSeconds +
        '.' +
        sixDigitUs
      );
    },
    $isComparable: 1,
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1(n) {
      if (n >= 100000) return '' + n;
      if (n >= 10000) return '0' + n;
      if (n >= 1000) return '00' + n;
      if (n >= 100) return '000' + n;
      if (n >= 10) return '0000' + n;
      return '00000' + n;
    },
    $signature: 68,
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1(n) {
      if (n >= 10) return '' + n;
      return '0' + n;
    },
    $signature: 68,
  };
  P.Error.prototype = {
    get$stackTrace() {
      return H.getTraceFromException(this.$thrownJsError);
    },
  };
  P.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null) return 'Assertion failed: ' + P.Error_safeToString(t1);
      return 'Assertion failed';
    },
    get$message(receiver) {
      return this.message;
    },
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0(_) {
      return 'Throw of null.';
    },
  };
  P.ArgumentError.prototype = {
    get$_errorName() {
      return 'Invalid argument' + (!this._hasValue ? '(s)' : '');
    },
    get$_errorExplanation() {
      return '';
    },
    toString$0(_) {
      var explanation,
        errorValue,
        _this = this,
        $name = _this.name,
        nameString = $name == null ? '' : ' (' + $name + ')',
        message = _this.message,
        messageString = message == null ? '' : ': ' + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue) return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ': ' + errorValue;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  P.RangeError.prototype = {
    get$_errorName() {
      return 'RangeError';
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation =
          end != null ? ': Not less than or equal to ' + H.S(end) : '';
      else if (end == null)
        explanation = ': Not greater than or equal to ' + H.S(start);
      else if (end > start)
        explanation =
          ': Not in inclusive range ' + H.S(start) + '..' + H.S(end);
      else
        explanation =
          end < start
            ? ': Valid value range is empty'
            : ': Only valid value is ' + H.S(start);
      return explanation;
    },
  };
  P.IndexError.prototype = {
    get$_errorName() {
      return 'RangeError';
    },
    get$_errorExplanation() {
      if (this.invalidValue < 0) return ': index must not be negative';
      var t1 = this.length;
      if (t1 === 0) return ': no indices are valid';
      return ': index should be less than ' + t1;
    },
    $isRangeError: 1,
    get$length(receiver) {
      return this.length;
    },
  };
  P.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments,
        t1,
        _i,
        t2,
        t3,
        argument,
        receiverText,
        actualParameters,
        _this = this,
        _box_0 = {},
        sb = new P.StringBuffer('');
      _box_0.comma = '';
      $arguments = _this._core$_arguments;
      for (
        t1 = $arguments.length, _i = 0, t2 = '', t3 = '';
        _i < t1;
        ++_i, t3 = ', '
      ) {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ', ';
      }
      _this._namedArguments.forEach$1(
        0,
        new P.NoSuchMethodError_toString_closure(_box_0, sb)
      );
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 =
        "NoSuchMethodError: method not found: '" +
        _this._memberName.__internal$_name +
        "'\nReceiver: " +
        receiverText +
        '\nArguments: [' +
        actualParameters +
        ']';
      return t1;
    },
  };
  P.UnsupportedError.prototype = {
    toString$0(_) {
      return 'Unsupported operation: ' + this.message;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  P.UnimplementedError.prototype = {
    toString$0(_) {
      var t1 = 'UnimplementedError: ' + this.message;
      return t1;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  P.StateError.prototype = {
    toString$0(_) {
      return 'Bad state: ' + this.message;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  P.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null) return 'Concurrent modification during iteration.';
      return (
        'Concurrent modification during iteration: ' +
        P.Error_safeToString(t1) +
        '.'
      );
    },
  };
  P.OutOfMemoryError.prototype = {
    toString$0(_) {
      return 'Out of Memory';
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1,
  };
  P.StackOverflowError.prototype = {
    toString$0(_) {
      return 'Stack Overflow';
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1,
  };
  P.CyclicInitializationError.prototype = {
    toString$0(_) {
      var t1 =
        "Reading static variable '" +
        this.variableName +
        "' during its initialization";
      return t1;
    },
  };
  P._Exception.prototype = {
    toString$0(_) {
      return 'Exception: ' + this.message;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
  };
  P.FormatException.prototype = {
    toString$0(_) {
      var t1,
        lineNum,
        lineStart,
        previousCharWasCR,
        i,
        char,
        lineEnd,
        end,
        start,
        prefix,
        postfix,
        slice,
        message = this.message,
        report =
          '' !== message ? 'FormatException: ' + message : 'FormatException',
        offset = this.offset,
        source = this.source;
      if (typeof source == 'string') {
        if (offset != null) t1 = offset < 0 || offset > source.length;
        else t1 = false;
        if (t1) offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + '...';
          return report + '\n' + source;
        }
        for (
          lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0;
          i < offset;
          ++i
        ) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR) ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report =
          lineNum > 1
            ? report +
              (' (at line ' +
                lineNum +
                ', character ' +
                (offset - lineStart + 1) +
                ')\n')
            : report + (' (at character ' + (offset + 1) + ')\n');
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = '';
            postfix = '...';
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = '';
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = '...';
            }
            prefix = '...';
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = '';
          postfix = '';
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return (
          report +
          prefix +
          slice +
          postfix +
          '\n' +
          C.JSString_methods.$mul(' ', offset - start + prefix.length) +
          '^\n'
        );
      } else
        return offset != null
          ? report + (' (at offset ' + H.S(offset) + ')')
          : report;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
  };
  P.Iterable.prototype = {
    cast$1$0(_, $R) {
      return H.CastIterable_CastIterable(
        this,
        H._instanceType(this)._eval$1('Iterable.E'),
        $R
      );
    },
    followedBy$1(_, other) {
      var _this = this,
        t1 = H._instanceType(_this);
      if (t1._eval$1('EfficientLengthIterable<Iterable.E>')._is(_this))
        return H.FollowedByIterable_FollowedByIterable$firstEfficient(
          _this,
          other,
          t1._eval$1('Iterable.E')
        );
      return new H.FollowedByIterable(
        _this,
        other,
        t1._eval$1('FollowedByIterable<Iterable.E>')
      );
    },
    map$1$1(_, toElement, $T) {
      return H.MappedIterable_MappedIterable(
        this,
        toElement,
        H._instanceType(this)._eval$1('Iterable.E'),
        $T
      );
    },
    where$1(_, test) {
      return new H.WhereIterable(
        this,
        test,
        H._instanceType(this)._eval$1('WhereIterable<Iterable.E>')
      );
    },
    expand$1$1(_, toElements, $T) {
      return new H.ExpandIterable(
        this,
        toElements,
        H._instanceType(this)
          ._eval$1('@<Iterable.E>')
          ._bind$1($T)
          ._eval$1('ExpandIterable<1,2>')
      );
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0(); )
        if (J.$eq$(t1.get$current(), element)) return true;
      return false;
    },
    fold$1$2(_, initialValue, combine) {
      var t1, value;
      for (
        t1 = this.get$iterator(this), value = initialValue;
        t1.moveNext$0();

      )
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    fold$2($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, type$.dynamic);
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0()) return '';
      if (separator === '') {
        t1 = '';
        do t1 += H.S(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        t1 = '' + H.S(J.toString$0$(iterator.get$current()));
        for (; iterator.moveNext$0(); )
          t1 = t1 + separator + H.S(J.toString$0$(iterator.get$current()));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    any$1(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0(); )
        if (test.call$1(t1.get$current())) return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(
        this,
        growable,
        H._instanceType(this)._eval$1('Iterable.E')
      );
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      return P.LinkedHashSet_LinkedHashSet$of(
        this,
        H._instanceType(this)._eval$1('Iterable.E')
      );
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0(); ) ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return H.TakeIterable_TakeIterable(
        this,
        count,
        H._instanceType(this)._eval$1('Iterable.E')
      );
    },
    skip$1(_, count) {
      return H.SkipIterable_SkipIterable(
        this,
        count,
        H._instanceType(this)._eval$1('Iterable.E')
      );
    },
    skipWhile$1(_, test) {
      return new H.SkipWhileIterable(
        this,
        test,
        H._instanceType(this)._eval$1('SkipWhileIterable<Iterable.E>')
      );
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, 'index');
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0(); ) {
        element = t1.get$current();
        if (index === elementIndex) return element;
        ++elementIndex;
      }
      throw H.wrapException(
        P.IndexError$(index, this, 'index', null, elementIndex)
      );
    },
    toString$0(_) {
      return P.IterableBase_iterableToShortString(this, '(', ')');
    },
  };
  P._GeneratorIterable.prototype = {
    elementAt$1(_, index) {
      P.RangeError_checkValidIndex(index, this, null);
      return this._generator.call$1(index);
    },
    get$length(receiver) {
      return this.length;
    },
  };
  P.Iterator.prototype = {};
  P.MapEntry.prototype = {
    toString$0(_) {
      return 'MapEntry(' + H.S(this.key) + ': ' + H.S(this.value) + ')';
    },
  };
  P.Null.prototype = {
    get$hashCode(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return 'null';
    },
  };
  P.Object.prototype = {
    $isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw H.wrapException(
        P.NoSuchMethodError$(
          this,
          invocation.get$memberName(),
          invocation.get$positionalArguments(),
          invocation.get$namedArguments()
        )
      );
    },
    get$runtimeType(_) {
      var rti = this instanceof H.Closure ? H.closureFunctionType(this) : null;
      return H.createRuntimeType(rti == null ? H.instanceType(this) : rti);
    },
    toString() {
      return this.toString$0(this);
    },
  };
  P._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1,
  };
  P.Runes.prototype = {
    get$iterator(_) {
      return new P.RuneIterator(this.string);
    },
    get$last(_) {
      var code,
        previousCode,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0) throw H.wrapException(P.StateError$('No elements.'));
      code = C.JSString_methods.codeUnitAt$1(t1, t2 - 1);
      if ((code & 64512) === 56320 && t2 > 1) {
        previousCode = C.JSString_methods.codeUnitAt$1(t1, t2 - 2);
        if ((previousCode & 64512) === 55296)
          return P._combineSurrogatePair(previousCode, code);
      }
      return code;
    },
  };
  P.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit,
        nextPosition,
        nextCodeUnit,
        _this = this,
        t1 = (_this._position = _this._nextPosition),
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = C.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = C.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = P._combineSurrogatePair(
            codeUnit,
            nextCodeUnit
          );
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
  };
  P.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(_, obj) {
      this._contents += H.S(obj);
    },
    writeCharCode$1(charCode) {
      this._contents += H.Primitives_stringFromCharCode(charCode);
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  P.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw H.wrapException(
        P.FormatException$('Illegal IPv4 address, ' + msg, this.host, position)
      );
    },
    $signature: 445,
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw H.wrapException(
        P.FormatException$('Illegal IPv6 address, ' + msg, this.host, position)
      );
    },
    call$1(msg) {
      return this.call$2(msg, null);
    },
    $signature: 442,
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2(
          'an IPv6 part can only contain a maximum of 4 hex digits',
          start
        );
      value = P.int_parse(
        C.JSString_methods.substring$2(this.host, start, end),
        16
      );
      if (value < 0 || value > 65535)
        this.error.call$2(
          'each part must be in the range of `0x0..0xFFFF`',
          start
        );
      return value;
    },
    $signature: 435,
  };
  P._Uri.prototype = {
    get$_text() {
      var t2,
        t3,
        t4,
        _this = this,
        t1 = _this.___Uri__text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? '' + t1 + ':' : '';
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === 'file') {
          t1 = t2 + '//';
          t2 = _this._userInfo;
          if (t2.length !== 0) t1 = t1 + t2 + '@';
          if (!t4) t1 += t3;
          t2 = _this._port;
          if (t2 != null) t1 = t1 + ':' + H.S(t2);
        } else t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null) t1 = t1 + '?' + t2;
        t2 = _this._fragment;
        if (t2 != null) t1 = t1 + '#' + t2;
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        if (_this.___Uri__text == null) _this.___Uri__text = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('_text'));
      }
      return t1;
    },
    get$pathSegments() {
      var pathToSplit,
        _this = this,
        t1 = _this.___Uri_pathSegments;
      if (t1 == null) {
        pathToSplit = _this.path;
        if (
          pathToSplit.length !== 0 &&
          C.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47
        )
          pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
        t1 =
          pathToSplit.length === 0
            ? C.List_empty
            : P.List_List$unmodifiable(
                new H.MappedListIterable(
                  H._setArrayType(pathToSplit.split('/'), type$.JSArray_String),
                  P.core_Uri_decodeComponent$closure(),
                  type$.MappedListIterable_String_dynamic
                ),
                type$.String
              );
        if (_this.___Uri_pathSegments == null) _this.___Uri_pathSegments = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('pathSegments'));
      }
      return t1;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.___Uri_hashCode;
      if (t1 == null) {
        t1 = C.JSString_methods.get$hashCode(_this.get$_text());
        if (_this.___Uri_hashCode == null) _this.___Uri_hashCode = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('hashCode'));
      }
      return t1;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null) return '';
      if (C.JSString_methods.startsWith$1(host, '['))
        return C.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? P._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? '' : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? '' : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length) return false;
      return P._Uri__compareScheme(scheme, thisScheme);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (
        backCount = 0, refStart = 0;
        C.JSString_methods.startsWith$2(reference, '../', refStart);

      ) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, '/');
      while (true) {
        if (!(baseEnd > 0 && backCount > 0)) break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, '/', baseEnd - 1);
        if (newEnd < 0) break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 =
              !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else t1 = false;
        else t1 = false;
        if (t1) break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(
        base,
        baseEnd + 1,
        null,
        C.JSString_methods.substring$1(reference, refStart - 3 * backCount)
      );
    },
    resolve$1(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme,
        targetUserInfo,
        targetHost,
        targetPort,
        targetPath,
        targetQuery,
        packageNameEnd,
        packageName,
        mergedPath,
        t1,
        _this = this,
        _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = reference.get$hasPort()
            ? reference.get$port(reference)
            : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = '';
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = P._Uri__makePort(
            reference.get$hasPort() ? reference.get$port(reference) : _null,
            targetScheme
          );
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery()
            ? reference.get$query()
            : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path(reference) === '')
            targetQuery = reference.get$hasQuery()
              ? reference.get$query()
              : _this._query;
          else {
            packageNameEnd = P._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = C.JSString_methods.substring$2(
                targetPath,
                0,
                packageNameEnd
              );
              targetPath = reference.get$hasAbsolutePath()
                ? packageName +
                  P._Uri__removeDotSegments(reference.get$path(reference))
                : packageName +
                  P._Uri__removeDotSegments(
                    _this._mergePaths$2(
                      C.JSString_methods.substring$1(
                        targetPath,
                        packageName.length
                      ),
                      reference.get$path(reference)
                    )
                  );
            } else if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(
                reference.get$path(reference)
              );
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath =
                  targetScheme.length === 0
                    ? reference.get$path(reference)
                    : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments(
                  '/' + reference.get$path(reference)
                );
            else {
              mergedPath = _this._mergePaths$2(
                targetPath,
                reference.get$path(reference)
              );
              t1 = targetScheme.length === 0;
              if (
                !t1 ||
                targetHost != null ||
                C.JSString_methods.startsWith$1(targetPath, '/')
              )
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(
                  mergedPath,
                  !t1 || targetHost != null
                );
            }
            targetQuery = reference.get$hasQuery()
              ? reference.get$query()
              : _null;
          }
        }
      }
      return new P._Uri(
        targetScheme,
        targetUserInfo,
        targetHost,
        targetPort,
        targetPath,
        targetQuery,
        reference.get$hasFragment() ? reference.get$fragment() : _null
      );
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return C.JSString_methods.startsWith$1(this.path, '/');
    },
    toFilePath$0() {
      var pathSegments,
        _this = this,
        t1 = _this.scheme;
      if (t1 !== '' && t1 !== 'file')
        throw H.wrapException(
          P.UnsupportedError$(
            'Cannot extract a file path from a ' + t1 + ' URI'
          )
        );
      t1 = _this._query;
      if ((t1 == null ? '' : t1) !== '')
        throw H.wrapException(P.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? '' : t1) !== '')
        throw H.wrapException(P.UnsupportedError$(string$.Cannotff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (t1) t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host() !== '')
          H.throwExpression(P.UnsupportedError$(string$.Cannotn));
        pathSegments = _this.get$pathSegments();
        P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = P.StringBuffer__writeAll(
          C.JSString_methods.startsWith$1(_this.path, '/') ? '' + '/' : '',
          pathSegments,
          '/'
        );
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1,
        t2,
        _this = this;
      if (other == null) return false;
      if (_this === other) return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if ((_this._host != null) === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2) t1 = '';
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2) t1 = '';
                          t1 = t1 === other.get$fragment();
                        } else t1 = false;
                      } else t1 = false;
                    } else t1 = false;
                  } else t1 = false;
                else t1 = false;
              else t1 = false;
            else t1 = false;
          else t1 = false;
        else t1 = false;
      else t1 = false;
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    },
  };
  P._Uri__makePath_closure.prototype = {
    call$1(s) {
      return P._Uri__uriEncode(C.List_qg40, s, C.C_Utf8Codec, false);
    },
    $signature: 5,
  };
  P.UriData.prototype = {
    get$uri() {
      var t2,
        queryIndex,
        end,
        query,
        _this = this,
        _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._text;
        t2 = _this._separatorIndices[0] + 1;
        queryIndex = C.JSString_methods.indexOf$2(t1, '?', t2);
        end = t1.length;
        if (queryIndex >= 0) {
          query = P._Uri__normalizeOrSubstring(
            t1,
            queryIndex + 1,
            end,
            C.List_CVk,
            false
          );
          end = queryIndex;
        } else query = _null;
        t1 = _this._uriCache = new P._DataUri(
          'data',
          '',
          _null,
          _null,
          P._Uri__normalizeOrSubstring(t1, t2, end, C.List_qg4, false),
          query,
          _null
        );
      }
      return t1;
    },
    toString$0(_) {
      var t1 = this._text;
      return this._separatorIndices[0] === -1 ? 'data:' + t1 : t1;
    },
  };
  P._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables[state];
      C.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 434,
  };
  P._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i;
      for (t1 = chars.length, i = 0; i < t1; ++i)
        target[C.JSString_methods._codeUnitAt$1(chars, i) ^ 96] = transition;
    },
    $signature: 150,
  };
  P._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n;
      for (
        i = C.JSString_methods._codeUnitAt$1(range, 0),
          n = C.JSString_methods._codeUnitAt$1(range, 1);
        i <= n;
        ++i
      )
        target[(i ^ 96) >>> 0] = transition;
    },
    $signature: 150,
  };
  P._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return C.JSString_methods.startsWith$2(this._uri, '/', this._pathStart);
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? (this._schemeCache = this._computeScheme$0()) : t1;
    },
    _computeScheme$0() {
      var t2,
        _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0) return '';
      t2 = t1 === 4;
      if (t2 && C.JSString_methods.startsWith$1(_this._uri, 'http'))
        return 'http';
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._uri, 'https'))
        return 'https';
      if (t2 && C.JSString_methods.startsWith$1(_this._uri, 'file'))
        return 'file';
      if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, 'package'))
        return 'package';
      return C.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2
        ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1)
        : '';
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0
        ? C.JSString_methods.substring$2(this._uri, t1, this._portStart)
        : '';
    },
    get$port(_) {
      var t1,
        _this = this;
      if (_this.get$hasPort())
        return P.int_parse(
          C.JSString_methods.substring$2(
            _this._uri,
            _this._portStart + 1,
            _this._pathStart
          ),
          null
        );
      t1 = _this._schemeEnd;
      if (t1 === 4 && C.JSString_methods.startsWith$1(_this._uri, 'http'))
        return 80;
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._uri, 'https'))
        return 443;
      return 0;
    },
    get$path(_) {
      return C.JSString_methods.substring$2(
        this._uri,
        this._pathStart,
        this._queryStart
      );
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2
        ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2)
        : '';
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : '';
    },
    get$pathSegments() {
      var parts,
        i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (C.JSString_methods.startsWith$2(t1, '/', start)) ++start;
      if (start === end) return C.List_empty;
      parts = H._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          parts.push(C.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      parts.push(C.JSString_methods.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, type$.String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return (
        portDigitStart + port.length === this._pathStart &&
        C.JSString_methods.startsWith$2(this._uri, port, portDigitStart)
      );
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length) return _this;
      return new P._SimpleUri(
        C.JSString_methods.substring$2(t2, 0, t1),
        _this._schemeEnd,
        _this._hostStart,
        _this._portStart,
        _this._pathStart,
        _this._queryStart,
        t1,
        _this._schemeCache
      );
    },
    resolve$1(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2,
        t3,
        t4,
        isSimple,
        delta,
        refStart,
        basePathStart,
        packageNameEnd,
        basePathStart0,
        baseStart,
        baseEnd,
        baseUri,
        baseStart0,
        backCount,
        refStart0,
        insert,
        t1 = ref._schemeEnd;
      if (t1 > 0) return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0) return ref;
        t4 = t3 === 4;
        if (t4 && C.JSString_methods.startsWith$1(base._uri, 'file'))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && C.JSString_methods.startsWith$1(base._uri, 'http'))
          isSimple = !ref._isPort$1('80');
        else
          isSimple =
            !(
              t3 === 5 && C.JSString_methods.startsWith$1(base._uri, 'https')
            ) || !ref._isPort$1('443');
        if (isSimple) {
          delta = t3 + 1;
          return new P._SimpleUri(
            C.JSString_methods.substring$2(base._uri, 0, delta) +
              C.JSString_methods.substring$1(ref._uri, t1 + 1),
            t3,
            t2 + delta,
            ref._portStart + delta,
            ref._pathStart + delta,
            ref._queryStart + delta,
            ref._fragmentStart + delta,
            base._schemeCache
          );
        } else return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new P._SimpleUri(
            C.JSString_methods.substring$2(base._uri, 0, t3) +
              C.JSString_methods.substring$1(ref._uri, t1),
            base._schemeEnd,
            base._hostStart,
            base._portStart,
            base._pathStart,
            t1 + delta,
            t2 + delta,
            base._schemeCache
          );
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(
            C.JSString_methods.substring$2(base._uri, 0, t3) +
              C.JSString_methods.substring$1(t1, t2),
            base._schemeEnd,
            base._hostStart,
            base._portStart,
            base._pathStart,
            base._queryStart,
            t2 + (t3 - t2),
            base._schemeCache
          );
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (C.JSString_methods.startsWith$2(t2, '/', refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = P._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new P._SimpleUri(
          C.JSString_methods.substring$2(base._uri, 0, basePathStart0) +
            C.JSString_methods.substring$1(t2, refStart),
          base._schemeEnd,
          base._hostStart,
          base._portStart,
          basePathStart,
          t1 + delta,
          ref._fragmentStart + delta,
          base._schemeCache
        );
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, '../', refStart); )
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new P._SimpleUri(
          C.JSString_methods.substring$2(base._uri, 0, baseStart) +
            '/' +
            C.JSString_methods.substring$1(t2, refStart),
          base._schemeEnd,
          base._hostStart,
          base._portStart,
          baseStart,
          t1 + delta,
          ref._fragmentStart + delta,
          base._schemeCache
        );
      }
      baseUri = base._uri;
      packageNameEnd = P._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0) baseStart0 = packageNameEnd;
      else
        for (
          baseStart0 = baseStart;
          C.JSString_methods.startsWith$2(baseUri, '../', baseStart0);

        )
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (
          !(
            refStart0 <= t1 &&
            C.JSString_methods.startsWith$2(t2, '../', refStart)
          )
        )
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ''; baseEnd > baseStart0; ) {
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = '/';
            break;
          }
          --backCount;
          insert = '/';
        }
      }
      if (
        baseEnd === baseStart0 &&
        base._schemeEnd <= 0 &&
        !C.JSString_methods.startsWith$2(baseUri, '/', baseStart)
      ) {
        refStart -= backCount * 3;
        insert = '';
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(
        C.JSString_methods.substring$2(baseUri, 0, baseEnd) +
          insert +
          C.JSString_methods.substring$1(t2, refStart),
        base._schemeEnd,
        base._hostStart,
        base._portStart,
        baseStart,
        t1 + delta,
        ref._fragmentStart + delta,
        base._schemeCache
      );
    },
    toFilePath$0() {
      var t2,
        t3,
        _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && C.JSString_methods.startsWith$1(_this._uri, 'file'));
        t1 = t2;
      } else t1 = false;
      if (t1)
        throw H.wrapException(
          P.UnsupportedError$(
            'Cannot extract a file path from a ' + _this.get$scheme() + ' URI'
          )
        );
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw H.wrapException(P.UnsupportedError$(string$.Cannotfq));
        throw H.wrapException(P.UnsupportedError$(string$.Cannotff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (t3) t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          H.throwExpression(P.UnsupportedError$(string$.Cannotn));
        t1 = C.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null
        ? (this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri))
        : t1;
    },
    $eq(_, other) {
      if (other == null) return false;
      if (this === other) return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this,
        _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return new P._Uri(
        t1,
        t2,
        t3,
        t4,
        t7,
        t6,
        t8 < t5.length ? _this.get$fragment() : _null
      );
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1,
  };
  P._DataUri.prototype = {};
  P._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(
          P.RangeError$('max must be in range 0 < max \u2264 2^32, was ' + max)
        );
      return (Math.random() * max) >>> 0;
    },
    nextDouble$0() {
      return Math.random();
    },
  };
  N.ArgParser.prototype = {
    addFlag$6$abbr$defaultsTo$help$hide$negatable(
      $name,
      abbr,
      defaultsTo,
      help,
      hide,
      negatable
    ) {
      var _null = null;
      this._addOption$12$aliases$hide$negatable(
        $name,
        abbr,
        help,
        _null,
        _null,
        _null,
        defaultsTo,
        _null,
        C.OptionType_nMZ,
        C.List_empty,
        hide,
        negatable
      );
    },
    addFlag$2$hide($name, hide) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        null,
        false,
        null,
        hide,
        true
      );
    },
    addFlag$2$help($name, help) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        null,
        false,
        help,
        false,
        true
      );
    },
    addFlag$3$defaultsTo$help($name, defaultsTo, help) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        null,
        defaultsTo,
        help,
        false,
        true
      );
    },
    addFlag$3$help$negatable($name, help, negatable) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        null,
        false,
        help,
        false,
        negatable
      );
    },
    addFlag$4$abbr$help$negatable($name, abbr, help, negatable) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        abbr,
        false,
        help,
        false,
        negatable
      );
    },
    addFlag$3$abbr$help($name, abbr, help) {
      return this.addFlag$6$abbr$defaultsTo$help$hide$negatable(
        $name,
        abbr,
        false,
        help,
        false,
        true
      );
    },
    addOption$7$abbr$allowed$defaultsTo$help$hide$valueHelp(
      $name,
      abbr,
      allowed,
      defaultsTo,
      help,
      hide,
      valueHelp
    ) {
      this._addOption$12$aliases$hide$mandatory(
        $name,
        abbr,
        help,
        valueHelp,
        allowed,
        null,
        defaultsTo,
        null,
        C.OptionType_YwU,
        C.List_empty,
        hide,
        false
      );
    },
    addOption$2$hide($name, hide) {
      return this.addOption$7$abbr$allowed$defaultsTo$help$hide$valueHelp(
        $name,
        null,
        null,
        null,
        null,
        hide,
        null
      );
    },
    addOption$6$abbr$allowed$defaultsTo$help$valueHelp(
      $name,
      abbr,
      allowed,
      defaultsTo,
      help,
      valueHelp
    ) {
      return this.addOption$7$abbr$allowed$defaultsTo$help$hide$valueHelp(
        $name,
        abbr,
        allowed,
        defaultsTo,
        help,
        false,
        valueHelp
      );
    },
    addOption$4$allowed$defaultsTo$help($name, allowed, defaultsTo, help) {
      return this.addOption$7$abbr$allowed$defaultsTo$help$hide$valueHelp(
        $name,
        null,
        allowed,
        defaultsTo,
        help,
        false,
        null
      );
    },
    addMultiOption$5$abbr$help$splitCommas$valueHelp(
      $name,
      abbr,
      help,
      splitCommas,
      valueHelp
    ) {
      var t1 = H._setArrayType([], type$.JSArray_String);
      this._addOption$12$aliases$hide$splitCommas(
        $name,
        abbr,
        help,
        valueHelp,
        null,
        null,
        t1,
        null,
        C.OptionType_qyr,
        C.List_empty,
        false,
        false
      );
    },
    _addOption$14$aliases$hide$mandatory$negatable$splitCommas(
      $name,
      abbr,
      help,
      valueHelp,
      allowed,
      allowedHelp,
      defaultsTo,
      callback,
      type,
      aliases,
      hide,
      mandatory,
      negatable,
      splitCommas
    ) {
      var existing,
        t2,
        option,
        _i,
        _this = this,
        _null = null,
        t1 = H._setArrayType([$name], type$.JSArray_String);
      C.JSArray_methods.addAll$1(t1, aliases);
      if (
        C.JSArray_methods.any$1(t1, new N.ArgParser__addOption_closure(_this))
      )
        throw H.wrapException(
          P.ArgumentError$('Duplicate option or alias "' + $name + '".', _null)
        );
      t1 = abbr != null;
      if (t1) {
        existing = _this.findByAbbreviation$1(abbr);
        if (existing != null)
          throw H.wrapException(
            P.ArgumentError$(
              'Abbreviation "' +
                abbr +
                '" is already used by "' +
                existing.name +
                '".',
              _null
            )
          );
      }
      t2 =
        allowed == null
          ? _null
          : P.List_List$unmodifiable(allowed, type$.String);
      option = new G.Option(
        $name,
        abbr,
        help,
        valueHelp,
        t2,
        _null,
        defaultsTo,
        negatable,
        callback,
        type,
        splitCommas == null ? type === C.OptionType_qyr : splitCommas,
        false,
        hide
      );
      if ($name.length === 0)
        H.throwExpression(P.ArgumentError$('Name cannot be empty.', _null));
      else if (C.JSString_methods.startsWith$1($name, '-'))
        H.throwExpression(
          P.ArgumentError$('Name ' + $name + ' cannot start with "-".', _null)
        );
      t2 = $.$get$Option__invalidChars()._nativeRegExp;
      if (t2.test($name))
        H.throwExpression(
          P.ArgumentError$(
            'Name "' + $name + '" contains invalid characters.',
            _null
          )
        );
      if (t1) {
        if (abbr.length !== 1)
          H.throwExpression(
            P.ArgumentError$(
              'Abbreviation must be null or have length 1.',
              _null
            )
          );
        else if (abbr === '-')
          H.throwExpression(
            P.ArgumentError$('Abbreviation cannot be "-".', _null)
          );
        if (t2.test(abbr))
          H.throwExpression(
            P.ArgumentError$('Abbreviation is an invalid character.', _null)
          );
      }
      _this._arg_parser$_options.$indexSet(0, $name, option);
      _this._optionsAndSeparators.push(option);
      for (t1 = _this._aliases, _i = 0; false; ++_i)
        t1.$indexSet(0, aliases[_i], $name);
    },
    _addOption$12$aliases$hide$mandatory(
      $name,
      abbr,
      help,
      valueHelp,
      allowed,
      allowedHelp,
      defaultsTo,
      callback,
      type,
      aliases,
      hide,
      mandatory
    ) {
      return this._addOption$14$aliases$hide$mandatory$negatable$splitCommas(
        $name,
        abbr,
        help,
        valueHelp,
        allowed,
        allowedHelp,
        defaultsTo,
        callback,
        type,
        aliases,
        hide,
        mandatory,
        false,
        null
      );
    },
    _addOption$12$aliases$hide$negatable(
      $name,
      abbr,
      help,
      valueHelp,
      allowed,
      allowedHelp,
      defaultsTo,
      callback,
      type,
      aliases,
      hide,
      negatable
    ) {
      return this._addOption$14$aliases$hide$mandatory$negatable$splitCommas(
        $name,
        abbr,
        help,
        valueHelp,
        allowed,
        allowedHelp,
        defaultsTo,
        callback,
        type,
        aliases,
        hide,
        false,
        negatable,
        null
      );
    },
    _addOption$12$aliases$hide$splitCommas(
      $name,
      abbr,
      help,
      valueHelp,
      allowed,
      allowedHelp,
      defaultsTo,
      callback,
      type,
      aliases,
      hide,
      splitCommas
    ) {
      return this._addOption$14$aliases$hide$mandatory$negatable$splitCommas(
        $name,
        abbr,
        help,
        valueHelp,
        allowed,
        allowedHelp,
        defaultsTo,
        callback,
        type,
        aliases,
        hide,
        false,
        false,
        splitCommas
      );
    },
    findByAbbreviation$1(abbr) {
      var t1, t2;
      for (
        t1 = this.options._map,
          t1 = t1.get$values(t1),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        if (t2.abbr === abbr) return t2;
      }
      return null;
    },
    findByNameOrAlias$1($name) {
      var t1 = this._aliases.$index(0, $name);
      if (t1 == null) t1 = $name;
      return this.options._map.$index(0, t1);
    },
  };
  N.ArgParser__addOption_closure.prototype = {
    call$1($name) {
      return this.$this.findByNameOrAlias$1($name) != null;
    },
    $signature: 6,
  };
  Z.ArgParserException.prototype = {};
  V.ArgResults.prototype = {
    $index(_, $name) {
      var t1 = this._parser.options._map;
      if (!t1.containsKey$1($name))
        throw H.wrapException(
          P.ArgumentError$(
            'Could not find an option named "' + $name + '".',
            null
          )
        );
      t1 = t1.$index(0, $name);
      t1.toString;
      return t1.valueOrDefault$1(this._parsed.$index(0, $name));
    },
    wasParsed$1($name) {
      if (!this._parser.options._map.containsKey$1($name))
        throw H.wrapException(
          P.ArgumentError$(
            'Could not find an option named "' + $name + '".',
            null
          )
        );
      return this._parsed.containsKey$1($name);
    },
  };
  G.Option.prototype = {
    valueOrDefault$1(value) {
      var t1;
      if (value != null) return value;
      if (this.type === C.OptionType_qyr) {
        t1 = this.defaultsTo;
        return t1 == null ? H._setArrayType([], type$.JSArray_String) : t1;
      }
      return this.defaultsTo;
    },
  };
  G.OptionType.prototype = {};
  G.Parser0.prototype = {
    parse$0() {
      var commandResults,
        commandName,
        commandParser,
        error,
        t1,
        t3,
        t4,
        t5,
        t6,
        command,
        exception,
        _this = this,
        t2 = _this._args;
      t2.toList$0(0);
      commandResults = null;
      for (
        t3 = _this._parser$_rest, t4 = _this._grammar, t5 = t4.commands;
        !t2.get$isEmpty(t2);

      ) {
        t6 = t2._collection$_head;
        if (t6 === t2._collection$_tail)
          H.throwExpression(H.IterableElementError_noElement());
        t6 = t2.$ti._precomputed1._as(t2._collection$_table[t6]);
        if (t6 === '--') {
          t2.removeFirst$0();
          break;
        }
        command = t5._map.$index(0, t6);
        if (command != null) {
          if (t3.length !== 0)
            H.throwExpression(
              Z.ArgParserException$(
                'Cannot specify arguments before a command.',
                null
              )
            );
          commandName = t2.removeFirst$0();
          t5 = type$.JSArray_String;
          t6 = H._setArrayType([], t5);
          C.JSArray_methods.addAll$1(t6, t3);
          commandParser = new G.Parser0(
            commandName,
            _this,
            command,
            t2,
            t6,
            P.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic)
          );
          try {
            commandResults = commandParser.parse$0();
          } catch (exception) {
            t2 = H.unwrapException(exception);
            if (t2 instanceof Z.ArgParserException) {
              error = t2;
              t2 = error.message;
              t1 = H._setArrayType([commandName], t5);
              J.addAll$1$ax(t1, error.commands);
              throw H.wrapException(Z.ArgParserException$(t2, t1));
            } else throw exception;
          }
          C.JSArray_methods.set$length(t3, 0);
          break;
        }
        if (_this._parseSoloOption$0()) continue;
        if (_this._parseAbbreviation$1(_this)) continue;
        if (_this._parseLongOption$0()) continue;
        t3.push(t2.removeFirst$0());
      }
      t4.options._map.forEach$1(0, new G.Parser_parse_closure(_this));
      C.JSArray_methods.addAll$1(t3, t2);
      t2.clear$0(0);
      return new V.ArgResults(
        t4,
        _this._results,
        _this._commandName,
        new P.UnmodifiableListView(t3, type$.UnmodifiableListView_String)
      );
    },
    _readNextArgAsValue$1(option) {
      var t1 = this._args,
        t2 = t1.get$isEmpty(t1),
        t3 = 'Missing argument for "' + option.name + '".';
      if (t2) H.throwExpression(Z.ArgParserException$(t3, null));
      this._setOption$3(this._results, option, t1.get$first(t1));
      t1.removeFirst$0();
    },
    _parseSoloOption$0() {
      var opt,
        t1 = this._args;
      if (t1.get$first(t1).length !== 2) return false;
      if (!C.JSString_methods.startsWith$1(t1.get$first(t1), '-')) return false;
      opt = t1.get$first(t1)[1];
      if (!G._isLetterOrDigit(C.JSString_methods._codeUnitAt$1(opt, 0)))
        return false;
      this._handleSoloOption$1(opt);
      return true;
    },
    _handleSoloOption$1(opt) {
      var t1,
        t2,
        _this = this,
        option = _this._grammar.findByAbbreviation$1(opt);
      if (option == null) {
        t1 = _this._parser$_parent;
        t2 = 'Could not find an option or flag "-' + opt + '".';
        if (t1 == null) H.throwExpression(Z.ArgParserException$(t2, null));
        t1._handleSoloOption$1(opt);
        return true;
      }
      _this._args.removeFirst$0();
      if (option.type === C.OptionType_nMZ)
        _this._results.$indexSet(0, option.name, true);
      else _this._readNextArgAsValue$1(option);
      return true;
    },
    _parseAbbreviation$1(innermostCommand) {
      var index,
        t2,
        lettersAndDigits,
        rest,
        t1 = this._args;
      if (t1.get$first(t1).length < 2) return false;
      if (!C.JSString_methods.startsWith$1(t1.get$first(t1), '-')) return false;
      index = 1;
      while (true) {
        t2 = t1._collection$_head;
        if (t2 === t1._collection$_tail)
          H.throwExpression(H.IterableElementError_noElement());
        t2 = t1.$ti._precomputed1._as(t1._collection$_table[t2]);
        if (index < t2.length) {
          t2 = C.JSString_methods._codeUnitAt$1(t2, index);
          if (!(t2 >= 65 && t2 <= 90))
            if (!(t2 >= 97 && t2 <= 122)) t2 = t2 >= 48 && t2 <= 57;
            else t2 = true;
          else t2 = true;
        } else t2 = false;
        if (!t2) break;
        ++index;
      }
      if (index === 1) return false;
      lettersAndDigits = C.JSString_methods.substring$2(
        t1.get$first(t1),
        1,
        index
      );
      rest = C.JSString_methods.substring$1(t1.get$first(t1), index);
      if (
        C.JSString_methods.contains$1(rest, '\n') ||
        C.JSString_methods.contains$1(rest, '\r')
      )
        return false;
      this._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
      return true;
    },
    _handleAbbreviation$3(lettersAndDigits, rest, innermostCommand) {
      var t1,
        t2,
        i,
        i0,
        _this = this,
        c = C.JSString_methods.substring$2(lettersAndDigits, 0, 1),
        first = _this._grammar.findByAbbreviation$1(c);
      if (first == null) {
        t1 = _this._parser$_parent;
        t2 = string$.Could_ + c + '".';
        if (t1 == null) H.throwExpression(Z.ArgParserException$(t2, null));
        t1._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
        return true;
      } else if (first.type !== C.OptionType_nMZ)
        _this._setOption$3(
          _this._results,
          first,
          C.JSString_methods.substring$1(lettersAndDigits, 1) + rest
        );
      else {
        t1 =
          'Option "-' +
          c +
          '" is a flag and cannot handle value "' +
          C.JSString_methods.substring$1(lettersAndDigits, 1) +
          rest +
          '".';
        if (rest !== '') H.throwExpression(Z.ArgParserException$(t1, null));
        for (t1 = lettersAndDigits.length, i = 0; i < t1; i = i0) {
          i0 = i + 1;
          innermostCommand._parseShortFlag$1(
            C.JSString_methods.substring$2(lettersAndDigits, i, i0)
          );
        }
      }
      _this._args.removeFirst$0();
      return true;
    },
    _parseShortFlag$1(c) {
      var t1,
        t2,
        option = this._grammar.findByAbbreviation$1(c);
      if (option == null) {
        t1 = this._parser$_parent;
        t2 = string$.Could_ + c + '".';
        if (t1 == null) H.throwExpression(Z.ArgParserException$(t2, null));
        t1._parseShortFlag$1(c);
        return;
      }
      t1 = option.type;
      t2 = 'Option "-' + c + '" must be a flag to be in a collapsed "-".';
      if (t1 !== C.OptionType_nMZ)
        H.throwExpression(Z.ArgParserException$(t2, null));
      this._results.$indexSet(0, option.name, true);
    },
    _parseLongOption$0() {
      var index,
        t2,
        $name,
        t3,
        i,
        t4,
        t5,
        value,
        t1 = this._args;
      if (!C.JSString_methods.startsWith$1(t1.get$first(t1), '--'))
        return false;
      index = C.JSString_methods.indexOf$1(t1.get$first(t1), '=');
      t2 = index === -1;
      $name = t2
        ? C.JSString_methods.substring$1(t1.get$first(t1), 2)
        : C.JSString_methods.substring$2(t1.get$first(t1), 2, index);
      for (t3 = $name.length, i = 0; i !== t3; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1($name, i);
        if (!(t4 >= 65 && t4 <= 90))
          if (!(t4 >= 97 && t4 <= 122)) t5 = t4 >= 48 && t4 <= 57;
          else t5 = true;
        else t5 = true;
        if (!(t5 || t4 === 45 || t4 === 95)) return false;
      }
      value = t2
        ? null
        : C.JSString_methods.substring$1(t1.get$first(t1), index + 1);
      if (value != null)
        t1 =
          C.JSString_methods.contains$1(value, '\n') ||
          C.JSString_methods.contains$1(value, '\r');
      else t1 = false;
      if (t1) return false;
      this._handleLongOption$2($name, value);
      return true;
    },
    _handleLongOption$2($name, value) {
      var t2,
        _this = this,
        _null = null,
        _s32_ = 'Could not find an option named "',
        t1 = _this._grammar,
        option = t1.findByNameOrAlias$1($name);
      if (option != null) {
        _this._args.removeFirst$0();
        if (option.type === C.OptionType_nMZ) {
          t1 = 'Flag option "' + $name + '" should not be given a value.';
          if (value != null)
            H.throwExpression(Z.ArgParserException$(t1, _null));
          _this._results.$indexSet(0, option.name, true);
        } else if (value != null)
          _this._setOption$3(_this._results, option, value);
        else _this._readNextArgAsValue$1(option);
      } else if (C.JSString_methods.startsWith$1($name, 'no-')) {
        option = t1.findByNameOrAlias$1(
          C.JSString_methods.substring$1($name, 3)
        );
        if (option == null) {
          t1 = _this._parser$_parent;
          t2 = _s32_ + $name + '".';
          if (t1 == null) H.throwExpression(Z.ArgParserException$(t2, _null));
          t1._handleLongOption$2($name, value);
          return true;
        }
        _this._args.removeFirst$0();
        t1 = option.type;
        t2 = 'Cannot negate non-flag option "' + $name + '".';
        if (t1 !== C.OptionType_nMZ)
          H.throwExpression(Z.ArgParserException$(t2, _null));
        t1 = option.negatable;
        t2 = 'Cannot negate option "' + $name + '".';
        if (!t1) H.throwExpression(Z.ArgParserException$(t2, _null));
        _this._results.$indexSet(0, option.name, false);
      } else {
        t1 = _this._parser$_parent;
        t2 = _s32_ + $name + '".';
        if (t1 == null) H.throwExpression(Z.ArgParserException$(t2, _null));
        t1._handleLongOption$2($name, value);
        return true;
      }
      return true;
    },
    _setOption$3(results, option, value) {
      var list, t1, t2, t3, _i, element;
      if (option.type !== C.OptionType_qyr) {
        this._validateAllowed$2(option, value);
        results.$indexSet(0, option.name, value);
        return;
      }
      list = results.putIfAbsent$2(
        option.name,
        new G.Parser__setOption_closure()
      );
      if (option.splitCommas)
        for (
          t1 = value.split(','),
            t2 = t1.length,
            t3 = J.getInterceptor$ax(list),
            _i = 0;
          _i < t2;
          ++_i
        ) {
          element = t1[_i];
          this._validateAllowed$2(option, element);
          t3.add$1(list, element);
        }
      else {
        this._validateAllowed$2(option, value);
        J.add$1$ax(list, value);
      }
    },
    _validateAllowed$2(option, value) {
      var t2,
        t1 = option.allowed;
      if (t1 == null) return;
      t1 = C.JSArray_methods.contains$1(t1, value);
      t2 =
        '"' +
        value +
        '" is not an allowed value for option "' +
        option.name +
        '".';
      if (!t1) H.throwExpression(Z.ArgParserException$(t2, null));
    },
  };
  G.Parser_parse_closure.prototype = {
    call$2($name, option) {
      var parsedOption = this.$this._results.$index(0, $name),
        callback = option.callback;
      if (callback == null) return;
      callback.call$1(option.valueOrDefault$1(parsedOption));
    },
    $signature: 430,
  };
  G.Parser__setOption_closure.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_String);
    },
    $signature: 42,
  };
  G._Usage.prototype = {
    get$_columnWidths() {
      var _this = this,
        t1 = _this.___Usage__columnWidths;
      if (t1 == null) {
        t1 = _this._calculateColumnWidths$0();
        if (_this.___Usage__columnWidths == null)
          _this.___Usage__columnWidths = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('_columnWidths'));
      }
      return t1;
    },
    generate$0() {
      var t1,
        t2,
        t3,
        t4,
        _i,
        optionOrSeparator,
        t5,
        _this = this;
      for (
        t1 = _this._usage$_optionsAndSeparators,
          t2 = t1.length,
          t3 = type$.Option,
          t4 = _this._usage$_buffer,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        optionOrSeparator = t1[_i];
        if (typeof optionOrSeparator == 'string') {
          t5 = t4._contents;
          t4._contents =
            (t5.length !== 0 ? (t4._contents = t5 + '\n\n') : t5) +
            optionOrSeparator;
          _this._newlinesNeeded = 1;
          continue;
        }
        t3._as(optionOrSeparator);
        if (optionOrSeparator.hide) continue;
        _this._writeOption$1(optionOrSeparator);
      }
      t1 = t4._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeOption$1(option) {
      var allowedNames,
        t2,
        t3,
        t4,
        _i,
        $name,
        isDefault,
        t5,
        _this = this,
        t1 = option.abbr;
      _this._write$2(0, t1 == null ? '' : '-' + t1 + ', ');
      t1 = _this._longOption$1(option);
      _this._write$2(1, t1);
      t1 = option.help;
      if (t1 != null) _this._write$2(2, t1);
      t1 = option.allowedHelp;
      if (t1 != null) {
        allowedNames = J.toList$0$ax(t1.get$keys(t1));
        C.JSArray_methods.sort$0(allowedNames);
        _this._newline$0();
        for (
          t2 = allowedNames.length,
            t3 = option.defaultsTo,
            t4 = type$.List_dynamic._is(t3),
            _i = 0;
          _i < allowedNames.length;
          allowedNames.length === t2 ||
            (0, H.throwConcurrentModificationError)(allowedNames),
            ++_i
        ) {
          $name = allowedNames[_i];
          isDefault = t4
            ? C.JSArray_methods.contains$1(t3, $name)
            : t3 === $name;
          t5 = '      [' + $name + ']';
          _this._write$2(1, t5 + (isDefault ? ' (default)' : ''));
          t5 = t1.$index(0, $name);
          t5.toString;
          _this._write$2(2, t5);
        }
        _this._newline$0();
      } else if (option.allowed != null)
        _this._write$2(2, _this._buildAllowedList$1(option));
      else {
        t1 = option.type;
        if (t1 === C.OptionType_nMZ) {
          if (option.defaultsTo === true) _this._write$2(2, '(defaults to on)');
        } else if (t1 === C.OptionType_qyr) {
          t1 = option.defaultsTo;
          if (t1 != null && J.get$isNotEmpty$asx(t1)) {
            type$.List_dynamic._as(t1);
            _this._write$2(
              2,
              '(defaults to ' +
                new H.MappedListIterable(
                  t1,
                  new G._Usage__writeOption_closure(),
                  H._arrayInstanceType(t1)._eval$1(
                    'MappedListIterable<1,String>'
                  )
                ).join$1(0, ', ') +
                ')'
            );
          }
        } else {
          t1 = option.defaultsTo;
          if (t1 != null) _this._write$2(2, '(defaults to "' + H.S(t1) + '")');
        }
      }
    },
    _longOption$1(option) {
      var t1 = option.name,
        result = option.negatable ? '--[no-]' + t1 : '--' + t1;
      t1 = option.valueHelp;
      return t1 != null ? result + ('=<' + t1 + '>') : result;
    },
    _calculateColumnWidths$0() {
      var t1, t2, t3, abbr, title, _i, option, t4, t5, t6, t7, isDefault;
      for (
        t1 = this._usage$_optionsAndSeparators,
          t2 = t1.length,
          t3 = type$.List_dynamic,
          abbr = 0,
          title = 0,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        option = t1[_i];
        if (!(option instanceof G.Option)) continue;
        if (option.hide) continue;
        t4 = option.abbr;
        abbr = Math.max(abbr, (t4 == null ? '' : '-' + t4 + ', ').length);
        t4 = this._longOption$1(option);
        title = Math.max(title, t4.length);
        t4 = option.allowedHelp;
        if (t4 != null)
          for (
            t4 = J.get$iterator$ax(t4.get$keys(t4)),
              t5 = option.defaultsTo,
              t6 = t3._is(t5);
            t4.moveNext$0();

          ) {
            t7 = t4.get$current();
            isDefault = t6 ? C.JSArray_methods.contains$1(t5, t7) : t5 === t7;
            t7 = '      [' + t7 + ']';
            title = Math.max(
              title,
              (t7 + (isDefault ? ' (default)' : '')).length
            );
          }
      }
      return H._setArrayType([abbr, title + 4], type$.JSArray_int);
    },
    _newline$0() {
      ++this._newlinesNeeded;
      this._currentColumn = 0;
    },
    _write$2(column, text) {
      var t1,
        _i,
        lines = H._setArrayType(text.split('\n'), type$.JSArray_String);
      this.get$_columnWidths();
      while (true) {
        if (
          !(
            lines.length !== 0 &&
            J.trim$0$s(C.JSArray_methods.get$first(lines)) === ''
          )
        )
          break;
        C.JSArray_methods.removeAt$1(lines, 0);
      }
      while (true) {
        if (
          !(
            lines.length !== 0 &&
            J.trim$0$s(C.JSArray_methods.get$last(lines)) === ''
          )
        )
          break;
        lines.pop();
      }
      for (
        t1 = lines.length, _i = 0;
        _i < lines.length;
        lines.length === t1 || (0, H.throwConcurrentModificationError)(lines),
          ++_i
      )
        this._usage$_writeLine$2(column, lines[_i]);
    },
    _usage$_writeLine$2(column, text) {
      var t1,
        t2,
        _this = this;
      for (t1 = _this._usage$_buffer; (t2 = _this._newlinesNeeded), t2 > 0; ) {
        t1._contents += '\n';
        _this._newlinesNeeded = t2 - 1;
      }
      for (; (t2 = _this._currentColumn), t2 !== column; ) {
        if (t2 < 2)
          t1._contents += C.JSString_methods.$mul(
            ' ',
            _this.get$_columnWidths()[_this._currentColumn]
          );
        else t1._contents += '\n';
        _this._currentColumn = (_this._currentColumn + 1) % 3;
      }
      _this.get$_columnWidths();
      if (column < 2)
        t1._contents += C.JSString_methods.padRight$1(
          text,
          _this.get$_columnWidths()[column]
        );
      else t1._contents += text;
      _this._currentColumn = (_this._currentColumn + 1) % 3;
      if (column === 2) ++_this._newlinesNeeded;
    },
    _buildAllowedList$1(option) {
      var t2,
        t3,
        first,
        _i,
        allowed,
        t1 = option.defaultsTo,
        isDefault = type$.List_dynamic._is(t1)
          ? C.JSArray_methods.get$contains(t1)
          : new G._Usage__buildAllowedList_closure(option);
      t1 = '' + '[';
      for (
        t2 = option.allowed, t3 = t2.length, first = true, _i = 0;
        _i < t3;
        ++_i, first = false
      ) {
        allowed = t2[_i];
        if (!first) t1 += ', ';
        t1 += H.S(allowed);
        if (isDefault.call$1(allowed)) t1 += ' (default)';
      }
      t1 += ']';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  G._Usage__writeOption_closure.prototype = {
    call$1(value) {
      return '"' + H.S(value) + '"';
    },
    $signature: 65,
  };
  G._Usage__buildAllowedList_closure.prototype = {
    call$1(value) {
      return value === this.option.defaultsTo;
    },
    $signature: 88,
  };
  V.ErrorResult.prototype = {
    complete$1(completer) {
      completer.completeError$2(this.error, this.stackTrace);
    },
    get$hashCode(_) {
      return (
        (J.get$hashCode$(this.error) ^
          H.Primitives_objectHashCode(this.stackTrace) ^
          492929599) >>>
        0
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof V.ErrorResult &&
        J.$eq$(this.error, other.error) &&
        this.stackTrace === other.stackTrace
      );
    },
    $isResult: 1,
  };
  F.ValueResult.prototype = {
    complete$1(completer) {
      completer.complete$1(this.value);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.value) ^ 842997089) >>> 0;
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof F.ValueResult && J.$eq$(this.value, other.value);
    },
    $isResult: 1,
  };
  G.StreamQueue.prototype = {
    _updateRequests$0() {
      var t1,
        t2,
        t3,
        _this = this;
      for (
        t1 = _this._requestQueue, t2 = _this._eventQueue;
        !t1.get$isEmpty(t1);

      ) {
        t3 = t1._collection$_head;
        if (t3 === t1._collection$_tail)
          H.throwExpression(H.IterableElementError_noElement());
        if (
          t1.$ti._precomputed1
            ._as(t1._collection$_table[t3])
            .update$2(t2, _this._isDone)
        )
          t1.removeFirst$0();
        else return;
      }
      if (!_this._isDone) _this._stream_queue$_subscription.pause$0(0);
    },
    _ensureListening$0() {
      var t1,
        _this = this;
      if (_this._isDone) return;
      t1 = _this._stream_queue$_subscription;
      if (t1 == null)
        _this._stream_queue$_subscription = _this._stream_queue$_source.listen$3$onDone$onError(
          0,
          new G.StreamQueue__ensureListening_closure(_this),
          new G.StreamQueue__ensureListening_closure0(_this),
          new G.StreamQueue__ensureListening_closure1(_this)
        );
      else t1.resume$0(0);
    },
    _addResult$1(result) {
      ++this._eventsReceived;
      this._eventQueue._queue_list$_add$1(result);
      this._updateRequests$0();
    },
    _addRequest$1(request) {
      var _this = this,
        t1 = _this._requestQueue;
      if (t1._collection$_head === t1._collection$_tail) {
        if (request.update$2(_this._eventQueue, _this._isDone)) return;
        _this._ensureListening$0();
      }
      t1._add$1(request);
    },
  };
  G.StreamQueue__ensureListening_closure.prototype = {
    call$1(data) {
      var t1 = this.$this;
      t1._addResult$1(
        new F.ValueResult(data, t1.$ti._eval$1('ValueResult<1>'))
      );
    },
    $signature() {
      return this.$this.$ti._eval$1('~(1)');
    },
  };
  G.StreamQueue__ensureListening_closure1.prototype = {
    call$2(error, stackTrace) {
      this.$this._addResult$1(new V.ErrorResult(error, stackTrace));
    },
    $signature: 96,
  };
  G.StreamQueue__ensureListening_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._stream_queue$_subscription = null;
      t1._isDone = true;
      t1._updateRequests$0();
    },
    $signature: 0,
  };
  G._NextRequest.prototype = {
    update$2(events, isDone) {
      if (!events.get$isEmpty(events)) {
        events.removeFirst$0().complete$1(this._completer);
        return true;
      }
      if (isDone) {
        this._completer.completeError$2(
          new P.StateError('No elements'),
          P.StackTrace_current()
        );
        return true;
      }
      return false;
    },
    $is_EventRequest: 1,
  };
  Q.Repl.prototype = {};
  Q.alwaysValid_closure.prototype = {
    call$1(text) {
      return true;
    },
    $signature: 6,
  };
  B.ReplAdapter.prototype = {
    runAsync$0() {
      var rl,
        runController,
        _this = this,
        t1 = {},
        t2 = J.get$isTTY$x(self.process.stdin),
        output = (t2 == null ? false : t2) ? self.process.stdout : null;
      t2 = _this.repl.prompt;
      rl = J.createInterface$1$x($.$get$readline(), {
        input: self.process.stdin,
        output: output,
        prompt: t2,
      });
      _this.rl = rl;
      t1.statement = '';
      t1.prompt = t2;
      runController = H._Cell$();
      runController._value = P.StreamController_StreamController(
        _this.get$exit(_this),
        new B.ReplAdapter_runAsync_closure(t1, _this, rl, runController),
        type$.String
      );
      t1 = runController._readLocal$0();
      return new P._ControllerStream(
        t1,
        H.instanceType(t1)._eval$1('_ControllerStream<1>')
      );
    },
    exit$0(_) {
      var t1 = this.rl;
      if (t1 != null) J.close$0$x(t1);
      this.rl = null;
    },
  };
  B.ReplAdapter_runAsync_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        lineController,
        lineQueue,
        line,
        error,
        stackTrace,
        t1,
        t2,
        t3,
        t4,
        $prompt,
        prompt0,
        t5,
        t6,
        t7,
        t8,
        t9,
        line0,
        toZone,
        statement,
        lastEvent,
        exception,
        replacement,
        $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              lineController = P.StreamController_StreamController(
                null,
                null,
                type$.String
              );
              t1 = lineController;
              t2 = Q.QueueList$(null, type$.Result_String);
              t3 = P.ListQueue$(type$._EventRequest_dynamic);
              lineQueue = new G.StreamQueue(
                new P._ControllerStream(
                  t1,
                  H.instanceType(t1)._eval$1('_ControllerStream<1>')
                ),
                t2,
                t3,
                type$.StreamQueue_String
              );
              t1 = $async$self.rl;
              t2 = J.getInterceptor$x(t1);
              t2.on$2(
                t1,
                'line',
                P.allowInterop(
                  new B.ReplAdapter_runAsync__closure(lineController)
                )
              );
              (t3 = $async$self._box_0),
                (t4 = $async$self.$this.repl),
                ($prompt = t4.continuation),
                (prompt0 = t4.prompt),
                (t5 = $async$self.runController),
                (t6 = t5.__late_helper$_name);
            case 6:
              // for condition
              // trivial condition
              t7 = J.get$isTTY$x(self.process.stdin);
              if (t7 == null ? false : t7)
                J.write$1$x(self.process.stdout, t3.prompt);
              t7 = lineQueue;
              t8 = H.instanceType(t7);
              t9 = new P._Future($.Zone__current, t8._eval$1('_Future<1>'));
              t7._addRequest$1(
                new G._NextRequest(
                  new P._AsyncCompleter(t9, t8._eval$1('_AsyncCompleter<1>')),
                  t8._eval$1('_NextRequest<1>')
                )
              );
              $async$goto = 8;
              return P._asyncAwait(t9, $async$call$0);
            case 8:
              // returning from await.
              line = $async$result;
              t7 = J.get$isTTY$x(self.process.stdin);
              if (!(t7 == null ? false : t7)) {
                line0 = t3.prompt + H.S(line);
                toZone = $.printToZone;
                if (toZone == null) H.printString(line0);
                else toZone.call$1(line0);
              }
              statement = C.JSString_methods.$add(t3.statement, line);
              t3.statement = statement;
              if (t4.validator.call$1(statement)) {
                t7 = t5._value;
                if (t7 === t5) H.throwExpression(H.LateError$localNI(t6));
                t8 = t3.statement;
                t9 = t7._state;
                if (t9 >= 4) H.throwExpression(t7._badEventState$0());
                if ((t9 & 1) !== 0) t7._sendData$1(t8);
                else if ((t9 & 3) === 0) {
                  t7 = t7._ensurePendingEvents$0();
                  t8 = new P._DelayedData(t8);
                  lastEvent = t7.lastPendingEvent;
                  if (lastEvent == null)
                    t7.firstPendingEvent = t7.lastPendingEvent = t8;
                  else {
                    lastEvent.set$next(t8);
                    t7.lastPendingEvent = t8;
                  }
                }
                t3.statement = '';
                t3.prompt = prompt0;
                t2.setPrompt$1(t1, prompt0);
              } else {
                t3.statement += '\n';
                t3.prompt = $prompt;
                t2.setPrompt$1(t1, $prompt);
              }
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              error = H.unwrapException($async$exception);
              stackTrace = H.getTraceFromException($async$exception);
              t1 = $async$self.runController;
              t2 = t1._readLocal$0();
              error = error;
              stackTrace = stackTrace;
              H.checkNotNullable(error, 'error', type$.Object);
              if (t2._state >= 4) H.throwExpression(t2._badEventState$0());
              replacement = $.Zone__current.errorCallback$2(error, stackTrace);
              if (replacement != null) {
                error = replacement.error;
                stackTrace = replacement.stackTrace;
              } else if (stackTrace == null)
                stackTrace = P.AsyncError_defaultStackTrace(error);
              t3 = t2._state;
              if ((t3 & 1) !== 0) t2._sendError$2(error, stackTrace);
              else if ((t3 & 3) === 0)
                t2._ensurePendingEvents$0().add$1(
                  0,
                  new P._DelayedError(error, stackTrace)
                );
              $async$goto = 9;
              return P._asyncAwait($async$self.$this.exit$0(0), $async$call$0);
            case 9:
              // returning from await.
              J.close$0$x(t1._readLocal$0());
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  B.ReplAdapter_runAsync__closure.prototype = {
    call$1(value) {
      return this.lineController.add$1(0, H._asString(value));
    },
    $signature: 112,
  };
  B.Stdin.prototype = {};
  B.Stdout.prototype = {};
  B.ReadlineModule.prototype = {};
  B.ReadlineOptions.prototype = {};
  B.ReadlineInterface.prototype = {};
  O.EmptyUnmodifiableSet.prototype = {
    get$iterator(_) {
      return C.C_EmptyIterator;
    },
    get$length(_) {
      return 0;
    },
    contains$1(_, element) {
      return false;
    },
    toSet$0(_) {
      return P.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
  };
  O._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin.prototype = {};
  U.DefaultEquality.prototype = {};
  U.IterableEquality.prototype = {
    equals$2(_, elements1, elements2) {
      var it1, it2, hasNext;
      if (elements1 === elements2) return true;
      it1 = J.get$iterator$ax(elements1);
      it2 = J.get$iterator$ax(elements2);
      for (; true; ) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0()) return false;
        if (!hasNext) return true;
        if (!J.$eq$(it1.get$current(), it2.get$current())) return false;
      }
    },
  };
  U.ListEquality.prototype = {
    equals$2(_, list1, list2) {
      var t1, $length, t2, i;
      if (list1 == null ? list2 == null : list1 === list2) return true;
      if (list1 == null || list2 == null) return false;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length !== t2.get$length(list2)) return false;
      for (i = 0; i < $length; ++i)
        if (!J.$eq$(t1.$index(list1, i), t2.$index(list2, i))) return false;
      return true;
    },
    hash$1(list) {
      var t1, hash, i;
      for (t1 = list.length, hash = 0, i = 0; i < t1; ++i) {
        hash = (hash + J.get$hashCode$(list[i])) & 2147483647;
        hash = (hash + ((hash << 10) >>> 0)) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = (hash + ((hash << 3) >>> 0)) & 2147483647;
      hash ^= hash >>> 11;
      return (hash + ((hash << 15) >>> 0)) & 2147483647;
    },
  };
  U._MapEntry.prototype = {
    get$hashCode(_) {
      return (
        (3 * J.get$hashCode$(this.key) + 7 * J.get$hashCode$(this.value)) &
        2147483647
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof U._MapEntry &&
        J.$eq$(this.key, other.key) &&
        J.$eq$(this.value, other.value)
      );
    },
  };
  U.MapEquality.prototype = {
    equals$2(_, map1, map2) {
      var equalElementCounts, t1, key, entry, count;
      if (map1 === map2) return true;
      if (map1.get$length(map1) !== map2.get$length(map2)) return false;
      equalElementCounts = P.HashMap_HashMap(type$._MapEntry, type$.int);
      for (t1 = J.get$iterator$ax(map1.get$keys(map1)); t1.moveNext$0(); ) {
        key = t1.get$current();
        entry = new U._MapEntry(this, key, map1.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = J.get$iterator$ax(map2.get$keys(map2)); t1.moveNext$0(); ) {
        key = t1.get$current();
        entry = new U._MapEntry(this, key, map2.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0) return false;
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1(map) {
      var t1, t2, hash, key;
      for (
        t1 = J.get$iterator$ax(map.get$keys(map)),
          t2 = H._instanceType(this)._rest[1],
          hash = 0;
        t1.moveNext$0();

      ) {
        key = t1.get$current();
        hash =
          (hash +
            3 * J.get$hashCode$(key) +
            7 * J.get$hashCode$(t2._as(map.$index(0, key)))) &
          2147483647;
      }
      hash = (hash + ((hash << 3) >>> 0)) & 2147483647;
      hash ^= hash >>> 11;
      return (hash + ((hash << 15) >>> 0)) & 2147483647;
    },
  };
  Q.QueueList.prototype = {
    add$1(_, element) {
      this._queue_list$_add$1(element);
    },
    addAll$1(_, iterable) {
      var addCount,
        $length,
        t1,
        endSpace,
        t2,
        preSpace,
        _this = this;
      if (type$.List_dynamic._is(iterable)) {
        addCount = J.get$length$asx(iterable);
        $length = _this.get$length(_this);
        t1 = $length + addCount;
        if (t1 >= J.get$length$asx(_this._table)) {
          _this._preGrow$1(t1);
          J.setRange$4$ax(_this._table, $length, t1, iterable, 0);
          _this.set$_tail(_this.get$_tail() + addCount);
        } else {
          endSpace = J.get$length$asx(_this._table) - _this.get$_tail();
          t1 = _this._table;
          t2 = J.getInterceptor$ax(t1);
          if (addCount < endSpace) {
            t2.setRange$4(
              t1,
              _this.get$_tail(),
              _this.get$_tail() + addCount,
              iterable,
              0
            );
            _this.set$_tail(_this.get$_tail() + addCount);
          } else {
            preSpace = addCount - endSpace;
            t2.setRange$4(
              t1,
              _this.get$_tail(),
              _this.get$_tail() + endSpace,
              iterable,
              0
            );
            J.setRange$4$ax(_this._table, 0, preSpace, iterable, endSpace);
            _this.set$_tail(preSpace);
          }
        }
      } else
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); )
          _this._queue_list$_add$1(t1.get$current());
    },
    cast$1$0(_, $T) {
      return new Q._CastQueueList(
        this,
        J.cast$1$0$ax(this._table, $T),
        -1,
        -1,
        H._instanceType(this)
          ._eval$1('@<QueueList.E>')
          ._bind$1($T)
          ._eval$1('_CastQueueList<1,2>')
      );
    },
    toString$0(_) {
      return P.IterableBase_iterableToFullString(this, '{', '}');
    },
    addFirst$1(element) {
      var _this = this;
      _this.set$_head(
        ((_this.get$_head() - 1) & (J.get$length$asx(_this._table) - 1)) >>> 0
      );
      J.$indexSet$ax(_this._table, _this.get$_head(), element);
      if (_this.get$_head() === _this.get$_tail()) _this._grow$0();
    },
    removeFirst$0() {
      var result,
        _this = this;
      if (_this.get$_head() === _this.get$_tail())
        throw H.wrapException(P.StateError$('No element'));
      result = H._instanceType(_this)
        ._eval$1('QueueList.E')
        ._as(J.$index$asx(_this._table, _this.get$_head()));
      J.$indexSet$ax(_this._table, _this.get$_head(), null);
      _this.set$_head(
        ((_this.get$_head() + 1) & (J.get$length$asx(_this._table) - 1)) >>> 0
      );
      return result;
    },
    get$length(_) {
      return (
        ((this.get$_tail() - this.get$_head()) &
          (J.get$length$asx(this._table) - 1)) >>>
        0
      );
    },
    set$length(_, value) {
      var delta,
        newTail,
        t1,
        t2,
        _this = this;
      if (value < 0)
        throw H.wrapException(
          P.RangeError$('Length ' + value + ' may not be negative.')
        );
      if (
        value > _this.get$length(_this) &&
        !H._instanceType(_this)._eval$1('QueueList.E')._is(null)
      )
        throw H.wrapException(
          P.UnsupportedError$(
            'The length can only be increased when the element type is nullable, but the current element type is `' +
              H.createRuntimeType(
                H._instanceType(_this)._eval$1('QueueList.E')
              ).toString$0(0) +
              '`.'
          )
        );
      delta = value - _this.get$length(_this);
      if (delta >= 0) {
        if (J.get$length$asx(_this._table) <= value) _this._preGrow$1(value);
        _this.set$_tail(
          ((_this.get$_tail() + delta) &
            (J.get$length$asx(_this._table) - 1)) >>>
            0
        );
        return;
      }
      newTail = _this.get$_tail() + delta;
      t1 = _this._table;
      if (newTail >= 0) J.fillRange$3$ax(t1, newTail, _this.get$_tail(), null);
      else {
        newTail += J.get$length$asx(t1);
        J.fillRange$3$ax(_this._table, 0, _this.get$_tail(), null);
        t1 = _this._table;
        t2 = J.getInterceptor$asx(t1);
        t2.fillRange$3(t1, newTail, t2.get$length(t1), null);
      }
      _this.set$_tail(newTail);
    },
    $index(_, index) {
      var _this = this;
      if (index < 0 || index >= _this.get$length(_this))
        throw H.wrapException(
          P.RangeError$(
            'Index ' +
              index +
              ' must be in the range [0..' +
              _this.get$length(_this) +
              ').'
          )
        );
      return H._instanceType(_this)
        ._eval$1('QueueList.E')
        ._as(
          J.$index$asx(
            _this._table,
            ((_this.get$_head() + index) &
              (J.get$length$asx(_this._table) - 1)) >>>
              0
          )
        );
    },
    $indexSet(_, index, value) {
      var _this = this;
      if (index < 0 || index >= _this.get$length(_this))
        throw H.wrapException(
          P.RangeError$(
            'Index ' +
              index +
              ' must be in the range [0..' +
              _this.get$length(_this) +
              ').'
          )
        );
      J.$indexSet$ax(
        _this._table,
        ((_this.get$_head() + index) & (J.get$length$asx(_this._table) - 1)) >>>
          0,
        value
      );
    },
    _queue_list$_add$1(element) {
      var _this = this;
      J.$indexSet$ax(_this._table, _this.get$_tail(), element);
      _this.set$_tail(
        ((_this.get$_tail() + 1) & (J.get$length$asx(_this._table) - 1)) >>> 0
      );
      if (_this.get$_head() === _this.get$_tail()) _this._grow$0();
    },
    _grow$0() {
      var _this = this,
        newTable = P.List_List$filled(
          J.get$length$asx(_this._table) * 2,
          null,
          false,
          H._instanceType(_this)._eval$1('QueueList.E?')
        ),
        split = J.get$length$asx(_this._table) - _this.get$_head();
      C.JSArray_methods.setRange$4(
        newTable,
        0,
        split,
        _this._table,
        _this.get$_head()
      );
      C.JSArray_methods.setRange$4(
        newTable,
        split,
        split + _this.get$_head(),
        _this._table,
        0
      );
      _this.set$_head(0);
      _this.set$_tail(J.get$length$asx(_this._table));
      _this._table = newTable;
    },
    _writeToList$1(target) {
      var $length,
        firstPartSize,
        _this = this;
      if (_this.get$_head() <= _this.get$_tail()) {
        $length = _this.get$_tail() - _this.get$_head();
        C.JSArray_methods.setRange$4(
          target,
          0,
          $length,
          _this._table,
          _this.get$_head()
        );
        return $length;
      } else {
        firstPartSize = J.get$length$asx(_this._table) - _this.get$_head();
        C.JSArray_methods.setRange$4(
          target,
          0,
          firstPartSize,
          _this._table,
          _this.get$_head()
        );
        C.JSArray_methods.setRange$4(
          target,
          firstPartSize,
          firstPartSize + _this.get$_tail(),
          _this._table,
          0
        );
        return _this.get$_tail() + firstPartSize;
      }
    },
    _preGrow$1(newElementCount) {
      var _this = this,
        newTable = P.List_List$filled(
          Q.QueueList__nextPowerOf2(
            newElementCount +
              C.JSInt_methods._shrOtherPositive$1(newElementCount, 1)
          ),
          null,
          false,
          H._instanceType(_this)._eval$1('QueueList.E?')
        );
      _this.set$_tail(_this._writeToList$1(newTable));
      _this._table = newTable;
      _this.set$_head(0);
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    $isIterable: 1,
    $isList: 1,
    get$_head() {
      return this._head;
    },
    get$_tail() {
      return this._tail;
    },
    set$_head(val) {
      return (this._head = val);
    },
    set$_tail(val) {
      return (this._tail = val);
    },
  };
  Q._CastQueueList.prototype = {
    get$_head() {
      return this._queue_list$_delegate.get$_head();
    },
    set$_head(value) {
      this._queue_list$_delegate.set$_head(value);
    },
    get$_tail() {
      return this._queue_list$_delegate.get$_tail();
    },
    set$_tail(value) {
      this._queue_list$_delegate.set$_tail(value);
    },
  };
  Q._QueueList_Object_ListMixin.prototype = {};
  L.UnmodifiableSetView.prototype = {};
  L.UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      return L.UnmodifiableSetMixin__throw();
    },
    addAll$1(_, elements) {
      return L.UnmodifiableSetMixin__throw();
    },
  };
  L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {};
  M._DelegatingIterableBase.prototype = {
    contains$1(_, element) {
      return J.contains$1$asx(this.get$_base(), element);
    },
    elementAt$1(_, index) {
      return J.elementAt$1$ax(this.get$_base(), index);
    },
    get$first(_) {
      return J.get$first$ax(this.get$_base());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_base());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_base());
    },
    get$iterator(_) {
      return J.get$iterator$ax(this.get$_base());
    },
    join$1(_, separator) {
      return J.join$1$ax(this.get$_base(), separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, '');
    },
    get$last(_) {
      return J.get$last$ax(this.get$_base());
    },
    get$length(_) {
      return J.get$length$asx(this.get$_base());
    },
    map$1$1(_, f, $T) {
      return J.map$1$1$ax(this.get$_base(), f, $T);
    },
    get$single(_) {
      return J.get$single$ax(this.get$_base());
    },
    skip$1(_, n) {
      return J.skip$1$ax(this.get$_base(), n);
    },
    take$1(_, n) {
      return J.take$1$ax(this.get$_base(), n);
    },
    toList$1$growable(_, growable) {
      return J.toList$1$growable$ax(this.get$_base(), true);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toSet$0(_) {
      return J.toSet$0$ax(this.get$_base());
    },
    where$1(_, test) {
      return J.where$1$ax(this.get$_base(), test);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_base());
    },
    $isIterable: 1,
  };
  M.DelegatingSet.prototype = {
    add$1(_, value) {
      return this._base.add$1(0, value);
    },
    addAll$1(_, elements) {
      this._base.addAll$1(0, elements);
    },
    toSet$0(_) {
      return new M.DelegatingSet(
        this._base.toSet$0(0),
        H._instanceType(this)._eval$1('DelegatingSet<1>')
      );
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_base() {
      return this._base;
    },
  };
  M.MapKeySet.prototype = {
    get$_base() {
      var t1 = this._baseMap;
      return t1.get$keys(t1);
    },
    contains$1(_, element) {
      return this._baseMap.containsKey$1(element);
    },
    get$isEmpty(_) {
      var t1 = this._baseMap;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._baseMap;
      return t1.get$isNotEmpty(t1);
    },
    get$length(_) {
      var t1 = this._baseMap;
      return t1.get$length(t1);
    },
    toString$0(_) {
      return P.IterableBase_iterableToFullString(this, '{', '}');
    },
    difference$1(other) {
      return J.where$1$ax(
        this.get$_base(),
        new M.MapKeySet_difference_closure(this, other)
      ).toSet$0(0);
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
  };
  M.MapKeySet_difference_closure.prototype = {
    call$1(element) {
      return !this.other._source.contains$1(0, element);
    },
    $signature() {
      return this.$this.$ti._eval$1('bool(1)');
    },
  };
  M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin.prototype = {};
  V.BufferModule.prototype = {};
  V.BufferConstants.prototype = {};
  V.Buffer.prototype = {};
  F.ConsoleModule.prototype = {};
  F.Console.prototype = {};
  F.EventEmitter.prototype = {};
  D.FS.prototype = {};
  D.FSConstants.prototype = {};
  D.FSWatcher.prototype = {};
  D.ReadStream.prototype = {};
  D.ReadStreamOptions.prototype = {};
  D.WriteStream.prototype = {};
  D.WriteStreamOptions.prototype = {};
  D.FileOptions.prototype = {};
  D.StatOptions.prototype = {};
  D.MkdirOptions.prototype = {};
  D.RmdirOptions.prototype = {};
  D.WatchOptions.prototype = {};
  D.WatchFileOptions.prototype = {};
  D.Stats.prototype = {};
  E.Promise.prototype = {};
  E.Date.prototype = {};
  E.JsError.prototype = {};
  E.Atomics.prototype = {};
  Y.Modules.prototype = {};
  Y.Module1.prototype = {};
  Y.Net.prototype = {};
  Y.Socket.prototype = {};
  Y.NetAddress.prototype = {};
  Y.NetServer.prototype = {};
  X.NodeJsError.prototype = {};
  X.JsAssertionError.prototype = {};
  X.JsRangeError.prototype = {};
  X.JsReferenceError.prototype = {};
  X.JsSyntaxError.prototype = {};
  X.JsTypeError.prototype = {};
  X.JsSystemError.prototype = {};
  X.Process.prototype = {};
  X.CPUUsage.prototype = {};
  X.Release.prototype = {};
  D.StreamModule.prototype = {};
  D.Readable.prototype = {};
  D.Writable.prototype = {};
  D.Duplex.prototype = {};
  D.Transform.prototype = {};
  D.WritableOptions.prototype = {};
  D.ReadableOptions.prototype = {};
  L.Immediate.prototype = {};
  L.Timeout.prototype = {};
  N.TTY.prototype = {};
  N.TTYReadStream.prototype = {};
  N.TTYWriteStream.prototype = {};
  M.Util.prototype = {};
  M.futureToPromise_closure.prototype = {
    call$2(resolve, reject) {
      this.future.then$1$2$onError(
        0,
        new M.futureToPromise__closure(resolve, this.T),
        reject,
        type$.dynamic
      );
    },
    $signature: 422,
  };
  M.futureToPromise__closure.prototype = {
    call$1(result) {
      return this.resolve.call$1(result);
    },
    $signature() {
      return this.T._eval$1('@(0)');
    },
  };
  M.Context.prototype = {
    absolute$7(part1, part2, part3, part4, part5, part6, part7) {
      var t1;
      M._validateArgList(
        'absolute',
        H._setArrayType(
          [part1, part2, part3, part4, part5, part6, part7],
          type$.JSArray_nullable_String
        )
      );
      if (part2 == null) {
        t1 = this.style;
        t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      } else t1 = false;
      if (t1) return part1;
      t1 = this._context$_current;
      return this.join$8(
        0,
        t1 == null ? D.current() : t1,
        part1,
        part2,
        part3,
        part4,
        part5,
        part6,
        part7
      );
    },
    absolute$1(part1) {
      return this.absolute$7(part1, null, null, null, null, null, null);
    },
    dirname$1(path) {
      var t1,
        t2,
        parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.removeTrailingSeparators$0();
      t1 = parsed.parts;
      t2 = t1.length;
      if (t2 === 0) {
        t1 = parsed.root;
        return t1 == null ? '.' : t1;
      }
      if (t2 === 1) {
        t1 = parsed.root;
        return t1 == null ? '.' : t1;
      }
      C.JSArray_methods.removeLast$0(t1);
      parsed.separators.pop();
      parsed.removeTrailingSeparators$0();
      return parsed.toString$0(0);
    },
    join$8(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H._setArrayType(
        [part1, part2, part3, part4, part5, part6, part7, part8],
        type$.JSArray_nullable_String
      );
      M._validateArgList('join', parts);
      return this.joinAll$1(
        new H.WhereTypeIterable(parts, type$.WhereTypeIterable_String)
      );
    },
    join$2($receiver, part1, part2) {
      return this.join$8(
        $receiver,
        part1,
        part2,
        null,
        null,
        null,
        null,
        null,
        null
      );
    },
    joinAll$1(parts) {
      var t1,
        t2,
        t3,
        needsSeparator,
        isAbsoluteAndNotRootRelative,
        t4,
        t5,
        parsed,
        path;
      for (
        t1 = parts.get$iterator(parts),
          t2 = new H.WhereIterator(t1, new M.Context_joinAll_closure()),
          t3 = this.style,
          needsSeparator = false,
          isAbsoluteAndNotRootRelative = false,
          t4 = '';
        t2.moveNext$0();

      ) {
        t5 = t1.get$current();
        if (t3.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = X.ParsedPath_ParsedPath$parse(t5, t3);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = C.JSString_methods.substring$2(
            path,
            0,
            t3.rootLength$2$withDrive(path, true)
          );
          parsed.root = t4;
          if (t3.needsSeparator$1(t4))
            parsed.separators[0] = t3.get$separator();
          t4 = '' + parsed.toString$0(0);
        } else if (t3.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t3.isRootRelative$1(t5);
          t4 = '' + t5;
        } else {
          if (!(t5.length !== 0 && t3.containsSeparator$1(t5[0])))
            if (needsSeparator) t4 += t3.get$separator();
          t4 += t5;
        }
        needsSeparator = t3.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = H._arrayInstanceType(t1)._eval$1('WhereIterable<1>');
      t2 = P.List_List$of(
        new H.WhereIterable(t1, new M.Context_split_closure(), t2),
        true,
        t2._eval$1('Iterable.E')
      );
      parsed.parts = t2;
      t1 = parsed.root;
      if (t1 != null) C.JSArray_methods.insert$2(t2, 0, t1);
      return parsed.parts;
    },
    canonicalize$1(path) {
      var t1, parsed;
      path = this.absolute$1(path);
      t1 = this.style;
      if (t1 !== $.$get$Style_windows() && !this._needsNormalization$1(path))
        return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, t1);
      parsed.normalize$1$canonicalize(true);
      return parsed.toString$0(0);
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path)) return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var i,
        start,
        previous,
        t2,
        t3,
        previousPrevious,
        codeUnit,
        t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (C.JSString_methods._codeUnitAt$1(path, i) === 47) return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (
        t2 = new H.CodeUnits(path)._string,
          t3 = t2.length,
          i = start,
          previousPrevious = null;
        i < t3;
        ++i, previousPrevious = previous, previous = codeUnit
      ) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47) return true;
          if (previous != null && t1.isSeparator$1(previous)) return true;
          if (previous === 46)
            t4 =
              previousPrevious == null ||
              previousPrevious === 46 ||
              t1.isSeparator$1(previousPrevious);
          else t4 = false;
          if (t4) return true;
        }
      }
      if (previous == null) return true;
      if (t1.isSeparator$1(previous)) return true;
      if (previous === 46)
        t1 =
          previousPrevious == null ||
          t1.isSeparator$1(previousPrevious) ||
          previousPrevious === 46;
      else t1 = false;
      if (t1) return true;
      return false;
    },
    relative$2$from(path, from) {
      var fromParsed,
        pathParsed,
        t2,
        t3,
        _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = from == null;
      if (t1 && _this.style.rootLength$1(path) <= 0)
        return _this.normalize$1(path);
      if (t1) {
        t1 = _this._context$_current;
        from = t1 == null ? D.current() : t1;
      } else from = _this.absolute$1(from);
      t1 = _this.style;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw H.wrapException(
          X.PathException$(_s26_ + path + '" from "' + from + '".')
        );
      fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      if (t2.length !== 0 && J.$eq$(t2[0], '.'))
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3) t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else t2 = false;
      if (t2) return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        if (t2.length !== 0) {
          t3 = pathParsed.parts;
          t2 = t3.length !== 0 && t1.pathsEqual$2(t2[0], t3[0]);
        } else t2 = false;
        if (!t2) break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      if (t2.length !== 0 && J.$eq$(t2[0], '..'))
        throw H.wrapException(
          X.PathException$(_s26_ + path + '" from "' + from + '".')
        );
      t2 = type$.String;
      C.JSArray_methods.insertAll$2(
        pathParsed.parts,
        0,
        P.List_List$filled(fromParsed.parts.length, '..', false, t2)
      );
      t3 = pathParsed.separators;
      t3[0] = '';
      C.JSArray_methods.insertAll$2(
        t3,
        1,
        P.List_List$filled(
          fromParsed.parts.length,
          t1.get$separator(),
          false,
          t2
        )
      );
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0) return '.';
      if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), '.')) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        t1.pop();
        t1.pop();
        t1.push('');
      }
      pathParsed.root = '';
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    relative$1(path) {
      return this.relative$2$from(path, null);
    },
    _isWithinOrEquals$2($parent, child) {
      var relative,
        t1,
        parentIsAbsolute,
        childIsAbsolute,
        childIsRootRelative,
        parentIsRootRelative,
        result,
        exception,
        _this = this;
      $parent = $parent;
      child = child;
      t1 = _this.style;
      parentIsAbsolute = t1.rootLength$1($parent) > 0;
      childIsAbsolute = t1.rootLength$1(child) > 0;
      if (parentIsAbsolute && !childIsAbsolute) {
        child = _this.absolute$1(child);
        if (t1.isRootRelative$1($parent)) $parent = _this.absolute$1($parent);
      } else if (childIsAbsolute && !parentIsAbsolute) {
        $parent = _this.absolute$1($parent);
        if (t1.isRootRelative$1(child)) child = _this.absolute$1(child);
      } else if (childIsAbsolute && parentIsAbsolute) {
        childIsRootRelative = t1.isRootRelative$1(child);
        parentIsRootRelative = t1.isRootRelative$1($parent);
        if (childIsRootRelative && !parentIsRootRelative)
          child = _this.absolute$1(child);
        else if (parentIsRootRelative && !childIsRootRelative)
          $parent = _this.absolute$1($parent);
      }
      result = _this._isWithinOrEqualsFast$2($parent, child);
      if (result !== C._PathRelation_inconclusive) return result;
      relative = null;
      try {
        relative = _this.relative$2$from(child, $parent);
      } catch (exception) {
        if (H.unwrapException(exception) instanceof X.PathException)
          return C._PathRelation_different;
        else throw exception;
      }
      if (t1.rootLength$1(relative) > 0) return C._PathRelation_different;
      if (J.$eq$(relative, '.')) return C._PathRelation_equal;
      if (J.$eq$(relative, '..')) return C._PathRelation_different;
      return J.get$length$asx(relative) >= 3 &&
        J.startsWith$1$s(relative, '..') &&
        t1.isSeparator$1(J.codeUnitAt$1$s(relative, 2))
        ? C._PathRelation_different
        : C._PathRelation_within;
    },
    _isWithinOrEqualsFast$2($parent, child) {
      var t1,
        parentRootLength,
        childRootLength,
        i,
        t2,
        t3,
        childIndex,
        parentIndex,
        lastCodeUnit,
        lastParentSeparator,
        parentCodeUnit,
        childCodeUnit,
        parentIndex0,
        direction,
        _this = this;
      if ($parent === '.') $parent = '';
      t1 = _this.style;
      parentRootLength = t1.rootLength$1($parent);
      childRootLength = t1.rootLength$1(child);
      if (parentRootLength !== childRootLength)
        return C._PathRelation_different;
      for (i = 0; i < parentRootLength; ++i)
        if (
          !t1.codeUnitsEqual$2(
            C.JSString_methods._codeUnitAt$1($parent, i),
            C.JSString_methods._codeUnitAt$1(child, i)
          )
        )
          return C._PathRelation_different;
      t2 = child.length;
      t3 = $parent.length;
      childIndex = childRootLength;
      parentIndex = parentRootLength;
      lastCodeUnit = 47;
      lastParentSeparator = null;
      while (true) {
        if (!(parentIndex < t3 && childIndex < t2)) break;
        c$0: {
          parentCodeUnit = C.JSString_methods.codeUnitAt$1(
            $parent,
            parentIndex
          );
          childCodeUnit = C.JSString_methods.codeUnitAt$1(child, childIndex);
          if (t1.codeUnitsEqual$2(parentCodeUnit, childCodeUnit)) {
            if (t1.isSeparator$1(parentCodeUnit))
              lastParentSeparator = parentIndex;
            ++parentIndex;
            ++childIndex;
            lastCodeUnit = parentCodeUnit;
            break c$0;
          }
          if (
            t1.isSeparator$1(parentCodeUnit) &&
            t1.isSeparator$1(lastCodeUnit)
          ) {
            parentIndex0 = parentIndex + 1;
            lastParentSeparator = parentIndex;
            parentIndex = parentIndex0;
            break c$0;
          } else if (
            t1.isSeparator$1(childCodeUnit) &&
            t1.isSeparator$1(lastCodeUnit)
          ) {
            ++childIndex;
            break c$0;
          }
          if (parentCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++parentIndex;
            if (parentIndex === t3) break;
            parentCodeUnit = C.JSString_methods.codeUnitAt$1(
              $parent,
              parentIndex
            );
            if (t1.isSeparator$1(parentCodeUnit)) {
              parentIndex0 = parentIndex + 1;
              lastParentSeparator = parentIndex;
              parentIndex = parentIndex0;
              break c$0;
            }
            if (parentCodeUnit === 46) {
              ++parentIndex;
              if (
                parentIndex === t3 ||
                t1.isSeparator$1(
                  C.JSString_methods.codeUnitAt$1($parent, parentIndex)
                )
              )
                return C._PathRelation_inconclusive;
            }
          }
          if (childCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            if (childIndex === t2) break;
            childCodeUnit = C.JSString_methods.codeUnitAt$1(child, childIndex);
            if (t1.isSeparator$1(childCodeUnit)) {
              ++childIndex;
              break c$0;
            }
            if (childCodeUnit === 46) {
              ++childIndex;
              if (
                childIndex === t2 ||
                t1.isSeparator$1(
                  C.JSString_methods.codeUnitAt$1(child, childIndex)
                )
              )
                return C._PathRelation_inconclusive;
            }
          }
          if (
            _this._pathDirection$2(child, childIndex) !== C._PathDirection_988
          )
            return C._PathRelation_inconclusive;
          if (
            _this._pathDirection$2($parent, parentIndex) !==
            C._PathDirection_988
          )
            return C._PathRelation_inconclusive;
          return C._PathRelation_different;
        }
      }
      if (childIndex === t2) {
        if (
          parentIndex === t3 ||
          t1.isSeparator$1(
            C.JSString_methods.codeUnitAt$1($parent, parentIndex)
          )
        )
          lastParentSeparator = parentIndex;
        else if (lastParentSeparator == null)
          lastParentSeparator = Math.max(0, parentRootLength - 1);
        direction = _this._pathDirection$2($parent, lastParentSeparator);
        if (direction === C._PathDirection_8Gl) return C._PathRelation_equal;
        return direction === C._PathDirection_ZGD
          ? C._PathRelation_inconclusive
          : C._PathRelation_different;
      }
      direction = _this._pathDirection$2(child, childIndex);
      if (direction === C._PathDirection_8Gl) return C._PathRelation_equal;
      if (direction === C._PathDirection_ZGD)
        return C._PathRelation_inconclusive;
      return t1.isSeparator$1(
        C.JSString_methods.codeUnitAt$1(child, childIndex)
      ) || t1.isSeparator$1(lastCodeUnit)
        ? C._PathRelation_within
        : C._PathRelation_different;
    },
    _pathDirection$2(path, index) {
      var t1, t2, i, depth, reachedRoot, i0, t3;
      for (
        t1 = path.length,
          t2 = this.style,
          i = index,
          depth = 0,
          reachedRoot = false;
        i < t1;

      ) {
        while (true) {
          if (
            !(
              i < t1 &&
              t2.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, i))
            )
          )
            break;
          ++i;
        }
        if (i === t1) break;
        i0 = i;
        while (true) {
          if (
            !(
              i0 < t1 &&
              !t2.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, i0))
            )
          )
            break;
          ++i0;
        }
        t3 = i0 - i;
        if (!(t3 === 1 && C.JSString_methods.codeUnitAt$1(path, i) === 46))
          if (
            t3 === 2 &&
            C.JSString_methods.codeUnitAt$1(path, i) === 46 &&
            C.JSString_methods.codeUnitAt$1(path, i + 1) === 46
          ) {
            --depth;
            if (depth < 0) break;
            if (depth === 0) reachedRoot = true;
          } else ++depth;
        if (i0 === t1) break;
        i = i0 + 1;
      }
      if (depth < 0) return C._PathDirection_ZGD;
      if (depth === 0) return C._PathDirection_8Gl;
      if (reachedRoot) return C._PathDirection_FIw;
      return C._PathDirection_988;
    },
    hash$1(path) {
      var result,
        parsed,
        t1,
        _this = this;
      path = _this.absolute$1(path);
      result = _this._hashFast$1(path);
      if (result != null) return result;
      parsed = X.ParsedPath_ParsedPath$parse(path, _this.style);
      parsed.normalize$0();
      t1 = _this._hashFast$1(parsed.toString$0(0));
      t1.toString;
      return t1;
    },
    _hashFast$1(path) {
      var t1, t2, hash, beginning, wasSeparator, i, codeUnit, t3, next;
      for (
        t1 = path.length,
          t2 = this.style,
          hash = 4603,
          beginning = true,
          wasSeparator = true,
          i = 0;
        i < t1;
        ++i
      ) {
        codeUnit = t2.canonicalizeCodeUnit$1(
          C.JSString_methods._codeUnitAt$1(path, i)
        );
        if (t2.isSeparator$1(codeUnit)) {
          wasSeparator = true;
          continue;
        }
        if (codeUnit === 46 && wasSeparator) {
          t3 = i + 1;
          if (t3 === t1) break;
          next = C.JSString_methods._codeUnitAt$1(path, t3);
          if (t2.isSeparator$1(next)) continue;
          if (!beginning)
            if (next === 46) {
              t3 = i + 2;
              t3 =
                t3 === t1 ||
                t2.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, t3));
            } else t3 = false;
          else t3 = false;
          if (t3) return null;
        }
        hash = (((hash & 67108863) * 33) ^ codeUnit) >>> 0;
        beginning = false;
        wasSeparator = false;
      }
      return hash;
    },
    withoutExtension$1(path) {
      var i,
        parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      for (i = parsed.parts.length - 1; i >= 0; --i)
        if (J.get$length$asx(parsed.parts[i]) !== 0) {
          parsed.parts[i] = parsed._splitExtension$0()[0];
          break;
        }
      return parsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0) return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(
          this.join$2(0, t2 == null ? D.current() : t2, path)
        );
      }
    },
    prettyUri$1(uri) {
      var path,
        rel,
        _this = this,
        typedUri = M._parseUri(uri);
      if (
        typedUri.get$scheme() === 'file' &&
        _this.style === $.$get$Style_url()
      )
        return typedUri.toString$0(0);
      else if (
        typedUri.get$scheme() !== 'file' &&
        typedUri.get$scheme() !== '' &&
        _this.style !== $.$get$Style_url()
      )
        return typedUri.toString$0(0);
      path = _this.normalize$1(
        _this.style.pathFromUri$1(M._parseUri(typedUri))
      );
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length
        ? path
        : rel;
    },
  };
  M.Context_joinAll_closure.prototype = {
    call$1(part) {
      return part !== '';
    },
    $signature: 6,
  };
  M.Context_split_closure.prototype = {
    call$1(part) {
      return part.length !== 0;
    },
    $signature: 6,
  };
  M._validateArgList_closure.prototype = {
    call$1(arg) {
      return arg == null ? 'null' : '"' + arg + '"';
    },
    $signature: 420,
  };
  M._PathDirection.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  M._PathRelation.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  B.InternalStyle.prototype = {
    getRoot$1(path) {
      var $length = this.rootLength$1(path);
      if ($length > 0) return C.JSString_methods.substring$2(path, 0, $length);
      return this.isRootRelative$1(path) ? path[0] : null;
    },
    relativePathToUri$1(path) {
      var segments = M.Context_Context(this).split$1(0, path);
      if (
        this.isSeparator$1(
          C.JSString_methods.codeUnitAt$1(path, path.length - 1)
        )
      )
        C.JSArray_methods.add$1(segments, '');
      return P._Uri__Uri(null, null, segments, null);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      return codeUnit1 === codeUnit2;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    },
    canonicalizeCodeUnit$1(codeUnit) {
      return codeUnit;
    },
    canonicalizePart$1(part) {
      return part;
    },
  };
  X.ParsedPath.prototype = {
    get$basename() {
      var _this = this,
        t1 = type$.String,
        copy = new X.ParsedPath(
          _this.style,
          _this.root,
          _this.isRootRelative,
          P.List_List$from(_this.parts, true, t1),
          P.List_List$from(_this.separators, true, t1)
        );
      copy.removeTrailingSeparators$0();
      t1 = copy.parts;
      if (t1.length === 0) {
        t1 = _this.root;
        return t1 == null ? '' : t1;
      }
      return C.JSArray_methods.get$last(t1);
    },
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 =
          J.$eq$(C.JSArray_methods.get$last(t1), '') ||
          !J.$eq$(C.JSArray_methods.get$last(this.separators), '');
      else t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1,
        t2,
        _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), '')))
          break;
        C.JSArray_methods.removeLast$0(_this.parts);
        _this.separators.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0) t1[t2 - 1] = '';
    },
    normalize$1$canonicalize(canonicalize) {
      var t1,
        t2,
        t3,
        leadingDoubles,
        _i,
        part,
        t4,
        _this = this,
        newParts = H._setArrayType([], type$.JSArray_String);
      for (
        t1 = _this.parts,
          t2 = t1.length,
          t3 = _this.style,
          leadingDoubles = 0,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        part = t1[_i];
        t4 = J.getInterceptor$(part);
        if (!(t4.$eq(part, '.') || t4.$eq(part, '')))
          if (t4.$eq(part, '..'))
            if (newParts.length !== 0) newParts.pop();
            else ++leadingDoubles;
          else newParts.push(canonicalize ? t3.canonicalizePart$1(part) : part);
      }
      if (_this.root == null)
        C.JSArray_methods.insertAll$2(
          newParts,
          0,
          P.List_List$filled(leadingDoubles, '..', false, type$.String)
        );
      if (newParts.length === 0 && _this.root == null) newParts.push('.');
      _this.parts = newParts;
      _this.separators = P.List_List$filled(
        newParts.length + 1,
        t3.get$separator(),
        true,
        type$.String
      );
      t1 = _this.root;
      if (t1 == null || newParts.length === 0 || !t3.needsSeparator$1(t1))
        _this.separators[0] = '';
      t1 = _this.root;
      if (t1 != null && t3 === $.$get$Style_windows()) {
        if (canonicalize) t1 = _this.root = t1.toLowerCase();
        t1.toString;
        _this.root = H.stringReplaceAllUnchecked(t1, '/', '\\');
      }
      _this.removeTrailingSeparators$0();
    },
    normalize$0() {
      return this.normalize$1$canonicalize(false);
    },
    toString$0(_) {
      var i,
        _this = this,
        t1 = _this.root;
      t1 = t1 != null ? '' + t1 : '';
      for (i = 0; i < _this.parts.length; ++i)
        t1 = t1 + H.S(_this.separators[i]) + H.S(_this.parts[i]);
      t1 += H.S(C.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _kthLastIndexOf$3(path, character, k) {
      var index, count, leftMostIndexedCharacter;
      for (
        index = path.length - 1, count = 0, leftMostIndexedCharacter = 0;
        index >= 0;
        --index
      )
        if (path[index] === character) {
          ++count;
          if (count === k) return index;
          leftMostIndexedCharacter = index;
        }
      return leftMostIndexedCharacter;
    },
    _splitExtension$1(level) {
      var t1, file, lastDot;
      if (level <= 0)
        throw H.wrapException(
          P.RangeError$value(
            level,
            'level',
            "level's value must be greater than 0"
          )
        );
      t1 = this.parts;
      t1 = new H.CastList(
        t1,
        H._arrayInstanceType(t1)._eval$1('CastList<1,String?>')
      );
      file = t1.lastWhere$2$orElse(
        t1,
        new X.ParsedPath__splitExtension_closure(),
        new X.ParsedPath__splitExtension_closure0()
      );
      if (file == null) return H._setArrayType(['', ''], type$.JSArray_String);
      if (file === '..')
        return H._setArrayType(['..', ''], type$.JSArray_String);
      lastDot = this._kthLastIndexOf$3(file, '.', level);
      if (lastDot <= 0)
        return H._setArrayType([file, ''], type$.JSArray_String);
      return H._setArrayType(
        [
          C.JSString_methods.substring$2(file, 0, lastDot),
          C.JSString_methods.substring$1(file, lastDot),
        ],
        type$.JSArray_String
      );
    },
    _splitExtension$0() {
      return this._splitExtension$1(1);
    },
  };
  X.ParsedPath__splitExtension_closure.prototype = {
    call$1(p) {
      return p !== '';
    },
    $signature: 187,
  };
  X.ParsedPath__splitExtension_closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 2,
  };
  X.PathException.prototype = {
    toString$0(_) {
      return 'PathException: ' + this.message;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
  };
  K.PathMap.prototype = {};
  K.PathMap__create_closure.prototype = {
    call$2(path1, path2) {
      if (path1 == null) return path2 == null;
      if (path2 == null) return false;
      return (
        this._box_0.context._isWithinOrEquals$2(path1, path2) ===
        C._PathRelation_equal
      );
    },
    $signature: 408,
  };
  K.PathMap__create_closure0.prototype = {
    call$1(path) {
      return path == null ? 0 : this._box_0.context.hash$1(path);
    },
    $signature: 405,
  };
  K.PathMap__create_closure1.prototype = {
    call$1(path) {
      return typeof path == 'string' || path == null;
    },
    $signature: 88,
  };
  O.Style.prototype = {
    toString$0(_) {
      return this.get$name(this);
    },
  };
  E.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, '/');
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      return t1 !== 0 && C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive(path, withDrive) {
      if (path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === '' || uri.get$scheme() === 'file') {
        t1 = uri.get$path(uri);
        return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
      }
      throw H.wrapException(
        P.ArgumentError$(
          'Uri ' + uri.toString$0(0) + " must have scheme 'file:'.",
          null
        )
      );
    },
    absolutePathToUri$1(path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        C.JSArray_methods.addAll$1(
          t1,
          H._setArrayType(['', ''], type$.JSArray_String)
        );
      else if (parsed.get$hasTrailingSeparator())
        C.JSArray_methods.add$1(parsed.parts, '');
      return P._Uri__Uri(null, null, parsed.parts, 'file');
    },
    get$name() {
      return 'posix';
    },
    get$separator() {
      return '/';
    },
  };
  F.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, '/');
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0) return false;
      if (C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47) return true;
      return (
        C.JSString_methods.endsWith$1(path, '://') &&
        this.rootLength$1(path) === t1
      );
    },
    rootLength$2$withDrive(path, withDrive) {
      var i,
        codeUnit,
        index,
        t2,
        t1 = path.length;
      if (t1 === 0) return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 0) === 47) return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47) return 0;
        if (codeUnit === 58) {
          if (i === 0) return 0;
          index = C.JSString_methods.indexOf$2(
            path,
            '/',
            C.JSString_methods.startsWith$2(path, '//', i + 1) ? i + 3 : i
          );
          if (index <= 0) return t1;
          if (!withDrive || t1 < index + 3) return index;
          if (!C.JSString_methods.startsWith$1(path, 'file://')) return index;
          if (!B.isDriveLetter(path, index + 1)) return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return (
        path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47
      );
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return P.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return P.Uri_parse(path);
    },
    get$name() {
      return 'url';
    },
    get$separator() {
      return '/';
    },
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, '/');
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0) return false;
      t1 = C.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2,
        index,
        t1 = path.length;
      if (t1 === 0) return 0;
      t2 = C.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47) return 1;
      if (t2 === 92) {
        if (t1 < 2 || C.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = C.JSString_methods.indexOf$2(path, '\\', 2);
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, '\\', index + 1);
          if (index > 0) return index;
        }
        return t1;
      }
      if (t1 < 3) return 0;
      if (!B.isAlphabetic(t2)) return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 1) !== 58) return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92)) return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== '' && uri.get$scheme() !== 'file')
        throw H.wrapException(
          P.ArgumentError$(
            'Uri ' + uri.toString$0(0) + " must have scheme 'file:'.",
            null
          )
        );
      path = uri.get$path(uri);
      if (uri.get$host() === '') {
        if (
          path.length >= 3 &&
          C.JSString_methods.startsWith$1(path, '/') &&
          B.isDriveLetter(path, 1)
        )
          path = C.JSString_methods.replaceFirst$2(path, '/', '');
      } else path = '\\\\' + uri.get$host() + path;
      t1 = H.stringReplaceAllUnchecked(path, '/', '\\');
      return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts,
        t2,
        parsed = X.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (C.JSString_methods.startsWith$1(t1, '\\\\')) {
        rootParts = new H.WhereIterable(
          H._setArrayType(t1.split('\\'), type$.JSArray_String),
          new L.WindowsStyle_absolutePathToUri_closure(),
          type$.WhereIterable_String
        );
        C.JSArray_methods.insert$2(
          parsed.parts,
          0,
          rootParts.get$last(rootParts)
        );
        if (parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, '');
        return P._Uri__Uri(
          rootParts.get$first(rootParts),
          null,
          parsed.parts,
          'file'
        );
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, '');
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = H.stringReplaceAllUnchecked(t2, '/', '');
        C.JSArray_methods.insert$2(
          t1,
          0,
          H.stringReplaceAllUnchecked(t2, '\\', '')
        );
        return P._Uri__Uri(null, null, parsed.parts, 'file');
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2) return true;
      if (codeUnit1 === 47) return codeUnit2 === 92;
      if (codeUnit1 === 92) return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32) return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, i;
      if (path1 === path2) return true;
      t1 = path1.length;
      if (t1 !== path2.length) return false;
      for (i = 0; i < t1; ++i)
        if (
          !this.codeUnitsEqual$2(
            C.JSString_methods._codeUnitAt$1(path1, i),
            C.JSString_methods._codeUnitAt$1(path2, i)
          )
        )
          return false;
      return true;
    },
    canonicalizeCodeUnit$1(codeUnit) {
      if (codeUnit === 47) return 92;
      if (codeUnit < 65) return codeUnit;
      if (codeUnit > 90) return codeUnit;
      return codeUnit | 32;
    },
    canonicalizePart$1(part) {
      return part.toLowerCase();
    },
    get$name() {
      return 'windows';
    },
    get$separator() {
      return '\\';
    },
  };
  L.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return part !== '';
    },
    $signature: 6,
  };
  F.CssMediaQuery.prototype = {
    merge$1(other) {
      var t8,
        negativeFeatures,
        features,
        type,
        modifier,
        fewerFeatures,
        fewerFeatures0,
        moreFeatures,
        _this = this,
        _null = null,
        _s3_ = 'all',
        t1 = _this.modifier,
        ourModifier = t1 == null ? _null : t1.toLowerCase(),
        t2 = _this.type,
        t3 = t2 == null,
        ourType = t3 ? _null : t2.toLowerCase(),
        t4 = other.modifier,
        theirModifier = t4 == null ? _null : t4.toLowerCase(),
        t5 = other.type,
        t6 = t5 == null,
        theirType = t6 ? _null : t5.toLowerCase(),
        t7 = ourType == null;
      if (t7 && theirType == null) {
        t1 = type$.String;
        t2 = P.List_List$of(_this.features, true, t1);
        C.JSArray_methods.addAll$1(t2, other.features);
        return new F.MediaQuerySuccessfulMergeResult(
          new F.CssMediaQuery(_null, _null, P.List_List$unmodifiable(t2, t1))
        );
      }
      t8 = ourModifier === 'not';
      if (t8 !== (theirModifier === 'not')) {
        if (ourType == theirType) {
          negativeFeatures = t8 ? _this.features : other.features;
          if (
            C.JSArray_methods.every$1(
              negativeFeatures,
              C.JSArray_methods.get$contains(
                t8 ? other.features : _this.features
              )
            )
          )
            return C._SingletonCssMediaQueryMergeResult_empty;
          else return C._SingletonCssMediaQueryMergeResult_unrepresentable;
        } else if (
          t3 ||
          B.equalsIgnoreCase(t2, _s3_) ||
          t6 ||
          B.equalsIgnoreCase(t5, _s3_)
        )
          return C._SingletonCssMediaQueryMergeResult_unrepresentable;
        if (t8) {
          features = other.features;
          type = theirType;
          modifier = theirModifier;
        } else {
          features = _this.features;
          type = ourType;
          modifier = ourModifier;
        }
      } else if (t8) {
        if (ourType != theirType)
          return C._SingletonCssMediaQueryMergeResult_unrepresentable;
        fewerFeatures = _this.features;
        fewerFeatures0 = other.features;
        t3 = fewerFeatures.length > fewerFeatures0.length;
        moreFeatures = t3 ? fewerFeatures : fewerFeatures0;
        if (t3) fewerFeatures = fewerFeatures0;
        if (
          !C.JSArray_methods.every$1(
            fewerFeatures,
            C.JSArray_methods.get$contains(moreFeatures)
          )
        )
          return C._SingletonCssMediaQueryMergeResult_unrepresentable;
        features = moreFeatures;
        type = ourType;
        modifier = ourModifier;
      } else if (t3 || B.equalsIgnoreCase(t2, _s3_)) {
        type = (t6 || B.equalsIgnoreCase(t5, _s3_)) && t7 ? _null : theirType;
        t3 = P.List_List$of(_this.features, true, type$.String);
        C.JSArray_methods.addAll$1(t3, other.features);
        features = t3;
        modifier = theirModifier;
      } else {
        if (t6 || B.equalsIgnoreCase(t5, _s3_)) {
          t3 = P.List_List$of(_this.features, true, type$.String);
          C.JSArray_methods.addAll$1(t3, other.features);
          features = t3;
          modifier = ourModifier;
        } else {
          if (ourType != theirType)
            return C._SingletonCssMediaQueryMergeResult_empty;
          else {
            modifier = ourModifier == null ? theirModifier : ourModifier;
            t3 = P.List_List$of(_this.features, true, type$.String);
            C.JSArray_methods.addAll$1(t3, other.features);
          }
          features = t3;
        }
        type = ourType;
      }
      t2 = type == ourType ? t2 : t5;
      t1 = modifier == ourModifier ? t1 : t4;
      t3 = P.List_List$unmodifiable(features, type$.String);
      return new F.MediaQuerySuccessfulMergeResult(
        new F.CssMediaQuery(t1, t2, t3)
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof F.CssMediaQuery &&
        other.modifier == this.modifier &&
        other.type == this.type &&
        C.C_ListEquality.equals$2(0, other.features, this.features)
      );
    },
    get$hashCode(_) {
      return (
        J.get$hashCode$(this.modifier) ^
        J.get$hashCode$(this.type) ^
        C.C_ListEquality0.hash$1(this.features)
      );
    },
    toString$0(_) {
      var t2,
        _this = this,
        t1 = _this.modifier;
      t1 = t1 != null ? '' + (t1 + ' ') : '';
      t2 = _this.type;
      if (t2 != null) {
        t1 += t2;
        if (_this.features.length !== 0) t1 += ' and ';
      }
      t1 += C.JSArray_methods.join$1(_this.features, ' and ');
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  F._SingletonCssMediaQueryMergeResult.prototype = {
    toString$0(_) {
      return this._media_query$_name;
    },
  };
  F.MediaQuerySuccessfulMergeResult.prototype = {};
  U.ModifiableCssAtRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssAtRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      var _this = this;
      return U.ModifiableCssAtRule$(
        _this.name,
        _this.span,
        _this.isChildless,
        _this.value
      );
    },
    addChild$1(child) {
      this.super$ModifiableCssParentNode$addChild(child);
    },
    $isCssAtRule: 1,
    get$isChildless() {
      return this.isChildless;
    },
    get$span() {
      return this.span;
    },
  };
  R.ModifiableCssComment.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $isCssComment: 1,
    get$span() {
      return this.span;
    },
  };
  L.ModifiableCssDeclaration.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name.toString$0(0) + ': ' + this.value.toString$0(0) + ';';
    },
    get$span() {
      return this.span;
    },
  };
  F.ModifiableCssImport.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssImport$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $isCssImport: 1,
    get$span() {
      return this.span;
    },
  };
  U.ModifiableCssKeyframeBlock.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssKeyframeBlock$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return U.ModifiableCssKeyframeBlock$(this.selector, this.span);
    },
    get$span() {
      return this.span;
    },
  };
  G.ModifiableCssMediaRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssMediaRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return G.ModifiableCssMediaRule$(this.queries, this.span);
    },
    $isCssMediaRule: 1,
    get$span() {
      return this.span;
    },
  };
  B.ModifiableCssNode.prototype = {
    get$hasFollowingSibling() {
      var siblings,
        t1,
        i,
        t2,
        $parent = this._parent;
      if ($parent == null) return false;
      siblings = $parent.children;
      t1 = this._indexInParent;
      t1.toString;
      i = t1 + 1;
      t1 = siblings._collection$_source;
      t2 = J.getInterceptor$asx(t1);
      for (; i < t2.get$length(t1); ++i)
        if (!this._node0$_isInvisible$1(t2.elementAt$1(t1, i))) return true;
      return false;
    },
    _node0$_isInvisible$1(node) {
      if (type$.CssParentNode._is(node)) {
        if (type$.CssAtRule._is(node)) return false;
        if (
          type$.CssStyleRule._is(node) &&
          node.selector.value.get$isInvisible()
        )
          return true;
        return J.every$1$ax(
          node.get$children(node),
          this.get$_node0$_isInvisible()
        );
      } else return false;
    },
    get$isGroupEnd() {
      return this.isGroupEnd;
    },
  };
  B.ModifiableCssParentNode.prototype = {
    get$isChildless() {
      return false;
    },
    addChild$1(child) {
      var t1;
      child._parent = this;
      t1 = this._children;
      child._indexInParent = t1.length;
      t1.push(child);
    },
    $isCssParentNode: 1,
    get$children(receiver) {
      return this.children;
    },
  };
  X.ModifiableCssStyleRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssStyleRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return X.ModifiableCssStyleRule$(
        this.selector,
        this.span,
        this.originalSelector
      );
    },
    $isCssStyleRule: 1,
    get$span() {
      return this.span;
    },
  };
  V.ModifiableCssStylesheet.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return V.ModifiableCssStylesheet$(this.span);
    },
    $isCssStylesheet: 1,
    get$span() {
      return this.span;
    },
  };
  B.ModifiableCssSupportsRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssSupportsRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return B.ModifiableCssSupportsRule$(this.condition, this.span);
    },
    $isCssSupportsRule: 1,
    get$span() {
      return this.span;
    },
  };
  F.ModifiableCssValue.prototype = {
    toString$0(_) {
      return N.serializeSelector(this.value, true);
    },
    $isCssValue: 1,
    $isAstNode: 1,
    get$value(receiver) {
      return this.value;
    },
    get$span() {
      return this.span;
    },
  };
  B.CssNode.prototype = {
    toString$0(_) {
      return N.serialize(this, true, null, true, null, false, null, true).css;
    },
  };
  B.CssParentNode.prototype = {};
  V.CssStylesheet.prototype = {
    get$isGroupEnd() {
      return false;
    },
    get$isChildless() {
      return false;
    },
    accept$1$1(visitor) {
      return visitor.visitCssStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    get$children(receiver) {
      return this.children;
    },
    get$span() {
      return this.span;
    },
  };
  F.CssValue.prototype = {
    toString$0(_) {
      return J.toString$0$(this.value);
    },
    $isAstNode: 1,
    get$value(receiver) {
      return this.value;
    },
    get$span() {
      return this.span;
    },
  };
  B.AstNode.prototype = {};
  B._FakeAstNode.prototype = {
    get$span() {
      return this._callback.call$0();
    },
    $isAstNode: 1,
  };
  Z.Argument.prototype = {
    toString$0(_) {
      var t1 = this.defaultValue,
        t2 = this.name;
      return t1 == null ? t2 : t2 + ': ' + t1.toString$0(0);
    },
    $isAstNode: 1,
    get$span() {
      return this.span;
    },
  };
  B.ArgumentDeclaration.prototype = {
    get$spanWithName() {
      var t3,
        t4,
        t1 = this.span,
        t2 = t1.file,
        text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(t2._decodedChars, 0, null),
          0,
          null
        ),
        i = Y.FileLocation$_(t2, t1._file$_start).offset - 1;
      while (true) {
        if (i > 0) {
          t3 = C.JSString_methods.codeUnitAt$1(text, i);
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else t3 = false;
        if (!t3) break;
        --i;
      }
      t3 = C.JSString_methods.codeUnitAt$1(text, i);
      if (
        !(
          t3 === 95 ||
          T.isAlphabetic0(t3) ||
          t3 >= 128 ||
          T.isDigit(t3) ||
          t3 === 45
        )
      )
        return t1;
      --i;
      while (true) {
        if (i >= 0) {
          t3 = C.JSString_methods.codeUnitAt$1(text, i);
          if (t3 !== 95) {
            if (!(t3 >= 97 && t3 <= 122)) t4 = t3 >= 65 && t3 <= 90;
            else t4 = true;
            t4 = t4 || t3 >= 128;
          } else t4 = true;
          if (!t4) {
            t4 = t3 >= 48 && t3 <= 57;
            t3 = t4 || t3 === 45;
          } else t3 = true;
        } else t3 = false;
        if (!t3) break;
        --i;
      }
      t3 = i + 1;
      t4 = C.JSString_methods.codeUnitAt$1(text, t3);
      if (!(t4 === 95 || T.isAlphabetic0(t4) || t4 >= 128)) return t1;
      return V.SpanExtensions_trimRight(
        V.SpanExtensions_trimLeft(
          t2.span$2(t3, Y.FileLocation$_(t2, t1._end).offset)
        )
      );
    },
    verify$2(positional, names) {
      var t1,
        t2,
        t3,
        namedUsed,
        i,
        argument,
        t4,
        unknownNames,
        _this = this,
        _s10_ = 'invocation',
        _s8_ = 'argument';
      for (
        t1 = _this.$arguments,
          t2 = t1.length,
          t3 = names._baseMap,
          namedUsed = 0,
          i = 0;
        i < t2;
        ++i
      ) {
        argument = t1[i];
        if (i < positional) {
          t4 = argument.name;
          if (t3.containsKey$1(t4))
            throw H.wrapException(
              E.SassScriptException$(
                'Argument ' +
                  _this._originalArgumentName$1(t4) +
                  string$.x20was_p
              )
            );
        } else {
          t4 = argument.name;
          if (t3.containsKey$1(t4)) ++namedUsed;
          else if (argument.defaultValue == null)
            throw H.wrapException(
              E.MultiSpanSassScriptException$(
                'Missing argument ' + _this._originalArgumentName$1(t4) + '.',
                _s10_,
                P.LinkedHashMap_LinkedHashMap$_literal(
                  [_this.get$spanWithName(), 'declaration'],
                  type$.FileSpan,
                  type$.String
                )
              )
            );
        }
      }
      if (_this.restArgument != null) return;
      if (positional > t2) {
        t1 = 'Only ' + t2 + ' ';
        throw H.wrapException(
          E.MultiSpanSassScriptException$(
            t1 +
              (names.get$isEmpty(names) ? '' : 'positional ') +
              B.pluralize(_s8_, t2, null) +
              ' allowed, but ' +
              positional +
              ' ' +
              B.pluralize('was', positional, 'were') +
              ' passed.',
            _s10_,
            P.LinkedHashMap_LinkedHashMap$_literal(
              [_this.get$spanWithName(), 'declaration'],
              type$.FileSpan,
              type$.String
            )
          )
        );
      }
      if (namedUsed < t3.get$length(t3)) {
        t2 = type$.String;
        unknownNames = P.LinkedHashSet_LinkedHashSet$of(names, t2);
        unknownNames.removeAll$1(
          new H.MappedListIterable(
            t1,
            new B.ArgumentDeclaration_verify_closure(),
            H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Object?>')
          )
        );
        throw H.wrapException(
          E.MultiSpanSassScriptException$(
            'No ' +
              B.pluralize(_s8_, unknownNames._collection$_length, null) +
              ' named ' +
              H.S(
                B.toSentence(
                  unknownNames.map$1$1(
                    0,
                    new B.ArgumentDeclaration_verify_closure0(),
                    type$.Object
                  ),
                  'or'
                )
              ) +
              '.',
            _s10_,
            P.LinkedHashMap_LinkedHashMap$_literal(
              [_this.get$spanWithName(), 'declaration'],
              type$.FileSpan,
              t2
            )
          )
        );
      }
    },
    _originalArgumentName$1($name) {
      var t1,
        text,
        t2,
        _i,
        argument,
        t3,
        t4,
        end,
        _null = null;
      if ($name === this.restArgument) {
        t1 = this.span;
        text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(
            t1.file._decodedChars,
            t1._file$_start,
            t1._end
          ),
          0,
          _null
        );
        return C.JSString_methods.substring$2(
          C.JSString_methods.substring$1(
            text,
            C.JSString_methods.lastIndexOf$1(text, '$')
          ),
          0,
          C.JSString_methods.indexOf$1(text, '.')
        );
      }
      for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        argument = t1[_i];
        if (argument.name === $name) {
          t1 = argument.defaultValue;
          t2 = argument.span;
          t3 = t2.file;
          t4 = t2._file$_start;
          t2 = t2._end;
          if (t1 == null) {
            t1 = t3._decodedChars;
            t1 = P.String_String$fromCharCodes(
              new Uint32Array(
                t1.subarray(t4, H._checkValidRange(t4, t2, t1.length))
              ),
              0,
              _null
            );
          } else {
            t1 = t3._decodedChars;
            text = P.String_String$fromCharCodes(
              new Uint32Array(
                t1.subarray(t4, H._checkValidRange(t4, t2, t1.length))
              ),
              0,
              _null
            );
            t1 = C.JSString_methods.substring$2(
              text,
              0,
              C.JSString_methods.indexOf$1(text, ':')
            );
            end = B._lastNonWhitespace(t1, false);
            t1 =
              end == null ? '' : C.JSString_methods.substring$2(t1, 0, end + 1);
          }
          return t1;
        }
      }
      throw H.wrapException(
        P.ArgumentError$(string$.This_d + $name + '".', _null)
      );
    },
    matches$2(positional, names) {
      var t1, t2, t3, namedUsed, i, argument;
      for (
        t1 = this.$arguments,
          t2 = t1.length,
          t3 = names._baseMap,
          namedUsed = 0,
          i = 0;
        i < t2;
        ++i
      ) {
        argument = t1[i];
        if (i < positional) {
          if (t3.containsKey$1(argument.name)) return false;
        } else if (t3.containsKey$1(argument.name)) ++namedUsed;
        else if (argument.defaultValue == null) return false;
      }
      if (this.restArgument != null) return true;
      if (positional > t2) return false;
      if (namedUsed < t3.get$length(t3)) return false;
      return true;
    },
    toString$0(_) {
      var t2,
        t3,
        _i,
        arg,
        t4,
        t5,
        t1 = H._setArrayType([], type$.JSArray_String);
      for (t2 = this.$arguments, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        arg = t2[_i];
        t4 = arg.defaultValue;
        t5 = arg.name;
        t1.push(t4 == null ? t5 : t5 + ': ' + t4.toString$0(0));
      }
      t2 = this.restArgument;
      if (t2 != null) t1.push(t2 + '...');
      return C.JSArray_methods.join$1(t1, ', ');
    },
    $isAstNode: 1,
    get$span() {
      return this.span;
    },
  };
  B.ArgumentDeclaration_verify_closure.prototype = {
    call$1(argument) {
      return argument.name;
    },
    $signature: 404,
  };
  B.ArgumentDeclaration_verify_closure0.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  X.ArgumentInvocation.prototype = {
    get$isEmpty(_) {
      var t1;
      if (this.positional.length === 0) {
        t1 = this.named;
        t1 = t1.get$isEmpty(t1) && this.rest == null;
      } else t1 = false;
      return t1;
    },
    toString$0(_) {
      var t2,
        t3,
        t4,
        _this = this,
        t1 = P.List_List$of(_this.positional, true, type$.Object);
      for (
        t2 = _this.named, t3 = J.get$iterator$ax(t2.get$keys(t2));
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t1.push(t4 + ': ' + H.S(t2.$index(0, t4)));
      }
      t2 = _this.rest;
      if (t2 != null) t1.push(t2.toString$0(0) + '...');
      t2 = _this.keywordRest;
      if (t2 != null) t1.push(t2.toString$0(0) + '...');
      return '(' + C.JSArray_methods.join$1(t1, ', ') + ')';
    },
    $isAstNode: 1,
    get$span() {
      return this.span;
    },
  };
  V.AtRootQuery.prototype = {
    excludes$1(node) {
      var t1,
        _this = this;
      if (_this._all) return !_this.include;
      if (type$.CssStyleRule._is(node))
        return _this._at_root_query$_rule !== _this.include;
      if (type$.CssMediaRule._is(node)) return _this.excludesName$1('media');
      if (type$.CssSupportsRule._is(node))
        return _this.excludesName$1('supports');
      if (type$.CssAtRule._is(node)) {
        t1 = node.name;
        return _this.excludesName$1(t1.get$value(t1).toLowerCase());
      }
      return false;
    },
    excludesName$1($name) {
      var t1 = this._all || this.names.contains$1(0, $name);
      return t1 !== this.include;
    },
  };
  Z.ConfiguredVariable.prototype = {
    toString$0(_) {
      var t1 = '$' + this.name + ': ' + this.expression.toString$0(0);
      return t1 + (this.isGuarded ? ' !default' : '');
    },
    $isAstNode: 1,
    get$span() {
      return this.span;
    },
  };
  V.BinaryOperationExpression.prototype = {
    get$span() {
      var right,
        left = this.left;
      for (; left instanceof V.BinaryOperationExpression; ) left = left.left;
      right = this.right;
      for (; right instanceof V.BinaryOperationExpression; )
        right = right.right;
      return left.get$span().expand$1(0, right.get$span());
    },
    accept$1$1(visitor) {
      return visitor.visitBinaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        right,
        rightNeedsParens,
        _this = this,
        left = _this.left,
        leftNeedsParens =
          left instanceof V.BinaryOperationExpression &&
          left.operator.precedence < _this.operator.precedence,
        t1 = leftNeedsParens ? '' + H.Primitives_stringFromCharCode(40) : '';
      t1 += left.toString$0(0);
      if (leftNeedsParens) t1 += H.Primitives_stringFromCharCode(41);
      t2 = _this.operator;
      t1 =
        t1 +
        H.Primitives_stringFromCharCode(32) +
        t2.operator +
        H.Primitives_stringFromCharCode(32);
      right = _this.right;
      rightNeedsParens =
        right instanceof V.BinaryOperationExpression &&
        right.operator.precedence <= t2.precedence;
      if (rightNeedsParens) t1 += H.Primitives_stringFromCharCode(40);
      t1 += right.toString$0(0);
      if (rightNeedsParens) t1 += H.Primitives_stringFromCharCode(41);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isExpression: 1,
  };
  V.BinaryOperator.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  Z.BooleanExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitBooleanExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return String(this.value);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  K.ColorExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitColorExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return N.serializeValue0(this.value, true, true);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  F.FunctionExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitFunctionExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? '' + (t1 + '.') : '';
      t1 += this.originalName + this.$arguments.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  L.IfExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIfExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return 'if' + this.$arguments.toString$0(0);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  N.InterpolatedFunctionExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitInterpolatedFunctionExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name.toString$0(0) + this.$arguments.toString$0(0);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  D.ListExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitListExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.hasBrackets,
        t2 = t1 ? '' + H.Primitives_stringFromCharCode(91) : '',
        t3 = _this.contents,
        t4 = _this.separator === C.ListSeparator_kWM ? ', ' : ' ';
      t4 =
        t2 +
        new H.MappedListIterable(
          t3,
          new D.ListExpression_toString_closure(_this),
          H._arrayInstanceType(t3)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, t4);
      t1 = t1 ? t4 + H.Primitives_stringFromCharCode(93) : t4;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _list0$_elementNeedsParens$1(expression) {
      var t1, t2;
      if (expression instanceof D.ListExpression) {
        if (expression.contents.length < 2) return false;
        if (expression.hasBrackets) return false;
        t1 = this.separator;
        t2 = t1 === C.ListSeparator_kWM;
        return t2 ? t2 : t1 !== C.ListSeparator_undecided_null;
      }
      if (this.separator !== C.ListSeparator_woc) return false;
      if (expression instanceof X.UnaryOperationExpression) {
        t1 = expression.operator;
        return t1 === C.UnaryOperator_j2w || t1 === C.UnaryOperator_U4G;
      }
      return false;
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  D.ListExpression_toString_closure.prototype = {
    call$1(element) {
      return this.$this._list0$_elementNeedsParens$1(element)
        ? '(' + element.toString$0(0) + ')'
        : element.toString$0(0);
    },
    $signature: 82,
  };
  A.MapExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMapExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.pairs;
      return (
        '(' +
        new H.MappedListIterable(
          t1,
          new A.MapExpression_toString_closure(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ', ') +
        ')'
      );
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  A.MapExpression_toString_closure.prototype = {
    call$1(pair) {
      return H.S(pair.item1) + ': ' + H.S(pair.item2);
    },
    $signature: 399,
  };
  O.NullExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitNullExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return 'null';
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  T.NumberExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitNumberExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = H.S(this.value),
        t2 = this.unit;
      return t1 + (t2 == null ? '' : t2);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  T.ParenthesizedExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitParenthesizedExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.expression.toString$0(0);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  T.SelectorExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSelectorExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '&';
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  D.StringExpression.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      return visitor.visitStringExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    asInterpolation$1$static($static) {
      var t1, t2, quote, t3, t4, buffer, t5, t6, _i, value;
      if (!this.hasQuotes) return this.text;
      t1 = this.text;
      t2 = t1.contents;
      quote = D.StringExpression__bestQuote(
        new H.WhereTypeIterable(t2, type$.WhereTypeIterable_String)
      );
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t3._contents = '' + H.Primitives_stringFromCharCode(quote);
      for (t5 = t2.length, t6 = type$.Expression, _i = 0; _i < t5; ++_i) {
        value = t2[_i];
        if (t6._is(value)) {
          buffer._flushText$0();
          t4.push(value);
        } else if (typeof value == 'string')
          D.StringExpression__quoteInnerText(value, quote, buffer, $static);
      }
      t3._contents += H.Primitives_stringFromCharCode(quote);
      return buffer.interpolation$1(t1.span);
    },
    asInterpolation$0() {
      return this.asInterpolation$1$static(false);
    },
    toString$0(_) {
      return this.asInterpolation$0().toString$0(0);
    },
    $isAstNode: 1,
    $isExpression: 1,
  };
  X.UnaryOperationExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitUnaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.operator,
        t2 = t1.operator;
      t1 =
        t1 === C.UnaryOperator_not_not
          ? t2 + H.Primitives_stringFromCharCode(32)
          : t2;
      t1 += this.operand.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  X.UnaryOperator.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  F.ValueExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitValueExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return N.serializeValue0(this.value, true, true);
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  S.VariableExpression.prototype = {
    accept$1$1(visitor) {
      return visitor.visitVariableExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? '$' + t2 : t1 + '.$' + t2;
    },
    $isAstNode: 1,
    $isExpression: 1,
    get$span() {
      return this.span;
    },
  };
  B.DynamicImport.prototype = {
    toString$0(_) {
      return D.StringExpression_quoteText(this.urlString);
    },
    $isAstNode: 1,
    $isImport: 1,
    get$span() {
      return this.span;
    },
  };
  Q.StaticImport.prototype = {
    toString$0(_) {
      var t1 = this.url.toString$0(0),
        t2 = this.supports;
      if (t2 != null) t1 += ' supports(' + t2.toString$0(0) + ')';
      t2 = this.media;
      if (t2 != null) t1 += ' ' + t2.toString$0(0);
      t1 += H.Primitives_stringFromCharCode(59);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isImport: 1,
    get$span() {
      return this.span;
    },
  };
  X.Interpolation.prototype = {
    get$asPlain() {
      var first,
        t1 = this.contents,
        t2 = t1.length;
      if (t2 === 0) return '';
      if (t2 > 1) return null;
      first = C.JSArray_methods.get$first(t1);
      return typeof first == 'string' ? first : null;
    },
    get$initialPlain() {
      var first = C.JSArray_methods.get$first(this.contents);
      return typeof first == 'string' ? first : '';
    },
    Interpolation$2(contents, span) {
      var t1,
        t2,
        t3,
        i,
        t4,
        t5,
        _s8_ = 'contents';
      for (
        t1 = this.contents, t2 = t1.length, t3 = type$.Expression, i = 0;
        i < t2;
        ++i
      ) {
        t4 = t1[i];
        t5 = typeof t4 == 'string';
        if (!t5 && !t3._is(t4))
          throw H.wrapException(
            P.ArgumentError$value(t1, _s8_, string$.May_on)
          );
        if (i !== 0 && typeof t1[i - 1] == 'string' && t5)
          throw H.wrapException(
            P.ArgumentError$value(t1, _s8_, 'May not contain adjacent Strings.')
          );
      }
    },
    toString$0(_) {
      var t1 = this.contents;
      return new H.MappedListIterable(
        t1,
        new X.Interpolation_toString_closure(),
        H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
      ).join$0(0);
    },
    $isAstNode: 1,
    get$span() {
      return this.span;
    },
  };
  X.Interpolation_toString_closure.prototype = {
    call$1(value) {
      return typeof value == 'string' ? value : '#{' + H.S(value) + '}';
    },
    $signature: 51,
  };
  V.AtRootRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRootRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var buffer = new P.StringBuffer('@at-root '),
        t1 = this.query;
      if (t1 != null) buffer._contents = '@at-root ' + (t1.toString$0(0) + ' ');
      t1 = this.children;
      return (
        buffer.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  U.AtRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var children,
        t1 = '@' + this.name.toString$0(0),
        buffer = new P.StringBuffer(t1),
        t2 = this.value;
      if (t2 != null) buffer._contents = t1 + (' ' + t2.toString$0(0));
      children = this.children;
      return children == null
        ? buffer.toString$0(0) + ';'
        : buffer.toString$0(0) +
            ' {' +
            C.JSArray_methods.join$1(children, ' ') +
            '}';
    },
    get$span() {
      return this.span;
    },
  };
  M.CallableDeclaration.prototype = {
    get$span() {
      return this.span;
    },
  };
  Y.ContentBlock.prototype = {
    accept$1$1(visitor) {
      return visitor.visitContentBlock$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        t1 = this.$arguments;
      t1 =
        t1.$arguments.length === 0 && t1.restArgument == null
          ? ''
          : ' using (' + t1.toString$0(0) + ')';
      t2 = this.children;
      return t1 + (' {' + (t2 && C.JSArray_methods).join$1(t2, ' ') + '}');
    },
  };
  Q.ContentRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitContentRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.$arguments;
      return t1.get$isEmpty(t1)
        ? '@content;'
        : '@content(' + t1.toString$0(0) + ');';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  Q.DebugRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDebugRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@debug ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  L.Declaration.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    get$span() {
      return this.span;
    },
  };
  V.EachRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitEachRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.variables,
        t2 = this.children;
      return (
        '@each ' +
        new H.MappedListIterable(
          t1,
          new V.EachRule_toString_closure(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ', ') +
        ' in ' +
        this.list.toString$0(0) +
        ' {' +
        (t2 && C.JSArray_methods).join$1(t2, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  V.EachRule_toString_closure.prototype = {
    call$1(variable) {
      return '$' + variable;
    },
    $signature: 5,
  };
  D.ErrorRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitErrorRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@error ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  X.ExtendRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitExtendRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@extend ' + this.selector.toString$0(0);
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  B.ForRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 =
          '@for $' + _this.variable + ' from ' + _this.from.toString$0(0) + ' ',
        t2 = _this.children;
      return (
        t1 +
        (_this.isExclusive ? 'to' : 'through') +
        ' ' +
        _this.to.toString$0(0) +
        ' {' +
        (t2 && C.JSArray_methods).join$1(t2, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  L.ForwardRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForwardRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        prefix,
        _this = this,
        t1 =
          '@forward ' + D.StringExpression_quoteText(_this.url.toString$0(0)),
        shownMixinsAndFunctions = _this.shownMixinsAndFunctions,
        hiddenMixinsAndFunctions = _this.hiddenMixinsAndFunctions;
      if (shownMixinsAndFunctions != null) {
        t1 += ' show ';
        t2 = _this.shownVariables;
        t2.toString;
        t2 =
          t1 + _this._forward_rule$_memberList$2(shownMixinsAndFunctions, t2);
        t1 = t2;
      } else {
        if (hiddenMixinsAndFunctions != null) {
          t2 = hiddenMixinsAndFunctions._base;
          t2 = t2.get$isNotEmpty(t2);
        } else t2 = false;
        if (t2) {
          t1 += ' hide ';
          t2 = _this.hiddenVariables;
          t2.toString;
          t2 =
            t1 +
            _this._forward_rule$_memberList$2(hiddenMixinsAndFunctions, t2);
          t1 = t2;
        }
      }
      prefix = _this.prefix;
      if (prefix != null) t1 += ' as ' + prefix + '*';
      t2 = _this.configuration;
      t1 =
        (t2.length !== 0
          ? t1 + (' with (' + C.JSArray_methods.join$1(t2, ', ') + ')')
          : t1) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _forward_rule$_memberList$2(mixinsAndFunctions, variables) {
      var t2,
        t1 = P.List_List$of(mixinsAndFunctions, true, type$.String);
      for (t2 = variables._base, t2 = t2.get$iterator(t2); t2.moveNext$0(); )
        t1.push('$' + t2.get$current());
      return C.JSArray_methods.join$1(t1, ', ');
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  M.FunctionRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitFunctionRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@function ' +
        this.name +
        '(' +
        this.$arguments.toString$0(0) +
        ') {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
  };
  V.IfRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIfRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.clauses,
        result = new H.MappedListIterable(
          t1,
          new V.IfRule_toString_closure(true),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ' '),
        lastClause = this.lastClause;
      return lastClause != null
        ? result + (' ' + lastClause.toString$0(0))
        : result;
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  V.IfRule_toString_closure.prototype = {
    call$1(clause) {
      return '@if {' + C.JSArray_methods.join$1(clause.children, ' ') + '}';
    },
    $signature: 398,
  };
  V.IfRuleClause.prototype = {};
  V.IfRuleClause$__closure.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof Z.VariableDeclaration))
        if (!(child instanceof M.FunctionRule))
          if (!(child instanceof T.MixinRule))
            t1 =
              child instanceof B.ImportRule &&
              C.JSArray_methods.any$1(
                child.imports,
                new V.IfRuleClause$___closure()
              );
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    $signature: 134,
  };
  V.IfRuleClause$___closure.prototype = {
    call$1($import) {
      return $import instanceof B.DynamicImport;
    },
    $signature: 135,
  };
  V.IfClause.prototype = {
    toString$0(_) {
      return (
        '@if ' +
        this.expression.toString$0(0) +
        ' {' +
        C.JSArray_methods.join$1(this.children, ' ') +
        '}'
      );
    },
  };
  V.ElseClause.prototype = {
    toString$0(_) {
      return '@else {' + C.JSArray_methods.join$1(this.children, ' ') + '}';
    },
  };
  B.ImportRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitImportRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@import ' + C.JSArray_methods.join$1(this.imports, ', ') + ';';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  A.IncludeRule.prototype = {
    get$spanWithoutContent() {
      var t2,
        t3,
        t1 = this.span;
      if (!(this.content == null)) {
        t2 = t1.file;
        t3 = this.$arguments.span;
        t3 = V.SpanExtensions_trimRight(
          V.SpanExtensions_trimLeft(
            t2.span$2(
              Y.FileLocation$_(t2, t1._file$_start).offset,
              Y.FileLocation$_(t3.file, t3._end).offset
            )
          )
        );
        t1 = t3;
      }
      return t1;
    },
    accept$1$1(visitor) {
      return visitor.visitIncludeRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        _this = this,
        t1 = _this.namespace;
      t1 = t1 != null ? '@include ' + (t1 + '.') : '@include ';
      t1 += _this.name;
      t2 = _this.$arguments;
      if (!t2.get$isEmpty(t2)) t1 += '(' + t2.toString$0(0) + ')';
      t2 = _this.content;
      t1 += t2 == null ? ';' : ' ' + t2.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  L.LoudComment.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      return visitor.visitLoudComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text.toString$0(0);
    },
    $isAstNode: 1,
    $isStatement: 1,
  };
  G.MediaRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMediaRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@media ' +
        this.query.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  T.MixinRule.prototype = {
    get$hasContent() {
      var _this = this,
        t1 = _this.__MixinRule_hasContent;
      if (t1 == null) {
        t1 = J.$eq$(
          C.C__HasContentVisitor.visitChildren$1(_this.children),
          true
        );
        if (_this.__MixinRule_hasContent == null)
          _this.__MixinRule_hasContent = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('hasContent'));
      }
      return t1;
    },
    accept$1$1(visitor) {
      return visitor.visitMixinRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = '@mixin ' + this.name,
        t2 = this.$arguments;
      if (!(t2.$arguments.length === 0 && t2.restArgument == null))
        t1 += '(' + t2.toString$0(0) + ')';
      t2 = this.children;
      t2 = t1 + (' {' + (t2 && C.JSArray_methods).join$1(t2, ' ') + '}');
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
  };
  T._HasContentVisitor.prototype = {
    visitContentRule$1(_) {
      return true;
    },
  };
  M.ParentStatement.prototype = { $isAstNode: 1, $isStatement: 1 };
  M.ParentStatement_closure.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof Z.VariableDeclaration))
        if (!(child instanceof M.FunctionRule))
          if (!(child instanceof T.MixinRule))
            t1 =
              child instanceof B.ImportRule &&
              C.JSArray_methods.any$1(
                child.imports,
                new M.ParentStatement__closure()
              );
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    $signature: 134,
  };
  M.ParentStatement__closure.prototype = {
    call$1($import) {
      return $import instanceof B.DynamicImport;
    },
    $signature: 135,
  };
  B.ReturnRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitReturnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@return ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  B.SilentComment.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSilentComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text;
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  X.StyleRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitStyleRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        this.selector.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  V.Stylesheet.prototype = {
    Stylesheet$internal$3$plainCss(children, span, plainCss) {
      var t1, t2, t3, t4, _i, child;
      for (
        t1 = this.children,
          t2 = t1.length,
          t3 = this._forwards,
          t4 = this._uses,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        child = t1[_i];
        if (child instanceof T.UseRule) t4.push(child);
        else if (child instanceof L.ForwardRule) t3.push(child);
        else if (
          !(child instanceof B.SilentComment) &&
          !(child instanceof L.LoudComment) &&
          !(child instanceof Z.VariableDeclaration)
        )
          break;
      }
    },
    accept$1$1(visitor) {
      return visitor.visitStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (t1 && C.JSArray_methods).join$1(t1, ' ');
    },
    get$span() {
      return this.span;
    },
  };
  B.SupportsRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSupportsRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@supports ' +
        this.condition.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  T.UseRule.prototype = {
    UseRule$4$configuration(url, namespace, span, configuration) {
      var t1, t2, _i, variable;
      for (t1 = this.configuration, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        variable = t1[_i];
        if (variable.isGuarded)
          throw H.wrapException(
            P.ArgumentError$value(
              variable,
              'configured variable',
              "can't be guarded in a @use rule."
            )
          );
      }
    },
    accept$1$1(visitor) {
      return visitor.visitUseRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.url,
        t2 = '@use ' + D.StringExpression_quoteText(t1.toString$0(0)),
        basename =
          t1.get$pathSegments().length === 0
            ? ''
            : C.JSArray_methods.get$last(t1.get$pathSegments()),
        dot = C.JSString_methods.indexOf$1(basename, '.');
      t1 = this.namespace;
      if (
        t1 !==
        C.JSString_methods.substring$2(
          basename,
          0,
          dot === -1 ? basename.length : dot
        )
      )
        t1 = t2 + (' as ' + (t1 == null ? '*' : t1));
      else t1 = t2;
      t2 = this.configuration;
      t1 =
        (t2.length !== 0
          ? t1 + (' with (' + C.JSArray_methods.join$1(t2, ', ') + ')')
          : t1) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  Z.VariableDeclaration.prototype = {
    accept$1$1(visitor) {
      return visitor.visitVariableDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? '$' + (t1 + '.') : '$';
      t1 += this.name + ': ' + this.expression.toString$0(0) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  Y.WarnRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWarnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@warn ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode: 1,
    $isStatement: 1,
    get$span() {
      return this.span;
    },
  };
  G.WhileRule.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWhileRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@while ' +
        this.condition.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  Y.SupportsAnything.prototype = {
    toString$0(_) {
      return '(' + this.contents.toString$0(0) + ')';
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  L.SupportsDeclaration.prototype = {
    toString$0(_) {
      return (
        '(' + this.name.toString$0(0) + ': ' + this.value.toString$0(0) + ')'
      );
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  F.SupportsFunction.prototype = {
    toString$0(_) {
      return (
        this.name.toString$0(0) + '(' + this.$arguments.toString$0(0) + ')'
      );
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  X.SupportsInterpolation.prototype = {
    toString$0(_) {
      return '#{' + this.expression.toString$0(0) + '}';
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  M.SupportsNegation.prototype = {
    toString$0(_) {
      var t1 = this.condition;
      if (t1 instanceof M.SupportsNegation || t1 instanceof U.SupportsOperation)
        return 'not (' + t1.toString$0(0) + ')';
      else return 'not ' + t1.toString$0(0);
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  U.SupportsOperation.prototype = {
    toString$0(_) {
      var _this = this;
      return (
        _this._operation$_parenthesize$1(_this.left) +
        ' ' +
        _this.operator +
        ' ' +
        _this._operation$_parenthesize$1(_this.right)
      );
    },
    _operation$_parenthesize$1(condition) {
      var t1;
      if (!(condition instanceof M.SupportsNegation))
        t1 =
          condition instanceof U.SupportsOperation &&
          condition.operator === this.operator;
      else t1 = true;
      return t1 ? '(' + condition.toString$0(0) + ')' : condition.toString$0(0);
    },
    $isAstNode: 1,
    $isSupportsCondition: 1,
    get$span() {
      return this.span;
    },
  };
  T.Selector.prototype = {
    get$isInvisible() {
      return false;
    },
    toString$0(_) {
      var visitor = N._SerializeVisitor$0(
        null,
        true,
        null,
        true,
        false,
        null,
        true
      );
      this.accept$1(visitor);
      return visitor._serialize$_buffer.toString$0(0);
    },
  };
  N.AttributeSelector.prototype = {
    accept$1$1(visitor) {
      var value,
        t2,
        _this = this,
        t1 = visitor._serialize$_buffer;
      t1.writeCharCode$1(91);
      t1.write$1(0, _this.name);
      value = _this.value;
      if (value != null) {
        t1.write$1(0, _this.op);
        if (
          G.Parser_isIdentifier(value) &&
          !C.JSString_methods.startsWith$1(value, '--')
        ) {
          t1.write$1(0, value);
          t2 = _this.modifier;
          if (t2 != null) t1.writeCharCode$1(32);
        } else {
          visitor._visitQuotedString$1(value);
          t2 = _this.modifier;
          if (t2 != null)
            if (visitor._style !== C.OutputStyle_compressed)
              t1.writeCharCode$1(32);
        }
        if (t2 != null) t1.write$1(0, t2);
      }
      t1.writeCharCode$1(93);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof N.AttributeSelector &&
        other.name.$eq(0, _this.name) &&
        other.op == _this.op &&
        other.value == _this.value &&
        other.modifier == _this.modifier
      );
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.name;
      return (
        (C.JSString_methods.get$hashCode(t1.name) ^
          J.get$hashCode$(t1.namespace) ^
          J.get$hashCode$(_this.op) ^
          J.get$hashCode$(_this.value) ^
          J.get$hashCode$(_this.modifier)) >>>
        0
      );
    },
  };
  N.AttributeOperator.prototype = {
    toString$0(_) {
      return this._attribute$_text;
    },
  };
  X.ClassSelector.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof X.ClassSelector && other.name === this.name;
    },
    accept$1$1(visitor) {
      var t1 = visitor._serialize$_buffer;
      t1.writeCharCode$1(46);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new X.ClassSelector(this.name + suffix);
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  S.ComplexSelector.prototype = {
    get$minSpecificity() {
      if (this._minSpecificity == null) this._computeSpecificity$0();
      var t1 = this._minSpecificity;
      t1.toString;
      return t1;
    },
    get$maxSpecificity() {
      if (this._complex$_maxSpecificity == null) this._computeSpecificity$0();
      var t1 = this._complex$_maxSpecificity;
      t1.toString;
      return t1;
    },
    get$isInvisible() {
      var _this = this,
        t1 = _this.__ComplexSelector_isInvisible;
      if (t1 == null) {
        t1 = C.JSArray_methods.any$1(
          _this.components,
          new S.ComplexSelector_isInvisible_closure()
        );
        if (_this.__ComplexSelector_isInvisible == null)
          _this.__ComplexSelector_isInvisible = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('isInvisible'));
      }
      return t1;
    },
    accept$1$1(visitor) {
      return visitor.visitComplexSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    _computeSpecificity$0() {
      var t1, t2, minSpecificity, maxSpecificity, _i, component, t3;
      for (
        t1 = this.components,
          t2 = t1.length,
          minSpecificity = 0,
          maxSpecificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        component = t1[_i];
        if (component instanceof X.CompoundSelector) {
          if (component._compound$_minSpecificity == null)
            component._compound$_computeSpecificity$0();
          t3 = component._compound$_minSpecificity;
          t3.toString;
          minSpecificity += t3;
          if (component._maxSpecificity == null)
            component._compound$_computeSpecificity$0();
          t3 = component._maxSpecificity;
          t3.toString;
          maxSpecificity += t3;
        }
      }
      this._minSpecificity = minSpecificity;
      this._complex$_maxSpecificity = maxSpecificity;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof S.ComplexSelector &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
  };
  S.ComplexSelector_isInvisible_closure.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector && component.get$isInvisible()
      );
    },
    $signature: 97,
  };
  S.Combinator.prototype = {
    toString$0(_) {
      return this._complex$_text;
    },
    $isComplexSelectorComponent: 1,
  };
  X.CompoundSelector.prototype = {
    get$isInvisible() {
      return C.JSArray_methods.any$1(
        this.components,
        new X.CompoundSelector_isInvisible_closure()
      );
    },
    accept$1$1(visitor) {
      return visitor.visitCompoundSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    _compound$_computeSpecificity$0() {
      var t1, t2, minSpecificity, maxSpecificity, _i, simple;
      for (
        t1 = this.components,
          t2 = t1.length,
          minSpecificity = 0,
          maxSpecificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        simple = t1[_i];
        minSpecificity += simple.get$minSpecificity();
        maxSpecificity += simple.get$maxSpecificity();
      }
      this._compound$_minSpecificity = minSpecificity;
      this._maxSpecificity = maxSpecificity;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof X.CompoundSelector &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
    $isComplexSelectorComponent: 1,
  };
  X.CompoundSelector_isInvisible_closure.prototype = {
    call$1(component) {
      return component.get$isInvisible();
    },
    $signature: 15,
  };
  N.IDSelector.prototype = {
    get$minSpecificity() {
      return H._asInt(
        Math.pow(M.SimpleSelector.prototype.get$minSpecificity.call(this), 2)
      );
    },
    accept$1$1(visitor) {
      var t1 = visitor._serialize$_buffer;
      t1.writeCharCode$1(35);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new N.IDSelector(this.name + suffix);
    },
    unify$1(compound) {
      if (
        C.JSArray_methods.any$1(compound, new N.IDSelector_unify_closure(this))
      )
        return null;
      return this.super$SimpleSelector$unify(compound);
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof N.IDSelector && other.name === this.name;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  N.IDSelector_unify_closure.prototype = {
    call$1(simple) {
      var t1;
      if (simple instanceof N.IDSelector) {
        t1 = simple.name;
        t1 = this.$this.name !== t1;
      } else t1 = false;
      return t1;
    },
    $signature: 15,
  };
  D.SelectorList.prototype = {
    get$isInvisible() {
      return C.JSArray_methods.every$1(
        this.components,
        new D.SelectorList_isInvisible_closure()
      );
    },
    get$asSassList() {
      var t1 = this.components;
      return D.SassList$(
        new H.MappedListIterable(
          t1,
          new D.SelectorList_asSassList_closure(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value>')
        ),
        C.ListSeparator_kWM,
        false
      );
    },
    accept$1$1(visitor) {
      return visitor.visitSelectorList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(other) {
      var t1 = this.components,
        t2 = H._arrayInstanceType(t1)._eval$1(
          'ExpandIterable<1,ComplexSelector>'
        ),
        contents = P.List_List$of(
          new H.ExpandIterable(t1, new D.SelectorList_unify_closure(other), t2),
          true,
          t2._eval$1('Iterable.E')
        );
      return contents.length === 0 ? null : D.SelectorList$(contents);
    },
    resolveParentSelectors$2$implicitParent($parent, implicitParent) {
      var t1,
        _this = this;
      if ($parent == null) {
        if (
          !C.JSArray_methods.any$1(
            _this.components,
            _this.get$_complexContainsParentSelector()
          )
        )
          return _this;
        throw H.wrapException(E.SassScriptException$(string$.Top_le));
      }
      t1 = _this.components;
      return D.SelectorList$(
        B.flattenVertically(
          new H.MappedListIterable(
            t1,
            new D.SelectorList_resolveParentSelectors_closure(
              _this,
              implicitParent,
              $parent
            ),
            H._arrayInstanceType(t1)._eval$1(
              'MappedListIterable<1,Iterable<ComplexSelector>>'
            )
          ),
          type$.ComplexSelector
        )
      );
    },
    resolveParentSelectors$1($parent) {
      return this.resolveParentSelectors$2$implicitParent($parent, true);
    },
    _complexContainsParentSelector$1(complex) {
      return C.JSArray_methods.any$1(
        complex.components,
        new D.SelectorList__complexContainsParentSelector_closure()
      );
    },
    _resolveParentSelectorsCompound$2(compound, $parent) {
      var resolvedMembers0,
        parentSelector,
        t1,
        resolvedMembers = compound.components,
        containsSelectorPseudo = C.JSArray_methods.any$1(
          resolvedMembers,
          new D.SelectorList__resolveParentSelectorsCompound_closure()
        );
      if (
        !containsSelectorPseudo &&
        !(
          C.JSArray_methods.get$first(resolvedMembers) instanceof
          M.ParentSelector
        )
      )
        return null;
      resolvedMembers0 = containsSelectorPseudo
        ? new H.MappedListIterable(
            resolvedMembers,
            new D.SelectorList__resolveParentSelectorsCompound_closure0(
              $parent
            ),
            H._arrayInstanceType(resolvedMembers)._eval$1(
              'MappedListIterable<1,SimpleSelector>'
            )
          )
        : resolvedMembers;
      parentSelector = C.JSArray_methods.get$first(resolvedMembers);
      if (parentSelector instanceof M.ParentSelector) {
        if (resolvedMembers.length === 1 && parentSelector.suffix == null)
          return $parent.components;
      } else
        return H._setArrayType(
          [
            S.ComplexSelector$(
              H._setArrayType(
                [X.CompoundSelector$(resolvedMembers0)],
                type$.JSArray_ComplexSelectorComponent
              ),
              false
            ),
          ],
          type$.JSArray_ComplexSelector
        );
      t1 = $parent.components;
      return new H.MappedListIterable(
        t1,
        new D.SelectorList__resolveParentSelectorsCompound_closure1(
          compound,
          resolvedMembers0
        ),
        H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,ComplexSelector>'
        )
      );
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof D.SelectorList &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
  };
  D.SelectorList_isInvisible_closure.prototype = {
    call$1(complex) {
      return complex.get$isInvisible();
    },
    $signature: 16,
  };
  D.SelectorList_asSassList_closure.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      return D.SassList$(
        new H.MappedListIterable(
          t1,
          new D.SelectorList_asSassList__closure(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value>')
        ),
        C.ListSeparator_woc,
        false
      );
    },
    $signature: 397,
  };
  D.SelectorList_asSassList__closure.prototype = {
    call$1(component) {
      return new D.SassString(component.toString$0(0), false);
    },
    $signature: 393,
  };
  D.SelectorList_unify_closure.prototype = {
    call$1(complex1) {
      var t1 = this.other.components;
      return new H.ExpandIterable(
        t1,
        new D.SelectorList_unify__closure(complex1),
        H._arrayInstanceType(t1)._eval$1('ExpandIterable<1,ComplexSelector>')
      );
    },
    $signature: 117,
  };
  D.SelectorList_unify__closure.prototype = {
    call$1(complex2) {
      var unified = Y.unifyComplex(
        H._setArrayType(
          [this.complex1.components, complex2.components],
          type$.JSArray_List_ComplexSelectorComponent
        )
      );
      if (unified == null) return C.List_empty4;
      return J.map$1$1$ax(
        unified,
        new D.SelectorList_unify___closure(),
        type$.ComplexSelector
      );
    },
    $signature: 117,
  };
  D.SelectorList_unify___closure.prototype = {
    call$1(complex) {
      return S.ComplexSelector$(complex, false);
    },
    $signature: 66,
  };
  D.SelectorList_resolveParentSelectors_closure.prototype = {
    call$1(complex) {
      var t2,
        newComplexes,
        t3,
        t4,
        t5,
        t6,
        t7,
        _i,
        component,
        resolved,
        t8,
        _i0,
        previousLineBreaks,
        newComplexes0,
        t9,
        i,
        newComplex,
        i0,
        lineBreak,
        t10,
        t11,
        t12,
        t13,
        _this = this,
        _box_0 = {},
        t1 = _this.$this;
      if (!t1._complexContainsParentSelector$1(complex)) {
        if (!_this.implicitParent)
          return H._setArrayType([complex], type$.JSArray_ComplexSelector);
        t1 = _this.parent.components;
        return new H.MappedListIterable(
          t1,
          new D.SelectorList_resolveParentSelectors__closure(complex),
          H._arrayInstanceType(t1)._eval$1(
            'MappedListIterable<1,ComplexSelector>'
          )
        );
      }
      t2 = type$.JSArray_List_ComplexSelectorComponent;
      newComplexes = H._setArrayType(
        [H._setArrayType([], type$.JSArray_ComplexSelectorComponent)],
        t2
      );
      t3 = type$.JSArray_bool;
      _box_0.lineBreaks = H._setArrayType([false], t3);
      for (
        t4 = complex.components,
          t5 = t4.length,
          t6 = type$.ComplexSelectorComponent,
          t7 = _this.parent,
          _i = 0;
        _i < t5;
        ++_i
      ) {
        component = t4[_i];
        if (component instanceof X.CompoundSelector) {
          resolved = t1._resolveParentSelectorsCompound$2(component, t7);
          if (resolved == null) {
            for (
              t8 = newComplexes.length, _i0 = 0;
              _i0 < newComplexes.length;
              newComplexes.length === t8 ||
                (0, H.throwConcurrentModificationError)(newComplexes),
                ++_i0
            )
              newComplexes[_i0].push(component);
            continue;
          }
          previousLineBreaks = _box_0.lineBreaks;
          newComplexes0 = H._setArrayType([], t2);
          _box_0.lineBreaks = H._setArrayType([], t3);
          for (
            t8 = newComplexes.length,
              t9 = J.getInterceptor$ax(resolved),
              i = 0,
              _i0 = 0;
            _i0 < newComplexes.length;
            newComplexes.length === t8 ||
              (0, H.throwConcurrentModificationError)(newComplexes),
              ++_i0,
              i = i0
          ) {
            newComplex = newComplexes[_i0];
            i0 = i + 1;
            lineBreak = previousLineBreaks[i];
            for (
              t10 = t9.get$iterator(resolved), t11 = !lineBreak;
              t10.moveNext$0();

            ) {
              t12 = t10.get$current();
              t13 = P.List_List$of(newComplex, true, t6);
              C.JSArray_methods.addAll$1(t13, t12.components);
              newComplexes0.push(t13);
              t13 = _box_0.lineBreaks;
              t13.push(!t11 || t12.lineBreak);
            }
          }
          newComplexes = newComplexes0;
        } else
          for (
            t8 = newComplexes.length, _i0 = 0;
            _i0 < newComplexes.length;
            newComplexes.length === t8 ||
              (0, H.throwConcurrentModificationError)(newComplexes),
              ++_i0
          )
            newComplexes[_i0].push(component);
      }
      _box_0.i = 0;
      return new H.MappedListIterable(
        newComplexes,
        new D.SelectorList_resolveParentSelectors__closure0(_box_0),
        H._arrayInstanceType(newComplexes)._eval$1(
          'MappedListIterable<1,ComplexSelector>'
        )
      );
    },
    $signature: 117,
  };
  D.SelectorList_resolveParentSelectors__closure.prototype = {
    call$1(parentComplex) {
      var t1 = P.List_List$of(
          parentComplex.components,
          true,
          type$.ComplexSelectorComponent
        ),
        t2 = this.complex;
      C.JSArray_methods.addAll$1(t1, t2.components);
      return S.ComplexSelector$(t1, t2.lineBreak || parentComplex.lineBreak);
    },
    $signature: 85,
  };
  D.SelectorList_resolveParentSelectors__closure0.prototype = {
    call$1(newComplex) {
      var t1 = this._box_0;
      return S.ComplexSelector$(newComplex, t1.lineBreaks[t1.i++]);
    },
    $signature: 66,
  };
  D.SelectorList__complexContainsParentSelector_closure.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector &&
        C.JSArray_methods.any$1(
          component.components,
          new D.SelectorList__complexContainsParentSelector__closure()
        )
      );
    },
    $signature: 97,
  };
  D.SelectorList__complexContainsParentSelector__closure.prototype = {
    call$1(simple) {
      var selector;
      if (simple instanceof M.ParentSelector) return true;
      if (!(simple instanceof D.PseudoSelector)) return false;
      selector = simple.selector;
      return (
        selector != null &&
        C.JSArray_methods.any$1(
          selector.components,
          selector.get$_complexContainsParentSelector()
        )
      );
    },
    $signature: 15,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure.prototype = {
    call$1(simple) {
      var selector;
      if (!(simple instanceof D.PseudoSelector)) return false;
      selector = simple.selector;
      return (
        selector != null &&
        C.JSArray_methods.any$1(
          selector.components,
          selector.get$_complexContainsParentSelector()
        )
      );
    },
    $signature: 15,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure0.prototype = {
    call$1(simple) {
      var selector, t1, t2, t3;
      if (!(simple instanceof D.PseudoSelector)) return simple;
      selector = simple.selector;
      if (selector == null) return simple;
      if (
        !C.JSArray_methods.any$1(
          selector.components,
          selector.get$_complexContainsParentSelector()
        )
      )
        return simple;
      t1 = selector.resolveParentSelectors$2$implicitParent(this.parent, false);
      t2 = simple.name;
      t3 = simple.isClass;
      return D.PseudoSelector$(t2, simple.argument, !t3, t1);
    },
    $signature: 389,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure1.prototype = {
    call$1(complex) {
      var suffix,
        t2,
        t3,
        t4,
        t5,
        last,
        t1 = complex.components,
        lastComponent = C.JSArray_methods.get$last(t1);
      if (!(lastComponent instanceof X.CompoundSelector))
        throw H.wrapException(
          E.SassScriptException$(
            'Parent "' +
              complex.toString$0(0) +
              '" is incompatible with this selector.'
          )
        );
      suffix = type$.ParentSelector._as(
        C.JSArray_methods.get$first(this.compound.components)
      ).suffix;
      t2 = type$.SimpleSelector;
      t3 = this.resolvedMembers;
      t4 = lastComponent.components;
      t5 = J.getInterceptor$ax(t3);
      if (suffix != null) {
        t2 = P.List_List$of(
          H.SubListIterable$(
            t4,
            0,
            H.checkNotNullable(t4.length - 1, 'count', type$.int),
            H._arrayInstanceType(t4)._precomputed1
          ),
          true,
          t2
        );
        t2.push(C.JSArray_methods.get$last(t4).addSuffix$1(suffix));
        C.JSArray_methods.addAll$1(t2, t5.skip$1(t3, 1));
        last = X.CompoundSelector$(t2);
      } else {
        t2 = P.List_List$of(t4, true, t2);
        C.JSArray_methods.addAll$1(t2, t5.skip$1(t3, 1));
        last = X.CompoundSelector$(t2);
      }
      t1 = P.List_List$of(
        H.SubListIterable$(
          t1,
          0,
          H.checkNotNullable(t1.length - 1, 'count', type$.int),
          H._arrayInstanceType(t1)._precomputed1
        ),
        true,
        type$.ComplexSelectorComponent
      );
      t1.push(last);
      return S.ComplexSelector$(t1, complex.lineBreak);
    },
    $signature: 85,
  };
  M.ParentSelector.prototype = {
    accept$1$1(visitor) {
      var t2,
        t1 = visitor._serialize$_buffer;
      t1.writeCharCode$1(38);
      t2 = this.suffix;
      if (t2 != null) t1.write$1(0, t2);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      return H.throwExpression(
        P.UnsupportedError$("& doesn't support unification.")
      );
    },
  };
  N.PlaceholderSelector.prototype = {
    get$isInvisible() {
      return true;
    },
    accept$1$1(visitor) {
      var t1 = visitor._serialize$_buffer;
      t1.writeCharCode$1(37);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new N.PlaceholderSelector(this.name + suffix);
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof N.PlaceholderSelector && other.name === this.name;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  D.PseudoSelector.prototype = {
    get$minSpecificity() {
      if (this._pseudo$_minSpecificity == null)
        this._pseudo$_computeSpecificity$0();
      var t1 = this._pseudo$_minSpecificity;
      t1.toString;
      return t1;
    },
    get$maxSpecificity() {
      if (this._pseudo$_maxSpecificity == null)
        this._pseudo$_computeSpecificity$0();
      var t1 = this._pseudo$_maxSpecificity;
      t1.toString;
      return t1;
    },
    get$isInvisible() {
      var selector = this.selector;
      if (selector == null) return false;
      return this.name !== 'not' && selector.get$isInvisible();
    },
    addSuffix$1(suffix) {
      var _this = this;
      if (_this.argument != null || _this.selector != null)
        _this.super$SimpleSelector$addSuffix(suffix);
      return D.PseudoSelector$(_this.name + suffix, null, !_this.isClass, null);
    },
    unify$1(compound) {
      var result,
        t1,
        t2,
        addedThis,
        _i,
        simple,
        _this = this;
      if (
        compound.length === 1 &&
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector
      )
        return C.JSArray_methods.get$first(compound).unify$1(
          H._setArrayType([_this], type$.JSArray_SimpleSelector)
        );
      if (C.JSArray_methods.contains$1(compound, _this)) return compound;
      result = H._setArrayType([], type$.JSArray_SimpleSelector);
      for (
        t1 = compound.length, t2 = !_this.isClass, addedThis = false, _i = 0;
        _i < compound.length;
        compound.length === t1 ||
          (0, H.throwConcurrentModificationError)(compound),
          ++_i
      ) {
        simple = compound[_i];
        if (simple instanceof D.PseudoSelector && !simple.isClass) {
          if (t2) return null;
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis) result.push(_this);
      return result;
    },
    _pseudo$_computeSpecificity$0() {
      var selector,
        t1,
        t2,
        minSpecificity,
        maxSpecificity,
        _i,
        complex,
        t3,
        _this = this;
      if (!_this.isClass) {
        _this._pseudo$_maxSpecificity = _this._pseudo$_minSpecificity = 1;
        return;
      }
      selector = _this.selector;
      if (selector == null) {
        _this._pseudo$_minSpecificity = M.SimpleSelector.prototype.get$minSpecificity.call(
          _this
        );
        _this._pseudo$_maxSpecificity = M.SimpleSelector.prototype.get$maxSpecificity.call(
          _this
        );
        return;
      }
      if (_this.name === 'not') {
        for (
          t1 = selector.components,
            t2 = t1.length,
            minSpecificity = 0,
            maxSpecificity = 0,
            _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          if (complex._minSpecificity == null) complex._computeSpecificity$0();
          t3 = complex._minSpecificity;
          t3.toString;
          minSpecificity = Math.max(minSpecificity, t3);
          if (complex._complex$_maxSpecificity == null)
            complex._computeSpecificity$0();
          t3 = complex._complex$_maxSpecificity;
          t3.toString;
          maxSpecificity = Math.max(maxSpecificity, t3);
        }
        _this._pseudo$_minSpecificity = minSpecificity;
        _this._pseudo$_maxSpecificity = maxSpecificity;
      } else {
        minSpecificity = H._asInt(
          Math.pow(M.SimpleSelector.prototype.get$minSpecificity.call(_this), 3)
        );
        for (
          t1 = selector.components, t2 = t1.length, maxSpecificity = 0, _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          if (complex._minSpecificity == null) complex._computeSpecificity$0();
          t3 = complex._minSpecificity;
          t3.toString;
          minSpecificity = Math.min(minSpecificity, t3);
          if (complex._complex$_maxSpecificity == null)
            complex._computeSpecificity$0();
          t3 = complex._complex$_maxSpecificity;
          t3.toString;
          maxSpecificity = Math.max(maxSpecificity, t3);
        }
        _this._pseudo$_minSpecificity = minSpecificity;
        _this._pseudo$_maxSpecificity = maxSpecificity;
      }
    },
    accept$1$1(visitor) {
      return visitor.visitPseudoSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof D.PseudoSelector &&
        other.name === _this.name &&
        other.isClass === _this.isClass &&
        other.argument == _this.argument &&
        J.$eq$(other.selector, _this.selector)
      );
    },
    get$hashCode(_) {
      var _this = this,
        t1 = C.JSString_methods.get$hashCode(_this.name),
        t2 = !_this.isClass ? 519018 : 218159;
      return (
        (t1 ^
          t2 ^
          J.get$hashCode$(_this.argument) ^
          J.get$hashCode$(_this.selector)) >>>
        0
      );
    },
  };
  D.QualifiedName.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof D.QualifiedName &&
        other.name === this.name &&
        other.namespace == this.namespace
      );
    },
    get$hashCode(_) {
      return (
        C.JSString_methods.get$hashCode(this.name) ^
        J.get$hashCode$(this.namespace)
      );
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? t2 : t1 + '|' + t2;
    },
  };
  M.SimpleSelector.prototype = {
    get$minSpecificity() {
      return 1000;
    },
    get$maxSpecificity() {
      return this.get$minSpecificity();
    },
    addSuffix$1(suffix) {
      return H.throwExpression(
        E.SassScriptException$(
          'Invalid parent selector "' + this.toString$0(0) + '"'
        )
      );
    },
    unify$1(compound) {
      var result,
        t1,
        addedThis,
        _i,
        simple,
        _this = this;
      if (
        compound.length === 1 &&
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector
      )
        return C.JSArray_methods.get$first(compound).unify$1(
          H._setArrayType([_this], type$.JSArray_SimpleSelector)
        );
      if (C.JSArray_methods.contains$1(compound, _this)) return compound;
      result = H._setArrayType([], type$.JSArray_SimpleSelector);
      for (
        t1 = compound.length, addedThis = false, _i = 0;
        _i < compound.length;
        compound.length === t1 ||
          (0, H.throwConcurrentModificationError)(compound),
          ++_i
      ) {
        simple = compound[_i];
        if (!addedThis && simple instanceof D.PseudoSelector) {
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis) result.push(_this);
      return result;
    },
  };
  F.TypeSelector.prototype = {
    get$minSpecificity() {
      return 1;
    },
    accept$1$1(visitor) {
      visitor._serialize$_buffer.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      var t1 = this.name;
      return new F.TypeSelector(
        new D.QualifiedName(t1.name + suffix, t1.namespace)
      );
    },
    unify$1(compound) {
      var unified, t1;
      if (
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector ||
        C.JSArray_methods.get$first(compound) instanceof F.TypeSelector
      ) {
        unified = Y.unifyUniversalAndElement(
          this,
          C.JSArray_methods.get$first(compound)
        );
        if (unified == null) return null;
        t1 = H._setArrayType([unified], type$.JSArray_SimpleSelector);
        C.JSArray_methods.addAll$1(
          t1,
          H.SubListIterable$(
            compound,
            1,
            null,
            H._arrayInstanceType(compound)._precomputed1
          )
        );
        return t1;
      } else {
        t1 = H._setArrayType([this], type$.JSArray_SimpleSelector);
        C.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof F.TypeSelector && other.name.$eq(0, this.name);
    },
    get$hashCode(_) {
      var t1 = this.name;
      return (
        C.JSString_methods.get$hashCode(t1.name) ^ J.get$hashCode$(t1.namespace)
      );
    },
  };
  N.UniversalSelector.prototype = {
    get$minSpecificity() {
      return 0;
    },
    accept$1$1(visitor) {
      var t2,
        t1 = this.namespace;
      if (t1 != null) {
        t2 = visitor._serialize$_buffer;
        t2.write$1(0, t1);
        t2.writeCharCode$1(124);
      }
      visitor._serialize$_buffer.writeCharCode$1(42);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      var unified,
        t1,
        _this = this;
      if (
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector ||
        C.JSArray_methods.get$first(compound) instanceof F.TypeSelector
      ) {
        unified = Y.unifyUniversalAndElement(
          _this,
          C.JSArray_methods.get$first(compound)
        );
        if (unified == null) return null;
        t1 = H._setArrayType([unified], type$.JSArray_SimpleSelector);
        C.JSArray_methods.addAll$1(
          t1,
          H.SubListIterable$(
            compound,
            1,
            null,
            H._arrayInstanceType(compound)._precomputed1
          )
        );
        return t1;
      }
      t1 = _this.namespace;
      if (t1 != null && t1 !== '*') {
        t1 = H._setArrayType([_this], type$.JSArray_SimpleSelector);
        C.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
      if (compound.length !== 0) return compound;
      return H._setArrayType([_this], type$.JSArray_SimpleSelector);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof N.UniversalSelector &&
        other.namespace == this.namespace
      );
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.namespace);
    },
  };
  X._compileStylesheet_closure0.prototype = {
    call$1(url) {
      var t1,
        t2,
        _null = null;
      if (url === '')
        t1 = P.Uri_Uri$dataFromString(
          P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              this.stylesheet.span.file._decodedChars,
              0,
              _null
            ),
            0,
            _null
          ),
          C.C_Utf8Codec,
          _null
        ).get$_text();
      else {
        t1 = P.Uri_parse(url);
        t2 = this.importCache._async_import_cache$_resultsCache.$index(0, t1);
        t2 = t2 == null ? _null : t2.get$sourceMapUrl();
        t1 = (t2 == null ? t1 : t2).toString$0(0);
      }
      return t1;
    },
    $signature: 5,
  };
  Q.AsyncEnvironment.prototype = {
    closure$0() {
      var t4,
        t5,
        t6,
        _this = this,
        t1 = _this._async_environment$_forwardedModules,
        t2 = _this._async_environment$_nestedForwardedModules,
        t3 = _this._async_environment$_variables;
      t3 = H._setArrayType(t3.slice(0), H._arrayInstanceType(t3));
      t4 = _this._async_environment$_variableNodes;
      t4 = H._setArrayType(t4.slice(0), H._arrayInstanceType(t4));
      t5 = _this._async_environment$_functions;
      t5 = H._setArrayType(t5.slice(0), H._arrayInstanceType(t5));
      t6 = _this._async_environment$_mixins;
      t6 = H._setArrayType(t6.slice(0), H._arrayInstanceType(t6));
      return Q.AsyncEnvironment$_(
        _this._async_environment$_modules,
        _this._async_environment$_namespaceNodes,
        _this._async_environment$_globalModules,
        _this._async_environment$_importedModules,
        t1,
        t2,
        _this._async_environment$_allModules,
        t3,
        t4,
        t5,
        t6,
        _this._async_environment$_content
      );
    },
    addModule$3$namespace(module, nodeWithSpan, namespace) {
      var t1,
        t2,
        span,
        _this = this;
      if (namespace == null) {
        _this._async_environment$_globalModules.$indexSet(
          0,
          module,
          nodeWithSpan
        );
        _this._async_environment$_allModules.push(module);
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(
              C.JSArray_methods.get$first(_this._async_environment$_variables)
            )
          );
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          if (module.get$variables().containsKey$1(t2))
            throw H.wrapException(
              E.SassScriptException$(string$.This_ma + t2 + '".')
            );
        }
      } else {
        t1 = _this._async_environment$_modules;
        if (t1.containsKey$1(namespace)) {
          t1 = _this._async_environment$_namespaceNodes.$index(0, namespace);
          span = t1 == null ? null : t1.span;
          t1 = string$.There_ + namespace + '".';
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          if (span != null) t2.$indexSet(0, span, 'original @use');
          throw H.wrapException(
            E.MultiSpanSassScriptException$(t1, 'new @use', t2)
          );
        }
        t1.$indexSet(0, namespace, module);
        _this._async_environment$_namespaceNodes.$indexSet(
          0,
          namespace,
          nodeWithSpan
        );
        _this._async_environment$_allModules.push(module);
      }
    },
    forwardModule$2(module, rule) {
      var view,
        t1,
        t2,
        _this = this,
        forwardedModules = _this._async_environment$_forwardedModules;
      if (forwardedModules == null)
        forwardedModules = _this._async_environment$_forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable,
          type$.AstNode
        );
      view = R.ForwardedModuleView_ifNecessary(
        module,
        rule,
        type$.AsyncCallable
      );
      for (
        t1 = forwardedModules.get$keys(forwardedModules),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        _this._async_environment$_assertNoConflicts$5(
          view.get$variables(),
          t2.get$variables(),
          view,
          t2,
          'variable'
        );
        _this._async_environment$_assertNoConflicts$5(
          view.get$functions(view),
          t2.get$functions(t2),
          view,
          t2,
          'function'
        );
        _this._async_environment$_assertNoConflicts$5(
          view.get$mixins(),
          t2.get$mixins(),
          view,
          t2,
          'mixin'
        );
      }
      _this._async_environment$_allModules.push(module);
      forwardedModules.$indexSet(0, view, rule);
    },
    _async_environment$_assertNoConflicts$5(
      newMembers,
      oldMembers,
      newModule,
      oldModule,
      type
    ) {
      var larger, smaller, t1, t2, $name, span;
      if (
        newMembers.get$length(newMembers) < oldMembers.get$length(oldMembers)
      ) {
        larger = oldMembers;
        smaller = newMembers;
      } else {
        larger = newMembers;
        smaller = oldMembers;
      }
      for (
        t1 = J.get$iterator$ax(smaller.get$keys(smaller)),
          t2 = type === 'variable';
        t1.moveNext$0();

      ) {
        $name = t1.get$current();
        if (!larger.containsKey$1($name)) continue;
        if (
          t2
            ? newModule.variableIdentity$1($name) ===
              oldModule.variableIdentity$1($name)
            : J.$eq$(larger.$index(0, $name), smaller.$index(0, $name))
        )
          continue;
        if (t2) $name = '$' + $name;
        t1 = this._async_environment$_forwardedModules;
        if (t1 == null) span = null;
        else {
          t1 = t1.$index(0, oldModule);
          span = t1 == null ? null : t1.get$span();
        }
        t1 =
          'Two forwarded modules both define a ' +
          type +
          ' named ' +
          $name +
          '.';
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(type$.FileSpan, type$.String);
        if (span != null) t2.$indexSet(0, span, 'original @forward');
        throw H.wrapException(
          E.MultiSpanSassScriptException$(t1, 'new @forward', t2)
        );
      }
    },
    importForwards$1(module) {
      var forwardedModules,
        t1,
        t2,
        t3,
        t4,
        t5,
        forwardedVariableNames,
        forwardedFunctionNames,
        forwardedMixinNames,
        _i,
        entry,
        shadowed,
        t6,
        _length,
        _list,
        _this = this,
        forwarded =
          module._async_environment$_environment
            ._async_environment$_forwardedModules;
      if (forwarded == null) return;
      forwardedModules = _this._async_environment$_forwardedModules;
      if (forwardedModules != null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable,
          type$.AstNode
        );
        for (
          t2 = forwarded.get$entries(forwarded),
            t2 = t2.get$iterator(t2),
            t3 = _this._async_environment$_globalModules;
          t2.moveNext$0();

        ) {
          t4 = t2.get$current();
          t5 = t4.key;
          if (!forwardedModules.containsKey$1(t5) || !t3.containsKey$1(t5))
            t1.$indexSet(0, t5, t4.value);
        }
        forwarded = t1;
      } else
        forwardedModules = _this._async_environment$_forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable,
          type$.AstNode
        );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedVariableNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new Q.AsyncEnvironment_importForwards_closure(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t2 = forwarded.get$keys(forwarded);
      t1 = H._instanceType(t2)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedFunctionNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t2,
          new Q.AsyncEnvironment_importForwards_closure0(),
          t1
        ),
        t1._eval$1('Iterable.E')
      );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedMixinNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new Q.AsyncEnvironment_importForwards_closure1(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t1 = _this._async_environment$_variables;
      t2 = t1.length;
      if (t2 === 1) {
        for (
          t2 = _this._async_environment$_importedModules,
            t3 = t2.get$entries(t2).toList$0(0),
            t4 = t3.length,
            t5 = type$.AsyncCallable,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            t2.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) t2.$indexSet(0, shadowed, entry.value);
          }
        }
        for (
          t3 = forwardedModules.get$entries(forwardedModules).toList$0(0),
            t4 = t3.length,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            forwardedModules.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) forwardedModules.$indexSet(0, shadowed, entry.value);
          }
        }
        t2.addAll$1(0, forwarded);
        forwardedModules.addAll$1(0, forwarded);
      } else {
        t3 = _this._async_environment$_nestedForwardedModules;
        if (t3 == null) {
          _length = t2 - 1;
          _list = J.JSArray_JSArray$allocateGrowable(
            _length,
            type$.List_Module_AsyncCallable
          );
          for (
            t2 = type$.JSArray_Module_AsyncCallable, _i = 0;
            _i < _length;
            ++_i
          )
            _list[_i] = H._setArrayType([], t2);
          _this._async_environment$_nestedForwardedModules = _list;
          t2 = _list;
        } else t2 = t3;
        C.JSArray_methods.addAll$1(
          C.JSArray_methods.get$last(t2),
          forwarded.get$keys(forwarded)
        );
      }
      for (
        t2 = P._LinkedHashSetIterator$(
          forwardedVariableNames,
          forwardedVariableNames._collection$_modifications
        ),
          t3 = H._instanceType(t2)._precomputed1,
          t4 = _this._async_environment$_variableIndices,
          t5 = _this._async_environment$_variableNodes;
        t2.moveNext$0();

      ) {
        t6 = t3._as(t2._collection$_current);
        t4.remove$1(0, t6);
        J.remove$1$z(C.JSArray_methods.get$last(t1), t6);
        J.remove$1$z(C.JSArray_methods.get$last(t5), t6);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedFunctionNames,
          forwardedFunctionNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._async_environment$_functionIndices,
          t4 = _this._async_environment$_functions;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedMixinNames,
          forwardedMixinNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._async_environment$_mixinIndices,
          t4 = _this._async_environment$_mixins;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
    },
    getVariable$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment$_getModule$1(namespace)
          .get$variables()
          .$index(0, $name);
      if (_this._async_environment$_lastVariableName === $name) {
        t1 = _this._async_environment$_lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._async_environment$_variables[t1], $name);
        return t1 == null
          ? _this._async_environment$_getVariableFromGlobalModule$1($name)
          : t1;
      }
      t1 = _this._async_environment$_variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._async_environment$_lastVariableName = $name;
        _this._async_environment$_lastVariableIndex = index;
        t1 = J.$index$asx(_this._async_environment$_variables[index], $name);
        return t1 == null
          ? _this._async_environment$_getVariableFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment$_variableIndex$1($name);
      if (index == null)
        return _this._async_environment$_getVariableFromGlobalModule$1($name);
      _this._async_environment$_lastVariableName = $name;
      _this._async_environment$_lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment$_variables[index], $name);
      return t1 == null
        ? _this._async_environment$_getVariableFromGlobalModule$1($name)
        : t1;
    },
    getVariable$1($name) {
      return this.getVariable$2$namespace($name, null);
    },
    _async_environment$_getVariableFromGlobalModule$1($name) {
      return this._async_environment$_fromOneModule$1$3(
        $name,
        'variable',
        new Q.AsyncEnvironment__getVariableFromGlobalModule_closure($name),
        type$.Value
      );
    },
    getVariableNode$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment$_getModule$1(namespace)
          .get$variableNodes()
          .$index(0, $name);
      if (_this._async_environment$_lastVariableName === $name) {
        t1 = _this._async_environment$_lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._async_environment$_variableNodes[t1], $name);
        return t1 == null
          ? _this._async_environment$_getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      t1 = _this._async_environment$_variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._async_environment$_lastVariableName = $name;
        _this._async_environment$_lastVariableIndex = index;
        t1 = J.$index$asx(
          _this._async_environment$_variableNodes[index],
          $name
        );
        return t1 == null
          ? _this._async_environment$_getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment$_variableIndex$1($name);
      if (index == null)
        return _this._async_environment$_getVariableNodeFromGlobalModule$1(
          $name
        );
      _this._async_environment$_lastVariableName = $name;
      _this._async_environment$_lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment$_variableNodes[index], $name);
      return t1 == null
        ? _this._async_environment$_getVariableNodeFromGlobalModule$1($name)
        : t1;
    },
    _async_environment$_getVariableNodeFromGlobalModule$1($name) {
      var t1, t2, value;
      for (
        t1 = this._async_environment$_importedModules,
          t2 = this._async_environment$_globalModules,
          t2 = t1.get$keys(t1).followedBy$1(0, t2.get$keys(t2)),
          t2 = new H.FollowedByIterator(
            J.get$iterator$ax(t2.__internal$_first),
            t2._second
          );
        t2.moveNext$0();

      ) {
        value = t2._currentIterator
          .get$current()
          .get$variableNodes()
          .$index(0, $name);
        if (value != null) return value;
      }
      return null;
    },
    globalVariableExists$2$namespace($name, namespace) {
      if (namespace != null)
        return this._async_environment$_getModule$1(namespace)
          .get$variables()
          .containsKey$1($name);
      if (
        C.JSArray_methods.get$first(
          this._async_environment$_variables
        ).containsKey$1($name)
      )
        return true;
      return (
        this._async_environment$_getVariableFromGlobalModule$1($name) != null
      );
    },
    globalVariableExists$1($name) {
      return this.globalVariableExists$2$namespace($name, null);
    },
    _async_environment$_variableIndex$1($name) {
      var t1, i;
      for (
        t1 = this._async_environment$_variables, i = t1.length - 1;
        i >= 0;
        --i
      )
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    setVariable$5$global$namespace(
      $name,
      value,
      nodeWithSpan,
      global,
      namespace
    ) {
      var t1,
        moduleWithName,
        nestedForwardedModules,
        t2,
        t3,
        t4,
        t5,
        index,
        _this = this;
      if (namespace != null) {
        _this
          ._async_environment$_getModule$1(namespace)
          .setVariable$3($name, value, nodeWithSpan);
        return;
      }
      if (global || _this._async_environment$_variables.length === 1) {
        _this._async_environment$_variableIndices.putIfAbsent$2(
          $name,
          new Q.AsyncEnvironment_setVariable_closure(_this, $name)
        );
        t1 = _this._async_environment$_variables;
        if (!C.JSArray_methods.get$first(t1).containsKey$1($name)) {
          moduleWithName = _this._async_environment$_fromOneModule$1$3(
            $name,
            'variable',
            new Q.AsyncEnvironment_setVariable_closure0($name),
            type$.Module_AsyncCallable
          );
          if (moduleWithName != null) {
            moduleWithName.setVariable$3($name, value, nodeWithSpan);
            return;
          }
        }
        J.$indexSet$ax(C.JSArray_methods.get$first(t1), $name, value);
        J.$indexSet$ax(
          C.JSArray_methods.get$first(_this._async_environment$_variableNodes),
          $name,
          nodeWithSpan
        );
        return;
      }
      nestedForwardedModules = _this._async_environment$_nestedForwardedModules;
      if (
        nestedForwardedModules != null &&
        !_this._async_environment$_variableIndices.containsKey$1($name) &&
        _this._async_environment$_variableIndex$1($name) == null
      )
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H.instanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            t5 = t4._as(t3.__internal$_current);
            if (t5.get$variables().containsKey$1($name)) {
              t5.setVariable$3($name, value, nodeWithSpan);
              return;
            }
          }
      if (_this._async_environment$_lastVariableName === $name) {
        t1 = _this._async_environment$_lastVariableIndex;
        t1.toString;
        index = t1;
      } else
        index = _this._async_environment$_variableIndices.putIfAbsent$2(
          $name,
          new Q.AsyncEnvironment_setVariable_closure1(_this, $name)
        );
      if (!_this._async_environment$_inSemiGlobalScope && index === 0) {
        index = _this._async_environment$_variables.length - 1;
        _this._async_environment$_variableIndices.$indexSet(0, $name, index);
      }
      _this._async_environment$_lastVariableName = $name;
      _this._async_environment$_lastVariableIndex = index;
      J.$indexSet$ax(_this._async_environment$_variables[index], $name, value);
      J.$indexSet$ax(
        _this._async_environment$_variableNodes[index],
        $name,
        nodeWithSpan
      );
    },
    setVariable$4$global($name, value, nodeWithSpan, global) {
      return this.setVariable$5$global$namespace(
        $name,
        value,
        nodeWithSpan,
        global,
        null
      );
    },
    setLocalVariable$3($name, value, nodeWithSpan) {
      var index,
        _this = this,
        t1 = _this._async_environment$_variables,
        t2 = t1.length;
      _this._async_environment$_lastVariableName = $name;
      index = _this._async_environment$_lastVariableIndex = t2 - 1;
      _this._async_environment$_variableIndices.$indexSet(0, $name, index);
      J.$indexSet$ax(t1[index], $name, value);
      J.$indexSet$ax(
        _this._async_environment$_variableNodes[index],
        $name,
        nodeWithSpan
      );
    },
    getFunction$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null) {
        t1 = _this._async_environment$_getModule$1(namespace);
        return t1.get$functions(t1).$index(0, $name);
      }
      t1 = _this._async_environment$_functionIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._async_environment$_functions[index], $name);
        return t1 == null
          ? _this._async_environment$_getFunctionFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment$_functionIndex$1($name);
      if (index == null)
        return _this._async_environment$_getFunctionFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment$_functions[index], $name);
      return t1 == null
        ? _this._async_environment$_getFunctionFromGlobalModule$1($name)
        : t1;
    },
    _async_environment$_getFunctionFromGlobalModule$1($name) {
      return this._async_environment$_fromOneModule$1$3(
        $name,
        'function',
        new Q.AsyncEnvironment__getFunctionFromGlobalModule_closure($name),
        type$.AsyncCallable
      );
    },
    _async_environment$_functionIndex$1($name) {
      var t1, i;
      for (
        t1 = this._async_environment$_functions, i = t1.length - 1;
        i >= 0;
        --i
      )
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    getMixin$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment$_getModule$1(namespace)
          .get$mixins()
          .$index(0, $name);
      t1 = _this._async_environment$_mixinIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._async_environment$_mixins[index], $name);
        return t1 == null
          ? _this._async_environment$_getMixinFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment$_mixinIndex$1($name);
      if (index == null)
        return _this._async_environment$_getMixinFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment$_mixins[index], $name);
      return t1 == null
        ? _this._async_environment$_getMixinFromGlobalModule$1($name)
        : t1;
    },
    _async_environment$_getMixinFromGlobalModule$1($name) {
      return this._async_environment$_fromOneModule$1$3(
        $name,
        'mixin',
        new Q.AsyncEnvironment__getMixinFromGlobalModule_closure($name),
        type$.AsyncCallable
      );
    },
    _async_environment$_mixinIndex$1($name) {
      var t1, i;
      for (t1 = this._async_environment$_mixins, i = t1.length - 1; i >= 0; --i)
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    withContent$2($content, callback) {
      return this.withContent$body$AsyncEnvironment($content, callback);
    },
    withContent$body$AsyncEnvironment($content, callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        oldContent;
      var $async$withContent$2 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldContent = $async$self._async_environment$_content;
              $async$self._async_environment$_content = $content;
              $async$goto = 2;
              return P._asyncAwait(callback.call$0(), $async$withContent$2);
            case 2:
              // returning from await.
              $async$self._async_environment$_content = oldContent;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$withContent$2, $async$completer);
    },
    asMixin$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        oldInMixin;
      var $async$asMixin$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldInMixin = $async$self._async_environment$_inMixin;
              $async$self._async_environment$_inMixin = true;
              $async$goto = 2;
              return P._asyncAwait(callback.call$0(), $async$asMixin$1);
            case 2:
              // returning from await.
              $async$self._async_environment$_inMixin = oldInMixin;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$asMixin$1, $async$completer);
    },
    scope$1$3$semiGlobal$when(callback, semiGlobal, when, $T) {
      return this.scope$body$AsyncEnvironment(
        callback,
        semiGlobal,
        when,
        $T,
        $T
      );
    },
    scope$1$1(callback, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, true, $T);
    },
    scope$1$2$when(callback, when, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, when, $T);
    },
    scope$1$2$semiGlobal(callback, semiGlobal, $T) {
      return this.scope$1$3$semiGlobal$when(callback, semiGlobal, true, $T);
    },
    scope$body$AsyncEnvironment(callback, semiGlobal, when, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        wasInSemiGlobalScope,
        $name,
        name0,
        name1,
        t1,
        t2,
        t3,
        t4,
        t5;
      var $async$scope$1$3$semiGlobal$when = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                semiGlobal =
                  semiGlobal &&
                  $async$self._async_environment$_inSemiGlobalScope;
                wasInSemiGlobalScope =
                  $async$self._async_environment$_inSemiGlobalScope;
                $async$self._async_environment$_inSemiGlobalScope = semiGlobal;
                $async$goto = !when ? 3 : 4;
                break;
              case 3:
                // then
                $async$handler = 5;
                $async$goto = 8;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$scope$1$3$semiGlobal$when
                );
              case 8:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                $async$next = [1];
                // goto finally
                $async$goto = 6;
                break;
                $async$next.push(7);
                // goto finally
                $async$goto = 6;
                break;
              case 5:
                // uncaught
                $async$next = [2];
              case 6:
                // finally
                $async$handler = 2;
                $async$self._async_environment$_inSemiGlobalScope = wasInSemiGlobalScope;
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 7:
              // after finally
              case 4:
                // join
                t1 = $async$self._async_environment$_variables;
                t2 = type$.String;
                C.JSArray_methods.add$1(
                  t1,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Value)
                );
                C.JSArray_methods.add$1(
                  $async$self._async_environment$_variableNodes,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.AstNode)
                );
                t3 = $async$self._async_environment$_functions;
                t4 = type$.AsyncCallable;
                C.JSArray_methods.add$1(
                  t3,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, t4)
                );
                t5 = $async$self._async_environment$_mixins;
                C.JSArray_methods.add$1(
                  t5,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, t4)
                );
                t4 = $async$self._async_environment$_nestedForwardedModules;
                if (t4 != null)
                  t4.push(
                    H._setArrayType([], type$.JSArray_Module_AsyncCallable)
                  );
                $async$handler = 9;
                $async$goto = 12;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$scope$1$3$semiGlobal$when
                );
              case 12:
                // returning from await.
                t2 = $async$result;
                $async$returnValue = t2;
                $async$next = [1];
                // goto finally
                $async$goto = 10;
                break;
                $async$next.push(11);
                // goto finally
                $async$goto = 10;
                break;
              case 9:
                // uncaught
                $async$next = [2];
              case 10:
                // finally
                $async$handler = 2;
                $async$self._async_environment$_inSemiGlobalScope = wasInSemiGlobalScope;
                $async$self._async_environment$_lastVariableIndex = $async$self._async_environment$_lastVariableName = null;
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t1))
                  ),
                    t2 = $async$self._async_environment$_variableIndices;
                  t1.moveNext$0();

                ) {
                  $name = t1.get$current();
                  t2.remove$1(0, $name);
                }
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t3))
                  ),
                    t2 = $async$self._async_environment$_functionIndices;
                  t1.moveNext$0();

                ) {
                  name0 = t1.get$current();
                  t2.remove$1(0, name0);
                }
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t5))
                  ),
                    t2 = $async$self._async_environment$_mixinIndices;
                  t1.moveNext$0();

                ) {
                  name1 = t1.get$current();
                  t2.remove$1(0, name1);
                }
                t1 = $async$self._async_environment$_nestedForwardedModules;
                if (t1 != null) t1.pop();
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 11:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$scope$1$3$semiGlobal$when,
        $async$completer
      );
    },
    toImplicitConfiguration$0() {
      var t1,
        t2,
        i,
        values,
        nodes,
        t3,
        t4,
        t5,
        t6,
        configuration = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.ConfiguredValue
        );
      for (
        t1 = this._async_environment$_variables,
          t2 = this._async_environment$_variableNodes,
          i = 0;
        i < t1.length;
        ++i
      ) {
        values = t1[i];
        nodes = t2[i];
        for (
          t3 = values.get$entries(values), t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t5 = t4.key;
          t4 = t4.value;
          t6 = nodes.$index(0, t5);
          t6.toString;
          configuration.$indexSet(0, t5, new Z.ConfiguredValue(t4, null, t6));
        }
      }
      return new A.Configuration(configuration);
    },
    toModule$2(css, extensionStore) {
      return Q._EnvironmentModule__EnvironmentModule0(
        this,
        css,
        extensionStore,
        X.NullableExtension_andThen(
          this._async_environment$_forwardedModules,
          new Q.AsyncEnvironment_toModule_closure()
        )
      );
    },
    toDummyModule$0() {
      return Q._EnvironmentModule__EnvironmentModule0(
        this,
        new V.CssStylesheet(
          new P.UnmodifiableListView(
            C.List_empty0,
            type$.UnmodifiableListView_CssNode
          ),
          Y.SourceFile$decoded(C.List_empty1, '<dummy module>').span$1(0)
        ),
        C.C_EmptyExtensionStore,
        X.NullableExtension_andThen(
          this._async_environment$_forwardedModules,
          new Q.AsyncEnvironment_toDummyModule_closure()
        )
      );
    },
    _async_environment$_getModule$1(namespace) {
      var module = this._async_environment$_modules.$index(0, namespace);
      if (module != null) return module;
      throw H.wrapException(
        E.SassScriptException$(
          'There is no module with the namespace "' + namespace + '".'
        )
      );
    },
    _async_environment$_fromOneModule$1$3($name, type, callback, $T) {
      var t1,
        t2,
        t3,
        t4,
        value,
        identity,
        valueInModule,
        identityFromModule,
        spans,
        t5,
        nestedForwardedModules = this
          ._async_environment$_nestedForwardedModules;
      if (nestedForwardedModules != null)
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H._arrayInstanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            value = callback.call$1(t4._as(t3.__internal$_current));
            if (value != null) return value;
          }
      for (
        t1 = this._async_environment$_importedModules,
          t1 = t1.get$keys(t1),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        value = callback.call$1(t1.get$current());
        if (value != null) return value;
      }
      for (
        t1 = this._async_environment$_globalModules,
          t2 = t1.get$keys(t1),
          t2 = t2.get$iterator(t2),
          t3 = type$.AsyncCallable,
          value = null,
          identity = null;
        t2.moveNext$0();

      ) {
        t4 = t2.get$current();
        valueInModule = callback.call$1(t4);
        if (valueInModule == null) continue;
        identityFromModule = t3._is(valueInModule)
          ? valueInModule
          : t4.variableIdentity$1($name);
        if (identityFromModule.$eq(0, identity)) continue;
        if (value != null) {
          spans = t1
            .get$entries(t1)
            .map$1$1(
              0,
              new Q.AsyncEnvironment__fromOneModule_closure(callback, $T),
              type$.nullable_FileSpan
            );
          t2 = 'This ' + type + string$.x20is_av;
          t3 = type + ' use';
          t4 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          for (t1 = spans.get$iterator(spans); t1.moveNext$0(); ) {
            t5 = t1.get$current();
            if (t5 != null) t4.$indexSet(0, t5, 'includes ' + type);
          }
          throw H.wrapException(E.MultiSpanSassScriptException$(t2, t3, t4));
        }
        identity = identityFromModule;
        value = valueInModule;
      }
      return value;
    },
  };
  Q.AsyncEnvironment_importForwards_closure.prototype = {
    call$1(module) {
      var t1 = module.get$variables();
      return t1.get$keys(t1);
    },
    $signature: 106,
  };
  Q.AsyncEnvironment_importForwards_closure0.prototype = {
    call$1(module) {
      var t1 = module.get$functions(module);
      return t1.get$keys(t1);
    },
    $signature: 106,
  };
  Q.AsyncEnvironment_importForwards_closure1.prototype = {
    call$1(module) {
      var t1 = module.get$mixins();
      return t1.get$keys(t1);
    },
    $signature: 106,
  };
  Q.AsyncEnvironment__getVariableFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$variables().$index(0, this.name);
    },
    $signature: 386,
  };
  Q.AsyncEnvironment_setVariable_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._async_environment$_lastVariableName = this.name;
      return (t1._async_environment$_lastVariableIndex = 0);
    },
    $signature: 18,
  };
  Q.AsyncEnvironment_setVariable_closure0.prototype = {
    call$1(module) {
      return module.get$variables().containsKey$1(this.name) ? module : null;
    },
    $signature: 375,
  };
  Q.AsyncEnvironment_setVariable_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._async_environment$_variableIndex$1(this.name);
      return t2 == null ? t1._async_environment$_variables.length - 1 : t2;
    },
    $signature: 18,
  };
  Q.AsyncEnvironment__getFunctionFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$functions(module).$index(0, this.name);
    },
    $signature: 178,
  };
  Q.AsyncEnvironment__getMixinFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$mixins().$index(0, this.name);
    },
    $signature: 178,
  };
  Q.AsyncEnvironment_toModule_closure.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_AsyncCallable);
    },
    $signature: 180,
  };
  Q.AsyncEnvironment_toDummyModule_closure.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_AsyncCallable);
    },
    $signature: 180,
  };
  Q.AsyncEnvironment__fromOneModule_closure.prototype = {
    call$1(entry) {
      return X.NullableExtension_andThen(
        this.callback.call$1(entry.key),
        new Q.AsyncEnvironment__fromOneModule__closure(entry, this.T)
      );
    },
    $signature: 374,
  };
  Q.AsyncEnvironment__fromOneModule__closure.prototype = {
    call$1(_) {
      return this.entry.value.get$span();
    },
    $signature() {
      return this.T._eval$1('FileSpan(0)');
    },
  };
  Q._EnvironmentModule0.prototype = {
    get$url() {
      return this.css.get$span().file.url;
    },
    setVariable$3($name, value, nodeWithSpan) {
      var t1,
        t2,
        module = this._async_environment$_modulesByVariable.$index(0, $name);
      if (module != null) {
        module.setVariable$3($name, value, nodeWithSpan);
        return;
      }
      t1 = this._async_environment$_environment;
      t2 = t1._async_environment$_variables;
      if (!C.JSArray_methods.get$first(t2).containsKey$1($name))
        throw H.wrapException(E.SassScriptException$('Undefined variable.'));
      J.$indexSet$ax(C.JSArray_methods.get$first(t2), $name, value);
      J.$indexSet$ax(
        C.JSArray_methods.get$first(t1._async_environment$_variableNodes),
        $name,
        nodeWithSpan
      );
      return;
    },
    variableIdentity$1($name) {
      var module = this._async_environment$_modulesByVariable.$index(0, $name);
      return module == null ? this : module.variableIdentity$1($name);
    },
    cloneCss$0() {
      var newCssAndExtensionStore,
        _this = this,
        t1 = _this.css;
      if (J.get$isEmpty$asx(t1.get$children(t1))) return _this;
      newCssAndExtensionStore = V.cloneCssStylesheet(t1, _this.extensionStore);
      return Q._EnvironmentModule$_0(
        _this._async_environment$_environment,
        newCssAndExtensionStore.item1,
        newCssAndExtensionStore.item2,
        _this._async_environment$_modulesByVariable,
        _this.variables,
        _this.variableNodes,
        _this.functions,
        _this.mixins,
        _this.transitivelyContainsCss,
        _this.transitivelyContainsExtensions
      );
    },
    toString$0(_) {
      var t1 = this.css;
      if (t1.get$span().file.url == null) t1 = '<unknown url>';
      else {
        t1 = t1.get$span();
        t1 = $.$get$context().prettyUri$1(t1.file.url);
      }
      return t1;
    },
    $isModule: 1,
    get$upstream() {
      return this.upstream;
    },
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$extensionStore() {
      return this.extensionStore;
    },
    get$css(receiver) {
      return this.css;
    },
    get$transitivelyContainsCss() {
      return this.transitivelyContainsCss;
    },
    get$transitivelyContainsExtensions() {
      return this.transitivelyContainsExtensions;
    },
  };
  Q._EnvironmentModule__EnvironmentModule_closure5.prototype = {
    call$1(module) {
      return module.get$variables();
    },
    $signature: 365,
  };
  Q._EnvironmentModule__EnvironmentModule_closure6.prototype = {
    call$1(module) {
      return module.get$variableNodes();
    },
    $signature: 364,
  };
  Q._EnvironmentModule__EnvironmentModule_closure7.prototype = {
    call$1(module) {
      return module.get$functions(module);
    },
    $signature: 188,
  };
  Q._EnvironmentModule__EnvironmentModule_closure8.prototype = {
    call$1(module) {
      return module.get$mixins();
    },
    $signature: 188,
  };
  Q._EnvironmentModule__EnvironmentModule_closure9.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 87,
  };
  Q._EnvironmentModule__EnvironmentModule_closure10.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsExtensions();
    },
    $signature: 87,
  };
  O.AsyncImportCache.prototype = {
    canonicalize$4$baseImporter$baseUrl$forImport(
      url,
      baseImporter,
      baseUrl,
      forImport
    ) {
      return this.canonicalize$body$AsyncImportCache(
        url,
        baseImporter,
        baseUrl,
        forImport
      );
    },
    canonicalize$body$AsyncImportCache(url, baseImporter, baseUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Tuple3_AsyncImporter_Uri_Uri
        ),
        $async$returnValue,
        $async$self = this,
        resolvedUrl,
        canonicalUrl,
        t1;
      var $async$canonicalize$4$baseImporter$baseUrl$forImport = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = baseImporter != null ? 3 : 4;
                break;
              case 3:
                // then
                resolvedUrl =
                  baseUrl == null ? null : baseUrl.resolveUri$1(url);
                if (resolvedUrl == null) resolvedUrl = url;
                $async$goto = 5;
                return P._asyncAwait(
                  $async$self._async_import_cache$_canonicalize$3(
                    baseImporter,
                    resolvedUrl,
                    forImport
                  ),
                  $async$canonicalize$4$baseImporter$baseUrl$forImport
                );
              case 5:
                // returning from await.
                canonicalUrl = $async$result;
                if (canonicalUrl != null) {
                  $async$returnValue = new S.Tuple3(
                    baseImporter,
                    canonicalUrl,
                    resolvedUrl,
                    type$.Tuple3_AsyncImporter_Uri_Uri
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 4:
                // join
                t1 = type$.Tuple2_Uri_bool;
                $async$goto = 6;
                return P._asyncAwait(
                  B.putIfAbsentAsync(
                    $async$self._async_import_cache$_canonicalizeCache,
                    new S.Tuple2(url, forImport, t1),
                    new O.AsyncImportCache_canonicalize_closure(
                      $async$self,
                      url,
                      forImport
                    ),
                    t1,
                    type$.nullable_Tuple3_AsyncImporter_Uri_Uri
                  ),
                  $async$canonicalize$4$baseImporter$baseUrl$forImport
                );
              case 6:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$canonicalize$4$baseImporter$baseUrl$forImport,
        $async$completer
      );
    },
    _async_import_cache$_canonicalize$3(importer, url, forImport) {
      return this._canonicalize$body$AsyncImportCache(importer, url, forImport);
    },
    _canonicalize$body$AsyncImportCache(importer, url, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Uri),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$_async_import_cache$_canonicalize$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (forImport) {
                  t1 = type$.nullable_Object;
                  t1 = P.runZoned(
                    new O.AsyncImportCache__canonicalize_closure(importer, url),
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [C.Symbol__inImportRule, true],
                      t1,
                      t1
                    ),
                    type$.FutureOr_nullable_Uri
                  );
                } else t1 = importer.canonicalize$1(url);
                $async$goto = 3;
                return P._asyncAwait(
                  t1,
                  $async$_async_import_cache$_canonicalize$3
                );
              case 3:
                // returning from await.
                result = $async$result;
                if ((result == null ? null : result.get$scheme()) === '')
                  $async$self._async_import_cache$_logger.warn$2$deprecation(
                    0,
                    'Importer ' +
                      importer.toString$0(0) +
                      ' canonicalized ' +
                      url.toString$0(0) +
                      ' to ' +
                      H.S(result) +
                      string$.x2e_Rela,
                    true
                  );
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_import_cache$_canonicalize$3,
        $async$completer
      );
    },
    importCanonical$4$originalUrl$quiet(
      importer,
      canonicalUrl,
      originalUrl,
      quiet
    ) {
      return this.importCanonical$body$AsyncImportCache(
        importer,
        canonicalUrl,
        originalUrl,
        quiet
      );
    },
    importCanonical$3$originalUrl(importer, canonicalUrl, originalUrl) {
      return this.importCanonical$4$originalUrl$quiet(
        importer,
        canonicalUrl,
        originalUrl,
        false
      );
    },
    importCanonical$body$AsyncImportCache(
      importer,
      canonicalUrl,
      originalUrl,
      quiet
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Stylesheet
        ),
        $async$returnValue,
        $async$self = this;
      var $async$importCanonical$4$originalUrl$quiet = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  B.putIfAbsentAsync(
                    $async$self._async_import_cache$_importCache,
                    canonicalUrl,
                    new O.AsyncImportCache_importCanonical_closure(
                      $async$self,
                      importer,
                      canonicalUrl,
                      originalUrl,
                      quiet
                    ),
                    type$.Uri,
                    type$.nullable_Stylesheet
                  ),
                  $async$importCanonical$4$originalUrl$quiet
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$importCanonical$4$originalUrl$quiet,
        $async$completer
      );
    },
    humanize$1(canonicalUrl) {
      var t2,
        url,
        t1 = this._async_import_cache$_canonicalizeCache;
      t1 = A.IterableNullableExtension_whereNotNull(
        t1.get$values(t1),
        type$.Tuple3_AsyncImporter_Uri_Uri
      );
      t2 = t1.$ti;
      url = Y.minBy(
        new H.MappedIterable(
          new H.WhereIterable(
            t1,
            new O.AsyncImportCache_humanize_closure(canonicalUrl),
            t2._eval$1('WhereIterable<Iterable.E>')
          ),
          new O.AsyncImportCache_humanize_closure0(),
          t2._eval$1('MappedIterable<Iterable.E,Uri>')
        ),
        new O.AsyncImportCache_humanize_closure1()
      );
      if (url == null) return canonicalUrl;
      t1 = $.$get$url();
      return url.resolve$1(
        X.ParsedPath_ParsedPath$parse(
          canonicalUrl.get$path(canonicalUrl),
          t1.style
        ).get$basename()
      );
    },
  };
  O.AsyncImportCache_canonicalize_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Tuple3_AsyncImporter_Uri_Uri
        ),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        t4,
        t5,
        _i,
        importer,
        canonicalUrl;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.$this),
                (t2 = t1._async_import_cache$_importers),
                (t3 = t2.length),
                (t4 = $async$self.url),
                (t5 = $async$self.forImport),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              importer = t2[_i];
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_import_cache$_canonicalize$3(importer, t4, t5),
                $async$call$0
              );
            case 6:
              // returning from await.
              canonicalUrl = $async$result;
              if (canonicalUrl != null) {
                $async$returnValue = new S.Tuple3(
                  importer,
                  canonicalUrl,
                  t4,
                  type$.Tuple3_AsyncImporter_Uri_Uri
                );
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              t2.length === t3 || (0, H.throwConcurrentModificationError)(t2),
                ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 361,
  };
  O.AsyncImportCache__canonicalize_closure.prototype = {
    call$0() {
      return this.importer.canonicalize$1(this.url);
    },
    $signature: 196,
  };
  O.AsyncImportCache_importCanonical_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Stylesheet
        ),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        t4,
        t1,
        result;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.canonicalUrl;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.importer.load$1(0, t1),
                $async$call$0
              );
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self.$this;
              t2._async_import_cache$_resultsCache.$indexSet(0, t1, result);
              t3 = result.contents;
              t4 = result.syntax;
              t1 = $async$self.originalUrl.resolveUri$1(t1);
              $async$returnValue = V.Stylesheet_Stylesheet$parse(
                t3,
                t4,
                $async$self.quiet
                  ? $.$get$Logger_quiet()
                  : t2._async_import_cache$_logger,
                t1
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 358,
  };
  O.AsyncImportCache_humanize_closure.prototype = {
    call$1(tuple) {
      return tuple.item2.$eq(0, this.canonicalUrl);
    },
    $signature: 356,
  };
  O.AsyncImportCache_humanize_closure0.prototype = {
    call$1(tuple) {
      return tuple.item3;
    },
    $signature: 354,
  };
  O.AsyncImportCache_humanize_closure1.prototype = {
    call$1(url) {
      return url.get$path(url).length;
    },
    $signature: 99,
  };
  S.AsyncBuiltInCallable.prototype = {
    callbackFor$2(positional, names) {
      return new S.Tuple2(
        this._async_built_in$_arguments,
        this._async_built_in$_callback,
        type$.Tuple2_of_ArgumentDeclaration_and_FutureOr_Value_Function_List_Value
      );
    },
    $isAsyncCallable: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  S.AsyncBuiltInCallable$mixin_closure.prototype = {
    call$1($arguments) {
      return this.$call$body$AsyncBuiltInCallable$mixin_closure($arguments);
    },
    $call$body$AsyncBuiltInCallable$mixin_closure($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.callback.call$1($arguments),
                $async$call$1
              );
            case 3:
              // returning from await.
              $async$returnValue = C.C__SassNull0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 127,
  };
  Q.BuiltInCallable.prototype = {
    callbackFor$2(positional, names) {
      var t1,
        t2,
        fuzzyMatch,
        minMismatchDistance,
        _i,
        overload,
        t3,
        mismatchDistance,
        t4;
      for (
        t1 = this._overloads,
          t2 = t1.length,
          fuzzyMatch = null,
          minMismatchDistance = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        overload = t1[_i];
        t3 = overload.item1;
        if (t3.matches$2(positional, names)) return overload;
        mismatchDistance = t3.$arguments.length - positional;
        if (minMismatchDistance != null) {
          t3 = Math.abs(mismatchDistance);
          t4 = Math.abs(minMismatchDistance);
          if (t3 > t4) continue;
          if (t3 === t4 && mismatchDistance < 0) continue;
        }
        minMismatchDistance = mismatchDistance;
        fuzzyMatch = overload;
      }
      if (fuzzyMatch != null) return fuzzyMatch;
      throw H.wrapException(
        P.StateError$(
          'BuiltInCallable ' + this.name + ' may not have empty overloads.'
        )
      );
    },
    withName$1($name) {
      return new Q.BuiltInCallable($name, this._overloads);
    },
    $isCallable: 1,
    $isAsyncCallable: 1,
    $isAsyncBuiltInCallable: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  Q.BuiltInCallable$mixin_closure.prototype = {
    call$1($arguments) {
      this.callback.call$1($arguments);
      return C.C__SassNull0;
    },
    $signature: 3,
  };
  L.PlainCssCallable.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof L.PlainCssCallable && this.name === other.name;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
    $isCallable: 1,
    $isAsyncCallable: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  E.UserDefinedCallable.prototype = {
    get$name(_) {
      return this.declaration.name;
    },
    $isCallable: 1,
    $isAsyncCallable: 1,
  };
  U._compileStylesheet_closure.prototype = {
    call$1(url) {
      var t1,
        t2,
        _null = null;
      if (url === '')
        t1 = P.Uri_Uri$dataFromString(
          P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              this.stylesheet.span.file._decodedChars,
              0,
              _null
            ),
            0,
            _null
          ),
          C.C_Utf8Codec,
          _null
        ).get$_text();
      else {
        t1 = P.Uri_parse(url);
        t2 = this.importCache._resultsCache.$index(0, t1);
        t2 = t2 == null ? _null : t2.get$sourceMapUrl();
        t1 = (t2 == null ? t1 : t2).toString$0(0);
      }
      return t1;
    },
    $signature: 5,
  };
  U.CompileResult.prototype = {};
  A.Configuration.prototype = {
    throughForward$1($forward) {
      var prefix,
        shownVariables,
        hiddenVariables,
        t1,
        newValues = this._values;
      if (newValues.get$isEmpty(newValues)) return C.Configuration_Map_empty;
      prefix = $forward.prefix;
      if (prefix != null)
        newValues = new R.UnprefixedMapView(
          newValues,
          prefix,
          type$.UnprefixedMapView_ConfiguredValue
        );
      shownVariables = $forward.shownVariables;
      hiddenVariables = $forward.hiddenVariables;
      if (shownVariables != null)
        newValues = new K.LimitedMapView(
          newValues,
          shownVariables._base.intersection$1(
            new M.MapKeySet(newValues, type$.MapKeySet_nullable_Object)
          ),
          type$.LimitedMapView_String_ConfiguredValue
        );
      else {
        if (hiddenVariables != null) {
          t1 = hiddenVariables._base;
          t1 = t1.get$isNotEmpty(t1);
        } else t1 = false;
        if (t1)
          newValues = K.LimitedMapView$blocklist(
            newValues,
            hiddenVariables,
            type$.String,
            type$.ConfiguredValue
          );
      }
      return this._withValues$1(newValues);
    },
    _withValues$1(values) {
      return new A.Configuration(values);
    },
    toString$0(_) {
      var t1 = this._values;
      return (
        '(' +
        t1
          .get$entries(t1)
          .map$1$1(0, new A.Configuration_toString_closure(), type$.String)
          .join$1(0, ', ') +
        ')'
      );
    },
  };
  A.Configuration_toString_closure.prototype = {
    call$1(entry) {
      return '$' + H.S(entry.key) + ': ' + H.S(entry.value);
    },
    $signature: 352,
  };
  A.ExplicitConfiguration.prototype = {
    _withValues$1(values) {
      return new A.ExplicitConfiguration(this.nodeWithSpan, values);
    },
  };
  Z.ConfiguredValue.prototype = {};
  O.Environment.prototype = {
    closure$0() {
      var t4,
        t5,
        t6,
        _this = this,
        t1 = _this._forwardedModules,
        t2 = _this._nestedForwardedModules,
        t3 = _this._variables;
      t3 = H._setArrayType(t3.slice(0), H._arrayInstanceType(t3));
      t4 = _this._variableNodes;
      t4 = H._setArrayType(t4.slice(0), H._arrayInstanceType(t4));
      t5 = _this._functions;
      t5 = H._setArrayType(t5.slice(0), H._arrayInstanceType(t5));
      t6 = _this._mixins;
      t6 = H._setArrayType(t6.slice(0), H._arrayInstanceType(t6));
      return O.Environment$_(
        _this._environment$_modules,
        _this._namespaceNodes,
        _this._globalModules,
        _this._importedModules,
        t1,
        t2,
        _this._allModules,
        t3,
        t4,
        t5,
        t6,
        _this._content
      );
    },
    addModule$3$namespace(module, nodeWithSpan, namespace) {
      var t1,
        t2,
        span,
        _this = this;
      if (namespace == null) {
        _this._globalModules.$indexSet(0, module, nodeWithSpan);
        _this._allModules.push(module);
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(C.JSArray_methods.get$first(_this._variables))
          );
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          if (module.get$variables().containsKey$1(t2))
            throw H.wrapException(
              E.SassScriptException$(string$.This_ma + t2 + '".')
            );
        }
      } else {
        t1 = _this._environment$_modules;
        if (t1.containsKey$1(namespace)) {
          t1 = _this._namespaceNodes.$index(0, namespace);
          span = t1 == null ? null : t1.span;
          t1 = string$.There_ + namespace + '".';
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          if (span != null) t2.$indexSet(0, span, 'original @use');
          throw H.wrapException(
            E.MultiSpanSassScriptException$(t1, 'new @use', t2)
          );
        }
        t1.$indexSet(0, namespace, module);
        _this._namespaceNodes.$indexSet(0, namespace, nodeWithSpan);
        _this._allModules.push(module);
      }
    },
    forwardModule$2(module, rule) {
      var view,
        t1,
        t2,
        _this = this,
        forwardedModules = _this._forwardedModules;
      if (forwardedModules == null)
        forwardedModules = _this._forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_Callable,
          type$.AstNode
        );
      view = R.ForwardedModuleView_ifNecessary(module, rule, type$.Callable);
      for (
        t1 = forwardedModules.get$keys(forwardedModules),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        _this._assertNoConflicts$5(
          view.get$variables(),
          t2.get$variables(),
          view,
          t2,
          'variable'
        );
        _this._assertNoConflicts$5(
          view.get$functions(view),
          t2.get$functions(t2),
          view,
          t2,
          'function'
        );
        _this._assertNoConflicts$5(
          view.get$mixins(),
          t2.get$mixins(),
          view,
          t2,
          'mixin'
        );
      }
      _this._allModules.push(module);
      forwardedModules.$indexSet(0, view, rule);
    },
    _assertNoConflicts$5(newMembers, oldMembers, newModule, oldModule, type) {
      var larger, smaller, t1, t2, $name, span;
      if (
        newMembers.get$length(newMembers) < oldMembers.get$length(oldMembers)
      ) {
        larger = oldMembers;
        smaller = newMembers;
      } else {
        larger = newMembers;
        smaller = oldMembers;
      }
      for (
        t1 = J.get$iterator$ax(smaller.get$keys(smaller)),
          t2 = type === 'variable';
        t1.moveNext$0();

      ) {
        $name = t1.get$current();
        if (!larger.containsKey$1($name)) continue;
        if (
          t2
            ? newModule.variableIdentity$1($name) ===
              oldModule.variableIdentity$1($name)
            : J.$eq$(larger.$index(0, $name), smaller.$index(0, $name))
        )
          continue;
        if (t2) $name = '$' + $name;
        t1 = this._forwardedModules;
        if (t1 == null) span = null;
        else {
          t1 = t1.$index(0, oldModule);
          span = t1 == null ? null : t1.get$span();
        }
        t1 =
          'Two forwarded modules both define a ' +
          type +
          ' named ' +
          $name +
          '.';
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(type$.FileSpan, type$.String);
        if (span != null) t2.$indexSet(0, span, 'original @forward');
        throw H.wrapException(
          E.MultiSpanSassScriptException$(t1, 'new @forward', t2)
        );
      }
    },
    importForwards$1(module) {
      var forwardedModules,
        t1,
        t2,
        t3,
        t4,
        t5,
        forwardedVariableNames,
        forwardedFunctionNames,
        forwardedMixinNames,
        _i,
        entry,
        shadowed,
        t6,
        _length,
        _list,
        _this = this,
        forwarded = module._environment$_environment._forwardedModules;
      if (forwarded == null) return;
      forwardedModules = _this._forwardedModules;
      if (forwardedModules != null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_Callable,
          type$.AstNode
        );
        for (
          t2 = forwarded.get$entries(forwarded),
            t2 = t2.get$iterator(t2),
            t3 = _this._globalModules;
          t2.moveNext$0();

        ) {
          t4 = t2.get$current();
          t5 = t4.key;
          if (!forwardedModules.containsKey$1(t5) || !t3.containsKey$1(t5))
            t1.$indexSet(0, t5, t4.value);
        }
        forwarded = t1;
      } else
        forwardedModules = _this._forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_Callable,
          type$.AstNode
        );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedVariableNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new O.Environment_importForwards_closure(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t2 = forwarded.get$keys(forwarded);
      t1 = H._instanceType(t2)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedFunctionNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t2,
          new O.Environment_importForwards_closure0(),
          t1
        ),
        t1._eval$1('Iterable.E')
      );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedMixinNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new O.Environment_importForwards_closure1(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t1 = _this._variables;
      t2 = t1.length;
      if (t2 === 1) {
        for (
          t2 = _this._importedModules,
            t3 = t2.get$entries(t2).toList$0(0),
            t4 = t3.length,
            t5 = type$.Callable,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            t2.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) t2.$indexSet(0, shadowed, entry.value);
          }
        }
        for (
          t3 = forwardedModules.get$entries(forwardedModules).toList$0(0),
            t4 = t3.length,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            forwardedModules.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) forwardedModules.$indexSet(0, shadowed, entry.value);
          }
        }
        t2.addAll$1(0, forwarded);
        forwardedModules.addAll$1(0, forwarded);
      } else {
        t3 = _this._nestedForwardedModules;
        if (t3 == null) {
          _length = t2 - 1;
          _list = J.JSArray_JSArray$allocateGrowable(
            _length,
            type$.List_Module_Callable
          );
          for (t2 = type$.JSArray_Module_Callable, _i = 0; _i < _length; ++_i)
            _list[_i] = H._setArrayType([], t2);
          _this._nestedForwardedModules = _list;
          t2 = _list;
        } else t2 = t3;
        C.JSArray_methods.addAll$1(
          C.JSArray_methods.get$last(t2),
          forwarded.get$keys(forwarded)
        );
      }
      for (
        t2 = P._LinkedHashSetIterator$(
          forwardedVariableNames,
          forwardedVariableNames._collection$_modifications
        ),
          t3 = H._instanceType(t2)._precomputed1,
          t4 = _this._variableIndices,
          t5 = _this._variableNodes;
        t2.moveNext$0();

      ) {
        t6 = t3._as(t2._collection$_current);
        t4.remove$1(0, t6);
        J.remove$1$z(C.JSArray_methods.get$last(t1), t6);
        J.remove$1$z(C.JSArray_methods.get$last(t5), t6);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedFunctionNames,
          forwardedFunctionNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._functionIndices,
          t4 = _this._functions;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedMixinNames,
          forwardedMixinNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._mixinIndices,
          t4 = _this._mixins;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
    },
    getVariable$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this._getModule$1(namespace).get$variables().$index(0, $name);
      if (_this._lastVariableName === $name) {
        t1 = _this._lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._variables[t1], $name);
        return t1 == null ? _this._getVariableFromGlobalModule$1($name) : t1;
      }
      t1 = _this._variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._lastVariableName = $name;
        _this._lastVariableIndex = index;
        t1 = J.$index$asx(_this._variables[index], $name);
        return t1 == null ? _this._getVariableFromGlobalModule$1($name) : t1;
      }
      index = _this._variableIndex$1($name);
      if (index == null) return _this._getVariableFromGlobalModule$1($name);
      _this._lastVariableName = $name;
      _this._lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._variables[index], $name);
      return t1 == null ? _this._getVariableFromGlobalModule$1($name) : t1;
    },
    getVariable$1($name) {
      return this.getVariable$2$namespace($name, null);
    },
    _getVariableFromGlobalModule$1($name) {
      return this._fromOneModule$1$3(
        $name,
        'variable',
        new O.Environment__getVariableFromGlobalModule_closure($name),
        type$.Value
      );
    },
    getVariableNode$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._getModule$1(namespace)
          .get$variableNodes()
          .$index(0, $name);
      if (_this._lastVariableName === $name) {
        t1 = _this._lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._variableNodes[t1], $name);
        return t1 == null
          ? _this._getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      t1 = _this._variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._lastVariableName = $name;
        _this._lastVariableIndex = index;
        t1 = J.$index$asx(_this._variableNodes[index], $name);
        return t1 == null
          ? _this._getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      index = _this._variableIndex$1($name);
      if (index == null) return _this._getVariableNodeFromGlobalModule$1($name);
      _this._lastVariableName = $name;
      _this._lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._variableNodes[index], $name);
      return t1 == null ? _this._getVariableNodeFromGlobalModule$1($name) : t1;
    },
    _getVariableNodeFromGlobalModule$1($name) {
      var t1, t2, value;
      for (
        t1 = this._importedModules,
          t2 = this._globalModules,
          t2 = t1.get$keys(t1).followedBy$1(0, t2.get$keys(t2)),
          t2 = new H.FollowedByIterator(
            J.get$iterator$ax(t2.__internal$_first),
            t2._second
          );
        t2.moveNext$0();

      ) {
        value = t2._currentIterator
          .get$current()
          .get$variableNodes()
          .$index(0, $name);
        if (value != null) return value;
      }
      return null;
    },
    globalVariableExists$2$namespace($name, namespace) {
      if (namespace != null)
        return this._getModule$1(namespace)
          .get$variables()
          .containsKey$1($name);
      if (C.JSArray_methods.get$first(this._variables).containsKey$1($name))
        return true;
      return this._getVariableFromGlobalModule$1($name) != null;
    },
    globalVariableExists$1($name) {
      return this.globalVariableExists$2$namespace($name, null);
    },
    _variableIndex$1($name) {
      var t1, i;
      for (t1 = this._variables, i = t1.length - 1; i >= 0; --i)
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    setVariable$5$global$namespace(
      $name,
      value,
      nodeWithSpan,
      global,
      namespace
    ) {
      var t1,
        moduleWithName,
        nestedForwardedModules,
        t2,
        t3,
        t4,
        t5,
        index,
        _this = this;
      if (namespace != null) {
        _this._getModule$1(namespace).setVariable$3($name, value, nodeWithSpan);
        return;
      }
      if (global || _this._variables.length === 1) {
        _this._variableIndices.putIfAbsent$2(
          $name,
          new O.Environment_setVariable_closure(_this, $name)
        );
        t1 = _this._variables;
        if (!C.JSArray_methods.get$first(t1).containsKey$1($name)) {
          moduleWithName = _this._fromOneModule$1$3(
            $name,
            'variable',
            new O.Environment_setVariable_closure0($name),
            type$.Module_Callable
          );
          if (moduleWithName != null) {
            moduleWithName.setVariable$3($name, value, nodeWithSpan);
            return;
          }
        }
        J.$indexSet$ax(C.JSArray_methods.get$first(t1), $name, value);
        J.$indexSet$ax(
          C.JSArray_methods.get$first(_this._variableNodes),
          $name,
          nodeWithSpan
        );
        return;
      }
      nestedForwardedModules = _this._nestedForwardedModules;
      if (
        nestedForwardedModules != null &&
        !_this._variableIndices.containsKey$1($name) &&
        _this._variableIndex$1($name) == null
      )
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H.instanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            t5 = t4._as(t3.__internal$_current);
            if (t5.get$variables().containsKey$1($name)) {
              t5.setVariable$3($name, value, nodeWithSpan);
              return;
            }
          }
      if (_this._lastVariableName === $name) {
        t1 = _this._lastVariableIndex;
        t1.toString;
        index = t1;
      } else
        index = _this._variableIndices.putIfAbsent$2(
          $name,
          new O.Environment_setVariable_closure1(_this, $name)
        );
      if (!_this._inSemiGlobalScope && index === 0) {
        index = _this._variables.length - 1;
        _this._variableIndices.$indexSet(0, $name, index);
      }
      _this._lastVariableName = $name;
      _this._lastVariableIndex = index;
      J.$indexSet$ax(_this._variables[index], $name, value);
      J.$indexSet$ax(_this._variableNodes[index], $name, nodeWithSpan);
    },
    setVariable$4$global($name, value, nodeWithSpan, global) {
      return this.setVariable$5$global$namespace(
        $name,
        value,
        nodeWithSpan,
        global,
        null
      );
    },
    setLocalVariable$3($name, value, nodeWithSpan) {
      var index,
        _this = this,
        t1 = _this._variables,
        t2 = t1.length;
      _this._lastVariableName = $name;
      index = _this._lastVariableIndex = t2 - 1;
      _this._variableIndices.$indexSet(0, $name, index);
      J.$indexSet$ax(t1[index], $name, value);
      J.$indexSet$ax(_this._variableNodes[index], $name, nodeWithSpan);
    },
    getFunction$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null) {
        t1 = _this._getModule$1(namespace);
        return t1.get$functions(t1).$index(0, $name);
      }
      t1 = _this._functionIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._functions[index], $name);
        return t1 == null ? _this._getFunctionFromGlobalModule$1($name) : t1;
      }
      index = _this._functionIndex$1($name);
      if (index == null) return _this._getFunctionFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._functions[index], $name);
      return t1 == null ? _this._getFunctionFromGlobalModule$1($name) : t1;
    },
    _getFunctionFromGlobalModule$1($name) {
      return this._fromOneModule$1$3(
        $name,
        'function',
        new O.Environment__getFunctionFromGlobalModule_closure($name),
        type$.Callable
      );
    },
    _functionIndex$1($name) {
      var t1, i;
      for (t1 = this._functions, i = t1.length - 1; i >= 0; --i)
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    getMixin$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this._getModule$1(namespace).get$mixins().$index(0, $name);
      t1 = _this._mixinIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._mixins[index], $name);
        return t1 == null ? _this._getMixinFromGlobalModule$1($name) : t1;
      }
      index = _this._mixinIndex$1($name);
      if (index == null) return _this._getMixinFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._mixins[index], $name);
      return t1 == null ? _this._getMixinFromGlobalModule$1($name) : t1;
    },
    _getMixinFromGlobalModule$1($name) {
      return this._fromOneModule$1$3(
        $name,
        'mixin',
        new O.Environment__getMixinFromGlobalModule_closure($name),
        type$.Callable
      );
    },
    _mixinIndex$1($name) {
      var t1, i;
      for (t1 = this._mixins, i = t1.length - 1; i >= 0; --i)
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    scope$1$3$semiGlobal$when(callback, semiGlobal, when) {
      var wasInSemiGlobalScope,
        $name,
        name0,
        name1,
        t1,
        t2,
        t3,
        t4,
        t5,
        _this = this;
      semiGlobal = semiGlobal && _this._inSemiGlobalScope;
      wasInSemiGlobalScope = _this._inSemiGlobalScope;
      _this._inSemiGlobalScope = semiGlobal;
      if (!when)
        try {
          t1 = callback.call$0();
          return t1;
        } finally {
          _this._inSemiGlobalScope = wasInSemiGlobalScope;
        }
      t1 = _this._variables;
      t2 = type$.String;
      C.JSArray_methods.add$1(
        t1,
        P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Value)
      );
      C.JSArray_methods.add$1(
        _this._variableNodes,
        P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.AstNode)
      );
      t3 = _this._functions;
      t4 = type$.Callable;
      C.JSArray_methods.add$1(t3, P.LinkedHashMap_LinkedHashMap$_empty(t2, t4));
      t5 = _this._mixins;
      C.JSArray_methods.add$1(t5, P.LinkedHashMap_LinkedHashMap$_empty(t2, t4));
      t4 = _this._nestedForwardedModules;
      if (t4 != null)
        t4.push(H._setArrayType([], type$.JSArray_Module_Callable));
      try {
        t2 = callback.call$0();
        return t2;
      } finally {
        _this._inSemiGlobalScope = wasInSemiGlobalScope;
        _this._lastVariableIndex = _this._lastVariableName = null;
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(C.JSArray_methods.removeLast$0(t1))
          ),
            t2 = _this._variableIndices;
          t1.moveNext$0();

        ) {
          $name = t1.get$current();
          t2.remove$1(0, $name);
        }
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(C.JSArray_methods.removeLast$0(t3))
          ),
            t2 = _this._functionIndices;
          t1.moveNext$0();

        ) {
          name0 = t1.get$current();
          t2.remove$1(0, name0);
        }
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(C.JSArray_methods.removeLast$0(t5))
          ),
            t2 = _this._mixinIndices;
          t1.moveNext$0();

        ) {
          name1 = t1.get$current();
          t2.remove$1(0, name1);
        }
        t1 = _this._nestedForwardedModules;
        if (t1 != null) t1.pop();
      }
    },
    scope$1$1(callback, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, true, $T);
    },
    scope$1$2$when(callback, when, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, when, $T);
    },
    scope$1$2$semiGlobal(callback, semiGlobal, $T) {
      return this.scope$1$3$semiGlobal$when(callback, semiGlobal, true, $T);
    },
    toImplicitConfiguration$0() {
      var t1,
        t2,
        i,
        values,
        nodes,
        t3,
        t4,
        t5,
        t6,
        configuration = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.ConfiguredValue
        );
      for (
        t1 = this._variables, t2 = this._variableNodes, i = 0;
        i < t1.length;
        ++i
      ) {
        values = t1[i];
        nodes = t2[i];
        for (
          t3 = values.get$entries(values), t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t5 = t4.key;
          t4 = t4.value;
          t6 = nodes.$index(0, t5);
          t6.toString;
          configuration.$indexSet(0, t5, new Z.ConfiguredValue(t4, null, t6));
        }
      }
      return new A.Configuration(configuration);
    },
    toModule$2(css, extensionStore) {
      return O._EnvironmentModule__EnvironmentModule(
        this,
        css,
        extensionStore,
        X.NullableExtension_andThen(
          this._forwardedModules,
          new O.Environment_toModule_closure()
        )
      );
    },
    toDummyModule$0() {
      return O._EnvironmentModule__EnvironmentModule(
        this,
        new V.CssStylesheet(
          new P.UnmodifiableListView(
            C.List_empty0,
            type$.UnmodifiableListView_CssNode
          ),
          Y.SourceFile$decoded(C.List_empty1, '<dummy module>').span$1(0)
        ),
        C.C_EmptyExtensionStore,
        X.NullableExtension_andThen(
          this._forwardedModules,
          new O.Environment_toDummyModule_closure()
        )
      );
    },
    _getModule$1(namespace) {
      var module = this._environment$_modules.$index(0, namespace);
      if (module != null) return module;
      throw H.wrapException(
        E.SassScriptException$(
          'There is no module with the namespace "' + namespace + '".'
        )
      );
    },
    _fromOneModule$1$3($name, type, callback, $T) {
      var t1,
        t2,
        t3,
        t4,
        value,
        identity,
        valueInModule,
        identityFromModule,
        spans,
        t5,
        nestedForwardedModules = this._nestedForwardedModules;
      if (nestedForwardedModules != null)
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H._arrayInstanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            value = callback.call$1(t4._as(t3.__internal$_current));
            if (value != null) return value;
          }
      for (
        t1 = this._importedModules,
          t1 = t1.get$keys(t1),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        value = callback.call$1(t1.get$current());
        if (value != null) return value;
      }
      for (
        t1 = this._globalModules,
          t2 = t1.get$keys(t1),
          t2 = t2.get$iterator(t2),
          t3 = type$.Callable,
          value = null,
          identity = null;
        t2.moveNext$0();

      ) {
        t4 = t2.get$current();
        valueInModule = callback.call$1(t4);
        if (valueInModule == null) continue;
        identityFromModule = t3._is(valueInModule)
          ? valueInModule
          : t4.variableIdentity$1($name);
        if (identityFromModule.$eq(0, identity)) continue;
        if (value != null) {
          spans = t1
            .get$entries(t1)
            .map$1$1(
              0,
              new O.Environment__fromOneModule_closure(callback, $T),
              type$.nullable_FileSpan
            );
          t2 = 'This ' + type + string$.x20is_av;
          t3 = type + ' use';
          t4 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          for (t1 = spans.get$iterator(spans); t1.moveNext$0(); ) {
            t5 = t1.get$current();
            if (t5 != null) t4.$indexSet(0, t5, 'includes ' + type);
          }
          throw H.wrapException(E.MultiSpanSassScriptException$(t2, t3, t4));
        }
        identity = identityFromModule;
        value = valueInModule;
      }
      return value;
    },
  };
  O.Environment_importForwards_closure.prototype = {
    call$1(module) {
      var t1 = module.get$variables();
      return t1.get$keys(t1);
    },
    $signature: 110,
  };
  O.Environment_importForwards_closure0.prototype = {
    call$1(module) {
      var t1 = module.get$functions(module);
      return t1.get$keys(t1);
    },
    $signature: 110,
  };
  O.Environment_importForwards_closure1.prototype = {
    call$1(module) {
      var t1 = module.get$mixins();
      return t1.get$keys(t1);
    },
    $signature: 110,
  };
  O.Environment__getVariableFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$variables().$index(0, this.name);
    },
    $signature: 349,
  };
  O.Environment_setVariable_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._lastVariableName = this.name;
      return (t1._lastVariableIndex = 0);
    },
    $signature: 18,
  };
  O.Environment_setVariable_closure0.prototype = {
    call$1(module) {
      return module.get$variables().containsKey$1(this.name) ? module : null;
    },
    $signature: 348,
  };
  O.Environment_setVariable_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._variableIndex$1(this.name);
      return t2 == null ? t1._variables.length - 1 : t2;
    },
    $signature: 18,
  };
  O.Environment__getFunctionFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$functions(module).$index(0, this.name);
    },
    $signature: 171,
  };
  O.Environment__getMixinFromGlobalModule_closure.prototype = {
    call$1(module) {
      return module.get$mixins().$index(0, this.name);
    },
    $signature: 171,
  };
  O.Environment_toModule_closure.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_Callable);
    },
    $signature: 138,
  };
  O.Environment_toDummyModule_closure.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_Callable);
    },
    $signature: 138,
  };
  O.Environment__fromOneModule_closure.prototype = {
    call$1(entry) {
      return X.NullableExtension_andThen(
        this.callback.call$1(entry.key),
        new O.Environment__fromOneModule__closure(entry, this.T)
      );
    },
    $signature: 347,
  };
  O.Environment__fromOneModule__closure.prototype = {
    call$1(_) {
      return this.entry.value.get$span();
    },
    $signature() {
      return this.T._eval$1('FileSpan(0)');
    },
  };
  O._EnvironmentModule.prototype = {
    get$url() {
      return this.css.get$span().file.url;
    },
    setVariable$3($name, value, nodeWithSpan) {
      var t1,
        t2,
        module = this._modulesByVariable.$index(0, $name);
      if (module != null) {
        module.setVariable$3($name, value, nodeWithSpan);
        return;
      }
      t1 = this._environment$_environment;
      t2 = t1._variables;
      if (!C.JSArray_methods.get$first(t2).containsKey$1($name))
        throw H.wrapException(E.SassScriptException$('Undefined variable.'));
      J.$indexSet$ax(C.JSArray_methods.get$first(t2), $name, value);
      J.$indexSet$ax(
        C.JSArray_methods.get$first(t1._variableNodes),
        $name,
        nodeWithSpan
      );
      return;
    },
    variableIdentity$1($name) {
      var module = this._modulesByVariable.$index(0, $name);
      return module == null ? this : module.variableIdentity$1($name);
    },
    cloneCss$0() {
      var newCssAndExtensionStore,
        _this = this,
        t1 = _this.css;
      if (J.get$isEmpty$asx(t1.get$children(t1))) return _this;
      newCssAndExtensionStore = V.cloneCssStylesheet(t1, _this.extensionStore);
      return O._EnvironmentModule$_(
        _this._environment$_environment,
        newCssAndExtensionStore.item1,
        newCssAndExtensionStore.item2,
        _this._modulesByVariable,
        _this.variables,
        _this.variableNodes,
        _this.functions,
        _this.mixins,
        _this.transitivelyContainsCss,
        _this.transitivelyContainsExtensions
      );
    },
    toString$0(_) {
      var t1 = this.css;
      if (t1.get$span().file.url == null) t1 = '<unknown url>';
      else {
        t1 = t1.get$span();
        t1 = $.$get$context().prettyUri$1(t1.file.url);
      }
      return t1;
    },
    $isModule: 1,
    get$upstream() {
      return this.upstream;
    },
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$extensionStore() {
      return this.extensionStore;
    },
    get$css(receiver) {
      return this.css;
    },
    get$transitivelyContainsCss() {
      return this.transitivelyContainsCss;
    },
    get$transitivelyContainsExtensions() {
      return this.transitivelyContainsExtensions;
    },
  };
  O._EnvironmentModule__EnvironmentModule_closure.prototype = {
    call$1(module) {
      return module.get$variables();
    },
    $signature: 346,
  };
  O._EnvironmentModule__EnvironmentModule_closure0.prototype = {
    call$1(module) {
      return module.get$variableNodes();
    },
    $signature: 345,
  };
  O._EnvironmentModule__EnvironmentModule_closure1.prototype = {
    call$1(module) {
      return module.get$functions(module);
    },
    $signature: 143,
  };
  O._EnvironmentModule__EnvironmentModule_closure2.prototype = {
    call$1(module) {
      return module.get$mixins();
    },
    $signature: 143,
  };
  O._EnvironmentModule__EnvironmentModule_closure3.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 101,
  };
  O._EnvironmentModule__EnvironmentModule_closure4.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsExtensions();
    },
    $signature: 101,
  };
  E.SassException.prototype = {
    get$trace(_) {
      return Y.Trace$(
        H._setArrayType(
          [
            B.frameForSpan(
              G.SourceSpanException.prototype.get$span.call(this),
              'root stylesheet',
              null
            ),
          ],
          type$.JSArray_Frame
        ),
        null
      );
    },
    get$span() {
      return G.SourceSpanException.prototype.get$span.call(this);
    },
    toString$1$color(_, color) {
      var t2,
        _i,
        frame,
        t3,
        _this = this,
        buffer = new P.StringBuffer(''),
        t1 = '' + ('Error: ' + _this._span_exception$_message + '\n');
      buffer._contents = t1;
      buffer._contents =
        t1 +
        G.SourceSpanException.prototype.get$span
          .call(_this)
          .highlight$1$color(color);
      for (
        t1 = _this.get$trace(_this).toString$0(0).split('\n'),
          t2 = t1.length,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        frame = t1[_i];
        if (J.get$length$asx(frame) === 0) continue;
        t3 = buffer._contents += '\n';
        buffer._contents = t3 + ('  ' + H.S(frame));
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    },
    toCssString$0() {
      var commentMessage,
        stringMessage,
        rune,
        t1 = $._glyphs,
        t2 = ($._glyphs = C.C_AsciiGlyphSet),
        t3 = this.toString$1$color(0, false);
      t3 = H.stringReplaceAllUnchecked(t3, '*/', '*\u2215');
      commentMessage = H.stringReplaceAllUnchecked(t3, '\r\n', '\n');
      $._glyphs = t1 === C.C_AsciiGlyphSet ? t2 : C.C_UnicodeGlyphSet;
      stringMessage = new P.StringBuffer('');
      for (
        t1 = new P.RuneIterator(
          N.serializeValue0(
            new D.SassString(this.toString$1$color(0, false), true),
            true,
            true
          )
        );
        t1.moveNext$0();

      ) {
        rune = t1._currentCodePoint;
        t2 = stringMessage._contents;
        if (rune > 255) {
          stringMessage._contents = t2 + H.Primitives_stringFromCharCode(92);
          t2 = stringMessage._contents += C.JSInt_methods.toRadixString$1(
            rune,
            16
          );
          t2 = stringMessage._contents =
            t2 + H.Primitives_stringFromCharCode(32);
        } else
          t2 = stringMessage._contents =
            t2 + H.Primitives_stringFromCharCode(rune);
      }
      return (
        '/* ' +
        C.JSArray_methods.join$1(
          H._setArrayType(commentMessage.split('\n'), type$.JSArray_String),
          '\n * '
        ) +
        ' */\n\nbody::before {\n  font-family: "Source Code Pro", "SF Mono", Monaco, Inconsolata, "Fira Mono",\n      "Droid Sans Mono", monospace, monospace;\n  white-space: pre;\n  display: block;\n  padding: 1em;\n  margin-bottom: 1em;\n  border-bottom: 2px solid black;\n  content: ' +
        stringMessage.toString$0(0) +
        ';\n}'
      );
    },
  };
  E.MultiSpanSassException.prototype = {
    toString$1$color(_, color) {
      var t1,
        t2,
        _i,
        frame,
        _this = this,
        useColor = color === true && true,
        buffer = new P.StringBuffer(
          'Error: ' + _this._span_exception$_message + '\n'
        );
      X.NullableExtension_andThen(
        U.Highlighter$multiple(
          G.SourceSpanException.prototype.get$span.call(_this),
          _this.primaryLabel,
          _this.secondarySpans,
          useColor,
          null,
          null
        ).highlight$0(),
        buffer.get$write(buffer)
      );
      for (
        t1 = _this.get$trace(_this).toString$0(0).split('\n'),
          t2 = t1.length,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        frame = t1[_i];
        if (J.get$length$asx(frame) === 0) continue;
        buffer._contents += '\n';
        buffer._contents += '  ' + H.S(frame);
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    },
  };
  E.SassRuntimeException.prototype = {
    get$trace(receiver) {
      return this.trace;
    },
  };
  E.MultiSpanSassRuntimeException.prototype = {
    $isSassRuntimeException: 1,
    get$trace(receiver) {
      return this.trace;
    },
  };
  E.SassFormatException.prototype = {
    get$source() {
      return P.String_String$fromCharCodes(
        C.NativeUint32List_methods.sublist$2(
          G.SourceSpanException.prototype.get$span.call(this).file
            ._decodedChars,
          0,
          null
        ),
        0,
        null
      );
    },
    $isFormatException: 1,
    $isSourceSpanFormatException: 1,
  };
  E.SassScriptException.prototype = {
    toString$0(_) {
      return this.message + string$.x0a_BUG_;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  E.MultiSpanSassScriptException.prototype = {};
  D._writeSourceMap_closure.prototype = {
    call$1(url) {
      return this.options
        .sourceMapUrl$2(P.Uri_parse(url), this.destination)
        .toString$0(0);
    },
    $signature: 5,
  };
  B.ExecutableOptions.prototype = {
    get$interactive() {
      var _this = this,
        t1 = _this.__ExecutableOptions_interactive;
      if (t1 == null) {
        t1 = new B.ExecutableOptions_interactive_closure(_this).call$0();
        if (_this.__ExecutableOptions_interactive == null)
          _this.__ExecutableOptions_interactive = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('interactive'));
      }
      return t1;
    },
    get$color() {
      var t1 = this._options;
      return t1.wasParsed$1('color')
        ? H._asBool(t1.$index(0, 'color'))
        : J.$eq$(self.process.stdout.isTTY, true);
    },
    get$emitErrorCss() {
      var t1 = H._asBoolQ(this._options.$index(0, 'error-css'));
      if (t1 == null) {
        this._ensureSources$0();
        t1 = this._sourcesToDestinations;
        t1 = t1
          .get$values(t1)
          .any$1(0, new B.ExecutableOptions_emitErrorCss_closure());
      }
      return t1;
    },
    set$_sourceDirectoriesToDestinations(t1) {
      if (this.__ExecutableOptions__sourceDirectoriesToDestinations == null)
        this.__ExecutableOptions__sourceDirectoriesToDestinations = t1;
      else
        throw H.wrapException(
          new H.LateError(
            "Field '_sourceDirectoriesToDestinations' has already been initialized."
          )
        );
    },
    _ensureSources$0() {
      var t1,
        stdin,
        t2,
        t3,
        $directories,
        t4,
        t5,
        colonArgs,
        positionalArgs,
        t6,
        t7,
        t8,
        message,
        target,
        source,
        destination,
        seen,
        sourceAndDestination,
        _this = this,
        _null = null,
        _s18_ = 'Duplicate source "';
      if (_this._sourcesToDestinations != null) return;
      t1 = _this._options;
      stdin = H._asBool(t1.$index(0, 'stdin'));
      t2 = t1.rest;
      if (t2.get$length(t2) === 0 && !stdin)
        B.ExecutableOptions__fail('Compile Sass to CSS.');
      t3 = type$.String;
      $directories = P.LinkedHashSet_LinkedHashSet$_empty(t3);
      for (
        t4 = new H.ListIterator(t2, t2.get$length(t2)),
          t5 = H._instanceType(t4)._precomputed1,
          colonArgs = false,
          positionalArgs = false;
        t4.moveNext$0();

      ) {
        t6 = t5._as(t4.__internal$_current);
        t7 = t6.length;
        if (t7 === 0) B.ExecutableOptions__fail('Invalid argument "".');
        if (H.stringContainsUnchecked(t6, ':', 0)) {
          if (t7 > 2) {
            t8 = C.JSString_methods._codeUnitAt$1(t6, 0);
            if (!(t8 >= 97 && t8 <= 122)) t8 = t8 >= 65 && t8 <= 90;
            else t8 = true;
            t8 = t8 && C.JSString_methods._codeUnitAt$1(t6, 1) === 58;
          } else t8 = false;
          if (t8) {
            if (2 > t7)
              H.throwExpression(P.RangeError$range(2, 0, t7, _null, _null));
            t7 = H.stringContainsUnchecked(t6, ':', 2);
          } else t7 = true;
        } else t7 = false;
        if (t7) colonArgs = true;
        else if (B.dirExists(t6)) $directories.add$1(0, t6);
        else positionalArgs = true;
      }
      if (positionalArgs || t2.get$length(t2) === 0) {
        if (colonArgs)
          B.ExecutableOptions__fail(
            'Positional and ":" arguments may not both be used.'
          );
        else if (stdin) {
          if (J.get$length$asx(t2._collection$_source) > 1)
            B.ExecutableOptions__fail(
              'Only one argument is allowed with --stdin.'
            );
          else if (H._asBool(t1.$index(0, 'update')))
            B.ExecutableOptions__fail('--update is not allowed with --stdin.');
          t1 = t2.get$length(t2) === 0 ? _null : t2.get$first(t2);
          t2 = type$.dynamic;
          t3 = type$.nullable_String;
          _this._sourcesToDestinations = H.ConstantMap_ConstantMap$from(
            P.LinkedHashMap_LinkedHashMap$_literal([null, t1], t2, t2),
            t3,
            t3
          );
        } else {
          t3 = t2._collection$_source;
          t4 = J.getInterceptor$asx(t3);
          if (t4.get$length(t3) > 2)
            B.ExecutableOptions__fail(
              'Only two positional args may be passed.'
            );
          else if ($directories._collection$_length !== 0) {
            message =
              'Directory "' +
              H.S($directories.get$first($directories)) +
              '" may not be a positional arg.';
            target = t2.get$last(t2);
            B.ExecutableOptions__fail(
              J.$eq$($directories.get$first($directories), t2.get$first(t2)) &&
                !B.fileExists(target)
                ? message +
                    ('\nTo compile all CSS in "' +
                      H.S($directories.get$first($directories)) +
                      '" to "' +
                      target +
                      '", use `sass ' +
                      H.S($directories.get$first($directories)) +
                      ':' +
                      target +
                      '`.')
                : message
            );
          } else {
            source = J.$eq$(t2.get$first(t2), '-') ? _null : t2.get$first(t2);
            destination = t4.get$length(t3) === 1 ? _null : t2.get$last(t2);
            if (destination == null)
              if (H._asBool(t1.$index(0, 'update')))
                B.ExecutableOptions__fail(
                  '--update is not allowed when printing to stdout.'
                );
            t1 = K.PathMap__create(_null, type$.nullable_String);
            t1.$indexSet(0, source, destination);
            _this._sourcesToDestinations = new P.UnmodifiableMapView(
              new K.PathMap(t1, type$.PathMap_nullable_String),
              type$.UnmodifiableMapView_of_nullable_String_and_nullable_String
            );
          }
        }
        _this.set$_sourceDirectoriesToDestinations(C.Map_empty4);
        return;
      }
      if (stdin)
        B.ExecutableOptions__fail(
          '--stdin may not be used with ":" arguments.'
        );
      seen = P.LinkedHashSet_LinkedHashSet$_empty(t3);
      t1 = K.PathMap__create(_null, t3);
      t4 = type$.PathMap_String;
      t3 = K.PathMap__create(_null, t3);
      for (
        t2 = new H.ListIterator(t2, t2.get$length(t2)),
          t5 = H._instanceType(t2)._precomputed1;
        t2.moveNext$0();

      ) {
        t6 = t5._as(t2.__internal$_current);
        if ($directories.contains$1(0, t6)) {
          if (!seen.add$1(0, t6)) B.ExecutableOptions__fail(_s18_ + t6 + '".');
          t3.$indexSet(0, t6, t6);
          t1.addAll$1(0, _this._listSourceDirectory$2(t6, t6));
          continue;
        }
        sourceAndDestination = _this._splitSourceAndDestination$1(t6);
        source = sourceAndDestination.item1;
        destination = sourceAndDestination.item2;
        if (!seen.add$1(0, source))
          B.ExecutableOptions__fail(_s18_ + source + '".');
        if (source === '-') t1.$indexSet(0, _null, destination);
        else if (B.dirExists(source)) {
          t3.$indexSet(0, source, destination);
          t1.addAll$1(0, _this._listSourceDirectory$2(source, destination));
        } else t1.$indexSet(0, source, destination);
      }
      _this._sourcesToDestinations = new P.UnmodifiableMapView(
        new K.PathMap(t1, t4),
        type$.UnmodifiableMapView_of_nullable_String_and_nullable_String
      );
      _this.set$_sourceDirectoriesToDestinations(
        new P.UnmodifiableMapView(
          new K.PathMap(t3, t4),
          type$.UnmodifiableMapView_of_nullable_String_and_String
        )
      );
    },
    _splitSourceAndDestination$1(argument) {
      var t1, i, t2, t3, nextColon;
      for (t1 = argument.length, i = 0; i < t1; ++i) {
        if (i === 1) {
          t2 = i - 1;
          if (t1 > t2 + 2) {
            t3 = C.JSString_methods.codeUnitAt$1(argument, t2);
            if (!(t3 >= 97 && t3 <= 122)) t3 = t3 >= 65 && t3 <= 90;
            else t3 = true;
            t2 = t3 && C.JSString_methods.codeUnitAt$1(argument, t2 + 1) === 58;
          } else t2 = false;
        } else t2 = false;
        if (t2) continue;
        if (C.JSString_methods._codeUnitAt$1(argument, i) === 58) {
          t2 = i + 1;
          nextColon = C.JSString_methods.indexOf$2(argument, ':', t2);
          if (nextColon === i + 2)
            if (t1 > t2 + 2) {
              t1 = C.JSString_methods._codeUnitAt$1(argument, t2);
              if (!(t1 >= 97 && t1 <= 122)) t1 = t1 >= 65 && t1 <= 90;
              else t1 = true;
              t1 =
                t1 && C.JSString_methods._codeUnitAt$1(argument, t2 + 1) === 58;
            } else t1 = false;
          else t1 = false;
          if (
            (t1
              ? C.JSString_methods.indexOf$2(argument, ':', nextColon + 1)
              : nextColon) !== -1
          )
            B.ExecutableOptions__fail(
              '"' + argument + '" may only contain one ":".'
            );
          return new S.Tuple2(
            C.JSString_methods.substring$2(argument, 0, i),
            C.JSString_methods.substring$1(argument, t2),
            type$.Tuple2_String_String
          );
        }
      }
      throw H.wrapException(
        P.ArgumentError$(
          'Expected "' + argument + '" to contain a colon.',
          null
        )
      );
    },
    _listSourceDirectory$2(source, destination) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        parts,
        t1 = type$.String;
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t2 = J.get$iterator$ax(B.listDir(source, true)),
          t3 = source === destination,
          t4 = type$.JSArray_nullable_String,
          t5 = type$.WhereTypeIterable_String;
        t2.moveNext$0();

      ) {
        t6 = t2.get$current();
        if (this._isEntrypoint$1(t6))
          t7 = !(
            t3 &&
            X.ParsedPath_ParsedPath$parse(
              t6,
              $.$get$context().style
            )._splitExtension$1(1)[1] === '.css'
          );
        else t7 = false;
        if (t7) {
          t7 = $.$get$context();
          parts = H._setArrayType(
            [
              destination,
              t7.withoutExtension$1(t7.relative$2$from(t6, source)) + '.css',
              null,
              null,
              null,
              null,
              null,
              null,
            ],
            t4
          );
          M._validateArgList('join', parts);
          t1.$indexSet(0, t6, t7.joinAll$1(new H.WhereTypeIterable(parts, t5)));
        }
      }
      return t1;
    },
    _isEntrypoint$1(path) {
      var extension,
        t1 = $.$get$context().style;
      if (
        C.JSString_methods.startsWith$1(
          X.ParsedPath_ParsedPath$parse(path, t1).get$basename(),
          '_'
        )
      )
        return false;
      extension = X.ParsedPath_ParsedPath$parse(path, t1)._splitExtension$1(
        1
      )[1];
      return (
        extension === '.scss' || extension === '.sass' || extension === '.css'
      );
    },
    get$_writeToStdout() {
      var t1,
        _this = this;
      _this._ensureSources$0();
      t1 = _this._sourcesToDestinations;
      if (t1.get$length(t1) === 1) {
        _this._ensureSources$0();
        t1 = _this._sourcesToDestinations;
        t1 = t1.get$values(t1);
        t1 = t1.get$single(t1) == null;
      } else t1 = false;
      return t1;
    },
    get$emitSourceMap() {
      var _this = this,
        _s10_ = 'source-map',
        _s15_ = 'source-map-urls',
        _s13_ = 'embed-sources',
        _s16_ = 'embed-source-map',
        t1 = _this._options;
      if (!H._asBool(t1.$index(0, _s10_)))
        if (t1.wasParsed$1(_s15_))
          B.ExecutableOptions__fail(
            "--source-map-urls isn't allowed with --no-source-map."
          );
        else if (t1.wasParsed$1(_s13_))
          B.ExecutableOptions__fail(
            "--embed-sources isn't allowed with --no-source-map."
          );
        else if (t1.wasParsed$1(_s16_))
          B.ExecutableOptions__fail(
            "--embed-source-map isn't allowed with --no-source-map."
          );
      if (!_this.get$_writeToStdout()) return H._asBool(t1.$index(0, _s10_));
      if (J.$eq$(_this._ifParsed$1(_s15_), 'relative'))
        B.ExecutableOptions__fail(
          "--source-map-urls=relative isn't allowed when printing to stdout."
        );
      if (H._asBool(t1.$index(0, _s16_))) return H._asBool(t1.$index(0, _s10_));
      else if (J.$eq$(_this._ifParsed$1(_s10_), true))
        B.ExecutableOptions__fail(
          'When printing to stdout, --source-map requires --embed-source-map.'
        );
      else if (t1.wasParsed$1(_s15_))
        B.ExecutableOptions__fail(
          'When printing to stdout, --source-map-urls requires --embed-source-map.'
        );
      else if (H._asBool(t1.$index(0, _s13_)))
        B.ExecutableOptions__fail(
          'When printing to stdout, --embed-sources requires --embed-source-map.'
        );
      else return false;
    },
    sourceMapUrl$2(url, destination) {
      var t1,
        path,
        t2,
        _null = null;
      if (url.get$scheme().length !== 0 && url.get$scheme() !== 'file')
        return url;
      t1 = $.$get$context();
      path = t1.style.pathFromUri$1(M._parseUri(url));
      if (
        J.$eq$(this._options.$index(0, 'source-map-urls'), 'relative') &&
        !this.get$_writeToStdout()
      ) {
        destination.toString;
        t2 = t1.relative$2$from(path, t1.dirname$1(destination));
      } else t2 = t1.absolute$7(path, _null, _null, _null, _null, _null, _null);
      return t1.toUri$1(t2);
    },
    _ifParsed$1($name) {
      var t1 = this._options;
      return t1.wasParsed$1($name) ? t1.$index(0, $name) : null;
    },
  };
  B.ExecutableOptions__parser_closure.prototype = {
    call$0() {
      var t1 = type$.String,
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Option),
        t3 = [],
        parser = new N.ArgParser(
          t2,
          P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
          new P.UnmodifiableMapView(
            t2,
            type$.UnmodifiableMapView_String_Option
          ),
          new P.UnmodifiableMapView(
            P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.ArgParser),
            type$.UnmodifiableMapView_String_ArgParser
          ),
          t3,
          true,
          null
        );
      parser.addOption$2$hide('precision', true);
      parser.addFlag$2$hide('async', true);
      t3.push(B.ExecutableOptions__separator('Input and Output'));
      parser.addFlag$2$help('stdin', 'Read the stylesheet from stdin.');
      parser.addFlag$2$help(
        'indented',
        'Use the indented syntax for input from stdin.'
      );
      parser.addMultiOption$5$abbr$help$splitCommas$valueHelp(
        'load-path',
        'I',
        'A path to use when resolving imports.\nMay be passed multiple times.',
        false,
        'PATH'
      );
      t1 = type$.JSArray_String;
      parser.addOption$6$abbr$allowed$defaultsTo$help$valueHelp(
        'style',
        's',
        H._setArrayType(['expanded', 'compressed'], t1),
        'expanded',
        'Output style.',
        'NAME'
      );
      parser.addFlag$3$defaultsTo$help(
        'charset',
        true,
        'Emit a @charset or BOM for CSS with non-ASCII characters.'
      );
      parser.addFlag$3$defaultsTo$help(
        'error-css',
        null,
        'When an error occurs, emit a stylesheet describing it.\nDefaults to true when compiling to a file.'
      );
      parser.addFlag$3$help$negatable(
        'update',
        'Only compile out-of-date stylesheets.',
        false
      );
      t3.push(B.ExecutableOptions__separator('Source Maps'));
      parser.addFlag$3$defaultsTo$help(
        'source-map',
        true,
        'Whether to generate source maps.'
      );
      parser.addOption$4$allowed$defaultsTo$help(
        'source-map-urls',
        H._setArrayType(['relative', 'absolute'], t1),
        'relative',
        'How to link from source maps to source files.'
      );
      parser.addFlag$3$defaultsTo$help(
        'embed-sources',
        false,
        'Embed source file contents in source maps.'
      );
      parser.addFlag$3$defaultsTo$help(
        'embed-source-map',
        false,
        'Embed source map contents in CSS.'
      );
      t3.push(B.ExecutableOptions__separator('Other'));
      parser.addFlag$2$help(
        'stop-on-error',
        "Don't compile more files once an error is encountered."
      );
      parser.addFlag$4$abbr$help$negatable(
        'interactive',
        'i',
        'Run an interactive SassScript shell.',
        false
      );
      parser.addFlag$3$abbr$help(
        'color',
        'c',
        'Whether to use terminal colors for messages.'
      );
      parser.addFlag$2$help(
        'unicode',
        'Whether to use Unicode characters for messages.'
      );
      parser.addFlag$3$abbr$help('quiet', 'q', "Don't print warnings.");
      parser.addFlag$2$help(
        'quiet-deps',
        "Don't print compiler warnings from dependencies.\nStylesheets imported through load paths count as dependencies."
      );
      parser.addFlag$2$help(
        'verbose',
        "Print all deprecation warnings even when they're repetitive."
      );
      parser.addFlag$2$help(
        'trace',
        'Print full Dart stack traces for exceptions.'
      );
      parser.addFlag$4$abbr$help$negatable(
        'help',
        'h',
        'Print this usage information.',
        false
      );
      parser.addFlag$3$help$negatable(
        'version',
        'Print the version of Dart Sass.',
        false
      );
      return parser;
    },
    $signature: 343,
  };
  B.ExecutableOptions_interactive_closure.prototype = {
    call$0() {
      var invalidOptions,
        _i,
        option,
        t1 = this.$this._options;
      if (!H._asBool(t1.$index(0, 'interactive'))) return false;
      invalidOptions = [
        'stdin',
        'indented',
        'style',
        'source-map',
        'source-map-urls',
        'embed-sources',
        'embed-source-map',
        'update',
      ];
      for (_i = 0; _i < 8; ++_i) {
        option = invalidOptions[_i];
        if (!t1._parser.options._map.containsKey$1(option))
          H.throwExpression(
            P.ArgumentError$(
              'Could not find an option named "' + option + '".',
              null
            )
          );
        if (t1._parsed.containsKey$1(option))
          throw H.wrapException(
            B.UsageException$(
              '--' + option + " isn't allowed with --interactive."
            )
          );
      }
      return true;
    },
    $signature: 25,
  };
  B.ExecutableOptions_emitErrorCss_closure.prototype = {
    call$1(destination) {
      return destination != null;
    },
    $signature: 187,
  };
  B.UsageException.prototype = {
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
  };
  F.EmptyExtensionStore.prototype = {
    get$isEmpty(_) {
      return true;
    },
    get$simpleSelectors() {
      return C.C_EmptyUnmodifiableSet;
    },
    extensionsWhereTarget$1(callback) {
      return C.List_empty2;
    },
    addSelector$3(selector, span, mediaContext) {
      throw H.wrapException(P.UnsupportedError$(string$.addSel));
    },
    addExtension$4(extender, target, extend, mediaContext) {
      throw H.wrapException(P.UnsupportedError$(string$.addExt_));
    },
    addExtensions$1(extenders) {
      throw H.wrapException(P.UnsupportedError$(string$.addExts));
    },
    clone$0() {
      return C.Tuple2_EmptyExtensionStore_Map_empty;
    },
    $isExtensionStore: 1,
  };
  S.Extension.prototype = {
    toString$0(_) {
      var t1 =
        this.extender.toString$0(0) + ' {@extend ' + this.target.toString$0(0);
      return t1 + (this.isOptional ? ' !optional' : '') + '}';
    },
  };
  S.Extender.prototype = {
    assertCompatibleMediaContext$1(mediaContext) {
      var expectedMediaContext,
        extension = this._extension;
      if (extension == null) return;
      expectedMediaContext = extension.mediaContext;
      if (expectedMediaContext == null) return;
      if (
        mediaContext != null &&
        C.C_ListEquality.equals$2(0, expectedMediaContext, mediaContext)
      )
        return;
      throw H.wrapException(E.SassException$(string$.You_ma, extension.span));
    },
    toString$0(_) {
      return N.serializeSelector(this.selector, true);
    },
  };
  X.ExtensionStore.prototype = {
    get$isEmpty(_) {
      var t1 = this._extensions;
      return t1.get$isEmpty(t1);
    },
    get$simpleSelectors() {
      return new M.MapKeySet(this._selectors, type$.MapKeySet_SimpleSelector);
    },
    extensionsWhereTarget$1($async$callback) {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var callback = $async$callback;
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          t1,
          t2,
          t3;
        return function $async$extensionsWhereTarget$1(
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = $async$self._extensions),
                  (t1 = t1.get$entries(t1)),
                  (t1 = t1.get$iterator(t1));
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                t2 = t1.get$current();
                if (!callback.call$1(t2.key)) {
                  // goto for condition
                  $async$goto = 2;
                  break;
                }
                (t2 = J.get$values$z(t2.value)), (t2 = t2.get$iterator(t2));
              case 4:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                t3 = t2.get$current();
                $async$goto = t3 instanceof A.MergedExtension ? 6 : 8;
                break;
              case 6:
                // then
                t3 = t3.unmerge$0();
                $async$goto = 9;
                return P._IterationMarker_yieldStar(
                  new H.WhereIterable(
                    t3,
                    new X.ExtensionStore_extensionsWhereTarget_closure(),
                    t3.$ti._eval$1('WhereIterable<Iterable.E>')
                  )
                );
              case 9:
                // after yield
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
                $async$goto = !t3.isOptional ? 10 : 11;
                break;
              case 10:
                // then
                $async$goto = 12;
                return t3;
              case 12:
              // after yield
              case 11:
              // join
              case 7:
                // join
                // goto for condition
                $async$goto = 4;
                break;
              case 5:
                // after for
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.Extension);
    },
    addSelector$3(selector, selectorSpan, mediaContext) {
      var originalSelector,
        error,
        t1,
        t2,
        t3,
        _i,
        exception,
        modifiableSelector,
        _this = this;
      selector = selector;
      originalSelector = selector;
      if (!originalSelector.get$isInvisible())
        for (
          t1 = originalSelector.components,
            t2 = t1.length,
            t3 = _this._originals,
            _i = 0;
          _i < t2;
          ++_i
        )
          t3.add$1(0, t1[_i]);
      t1 = _this._extensions;
      if (t1.get$isNotEmpty(t1))
        try {
          selector = _this._extendList$4(
            originalSelector,
            selectorSpan,
            t1,
            mediaContext
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException) {
            error = t1;
            throw H.wrapException(
              E.SassException$(
                'From ' +
                  error.get$span().message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
      modifiableSelector = new F.ModifiableCssValue(
        selector,
        selectorSpan,
        type$.ModifiableCssValue_SelectorList
      );
      if (mediaContext != null)
        _this._mediaContexts.$indexSet(0, modifiableSelector, mediaContext);
      _this._registerSelector$2(selector, modifiableSelector);
      return modifiableSelector;
    },
    _registerSelector$2(list, selector) {
      var t1,
        t2,
        t3,
        _i,
        t4,
        t5,
        _i0,
        component,
        t6,
        t7,
        _i1,
        simple,
        selectorInPseudo;
      for (
        t1 = list.components, t2 = t1.length, t3 = this._selectors, _i = 0;
        _i < t2;
        ++_i
      )
        for (t4 = t1[_i].components, t5 = t4.length, _i0 = 0; _i0 < t5; ++_i0) {
          component = t4[_i0];
          if (!(component instanceof X.CompoundSelector)) continue;
          for (
            t6 = component.components, t7 = t6.length, _i1 = 0;
            _i1 < t7;
            ++_i1
          ) {
            simple = t6[_i1];
            J.add$1$ax(
              t3.putIfAbsent$2(
                simple,
                new X.ExtensionStore__registerSelector_closure()
              ),
              selector
            );
            if (!(simple instanceof D.PseudoSelector)) continue;
            selectorInPseudo = simple.selector;
            if (selectorInPseudo != null)
              this._registerSelector$2(selectorInPseudo, selector);
          }
        }
    },
    addExtension$4(extender, target, extend, mediaContext) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        newExtensions,
        _i,
        complex,
        t12,
        extension,
        existingExtension,
        t13,
        newExtensionsByTarget,
        additionalExtensions,
        _this = this,
        selectors = _this._selectors.$index(0, target),
        t1 = _this._extensionsByExtender,
        existingExtensions = t1.$index(0, target),
        sources = _this._extensions.putIfAbsent$2(
          target,
          new X.ExtensionStore_addExtension_closure()
        );
      for (
        t2 = extender.value.components,
          t3 = t2.length,
          t4 = selectors == null,
          t5 = _this._sourceSpecificity,
          t6 = extender.span,
          t7 = extend.span,
          t8 = extend.isOptional,
          t9 = existingExtensions != null,
          t10 = type$.ComplexSelector,
          t11 = type$.Extension,
          newExtensions = null,
          _i = 0;
        _i < t3;
        ++_i
      ) {
        complex = t2[_i];
        if (complex._complex$_maxSpecificity == null)
          complex._computeSpecificity$0();
        complex._complex$_maxSpecificity.toString;
        t12 = new S.Extender(complex, false, t6);
        extension = t12._extension = new S.Extension(
          t12,
          target,
          mediaContext,
          t8,
          t7
        );
        existingExtension = sources.$index(0, complex);
        if (existingExtension != null) {
          sources.$indexSet(
            0,
            complex,
            A.MergedExtension_merge(existingExtension, extension)
          );
          continue;
        }
        sources.$indexSet(0, complex, extension);
        for (
          t12 = new P._SyncStarIterator(
            _this._simpleSelectors$1(complex)._outerHelper()
          );
          t12.moveNext$0();

        ) {
          t13 = t12.get$current();
          J.add$1$ax(
            t1.putIfAbsent$2(t13, new X.ExtensionStore_addExtension_closure0()),
            extension
          );
          t5.putIfAbsent$2(
            t13,
            new X.ExtensionStore_addExtension_closure1(complex)
          );
        }
        if (!t4 || t9) {
          if (newExtensions == null)
            newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(t10, t11);
          newExtensions.$indexSet(0, complex, extension);
        }
      }
      if (newExtensions == null) return;
      t1 = type$.SimpleSelector;
      newExtensionsByTarget = P.LinkedHashMap_LinkedHashMap$_literal(
        [target, newExtensions],
        t1,
        type$.Map_ComplexSelector_Extension
      );
      if (t9) {
        additionalExtensions = _this._extendExistingExtensions$2(
          existingExtensions,
          newExtensionsByTarget
        );
        if (additionalExtensions != null)
          B.mapAddAll2(
            newExtensionsByTarget,
            additionalExtensions,
            t1,
            t10,
            t11
          );
      }
      if (!t4)
        _this._extendExistingSelectors$2(selectors, newExtensionsByTarget);
    },
    _simpleSelectors$1(complex) {
      return this._simpleSelectors$body$ExtensionStore(complex);
    },
    _simpleSelectors$body$ExtensionStore($async$complex) {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var complex = $async$complex;
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          t1,
          t2,
          _i,
          component,
          t3,
          t4,
          _i0,
          simple,
          selector,
          t5,
          t6,
          _i1;
        return function $async$_simpleSelectors$1(
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = complex.components), (t2 = t1.length), (_i = 0);
              case 2:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                component = t1[_i];
                $async$goto = component instanceof X.CompoundSelector ? 5 : 6;
                break;
              case 5:
                // then
                (t3 = component.components), (t4 = t3.length), (_i0 = 0);
              case 7:
                // for condition
                if (!(_i0 < t4)) {
                  // goto after for
                  $async$goto = 9;
                  break;
                }
                simple = t3[_i0];
                $async$goto = 10;
                return simple;
              case 10:
                // after yield
                if (!(simple instanceof D.PseudoSelector)) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                selector = simple.selector;
                if (selector == null) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                (t5 = selector.components), (t6 = t5.length), (_i1 = 0);
              case 11:
                // for condition
                if (!(_i1 < t6)) {
                  // goto after for
                  $async$goto = 13;
                  break;
                }
                $async$goto = 14;
                return P._IterationMarker_yieldStar(
                  $async$self._simpleSelectors$1(t5[_i1])
                );
              case 14:
              // after yield
              case 12:
                // for update
                ++_i1;
                // goto for condition
                $async$goto = 11;
                break;
              case 13:
              // after for
              case 8:
                // for update
                ++_i0;
                // goto for condition
                $async$goto = 7;
                break;
              case 9:
              // after for
              case 6:
              // join
              case 3:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.SimpleSelector);
    },
    _extendExistingExtensions$2(extensions, newExtensions) {
      var extension,
        selectors,
        error,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        additionalExtensions,
        _i,
        t7,
        exception,
        t8,
        t9,
        containsExtension,
        first,
        _i0,
        complex,
        t10,
        t11,
        t12,
        t13,
        t14,
        withExtender,
        existingExtension,
        _i1,
        component,
        _i2;
      for (
        t1 = J.toList$0$ax(extensions),
          t2 = t1.length,
          t3 = this._extensionsByExtender,
          t4 = type$.SimpleSelector,
          t5 = type$.Map_ComplexSelector_Extension,
          t6 = this._extensions,
          additionalExtensions = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        extension = t1[_i];
        t7 = t6.$index(0, extension.target);
        t7.toString;
        selectors = null;
        try {
          selectors = this._extendComplex$4(
            extension.extender.selector,
            extension.extender.span,
            newExtensions,
            extension.mediaContext
          );
          if (selectors == null) continue;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException) {
            error = t1;
            throw H.wrapException(
              E.SassException$(
                'From ' +
                  extension.extender.span.message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
        t8 = J.get$first$ax(selectors);
        t9 = extension.extender;
        containsExtension = C.C_ListEquality.equals$2(
          0,
          t8.components,
          t9.selector.components
        );
        for (
          t8 = selectors, t9 = t8.length, first = true, _i0 = 0;
          _i0 < t8.length;
          t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i0
        ) {
          complex = t8[_i0];
          if (containsExtension && first) {
            first = false;
            continue;
          }
          t10 = extension;
          t11 = t10.extender;
          t12 = t10.target;
          t13 = t10.span;
          t14 = t10.mediaContext;
          t10 = t10.isOptional;
          if (complex._complex$_maxSpecificity == null)
            complex._computeSpecificity$0();
          complex._complex$_maxSpecificity.toString;
          t11 = new S.Extender(complex, false, t11.span);
          withExtender = t11._extension = new S.Extension(
            t11,
            t12,
            t14,
            t10,
            t13
          );
          existingExtension = t7.$index(0, complex);
          if (existingExtension != null)
            t7.$indexSet(
              0,
              complex,
              A.MergedExtension_merge(existingExtension, withExtender)
            );
          else {
            t7.$indexSet(0, complex, withExtender);
            for (
              t10 = complex.components, t11 = t10.length, _i1 = 0;
              _i1 < t11;
              ++_i1
            ) {
              component = t10[_i1];
              if (component instanceof X.CompoundSelector)
                for (
                  t12 = component.components, t13 = t12.length, _i2 = 0;
                  _i2 < t13;
                  ++_i2
                )
                  J.add$1$ax(
                    t3.putIfAbsent$2(
                      t12[_i2],
                      new X.ExtensionStore__extendExistingExtensions_closure()
                    ),
                    withExtender
                  );
            }
            if (newExtensions.containsKey$1(extension.target)) {
              if (additionalExtensions == null)
                additionalExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                  t4,
                  t5
                );
              additionalExtensions
                .putIfAbsent$2(
                  extension.target,
                  new X.ExtensionStore__extendExistingExtensions_closure0()
                )
                .$indexSet(0, complex, withExtender);
            }
          }
        }
        if (!containsExtension) t7.remove$1(0, extension.extender);
      }
      return additionalExtensions;
    },
    _extendExistingSelectors$2(selectors, newExtensions) {
      var selector, error, t1, t2, oldValue, exception;
      for (
        t1 = selectors.get$iterator(selectors), t2 = this._mediaContexts;
        t1.moveNext$0();

      ) {
        selector = t1.get$current();
        oldValue = selector.value;
        try {
          selector.value = this._extendList$4(
            selector.value,
            selector.span,
            newExtensions,
            t2.$index(0, selector)
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException) {
            error = t1;
            throw H.wrapException(
              E.SassException$(
                'From ' +
                  selector.span.message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
        if (oldValue === selector.value) continue;
        this._registerSelector$2(selector.value, selector);
      }
    },
    addExtensions$1(extensionStores) {
      var t1,
        t2,
        t3,
        _box_0 = {};
      _box_0.newExtensions = _box_0.selectorsToExtend = _box_0.extensionsToExtend = null;
      for (
        t1 = J.get$iterator$ax(extensionStores), t2 = this._sourceSpecificity;
        t1.moveNext$0();

      ) {
        t3 = t1.get$current();
        if (t3.get$isEmpty(t3)) continue;
        t2.addAll$1(0, t3.get$_sourceSpecificity());
        t3.get$_extensions().forEach$1(
          0,
          new X.ExtensionStore_addExtensions_closure(_box_0, this)
        );
      }
      X.NullableExtension_andThen(
        _box_0.newExtensions,
        new X.ExtensionStore_addExtensions_closure0(_box_0, this)
      );
    },
    _extendList$4(list, listSpan, extensions, mediaQueryContext) {
      var t1, t2, t3, extended, i, complex, result, t4;
      for (
        t1 = list.components,
          t2 = t1.length,
          t3 = type$.JSArray_ComplexSelector,
          extended = null,
          i = 0;
        i < t2;
        ++i
      ) {
        complex = t1[i];
        result = this._extendComplex$4(
          complex,
          listSpan,
          extensions,
          mediaQueryContext
        );
        if (result == null) {
          if (extended != null) extended.push(complex);
        } else {
          if (extended == null)
            if (i === 0) extended = H._setArrayType([], t3);
            else {
              t4 = C.JSArray_methods.sublist$2(t1, 0, i);
              extended = H._setArrayType(t4.slice(0), H._arrayInstanceType(t4));
            }
          C.JSArray_methods.addAll$1(extended, result);
        }
      }
      if (extended == null) return list;
      t1 = this._originals;
      return D.SelectorList$(this._trim$2(extended, t1.get$contains(t1)));
    },
    _extendList$3(list, listSpan, extensions) {
      return this._extendList$4(list, listSpan, extensions, null);
    },
    _extendComplex$4(complex, complexSpan, extensions, mediaQueryContext) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        extendedNotExpanded,
        i,
        component,
        extended,
        result,
        t6,
        t7,
        t8,
        _null = null,
        _s28_ = 'components may not be empty.',
        _box_0 = {},
        isOriginal = this._originals.contains$1(0, complex);
      for (
        t1 = complex.components,
          t2 = t1.length,
          t3 = type$.JSArray_ComplexSelector,
          t4 = type$.JSArray_ComplexSelectorComponent,
          t5 = type$.ComplexSelectorComponent,
          extendedNotExpanded = _null,
          i = 0;
        i < t2;
        ++i
      ) {
        component = t1[i];
        if (component instanceof X.CompoundSelector) {
          extended = this._extendCompound$5$inOriginal(
            component,
            complexSpan,
            extensions,
            mediaQueryContext,
            isOriginal
          );
          if (extended == null) {
            if (extendedNotExpanded != null) {
              result = P.List_List$from(
                H._setArrayType([component], t4),
                false,
                t5
              );
              result.fixed$length = Array;
              result.immutable$list = Array;
              t6 = result;
              if (t6.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              C.JSArray_methods.add$1(
                extendedNotExpanded,
                H._setArrayType([new S.ComplexSelector(t6, false)], t3)
              );
            }
          } else {
            if (extendedNotExpanded == null) {
              t6 = H._arrayInstanceType(t1);
              t7 = t6._eval$1('SubListIterable<1>');
              t8 = new H.SubListIterable(t1, 0, i, t7);
              t8.SubListIterable$3(t1, 0, i, t6._precomputed1);
              t7 = t7._eval$1(
                'MappedListIterable<ListIterable.E,List<ComplexSelector>>'
              );
              extendedNotExpanded = P.List_List$of(
                new H.MappedListIterable(
                  t8,
                  new X.ExtensionStore__extendComplex_closure(complex),
                  t7
                ),
                true,
                t7._eval$1('ListIterable.E')
              );
            }
            C.JSArray_methods.add$1(extendedNotExpanded, extended);
          }
        } else if (extendedNotExpanded != null) {
          result = P.List_List$from(
            H._setArrayType([component], t4),
            false,
            t5
          );
          result.fixed$length = Array;
          result.immutable$list = Array;
          t6 = result;
          if (t6.length === 0)
            H.throwExpression(P.ArgumentError$(_s28_, _null));
          C.JSArray_methods.add$1(
            extendedNotExpanded,
            H._setArrayType([new S.ComplexSelector(t6, false)], t3)
          );
        }
      }
      if (extendedNotExpanded == null) return _null;
      _box_0.first = true;
      t1 = type$.ComplexSelector;
      t1 = J.expand$1$1$ax(
        Y.paths(extendedNotExpanded, t1),
        new X.ExtensionStore__extendComplex_closure0(_box_0, this, complex),
        t1
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    _extendCompound$5$inOriginal(
      compound,
      compoundSpan,
      extensions,
      mediaQueryContext,
      inOriginal
    ) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        options,
        i,
        simple,
        extended,
        result,
        t11,
        t12,
        isOriginal,
        _this = this,
        _null = null,
        _s28_ = 'components may not be empty.',
        _box_1 = {},
        t1 = _this._mode,
        targetsUsed =
          t1 === C.ExtendMode_normal || extensions.get$length(extensions) < 2
            ? _null
            : P.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
      for (
        t2 = compound.components,
          t3 = t2.length,
          t4 = type$.JSArray_List_Extender,
          t5 = type$.JSArray_Extender,
          t6 = type$.JSArray_ComplexSelectorComponent,
          t7 = type$.ComplexSelectorComponent,
          t8 = type$.SimpleSelector,
          t9 = _this._sourceSpecificity,
          t10 = type$.JSArray_SimpleSelector,
          options = _null,
          i = 0;
        i < t3;
        ++i
      ) {
        simple = t2[i];
        extended = _this._extendSimple$5(
          simple,
          compoundSpan,
          extensions,
          mediaQueryContext,
          targetsUsed
        );
        if (extended == null) {
          if (options != null) {
            result = P.List_List$from(
              H._setArrayType([simple], t10),
              false,
              t8
            );
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              H.throwExpression(P.ArgumentError$(_s28_, _null));
            result = P.List_List$from(
              H._setArrayType([new X.CompoundSelector(t11)], t6),
              false,
              t7
            );
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              H.throwExpression(P.ArgumentError$(_s28_, _null));
            t9.$index(0, simple);
            options.push(
              H._setArrayType(
                [
                  new S.Extender(
                    new S.ComplexSelector(t11, false),
                    true,
                    compoundSpan
                  ),
                ],
                t5
              )
            );
          }
        } else {
          if (options == null) {
            options = H._setArrayType([], t4);
            if (i !== 0) {
              t11 = H._arrayInstanceType(t2);
              t12 = new H.SubListIterable(
                t2,
                0,
                i,
                t11._eval$1('SubListIterable<1>')
              );
              t12.SubListIterable$3(t2, 0, i, t11._precomputed1);
              result = P.List_List$from(t12, false, t8);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t12 = result;
              compound = new X.CompoundSelector(t12);
              if (t12.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              result = P.List_List$from(
                H._setArrayType([compound], t6),
                false,
                t7
              );
              result.fixed$length = Array;
              result.immutable$list = Array;
              t11 = result;
              if (t11.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              _this._sourceSpecificityFor$1(compound);
              options.push(
                H._setArrayType(
                  [
                    new S.Extender(
                      new S.ComplexSelector(t11, false),
                      true,
                      compoundSpan
                    ),
                  ],
                  t5
                )
              );
            }
          }
          C.JSArray_methods.addAll$1(options, extended);
        }
      }
      if (options == null) return _null;
      if (
        targetsUsed != null &&
        targetsUsed._collection$_length !== extensions.get$length(extensions)
      )
        return _null;
      if (options.length === 1)
        return J.map$1$1$ax(
          C.JSArray_methods.get$first(options),
          new X.ExtensionStore__extendCompound_closure(mediaQueryContext),
          type$.ComplexSelector
        ).toList$0(0);
      t1 = _box_1.first = t1 !== C.ExtendMode_replace;
      t2 = A.IterableNullableExtension_whereNotNull(
        J.map$1$1$ax(
          Y.paths(options, type$.Extender),
          new X.ExtensionStore__extendCompound_closure0(
            _box_1,
            mediaQueryContext
          ),
          type$.nullable_List_ComplexSelector
        ),
        type$.List_ComplexSelector
      );
      t3 = t2.$ti._eval$1('ExpandIterable<Iterable.E,ComplexSelector>');
      result = P.List_List$of(
        new H.ExpandIterable(
          t2,
          new X.ExtensionStore__extendCompound_closure1(),
          t3
        ),
        true,
        t3._eval$1('Iterable.E')
      );
      isOriginal = new X.ExtensionStore__extendCompound_closure2();
      return _this._trim$2(
        result,
        inOriginal && t1
          ? new X.ExtensionStore__extendCompound_closure3(
              C.JSArray_methods.get$first(result)
            )
          : isOriginal
      );
    },
    _extendSimple$5(
      simple,
      simpleSpan,
      extensions,
      mediaQueryContext,
      targetsUsed
    ) {
      var extended,
        t1 = new X.ExtensionStore__extendSimple_withoutPseudo(
          this,
          extensions,
          targetsUsed,
          simpleSpan
        );
      if (simple instanceof D.PseudoSelector && simple.selector != null) {
        extended = this._extendPseudo$4(
          simple,
          simpleSpan,
          extensions,
          mediaQueryContext
        );
        if (extended != null)
          return new H.MappedListIterable(
            extended,
            new X.ExtensionStore__extendSimple_closure(this, t1, simpleSpan),
            H._arrayInstanceType(extended)._eval$1(
              'MappedListIterable<1,List<Extender>>'
            )
          );
      }
      return X.NullableExtension_andThen(
        t1.call$1(simple),
        new X.ExtensionStore__extendSimple_closure0()
      );
    },
    _extenderForSimple$2(simple, span) {
      var t1 = S.ComplexSelector$(
        H._setArrayType(
          [
            X.CompoundSelector$(
              H._setArrayType([simple], type$.JSArray_SimpleSelector)
            ),
          ],
          type$.JSArray_ComplexSelectorComponent
        ),
        false
      );
      this._sourceSpecificity.$index(0, simple);
      return new S.Extender(t1, true, span);
    },
    _extendPseudo$4(pseudo, pseudoSpan, extensions, mediaQueryContext) {
      var extended,
        complexes,
        t1,
        result,
        selector = pseudo.selector;
      if (selector == null)
        throw H.wrapException(
          P.ArgumentError$(
            'Selector ' +
              pseudo.toString$0(0) +
              ' must have a selector argument.',
            null
          )
        );
      extended = this._extendList$4(
        selector,
        pseudoSpan,
        extensions,
        mediaQueryContext
      );
      if (extended === selector) return null;
      complexes = extended.components;
      t1 = pseudo.normalizedName === 'not';
      if (
        t1 &&
        !C.JSArray_methods.any$1(
          selector.components,
          new X.ExtensionStore__extendPseudo_closure()
        ) &&
        C.JSArray_methods.any$1(
          complexes,
          new X.ExtensionStore__extendPseudo_closure0()
        )
      )
        complexes = new H.WhereIterable(
          complexes,
          new X.ExtensionStore__extendPseudo_closure1(),
          H._arrayInstanceType(complexes)._eval$1('WhereIterable<1>')
        );
      complexes = J.expand$1$1$ax(
        complexes,
        new X.ExtensionStore__extendPseudo_closure2(pseudo),
        type$.ComplexSelector
      );
      if (t1 && selector.components.length === 1) {
        t1 = H.MappedIterable_MappedIterable(
          complexes,
          new X.ExtensionStore__extendPseudo_closure3(pseudo),
          complexes.$ti._eval$1('Iterable.E'),
          type$.PseudoSelector
        );
        result = P.List_List$of(
          t1,
          true,
          H._instanceType(t1)._eval$1('Iterable.E')
        );
        return result.length === 0 ? null : result;
      } else
        return H._setArrayType(
          [
            D.PseudoSelector$(
              pseudo.name,
              pseudo.argument,
              !pseudo.isClass,
              D.SelectorList$(complexes)
            ),
          ],
          type$.JSArray_PseudoSelector
        );
    },
    _trim$2(selectors, isOriginal) {
      var result,
        i,
        t1,
        t2,
        numOriginals,
        _box_0,
        complex1,
        j,
        t3,
        t4,
        _i,
        component;
      if (selectors.length > 100) return selectors;
      result = Q.QueueList$(null, type$.ComplexSelector);
      $label0$0: for (
        i = selectors.length - 1,
          t1 = H._arrayInstanceType(selectors),
          t2 = t1._precomputed1,
          t1 = t1._eval$1('SubListIterable<1>'),
          numOriginals = 0;
        i >= 0;
        --i
      ) {
        _box_0 = {};
        complex1 = selectors[i];
        if (isOriginal.call$1(complex1)) {
          for (j = 0; j < numOriginals; ++j)
            if (J.$eq$(result.$index(0, j), complex1)) {
              B.rotateSlice(result, 0, j + 1);
              continue $label0$0;
            }
          ++numOriginals;
          result.addFirst$1(complex1);
          continue $label0$0;
        }
        _box_0.maxSpecificity = 0;
        for (t3 = complex1.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
          component = t3[_i];
          if (component instanceof X.CompoundSelector)
            _box_0.maxSpecificity = Math.max(
              _box_0.maxSpecificity,
              this._sourceSpecificityFor$1(component)
            );
        }
        if (
          result.any$1(
            result,
            new X.ExtensionStore__trim_closure(_box_0, complex1)
          )
        )
          continue $label0$0;
        t3 = new H.SubListIterable(selectors, 0, i, t1);
        t3.SubListIterable$3(selectors, 0, i, t2);
        if (t3.any$1(0, new X.ExtensionStore__trim_closure0(_box_0, complex1)))
          continue $label0$0;
        result.addFirst$1(complex1);
      }
      return result;
    },
    _sourceSpecificityFor$1(compound) {
      var t1, t2, t3, specificity, _i, t4;
      for (
        t1 = compound.components,
          t2 = t1.length,
          t3 = this._sourceSpecificity,
          specificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        t4 = t3.$index(0, t1[_i]);
        specificity = Math.max(specificity, H.checkNum(t4 == null ? 0 : t4));
      }
      return specificity;
    },
    clone$0() {
      var t3,
        t4,
        _this = this,
        t1 = type$.SimpleSelector,
        newSelectors = P.LinkedHashMap_LinkedHashMap$_empty(
          t1,
          type$.Set_ModifiableCssValue_SelectorList
        ),
        t2 = type$.ModifiableCssValue_SelectorList,
        newMediaContexts = P.LinkedHashMap_LinkedHashMap$_empty(
          t2,
          type$.List_CssMediaQuery
        ),
        oldToNewSelectors = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.CssValue_SelectorList,
          t2
        );
      _this._selectors.forEach$1(
        0,
        new X.ExtensionStore_clone_closure(
          _this,
          newSelectors,
          oldToNewSelectors,
          newMediaContexts
        )
      );
      t2 = type$.Extension;
      t3 = B.copyMapOfMap(_this._extensions, t1, type$.ComplexSelector, t2);
      t2 = B.copyMapOfList(_this._extensionsByExtender, t1, t2);
      t1 = P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(t1, type$.int);
      t1.addAll$1(0, _this._sourceSpecificity);
      t4 = new P._LinkedIdentityHashSet(
        type$._LinkedIdentityHashSet_ComplexSelector
      );
      t4.addAll$1(0, _this._originals);
      return new S.Tuple2(
        new X.ExtensionStore(
          newSelectors,
          t3,
          t2,
          newMediaContexts,
          t1,
          t4,
          C.ExtendMode_normal
        ),
        oldToNewSelectors,
        type$.Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList
      );
    },
    get$_extensions() {
      return this._extensions;
    },
    get$_sourceSpecificity() {
      return this._sourceSpecificity;
    },
  };
  X.ExtensionStore_extensionsWhereTarget_closure.prototype = {
    call$1(extension) {
      return !extension.isOptional;
    },
    $signature: 342,
  };
  X.ExtensionStore__registerSelector_closure.prototype = {
    call$0() {
      return P.LinkedHashSet_LinkedHashSet$_empty(
        type$.ModifiableCssValue_SelectorList
      );
    },
    $signature: 334,
  };
  X.ExtensionStore_addExtension_closure.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector,
        type$.Extension
      );
    },
    $signature: 116,
  };
  X.ExtensionStore_addExtension_closure0.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_Extension);
    },
    $signature: 159,
  };
  X.ExtensionStore_addExtension_closure1.prototype = {
    call$0() {
      return this.complex.get$maxSpecificity();
    },
    $signature: 18,
  };
  X.ExtensionStore__extendExistingExtensions_closure.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_Extension);
    },
    $signature: 159,
  };
  X.ExtensionStore__extendExistingExtensions_closure0.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector,
        type$.Extension
      );
    },
    $signature: 116,
  };
  X.ExtensionStore_addExtensions_closure.prototype = {
    call$2(target, newSources) {
      var first,
        t1,
        extensionsForTarget,
        t2,
        t3,
        t4,
        selectorsForTarget,
        t5,
        existingSources,
        _this = this;
      if (target instanceof N.PlaceholderSelector) {
        first = C.JSString_methods._codeUnitAt$1(target.name, 0);
        t1 = first === 45 || first === 95;
      } else t1 = false;
      if (t1) return;
      t1 = _this.$this;
      extensionsForTarget = t1._extensionsByExtender.$index(0, target);
      t2 = extensionsForTarget == null;
      if (!t2) {
        t3 = _this._box_0;
        t4 = t3.extensionsToExtend;
        C.JSArray_methods.addAll$1(
          t4 == null
            ? (t3.extensionsToExtend = H._setArrayType(
                [],
                type$.JSArray_Extension
              ))
            : t4,
          extensionsForTarget
        );
      }
      selectorsForTarget = t1._selectors.$index(0, target);
      t3 = selectorsForTarget != null;
      if (t3) {
        t4 = _this._box_0;
        t5 = t4.selectorsToExtend;
        (t5 == null
          ? (t4.selectorsToExtend = P.LinkedHashSet_LinkedHashSet$_empty(
              type$.ModifiableCssValue_SelectorList
            ))
          : t5
        ).addAll$1(0, selectorsForTarget);
      }
      t1 = t1._extensions;
      existingSources = t1.$index(0, target);
      if (existingSources == null) {
        t4 = type$.ComplexSelector;
        t5 = type$.Extension;
        t1.$indexSet(
          0,
          target,
          P.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5)
        );
        if (!t2 || t3) {
          t1 = _this._box_0;
          t2 = t1.newExtensions;
          t1 =
            t2 == null
              ? (t1.newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.SimpleSelector,
                  type$.Map_ComplexSelector_Extension
                ))
              : t2;
          t1.$indexSet(
            0,
            target,
            P.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5)
          );
        }
      } else
        newSources.forEach$1(
          0,
          new X.ExtensionStore_addExtensions__closure1(
            _this._box_0,
            existingSources,
            extensionsForTarget,
            selectorsForTarget,
            target
          )
        );
    },
    $signature: 333,
  };
  X.ExtensionStore_addExtensions__closure1.prototype = {
    call$2(extender, extension) {
      var t2,
        _this = this,
        t1 = _this.existingSources;
      if (t1.containsKey$1(extender)) {
        t2 = t1.$index(0, extender);
        t2.toString;
        extension = A.MergedExtension_merge(t2, extension);
        t1.$indexSet(0, extender, extension);
      } else t1.$indexSet(0, extender, extension);
      if (
        _this.extensionsForTarget != null ||
        _this.selectorsForTarget != null
      ) {
        t1 = _this._box_0;
        t2 = t1.newExtensions;
        t1 =
          t2 == null
            ? (t1.newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                type$.SimpleSelector,
                type$.Map_ComplexSelector_Extension
              ))
            : t2;
        J.$indexSet$ax(
          t1.putIfAbsent$2(
            _this.target,
            new X.ExtensionStore_addExtensions___closure()
          ),
          extender,
          extension
        );
      }
    },
    $signature: 332,
  };
  X.ExtensionStore_addExtensions___closure.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector,
        type$.Extension
      );
    },
    $signature: 116,
  };
  X.ExtensionStore_addExtensions_closure0.prototype = {
    call$1(newExtensions) {
      var t1 = this._box_0,
        t2 = this.$this;
      X.NullableExtension_andThen(
        t1.extensionsToExtend,
        new X.ExtensionStore_addExtensions__closure(t2, newExtensions)
      );
      X.NullableExtension_andThen(
        t1.selectorsToExtend,
        new X.ExtensionStore_addExtensions__closure0(t2, newExtensions)
      );
    },
    $signature: 329,
  };
  X.ExtensionStore_addExtensions__closure.prototype = {
    call$1(extensionsToExtend) {
      return this.$this._extendExistingExtensions$2(
        extensionsToExtend,
        this.newExtensions
      );
    },
    $signature: 328,
  };
  X.ExtensionStore_addExtensions__closure0.prototype = {
    call$1(selectorsToExtend) {
      return this.$this._extendExistingSelectors$2(
        selectorsToExtend,
        this.newExtensions
      );
    },
    $signature: 326,
  };
  X.ExtensionStore__extendComplex_closure.prototype = {
    call$1(component) {
      return H._setArrayType(
        [
          S.ComplexSelector$(
            H._setArrayType(
              [component],
              type$.JSArray_ComplexSelectorComponent
            ),
            this.complex.lineBreak
          ),
        ],
        type$.JSArray_ComplexSelector
      );
    },
    $signature: 325,
  };
  X.ExtensionStore__extendComplex_closure0.prototype = {
    call$1(path) {
      var t1 = Y.weave(
        J.map$1$1$ax(
          path,
          new X.ExtensionStore__extendComplex__closure(),
          type$.List_ComplexSelectorComponent
        ).toList$0(0)
      );
      return new H.MappedListIterable(
        t1,
        new X.ExtensionStore__extendComplex__closure0(
          this._box_0,
          this.$this,
          this.complex,
          path
        ),
        H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,ComplexSelector>'
        )
      );
    },
    $signature: 322,
  };
  X.ExtensionStore__extendComplex__closure.prototype = {
    call$1(complex) {
      return complex.components;
    },
    $signature: 321,
  };
  X.ExtensionStore__extendComplex__closure0.prototype = {
    call$1(components) {
      var _this = this,
        t1 = _this.complex,
        outputComplex = S.ComplexSelector$(
          components,
          t1.lineBreak ||
            J.any$1$ax(
              _this.path,
              new X.ExtensionStore__extendComplex___closure()
            )
        ),
        t2 = _this._box_0;
      if (t2.first && _this.$this._originals.contains$1(0, t1))
        _this.$this._originals.add$1(0, outputComplex);
      t2.first = false;
      return outputComplex;
    },
    $signature: 66,
  };
  X.ExtensionStore__extendComplex___closure.prototype = {
    call$1(inputComplex) {
      return inputComplex.lineBreak;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendCompound_closure.prototype = {
    call$1(extender) {
      extender.assertCompatibleMediaContext$1(this.mediaQueryContext);
      return extender.selector;
    },
    $signature: 320,
  };
  X.ExtensionStore__extendCompound_closure0.prototype = {
    call$1(path) {
      var complexes,
        toUnify,
        t2,
        t3,
        originals,
        t4,
        _box_0 = {},
        t1 = this._box_1;
      if (t1.first) {
        t1.first = false;
        complexes = H._setArrayType(
          [
            H._setArrayType(
              [
                X.CompoundSelector$(
                  J.expand$1$1$ax(
                    path,
                    new X.ExtensionStore__extendCompound__closure(),
                    type$.SimpleSelector
                  )
                ),
              ],
              type$.JSArray_ComplexSelectorComponent
            ),
          ],
          type$.JSArray_List_ComplexSelectorComponent
        );
      } else {
        toUnify = Q.QueueList$(null, type$.List_ComplexSelectorComponent);
        for (
          t1 = J.get$iterator$ax(path),
            t2 = type$.CompoundSelector,
            t3 = type$.JSArray_SimpleSelector,
            originals = null;
          t1.moveNext$0();

        ) {
          t4 = t1.get$current();
          if (t4.isOriginal) {
            if (originals == null) originals = H._setArrayType([], t3);
            C.JSArray_methods.addAll$1(
              originals,
              t2._as(C.JSArray_methods.get$last(t4.selector.components))
                .components
            );
          } else toUnify._queue_list$_add$1(t4.selector.components);
        }
        if (originals != null)
          toUnify.addFirst$1(
            H._setArrayType(
              [X.CompoundSelector$(originals)],
              type$.JSArray_ComplexSelectorComponent
            )
          );
        complexes = Y.unifyComplex(toUnify);
        if (complexes == null) return null;
      }
      _box_0.lineBreak = false;
      for (
        t1 = J.get$iterator$ax(path), t2 = this.mediaQueryContext;
        t1.moveNext$0();

      ) {
        t3 = t1.get$current();
        t3.assertCompatibleMediaContext$1(t2);
        _box_0.lineBreak = _box_0.lineBreak || t3.selector.lineBreak;
      }
      t1 = J.map$1$1$ax(
        complexes,
        new X.ExtensionStore__extendCompound__closure0(_box_0),
        type$.ComplexSelector
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('ListIterable.E'));
    },
    $signature: 318,
  };
  X.ExtensionStore__extendCompound__closure.prototype = {
    call$1(extender) {
      return type$.CompoundSelector._as(
        C.JSArray_methods.get$last(extender.selector.components)
      ).components;
    },
    $signature: 317,
  };
  X.ExtensionStore__extendCompound__closure0.prototype = {
    call$1(components) {
      return S.ComplexSelector$(components, this._box_0.lineBreak);
    },
    $signature: 66,
  };
  X.ExtensionStore__extendCompound_closure1.prototype = {
    call$1(l) {
      return l;
    },
    $signature: 315,
  };
  X.ExtensionStore__extendCompound_closure2.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendCompound_closure3.prototype = {
    call$1(complex) {
      var t1 = C.C_ListEquality.equals$2(
        0,
        complex.components,
        this.original.components
      );
      return t1;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendSimple_withoutPseudo.prototype = {
    call$1(simple) {
      var t1,
        t2,
        _this = this,
        extensionsForSimple = _this.extensions.$index(0, simple);
      if (extensionsForSimple == null) return null;
      t1 = _this.targetsUsed;
      if (t1 != null) t1.add$1(0, simple);
      t1 = H._setArrayType([], type$.JSArray_Extender);
      t2 = _this.$this;
      if (t2._mode !== C.ExtendMode_replace)
        t1.push(t2._extenderForSimple$2(simple, _this.simpleSpan));
      for (
        t2 = extensionsForSimple.get$values(extensionsForSimple),
          t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      )
        t1.push(t2.get$current().extender);
      return t1;
    },
    $signature: 314,
  };
  X.ExtensionStore__extendSimple_closure.prototype = {
    call$1(pseudo) {
      var t1 = this.withoutPseudo.call$1(pseudo);
      return t1 == null
        ? H._setArrayType(
            [this.$this._extenderForSimple$2(pseudo, this.simpleSpan)],
            type$.JSArray_Extender
          )
        : t1;
    },
    $signature: 311,
  };
  X.ExtensionStore__extendSimple_closure0.prototype = {
    call$1(result) {
      return H._setArrayType([result], type$.JSArray_List_Extender);
    },
    $signature: 308,
  };
  X.ExtensionStore__extendPseudo_closure.prototype = {
    call$1(complex) {
      return complex.components.length > 1;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendPseudo_closure0.prototype = {
    call$1(complex) {
      return complex.components.length === 1;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendPseudo_closure1.prototype = {
    call$1(complex) {
      return complex.components.length <= 1;
    },
    $signature: 16,
  };
  X.ExtensionStore__extendPseudo_closure2.prototype = {
    call$1(complex) {
      var innerPseudo,
        innerSelector,
        t1 = complex.components;
      if (t1.length !== 1)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector);
      if (!(C.JSArray_methods.get$first(t1) instanceof X.CompoundSelector))
        return H._setArrayType([complex], type$.JSArray_ComplexSelector);
      t1 = type$.CompoundSelector._as(C.JSArray_methods.get$first(t1))
        .components;
      if (t1.length !== 1)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector);
      if (!(C.JSArray_methods.get$first(t1) instanceof D.PseudoSelector))
        return H._setArrayType([complex], type$.JSArray_ComplexSelector);
      innerPseudo = type$.PseudoSelector._as(C.JSArray_methods.get$first(t1));
      innerSelector = innerPseudo.selector;
      if (innerSelector == null)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector);
      t1 = this.pseudo;
      switch (t1.normalizedName) {
        case 'not':
          t1 = innerPseudo.normalizedName;
          if (t1 !== 'is' && t1 !== 'matches')
            return H._setArrayType([], type$.JSArray_ComplexSelector);
          return innerSelector.components;
        case 'is':
        case 'matches':
        case 'any':
        case 'current':
        case 'nth-child':
        case 'nth-last-child':
          if (innerPseudo.name !== t1.name)
            return H._setArrayType([], type$.JSArray_ComplexSelector);
          if (innerPseudo.argument != t1.argument)
            return H._setArrayType([], type$.JSArray_ComplexSelector);
          return innerSelector.components;
        case 'has':
        case 'host':
        case 'host-context':
        case 'slotted':
          return H._setArrayType([complex], type$.JSArray_ComplexSelector);
        default:
          return H._setArrayType([], type$.JSArray_ComplexSelector);
      }
    },
    $signature: 307,
  };
  X.ExtensionStore__extendPseudo_closure3.prototype = {
    call$1(complex) {
      var t1 = this.pseudo;
      return D.PseudoSelector$(
        t1.name,
        t1.argument,
        !t1.isClass,
        D.SelectorList$(
          H._setArrayType([complex], type$.JSArray_ComplexSelector)
        )
      );
    },
    $signature: 305,
  };
  X.ExtensionStore__trim_closure.prototype = {
    call$1(complex2) {
      return (
        complex2.get$minSpecificity() >= this._box_0.maxSpecificity &&
        Y.complexIsSuperselector(complex2.components, this.complex1.components)
      );
    },
    $signature: 16,
  };
  X.ExtensionStore__trim_closure0.prototype = {
    call$1(complex2) {
      return (
        complex2.get$minSpecificity() >= this._box_0.maxSpecificity &&
        Y.complexIsSuperselector(complex2.components, this.complex1.components)
      );
    },
    $signature: 16,
  };
  X.ExtensionStore_clone_closure.prototype = {
    call$2(simple, selectors) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        newSelector,
        mediaContext,
        _this = this,
        t1 = type$.ModifiableCssValue_SelectorList,
        newSelectorSet = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.newSelectors.$indexSet(0, simple, newSelectorSet);
      for (
        t2 = selectors.get$iterator(selectors),
          t3 = _this.oldToNewSelectors,
          t4 = _this.$this._mediaContexts,
          t5 = _this.newMediaContexts;
        t2.moveNext$0();

      ) {
        t6 = t2.get$current();
        newSelector = new F.ModifiableCssValue(t6.value, t6.span, t1);
        newSelectorSet.add$1(0, newSelector);
        t3.$indexSet(0, t6, newSelector);
        mediaContext = t4.$index(0, t6);
        if (mediaContext != null) t5.$indexSet(0, newSelector, mediaContext);
      }
    },
    $signature: 304,
  };
  Y.unifyComplex_closure.prototype = {
    call$1(complex) {
      var t1 = J.getInterceptor$asx(complex);
      return t1.sublist$2(complex, 0, t1.get$length(complex) - 1);
    },
    $signature: 83,
  };
  Y._weaveParents_closure.prototype = {
    call$2(group1, group2) {
      var unified,
        t1,
        _null = null;
      if (C.C_ListEquality.equals$2(0, group1, group2)) return group1;
      if (
        !(J.get$first$ax(group1) instanceof X.CompoundSelector) ||
        !(J.get$first$ax(group2) instanceof X.CompoundSelector)
      )
        return _null;
      if (Y.complexIsParentSuperselector(group1, group2)) return group2;
      if (Y.complexIsParentSuperselector(group2, group1)) return group1;
      if (!Y._mustUnify(group1, group2)) return _null;
      unified = Y.unifyComplex(
        H._setArrayType(
          [group1, group2],
          type$.JSArray_List_ComplexSelectorComponent
        )
      );
      if (unified == null) return _null;
      t1 = J.getInterceptor$asx(unified);
      if (t1.get$length(unified) > 1) return _null;
      return t1.get$first(unified);
    },
    $signature: 208,
  };
  Y._weaveParents_closure0.prototype = {
    call$1(sequence) {
      return Y.complexIsParentSuperselector(
        sequence.get$first(sequence),
        this.group
      );
    },
    $signature: 300,
  };
  Y._weaveParents_closure1.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(
        chunk,
        new Y._weaveParents__closure1(),
        type$.ComplexSelectorComponent
      );
    },
    $signature: 193,
  };
  Y._weaveParents__closure1.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 83,
  };
  Y._weaveParents_closure2.prototype = {
    call$1(sequence) {
      return sequence.get$length(sequence) === 0;
    },
    $signature: 195,
  };
  Y._weaveParents_closure3.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(
        chunk,
        new Y._weaveParents__closure0(),
        type$.ComplexSelectorComponent
      );
    },
    $signature: 193,
  };
  Y._weaveParents__closure0.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 83,
  };
  Y._weaveParents_closure4.prototype = {
    call$1(choice) {
      return J.get$isNotEmpty$asx(choice);
    },
    $signature: 299,
  };
  Y._weaveParents_closure5.prototype = {
    call$1(path) {
      var t1 = J.expand$1$1$ax(
        path,
        new Y._weaveParents__closure(),
        type$.ComplexSelectorComponent
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    $signature: 295,
  };
  Y._weaveParents__closure.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 294,
  };
  Y._mustUnify_closure.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector &&
        C.JSArray_methods.any$1(
          component.components,
          new Y._mustUnify__closure(this.uniqueSelectors)
        )
      );
    },
    $signature: 97,
  };
  Y._mustUnify__closure.prototype = {
    call$1(simple) {
      var t1;
      if (!(simple instanceof N.IDSelector))
        t1 = simple instanceof D.PseudoSelector && !simple.isClass;
      else t1 = true;
      return t1 && this.uniqueSelectors.contains$1(0, simple);
    },
    $signature: 15,
  };
  Y.paths_closure.prototype = {
    call$2(paths, choice) {
      var t1 = this.T;
      t1 = J.expand$1$1$ax(
        choice,
        new Y.paths__closure(paths, t1),
        t1._eval$1('List<0>')
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    $signature() {
      return this.T._eval$1('List<List<0>>(List<List<0>>,List<0>)');
    },
  };
  Y.paths__closure.prototype = {
    call$1(option) {
      var t1 = this.T;
      return J.map$1$1$ax(
        this.paths,
        new Y.paths___closure(option, t1),
        t1._eval$1('List<0>')
      );
    },
    $signature() {
      return this.T._eval$1('Iterable<List<0>>(0)');
    },
  };
  Y.paths___closure.prototype = {
    call$1(path) {
      var t1 = P.List_List$of(path, true, this.T);
      t1.push(this.option);
      return t1;
    },
    $signature() {
      return this.T._eval$1('List<0>(List<0>)');
    },
  };
  Y._hasRoot_closure.prototype = {
    call$1(simple) {
      return (
        simple instanceof D.PseudoSelector &&
        simple.isClass &&
        simple.normalizedName === 'root'
      );
    },
    $signature: 15,
  };
  Y.listIsSuperselector_closure.prototype = {
    call$1(complex1) {
      return C.JSArray_methods.any$1(
        this.list1,
        new Y.listIsSuperselector__closure(complex1)
      );
    },
    $signature: 16,
  };
  Y.listIsSuperselector__closure.prototype = {
    call$1(complex2) {
      return Y.complexIsSuperselector(
        complex2.components,
        this.complex1.components
      );
    },
    $signature: 16,
  };
  Y._simpleIsSuperselectorOfCompound_closure.prototype = {
    call$1(theirSimple) {
      var selector,
        t1 = this.simple;
      if (t1.$eq(0, theirSimple)) return true;
      if (!(theirSimple instanceof D.PseudoSelector)) return false;
      selector = theirSimple.selector;
      if (selector == null) return false;
      if (!$._subselectorPseudos.contains$1(0, theirSimple.normalizedName))
        return false;
      return C.JSArray_methods.every$1(
        selector.components,
        new Y._simpleIsSuperselectorOfCompound__closure(t1)
      );
    },
    $signature: 15,
  };
  Y._simpleIsSuperselectorOfCompound__closure.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      if (t1.length !== 1) return false;
      return C.JSArray_methods.contains$1(
        type$.CompoundSelector._as(C.JSArray_methods.get$single(t1)).components,
        this.simple
      );
    },
    $signature: 16,
  };
  Y._selectorPseudoIsSuperselector_closure.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 64,
  };
  Y._selectorPseudoIsSuperselector_closure0.prototype = {
    call$1(complex1) {
      var t1 = complex1.components,
        t2 = H._setArrayType([], type$.JSArray_ComplexSelectorComponent),
        t3 = this.parents;
      if (t3 != null) C.JSArray_methods.addAll$1(t2, t3);
      t2.push(this.compound2);
      return Y.complexIsSuperselector(t1, t2);
    },
    $signature: 16,
  };
  Y._selectorPseudoIsSuperselector_closure1.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 64,
  };
  Y._selectorPseudoIsSuperselector_closure2.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 64,
  };
  Y._selectorPseudoIsSuperselector_closure3.prototype = {
    call$1(complex) {
      return C.JSArray_methods.any$1(
        this.compound2.components,
        new Y._selectorPseudoIsSuperselector__closure(complex, this.pseudo1)
      );
    },
    $signature: 16,
  };
  Y._selectorPseudoIsSuperselector__closure.prototype = {
    call$1(simple2) {
      var compound1,
        selector2,
        _this = this;
      if (simple2 instanceof F.TypeSelector) {
        compound1 = C.JSArray_methods.get$last(_this.complex.components);
        return (
          compound1 instanceof X.CompoundSelector &&
          C.JSArray_methods.any$1(
            compound1.components,
            new Y._selectorPseudoIsSuperselector___closure(simple2)
          )
        );
      } else if (simple2 instanceof N.IDSelector) {
        compound1 = C.JSArray_methods.get$last(_this.complex.components);
        return (
          compound1 instanceof X.CompoundSelector &&
          C.JSArray_methods.any$1(
            compound1.components,
            new Y._selectorPseudoIsSuperselector___closure0(simple2)
          )
        );
      } else if (
        simple2 instanceof D.PseudoSelector &&
        simple2.name === _this.pseudo1.name
      ) {
        selector2 = simple2.selector;
        if (selector2 == null) return false;
        return Y.listIsSuperselector(
          selector2.components,
          H._setArrayType([_this.complex], type$.JSArray_ComplexSelector)
        );
      } else return false;
    },
    $signature: 15,
  };
  Y._selectorPseudoIsSuperselector___closure.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof F.TypeSelector) {
        t1 = this.simple2.name.$eq(0, simple1.name);
        t1 = !t1;
      } else t1 = false;
      return t1;
    },
    $signature: 15,
  };
  Y._selectorPseudoIsSuperselector___closure0.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof N.IDSelector) {
        t1 = simple1.name;
        t1 = this.simple2.name !== t1;
      } else t1 = false;
      return t1;
    },
    $signature: 15,
  };
  Y._selectorPseudoIsSuperselector_closure4.prototype = {
    call$1(selector2) {
      var t1 = C.C_ListEquality.equals$2(
        0,
        this.selector1.components,
        selector2.components
      );
      return t1;
    },
    $signature: 64,
  };
  Y._selectorPseudoIsSuperselector_closure5.prototype = {
    call$1(pseudo2) {
      var t1, selector2;
      if (!(pseudo2 instanceof D.PseudoSelector)) return false;
      t1 = this.pseudo1;
      if (pseudo2.name !== t1.name) return false;
      if (pseudo2.argument != t1.argument) return false;
      selector2 = pseudo2.selector;
      if (selector2 == null) return false;
      return Y.listIsSuperselector(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 15,
  };
  Y._selectorPseudoArgs_closure.prototype = {
    call$1(pseudo) {
      return pseudo.isClass === this.isClass && pseudo.name === this.name;
    },
    $signature: 290,
  };
  Y._selectorPseudoArgs_closure0.prototype = {
    call$1(pseudo) {
      return pseudo.selector;
    },
    $signature: 289,
  };
  A.MergedExtension.prototype = {
    unmerge$0() {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          right,
          left;
        return function $async$unmerge$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                left = $async$self.left;
                $async$goto = left instanceof A.MergedExtension ? 2 : 4;
                break;
              case 2:
                // then
                $async$goto = 5;
                return P._IterationMarker_yieldStar(left.unmerge$0());
              case 5:
                // after yield
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$goto = 6;
                return left;
              case 6:
              // after yield
              case 3:
                // join
                right = $async$self.right;
                $async$goto = right instanceof A.MergedExtension ? 7 : 9;
                break;
              case 7:
                // then
                $async$goto = 10;
                return P._IterationMarker_yieldStar(right.unmerge$0());
              case 10:
                // after yield
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = 11;
                return right;
              case 11:
              // after yield
              case 8:
                // join
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.Extension);
    },
  };
  L.ExtendMode.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  Y.globalFunctions_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).get$isTruthy()
        ? t1.$index($arguments, 1)
        : t1.$index($arguments, 2);
    },
    $signature: 3,
  };
  K.global_closure.prototype = {
    call$1($arguments) {
      return K._rgb('rgb', $arguments);
    },
    $signature: 3,
  };
  K.global_closure0.prototype = {
    call$1($arguments) {
      return K._rgb('rgb', $arguments);
    },
    $signature: 3,
  };
  K.global_closure1.prototype = {
    call$1($arguments) {
      return K._rgbTwoArg('rgb', $arguments);
    },
    $signature: 3,
  };
  K.global_closure2.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels(
        'rgb',
        H._setArrayType(['$red', '$green', '$blue'], type$.JSArray_String),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString
        ? parsed
        : K._rgb('rgb', type$.List_Value._as(parsed));
    },
    $signature: 3,
  };
  K.global_closure3.prototype = {
    call$1($arguments) {
      return K._rgb('rgba', $arguments);
    },
    $signature: 3,
  };
  K.global_closure4.prototype = {
    call$1($arguments) {
      return K._rgb('rgba', $arguments);
    },
    $signature: 3,
  };
  K.global_closure5.prototype = {
    call$1($arguments) {
      return K._rgbTwoArg('rgba', $arguments);
    },
    $signature: 3,
  };
  K.global_closure6.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels(
        'rgba',
        H._setArrayType(['$red', '$green', '$blue'], type$.JSArray_String),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString
        ? parsed
        : K._rgb('rgba', type$.List_Value._as(parsed));
    },
    $signature: 3,
  };
  K.global_closure7.prototype = {
    call$1($arguments) {
      var color,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1('weight');
      if (t1.$index($arguments, 0) instanceof T.SassNumber) {
        if (weight.value !== 100 || !weight.hasUnit$1('%'))
          throw H.wrapException(string$.Only_oa);
        return K._functionString('invert', t1.take$1($arguments, 1));
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      t1 = color.get$red();
      t2 = color.get$green();
      return K._mixColors(
        color.changeRgb$3$blue$green$red(
          255 - color.get$blue(),
          255 - t2,
          255 - t1
        ),
        color,
        weight
      );
    },
    $signature: 3,
  };
  K.global_closure8.prototype = {
    call$1($arguments) {
      return K._hsl('hsl', $arguments);
    },
    $signature: 3,
  };
  K.global_closure9.prototype = {
    call$1($arguments) {
      return K._hsl('hsl', $arguments);
    },
    $signature: 3,
  };
  K.global_closure10.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (
        t1.$index($arguments, 0).get$isVar() ||
        t1.$index($arguments, 1).get$isVar()
      )
        return K._functionString('hsl', $arguments);
      else
        throw H.wrapException(
          E.SassScriptException$('Missing argument $lightness.')
        );
    },
    $signature: 11,
  };
  K.global_closure11.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels(
        'hsl',
        H._setArrayType(
          ['$hue', '$saturation', '$lightness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString
        ? parsed
        : K._hsl('hsl', type$.List_Value._as(parsed));
    },
    $signature: 3,
  };
  K.global_closure12.prototype = {
    call$1($arguments) {
      return K._hsl('hsla', $arguments);
    },
    $signature: 3,
  };
  K.global_closure13.prototype = {
    call$1($arguments) {
      return K._hsl('hsla', $arguments);
    },
    $signature: 3,
  };
  K.global_closure14.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (
        t1.$index($arguments, 0).get$isVar() ||
        t1.$index($arguments, 1).get$isVar()
      )
        return K._functionString('hsla', $arguments);
      else
        throw H.wrapException(
          E.SassScriptException$('Missing argument $lightness.')
        );
    },
    $signature: 11,
  };
  K.global_closure15.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels(
        'hsla',
        H._setArrayType(
          ['$hue', '$saturation', '$lightness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString
        ? parsed
        : K._hsl('hsla', type$.List_Value._as(parsed));
    },
    $signature: 3,
  };
  K.global_closure16.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber)
        return K._functionString('grayscale', $arguments);
      return t1
        .$index($arguments, 0)
        .assertColor$1('color')
        .changeHsl$1$saturation(0);
    },
    $signature: 3,
  };
  K.global_closure17.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        degrees = t1.$index($arguments, 1).assertNumber$1('degrees');
      K._checkAngle(degrees, null);
      return color.changeHsl$1$hue(color.get$hue() + degrees.value);
    },
    $signature: 23,
  };
  K.global_closure18.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$lightness(
        C.JSNumber_methods.clamp$2(
          color.get$lightness() + amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 23,
  };
  K.global_closure19.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$lightness(
        C.JSNumber_methods.clamp$2(
          color.get$lightness() - amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 23,
  };
  K.global_closure20.prototype = {
    call$1($arguments) {
      return new D.SassString(
        'saturate(' +
          N.serializeValue0(
            J.$index$asx($arguments, 0).assertNumber$1('amount'),
            false,
            true
          ) +
          ')',
        false
      );
    },
    $signature: 11,
  };
  K.global_closure21.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$saturation(
        C.JSNumber_methods.clamp$2(
          color.get$saturation() + amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 23,
  };
  K.global_closure22.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$saturation(
        C.JSNumber_methods.clamp$2(
          color.get$saturation() - amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 23,
  };
  K.global_closure23.prototype = {
    call$1($arguments) {
      var color,
        argument = J.$index$asx($arguments, 0);
      if (
        argument instanceof D.SassString &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart()
        )
      )
        return K._functionString('alpha', $arguments);
      color = argument.assertColor$1('color');
      return new N.UnitlessSassNumber(color.alpha, null);
    },
    $signature: 3,
  };
  K.global_closure24.prototype = {
    call$1($arguments) {
      var t1,
        argList = J.$index$asx($arguments, 0).get$asList();
      if (
        argList.length !== 0 &&
        C.JSArray_methods.every$1(argList, new K.global__closure())
      )
        return K._functionString('alpha', $arguments);
      t1 = argList.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$('Missing argument $color.')
        );
      else
        throw H.wrapException(
          E.SassScriptException$(
            'Only 1 argument allowed, but ' + t1 + ' were passed.'
          )
        );
    },
    $signature: 11,
  };
  K.global__closure.prototype = {
    call$1(argument) {
      return (
        argument instanceof D.SassString &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart()
        )
      );
    },
    $signature: 54,
  };
  K.global_closure25.prototype = {
    call$1($arguments) {
      var color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber)
        return K._functionString('opacity', $arguments);
      color = t1.$index($arguments, 0).assertColor$1('color');
      return new N.UnitlessSassNumber(color.alpha, null);
    },
    $signature: 3,
  };
  K.module_closure.prototype = {
    call$1($arguments) {
      var result,
        color,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1('weight');
      if (t1.$index($arguments, 0) instanceof T.SassNumber) {
        if (weight.value !== 100 || !weight.hasUnit$1('%'))
          throw H.wrapException(string$.Only_oa);
        result = K._functionString('invert', t1.take$1($arguments, 1));
        N.warn(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x29x20to_ci +
            result.toString$0(0),
          true
        );
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      t1 = color.get$red();
      t2 = color.get$green();
      return K._mixColors(
        color.changeRgb$3$blue$green$red(
          255 - color.get$blue(),
          255 - t2,
          255 - t1
        ),
        color,
        weight
      );
    },
    $signature: 3,
  };
  K.module_closure0.prototype = {
    call$1($arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber) {
        result = K._functionString('grayscale', t1.take$1($arguments, 1));
        N.warn(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x29x20to_cg +
            result.toString$0(0),
          true
        );
        return result;
      }
      return t1
        .$index($arguments, 0)
        .assertColor$1('color')
        .changeHsl$1$saturation(0);
    },
    $signature: 3,
  };
  K.module_closure1.prototype = {
    call$1($arguments) {
      return K._hwb($arguments);
    },
    $signature: 3,
  };
  K.module_closure2.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels(
        'hwb',
        H._setArrayType(
          ['$hue', '$whiteness', '$blackness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      if (parsed instanceof D.SassString)
        throw H.wrapException(
          E.SassScriptException$(
            'Expected numeric channels, got "' + parsed.toString$0(0) + '".'
          )
        );
      else return K._hwb(type$.List_Value._as(parsed));
    },
    $signature: 3,
  };
  K.module_closure3.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$whiteness();
      return new L.SingleUnitSassNumber('%', t1, null);
    },
    $signature: 8,
  };
  K.module_closure4.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$blackness();
      return new L.SingleUnitSassNumber('%', t1, null);
    },
    $signature: 8,
  };
  K.module_closure5.prototype = {
    call$1($arguments) {
      var result,
        color,
        argument = J.$index$asx($arguments, 0);
      if (
        argument instanceof D.SassString &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart()
        )
      ) {
        result = K._functionString('alpha', $arguments);
        N.warn(string$.Using_c + result.toString$0(0), true);
        return result;
      }
      color = argument.assertColor$1('color');
      return new N.UnitlessSassNumber(color.alpha, null);
    },
    $signature: 3,
  };
  K.module_closure6.prototype = {
    call$1($arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments);
      if (
        C.JSArray_methods.every$1(
          t1.$index($arguments, 0).get$asList(),
          new K.module__closure()
        )
      ) {
        result = K._functionString('alpha', $arguments);
        N.warn(string$.Using_c + result.toString$0(0), true);
        return result;
      }
      throw H.wrapException(
        E.SassScriptException$(
          'Only 1 argument allowed, but ' +
            t1.get$length($arguments) +
            ' were passed.'
        )
      );
    },
    $signature: 11,
  };
  K.module__closure.prototype = {
    call$1(argument) {
      return (
        argument instanceof D.SassString &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart()
        )
      );
    },
    $signature: 54,
  };
  K.module_closure7.prototype = {
    call$1($arguments) {
      var result,
        color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber) {
        result = K._functionString('opacity', $arguments);
        N.warn(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x20to_co +
            result.toString$0(0),
          true
        );
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      return new N.UnitlessSassNumber(color.alpha, null);
    },
    $signature: 3,
  };
  K._red_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$red();
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._green_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$green();
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._blue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$blue();
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._mix_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return K._mixColors(
        t1.$index($arguments, 0).assertColor$1('color1'),
        t1.$index($arguments, 1).assertColor$1('color2'),
        t1.$index($arguments, 2).assertNumber$1('weight')
      );
    },
    $signature: 23,
  };
  K._hue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$hue();
      return new L.SingleUnitSassNumber('deg', t1, null);
    },
    $signature: 8,
  };
  K._saturation_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$saturation();
      return new L.SingleUnitSassNumber('%', t1, null);
    },
    $signature: 8,
  };
  K._lightness_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$lightness();
      return new L.SingleUnitSassNumber('%', t1, null);
    },
    $signature: 8,
  };
  K._complement_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1('color');
      return color.changeHsl$1$hue(color.get$hue() + 180);
    },
    $signature: 23,
  };
  K._adjust_closure.prototype = {
    call$1($arguments) {
      return K._updateComponents($arguments, true, false, false);
    },
    $signature: 23,
  };
  K._scale_closure.prototype = {
    call$1($arguments) {
      return K._updateComponents($arguments, false, false, true);
    },
    $signature: 23,
  };
  K._change_closure.prototype = {
    call$1($arguments) {
      return K._updateComponents($arguments, false, true, false);
    },
    $signature: 23,
  };
  K._ieHexStr_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1('color'),
        t1 = new K._ieHexStr_closure_hexString();
      return new D.SassString(
        '#' +
          H.S(t1.call$1(T.fuzzyRound(color.alpha * 255))) +
          H.S(t1.call$1(color.get$red())) +
          H.S(t1.call$1(color.get$green())) +
          H.S(t1.call$1(color.get$blue())),
        false
      );
    },
    $signature: 11,
  };
  K._ieHexStr_closure_hexString.prototype = {
    call$1(component) {
      return C.JSString_methods.padLeft$2(
        C.JSInt_methods.toRadixString$1(component, 16),
        2,
        '0'
      ).toUpperCase();
    },
    $signature: 68,
  };
  K._updateComponents_getParam.prototype = {
    call$4$assertPercent$checkPercent($name, max, assertPercent, checkPercent) {
      var t2,
        t1 = this.keywords.remove$1(0, $name),
        number = t1 == null ? null : t1.assertNumber$1($name);
      if (number == null) return null;
      t1 = this.scale;
      t2 = !t1;
      if (t2 && checkPercent) K._checkPercent(number, $name);
      if (!t2 || assertPercent) number.assertUnit$2('%', $name);
      if (t1) max = 100;
      return number.valueInRange$3(this.change ? 0 : -max, max, $name);
    },
    call$2($name, max) {
      return this.call$4$assertPercent$checkPercent($name, max, false, false);
    },
    call$3$checkPercent($name, max, checkPercent) {
      return this.call$4$assertPercent$checkPercent(
        $name,
        max,
        false,
        checkPercent
      );
    },
    call$3$assertPercent($name, max, assertPercent) {
      return this.call$4$assertPercent$checkPercent(
        $name,
        max,
        assertPercent,
        false
      );
    },
    $signature: 129,
  };
  K._updateComponents_closure.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  K._updateComponents_updateValue.prototype = {
    call$3(current, param, max) {
      var t1;
      if (param == null) return current;
      if (this.change) return param;
      if (this.adjust)
        return C.JSNumber_methods.clamp$2(current + param, 0, max);
      t1 = param > 0 ? max - current : current;
      return current + t1 * (param / 100);
    },
    $signature: 130,
  };
  K._updateComponents_updateRgb.prototype = {
    call$2(current, param) {
      return T.fuzzyRound(this.updateValue.call$3(current, param, 255));
    },
    $signature: 131,
  };
  K._functionString_closure.prototype = {
    call$1(argument) {
      return N.serializeValue0(argument, false, true);
    },
    $signature: 286,
  };
  K._removedColorFunction_closure.prototype = {
    call$1($arguments) {
      var t1 = this.name,
        t2 = J.getInterceptor$asx($arguments),
        t3 =
          'The function ' +
          t1 +
          string$.x28__isn +
          H.S(t2.$index($arguments, 0)) +
          ', $' +
          this.argument +
          ': ';
      throw H.wrapException(
        E.SassScriptException$(
          t3 +
            (this.negative ? '-' : '') +
            H.S(t2.$index($arguments, 1)) +
            string$.x29x0a_Mor +
            t1
        )
      );
    },
    $signature: 285,
  };
  K._rgb_closure.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless(alpha.assertNumber$1('alpha'), 1, 'alpha');
    },
    $signature: 81,
  };
  K._hsl_closure.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless(alpha.assertNumber$1('alpha'), 1, 'alpha');
    },
    $signature: 81,
  };
  K._removeUnits_closure.prototype = {
    call$1(unit) {
      return ' * 1' + unit;
    },
    $signature: 5,
  };
  K._removeUnits_closure0.prototype = {
    call$1(unit) {
      return ' / 1' + unit;
    },
    $signature: 5,
  };
  K._hwb_closure.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless(alpha.assertNumber$1('alpha'), 1, 'alpha');
    },
    $signature: 81,
  };
  K._parseChannels_closure.prototype = {
    call$1(value) {
      return value.get$isVar();
    },
    $signature: 54,
  };
  D._length_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).get$asList().length;
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  D._nth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1);
      return list.get$asList()[list.sassIndexToListIndex$2(index, 'n')];
    },
    $signature: 3,
  };
  D._setNth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1),
        value = t1.$index($arguments, 2),
        t2 = list.get$asList(),
        newList = H._setArrayType(t2.slice(0), H._arrayInstanceType(t2));
      newList[list.sassIndexToListIndex$2(index, 'n')] = value;
      return t1.$index($arguments, 0).withListContents$1(newList);
    },
    $signature: 20,
  };
  D._join_closure.prototype = {
    call$1($arguments) {
      var separator,
        bracketed,
        t1 = J.getInterceptor$asx($arguments),
        list1 = t1.$index($arguments, 0),
        list2 = t1.$index($arguments, 1),
        separatorParam = t1.$index($arguments, 2).assertString$1('separator'),
        bracketedParam = t1.$index($arguments, 3);
      t1 = separatorParam.text;
      if (t1 === 'auto')
        if (list1.get$separator() !== C.ListSeparator_undecided_null)
          separator = list1.get$separator();
        else
          separator =
            list2.get$separator() !== C.ListSeparator_undecided_null
              ? list2.get$separator()
              : C.ListSeparator_woc;
      else if (t1 === 'space') separator = C.ListSeparator_woc;
      else if (t1 === 'comma') separator = C.ListSeparator_kWM;
      else {
        if (t1 !== 'slash')
          throw H.wrapException(E.SassScriptException$(string$.x24separ));
        separator = C.ListSeparator_1gm;
      }
      bracketed =
        bracketedParam instanceof D.SassString && bracketedParam.text === 'auto'
          ? list1.get$hasBrackets()
          : bracketedParam.get$isTruthy();
      t1 = P.List_List$of(list1.get$asList(), true, type$.Value);
      C.JSArray_methods.addAll$1(t1, list2.get$asList());
      return D.SassList$(t1, separator, bracketed);
    },
    $signature: 20,
  };
  D._append_closure0.prototype = {
    call$1($arguments) {
      var separator,
        t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        value = t1.$index($arguments, 1);
      t1 = t1.$index($arguments, 2).assertString$1('separator').text;
      if (t1 === 'auto')
        separator =
          list.get$separator() === C.ListSeparator_undecided_null
            ? C.ListSeparator_woc
            : list.get$separator();
      else if (t1 === 'space') separator = C.ListSeparator_woc;
      else if (t1 === 'comma') separator = C.ListSeparator_kWM;
      else {
        if (t1 !== 'slash')
          throw H.wrapException(E.SassScriptException$(string$.x24separ));
        separator = C.ListSeparator_1gm;
      }
      t1 = P.List_List$of(list.get$asList(), true, type$.Value);
      t1.push(value);
      return list.withListContents$2$separator(t1, separator);
    },
    $signature: 20,
  };
  D._zip_closure.prototype = {
    call$1($arguments) {
      var results,
        result,
        _box_0 = {},
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,List<Value>>'
        ),
        lists = P.List_List$of(
          new H.MappedListIterable(t1, new D._zip__closure(), t2),
          true,
          t2._eval$1('ListIterable.E')
        );
      if (lists.length === 0) return C.SassList_yfz;
      _box_0.i = 0;
      results = H._setArrayType([], type$.JSArray_SassList);
      for (
        t1 = H._arrayInstanceType(lists)._eval$1('MappedListIterable<1,Value>'),
          t2 = type$.Value;
        C.JSArray_methods.every$1(lists, new D._zip__closure0(_box_0));

      ) {
        result = P.List_List$from(
          new H.MappedListIterable(lists, new D._zip__closure1(_box_0), t1),
          false,
          t2
        );
        result.fixed$length = Array;
        result.immutable$list = Array;
        results.push(new D.SassList(result, C.ListSeparator_woc, false));
        ++_box_0.i;
      }
      return D.SassList$(results, C.ListSeparator_kWM, false);
    },
    $signature: 20,
  };
  D._zip__closure.prototype = {
    call$1(list) {
      return list.get$asList();
    },
    $signature: 282,
  };
  D._zip__closure0.prototype = {
    call$1(list) {
      return this._box_0.i !== J.get$length$asx(list);
    },
    $signature: 281,
  };
  D._zip__closure1.prototype = {
    call$1(list) {
      return J.$index$asx(list, this._box_0.i);
    },
    $signature: 3,
  };
  D._index_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        index = C.JSArray_methods.indexOf$1(
          t1.$index($arguments, 0).get$asList(),
          t1.$index($arguments, 1)
        );
      if (index === -1) t1 = C.C__SassNull0;
      else t1 = new N.UnitlessSassNumber(index + 1, null);
      return t1;
    },
    $signature: 3,
  };
  D._separator_closure.prototype = {
    call$1($arguments) {
      switch (J.$index$asx($arguments, 0).get$separator()) {
        case C.ListSeparator_kWM:
          return new D.SassString('comma', false);
        case C.ListSeparator_1gm:
          return new D.SassString('slash', false);
        default:
          return new D.SassString('space', false);
      }
    },
    $signature: 11,
  };
  D._isBracketed_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).get$hasBrackets()
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  D._slash_closure.prototype = {
    call$1($arguments) {
      var list = J.$index$asx($arguments, 0).get$asList();
      if (list.length < 2)
        throw H.wrapException(
          E.SassScriptException$('At least two elements are required.')
        );
      return D.SassList$(list, C.ListSeparator_1gm, false);
    },
    $signature: 20,
  };
  A._get_closure.prototype = {
    call$1($arguments) {
      var t3,
        value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (
        t1 = H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value
        ),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t3 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();
        map = value
      ) {
        value = map.contents.$index(0, t3._as(t1.__internal$_current));
        if (!(value instanceof A.SassMap)) return C.C__SassNull0;
      }
      t1 = map.contents.$index(0, C.JSArray_methods.get$last(t2));
      return t1 == null ? C.C__SassNull0 : t1;
    },
    $signature: 3,
  };
  A._set_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._modify(
        t1.$index($arguments, 0).assertMap$1('map'),
        H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value),
        new A._set__closure0($arguments),
        true
      );
    },
    $signature: 3,
  };
  A._set__closure0.prototype = {
    call$1(_) {
      return J.$index$asx(this.$arguments, 2);
    },
    $signature: 31,
  };
  A._set_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$('Expected $args to contain a key.')
        );
      else if (t1 === 1)
        throw H.wrapException(
          E.SassScriptException$('Expected $args to contain a value.')
        );
      return A._modify(
        map,
        C.JSArray_methods.sublist$2(args, 0, t1 - 1),
        new A._set__closure(args),
        true
      );
    },
    $signature: 3,
  };
  A._set__closure.prototype = {
    call$1(_) {
      return C.JSArray_methods.get$last(this.args);
    },
    $signature: 31,
  };
  A._merge_closure.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1('map1'),
        map2 = t1.$index($arguments, 1).assertMap$1('map2');
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = map1.contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (
        t3 = map2.contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 29,
  };
  A._merge_closure0.prototype = {
    call$1($arguments) {
      var map2,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1('map1'),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$('Expected $args to contain a key.')
        );
      else if (t1 === 1)
        throw H.wrapException(
          E.SassScriptException$('Expected $args to contain a map.')
        );
      map2 = C.JSArray_methods.get$last(args).assertMap$1('map2');
      return A._modify(
        map1,
        H.SubListIterable$(
          args,
          0,
          H.checkNotNullable(args.length - 1, 'count', type$.int),
          H._arrayInstanceType(args)._precomputed1
        ),
        new A._merge__closure(map2),
        true
      );
    },
    $signature: 3,
  };
  A._merge__closure.prototype = {
    call$1(oldValue) {
      var t1,
        t2,
        t3,
        t4,
        nestedMap = oldValue.tryMap$0();
      if (nestedMap == null) return this.map2;
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = nestedMap.contents,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (
        t3 = this.map2.contents,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 280,
  };
  A._deepMerge_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._deepMergeImpl(
        t1.$index($arguments, 0).assertMap$1('map1'),
        t1.$index($arguments, 1).assertMap$1('map2')
      );
    },
    $signature: 29,
  };
  A._deepRemove_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      return A._modify(
        map,
        H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value
        ),
        new A._deepRemove__closure(t2),
        false
      );
    },
    $signature: 3,
  };
  A._deepRemove__closure.prototype = {
    call$1(value) {
      var t1,
        t2,
        nestedMap = value.tryMap$0();
      if (
        nestedMap != null &&
        nestedMap.contents.containsKey$1(C.JSArray_methods.get$last(this.keys))
      ) {
        t1 = type$.Value;
        t2 = P.LinkedHashMap_LinkedHashMap$of(nestedMap.contents, t1, t1);
        t2.remove$1(0, C.JSArray_methods.get$last(this.keys));
        return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
      }
      return value;
    },
    $signature: 31,
  };
  A._remove_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).assertMap$1('map');
    },
    $signature: 29,
  };
  A._remove_closure0.prototype = {
    call$1($arguments) {
      var mutableMap,
        t3,
        _i,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      t1 = type$.Value;
      mutableMap = P.LinkedHashMap_LinkedHashMap$of(map.contents, t1, t1);
      for (
        t3 = t2.length, _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      )
        mutableMap.remove$1(0, t2[_i]);
      return new A.SassMap(H.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 29,
  };
  A._keys_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1('map').contents;
      return D.SassList$(t1.get$keys(t1), C.ListSeparator_kWM, false);
    },
    $signature: 20,
  };
  A._values_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1('map').contents;
      return D.SassList$(t1.get$values(t1), C.ListSeparator_kWM, false);
    },
    $signature: 20,
  };
  A._hasKey_closure.prototype = {
    call$1($arguments) {
      var t3,
        value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (
        t1 = H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value
        ),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t3 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();
        map = value
      ) {
        value = map.contents.$index(0, t3._as(t1.__internal$_current));
        if (!(value instanceof A.SassMap)) return C.SassBoolean_false0;
      }
      return map.contents.containsKey$1(C.JSArray_methods.get$last(t2))
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  A._modify__modifyNestedMap.prototype = {
    call$1(map) {
      var nestedMap,
        _this = this,
        t1 = type$.Value,
        mutableMap = P.LinkedHashMap_LinkedHashMap$of(map.contents, t1, t1),
        t2 = _this.keyIterator,
        key = t2.get$current();
      if (!t2.moveNext$0()) {
        t2 = mutableMap.$index(0, key);
        if (t2 == null) t2 = C.C__SassNull0;
        mutableMap.$indexSet(0, key, _this.modify.call$1(t2));
        return new A.SassMap(
          H.ConstantMap_ConstantMap$from(mutableMap, t1, t1)
        );
      }
      t2 = mutableMap.$index(0, key);
      nestedMap = t2 == null ? null : t2.tryMap$0();
      t2 = nestedMap == null;
      if (t2 && !_this.addNesting)
        return new A.SassMap(
          H.ConstantMap_ConstantMap$from(mutableMap, t1, t1)
        );
      mutableMap.$indexSet(
        0,
        key,
        _this.call$1(t2 ? C.SassMap_Map_empty : nestedMap)
      );
      return new A.SassMap(H.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 278,
  };
  A._deepMergeImpl__ensureMutable.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      if (t1.mutable) return;
      t1.mutable = true;
      t2 = type$.Value;
      t1.result = P.LinkedHashMap_LinkedHashMap$of(t1.result, t2, t2);
    },
    $signature: 0,
  };
  A._deepMergeImpl_closure.prototype = {
    call$2(key, value) {
      var resultMap,
        valueMap,
        merged,
        t1 = this._box_0,
        resultValue = t1.result.$index(0, key);
      if (resultValue == null) {
        this._ensureMutable.call$0();
        t1.result.$indexSet(0, key, value);
      } else {
        resultMap = resultValue.tryMap$0();
        valueMap = value.tryMap$0();
        if (resultMap != null && valueMap != null) {
          merged = A._deepMergeImpl(valueMap, resultMap);
          if (merged === resultMap) return;
          this._ensureMutable.call$0();
          t1.result.$indexSet(0, key, merged);
        }
      }
    },
    $signature: 44,
  };
  K._ceil_closure.prototype = {
    call$1(value) {
      return C.JSNumber_methods.ceil$0(value);
    },
    $signature: 34,
  };
  K._clamp_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        min = t1.$index($arguments, 0).assertNumber$1('min'),
        number = t1.$index($arguments, 1).assertNumber$1('number'),
        max = t1.$index($arguments, 2).assertNumber$1('max');
      number.convertValueToMatch$3(min, 'number', 'min');
      max.convertValueToMatch$3(min, 'max', 'min');
      if (min.greaterThanOrEquals$1(max).value) return min;
      if (min.greaterThanOrEquals$1(number).value) return min;
      if (number.greaterThanOrEquals$1(max).value) return max;
      return number;
    },
    $signature: 8,
  };
  K._floor_closure.prototype = {
    call$1(value) {
      return C.JSNumber_methods.floor$0(value);
    },
    $signature: 34,
  };
  K._max_closure.prototype = {
    call$1($arguments) {
      var t1, t2, max, _i, number;
      for (
        t1 = J.$index$asx($arguments, 0).get$asList(),
          t2 = t1.length,
          max = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        number = t1[_i].assertNumber$0();
        if (max == null || max.lessThan$1(number).value) max = number;
      }
      if (max != null) return max;
      throw H.wrapException(
        E.SassScriptException$('At least one argument must be passed.')
      );
    },
    $signature: 8,
  };
  K._min_closure.prototype = {
    call$1($arguments) {
      var t1, t2, min, _i, number;
      for (
        t1 = J.$index$asx($arguments, 0).get$asList(),
          t2 = t1.length,
          min = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        number = t1[_i].assertNumber$0();
        if (min == null || min.greaterThan$1(number).value) min = number;
      }
      if (min != null) return min;
      throw H.wrapException(
        E.SassScriptException$('At least one argument must be passed.')
      );
    },
    $signature: 8,
  };
  K._abs_closure.prototype = {
    call$1(value) {
      return Math.abs(value);
    },
    $signature: 71,
  };
  K._hypot_closure.prototype = {
    call$1($arguments) {
      var subtotal,
        i,
        i0,
        t3,
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,SassNumber>'
        ),
        numbers = P.List_List$of(
          new H.MappedListIterable(t1, new K._hypot__closure(), t2),
          true,
          t2._eval$1('ListIterable.E')
        );
      t1 = numbers.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$('At least one argument must be passed.')
        );
      for (subtotal = 0, i = 0; i < t1; i = i0) {
        i0 = i + 1;
        subtotal += Math.pow(
          numbers[i].convertValueToMatch$3(
            numbers[0],
            'numbers[' + i0 + ']',
            'numbers[1]'
          ),
          2
        );
      }
      t1 = Math.sqrt(subtotal);
      t2 = numbers[0];
      t3 = t2.get$numeratorUnits();
      return T.SassNumber_SassNumber$withUnits(
        t1,
        t2.get$denominatorUnits(),
        t3
      );
    },
    $signature: 8,
  };
  K._hypot__closure.prototype = {
    call$1(argument) {
      return argument.assertNumber$0();
    },
    $signature: 277,
  };
  K._log_closure.prototype = {
    call$1($arguments) {
      var numberValue,
        base,
        baseValue,
        t2,
        _s18_ = ' to have no units.',
        t1 = J.getInterceptor$asx($arguments),
        number = t1.$index($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$number: Expected ' + number.toString$0(0) + _s18_
          )
        );
      numberValue = K._fuzzyRoundIfZero(number.value);
      if (J.$eq$(t1.$index($arguments, 1), C.C__SassNull0)) {
        t1 = Math.log(numberValue);
        return new N.UnitlessSassNumber(t1, null);
      }
      base = t1.$index($arguments, 1).assertNumber$1('base');
      if (base.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$base: Expected ' + base.toString$0(0) + _s18_
          )
        );
      t1 = base.value;
      baseValue =
        Math.abs(t1 - 1) < $.$get$epsilon()
          ? T.fuzzyRound(t1)
          : K._fuzzyRoundIfZero(t1);
      t1 = Math.log(numberValue);
      t2 = Math.log(baseValue);
      return new N.UnitlessSassNumber(t1 / t2, null);
    },
    $signature: 8,
  };
  K._pow_closure.prototype = {
    call$1($arguments) {
      var baseValue,
        exponentValue,
        t2,
        intExponent,
        t3,
        _s18_ = ' to have no units.',
        _null = null,
        t1 = J.getInterceptor$asx($arguments),
        base = t1.$index($arguments, 0).assertNumber$1('base'),
        exponent = t1.$index($arguments, 1).assertNumber$1('exponent');
      if (base.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$base: Expected ' + base.toString$0(0) + _s18_
          )
        );
      else if (exponent.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$exponent: Expected ' + exponent.toString$0(0) + _s18_
          )
        );
      baseValue = K._fuzzyRoundIfZero(base.value);
      exponentValue = K._fuzzyRoundIfZero(exponent.value);
      t1 = $.$get$epsilon();
      if (Math.abs(Math.abs(baseValue) - 1) < t1)
        t2 = exponentValue == 1 / 0 || exponentValue == -1 / 0;
      else t2 = false;
      if (t2) return new N.UnitlessSassNumber(0 / 0, _null);
      else {
        t2 = Math.abs(baseValue - 0);
        if (t2 < t1) {
          if (isFinite(exponentValue)) {
            intExponent = T.fuzzyIsInt(exponentValue)
              ? C.JSNumber_methods.round$0(exponentValue)
              : _null;
            if (
              intExponent != null &&
              C.JSInt_methods.$mod(intExponent, 2) === 1
            )
              exponentValue = T.fuzzyRound(exponentValue);
          }
        } else {
          if (isFinite(baseValue))
            t3 =
              baseValue < 0 &&
              !(t2 < t1) &&
              isFinite(exponentValue) &&
              T.fuzzyIsInt(exponentValue);
          else t3 = false;
          if (t3) exponentValue = T.fuzzyRound(exponentValue);
          else {
            if (baseValue == 1 / 0 || baseValue == -1 / 0)
              t1 = baseValue < 0 && !(t2 < t1) && isFinite(exponentValue);
            else t1 = false;
            if (t1) {
              intExponent = T.fuzzyIsInt(exponentValue)
                ? C.JSNumber_methods.round$0(exponentValue)
                : _null;
              if (
                intExponent != null &&
                C.JSInt_methods.$mod(intExponent, 2) === 1
              )
                exponentValue = T.fuzzyRound(exponentValue);
            }
          }
        }
      }
      t1 = Math.pow(baseValue, exponentValue);
      return new N.UnitlessSassNumber(t1, _null);
    },
    $signature: 8,
  };
  K._sqrt_closure.prototype = {
    call$1($arguments) {
      var t1,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      t1 = Math.sqrt(K._fuzzyRoundIfZero(number.value));
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._acos_closure.prototype = {
    call$1($arguments) {
      var numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      numberValue = number.value;
      if (Math.abs(Math.abs(numberValue) - 1) < $.$get$epsilon())
        numberValue = T.fuzzyRound(numberValue);
      return T.SassNumber_SassNumber$withUnits(
        (Math.acos(numberValue) * 180) / 3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 8,
  };
  K._asin_closure.prototype = {
    call$1($arguments) {
      var t1,
        numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      t1 = number.value;
      numberValue =
        Math.abs(Math.abs(t1) - 1) < $.$get$epsilon()
          ? T.fuzzyRound(t1)
          : K._fuzzyRoundIfZero(t1);
      return T.SassNumber_SassNumber$withUnits(
        (Math.asin(numberValue) * 180) / 3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 8,
  };
  K._atan_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      return T.SassNumber_SassNumber$withUnits(
        (Math.atan(K._fuzzyRoundIfZero(number.value)) * 180) /
          3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 8,
  };
  K._atan2_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        y = t1.$index($arguments, 0).assertNumber$1('y'),
        xValue = K._fuzzyRoundIfZero(
          t1
            .$index($arguments, 1)
            .assertNumber$1('x')
            .convertValueToMatch$3(y, 'x', 'y')
        );
      return T.SassNumber_SassNumber$withUnits(
        (Math.atan2(K._fuzzyRoundIfZero(y.value), xValue) * 180) /
          3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 8,
  };
  K._cos_closure.prototype = {
    call$1($arguments) {
      var t1 = Math.cos(
        J.$index$asx($arguments, 0)
          .assertNumber$1('number')
          .coerceValueToUnit$2('rad', 'number')
      );
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._sin_closure.prototype = {
    call$1($arguments) {
      var t1 = Math.sin(
        K._fuzzyRoundIfZero(
          J.$index$asx($arguments, 0)
            .assertNumber$1('number')
            .coerceValueToUnit$2('rad', 'number')
        )
      );
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  K._tan_closure.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0)
          .assertNumber$1('number')
          .coerceValueToUnit$2('rad', 'number'),
        t1 = C.JSNumber_methods.$mod(
          value - 1.5707963267948966,
          6.283185307179586
        ),
        t2 = $.$get$epsilon();
      if (Math.abs(t1 - 0) < t2) return new N.UnitlessSassNumber(1 / 0, null);
      else if (
        Math.abs(
          C.JSNumber_methods.$mod(
            value + 1.5707963267948966,
            6.283185307179586
          ) - 0
        ) < t2
      )
        return new N.UnitlessSassNumber(-1 / 0, null);
      else {
        t1 = Math.tan(K._fuzzyRoundIfZero(value));
        return new N.UnitlessSassNumber(t1, null);
      }
    },
    $signature: 8,
  };
  K._compatible_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1
        .$index($arguments, 0)
        .assertNumber$1('number1')
        .isComparableTo$1(t1.$index($arguments, 1).assertNumber$1('number2'))
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  K._isUnitless_closure.prototype = {
    call$1($arguments) {
      return !J.$index$asx($arguments, 0)
        .assertNumber$1('number')
        .get$hasUnits()
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  K._unit_closure.prototype = {
    call$1($arguments) {
      return new D.SassString(
        J.$index$asx($arguments, 0).assertNumber$1('number').get$unitString(),
        true
      );
    },
    $signature: 11,
  };
  K._percentage_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number');
      number.assertNoUnits$1('number');
      return new L.SingleUnitSassNumber('%', number.value * 100, null);
    },
    $signature: 8,
  };
  K._randomFunction_closure.prototype = {
    call$1($arguments) {
      var limit,
        t1 = J.getInterceptor$asx($arguments);
      if (J.$eq$(t1.$index($arguments, 0), C.C__SassNull0)) {
        t1 = $.$get$_random0().nextDouble$0();
        return new N.UnitlessSassNumber(t1, null);
      }
      limit = t1
        .$index($arguments, 0)
        .assertNumber$1('limit')
        .assertInt$1('limit');
      if (limit < 1)
        throw H.wrapException(
          E.SassScriptException$(
            '$limit: Must be greater than 0, was ' + limit + '.'
          )
        );
      t1 = $.$get$_random0().nextInt$1(limit);
      return new N.UnitlessSassNumber(t1 + 1, null);
    },
    $signature: 8,
  };
  K._div_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        number1 = t1.$index($arguments, 0),
        number2 = t1.$index($arguments, 1);
      if (
        !(number1 instanceof T.SassNumber) ||
        !(number2 instanceof T.SassNumber)
      )
        N.warn(string$.math_d, false);
      return number1.dividedBy$1(number2);
    },
    $signature: 3,
  };
  K._numberFunction_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number'),
        t1 = this.transform.call$1(number.value),
        t2 = number.get$numeratorUnits();
      return T.SassNumber_SassNumber$withUnits(
        t1,
        number.get$denominatorUnits(),
        t2
      );
    },
    $signature: 8,
  };
  Q.global_closure26.prototype = {
    call$1($arguments) {
      return $._features.contains$1(
        0,
        J.$index$asx($arguments, 0).assertString$1('feature').text
      )
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  Q.global_closure27.prototype = {
    call$1($arguments) {
      return new D.SassString(
        N.serializeValue0(J.get$first$ax($arguments), true, true),
        false
      );
    },
    $signature: 11,
  };
  Q.global_closure28.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0);
      if (value instanceof D.SassArgumentList)
        return new D.SassString('arglist', false);
      if (value instanceof Z.SassBoolean)
        return new D.SassString('bool', false);
      if (value instanceof K.SassColor) return new D.SassString('color', false);
      if (value instanceof D.SassList) return new D.SassString('list', false);
      if (value instanceof A.SassMap) return new D.SassString('map', false);
      if (value.$eq(0, C.C__SassNull0)) return new D.SassString('null', false);
      if (value instanceof T.SassNumber)
        return new D.SassString('number', false);
      if (value instanceof F.SassFunction)
        return new D.SassString('function', false);
      return new D.SassString('string', false);
    },
    $signature: 11,
  };
  Q.global_closure29.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        t3,
        t4,
        argumentList = J.$index$asx($arguments, 0);
      if (argumentList instanceof D.SassArgumentList) {
        t1 = type$.Value;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (
          argumentList._wereKeywordsAccessed = true,
            t3 = argumentList._keywords,
            t3 = t3.get$entries(t3),
            t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t2.$indexSet(0, new D.SassString(t4.key, false), t4.value);
        }
        return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
      } else
        throw H.wrapException(
          '$args: ' + argumentList.toString$0(0) + ' is not an argument list.'
        );
    },
    $signature: 29,
  };
  T._nest_closure.prototype = {
    call$1($arguments) {
      var t1 = {},
        selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw H.wrapException(E.SassScriptException$(string$.x24selec));
      t1.first = true;
      return new H.MappedListIterable(
        selectors,
        new T._nest__closure(t1),
        H._arrayInstanceType(selectors)._eval$1(
          'MappedListIterable<1,SelectorList>'
        )
      )
        .reduce$1(0, new T._nest__closure0())
        .get$asSassList();
    },
    $signature: 20,
  };
  T._nest__closure.prototype = {
    call$1(selector) {
      var t1 = this._box_0,
        result = selector.assertSelector$1$allowParent(!t1.first);
      t1.first = false;
      return result;
    },
    $signature: 147,
  };
  T._nest__closure0.prototype = {
    call$2($parent, child) {
      return child.resolveParentSelectors$1($parent);
    },
    $signature: 148,
  };
  T._append_closure.prototype = {
    call$1($arguments) {
      var selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw H.wrapException(E.SassScriptException$(string$.x24selec));
      return new H.MappedListIterable(
        selectors,
        new T._append__closure(),
        H._arrayInstanceType(selectors)._eval$1(
          'MappedListIterable<1,SelectorList>'
        )
      )
        .reduce$1(0, new T._append__closure0())
        .get$asSassList();
    },
    $signature: 20,
  };
  T._append__closure.prototype = {
    call$1(selector) {
      return selector.assertSelector$0();
    },
    $signature: 147,
  };
  T._append__closure0.prototype = {
    call$2($parent, child) {
      var t1 = child.components;
      return D.SelectorList$(
        new H.MappedListIterable(
          t1,
          new T._append___closure($parent),
          H._arrayInstanceType(t1)._eval$1(
            'MappedListIterable<1,ComplexSelector>'
          )
        )
      ).resolveParentSelectors$1($parent);
    },
    $signature: 148,
  };
  T._append___closure.prototype = {
    call$1(complex) {
      var newCompound,
        t2,
        t1 = complex.components,
        compound = C.JSArray_methods.get$first(t1);
      if (compound instanceof X.CompoundSelector) {
        newCompound = T._prependParent(compound);
        if (newCompound == null)
          throw H.wrapException(
            E.SassScriptException$(
              "Can't append " +
                complex.toString$0(0) +
                ' to ' +
                this.parent.toString$0(0) +
                '.'
            )
          );
        t2 = H._setArrayType(
          [newCompound],
          type$.JSArray_ComplexSelectorComponent
        );
        C.JSArray_methods.addAll$1(
          t2,
          H.SubListIterable$(
            t1,
            1,
            null,
            H._arrayInstanceType(t1)._precomputed1
          )
        );
        return S.ComplexSelector$(t2, false);
      } else
        throw H.wrapException(
          E.SassScriptException$(
            "Can't append " +
              complex.toString$0(0) +
              ' to ' +
              this.parent.toString$0(0) +
              '.'
          )
        );
    },
    $signature: 85,
  };
  T._extend_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name('selector'),
        target = t1.$index($arguments, 1).assertSelector$1$name('extendee');
      return X.ExtensionStore__extendOrReplace(
        selector,
        t1.$index($arguments, 2).assertSelector$1$name('extender'),
        target,
        C.ExtendMode_allTargets,
        Y.currentCallableSpan()
      ).get$asSassList();
    },
    $signature: 20,
  };
  T._replace_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name('selector'),
        target = t1.$index($arguments, 1).assertSelector$1$name('original');
      return X.ExtensionStore__extendOrReplace(
        selector,
        t1.$index($arguments, 2).assertSelector$1$name('replacement'),
        target,
        C.ExtendMode_replace,
        Y.currentCallableSpan()
      ).get$asSassList();
    },
    $signature: 20,
  };
  T._unify_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        result = t1
          .$index($arguments, 0)
          .assertSelector$1$name('selector1')
          .unify$1(t1.$index($arguments, 1).assertSelector$1$name('selector2'));
      return result == null ? C.C__SassNull0 : result.get$asSassList();
    },
    $signature: 3,
  };
  T._isSuperselector_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector1 = t1.$index($arguments, 0).assertSelector$1$name('super'),
        selector2 = t1.$index($arguments, 1).assertSelector$1$name('sub');
      return Y.listIsSuperselector(selector1.components, selector2.components)
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  T._simpleSelectors_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertCompoundSelector$1$name(
        'selector'
      ).components;
      return D.SassList$(
        new H.MappedListIterable(
          t1,
          new T._simpleSelectors__closure(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value>')
        ),
        C.ListSeparator_kWM,
        false
      );
    },
    $signature: 20,
  };
  T._simpleSelectors__closure.prototype = {
    call$1(simple) {
      return new D.SassString(N.serializeSelector(simple, true), false);
    },
    $signature: 275,
  };
  T._parse_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0)
        .assertSelector$1$name('selector')
        .get$asSassList();
    },
    $signature: 20,
  };
  D._unquote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1('string');
      if (!string.hasQuotes) return string;
      return new D.SassString(string.text, false);
    },
    $signature: 11,
  };
  D._quote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1('string');
      if (string.hasQuotes) return string;
      return new D.SassString(string.text, true);
    },
    $signature: 11,
  };
  D._length_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0)
        .assertString$1('string')
        .get$sassLength();
      return new N.UnitlessSassNumber(t1, null);
    },
    $signature: 8,
  };
  D._insert_closure.prototype = {
    call$1($arguments) {
      var indexInt,
        codeUnitIndex,
        _s5_ = 'index',
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1('string'),
        insert = t1.$index($arguments, 1).assertString$1('insert'),
        index = t1.$index($arguments, 2).assertNumber$1(_s5_);
      index.assertNoUnits$1(_s5_);
      indexInt = index.assertInt$1(_s5_);
      if (indexInt < 0) indexInt = string.get$sassLength() + indexInt + 2;
      t1 = string.text;
      codeUnitIndex = B.codepointIndexToCodeUnitIndex(
        t1,
        D._codepointForIndex(indexInt, string.get$sassLength(), false)
      );
      return new D.SassString(
        C.JSString_methods.replaceRange$3(
          t1,
          codeUnitIndex,
          codeUnitIndex,
          insert.text
        ),
        string.hasQuotes
      );
    },
    $signature: 11,
  };
  D._index_closure.prototype = {
    call$1($arguments) {
      var codepointIndex,
        t1 = J.getInterceptor$asx($arguments),
        t2 = t1.$index($arguments, 0).assertString$1('string').text,
        codeUnitIndex = C.JSString_methods.indexOf$1(
          t2,
          t1.$index($arguments, 1).assertString$1('substring').text
        );
      if (codeUnitIndex === -1) return C.C__SassNull0;
      codepointIndex = B.codeUnitIndexToCodepointIndex(t2, codeUnitIndex);
      return new N.UnitlessSassNumber(codepointIndex + 1, null);
    },
    $signature: 3,
  };
  D._slice_closure.prototype = {
    call$1($arguments) {
      var lengthInCodepoints,
        endInt,
        startCodepoint,
        endCodepoint,
        _s8_ = 'start-at',
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1('string'),
        start = t1.$index($arguments, 1).assertNumber$1(_s8_),
        end = t1.$index($arguments, 2).assertNumber$1('end-at');
      start.assertNoUnits$1(_s8_);
      end.assertNoUnits$1('end-at');
      lengthInCodepoints = string.get$sassLength();
      endInt = end.assertInt$0();
      if (endInt === 0)
        return string.hasQuotes
          ? $.$get$_emptyQuoted()
          : $.$get$_emptyUnquoted();
      startCodepoint = D._codepointForIndex(
        start.assertInt$0(),
        lengthInCodepoints,
        false
      );
      endCodepoint = D._codepointForIndex(endInt, lengthInCodepoints, true);
      if (endCodepoint === lengthInCodepoints) --endCodepoint;
      if (endCodepoint < startCodepoint)
        return string.hasQuotes
          ? $.$get$_emptyQuoted()
          : $.$get$_emptyUnquoted();
      t1 = string.text;
      return new D.SassString(
        C.JSString_methods.substring$2(
          t1,
          B.codepointIndexToCodeUnitIndex(t1, startCodepoint),
          B.codepointIndexToCodeUnitIndex(t1, endCodepoint + 1)
        ),
        string.hasQuotes
      );
    },
    $signature: 11,
  };
  D._toUpperCase_closure.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        i,
        t3,
        t4,
        string = J.$index$asx($arguments, 0).assertString$1('string');
      for (t1 = string.text, t2 = t1.length, i = 0, t3 = ''; i < t2; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1(t1, i);
        t3 += H.Primitives_stringFromCharCode(
          t4 >= 97 && t4 <= 122 ? t4 & 4294967263 : t4
        );
      }
      return new D.SassString(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        string.hasQuotes
      );
    },
    $signature: 11,
  };
  D._toLowerCase_closure.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        i,
        t3,
        t4,
        string = J.$index$asx($arguments, 0).assertString$1('string');
      for (t1 = string.text, t2 = t1.length, i = 0, t3 = ''; i < t2; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1(t1, i);
        t3 += H.Primitives_stringFromCharCode(
          t4 >= 65 && t4 <= 90 ? t4 | 32 : t4
        );
      }
      return new D.SassString(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        string.hasQuotes
      );
    },
    $signature: 11,
  };
  D._uniqueId_closure.prototype = {
    call$1($arguments) {
      var t1 =
        $.$get$_previousUniqueId() + ($.$get$_random().nextInt$1(36) + 1);
      $._previousUniqueId = t1;
      if (t1 > Math.pow(36, 6))
        $._previousUniqueId = C.JSInt_methods.$mod(
          $.$get$_previousUniqueId(),
          H._asInt(Math.pow(36, 6))
        );
      return new D.SassString(
        'u' +
          C.JSString_methods.padLeft$2(
            J.toRadixString$1$n($.$get$_previousUniqueId(), 36),
            6,
            '0'
          ),
        false
      );
    },
    $signature: 11,
  };
  R.ImportCache.prototype = {
    canonicalize$4$baseImporter$baseUrl$forImport(
      url,
      baseImporter,
      baseUrl,
      forImport
    ) {
      var resolvedUrl, canonicalUrl;
      if (baseImporter != null) {
        resolvedUrl = baseUrl == null ? null : baseUrl.resolveUri$1(url);
        if (resolvedUrl == null) resolvedUrl = url;
        canonicalUrl = this._canonicalize$3(
          baseImporter,
          resolvedUrl,
          forImport
        );
        if (canonicalUrl != null)
          return new S.Tuple3(
            baseImporter,
            canonicalUrl,
            resolvedUrl,
            type$.Tuple3_Importer_Uri_Uri
          );
      }
      return this._canonicalizeCache.putIfAbsent$2(
        new S.Tuple2(url, forImport, type$.Tuple2_Uri_bool),
        new R.ImportCache_canonicalize_closure(this, url, forImport)
      );
    },
    canonicalize$3$baseImporter$baseUrl(url, baseImporter, baseUrl) {
      return this.canonicalize$4$baseImporter$baseUrl$forImport(
        url,
        baseImporter,
        baseUrl,
        false
      );
    },
    _canonicalize$3(importer, url, forImport) {
      var t1, result;
      if (forImport) {
        t1 = type$.nullable_Object;
        result = P.runZoned(
          new R.ImportCache__canonicalize_closure(importer, url),
          P.LinkedHashMap_LinkedHashMap$_literal(
            [C.Symbol__inImportRule, true],
            t1,
            t1
          ),
          type$.nullable_Uri
        );
      } else result = importer.canonicalize$1(url);
      if ((result == null ? null : result.get$scheme()) === '')
        this._logger.warn$2$deprecation(
          0,
          'Importer ' +
            importer.toString$0(0) +
            ' canonicalized ' +
            url.toString$0(0) +
            ' to ' +
            H.S(result) +
            string$.x2e_Rela,
          true
        );
      return result;
    },
    importCanonical$4$originalUrl$quiet(
      importer,
      canonicalUrl,
      originalUrl,
      quiet
    ) {
      return this._importCache.putIfAbsent$2(
        canonicalUrl,
        new R.ImportCache_importCanonical_closure(
          this,
          importer,
          canonicalUrl,
          originalUrl,
          quiet
        )
      );
    },
    importCanonical$3$originalUrl(importer, canonicalUrl, originalUrl) {
      return this.importCanonical$4$originalUrl$quiet(
        importer,
        canonicalUrl,
        originalUrl,
        false
      );
    },
    humanize$1(canonicalUrl) {
      var t2,
        url,
        t1 = this._canonicalizeCache;
      t1 = A.IterableNullableExtension_whereNotNull(
        t1.get$values(t1),
        type$.Tuple3_Importer_Uri_Uri
      );
      t2 = t1.$ti;
      url = Y.minBy(
        new H.MappedIterable(
          new H.WhereIterable(
            t1,
            new R.ImportCache_humanize_closure(canonicalUrl),
            t2._eval$1('WhereIterable<Iterable.E>')
          ),
          new R.ImportCache_humanize_closure0(),
          t2._eval$1('MappedIterable<Iterable.E,Uri>')
        ),
        new R.ImportCache_humanize_closure1()
      );
      if (url == null) return canonicalUrl;
      t1 = $.$get$url();
      return url.resolve$1(
        X.ParsedPath_ParsedPath$parse(
          canonicalUrl.get$path(canonicalUrl),
          t1.style
        ).get$basename()
      );
    },
  };
  R.ImportCache_canonicalize_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _i, importer, canonicalUrl;
      for (
        t1 = this.$this,
          t2 = t1._importers,
          t3 = t2.length,
          t4 = this.url,
          t5 = this.forImport,
          _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      ) {
        importer = t2[_i];
        canonicalUrl = t1._canonicalize$3(importer, t4, t5);
        if (canonicalUrl != null)
          return new S.Tuple3(
            importer,
            canonicalUrl,
            t4,
            type$.Tuple3_Importer_Uri_Uri
          );
      }
      return null;
    },
    $signature: 90,
  };
  R.ImportCache__canonicalize_closure.prototype = {
    call$0() {
      return this.importer.canonicalize$1(this.url);
    },
    $signature: 272,
  };
  R.ImportCache_importCanonical_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.canonicalUrl,
        result = _this.importer.load$1(0, t1),
        t2 = _this.$this;
      t2._resultsCache.$indexSet(0, t1, result);
      t1 = _this.originalUrl.resolveUri$1(t1);
      t2 = _this.quiet ? $.$get$Logger_quiet() : t2._logger;
      return V.Stylesheet_Stylesheet$parse(
        result.contents,
        result.syntax,
        t2,
        t1
      );
    },
    $signature: 91,
  };
  R.ImportCache_humanize_closure.prototype = {
    call$1(tuple) {
      return tuple.item2.$eq(0, this.canonicalUrl);
    },
    $signature: 265,
  };
  R.ImportCache_humanize_closure0.prototype = {
    call$1(tuple) {
      return tuple.item3;
    },
    $signature: 253,
  };
  R.ImportCache_humanize_closure1.prototype = {
    call$1(url) {
      return url.get$path(url).length;
    },
    $signature: 99,
  };
  M.Importer.prototype = {
    modificationTime$1(url) {
      return new P.DateTime(Date.now(), false);
    },
    couldCanonicalize$2(url, canonicalUrl) {
      return true;
    },
  };
  B.AsyncImporter.prototype = {};
  F.FilesystemImporter.prototype = {
    canonicalize$1(url) {
      if (url.get$scheme() !== 'file' && url.get$scheme() !== '') return null;
      return X.NullableExtension_andThen(
        B.resolveImportPath(
          D.join(
            this._loadPath,
            $.$get$context().style.pathFromUri$1(M._parseUri(url)),
            null
          )
        ),
        new F.FilesystemImporter_canonicalize_closure()
      );
    },
    load$1(_, url) {
      var path = $.$get$context().style.pathFromUri$1(M._parseUri(url)),
        t1 = B.readFile(path),
        t2 = M.Syntax_forPath(path),
        t3 = url.get$scheme();
      if (t3 === '')
        H.throwExpression(
          P.ArgumentError$value(url, 'sourceMapUrl', 'must be absolute')
        );
      return new E.ImporterResult(t1, url, t2);
    },
    modificationTime$1(url) {
      return B.modificationTime(
        $.$get$context().style.pathFromUri$1(M._parseUri(url))
      );
    },
    couldCanonicalize$2(url, canonicalUrl) {
      var t1, t2, t3, basename, canonicalBasename;
      if (url.get$scheme() !== 'file' && url.get$scheme() !== '') return false;
      if (canonicalUrl.get$scheme() !== 'file') return false;
      t1 = $.$get$url();
      t2 = url.get$path(url);
      t3 = t1.style;
      basename = X.ParsedPath_ParsedPath$parse(t2, t3).get$basename();
      canonicalBasename = X.ParsedPath_ParsedPath$parse(
        canonicalUrl.get$path(canonicalUrl),
        t3
      ).get$basename();
      if (
        !C.JSString_methods.startsWith$1(basename, '_') &&
        C.JSString_methods.startsWith$1(canonicalBasename, '_')
      )
        canonicalBasename = C.JSString_methods.substring$1(
          canonicalBasename,
          1
        );
      return (
        basename === canonicalBasename ||
        basename === t1.withoutExtension$1(canonicalBasename)
      );
    },
    toString$0(_) {
      return this._loadPath;
    },
  };
  F.FilesystemImporter_canonicalize_closure.prototype = {
    call$1(resolved) {
      var t1,
        t2,
        t0,
        _null = null;
      if (
        J.$eq$(J.get$platform$x(self.process), 'win32') ||
        J.$eq$(J.get$platform$x(self.process), 'darwin')
      ) {
        t1 = $.$get$context();
        t2 = F._realCasePath(
          t1.absolute$7(
            t1.normalize$1(resolved),
            _null,
            _null,
            _null,
            _null,
            _null,
            _null
          )
        );
        t0 = t2;
        t2 = t1;
        t1 = t0;
      } else {
        t1 = $.$get$context();
        t2 = t1.canonicalize$1(resolved);
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      return t2.toUri$1(t1);
    },
    $signature: 155,
  };
  E.ImporterResult.prototype = {
    get$sourceMapUrl() {
      return this._sourceMapUrl;
    },
  };
  B.resolveImportPath_closure.prototype = {
    call$0() {
      return B._exactlyOne(
        B._tryPath(
          $.$get$context().withoutExtension$1(this.path) +
            '.import' +
            this.extension
        )
      );
    },
    $signature: 37,
  };
  B.resolveImportPath_closure0.prototype = {
    call$0() {
      return B._exactlyOne(B._tryPathWithExtensions(this.path + '.import'));
    },
    $signature: 37,
  };
  B._tryPathAsDirectory_closure.prototype = {
    call$0() {
      return B._exactlyOne(
        B._tryPathWithExtensions(D.join(this.path, 'index.import', null))
      );
    },
    $signature: 37,
  };
  B._exactlyOne_closure.prototype = {
    call$1(path) {
      var t1 = $.$get$context();
      return '  ' + t1.prettyUri$1(t1.toUri$1(path));
    },
    $signature: 5,
  };
  Z.InterpolationBuffer.prototype = {
    writeCharCode$1(character) {
      this._interpolation_buffer$_text._contents += H.Primitives_stringFromCharCode(
        character
      );
      return null;
    },
    add$1(_, expression) {
      this._flushText$0();
      this._interpolation_buffer$_contents.push(expression);
    },
    addInterpolation$1(interpolation) {
      var first,
        t1,
        _this = this,
        toAdd = interpolation.contents;
      if (toAdd.length === 0) return;
      first = C.JSArray_methods.get$first(toAdd);
      if (typeof first == 'string') {
        _this._interpolation_buffer$_text._contents += first;
        toAdd = H.SubListIterable$(
          toAdd,
          1,
          null,
          H._arrayInstanceType(toAdd)._precomputed1
        );
      }
      _this._flushText$0();
      t1 = _this._interpolation_buffer$_contents;
      C.JSArray_methods.addAll$1(t1, toAdd);
      if (typeof C.JSArray_methods.get$last(t1) == 'string')
        _this._interpolation_buffer$_text._contents += H.S(t1.pop());
    },
    _flushText$0() {
      var t1 = this._interpolation_buffer$_text,
        t2 = t1._contents;
      if (t2.length === 0) return;
      this._interpolation_buffer$_contents.push(
        t2.charCodeAt(0) == 0 ? t2 : t2
      );
      t1._contents = '';
    },
    interpolation$1(span) {
      var t1 = P.List_List$of(
          this._interpolation_buffer$_contents,
          true,
          type$.Object
        ),
        t2 = this._interpolation_buffer$_text._contents;
      if (t2.length !== 0) t1.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      return X.Interpolation$(t1, span);
    },
    toString$0(_) {
      var t1, t2, _i, t3, element;
      for (
        t1 = this._interpolation_buffer$_contents,
          t2 = t1.length,
          _i = 0,
          t3 = '';
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        element = t1[_i];
        t3 =
          typeof element == 'string'
            ? t3 + element
            : t3 + '#{' + H.S(element) + H.Primitives_stringFromCharCode(125);
      }
      t1 = t3 + this._interpolation_buffer$_text.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  F._realCasePath_helper.prototype = {
    call$1(path) {
      var dirname = $.$get$context().dirname$1(path);
      if (dirname === path) return path;
      return $._realCaseCache.putIfAbsent$2(
        path,
        new F._realCasePath_helper_closure(this, dirname, path)
      );
    },
    $signature: 5,
  };
  F._realCasePath_helper_closure.prototype = {
    call$0() {
      var matches,
        t2,
        exception,
        realDirname = this.helper.call$1(this.dirname),
        t1 = this.path,
        basename = X.ParsedPath_ParsedPath$parse(
          t1,
          $.$get$context().style
        ).get$basename();
      try {
        matches = J.where$1$ax(
          B.listDir(realDirname, false),
          new F._realCasePath_helper__closure(basename)
        ).toList$0(0);
        t2 =
          J.get$length$asx(matches) !== 1
            ? D.join(realDirname, basename, null)
            : J.$index$asx(matches, 0);
        return t2;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof B.FileSystemException)
          return t1;
        else throw exception;
      }
    },
    $signature: 28,
  };
  F._realCasePath_helper__closure.prototype = {
    call$1(realPath) {
      return B.equalsIgnoreCase(
        X.ParsedPath_ParsedPath$parse(
          realPath,
          $.$get$context().style
        ).get$basename(),
        this.basename
      );
    },
    $signature: 6,
  };
  B.FileSystemException.prototype = {
    toString$0(_) {
      var t1 = $.$get$context();
      return t1.prettyUri$1(t1.toUri$1(this.path)) + ': ' + this.message;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  B.Stderr.prototype = {
    writeln$1(object) {
      J.write$1$x(this._stderr, H.S(object == null ? '' : object) + '\n');
    },
    writeln$0() {
      return this.writeln$1(null);
    },
  };
  B._readFile_closure.prototype = {
    call$0() {
      return J.readFileSync$2$x(D.fs(), this.path, this.encoding);
    },
    $signature: 70,
  };
  B.writeFile_closure.prototype = {
    call$0() {
      return J.writeFileSync$2$x(D.fs(), this.path, this.contents);
    },
    $signature: 0,
  };
  B.deleteFile_closure.prototype = {
    call$0() {
      return J.unlinkSync$1$x(D.fs(), this.path);
    },
    $signature: 0,
  };
  B.readStdin_closure.prototype = {
    call$1(result) {
      this._box_0.contents = result;
      this.completer.complete$1(result);
    },
    $signature: 158,
  };
  B.readStdin_closure0.prototype = {
    call$1(chunk) {
      this.sink.add$1(0, type$.List_int._as(chunk));
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 95,
  };
  B.readStdin_closure1.prototype = {
    call$1(_) {
      this.sink.close$0(0);
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 95,
  };
  B.readStdin_closure2.prototype = {
    call$1(e) {
      var t1 = $.$get$stderr();
      t1.writeln$1('Failed to read from stdin');
      t1.writeln$1(e);
      e.toString;
      this.completer.completeError$1(e);
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 95,
  };
  B.fileExists_closure.prototype = {
    call$0() {
      var error,
        systemError,
        exception,
        t1 = this.path;
      if (!J.existsSync$1$x(D.fs(), t1)) return false;
      try {
        t1 = J.isFile$0$x(J.statSync$1$x(D.fs(), t1));
        return t1;
      } catch (exception) {
        error = H.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), 'ENOENT')) return false;
        throw exception;
      }
    },
    $signature: 25,
  };
  B.dirExists_closure.prototype = {
    call$0() {
      var error,
        systemError,
        exception,
        t1 = this.path;
      if (!J.existsSync$1$x(D.fs(), t1)) return false;
      try {
        t1 = J.isDirectory$0$x(J.statSync$1$x(D.fs(), t1));
        return t1;
      } catch (exception) {
        error = H.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), 'ENOENT')) return false;
        throw exception;
      }
    },
    $signature: 25,
  };
  B.ensureDir_closure.prototype = {
    call$0() {
      var error, systemError, exception, t1;
      try {
        J.mkdirSync$1$x(D.fs(), this.path);
      } catch (exception) {
        error = H.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), 'EEXIST')) return;
        if (!J.$eq$(J.get$code$x(systemError), 'ENOENT')) throw exception;
        t1 = this.path;
        B.ensureDir($.$get$context().dirname$1(t1));
        J.mkdirSync$1$x(D.fs(), t1);
      }
    },
    $signature: 0,
  };
  B.listDir_closure.prototype = {
    call$0() {
      var t1 = this.path;
      if (!this.recursive)
        return J.map$1$1$ax(
          J.readdirSync$1$x(D.fs(), t1),
          new B.listDir__closure(t1),
          type$.String
        ).where$1(0, new B.listDir__closure0());
      else return new B.listDir_closure_list().call$1(t1);
    },
    $signature: 160,
  };
  B.listDir__closure.prototype = {
    call$1(child) {
      return D.join(this.path, H._asString(child), null);
    },
    $signature: 65,
  };
  B.listDir__closure0.prototype = {
    call$1(child) {
      return !B.dirExists(child);
    },
    $signature: 6,
  };
  B.listDir_closure_list.prototype = {
    call$1($parent) {
      return J.expand$1$1$ax(
        J.readdirSync$1$x(D.fs(), $parent),
        new B.listDir__list_closure($parent, this),
        type$.String
      );
    },
    $signature: 161,
  };
  B.listDir__list_closure.prototype = {
    call$1(child) {
      var path = D.join(this.parent, H._asString(child), null);
      return B.dirExists(path)
        ? this.list.call$1(path)
        : H._setArrayType([path], type$.JSArray_String);
    },
    $signature: 162,
  };
  B.modificationTime_closure.prototype = {
    call$0() {
      var t2,
        t1 = J.getTime$0$x(J.get$mtime$x(J.statSync$1$x(D.fs(), this.path)));
      if (Math.abs(t1) <= 864e13) t2 = false;
      else t2 = true;
      if (t2)
        H.throwExpression(
          P.ArgumentError$('DateTime is outside valid range: ' + H.S(t1), null)
        );
      H.checkNotNullable(false, 'isUtc', type$.bool);
      return new P.DateTime(t1, false);
    },
    $signature: 123,
  };
  F._QuietLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {},
    warn$1($receiver, message) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        null
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {},
  };
  S.StderrLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var t2,
        t3,
        t4,
        t1 = this.color;
      if (t1) {
        t2 = $.$get$stderr();
        t3 = t2._stderr;
        t4 = J.getInterceptor$x(t3);
        t4.write$1(t3, '\x1b[33m\x1b[1m');
        if (deprecation) t4.write$1(t3, 'Deprecation ');
        t4.write$1(t3, 'Warning\x1b[0m');
      } else {
        if (deprecation) J.write$1$x($.$get$stderr()._stderr, 'DEPRECATION ');
        t2 = $.$get$stderr();
        J.write$1$x(t2._stderr, 'WARNING');
      }
      if (span == null) t2.writeln$1(': ' + message);
      else if (trace != null)
        t2.writeln$1(': ' + message + '\n\n' + span.highlight$1$color(t1));
      else t2.writeln$1(' on ' + span.message$2$color(0, '\n' + message, t1));
      if (trace != null)
        t2.writeln$1(
          B.indent(C.JSString_methods.trimRight$0(trace.toString$0(0)), 4)
        );
      t2.writeln$0();
    },
    warn$1($receiver, message) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        null
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {
      var url,
        t3,
        t4,
        t1 = span.file,
        t2 = span._file$_start;
      if (Y.FileLocation$_(t1, t2).file.url == null) url = '-';
      else {
        t3 = Y.FileLocation$_(t1, t2);
        url = $.$get$context().prettyUri$1(t3.file.url);
      }
      t3 = $.$get$stderr();
      t4 = url + ':';
      t2 = Y.FileLocation$_(t1, t2);
      t2 = t4 + (t2.file.getLine$1(t2.offset) + 1) + ' ';
      t4 = t3._stderr;
      t1 = J.getInterceptor$x(t4);
      t1.write$1(t4, t2);
      t1.write$1(t4, this.color ? '\x1b[1mDebug\x1b[0m' : 'DEBUG');
      t3.writeln$1(': ' + message);
    },
  };
  Y.TerseLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var firstParagraph, t1, t2, count;
      if (deprecation) {
        firstParagraph = C.JSArray_methods.get$first(message.split('\n\n'));
        t1 = this._warningCounts;
        t2 = t1.$index(0, firstParagraph);
        count = (t2 == null ? 0 : t2) + 1;
        t1.$indexSet(0, firstParagraph, count);
        if (count > 5) return;
      }
      this._inner.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        trace
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {
      return this._inner.debug$2(0, message, span);
    },
    summarize$1$node(node) {
      var t2,
        total,
        t1 = this._warningCounts;
      t1 = t1.get$values(t1);
      t2 = H._instanceType(t1);
      total = A.IterableIntegerExtension_get_sum(
        new H.MappedIterable(
          new H.WhereIterable(
            t1,
            new Y.TerseLogger_summarize_closure(),
            t2._eval$1('WhereIterable<Iterable.E>')
          ),
          new Y.TerseLogger_summarize_closure0(),
          t2._eval$1('MappedIterable<Iterable.E,int>')
        )
      );
      if (total > 0) {
        t1 = '' + total + string$.x20repet;
        this._inner.warn$1(0, t1 + (node ? '' : string$.x0aRun_i));
      }
    },
  };
  Y.TerseLogger_summarize_closure.prototype = {
    call$1(count) {
      return count > 5;
    },
    $signature: 46,
  };
  Y.TerseLogger_summarize_closure0.prototype = {
    call$1(count) {
      return count - 5;
    },
    $signature: 165,
  };
  T.TrackingLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      this._emittedWarning = true;
      this._tracking$_logger.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        trace
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {
      this._emittedDebug = true;
      this._tracking$_logger.debug$2(0, message, span);
    },
  };
  Q.BuiltInModule.prototype = {
    get$upstream() {
      return C.List_empty3;
    },
    get$variableNodes() {
      return C.Map_empty0;
    },
    get$extensionStore() {
      return C.C_EmptyExtensionStore;
    },
    get$css(_) {
      return new V.CssStylesheet(
        C.List_empty0,
        Y.SourceFile$decoded(C.List_empty1, this.url).span$2(0, 0)
      );
    },
    get$transitivelyContainsCss() {
      return false;
    },
    get$transitivelyContainsExtensions() {
      return false;
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw H.wrapException(E.SassScriptException$('Undefined variable.'));
      throw H.wrapException(
        E.SassScriptException$('Cannot modify built-in variable.')
      );
    },
    variableIdentity$1($name) {
      return this;
    },
    cloneCss$0() {
      return this;
    },
    $isModule: 1,
    get$url() {
      return this.url;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$variables() {
      return this.variables;
    },
  };
  R.ForwardedModuleView.prototype = {
    get$url() {
      return this._forwarded_view$_inner.get$url();
    },
    get$upstream() {
      return this._forwarded_view$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._forwarded_view$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._forwarded_view$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._forwarded_view$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._forwarded_view$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      var prefix,
        _s19_ = 'Undefined variable.',
        t1 = this._rule,
        shownVariables = t1.shownVariables,
        hiddenVariables = t1.hiddenVariables;
      if (shownVariables != null && !shownVariables._base.contains$1(0, $name))
        throw H.wrapException(E.SassScriptException$(_s19_));
      else if (
        hiddenVariables != null &&
        hiddenVariables._base.contains$1(0, $name)
      )
        throw H.wrapException(E.SassScriptException$(_s19_));
      prefix = t1.prefix;
      if (prefix != null) {
        if (!C.JSString_methods.startsWith$1($name, prefix))
          throw H.wrapException(E.SassScriptException$(_s19_));
        $name = C.JSString_methods.substring$1($name, prefix.length);
      }
      return this._forwarded_view$_inner.setVariable$3(
        $name,
        value,
        nodeWithSpan
      );
    },
    variableIdentity$1($name) {
      var prefix = this._rule.prefix;
      if (prefix != null)
        $name = C.JSString_methods.substring$1($name, prefix.length);
      return this._forwarded_view$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof R.ForwardedModuleView &&
        this._forwarded_view$_inner.$eq(0, other._forwarded_view$_inner) &&
        this._rule === other._rule
      );
    },
    get$hashCode(_) {
      var t1 = this._forwarded_view$_inner;
      return (
        (t1.get$hashCode(t1) ^ H.Primitives_objectHashCode(this._rule)) >>> 0
      );
    },
    cloneCss$0() {
      return R.ForwardedModuleView$(
        this._forwarded_view$_inner.cloneCss$0(),
        this._rule,
        this.$ti._precomputed1
      );
    },
    toString$0(_) {
      return 'forwarded ' + this._forwarded_view$_inner.toString$0(0);
    },
    $isModule: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
  };
  B.ShadowedModuleView.prototype = {
    get$url() {
      return this._shadowed_view$_inner.get$url();
    },
    get$upstream() {
      return this._shadowed_view$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._shadowed_view$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._shadowed_view$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._shadowed_view$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._shadowed_view$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw H.wrapException(E.SassScriptException$('Undefined variable.'));
      else
        return this._shadowed_view$_inner.setVariable$3(
          $name,
          value,
          nodeWithSpan
        );
    },
    variableIdentity$1($name) {
      return this._shadowed_view$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      var t1,
        t2,
        _this = this;
      if (other == null) return false;
      if (other instanceof B.ShadowedModuleView)
        if (_this._shadowed_view$_inner.$eq(0, other._shadowed_view$_inner)) {
          t1 = _this.variables;
          t1 = t1.get$keys(t1);
          t2 = other.variables;
          if (C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
            t1 = _this.functions;
            t1 = t1.get$keys(t1);
            t2 = other.functions;
            if (C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
              t1 = _this.mixins;
              t1 = t1.get$keys(t1);
              t2 = other.mixins;
              t2 = C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2));
              t1 = t2;
            } else t1 = false;
          } else t1 = false;
        } else t1 = false;
      else t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._shadowed_view$_inner;
      return t1.get$hashCode(t1);
    },
    cloneCss$0() {
      var _this = this;
      return new B.ShadowedModuleView(
        _this._shadowed_view$_inner.cloneCss$0(),
        _this.variables,
        _this.variableNodes,
        _this.functions,
        _this.mixins,
        _this.$ti
      );
    },
    toString$0(_) {
      return 'shadowed ' + this._shadowed_view$_inner.toString$0(0);
    },
    $isModule: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
  };
  F.JSFunction.prototype = {};
  F.NodeImporterResult.prototype = {};
  Z.RenderContext.prototype = {};
  Z.RenderContextOptions.prototype = {};
  Z.RenderContextResult.prototype = {};
  Z.RenderContextResultStats.prototype = {};
  B._PropertyDescriptor.prototype = {};
  V.AtRootQueryParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new V.AtRootQueryParser_parse_closure(this)
      );
    },
  };
  V.AtRootQueryParser_parse_closure.prototype = {
    call$0() {
      var include,
        atRules,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$1(40);
      t1.whitespace$0();
      include = t1.scanIdentifier$1('with');
      if (!include)
        t1.expectIdentifier$2$name('without', '"with" or "without"');
      t1.whitespace$0();
      t2.expectChar$1(58);
      t1.whitespace$0();
      atRules = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      do {
        atRules.add$1(0, t1.identifier$0().toLowerCase());
        t1.whitespace$0();
      } while (t1.lookingAtIdentifier$0());
      t2.expectChar$1(41);
      t2.expectDone$0();
      return new V.AtRootQuery(
        include,
        atRules,
        atRules.contains$1(0, 'all'),
        atRules.contains$1(0, 'rule')
      );
    },
    $signature: 98,
  };
  Q._disallowedFunctionNames_closure.prototype = {
    call$1($function) {
      return $function.name;
    },
    $signature: 251,
  };
  Q.CssParser.prototype = {
    get$plainCss() {
      return true;
    },
    silentComment$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      this.super$Parser$silentComment();
      this.error$2(
        0,
        string$.Silent,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    atRule$2$root(child, root) {
      var $name,
        urlStart,
        next,
        url,
        urlSpan,
        queries,
        t2,
        t3,
        t4,
        t5,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(64);
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      switch ($name.get$asPlain()) {
        case 'at-root':
        case 'content':
        case 'debug':
        case 'each':
        case 'error':
        case 'extend':
        case 'for':
        case 'function':
        case 'if':
        case 'include':
        case 'mixin':
        case 'return':
        case 'warn':
        case 'while':
          _this.almostAnyValue$0();
          _this.error$2(
            0,
            "This at-rule isn't allowed in plain CSS.",
            t1.spanFrom$1(start)
          );
          break;
        case 'import':
          urlStart = new S._SpanScannerState(t1, t1._string_scanner$_position);
          next = t1.peekChar$0();
          url =
            next === 117 || next === 85
              ? _this.dynamicUrl$0()
              : new D.StringExpression(
                  _this.interpolatedString$0().asInterpolation$1$static(true),
                  false
                );
          urlSpan = t1.spanFrom$1(urlStart);
          _this.whitespace$0();
          queries = _this.tryImportQueries$0();
          _this.expectStatementSeparator$1('@import rule');
          t2 = X.Interpolation$(
            H._setArrayType([url], type$.JSArray_Object),
            urlSpan
          );
          t3 = t1.spanFrom$1(urlStart);
          t4 = queries == null;
          t5 = t4 ? null : queries.item1;
          t2 = H._setArrayType(
            [new Q.StaticImport(t2, t5, t4 ? null : queries.item2, t3)],
            type$.JSArray_Import
          );
          t1 = t1.spanFrom$1(start);
          return new B.ImportRule(
            P.List_List$unmodifiable(t2, type$.Import),
            t1
          );
        case 'media':
          return _this.mediaRule$1(start);
        case '-moz-document':
          return _this.mozDocumentRule$2(start, $name);
        case 'supports':
          return _this.supportsRule$1(start);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    identifierLike$0() {
      var t2,
        $arguments,
        t3,
        t4,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        specialFunction = _this.trySpecialFunction$2(
          plain.toLowerCase(),
          start
        );
      if (specialFunction != null) return specialFunction;
      t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40)) return new D.StringExpression(identifier, false);
      $arguments = H._setArrayType([], type$.JSArray_Expression);
      if (!t1.scanChar$1(41)) {
        do {
          _this.whitespace$0();
          $arguments.push(_this.expression$1$singleEquals(true));
          _this.whitespace$0();
        } while (t1.scanChar$1(44));
        t1.expectChar$1(41);
      }
      if ($.$get$_disallowedFunctionNames().contains$1(0, plain))
        _this.error$2(0, string$.This_f, t1.spanFrom$1(start));
      t3 = X.Interpolation$(
        H._setArrayType(
          [new D.StringExpression(identifier, false)],
          type$.JSArray_Object
        ),
        identifier.span
      );
      t2 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      t4 = type$.Expression;
      return new N.InterpolatedFunctionExpression(
        t3,
        new X.ArgumentInvocation(
          P.List_List$unmodifiable($arguments, t4),
          H.ConstantMap_ConstantMap$from(C.Map_empty2, type$.String, t4),
          null,
          null,
          t2
        ),
        t1.spanFrom$1(start)
      );
    },
  };
  E.KeyframeSelectorParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new E.KeyframeSelectorParser_parse_closure(this)
      );
    },
    _percentage$0() {
      var t3,
        next,
        t1 = this.scanner,
        t2 = t1.scanChar$1(43) ? '' + H.Primitives_stringFromCharCode(43) : '',
        second = t1.peekChar$0();
      if (!T.isDigit(second) && second !== 46)
        t1.error$1(0, 'Expected number.');
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      if (t1.peekChar$0() === 46) {
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      if (this.scanIdentifier$1('e')) {
        t2 += t1.readChar$0();
        next = t1.peekChar$0();
        if (next === 43 || next === 45) t2 += t1.readChar$0();
        if (!T.isDigit(t1.peekChar$0())) t1.error$1(0, 'Expected digit.');
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      t1.expectChar$1(37);
      t2 += H.Primitives_stringFromCharCode(37);
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
  };
  E.KeyframeSelectorParser_parse_closure.prototype = {
    call$0() {
      var selectors = H._setArrayType([], type$.JSArray_String),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        if (t1.lookingAtIdentifier$0())
          if (t1.scanIdentifier$1('from')) selectors.push('from');
          else {
            t1.expectIdentifier$2$name('to', '"to" or "from"');
            selectors.push('to');
          }
        else selectors.push(t1._percentage$0());
        t1.whitespace$0();
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return selectors;
    },
    $signature: 42,
  };
  F.MediaQueryParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new F.MediaQueryParser_parse_closure(this)
      );
    },
    _mediaQuery$0() {
      var identifier1,
        identifier2,
        type,
        modifier,
        features,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 40) {
        identifier1 = _this.identifier$0();
        _this.whitespace$0();
        if (!_this.lookingAtIdentifier$0())
          return new F.CssMediaQuery(_null, identifier1, C.List_empty);
        identifier2 = _this.identifier$0();
        _this.whitespace$0();
        if (B.equalsIgnoreCase(identifier2, 'and')) {
          type = identifier1;
          modifier = _null;
        } else {
          if (_this.scanIdentifier$1('and')) _this.whitespace$0();
          else
            return new F.CssMediaQuery(identifier1, identifier2, C.List_empty);
          type = identifier2;
          modifier = identifier1;
        }
      } else {
        type = _null;
        modifier = type;
      }
      features = H._setArrayType([], type$.JSArray_String);
      do {
        _this.whitespace$0();
        t1.expectChar$1(40);
        features.push('(' + _this.declarationValue$0() + ')');
        t1.expectChar$1(41);
        _this.whitespace$0();
      } while (_this.scanIdentifier$1('and'));
      if (type == null)
        return new F.CssMediaQuery(
          _null,
          _null,
          P.List_List$unmodifiable(features, type$.String)
        );
      else {
        t1 = P.List_List$unmodifiable(features, type$.String);
        return new F.CssMediaQuery(modifier, type, t1);
      }
    },
  };
  F.MediaQueryParser_parse_closure.prototype = {
    call$0() {
      var queries = H._setArrayType([], type$.JSArray_CssMediaQuery),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        queries.push(t1._mediaQuery$0());
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return queries;
    },
    $signature: 121,
  };
  G.Parser.prototype = {
    _parseIdentifier$0() {
      return this.wrapSpanFormatException$1(
        new G.Parser__parseIdentifier_closure(this)
      );
    },
    _isVariableDeclarationLike$0() {
      var _this = this,
        t1 = _this.scanner;
      if (!t1.scanChar$1(36)) return false;
      if (!_this.lookingAtIdentifier$0()) return false;
      _this.identifier$0();
      _this.whitespace$0();
      return t1.scanChar$1(58);
    },
    whitespace$0() {
      do this.whitespaceWithoutComments$0();
      while (this.scanComment$0());
    },
    whitespaceWithoutComments$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    spaces$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9;
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    scanComment$0() {
      var next,
        t1 = this.scanner;
      if (t1.peekChar$0() !== 47) return false;
      next = t1.peekChar$1(1);
      if (next === 47) {
        this.silentComment$0();
        return true;
      } else if (next === 42) {
        this.loudComment$0();
        return true;
      } else return false;
    },
    silentComment$0() {
      var t2,
        t3,
        t1 = this.scanner;
      t1.expect$1('//');
      t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1('/*');
      for (; true; ) {
        if (t1.readChar$0() !== 42) continue;
        do next = t1.readChar$0();
        while (next === 42);
        if (next === 47) break;
      }
    },
    identifier$2$normalize$unit(normalize, unit) {
      var t2,
        first,
        _this = this,
        _s20_ = 'Expected identifier.',
        text = new P.StringBuffer(''),
        t1 = _this.scanner;
      if (t1.scanChar$1(45)) {
        t2 = text._contents = '' + H.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          text._contents = t2 + H.Primitives_stringFromCharCode(45);
          _this._identifierBody$3$normalize$unit(text, normalize, unit);
          t1 = text._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      } else t2 = '';
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s20_);
      else if (normalize && first === 95) {
        t1.readChar$0();
        text._contents = t2 + H.Primitives_stringFromCharCode(45);
      } else if (first === 95 || T.isAlphabetic0(first) || first >= 128)
        text._contents = t2 + H.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        text._contents = t2 + H.S(_this.escape$1$identifierStart(true));
      else t1.error$1(0, _s20_);
      _this._identifierBody$3$normalize$unit(text, normalize, unit);
      t1 = text._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    identifier$0() {
      return this.identifier$2$normalize$unit(false, false);
    },
    identifier$1$normalize(normalize) {
      return this.identifier$2$normalize$unit(normalize, false);
    },
    identifier$1$unit(unit) {
      return this.identifier$2$normalize$unit(false, unit);
    },
    _identifierBody$3$normalize$unit(text, normalize, unit) {
      var t1, next, second, t2;
      for (t1 = this.scanner; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (unit && next === 45) {
          second = t1.peekChar$1(1);
          if (second != null)
            if (second !== 46) t2 = second >= 48 && second <= 57;
            else t2 = true;
          else t2 = false;
          if (t2) break;
          text._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
        } else if (normalize && next === 95) {
          t1.readChar$0();
          text._contents += H.Primitives_stringFromCharCode(45);
        } else {
          if (next !== 95) {
            if (!(next >= 97 && next <= 122)) t2 = next >= 65 && next <= 90;
            else t2 = true;
            t2 = t2 || next >= 128;
          } else t2 = true;
          if (!t2) {
            t2 = next >= 48 && next <= 57;
            t2 = t2 || next === 45;
          } else t2 = true;
          if (t2)
            text._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 92) text._contents += H.S(this.escape$0());
          else break;
        }
      }
    },
    _identifierBody$1(text) {
      return this._identifierBody$3$normalize$unit(text, false, false);
    },
    string$0() {
      var buffer,
        next,
        t2,
        t1 = this.scanner,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(
          0,
          'Expected string.',
          t1._string_scanner$_position - 1
        );
      buffer = new P.StringBuffer('');
      for (; true; ) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(
            0,
            'Expected ' + H.Primitives_stringFromCharCode(quote) + '.'
          );
        else if (next === 92) {
          t2 = t1.peekChar$1(1);
          if (t2 === 10 || t2 === 13 || t2 === 12) {
            t1.readChar$0();
            t1.readChar$0();
          } else
            buffer._contents += H.Primitives_stringFromCharCode(
              B.consumeEscapedCharacter(t1)
            );
        } else
          buffer._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    naturalNumber$0() {
      var number,
        t2,
        t1 = this.scanner,
        first = t1.readChar$0();
      if (!T.isDigit(first))
        t1.error$2$position(
          0,
          'Expected digit.',
          t1._string_scanner$_position - 1
        );
      number = first - 48;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        number = number * 10 + (t1.readChar$0() - 48);
      }
      return number;
    },
    declarationValue$1$allowEmpty(allowEmpty) {
      var t1,
        t2,
        wroteNewline,
        next,
        start,
        end,
        t3,
        url,
        _this = this,
        buffer = new P.StringBuffer(''),
        brackets = H._setArrayType([], type$.JSArray_int);
      $label0$1: for (
        t1 = _this.scanner, t2 = _this.get$string(), wroteNewline = false;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            buffer._contents += H.S(_this.escape$1$identifierStart(true));
            wroteNewline = false;
            break;
          case 34:
          case 39:
            start = t1._string_scanner$_position;
            t2.call$0();
            end = t1._string_scanner$_position;
            buffer._contents += C.JSString_methods.substring$2(
              t1.string,
              start,
              end
            );
            wroteNewline = false;
            break;
          case 47:
            if (t1.peekChar$1(1) === 42) {
              t3 = _this.get$loudComment();
              start = t1._string_scanner$_position;
              t3.call$0();
              end = t1._string_scanner$_position;
              buffer._contents += C.JSString_methods.substring$2(
                t1.string,
                start,
                end
              );
            } else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
          case 32:
          case 9:
            if (!wroteNewline) {
              t3 = t1.peekChar$1(1);
              t3 = !(
                t3 === 32 ||
                t3 === 9 ||
                t3 === 10 ||
                t3 === 13 ||
                t3 === 12
              );
            } else t3 = true;
            if (t3) buffer._contents += H.Primitives_stringFromCharCode(32);
            t1.readChar$0();
            break;
          case 10:
          case 13:
          case 12:
            t3 = t1.peekChar$1(-1);
            if (!(t3 === 10 || t3 === 13 || t3 === 12))
              buffer._contents += '\n';
            t1.readChar$0();
            wroteNewline = true;
            break;
          case 40:
          case 123:
          case 91:
            next.toString;
            buffer._contents += H.Primitives_stringFromCharCode(next);
            brackets.push(T.opposite(t1.readChar$0()));
            wroteNewline = false;
            break;
          case 41:
          case 125:
          case 93:
            if (brackets.length === 0) break $label0$1;
            next.toString;
            buffer._contents += H.Primitives_stringFromCharCode(next);
            t1.expectChar$1(brackets.pop());
            wroteNewline = false;
            break;
          case 59:
            if (brackets.length === 0) break $label0$1;
            buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            break;
          case 117:
          case 85:
            url = _this.tryUrl$0();
            if (url != null) buffer._contents += url;
            else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              buffer._contents += _this.identifier$0();
            else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
        }
      }
      if (brackets.length !== 0)
        t1.expectChar$1(C.JSArray_methods.get$last(brackets));
      if (!allowEmpty && buffer._contents.length === 0)
        t1.error$1(0, 'Expected token.');
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    declarationValue$0() {
      return this.declarationValue$1$allowEmpty(false);
    },
    tryUrl$0() {
      var buffer,
        next,
        t2,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (!_this.scanIdentifier$1('url')) return null;
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      _this.whitespace$0();
      buffer = new P.StringBuffer('');
      buffer._contents = '' + 'url(';
      for (; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (next === 92) buffer._contents += H.S(_this.escape$0());
        else {
          if (next !== 37)
            if (next !== 38)
              if (next !== 35) t2 = (next >= 42 && next <= 126) || next >= 128;
              else t2 = true;
            else t2 = true;
          else t2 = true;
          if (t2)
            buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
          else if (
            next === 32 ||
            next === 9 ||
            next === 10 ||
            next === 13 ||
            next === 12
          ) {
            _this.whitespace$0();
            if (t1.peekChar$0() !== 41) break;
          } else if (next === 41) {
            t2 = buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            return t2.charCodeAt(0) == 0 ? t2 : t2;
          } else break;
        }
      }
      t1.set$state(start);
      return null;
    },
    variableName$0() {
      this.scanner.expectChar$1(36);
      return this.identifier$1$normalize(true);
    },
    escape$1$identifierStart(identifierStart) {
      var value,
        first,
        i,
        next,
        t2,
        exception,
        _s25_ = 'Expected escape sequence.',
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      t1.expectChar$1(92);
      value = 0;
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s25_);
      else if (first === 10 || first === 13 || first === 12)
        t1.error$1(0, _s25_);
      else if (T.isHex(first)) {
        for (i = 0; i < 6; ++i) {
          next = t1.peekChar$0();
          if (next == null || !T.isHex(next)) break;
          value *= 16;
          value += T.asHex(t1.readChar$0());
        }
        this.scanCharIf$1(T.character__isWhitespace$closure());
      } else value = t1.readChar$0();
      if (identifierStart) {
        t2 = value;
        t2 = t2 === 95 || T.isAlphabetic0(t2) || t2 >= 128;
      } else {
        t2 = value;
        t2 =
          t2 === 95 ||
          T.isAlphabetic0(t2) ||
          t2 >= 128 ||
          T.isDigit(t2) ||
          t2 === 45;
      }
      if (t2)
        try {
          t2 = H.Primitives_stringFromCharCode(value);
          return t2;
        } catch (exception) {
          if (type$.RangeError._is(H.unwrapException(exception)))
            t1.error$3$length$position(
              0,
              'Invalid Unicode code point.',
              t1._string_scanner$_position - start,
              start
            );
          else throw exception;
        }
      else {
        if (!(value <= 31))
          if (!J.$eq$(value, 127)) t1 = identifierStart && T.isDigit(value);
          else t1 = true;
        else t1 = true;
        if (t1) {
          t1 = '' + H.Primitives_stringFromCharCode(92);
          if (value > 15)
            t1 += H.Primitives_stringFromCharCode(
              T.hexCharFor(C.JSNumber_methods._shrOtherPositive$1(value, 4))
            );
          t1 =
            t1 +
            H.Primitives_stringFromCharCode(T.hexCharFor(value & 15)) +
            H.Primitives_stringFromCharCode(32);
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          return P.String_String$fromCharCodes(
            H._setArrayType([92, value], type$.JSArray_int),
            0,
            null
          );
      }
    },
    escape$0() {
      return this.escape$1$identifierStart(false);
    },
    scanCharIf$1(condition) {
      var t1 = this.scanner;
      if (!condition.call$1(t1.peekChar$0())) return false;
      t1.readChar$0();
      return true;
    },
    scanIdentChar$2$caseSensitive(char, caseSensitive) {
      var t3,
        t1 = new G.Parser_scanIdentChar_matches(caseSensitive, char),
        t2 = this.scanner,
        next = t2.peekChar$0();
      if (next != null && t1.call$1(next)) {
        t2.readChar$0();
        return true;
      } else if (next === 92) {
        t3 = t2._string_scanner$_position;
        if (t1.call$1(B.consumeEscapedCharacter(t2))) return true;
        t2.set$state(new S._SpanScannerState(t2, t3));
      }
      return false;
    },
    scanIdentChar$1(char) {
      return this.scanIdentChar$2$caseSensitive(char, false);
    },
    expectIdentChar$1(letter) {
      var t1;
      if (this.scanIdentChar$2$caseSensitive(letter, false)) return;
      t1 = this.scanner;
      t1.error$2$position(
        0,
        'Expected "' + H.Primitives_stringFromCharCode(letter) + '".',
        t1._string_scanner$_position
      );
    },
    lookingAtNumber$0() {
      var second,
        third,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (T.isDigit(first)) return true;
      if (first === 46) {
        second = t1.peekChar$1(1);
        return second != null && T.isDigit(second);
      } else if (first === 43 || first === 45) {
        second = t1.peekChar$1(1);
        if (second == null) return false;
        if (T.isDigit(second)) return true;
        if (second !== 46) return false;
        third = t1.peekChar$1(2);
        return third != null && T.isDigit(third);
      } else return false;
    },
    lookingAtIdentifier$1($forward) {
      var t1, first, second;
      if ($forward == null) $forward = 0;
      t1 = this.scanner;
      first = t1.peekChar$1($forward);
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic0(first) ||
        first >= 128 ||
        first === 92
      )
        return true;
      if (first !== 45) return false;
      second = t1.peekChar$1($forward + 1);
      if (second == null) return false;
      return (
        second === 95 ||
        T.isAlphabetic0(second) ||
        second >= 128 ||
        second === 92 ||
        second === 45
      );
    },
    lookingAtIdentifier$0() {
      return this.lookingAtIdentifier$1(null);
    },
    lookingAtIdentifierBody$0() {
      var t1,
        next = this.scanner.peekChar$0();
      if (next != null)
        t1 =
          next === 95 ||
          T.isAlphabetic0(next) ||
          next >= 128 ||
          T.isDigit(next) ||
          next === 45 ||
          next === 92;
      else t1 = false;
      return t1;
    },
    scanIdentifier$2$caseSensitive(text, caseSensitive) {
      var t1,
        start,
        t2,
        t3,
        _this = this;
      if (!_this.lookingAtIdentifier$0()) return false;
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      for (
        t2 = new H.CodeUnits(text),
          t2 = new H.ListIterator(t2, t2.get$length(t2)),
          t3 = H._instanceType(t2)._precomputed1;
        t2.moveNext$0();

      ) {
        if (
          _this.scanIdentChar$2$caseSensitive(
            t3._as(t2.__internal$_current),
            caseSensitive
          )
        )
          continue;
        if (start._scanner !== t1)
          H.throwExpression(P.ArgumentError$(string$.The_gi, null));
        t2 = start.position;
        if (t2 < 0 || t2 > t1.string.length)
          H.throwExpression(P.ArgumentError$('Invalid position ' + t2, null));
        t1._string_scanner$_position = t2;
        t1._lastMatch = null;
        return false;
      }
      if (!_this.lookingAtIdentifierBody$0()) return true;
      t1.set$state(start);
      return false;
    },
    scanIdentifier$1(text) {
      return this.scanIdentifier$2$caseSensitive(text, false);
    },
    expectIdentifier$2$name(text, $name) {
      var t1, start, t2, t3;
      if ($name == null) $name = '"' + text + '"';
      t1 = this.scanner;
      start = t1._string_scanner$_position;
      for (
        t2 = new H.CodeUnits(text),
          t2 = new H.ListIterator(t2, t2.get$length(t2)),
          t3 = H._instanceType(t2)._precomputed1;
        t2.moveNext$0();

      ) {
        if (
          this.scanIdentChar$2$caseSensitive(
            t3._as(t2.__internal$_current),
            false
          )
        )
          continue;
        t1.error$2$position(0, 'Expected ' + $name + '.', start);
      }
      if (!this.lookingAtIdentifierBody$0()) return;
      t1.error$2$position(0, 'Expected ' + $name, start);
    },
    expectIdentifier$1(text) {
      return this.expectIdentifier$2$name(text, null);
    },
    rawText$1(consumer) {
      var t1 = this.scanner,
        start = t1._string_scanner$_position;
      consumer.call$0();
      return t1.substring$1(0, start);
    },
    error$2(_, message, span) {
      return H.throwExpression(
        E.StringScannerException$(message, span, this.scanner.string)
      );
    },
    withErrorMessage$1$2(message, callback) {
      var error, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          throw H.wrapException(
            G.SourceSpanFormatException$(
              message,
              error.get$span(),
              error.get$source()
            )
          );
        } else throw exception;
      }
    },
    withErrorMessage$2(message, callback) {
      return this.withErrorMessage$1$2(message, callback, type$.dynamic);
    },
    wrapSpanFormatException$1$1(callback) {
      var error, span, startPosition, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          span = error.get$span();
          if (
            B.startsWithIgnoreCase(error._span_exception$_message, 'expected')
          ) {
            t1 = span;
            t1 = t1._end - t1._file$_start === 0;
          } else t1 = false;
          if (t1) {
            t1 = span;
            startPosition = this._firstNewlineBefore$1(
              Y.FileLocation$_(t1.file, t1._file$_start).offset
            );
            t1 = span;
            if (
              !J.$eq$(
                startPosition,
                Y.FileLocation$_(t1.file, t1._file$_start).offset
              )
            )
              span = span.file.span$2(startPosition, startPosition);
          }
          throw H.wrapException(
            E.SassFormatException$(error._span_exception$_message, span)
          );
        } else throw exception;
      }
    },
    wrapSpanFormatException$1(callback) {
      return this.wrapSpanFormatException$1$1(callback, type$.dynamic);
    },
    _firstNewlineBefore$1(position) {
      var t1,
        lastNewline,
        codeUnit,
        index = position - 1;
      for (t1 = this.scanner.string, lastNewline = null; index >= 0; ) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
        if (
          !(
            codeUnit === 32 ||
            codeUnit === 9 ||
            codeUnit === 10 ||
            codeUnit === 13 ||
            codeUnit === 12
          )
        )
          return lastNewline == null ? position : lastNewline;
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12)
          lastNewline = index;
        --index;
      }
      return position;
    },
  };
  G.Parser__parseIdentifier_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        result = t1.identifier$0();
      t1.scanner.expectDone$0();
      return result;
    },
    $signature: 28,
  };
  G.Parser_scanIdentChar_matches.prototype = {
    call$1(actual) {
      var t1 = this.char;
      return this.caseSensitive
        ? actual === t1
        : T.characterEqualsIgnoreCase(t1, actual);
    },
    $signature: 46,
  };
  U.SassParser.prototype = {
    get$currentIndentation() {
      return this._currentIndentation;
    },
    get$indented() {
      return true;
    },
    styleRuleSelector$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      do {
        buffer.addInterpolation$1(this.almostAnyValue$1$omitComments(true));
        t4 = t3._contents += H.Primitives_stringFromCharCode(10);
      } while (
        C.JSString_methods.endsWith$1(
          C.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4),
          ','
        ) &&
        this.scanCharIf$1(T.character__isNewline$closure())
      );
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    expectStatementSeparator$1($name) {
      var _this = this;
      if (!_this.atEndOfStatement$0()) _this._expectNewline$0();
      if (_this._peekIndentation$0() <= _this._currentIndentation) return;
      _this.scanner.error$2$position(
        0,
        'Nothing may be indented ' +
          ($name == null ? 'here' : 'beneath a ' + $name) +
          '.',
        _this._nextIndentationEnd.position
      );
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 10 || next === 13 || next === 12;
    },
    lookingAtChildren$0() {
      return (
        this.atEndOfStatement$0() &&
        this._peekIndentation$0() > this._currentIndentation
      );
    },
    importArgument$0() {
      var url,
        span,
        innerError,
        start,
        next,
        t2,
        exception,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 117:
        case 85:
          start = new S._SpanScannerState(t1, t1._string_scanner$_position);
          if (_this.scanIdentifier$1('url'))
            if (t1.scanChar$1(40)) {
              t1.set$state(start);
              return _this.super$StylesheetParser$importArgument();
            } else t1.set$state(start);
          break;
        case 39:
        case 34:
          return _this.super$StylesheetParser$importArgument();
      }
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      next = t1.peekChar$0();
      while (true) {
        if (next != null)
          if (next !== 44)
            if (next !== 59) t2 = !(next === 10 || next === 13 || next === 12);
            else t2 = false;
          else t2 = false;
        else t2 = false;
        if (!t2) break;
        t1.readChar$0();
        next = t1.peekChar$0();
      }
      url = t1.substring$1(0, start.position);
      span = t1.spanFrom$1(start);
      if (_this.isPlainImportUrl$1(url))
        return new Q.StaticImport(
          X.Interpolation$(
            H._setArrayType(
              [N.serializeValue0(new D.SassString(url, true), true, true)],
              type$.JSArray_Object
            ),
            span
          ),
          null,
          null,
          span
        );
      else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new B.DynamicImport(t1, span);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            _this.error$2(
              0,
              'Invalid URL: ' + J.get$message$x(innerError),
              span
            );
          } else throw exception;
        }
    },
    scanElse$1(ifIndentation) {
      var t1,
        t2,
        startIndentation,
        startNextIndentation,
        startNextIndentationEnd,
        _this = this;
      if (_this._peekIndentation$0() !== ifIndentation) return false;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      startIndentation = _this._currentIndentation;
      startNextIndentation = _this._nextIndentation;
      startNextIndentationEnd = _this._nextIndentationEnd;
      _this._readIndentation$0();
      if (t1.scanChar$1(64) && _this.scanIdentifier$1('else')) return true;
      t1.set$state(new S._SpanScannerState(t1, t2));
      _this._currentIndentation = startIndentation;
      _this._nextIndentation = startNextIndentation;
      _this._nextIndentationEnd = startNextIndentationEnd;
      return false;
    },
    children$1(_, child) {
      var children = H._setArrayType([], type$.JSArray_Statement);
      this._whileIndentedLower$1(
        new U.SassParser_children_closure(this, child, children)
      );
      return children;
    },
    statements$1(statement) {
      var statements,
        t2,
        child,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first === 9 || first === 32)
        t1.error$3$length$position(
          0,
          string$.Indent,
          t1._string_scanner$_position,
          0
        );
      statements = H._setArrayType([], type$.JSArray_Statement);
      for (t2 = t1.string.length; t1._string_scanner$_position !== t2; ) {
        child = this._child$1(statement);
        if (child != null) statements.push(child);
        this._readIndentation$0();
      }
      return statements;
    },
    _child$1(child) {
      var _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
        case 10:
        case 12:
          return null;
        case 36:
          return _this.variableDeclarationWithoutNamespace$0();
        case 47:
          switch (t1.peekChar$1(1)) {
            case 47:
              return _this._silentComment$0();
            case 42:
              return _this._loudComment$0();
            default:
              return child.call$0();
          }
        default:
          return child.call$0();
      }
    },
    _silentComment$0() {
      var buffer,
        parentIndentation,
        t3,
        t4,
        t5,
        commentPrefix,
        i,
        t6,
        i0,
        t7,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('//');
      buffer = new P.StringBuffer('');
      parentIndentation = _this._currentIndentation;
      t3 = t1.string.length;
      t4 = 1 + parentIndentation;
      t5 = 2 + parentIndentation;
      $label0$0: do {
        commentPrefix = t1.scanChar$1(47) ? '///' : '//';
        for (i = commentPrefix.length; true; ) {
          t6 = buffer._contents += commentPrefix;
          for (
            i0 = i;
            i0 < _this._currentIndentation - parentIndentation;
            ++i0
          ) {
            t6 += H.Primitives_stringFromCharCode(32);
            buffer._contents = t6;
          }
          while (true) {
            if (t1._string_scanner$_position !== t3) {
              t7 = t1.peekChar$0();
              t7 = !(t7 === 10 || t7 === 13 || t7 === 12);
            } else t7 = false;
            if (!t7) break;
            t6 += H.Primitives_stringFromCharCode(t1.readChar$0());
            buffer._contents = t6;
          }
          buffer._contents = t6 + '\n';
          if (_this._peekIndentation$0() < parentIndentation) break $label0$0;
          if (_this._peekIndentation$0() === parentIndentation) {
            if (t1.peekChar$1(t4) === 47 && t1.peekChar$1(t5) === 47)
              _this._readIndentation$0();
            break;
          }
          _this._readIndentation$0();
        }
      } while (t1.scan$1('//'));
      t3 = buffer._contents;
      return (_this.lastSilentComment = new B.SilentComment(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      ));
    },
    _loudComment$0() {
      var t3,
        t4,
        buffer,
        parentIndentation,
        t5,
        t6,
        first,
        beginningOfComment,
        t7,
        end,
        i,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('/*');
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t3._contents = '' + '/*';
      parentIndentation = _this._currentIndentation;
      for (t5 = t1.string, t6 = t5.length, first = true; true; first = false) {
        if (first) {
          beginningOfComment = t1._string_scanner$_position;
          _this.spaces$0();
          t7 = t1.peekChar$0();
          if (t7 === 10 || t7 === 13 || t7 === 12) {
            _this._readIndentation$0();
            t7 = t3._contents += H.Primitives_stringFromCharCode(32);
          } else {
            end = t1._string_scanner$_position;
            t7 = t3._contents += C.JSString_methods.substring$2(
              t5,
              beginningOfComment,
              end
            );
          }
        } else {
          t7 = t3._contents += '\n';
          t7 += ' * ';
          t3._contents = t7;
        }
        for (i = 3; i < _this._currentIndentation - parentIndentation; ++i) {
          t7 += H.Primitives_stringFromCharCode(32);
          t3._contents = t7;
        }
        $label0$1: for (; t1._string_scanner$_position !== t6; )
          switch (t1.peekChar$0()) {
            case 10:
            case 13:
            case 12:
              break $label0$1;
            case 35:
              if (t1.peekChar$1(1) === 123) {
                t7 = _this.singleInterpolation$0();
                buffer._flushText$0();
                t4.push(t7);
              } else
                t3._contents += H.Primitives_stringFromCharCode(
                  t1.readChar$0()
                );
              break;
            default:
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              break;
          }
        if (_this._peekIndentation$0() <= parentIndentation) break;
        for (; _this._lookingAtDoubleNewline$0(); ) {
          _this._expectNewline$0();
          t7 = t3._contents += '\n';
          t3._contents = t7 + ' *';
        }
        _this._readIndentation$0();
      }
      t4 = t3._contents;
      if (
        !C.JSString_methods.endsWith$1(
          C.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4),
          '*/'
        )
      )
        t3._contents += ' */';
      return new L.LoudComment(
        buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2)))
      );
    },
    whitespaceWithoutComments$0() {
      var t1, t2, next;
      for (
        t1 = this.scanner, t2 = t1.string.length;
        t1._string_scanner$_position !== t2;

      ) {
        next = t1.peekChar$0();
        if (next !== 9 && next !== 32) break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1('/*');
      for (; true; ) {
        next = t1.readChar$0();
        if (next === 10 || next === 13 || next === 12)
          t1.error$1(0, 'expected */.');
        if (next !== 42) continue;
        do next = t1.readChar$0();
        while (next === 42);
        if (next === 47) break;
      }
    },
    _expectNewline$0() {
      var t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 59:
          t1.error$1(0, string$.semico);
          break;
        case 13:
          t1.readChar$0();
          if (t1.peekChar$0() === 10) t1.readChar$0();
          return;
        case 10:
        case 12:
          t1.readChar$0();
          return;
        default:
          t1.error$1(0, 'expected newline.');
      }
    },
    _lookingAtDoubleNewline$0() {
      var nextChar,
        t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
          nextChar = t1.peekChar$1(1);
          if (nextChar === 10) {
            t1 = t1.peekChar$1(2);
            return t1 === 10 || t1 === 13 || t1 === 12;
          }
          return nextChar === 13 || nextChar === 12;
        case 10:
        case 12:
          t1 = t1.peekChar$1(1);
          return t1 === 10 || t1 === 13 || t1 === 12;
        default:
          return false;
      }
    },
    _whileIndentedLower$1(body) {
      var t1,
        t2,
        childIndentation,
        indentation,
        t3,
        t4,
        t5,
        _this = this,
        parentIndentation = _this._currentIndentation;
      for (
        t1 = _this.scanner, t2 = t1._sourceFile, childIndentation = null;
        _this._peekIndentation$0() > parentIndentation;

      ) {
        indentation = _this._readIndentation$0();
        if (childIndentation == null) childIndentation = indentation;
        if (childIndentation !== indentation) {
          t3 =
            'Inconsistent indentation, expected ' +
            childIndentation +
            ' spaces.';
          t4 = t1._string_scanner$_position;
          t5 = t2.getColumn$1(t4);
          t1.error$3$length$position(
            0,
            t3,
            t2.getColumn$1(t1._string_scanner$_position),
            t4 - t5
          );
        }
        body.call$0();
      }
    },
    _readIndentation$0() {
      var t1,
        _this = this,
        currentIndentation = _this._nextIndentation;
      if (currentIndentation == null)
        currentIndentation = _this._nextIndentation = _this._peekIndentation$0();
      _this._currentIndentation = currentIndentation;
      t1 = _this._nextIndentationEnd;
      t1.toString;
      _this.scanner.set$state(t1);
      _this._nextIndentationEnd = _this._nextIndentation = null;
      return currentIndentation;
    },
    _peekIndentation$0() {
      var t1,
        t2,
        t3,
        start,
        containsTab,
        containsSpace,
        nextIndentation,
        next,
        t4,
        _this = this,
        cached = _this._nextIndentation;
      if (cached != null) return cached;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      t3 = t1.string.length;
      if (t2 === t3) {
        _this._nextIndentation = 0;
        _this._nextIndentationEnd = new S._SpanScannerState(t1, t2);
        return 0;
      }
      start = new S._SpanScannerState(t1, t2);
      if (!_this.scanCharIf$1(T.character__isNewline$closure()))
        t1.error$2$position(
          0,
          'Expected newline.',
          t1._string_scanner$_position
        );
      containsTab = H._Cell$();
      containsSpace = H._Cell$();
      nextIndentation = H._Cell$();
      t2 = nextIndentation.__late_helper$_name;
      do {
        containsSpace._value = containsTab._value = false;
        nextIndentation._value = 0;
        for (; true; ) {
          next = t1.peekChar$0();
          if (next === 32) containsSpace._value = true;
          else if (next === 9) containsTab._value = true;
          else break;
          t4 = nextIndentation._value;
          if (t4 === nextIndentation)
            H.throwExpression(H.LateError$localNI(t2));
          nextIndentation._value = t4 + 1;
          t1.readChar$0();
        }
        t4 = t1._string_scanner$_position;
        if (t4 === t3) {
          _this._nextIndentation = 0;
          _this._nextIndentationEnd = new S._SpanScannerState(t1, t4);
          t1.set$state(start);
          return 0;
        }
      } while (_this.scanCharIf$1(T.character__isNewline$closure()));
      t2 = containsTab._readLocal$0();
      t3 = containsSpace._readLocal$0();
      if (t2) {
        if (t3) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(
            0,
            'Tabs and spaces may not be mixed.',
            t3.getColumn$1(t1._string_scanner$_position),
            t2 - t4
          );
        } else if (_this._spaces === true) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(
            0,
            'Expected spaces, was tabs.',
            t3.getColumn$1(t1._string_scanner$_position),
            t2 - t4
          );
        }
      } else if (t3 && _this._spaces === false) {
        t2 = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        t4 = t3.getColumn$1(t2);
        t1.error$3$length$position(
          0,
          'Expected tabs, was spaces.',
          t3.getColumn$1(t1._string_scanner$_position),
          t2 - t4
        );
      }
      _this._nextIndentation = nextIndentation._readLocal$0();
      if (nextIndentation._readLocal$0() > 0)
        if (_this._spaces == null) _this._spaces = containsSpace._readLocal$0();
      _this._nextIndentationEnd = new S._SpanScannerState(
        t1,
        t1._string_scanner$_position
      );
      t1.set$state(start);
      return nextIndentation._readLocal$0();
    },
  };
  U.SassParser_children_closure.prototype = {
    call$0() {
      var parsedChild = this.$this._child$1(this.child);
      if (parsedChild != null) this.children.push(parsedChild);
    },
    $signature: 0,
  };
  L.ScssParser.prototype = {
    get$indented() {
      return false;
    },
    get$currentIndentation() {
      return 0;
    },
    styleRuleSelector$0() {
      return this.almostAnyValue$0();
    },
    expectStatementSeparator$1($name) {
      var t1, next;
      this.whitespaceWithoutComments$0();
      t1 = this.scanner;
      if (t1._string_scanner$_position === t1.string.length) return;
      next = t1.peekChar$0();
      if (next === 59 || next === 125) return;
      t1.expectChar$1(59);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 59 || next === 125 || next === 123;
    },
    lookingAtChildren$0() {
      return this.scanner.peekChar$0() === 123;
    },
    scanElse$1(_) {
      var t3,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      _this.whitespace$0();
      t3 = t1._string_scanner$_position;
      if (t1.scanChar$1(64)) {
        if (_this.scanIdentifier$2$caseSensitive('else', true)) return true;
        if (_this.scanIdentifier$2$caseSensitive('elseif', true)) {
          _this.logger.warn$3$deprecation$span(
            0,
            string$.x40elsei,
            true,
            t1.spanFrom$1(new S._SpanScannerState(t1, t3))
          );
          t1.set$position(t1._string_scanner$_position - 2);
          return true;
        }
      }
      t1.set$state(new S._SpanScannerState(t1, t2));
      return false;
    },
    children$1(_, child) {
      var children,
        _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(123);
      _this.whitespaceWithoutComments$0();
      children = H._setArrayType([], type$.JSArray_Statement);
      for (; true; )
        switch (t1.peekChar$0()) {
          case 36:
            children.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                children.push(_this._scss$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                children.push(_this._scss$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                children.push(child.call$0());
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          case 125:
            t1.expectChar$1(125);
            return children;
          default:
            children.push(child.call$0());
            break;
        }
    },
    statements$1(statement) {
      var t1,
        t2,
        child,
        _this = this,
        statements = H._setArrayType([], type$.JSArray_Statement);
      _this.whitespaceWithoutComments$0();
      for (
        t1 = _this.scanner, t2 = t1.string.length;
        t1._string_scanner$_position !== t2;

      )
        switch (t1.peekChar$0()) {
          case 36:
            statements.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                statements.push(_this._scss$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                statements.push(_this._scss$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                child = statement.call$0();
                if (child != null) statements.push(child);
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          default:
            child = statement.call$0();
            if (child != null) statements.push(child);
            break;
        }
      return statements;
    },
    _scss$_silentComment$0() {
      var t2,
        t3,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expect$1('//');
      t2 = t1.string.length;
      do {
        while (true) {
          if (t1._string_scanner$_position !== t2) {
            t3 = t1.readChar$0();
            t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
          } else t3 = false;
          if (!t3) break;
        }
        if (t1._string_scanner$_position === t2) break;
        _this.whitespaceWithoutComments$0();
      } while (t1.scan$1('//'));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Silent, t1.spanFrom$1(start));
      return (_this.lastSilentComment = new B.SilentComment(
        t1.substring$1(0, start.position),
        t1.spanFrom$1(start)
      ));
    },
    _scss$_loudComment$0() {
      var t3,
        t4,
        buffer,
        t5,
        endPosition,
        t6,
        result,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('/*');
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t3._contents = '' + '/*';
      for (; true; )
        switch (t1.peekChar$0()) {
          case 35:
            if (t1.peekChar$1(1) === 123) {
              t5 = this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 42:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            if (t1.peekChar$0() !== 47) break;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t5 = t1._sourceFile;
            t6 = new S._SpanScannerState(t1, t2).position;
            t1 = new Y._FileSpan(t5, t6, endPosition);
            t1._FileSpan$3(t5, t6, endPosition);
            t6 = type$.Object;
            t5 = P.List_List$of(t4, true, t6);
            t2 = t3._contents;
            if (t2.length !== 0) t5.push(t2.charCodeAt(0) == 0 ? t2 : t2);
            result = P.List_List$from(t5, false, t6);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t2 = new X.Interpolation(result, t1);
            t2.Interpolation$2(t5, t1);
            return new L.LoudComment(t2);
          case 13:
            t1.readChar$0();
            if (t1.peekChar$0() !== 10)
              t3._contents += H.Primitives_stringFromCharCode(10);
            break;
          case 12:
            t1.readChar$0();
            t3._contents += H.Primitives_stringFromCharCode(10);
            break;
          default:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
    },
  };
  T.SelectorParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new T.SelectorParser_parse_closure(this)
      );
    },
    parseCompoundSelector$0() {
      return this.wrapSpanFormatException$1(
        new T.SelectorParser_parseCompoundSelector_closure(this)
      );
    },
    _selectorList$0() {
      var t3,
        t4,
        lineBreak,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._sourceFile,
        previousLine = t2.getLine$1(t1._string_scanner$_position),
        components = H._setArrayType(
          [_this._complexSelector$0()],
          type$.JSArray_ComplexSelector
        );
      _this.whitespace$0();
      for (t3 = t1.string.length; t1.scanChar$1(44); ) {
        _this.whitespace$0();
        if (t1.peekChar$0() === 44) continue;
        t4 = t1._string_scanner$_position;
        if (t4 === t3) break;
        lineBreak = t2.getLine$1(t4) !== previousLine;
        if (lineBreak)
          previousLine = t2.getLine$1(t1._string_scanner$_position);
        components.push(_this._complexSelector$1$lineBreak(lineBreak));
      }
      return D.SelectorList$(components);
    },
    _complexSelector$1$lineBreak(lineBreak) {
      var t1,
        next,
        _this = this,
        _s58_ = string$.x22x26__ma,
        components = H._setArrayType(
          [],
          type$.JSArray_ComplexSelectorComponent
        );
      $label0$1: for (t1 = _this.scanner; true; ) {
        _this.whitespace$0();
        next = t1.peekChar$0();
        switch (next) {
          case 43:
            t1.readChar$0();
            components.push(C.Combinator_uzg);
            break;
          case 62:
            t1.readChar$0();
            components.push(C.Combinator_sgq);
            break;
          case 126:
            t1.readChar$0();
            components.push(C.Combinator_CzM);
            break;
          case 91:
          case 46:
          case 35:
          case 37:
          case 58:
          case 38:
          case 42:
          case 124:
            components.push(_this._compoundSelector$0());
            if (t1.peekChar$0() === 38) t1.error$1(0, _s58_);
            break;
          default:
            if (next == null || !_this.lookingAtIdentifier$0()) break $label0$1;
            components.push(_this._compoundSelector$0());
            if (t1.peekChar$0() === 38) t1.error$1(0, _s58_);
            break;
        }
      }
      if (components.length === 0) t1.error$1(0, 'expected selector.');
      return S.ComplexSelector$(components, lineBreak);
    },
    _complexSelector$0() {
      return this._complexSelector$1$lineBreak(false);
    },
    _compoundSelector$0() {
      var t2,
        components = H._setArrayType(
          [this._simpleSelector$0()],
          type$.JSArray_SimpleSelector
        ),
        t1 = this.scanner;
      while (true) {
        t2 = t1.peekChar$0();
        if (
          !(
            t2 === 42 ||
            t2 === 91 ||
            t2 === 46 ||
            t2 === 35 ||
            t2 === 37 ||
            t2 === 58
          )
        )
          break;
        components.push(this._simpleSelector$1$allowParent(false));
      }
      return X.CompoundSelector$(components);
    },
    _simpleSelector$1$allowParent(allowParent) {
      var $name,
        text,
        t2,
        suffix,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (allowParent == null) allowParent = _this._allowParent;
      switch (t1.peekChar$0()) {
        case 91:
          return _this._attributeSelector$0();
        case 46:
          t1.expectChar$1(46);
          return new X.ClassSelector(_this.identifier$0());
        case 35:
          t1.expectChar$1(35);
          return new N.IDSelector(_this.identifier$0());
        case 37:
          t1.expectChar$1(37);
          $name = _this.identifier$0();
          if (!_this._allowPlaceholder)
            _this.error$2(0, string$.Placeh, t1.spanFrom$1(start));
          return new N.PlaceholderSelector($name);
        case 58:
          return _this._pseudoSelector$0();
        case 38:
          t1.expectChar$1(38);
          if (_this.lookingAtIdentifierBody$0()) {
            text = new P.StringBuffer('');
            _this._identifierBody$1(text);
            if (text._contents.length === 0)
              t1.error$1(0, 'Expected identifier body.');
            t2 = text._contents;
            suffix = t2.charCodeAt(0) == 0 ? t2 : t2;
          } else suffix = null;
          if (!allowParent)
            _this.error$2(
              0,
              "Parent selectors aren't allowed here.",
              t1.spanFrom$1(start)
            );
          return new M.ParentSelector(suffix);
        default:
          return _this._typeOrUniversalSelector$0();
      }
    },
    _simpleSelector$0() {
      return this._simpleSelector$1$allowParent(null);
    },
    _attributeSelector$0() {
      var $name,
        operator,
        next,
        value,
        modifier,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(91);
      _this.whitespace$0();
      $name = _this._attributeName$0();
      _this.whitespace$0();
      if (t1.scanChar$1(93))
        return new N.AttributeSelector($name, _null, _null, _null);
      operator = _this._attributeOperator$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      value =
        next === 39 || next === 34 ? _this.string$0() : _this.identifier$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      modifier =
        next != null && T.isAlphabetic0(next)
          ? H.Primitives_stringFromCharCode(t1.readChar$0())
          : _null;
      t1.expectChar$1(93);
      return new N.AttributeSelector($name, operator, value, modifier);
    },
    _attributeName$0() {
      var nameOrNamespace,
        _this = this,
        t1 = _this.scanner;
      if (t1.scanChar$1(42)) {
        t1.expectChar$1(124);
        return new D.QualifiedName(_this.identifier$0(), '*');
      }
      nameOrNamespace = _this.identifier$0();
      if (t1.peekChar$0() !== 124 || t1.peekChar$1(1) === 61)
        return new D.QualifiedName(nameOrNamespace, null);
      t1.readChar$0();
      return new D.QualifiedName(_this.identifier$0(), nameOrNamespace);
    },
    _attributeOperator$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      switch (t1.readChar$0()) {
        case 61:
          return C.AttributeOperator_sEs;
        case 126:
          t1.expectChar$1(61);
          return C.AttributeOperator_fz1;
        case 124:
          t1.expectChar$1(61);
          return C.AttributeOperator_AuK;
        case 94:
          t1.expectChar$1(61);
          return C.AttributeOperator_4L5;
        case 36:
          t1.expectChar$1(61);
          return C.AttributeOperator_mOX;
        case 42:
          t1.expectChar$1(61);
          return C.AttributeOperator_gqZ;
        default:
          t1.error$2$position(0, 'Expected "]".', t2);
      }
    },
    _pseudoSelector$0() {
      var element,
        $name,
        unvendored,
        selector,
        argument,
        t2,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(58);
      element = t1.scanChar$1(58);
      $name = _this.identifier$0();
      if (!t1.scanChar$1(40))
        return D.PseudoSelector$($name, _null, element, _null);
      _this.whitespace$0();
      unvendored = B.unvendor($name);
      if (element)
        if ($._selectorPseudoElements.contains$1(0, unvendored)) {
          selector = _this._selectorList$0();
          argument = _null;
        } else {
          argument = _this.declarationValue$1$allowEmpty(true);
          selector = _null;
        }
      else if ($._selectorPseudoClasses.contains$1(0, unvendored)) {
        selector = _this._selectorList$0();
        argument = _null;
      } else if (
        unvendored === 'nth-child' ||
        unvendored === 'nth-last-child'
      ) {
        argument = _this._aNPlusB$0();
        _this.whitespace$0();
        t2 = t1.peekChar$1(-1);
        if (
          (t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12) &&
          t1.peekChar$0() !== 41
        ) {
          _this.expectIdentifier$1('of');
          argument += ' of';
          _this.whitespace$0();
          selector = _this._selectorList$0();
        } else selector = _null;
      } else {
        argument = C.JSString_methods.trimRight$0(
          _this.declarationValue$1$allowEmpty(true)
        );
        selector = _null;
      }
      t1.expectChar$1(41);
      return D.PseudoSelector$($name, argument, element, selector);
    },
    _aNPlusB$0() {
      var t2,
        first,
        t3,
        next,
        last,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 101:
        case 69:
          _this.expectIdentifier$1('even');
          return 'even';
        case 111:
        case 79:
          _this.expectIdentifier$1('odd');
          return 'odd';
        case 43:
        case 45:
          t2 = '' + H.Primitives_stringFromCharCode(t1.readChar$0());
          break;
        default:
          t2 = '';
      }
      first = t1.peekChar$0();
      if (first != null && T.isDigit(first)) {
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
        _this.whitespace$0();
        if (!_this.scanIdentChar$1(110)) return t2.charCodeAt(0) == 0 ? t2 : t2;
      } else _this.expectIdentChar$1(110);
      t2 += H.Primitives_stringFromCharCode(110);
      _this.whitespace$0();
      next = t1.peekChar$0();
      if (next !== 43 && next !== 45) return t2.charCodeAt(0) == 0 ? t2 : t2;
      t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      _this.whitespace$0();
      last = t1.peekChar$0();
      if (last == null || !T.isDigit(last)) t1.error$1(0, 'Expected a number.');
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _typeOrUniversalSelector$0() {
      var nameOrNamespace,
        _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      if (first === 42) {
        t1.readChar$0();
        if (!t1.scanChar$1(124)) return new N.UniversalSelector(null);
        if (t1.scanChar$1(42)) return new N.UniversalSelector('*');
        else
          return new F.TypeSelector(
            new D.QualifiedName(_this.identifier$0(), '*')
          );
      } else if (first === 124) {
        t1.readChar$0();
        if (t1.scanChar$1(42)) return new N.UniversalSelector('');
        else
          return new F.TypeSelector(
            new D.QualifiedName(_this.identifier$0(), '')
          );
      }
      nameOrNamespace = _this.identifier$0();
      if (!t1.scanChar$1(124))
        return new F.TypeSelector(new D.QualifiedName(nameOrNamespace, null));
      else if (t1.scanChar$1(42))
        return new N.UniversalSelector(nameOrNamespace);
      else
        return new F.TypeSelector(
          new D.QualifiedName(_this.identifier$0(), nameOrNamespace)
        );
    },
  };
  T.SelectorParser_parse_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        selector = t1._selectorList$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, 'expected selector.');
      return selector;
    },
    $signature: 39,
  };
  T.SelectorParser_parseCompoundSelector_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        compound = t1._compoundSelector$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, 'expected selector.');
      return compound;
    },
    $signature: 247,
  };
  V.StylesheetParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new V.StylesheetParser_parse_closure(this)
      );
    },
    parseArgumentDeclaration$0() {
      return this._parseSingleProduction$1$1(
        new V.StylesheetParser_parseArgumentDeclaration_closure(this),
        type$.ArgumentDeclaration
      );
    },
    parseVariableDeclaration$0() {
      return this._parseSingleProduction$1$1(
        new V.StylesheetParser_parseVariableDeclaration_closure(this),
        type$.VariableDeclaration
      );
    },
    parseUseRule$0() {
      return this._parseSingleProduction$1$1(
        new V.StylesheetParser_parseUseRule_closure(this),
        type$.UseRule
      );
    },
    _parseSingleProduction$1$1(production, $T) {
      return this.wrapSpanFormatException$1(
        new V.StylesheetParser__parseSingleProduction_closure(
          this,
          production,
          $T
        )
      );
    },
    _statement$1$root(root) {
      var t2,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 64:
          return _this.atRule$2$root(
            new V.StylesheetParser__statement_closure(_this),
            root
          );
        case 43:
          if (!_this.get$indented() || !_this.lookingAtIdentifier$1(1))
            return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          return _this._includeRule$1(new S._SpanScannerState(t1, t2));
        case 61:
          if (!_this.get$indented()) return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          _this.whitespace$0();
          return _this._mixinRule$1(new S._SpanScannerState(t1, t2));
        case 125:
          t1.error$2$length(0, 'unmatched "}".', 1);
          break;
        default:
          return _this._inStyleRule ||
            _this._stylesheet$_inUnknownAtRule ||
            _this._stylesheet$_inMixin ||
            _this._inContentBlock
            ? _this._declarationOrStyleRule$0()
            : _this._variableDeclarationOrStyleRule$0();
      }
    },
    _statement$0() {
      return this._statement$1$root(false);
    },
    _variableDeclarationWithNamespace$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        namespace = this.identifier$0();
      t1.expectChar$1(46);
      return this.variableDeclarationWithoutNamespace$2(
        namespace,
        new S._SpanScannerState(t1, t2)
      );
    },
    variableDeclarationWithoutNamespace$2(namespace, start_) {
      var t1,
        start,
        $name,
        t2,
        value,
        flagStart,
        guarded,
        global,
        flag,
        endPosition,
        t3,
        t4,
        t5,
        declaration,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      if (start_ == null) {
        t1 = _this.scanner;
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      } else start = start_;
      $name = _this.variableName$0();
      t1 = namespace != null;
      if (t1)
        _this._assertPublic$2(
          $name,
          new V.StylesheetParser_variableDeclarationWithoutNamespace_closure(
            _this,
            start
          )
        );
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t2 = _this.scanner;
      t2.expectChar$1(58);
      _this.whitespace$0();
      value = _this.expression$0();
      flagStart = new S._SpanScannerState(t2, t2._string_scanner$_position);
      for (guarded = false, global = false; t2.scanChar$1(33); ) {
        flag = _this.identifier$0();
        if (flag === 'default') guarded = true;
        else if (flag === 'global') {
          if (t1) {
            endPosition = t2._string_scanner$_position;
            t3 = t2._sourceFile;
            t4 = flagStart.position;
            t5 = new Y._FileSpan(t3, t4, endPosition);
            t5._FileSpan$3(t3, t4, endPosition);
            _this.error$2(0, string$.x21globa, t5);
          }
          global = true;
        } else {
          endPosition = t2._string_scanner$_position;
          t3 = t2._sourceFile;
          t4 = flagStart.position;
          t5 = new Y._FileSpan(t3, t4, endPosition);
          t5._FileSpan$3(t3, t4, endPosition);
          _this.error$2(0, 'Invalid flag name.', t5);
        }
        _this.whitespace$0();
        flagStart = new S._SpanScannerState(t2, t2._string_scanner$_position);
      }
      _this.expectStatementSeparator$1('variable declaration');
      declaration = Z.VariableDeclaration$(
        $name,
        value,
        t2.spanFrom$1(start),
        precedingComment,
        global,
        guarded,
        namespace
      );
      if (global)
        _this._globalVariables.putIfAbsent$2(
          $name,
          new V.StylesheetParser_variableDeclarationWithoutNamespace_closure0(
            declaration
          )
        );
      return declaration;
    },
    variableDeclarationWithoutNamespace$0() {
      return this.variableDeclarationWithoutNamespace$2(null, null);
    },
    _variableDeclarationOrStyleRule$0() {
      var t1,
        t2,
        variableOrInterpolation,
        t3,
        _this = this;
      if (_this.get$plainCss()) return _this._styleRule$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      if (!_this.lookingAtIdentifier$0()) return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof Z.VariableDeclaration)
        return variableOrInterpolation;
      else {
        t3 = new Z.InterpolationBuffer(
          new P.StringBuffer(''),
          H._setArrayType([], type$.JSArray_Object)
        );
        t3.addInterpolation$1(type$.Interpolation._as(variableOrInterpolation));
        return _this._styleRule$2(t3, new S._SpanScannerState(t1, t2));
      }
    },
    _declarationOrStyleRule$0() {
      var t1,
        t2,
        declarationOrBuffer,
        _this = this;
      if (
        _this.get$plainCss() &&
        _this._inStyleRule &&
        !_this._stylesheet$_inUnknownAtRule
      )
        return _this._propertyOrVariableDeclaration$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      declarationOrBuffer = _this._declarationOrBuffer$0();
      return type$.Statement._is(declarationOrBuffer)
        ? declarationOrBuffer
        : _this._styleRule$2(
            type$.InterpolationBuffer._as(declarationOrBuffer),
            new S._SpanScannerState(t1, t2)
          );
    },
    _declarationOrBuffer$0() {
      var midBuffer,
        couldBeSelector,
        beforeDeclaration,
        additional,
        t4,
        startsWithPunctuation,
        variableOrInterpolation,
        t5,
        $name,
        postColonWhitespace,
        value,
        exception,
        _this = this,
        t1 = {},
        t2 = _this.scanner,
        start = new S._SpanScannerState(t2, t2._string_scanner$_position),
        t3 = type$.JSArray_Object,
        nameBuffer = new Z.InterpolationBuffer(
          new P.StringBuffer(''),
          H._setArrayType([], t3)
        ),
        first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46) t4 = first === 35 && t2.peekChar$1(1) !== 123;
          else t4 = true;
        else t4 = true;
      else t4 = true;
      if (t4) {
        t4 = t2.readChar$0();
        nameBuffer._interpolation_buffer$_text._contents += H.Primitives_stringFromCharCode(
          t4
        );
        t4 = _this.rawText$1(_this.get$whitespace());
        nameBuffer._interpolation_buffer$_text._contents += t4;
        startsWithPunctuation = true;
      } else startsWithPunctuation = false;
      if (!_this._lookingAtInterpolatedIdentifier$0()) return nameBuffer;
      variableOrInterpolation = startsWithPunctuation
        ? _this.interpolatedIdentifier$0()
        : _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof Z.VariableDeclaration)
        return variableOrInterpolation;
      else
        nameBuffer.addInterpolation$1(
          type$.Interpolation._as(variableOrInterpolation)
        );
      _this._isUseAllowed = false;
      if (t2.matches$1('/*')) {
        t4 = _this.rawText$1(_this.get$loudComment());
        nameBuffer._interpolation_buffer$_text._contents += t4;
      }
      midBuffer = new P.StringBuffer('');
      t4 = _this.get$whitespace();
      midBuffer._contents += _this.rawText$1(t4);
      t5 = t2._string_scanner$_position;
      if (!t2.scanChar$1(58)) {
        if (midBuffer._contents.length !== 0)
          nameBuffer._interpolation_buffer$_text._contents += H.Primitives_stringFromCharCode(
            32
          );
        return nameBuffer;
      }
      midBuffer._contents += H.Primitives_stringFromCharCode(58);
      $name = nameBuffer.interpolation$1(
        t2.spanFrom$2(start, new S._SpanScannerState(t2, t5))
      );
      if (C.JSString_methods.startsWith$1($name.get$initialPlain(), '--')) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1('custom property');
        return L.Declaration$(
          $name,
          new D.StringExpression(t1, false),
          t2.spanFrom$1(start)
        );
      }
      if (t2.scanChar$1(58)) {
        t1 = nameBuffer;
        t2 = t1._interpolation_buffer$_text;
        t3 = t2._contents += H.S(midBuffer);
        t2._contents = t3 + H.Primitives_stringFromCharCode(58);
        return t1;
      } else if (
        _this.get$indented() &&
        _this._lookingAtInterpolatedIdentifier$0()
      ) {
        t1 = nameBuffer;
        t1._interpolation_buffer$_text._contents += H.S(midBuffer);
        return t1;
      }
      postColonWhitespace = _this.rawText$1(t4);
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(
          _this.get$_declarationChild(),
          start,
          new V.StylesheetParser__declarationOrBuffer_closure($name)
        );
      midBuffer._contents += postColonWhitespace;
      couldBeSelector =
        postColonWhitespace.length === 0 &&
        _this._lookingAtInterpolatedIdentifier$0();
      beforeDeclaration = new S._SpanScannerState(
        t2,
        t2._string_scanner$_position
      );
      t4 = t1.value = null;
      try {
        if (_this.lookingAtChildren$0()) {
          t3 = H._setArrayType([], t3);
          t4 = Y.FileLocation$_(t2._sourceFile, t2._string_scanner$_position);
          t5 = t4.offset;
          value = new D.StringExpression(
            X.Interpolation$(t3, Y._FileSpan$(t4.file, t5, t5)),
            true
          );
        } else value = _this.expression$0();
        t3 = t1.value = value;
        if (_this.lookingAtChildren$0()) {
          if (couldBeSelector) _this.expectStatementSeparator$0();
        } else if (!_this.atEndOfStatement$0())
          _this.expectStatementSeparator$0();
      } catch (exception) {
        if (type$.FormatException._is(H.unwrapException(exception))) {
          if (!couldBeSelector) throw exception;
          t2.set$state(beforeDeclaration);
          additional = _this.almostAnyValue$0();
          if (!_this.get$indented() && t2.peekChar$0() === 59) throw exception;
          nameBuffer._interpolation_buffer$_text._contents += H.S(midBuffer);
          nameBuffer.addInterpolation$1(additional);
          return nameBuffer;
        } else throw exception;
      }
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(
          _this.get$_declarationChild(),
          start,
          new V.StylesheetParser__declarationOrBuffer_closure0(t1, $name)
        );
      else {
        _this.expectStatementSeparator$0();
        return L.Declaration$($name, t3, t2.spanFrom$1(start));
      }
    },
    _variableDeclarationOrInterpolation$0() {
      var t1,
        start,
        identifier,
        t2,
        buffer,
        _this = this;
      if (!_this.lookingAtIdentifier$0())
        return _this.interpolatedIdentifier$0();
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      identifier = _this.identifier$0();
      if (t1.matches$1('.$')) {
        t1.readChar$0();
        return _this.variableDeclarationWithoutNamespace$2(identifier, start);
      } else {
        t2 = new P.StringBuffer('');
        buffer = new Z.InterpolationBuffer(
          t2,
          H._setArrayType([], type$.JSArray_Object)
        );
        t2._contents = '' + identifier;
        if (_this._lookingAtInterpolatedIdentifierBody$0())
          buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        return buffer.interpolation$1(t1.spanFrom$1(start));
      }
    },
    _styleRule$2(buffer, start_) {
      var t2,
        start,
        interpolation,
        wasInStyleRule,
        _this = this,
        t1 = {};
      _this._isUseAllowed = false;
      if (start_ == null) {
        t2 = _this.scanner;
        start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      } else start = start_;
      interpolation = t1.interpolation = _this.styleRuleSelector$0();
      if (buffer != null) {
        buffer.addInterpolation$1(interpolation);
        t2 = t1.interpolation = buffer.interpolation$1(
          _this.scanner.spanFrom$1(start)
        );
      } else t2 = interpolation;
      if (t2.contents.length === 0) _this.scanner.error$1(0, 'expected "}".');
      wasInStyleRule = _this._inStyleRule;
      _this._inStyleRule = true;
      return _this._withChildren$3(
        _this.get$_statement(),
        start,
        new V.StylesheetParser__styleRule_closure(
          t1,
          _this,
          wasInStyleRule,
          start
        )
      );
    },
    _styleRule$0() {
      return this._styleRule$2(null, null);
    },
    _propertyOrVariableDeclaration$1$parseCustomProperties(
      parseCustomProperties
    ) {
      var first,
        t3,
        nameBuffer,
        variableOrInterpolation,
        $name,
        value,
        _this = this,
        _s48_ = string$.Nested,
        t1 = {},
        t2 = _this.scanner,
        start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      t1.name = null;
      first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46) t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else t3 = true;
        else t3 = true;
      else t3 = true;
      if (t3) {
        t3 = new P.StringBuffer('');
        nameBuffer = new Z.InterpolationBuffer(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
        t3._contents += H.Primitives_stringFromCharCode(t2.readChar$0());
        t3._contents += _this.rawText$1(_this.get$whitespace());
        nameBuffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        t3 = t1.name = nameBuffer.interpolation$1(t2.spanFrom$1(start));
      } else if (!_this.get$plainCss()) {
        variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
        if (variableOrInterpolation instanceof Z.VariableDeclaration)
          return variableOrInterpolation;
        else {
          type$.Interpolation._as(variableOrInterpolation);
          t1.name = variableOrInterpolation;
        }
        t3 = variableOrInterpolation;
      } else {
        $name = _this.interpolatedIdentifier$0();
        t1.name = $name;
        t3 = $name;
      }
      _this.whitespace$0();
      t2.expectChar$1(58);
      if (
        parseCustomProperties &&
        C.JSString_methods.startsWith$1(t3.get$initialPlain(), '--')
      ) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1('custom property');
        return L.Declaration$(
          t3,
          new D.StringExpression(t1, false),
          t2.spanFrom$1(start)
        );
      }
      _this.whitespace$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss()) t2.error$1(0, _s48_);
        return _this._withChildren$3(
          _this.get$_declarationChild(),
          start,
          new V.StylesheetParser__propertyOrVariableDeclaration_closure(t1)
        );
      }
      value = _this.expression$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss()) t2.error$1(0, _s48_);
        return _this._withChildren$3(
          _this.get$_declarationChild(),
          start,
          new V.StylesheetParser__propertyOrVariableDeclaration_closure0(
            t1,
            value
          )
        );
      } else {
        _this.expectStatementSeparator$0();
        return L.Declaration$(t3, value, t2.spanFrom$1(start));
      }
    },
    _propertyOrVariableDeclaration$0() {
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(true);
    },
    _declarationChild$0() {
      if (this.scanner.peekChar$0() === 64) return this._declarationAtRule$0();
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(false);
    },
    atRule$2$root(child, root) {
      var $name,
        wasUseAllowed,
        value,
        optional,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$2$name(64, '@-rule');
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      wasUseAllowed = _this._isUseAllowed;
      _this._isUseAllowed = false;
      switch ($name.get$asPlain()) {
        case 'at-root':
          return _this._atRootRule$1(start);
        case 'content':
          return _this._contentRule$1(start);
        case 'debug':
          return _this._debugRule$1(start);
        case 'each':
          return _this._eachRule$2(start, child);
        case 'else':
          return _this._disallowedAtRule$1(start);
        case 'error':
          return _this._errorRule$1(start);
        case 'extend':
          if (
            !_this._inStyleRule &&
            !_this._stylesheet$_inMixin &&
            !_this._inContentBlock
          )
            _this.error$2(0, string$.x40exten, t1.spanFrom$1(start));
          value = _this.almostAnyValue$0();
          optional = t1.scanChar$1(33);
          if (optional) _this.expectIdentifier$1('optional');
          _this.expectStatementSeparator$1('@extend rule');
          return new X.ExtendRule(value, optional, t1.spanFrom$1(start));
        case 'for':
          return _this._forRule$2(start, child);
        case 'forward':
          _this._isUseAllowed = wasUseAllowed;
          if (!root) _this._disallowedAtRule$1(start);
          return _this._forwardRule$1(start);
        case 'function':
          return _this._functionRule$1(start);
        case 'if':
          return _this._ifRule$2(start, child);
        case 'import':
          return _this._importRule$1(start);
        case 'include':
          return _this._includeRule$1(start);
        case 'media':
          return _this.mediaRule$1(start);
        case 'mixin':
          return _this._mixinRule$1(start);
        case '-moz-document':
          return _this.mozDocumentRule$2(start, $name);
        case 'return':
          return _this._disallowedAtRule$1(start);
        case 'supports':
          return _this.supportsRule$1(start);
        case 'use':
          _this._isUseAllowed = wasUseAllowed;
          if (!root) _this._disallowedAtRule$1(start);
          return _this._useRule$1(start);
        case 'warn':
          return _this._warnRule$1(start);
        case 'while':
          return _this._whileRule$2(start, child);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    _declarationAtRule$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._plainAtRuleName$0()) {
        case 'content':
          return _this._contentRule$1(start);
        case 'debug':
          return _this._debugRule$1(start);
        case 'each':
          return _this._eachRule$2(start, _this.get$_declarationChild());
        case 'else':
          return _this._disallowedAtRule$1(start);
        case 'error':
          return _this._errorRule$1(start);
        case 'for':
          return _this._forRule$2(start, _this.get$_declarationChild());
        case 'if':
          return _this._ifRule$2(start, _this.get$_declarationChild());
        case 'include':
          return _this._includeRule$1(start);
        case 'warn':
          return _this._warnRule$1(start);
        case 'while':
          return _this._whileRule$2(start, _this.get$_declarationChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _functionChild$0() {
      var state,
        variableDeclarationError,
        statement,
        t2,
        exception,
        t3,
        start,
        value,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 64) {
        state = new S._SpanScannerState(t1, t1._string_scanner$_position);
        try {
          t2 = _this._variableDeclarationWithNamespace$0();
          return t2;
        } catch (exception) {
          t2 = H.unwrapException(exception);
          t3 = type$.SourceSpanFormatException;
          if (t3._is(t2)) {
            variableDeclarationError = t2;
            t1.set$state(state);
            statement = null;
            try {
              statement = _this._declarationOrStyleRule$0();
            } catch (exception) {
              if (t3._is(H.unwrapException(exception)))
                throw H.wrapException(variableDeclarationError);
              else throw exception;
            }
            _this.error$2(
              0,
              '@function rules may not contain ' +
                (statement instanceof X.StyleRule
                  ? 'style rules'
                  : 'declarations') +
                '.',
              statement.get$span()
            );
          } else throw exception;
        }
      }
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._plainAtRuleName$0()) {
        case 'debug':
          return _this._debugRule$1(start);
        case 'each':
          return _this._eachRule$2(start, _this.get$_functionChild());
        case 'else':
          return _this._disallowedAtRule$1(start);
        case 'error':
          return _this._errorRule$1(start);
        case 'for':
          return _this._forRule$2(start, _this.get$_functionChild());
        case 'if':
          return _this._ifRule$2(start, _this.get$_functionChild());
        case 'return':
          value = _this.expression$0();
          _this.expectStatementSeparator$1('@return rule');
          return new B.ReturnRule(value, t1.spanFrom$1(start));
        case 'warn':
          return _this._warnRule$1(start);
        case 'while':
          return _this._whileRule$2(start, _this.get$_functionChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _plainAtRuleName$0() {
      this.scanner.expectChar$2$name(64, '@-rule');
      var $name = this.identifier$0();
      this.whitespace$0();
      return $name;
    },
    _atRootRule$1(start) {
      var query,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 40) {
        query = _this._atRootQuery$0();
        _this.whitespace$0();
        return _this._withChildren$3(
          _this.get$_statement(),
          start,
          new V.StylesheetParser__atRootRule_closure(query)
        );
      } else if (_this.lookingAtChildren$0())
        return _this._withChildren$3(
          _this.get$_statement(),
          start,
          new V.StylesheetParser__atRootRule_closure0()
        );
      else
        return V.AtRootRule$(
          H._setArrayType([_this._styleRule$0()], type$.JSArray_Statement),
          t1.spanFrom$1(start),
          null
        );
    },
    _atRootQuery$0() {
      var interpolation,
        t2,
        t3,
        t4,
        buffer,
        t5,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return X.Interpolation$(
          H._setArrayType([interpolation], type$.JSArray_Object),
          interpolation.get$span()
        );
      }
      t2 = t1._string_scanner$_position;
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t1.expectChar$1(40);
      t3._contents += H.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this.expression$0();
      buffer._flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += H.Primitives_stringFromCharCode(58);
        t3._contents = t5 + H.Primitives_stringFromCharCode(32);
        t5 = _this.expression$0();
        buffer._flushText$0();
        t4.push(t5);
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += H.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _contentRule$1(start) {
      var t1,
        $arguments,
        t2,
        t3,
        _this = this;
      if (!_this._stylesheet$_inMixin)
        _this.error$2(0, string$.x40conte, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = X.ArgumentInvocation$empty(Y._FileSpan$(t2.file, t3, t3));
      }
      _this.expectStatementSeparator$1('@content rule');
      return new Q.ContentRule($arguments, t1.spanFrom$1(start));
    },
    _debugRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@debug rule');
      return new Q.DebugRule(value, this.scanner.spanFrom$1(start));
    },
    _eachRule$2(start, child) {
      var variables,
        t1,
        _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variables = H._setArrayType(
        [_this.variableName$0()],
        type$.JSArray_String
      );
      _this.whitespace$0();
      for (t1 = _this.scanner; t1.scanChar$1(44); ) {
        _this.whitespace$0();
        t1.expectChar$1(36);
        variables.push(_this.identifier$1$normalize(true));
        _this.whitespace$0();
      }
      _this.expectIdentifier$1('in');
      _this.whitespace$0();
      return _this._withChildren$3(
        child,
        start,
        new V.StylesheetParser__eachRule_closure(
          _this,
          wasInControlDirective,
          variables,
          _this.expression$0()
        )
      );
    },
    _errorRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@error rule');
      return new D.ErrorRule(value, this.scanner.spanFrom$1(start));
    },
    _functionRule$1(start) {
      var $name,
        $arguments,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      $arguments = _this._argumentDeclaration$0();
      if (_this._stylesheet$_inMixin || _this._inContentBlock)
        _this.error$2(0, string$.Mixinscf, _this.scanner.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, string$.Functi, _this.scanner.spanFrom$1(start));
      switch (B.unvendor($name)) {
        case 'calc':
        case 'element':
        case 'expression':
        case 'url':
        case 'and':
        case 'or':
        case 'not':
        case 'clamp':
          _this.error$2(
            0,
            'Invalid function name.',
            _this.scanner.spanFrom$1(start)
          );
          break;
      }
      _this.whitespace$0();
      return _this._withChildren$3(
        _this.get$_functionChild(),
        start,
        new V.StylesheetParser__functionRule_closure(
          $name,
          $arguments,
          precedingComment
        )
      );
    },
    _forRule$2(start, child) {
      var variable,
        from,
        _this = this,
        t1 = {},
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variable = _this.variableName$0();
      _this.whitespace$0();
      _this.expectIdentifier$1('from');
      _this.whitespace$0();
      t1.exclusive = null;
      from = _this.expression$1$until(
        new V.StylesheetParser__forRule_closure(t1, _this)
      );
      if (t1.exclusive == null)
        _this.scanner.error$1(0, 'Expected "to" or "through".');
      _this.whitespace$0();
      return _this._withChildren$3(
        child,
        start,
        new V.StylesheetParser__forRule_closure0(
          t1,
          _this,
          wasInControlDirective,
          variable,
          from,
          _this.expression$0()
        )
      );
    },
    _forwardRule$1(start) {
      var prefix,
        members,
        shownMixinsAndFunctions,
        shownVariables,
        hiddenVariables,
        hiddenMixinsAndFunctions,
        configuration,
        span,
        t1,
        t2,
        t3,
        t4,
        _this = this,
        _null = null,
        url = _this._urlString$0();
      _this.whitespace$0();
      if (_this.scanIdentifier$1('as')) {
        _this.whitespace$0();
        prefix = _this.identifier$1$normalize(true);
        _this.scanner.expectChar$1(42);
        _this.whitespace$0();
      } else prefix = _null;
      if (_this.scanIdentifier$1('show')) {
        members = _this._memberList$0();
        shownMixinsAndFunctions = members.item1;
        shownVariables = members.item2;
        hiddenVariables = _null;
        hiddenMixinsAndFunctions = hiddenVariables;
      } else {
        if (_this.scanIdentifier$1('hide')) {
          members = _this._memberList$0();
          hiddenMixinsAndFunctions = members.item1;
          hiddenVariables = members.item2;
        } else {
          hiddenVariables = _null;
          hiddenMixinsAndFunctions = hiddenVariables;
        }
        shownVariables = _null;
        shownMixinsAndFunctions = shownVariables;
      }
      configuration = _this._stylesheet$_configuration$1$allowGuarded(true);
      _this.expectStatementSeparator$1('@forward rule');
      span = _this.scanner.spanFrom$1(start);
      if (!_this._isUseAllowed) _this.error$2(0, string$.x40forwa, span);
      if (shownMixinsAndFunctions != null) {
        shownVariables.toString;
        t1 = type$.String;
        t2 = P.LinkedHashSet_LinkedHashSet$of(shownMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = P.LinkedHashSet_LinkedHashSet$of(shownVariables, t1);
        t4 =
          configuration == null
            ? C.List_empty6
            : P.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new L.ForwardRule(
          url,
          new L.UnmodifiableSetView(t2, t3),
          new L.UnmodifiableSetView(t1, t3),
          _null,
          _null,
          prefix,
          t4,
          span
        );
      } else if (hiddenMixinsAndFunctions != null) {
        hiddenVariables.toString;
        t1 = type$.String;
        t2 = P.LinkedHashSet_LinkedHashSet$of(hiddenMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = P.LinkedHashSet_LinkedHashSet$of(hiddenVariables, t1);
        t4 =
          configuration == null
            ? C.List_empty6
            : P.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new L.ForwardRule(
          url,
          _null,
          _null,
          new L.UnmodifiableSetView(t2, t3),
          new L.UnmodifiableSetView(t1, t3),
          prefix,
          t4,
          span
        );
      } else
        return new L.ForwardRule(
          url,
          _null,
          _null,
          _null,
          _null,
          prefix,
          configuration == null
            ? C.List_empty6
            : P.List_List$unmodifiable(configuration, type$.ConfiguredVariable),
          span
        );
    },
    _memberList$0() {
      var _this = this,
        t1 = type$.String,
        identifiers = P.LinkedHashSet_LinkedHashSet$_empty(t1),
        variables = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      t1 = _this.scanner;
      do {
        _this.whitespace$0();
        _this.withErrorMessage$2(
          string$.Expect,
          new V.StylesheetParser__memberList_closure(
            _this,
            variables,
            identifiers
          )
        );
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      return new S.Tuple2(
        identifiers,
        variables,
        type$.Tuple2_of_Set_String_and_Set_String
      );
    },
    _ifRule$2(start, child) {
      var condition,
        children,
        clauses,
        lastClause,
        span,
        _this = this,
        ifIndentation = _this.get$currentIndentation(),
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      condition = _this.expression$0();
      children = _this.children$1(0, child);
      _this.whitespaceWithoutComments$0();
      clauses = H._setArrayType(
        [V.IfClause$(condition, children)],
        type$.JSArray_IfClause
      );
      while (true) {
        if (!_this.scanElse$1(ifIndentation)) {
          lastClause = null;
          break;
        }
        _this.whitespace$0();
        if (_this.scanIdentifier$1('if')) {
          _this.whitespace$0();
          clauses.push(
            V.IfClause$(_this.expression$0(), _this.children$1(0, child))
          );
        } else {
          lastClause = V.ElseClause$(_this.children$1(0, child));
          break;
        }
      }
      _this._inControlDirective = wasInControlDirective;
      span = _this.scanner.spanFrom$1(start);
      _this.whitespaceWithoutComments$0();
      return new V.IfRule(
        P.List_List$unmodifiable(clauses, type$.IfClause),
        lastClause,
        span
      );
    },
    _importRule$1(start) {
      var argument,
        _this = this,
        imports = H._setArrayType([], type$.JSArray_Import),
        t1 = _this.scanner;
      do {
        _this.whitespace$0();
        argument = _this.importArgument$0();
        if (
          (_this._inControlDirective || _this._stylesheet$_inMixin) &&
          argument instanceof B.DynamicImport
        )
          _this._disallowedAtRule$1(start);
        imports.push(argument);
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      _this.expectStatementSeparator$1('@import rule');
      t1 = t1.spanFrom$1(start);
      return new B.ImportRule(
        P.List_List$unmodifiable(imports, type$.Import),
        t1
      );
    },
    importArgument$0() {
      var url,
        urlSpan,
        innerError,
        queries,
        t2,
        t3,
        t4,
        exception,
        _this = this,
        _null = null,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        next = t1.peekChar$0();
      if (next === 117 || next === 85) {
        url = _this.dynamicUrl$0();
        _this.whitespace$0();
        queries = _this.tryImportQueries$0();
        t2 = X.Interpolation$(
          H._setArrayType([url], type$.JSArray_Object),
          t1.spanFrom$1(start)
        );
        t1 = t1.spanFrom$1(start);
        t3 = queries == null;
        t4 = t3 ? _null : queries.item1;
        return new Q.StaticImport(t2, t4, t3 ? _null : queries.item2, t1);
      }
      url = _this.string$0();
      urlSpan = t1.spanFrom$1(start);
      _this.whitespace$0();
      queries = _this.tryImportQueries$0();
      if (_this.isPlainImportUrl$1(url) || queries != null) {
        t2 = urlSpan;
        t2 = X.Interpolation$(
          H._setArrayType(
            [
              P.String_String$fromCharCodes(
                C.NativeUint32List_methods.sublist$2(
                  t2.file._decodedChars,
                  t2._file$_start,
                  t2._end
                ),
                0,
                _null
              ),
            ],
            type$.JSArray_Object
          ),
          urlSpan
        );
        t1 = t1.spanFrom$1(start);
        t3 = queries == null;
        t4 = t3 ? _null : queries.item1;
        return new Q.StaticImport(t2, t4, t3 ? _null : queries.item2, t1);
      } else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new B.DynamicImport(t1, urlSpan);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            _this.error$2(
              0,
              'Invalid URL: ' + J.get$message$x(innerError),
              urlSpan
            );
          } else throw exception;
        }
    },
    parseImportUrl$1(url) {
      var t1 = $.$get$windows();
      if (
        t1.style.rootLength$1(url) > 0 &&
        !$.$get$url().style.isRootRelative$1(url)
      )
        return t1.toUri$1(url).toString$0(0);
      P.Uri_parse(url);
      return url;
    },
    isPlainImportUrl$1(url) {
      var first;
      if (url.length < 5) return false;
      if (C.JSString_methods.endsWith$1(url, '.css')) return true;
      first = C.JSString_methods._codeUnitAt$1(url, 0);
      if (first === 47) return C.JSString_methods._codeUnitAt$1(url, 1) === 47;
      if (first !== 104) return false;
      return (
        C.JSString_methods.startsWith$1(url, 'http://') ||
        C.JSString_methods.startsWith$1(url, 'https://')
      );
    },
    tryImportQueries$0() {
      var t1,
        start,
        supports,
        $name,
        media,
        _this = this;
      if (_this.scanIdentifier$1('supports')) {
        t1 = _this.scanner;
        t1.expectChar$1(40);
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
        if (_this.scanIdentifier$1('not')) {
          _this.whitespace$0();
          supports = new M.SupportsNegation(
            _this._supportsConditionInParens$0(),
            t1.spanFrom$1(start)
          );
        } else if (t1.peekChar$0() === 40)
          supports = _this._supportsCondition$0();
        else {
          $name = _this.expression$0();
          t1.expectChar$1(58);
          _this.whitespace$0();
          supports = new L.SupportsDeclaration(
            $name,
            _this.expression$0(),
            t1.spanFrom$1(start)
          );
        }
        t1.expectChar$1(41);
        _this.whitespace$0();
      } else supports = null;
      media =
        _this._lookingAtInterpolatedIdentifier$0() ||
        _this.scanner.peekChar$0() === 40
          ? _this._mediaQueryList$0()
          : null;
      if (supports == null && media == null) return null;
      return new S.Tuple2(
        supports,
        media,
        type$.Tuple2_of_nullable_SupportsCondition_and_nullable_Interpolation
      );
    },
    _includeRule$1(start) {
      var name0,
        namespace,
        $arguments,
        t2,
        t3,
        contentArguments,
        contentArguments_,
        wasInContentBlock,
        $content,
        _this = this,
        _null = null,
        $name = _this.identifier$0(),
        t1 = _this.scanner;
      if (t1.scanChar$1(46)) {
        name0 = _this._publicIdentifier$0();
        namespace = $name;
        $name = name0;
      } else {
        $name = H.stringReplaceAllUnchecked($name, '_', '-');
        namespace = _null;
      }
      _this.whitespace$0();
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = X.ArgumentInvocation$empty(Y._FileSpan$(t2.file, t3, t3));
      }
      _this.whitespace$0();
      if (_this.scanIdentifier$1('using')) {
        _this.whitespace$0();
        contentArguments = _this._argumentDeclaration$0();
        _this.whitespace$0();
      } else contentArguments = _null;
      t2 = contentArguments == null;
      if (!t2 || _this.lookingAtChildren$0()) {
        if (t2) {
          t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
          t3 = t2.offset;
          contentArguments_ = new B.ArgumentDeclaration(
            C.List_empty8,
            _null,
            Y._FileSpan$(t2.file, t3, t3)
          );
        } else contentArguments_ = contentArguments;
        wasInContentBlock = _this._inContentBlock;
        _this._inContentBlock = true;
        $content = _this._withChildren$3(
          _this.get$_statement(),
          start,
          new V.StylesheetParser__includeRule_closure(contentArguments_)
        );
        _this._inContentBlock = wasInContentBlock;
      } else {
        _this.expectStatementSeparator$0();
        $content = _null;
      }
      t1 = t1.spanFrom$2(start, start);
      return new A.IncludeRule(
        namespace,
        $name,
        $arguments,
        $content,
        t1.expand$1(0, ($content == null ? $arguments : $content).get$span())
      );
    },
    mediaRule$1(start) {
      return this._withChildren$3(
        this.get$_statement(),
        start,
        new V.StylesheetParser_mediaRule_closure(this._mediaQueryList$0())
      );
    },
    _mixinRule$1(start) {
      var $name,
        t1,
        $arguments,
        t2,
        t3,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40) $arguments = _this._argumentDeclaration$0();
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = new B.ArgumentDeclaration(
          C.List_empty8,
          null,
          Y._FileSpan$(t2.file, t3, t3)
        );
      }
      if (_this._stylesheet$_inMixin || _this._inContentBlock)
        _this.error$2(0, string$.Mixinscm, t1.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, string$.Mixinsb, t1.spanFrom$1(start));
      _this.whitespace$0();
      _this._stylesheet$_inMixin = true;
      return _this._withChildren$3(
        _this.get$_statement(),
        start,
        new V.StylesheetParser__mixinRule_closure(
          _this,
          $name,
          $arguments,
          precedingComment
        )
      );
    },
    mozDocumentRule$2(start, $name) {
      var t5,
        t6,
        identifier,
        contents,
        argument,
        trailing,
        endPosition,
        t7,
        t8,
        start0,
        end,
        _this = this,
        _box_0 = {},
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        t4 = H._setArrayType([], type$.JSArray_Object),
        buffer = new Z.InterpolationBuffer(t3, t4);
      _box_0.needsDeprecationWarning = false;
      for (t5 = _this.get$whitespace(); true; ) {
        if (t1.peekChar$0() === 35) {
          t6 = _this.singleInterpolation$0();
          buffer._flushText$0();
          t4.push(t6);
          _box_0.needsDeprecationWarning = true;
        } else {
          t6 = t1._string_scanner$_position;
          identifier = _this.identifier$0();
          switch (identifier) {
            case 'url':
            case 'url-prefix':
            case 'domain':
              contents = _this._tryUrlContents$2$name(
                new S._SpanScannerState(t1, t6),
                identifier
              );
              if (contents != null) buffer.addInterpolation$1(contents);
              else {
                t1.expectChar$1(40);
                _this.whitespace$0();
                argument = _this.interpolatedString$0();
                t1.expectChar$1(41);
                t6 = t3._contents += identifier;
                t3._contents = t6 + H.Primitives_stringFromCharCode(40);
                buffer.addInterpolation$1(argument.asInterpolation$0());
                t3._contents += H.Primitives_stringFromCharCode(41);
              }
              t6 = t3._contents;
              trailing = t6.charCodeAt(0) == 0 ? t6 : t6;
              if (
                !C.JSString_methods.endsWith$1(trailing, 'url-prefix()') &&
                !C.JSString_methods.endsWith$1(trailing, "url-prefix('')") &&
                !C.JSString_methods.endsWith$1(trailing, 'url-prefix("")')
              )
                _box_0.needsDeprecationWarning = true;
              break;
            case 'regexp':
              t3._contents += 'regexp(';
              t1.expectChar$1(40);
              buffer.addInterpolation$1(
                _this.interpolatedString$0().asInterpolation$0()
              );
              t1.expectChar$1(41);
              t3._contents += H.Primitives_stringFromCharCode(41);
              _box_0.needsDeprecationWarning = true;
              break;
            default:
              endPosition = t1._string_scanner$_position;
              t7 = t1._sourceFile;
              t8 = new Y._FileSpan(t7, t6, endPosition);
              t8._FileSpan$3(t7, t6, endPosition);
              _this.error$2(0, 'Invalid function name.', t8);
          }
        }
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) break;
        t3._contents += H.Primitives_stringFromCharCode(44);
        start0 = t1._string_scanner$_position;
        t5.call$0();
        end = t1._string_scanner$_position;
        t3._contents += C.JSString_methods.substring$2(t1.string, start0, end);
      }
      return _this._withChildren$3(
        _this.get$_statement(),
        start,
        new V.StylesheetParser_mozDocumentRule_closure(
          _box_0,
          _this,
          $name,
          buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2)))
        )
      );
    },
    supportsRule$1(start) {
      var _this = this,
        condition = _this._supportsCondition$0();
      _this.whitespace$0();
      return _this._withChildren$3(
        _this.get$_statement(),
        start,
        new V.StylesheetParser_supportsRule_closure(condition)
      );
    },
    _useRule$1(start) {
      var namespace,
        configuration,
        span,
        t1,
        _this = this,
        _s9_ = '@use rule',
        url = _this._urlString$0();
      _this.whitespace$0();
      namespace = _this._useNamespace$2(url, start);
      _this.whitespace$0();
      configuration = _this._stylesheet$_configuration$0();
      _this.expectStatementSeparator$1(_s9_);
      span = _this.scanner.spanFrom$1(start);
      if (!_this._isUseAllowed) _this.error$2(0, string$.x40use_r, span);
      _this.expectStatementSeparator$1(_s9_);
      t1 = new T.UseRule(
        url,
        namespace,
        configuration == null
          ? C.List_empty6
          : P.List_List$unmodifiable(configuration, type$.ConfiguredVariable),
        span
      );
      t1.UseRule$4$configuration(url, namespace, span, configuration);
      return t1;
    },
    _useNamespace$2(url, start) {
      var namespace,
        basename,
        dot,
        t1,
        exception,
        _this = this;
      if (_this.scanIdentifier$1('as')) {
        _this.whitespace$0();
        return _this.scanner.scanChar$1(42) ? null : _this.identifier$0();
      }
      basename =
        url.get$pathSegments().length === 0
          ? ''
          : C.JSArray_methods.get$last(url.get$pathSegments());
      dot = C.JSString_methods.indexOf$1(basename, '.');
      t1 = C.JSString_methods.startsWith$1(basename, '_') ? 1 : 0;
      namespace = C.JSString_methods.substring$2(
        basename,
        t1,
        dot === -1 ? basename.length : dot
      );
      try {
        t1 = S.SpanScanner$(namespace, null);
        t1 = new G.Parser(t1, _this.logger)._parseIdentifier$0();
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassFormatException)
          _this.error$2(
            0,
            'Invalid Sass identifier "' + H.S(namespace) + '"',
            _this.scanner.spanFrom$1(start)
          );
        else throw exception;
      }
    },
    _stylesheet$_configuration$1$allowGuarded(allowGuarded) {
      var variableNames,
        configuration,
        t1,
        t2,
        $name,
        expression,
        t3,
        guarded,
        endPosition,
        t4,
        t5,
        span,
        _this = this;
      if (!_this.scanIdentifier$1('with')) return null;
      variableNames = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      configuration = H._setArrayType([], type$.JSArray_ConfiguredVariable);
      _this.whitespace$0();
      t1 = _this.scanner;
      t1.expectChar$1(40);
      for (; true; ) {
        _this.whitespace$0();
        t2 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        t1.expectChar$1(58);
        _this.whitespace$0();
        expression = _this._expressionUntilComma$0();
        t3 = t1._string_scanner$_position;
        if (allowGuarded && t1.scanChar$1(33))
          if (_this.identifier$0() === 'default') {
            _this.whitespace$0();
            guarded = true;
          } else {
            endPosition = t1._string_scanner$_position;
            t4 = t1._sourceFile;
            t5 = new Y._FileSpan(t4, t3, endPosition);
            t5._FileSpan$3(t4, t3, endPosition);
            _this.error$2(0, 'Invalid flag name.', t5);
            guarded = false;
          }
        else guarded = false;
        endPosition = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        span = new Y._FileSpan(t3, t2, endPosition);
        span._FileSpan$3(t3, t2, endPosition);
        if (variableNames.contains$1(0, $name))
          _this.error$2(0, string$.The_sa, span);
        variableNames.add$1(0, $name);
        configuration.push(
          new Z.ConfiguredVariable($name, expression, guarded, span)
        );
        if (!t1.scanChar$1(44)) break;
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0()) break;
      }
      t1.expectChar$1(41);
      return configuration;
    },
    _stylesheet$_configuration$0() {
      return this._stylesheet$_configuration$1$allowGuarded(false);
    },
    _warnRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@warn rule');
      return new Y.WarnRule(value, this.scanner.spanFrom$1(start));
    },
    _whileRule$2(start, child) {
      var _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      return _this._withChildren$3(
        child,
        start,
        new V.StylesheetParser__whileRule_closure(
          _this,
          wasInControlDirective,
          _this.expression$0()
        )
      );
    },
    unknownAtRule$2(start, $name) {
      var t2,
        t3,
        rule,
        _this = this,
        t1 = {},
        wasInUnknownAtRule = _this._stylesheet$_inUnknownAtRule;
      _this._stylesheet$_inUnknownAtRule = true;
      t1.value = null;
      t2 = _this.scanner;
      t3 =
        t2.peekChar$0() !== 33 && !_this.atEndOfStatement$0()
          ? (t1.value = _this.almostAnyValue$0())
          : null;
      if (_this.lookingAtChildren$0())
        rule = _this._withChildren$3(
          _this.get$_statement(),
          start,
          new V.StylesheetParser_unknownAtRule_closure(t1, $name)
        );
      else {
        _this.expectStatementSeparator$0();
        rule = U.AtRule$($name, t2.spanFrom$1(start), null, t3);
      }
      _this._stylesheet$_inUnknownAtRule = wasInUnknownAtRule;
      return rule;
    },
    _disallowedAtRule$1(start) {
      this.almostAnyValue$0();
      this.error$2(
        0,
        'This at-rule is not allowed here.',
        this.scanner.spanFrom$1(start)
      );
    },
    _argumentDeclaration$0() {
      var $arguments,
        named,
        restArgument,
        t3,
        $name,
        defaultValue,
        endPosition,
        t4,
        t5,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      $arguments = H._setArrayType([], type$.JSArray_Argument);
      named = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      while (true) {
        if (!(t1.peekChar$0() === 36)) {
          restArgument = null;
          break;
        }
        t3 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          defaultValue = _this._expressionUntilComma$0();
        } else {
          if (t1.scanChar$1(46)) {
            t1.expectChar$1(46);
            t1.expectChar$1(46);
            _this.whitespace$0();
            restArgument = $name;
            break;
          }
          defaultValue = null;
        }
        endPosition = t1._string_scanner$_position;
        t4 = t1._sourceFile;
        t5 = new Y._FileSpan(t4, t3, endPosition);
        t5._FileSpan$3(t4, t3, endPosition);
        $arguments.push(new Z.Argument($name, defaultValue, t5));
        if (!named.add$1(0, $name))
          _this.error$2(
            0,
            'Duplicate argument.',
            C.JSArray_methods.get$last($arguments).span
          );
        if (!t1.scanChar$1(44)) {
          restArgument = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new B.ArgumentDeclaration(
        P.List_List$unmodifiable($arguments, type$.Argument),
        restArgument,
        t1
      );
    },
    _argumentInvocation$1$mixin(mixin) {
      var positional,
        t3,
        t4,
        named,
        keywordRest,
        t5,
        rest,
        expression,
        t6,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      positional = H._setArrayType([], type$.JSArray_Expression);
      t3 = type$.String;
      t4 = type$.Expression;
      named = P.LinkedHashMap_LinkedHashMap$_empty(t3, t4);
      t5 = !mixin;
      rest = null;
      while (true) {
        if (!_this._lookingAtExpression$0()) {
          keywordRest = null;
          break;
        }
        expression = _this._expressionUntilComma$1$singleEquals(t5);
        _this.whitespace$0();
        if (expression instanceof S.VariableExpression && t1.scanChar$1(58)) {
          _this.whitespace$0();
          t6 = expression.name;
          if (named.containsKey$1(t6))
            _this.error$2(0, 'Duplicate argument.', expression.span);
          named.$indexSet(
            0,
            t6,
            _this._expressionUntilComma$1$singleEquals(t5)
          );
        } else if (t1.scanChar$1(46)) {
          t1.expectChar$1(46);
          t1.expectChar$1(46);
          if (rest != null) {
            _this.whitespace$0();
            keywordRest = expression;
            break;
          }
          rest = expression;
        } else if (named.get$isNotEmpty(named))
          _this.error$2(0, string$.Positi, expression.get$span());
        else positional.push(expression);
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) {
          keywordRest = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new X.ArgumentInvocation(
        P.List_List$unmodifiable(positional, t4),
        H.ConstantMap_ConstantMap$from(named, t3, t4),
        rest,
        keywordRest,
        t1
      );
    },
    _argumentInvocation$0() {
      return this._argumentInvocation$1$mixin(false);
    },
    expression$3$bracketList$singleEquals$until(
      bracketList,
      singleEquals,
      until
    ) {
      var t2,
        beforeBracket,
        start,
        wasInParentheses,
        resetState,
        resolveOneOperation,
        resolveOperations,
        addSingleExpression,
        addOperator,
        resolveSpaceExpressions,
        t3,
        first,
        next,
        t4,
        commaExpressions,
        spaceExpressions,
        singleExpression,
        _this = this,
        _s20_ = 'Expected expression.',
        _box_0 = {},
        t1 = until != null;
      if (t1 && until.call$0()) _this.scanner.error$1(0, _s20_);
      if (bracketList) {
        t2 = _this.scanner;
        beforeBracket = new S._SpanScannerState(
          t2,
          t2._string_scanner$_position
        );
        t2.expectChar$1(91);
        _this.whitespace$0();
        if (t2.scanChar$1(93)) {
          t1 = H._setArrayType([], type$.JSArray_Expression);
          t2 = t2.spanFrom$1(beforeBracket);
          return new D.ListExpression(
            P.List_List$unmodifiable(t1, type$.Expression),
            C.ListSeparator_undecided_null,
            true,
            t2
          );
        }
      } else beforeBracket = null;
      t2 = _this.scanner;
      start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      wasInParentheses = _this._inParentheses;
      _box_0.operands_ = _box_0.operators_ = _box_0.spaceExpressions_ = _box_0.commaExpressions_ = null;
      _box_0.allowSlash = _this.lookingAtNumber$0();
      _box_0.singleExpression_ = _this._singleExpression$0();
      resetState = new V.StylesheetParser_expression_resetState(
        _box_0,
        _this,
        start
      );
      resolveOneOperation = new V.StylesheetParser_expression_resolveOneOperation(
        _box_0,
        _this
      );
      resolveOperations = new V.StylesheetParser_expression_resolveOperations(
        _box_0,
        resolveOneOperation
      );
      addSingleExpression = new V.StylesheetParser_expression_addSingleExpression(
        _box_0,
        _this,
        resetState,
        resolveOperations
      );
      addOperator = new V.StylesheetParser_expression_addOperator(
        _box_0,
        _this,
        resolveOneOperation
      );
      resolveSpaceExpressions = new V.StylesheetParser_expression_resolveSpaceExpressions(
        _box_0,
        _this,
        resolveOperations
      );
      $label0$0: for (t3 = type$.JSArray_Expression; true; ) {
        _this.whitespace$0();
        if (t1 && until.call$0()) break $label0$0;
        first = t2.peekChar$0();
        switch (first) {
          case 40:
            addSingleExpression.call$1(_this._parentheses$0());
            break;
          case 91:
            addSingleExpression.call$1(_this.expression$1$bracketList(true));
            break;
          case 36:
            addSingleExpression.call$1(_this._variable$0());
            break;
          case 38:
            addSingleExpression.call$1(_this._selector$0());
            break;
          case 39:
          case 34:
            addSingleExpression.call$1(_this.interpolatedString$0());
            break;
          case 35:
            addSingleExpression.call$1(_this._hashExpression$0());
            break;
          case 61:
            t2.readChar$0();
            if (singleEquals && t2.peekChar$0() !== 61)
              addOperator.call$1(C.BinaryOperator_kjl);
            else {
              t2.expectChar$1(61);
              addOperator.call$1(C.BinaryOperator_YlX);
            }
            break;
          case 33:
            next = t2.peekChar$1(1);
            if (next === 61) {
              t2.readChar$0();
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_i5H);
            } else {
              if (next != null)
                if ((next | 32) >>> 0 !== 105)
                  t4 =
                    next === 32 ||
                    next === 9 ||
                    next === 10 ||
                    next === 13 ||
                    next === 12;
                else t4 = true;
              else t4 = true;
              if (t4)
                addSingleExpression.call$1(_this._importantExpression$0());
              else break $label0$0;
            }
            break;
          case 60:
            t2.readChar$0();
            addOperator.call$1(
              t2.scanChar$1(61) ? C.BinaryOperator_33h : C.BinaryOperator_8qt
            );
            break;
          case 62:
            t2.readChar$0();
            addOperator.call$1(
              t2.scanChar$1(61) ? C.BinaryOperator_1da : C.BinaryOperator_AcR
            );
            break;
          case 42:
            t2.readChar$0();
            addOperator.call$1(C.BinaryOperator_O1M);
            break;
          case 43:
            if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(_this._unaryOperation$0());
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_AcR0);
            }
            break;
          case 45:
            next = t2.peekChar$1(1);
            if ((next != null && next >= 48 && next <= 57) || next === 46)
              if (_box_0.singleExpression_ != null) {
                t4 = t2.peekChar$1(-1);
                t4 =
                  t4 === 32 || t4 === 9 || t4 === 10 || t4 === 13 || t4 === 12;
              } else t4 = true;
            else t4 = false;
            if (t4) addSingleExpression.call$2$number(_this._number$0(), true);
            else if (_this._lookingAtInterpolatedIdentifier$0())
              addSingleExpression.call$1(_this.identifierLike$0());
            else if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(_this._unaryOperation$0());
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_iyO);
            }
            break;
          case 47:
            if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(_this._unaryOperation$0());
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_RTB);
            }
            break;
          case 37:
            t2.readChar$0();
            addOperator.call$1(C.BinaryOperator_2ad);
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            addSingleExpression.call$2$number(_this._number$0(), true);
            break;
          case 46:
            if (t2.peekChar$1(1) === 46) break $label0$0;
            addSingleExpression.call$2$number(_this._number$0(), true);
            break;
          case 97:
            if (!_this.get$plainCss() && _this.scanIdentifier$1('and'))
              addOperator.call$1(C.BinaryOperator_and_and_2);
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 111:
            if (!_this.get$plainCss() && _this.scanIdentifier$1('or'))
              addOperator.call$1(C.BinaryOperator_or_or_1);
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 117:
          case 85:
            if (t2.peekChar$1(1) === 43)
              addSingleExpression.call$1(_this._unicodeRange$0());
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 95:
          case 92:
            addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 44:
            if (_this._inParentheses) {
              _this._inParentheses = false;
              if (_box_0.allowSlash) {
                resetState.call$0();
                break;
              }
            }
            commaExpressions = _box_0.commaExpressions_;
            if (commaExpressions == null)
              commaExpressions = _box_0.commaExpressions_ = H._setArrayType(
                [],
                t3
              );
            if (_box_0.singleExpression_ == null) t2.error$1(0, _s20_);
            resolveSpaceExpressions.call$0();
            t4 = _box_0.singleExpression_;
            t4.toString;
            commaExpressions.push(t4);
            t2.readChar$0();
            _box_0.allowSlash = true;
            _box_0.singleExpression_ = null;
            break;
          default:
            if (first != null && first >= 128) {
              addSingleExpression.call$1(_this.identifierLike$0());
              break;
            } else break $label0$0;
        }
      }
      if (bracketList) t2.expectChar$1(93);
      commaExpressions = _box_0.commaExpressions_;
      spaceExpressions = _box_0.spaceExpressions_;
      if (commaExpressions != null) {
        resolveSpaceExpressions.call$0();
        _this._inParentheses = wasInParentheses;
        singleExpression = _box_0.singleExpression_;
        if (singleExpression != null) commaExpressions.push(singleExpression);
        t1 = t2.spanFrom$1(beforeBracket == null ? start : beforeBracket);
        return new D.ListExpression(
          P.List_List$unmodifiable(commaExpressions, type$.Expression),
          C.ListSeparator_kWM,
          bracketList,
          t1
        );
      } else if (bracketList && spaceExpressions != null) {
        resolveOperations.call$0();
        t1 = _box_0.singleExpression_;
        t1.toString;
        spaceExpressions.push(t1);
        beforeBracket.toString;
        t2 = t2.spanFrom$1(beforeBracket);
        return new D.ListExpression(
          P.List_List$unmodifiable(spaceExpressions, type$.Expression),
          C.ListSeparator_woc,
          true,
          t2
        );
      } else {
        resolveSpaceExpressions.call$0();
        if (bracketList) {
          t1 = _box_0.singleExpression_;
          t1.toString;
          t3 = H._setArrayType([t1], t3);
          beforeBracket.toString;
          t2 = t2.spanFrom$1(beforeBracket);
          _box_0.singleExpression_ = new D.ListExpression(
            P.List_List$unmodifiable(t3, type$.Expression),
            C.ListSeparator_undecided_null,
            true,
            t2
          );
        }
        t1 = _box_0.singleExpression_;
        t1.toString;
        return t1;
      }
    },
    expression$0() {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        false,
        null
      );
    },
    expression$2$singleEquals$until(singleEquals, until) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        singleEquals,
        until
      );
    },
    expression$1$bracketList(bracketList) {
      return this.expression$3$bracketList$singleEquals$until(
        bracketList,
        false,
        null
      );
    },
    expression$1$singleEquals(singleEquals) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        singleEquals,
        null
      );
    },
    expression$1$until(until) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        false,
        until
      );
    },
    _expressionUntilComma$1$singleEquals(singleEquals) {
      return this.expression$2$singleEquals$until(
        singleEquals,
        new V.StylesheetParser__expressionUntilComma_closure(this)
      );
    },
    _expressionUntilComma$0() {
      return this._expressionUntilComma$1$singleEquals(false);
    },
    _singleExpression$0() {
      var next,
        _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      switch (first) {
        case 40:
          return _this._parentheses$0();
        case 47:
          return _this._unaryOperation$0();
        case 46:
          return _this._number$0();
        case 91:
          return _this.expression$1$bracketList(true);
        case 36:
          return _this._variable$0();
        case 38:
          return _this._selector$0();
        case 39:
        case 34:
          return _this.interpolatedString$0();
        case 35:
          return _this._hashExpression$0();
        case 43:
          next = t1.peekChar$1(1);
          return T.isDigit(next) || next === 46
            ? _this._number$0()
            : _this._unaryOperation$0();
        case 45:
          return _this._minusExpression$0();
        case 33:
          return _this._importantExpression$0();
        case 117:
        case 85:
          if (t1.peekChar$1(1) === 43) return _this._unicodeRange$0();
          else return _this.identifierLike$0();
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return _this._number$0();
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 92:
          return _this.identifierLike$0();
        default:
          if (first != null && first >= 128) return _this.identifierLike$0();
          t1.error$1(0, 'Expected expression.');
      }
    },
    _parentheses$0() {
      var wasInParentheses,
        start,
        first,
        expressions,
        t1,
        t2,
        _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(
          0,
          "Parentheses aren't allowed in plain CSS.",
          1
        );
      wasInParentheses = _this._inParentheses;
      _this._inParentheses = true;
      try {
        t1 = _this.scanner;
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
        t1.expectChar$1(40);
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0()) {
          t1.expectChar$1(41);
          t2 = H._setArrayType([], type$.JSArray_Expression);
          t1 = t1.spanFrom$1(start);
          t2 = P.List_List$unmodifiable(t2, type$.Expression);
          return new D.ListExpression(
            t2,
            C.ListSeparator_undecided_null,
            false,
            t1
          );
        }
        first = _this._expressionUntilComma$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          t1 = _this._stylesheet$_map$2(first, start);
          return t1;
        }
        if (!t1.scanChar$1(44)) {
          t1.expectChar$1(41);
          t1 = t1.spanFrom$1(start);
          return new T.ParenthesizedExpression(first, t1);
        }
        _this.whitespace$0();
        expressions = H._setArrayType([first], type$.JSArray_Expression);
        for (; true; ) {
          if (!_this._lookingAtExpression$0()) break;
          J.add$1$ax(expressions, _this._expressionUntilComma$0());
          if (!t1.scanChar$1(44)) break;
          _this.whitespace$0();
        }
        t1.expectChar$1(41);
        t1 = t1.spanFrom$1(start);
        t2 = P.List_List$unmodifiable(expressions, type$.Expression);
        return new D.ListExpression(t2, C.ListSeparator_kWM, false, t1);
      } finally {
        _this._inParentheses = wasInParentheses;
      }
    },
    _stylesheet$_map$2(first, start) {
      var t2,
        key,
        _this = this,
        t1 = type$.Tuple2_Expression_Expression,
        pairs = H._setArrayType(
          [new S.Tuple2(first, _this._expressionUntilComma$0(), t1)],
          type$.JSArray_Tuple2_Expression_Expression
        );
      for (t2 = _this.scanner; t2.scanChar$1(44); ) {
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0()) break;
        key = _this._expressionUntilComma$0();
        t2.expectChar$1(58);
        _this.whitespace$0();
        pairs.push(new S.Tuple2(key, _this._expressionUntilComma$0(), t1));
      }
      t2.expectChar$1(41);
      t2 = t2.spanFrom$1(start);
      return new A.MapExpression(P.List_List$unmodifiable(pairs, t1), t2);
    },
    _hashExpression$0() {
      var start,
        first,
        t2,
        identifier,
        buffer,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$1(1) === 123) return _this.identifierLike$0();
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(35);
      first = t1.peekChar$0();
      if (first != null && T.isDigit(first)) {
        t1 = _this._hexColorContents$1(start);
        t2 = t1.originalSpan;
        t2.toString;
        return new K.ColorExpression(t1, t2);
      }
      t2 = t1._string_scanner$_position;
      identifier = _this.interpolatedIdentifier$0();
      if (_this._isHexColor$1(identifier)) {
        t1.set$state(new S._SpanScannerState(t1, t2));
        t1 = _this._hexColorContents$1(start);
        t2 = t1.originalSpan;
        t2.toString;
        return new K.ColorExpression(t1, t2);
      }
      t2 = new P.StringBuffer('');
      buffer = new Z.InterpolationBuffer(
        t2,
        H._setArrayType([], type$.JSArray_Object)
      );
      t2._contents = '' + H.Primitives_stringFromCharCode(35);
      buffer.addInterpolation$1(identifier);
      return new D.StringExpression(
        buffer.interpolation$1(t1.spanFrom$1(start)),
        false
      );
    },
    _hexColorContents$1(start) {
      var red,
        green,
        blue,
        alpha,
        digit4,
        t2,
        t3,
        _this = this,
        digit1 = _this._hexDigit$0(),
        digit2 = _this._hexDigit$0(),
        digit3 = _this._hexDigit$0(),
        t1 = _this.scanner;
      if (!T.isHex(t1.peekChar$0())) {
        red = ((digit1 << 4) >>> 0) + digit1;
        green = ((digit2 << 4) >>> 0) + digit2;
        blue = ((digit3 << 4) >>> 0) + digit3;
        alpha = 1;
      } else {
        digit4 = _this._hexDigit$0();
        t2 = (digit1 << 4) >>> 0;
        t3 = (digit3 << 4) >>> 0;
        if (!T.isHex(t1.peekChar$0())) {
          red = t2 + digit1;
          green = ((digit2 << 4) >>> 0) + digit2;
          blue = t3 + digit3;
          alpha = (((digit4 << 4) >>> 0) + digit4) / 255;
        } else {
          red = t2 + digit2;
          green = t3 + digit4;
          blue = ((_this._hexDigit$0() << 4) >>> 0) + _this._hexDigit$0();
          alpha = T.isHex(t1.peekChar$0())
            ? (((_this._hexDigit$0() << 4) >>> 0) + _this._hexDigit$0()) / 255
            : 1;
        }
      }
      return K.SassColor$rgb(red, green, blue, alpha, t1.spanFrom$1(start));
    },
    _isHexColor$1(interpolation) {
      var t1,
        plain = interpolation.get$asPlain();
      if (plain == null) return false;
      t1 = plain.length;
      if (t1 !== 3 && t1 !== 4 && t1 !== 6 && t1 !== 8) return false;
      t1 = new H.CodeUnits(plain);
      return t1.every$1(t1, T.character__isHex$closure());
    },
    _hexDigit$0() {
      var t1 = this.scanner,
        char = t1.peekChar$0();
      if (char == null || !T.isHex(char)) t1.error$1(0, 'Expected hex digit.');
      return T.asHex(t1.readChar$0());
    },
    _minusExpression$0() {
      var _this = this,
        next = _this.scanner.peekChar$1(1);
      if (T.isDigit(next) || next === 46) return _this._number$0();
      if (_this._lookingAtInterpolatedIdentifier$0())
        return _this.identifierLike$0();
      return _this._unaryOperation$0();
    },
    _importantExpression$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.readChar$0();
      this.whitespace$0();
      this.expectIdentifier$1('important');
      t2 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new D.StringExpression(
        X.Interpolation$(
          H._setArrayType(['!important'], type$.JSArray_Object),
          t2
        ),
        false
      );
    },
    _unaryOperation$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        operator = _this._unaryOperatorFor$1(t1.readChar$0());
      if (operator == null)
        t1.error$2$position(
          0,
          'Expected unary operator.',
          t1._string_scanner$_position - 1
        );
      else if (_this.get$plainCss() && operator !== C.UnaryOperator_zDx)
        t1.error$3$length$position(
          0,
          "Operators aren't allowed in plain CSS.",
          1,
          t1._string_scanner$_position - 1
        );
      _this.whitespace$0();
      return new X.UnaryOperationExpression(
        operator,
        _this._singleExpression$0(),
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _unaryOperatorFor$1(character) {
      switch (character) {
        case 43:
          return C.UnaryOperator_j2w;
        case 45:
          return C.UnaryOperator_U4G;
        case 47:
          return C.UnaryOperator_zDx;
        default:
          return null;
      }
    },
    _number$0() {
      var number,
        t4,
        unit,
        t5,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        first = t1.peekChar$0(),
        t3 = first === 45,
        sign = t3 ? -1 : 1;
      if (first === 43 || t3) t1.readChar$0();
      number = t1.peekChar$0() === 46 ? 0 : _this.naturalNumber$0();
      t3 = _this._tryDecimal$1$allowTrailingDot(
        t1._string_scanner$_position !== t2
      );
      t4 = _this._tryExponent$0();
      if (t1.scanChar$1(37)) unit = '%';
      else {
        if (_this.lookingAtIdentifier$0())
          t5 = t1.peekChar$0() !== 45 || t1.peekChar$1(1) !== 45;
        else t5 = false;
        unit = t5 ? _this.identifier$1$unit(true) : null;
      }
      return new T.NumberExpression(
        sign * ((number + t3) * t4),
        unit,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _tryDecimal$1$allowTrailingDot(allowTrailingDot) {
      var t2,
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      if (t1.peekChar$0() !== 46) return 0;
      if (!T.isDigit(t1.peekChar$1(1))) {
        if (allowTrailingDot) return 0;
        t1.error$2$position(
          0,
          'Expected digit.',
          t1._string_scanner$_position + 1
        );
      }
      t1.readChar$0();
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        t1.readChar$0();
      }
      return P.double_parse(t1.substring$1(0, start));
    },
    _tryExponent$0() {
      var next,
        t2,
        exponentSign,
        exponent,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first !== 101 && first !== 69) return 1;
      next = t1.peekChar$1(1);
      if (!T.isDigit(next) && next !== 45 && next !== 43) return 1;
      t1.readChar$0();
      t2 = next === 45;
      exponentSign = t2 ? -1 : 1;
      if (next === 43 || t2) t1.readChar$0();
      if (!T.isDigit(t1.peekChar$0())) t1.error$1(0, 'Expected digit.');
      exponent = 0;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        exponent = exponent * 10 + (t1.readChar$0() - 48);
      }
      return Math.pow(10, exponentSign * exponent);
    },
    _unicodeRange$0() {
      var firstRangeLength,
        hasQuestionMark,
        t2,
        secondRangeLength,
        _this = this,
        _s26_ = 'Expected at most 6 digits.',
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentChar$1(117);
      t1.expectChar$1(43);
      for (
        firstRangeLength = 0;
        _this.scanCharIf$1(new V.StylesheetParser__unicodeRange_closure());

      )
        ++firstRangeLength;
      for (hasQuestionMark = false; t1.scanChar$1(63); hasQuestionMark = true)
        ++firstRangeLength;
      if (firstRangeLength === 0) t1.error$1(0, 'Expected hex digit or "?".');
      else if (firstRangeLength > 6)
        _this.error$2(0, _s26_, t1.spanFrom$1(start));
      else if (hasQuestionMark) {
        t2 = t1.substring$1(0, start.position);
        t1 = t1.spanFrom$1(start);
        return new D.StringExpression(
          X.Interpolation$(H._setArrayType([t2], type$.JSArray_Object), t1),
          false
        );
      }
      if (t1.scanChar$1(45)) {
        t2 = t1._string_scanner$_position;
        for (
          secondRangeLength = 0;
          _this.scanCharIf$1(new V.StylesheetParser__unicodeRange_closure0());

        )
          ++secondRangeLength;
        if (secondRangeLength === 0) t1.error$1(0, 'Expected hex digit.');
        else if (secondRangeLength > 6)
          _this.error$2(
            0,
            _s26_,
            t1.spanFrom$1(new S._SpanScannerState(t1, t2))
          );
      }
      if (_this._lookingAtInterpolatedIdentifierBody$0())
        t1.error$1(0, 'Expected end of identifier.');
      t2 = t1.substring$1(0, start.position);
      t1 = t1.spanFrom$1(start);
      return new D.StringExpression(
        X.Interpolation$(H._setArrayType([t2], type$.JSArray_Object), t1),
        false
      );
    },
    _variable$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        $name = _this.variableName$0();
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, t1.spanFrom$1(start));
      return new S.VariableExpression(null, $name, t1.spanFrom$1(start));
    },
    _selector$0() {
      var t1,
        start,
        _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, string$.The_pa, 1);
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(38);
      if (t1.scanChar$1(38)) {
        _this.logger.warn$2$span(0, string$.In_Sas, t1.spanFrom$1(start));
        t1.set$position(t1._string_scanner$_position - 1);
      }
      return new T.SelectorExpression(t1.spanFrom$1(start));
    },
    interpolatedString$0() {
      var t3,
        t4,
        buffer,
        next,
        second,
        t5,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, 'Expected string.', t2);
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      for (; true; ) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(
            0,
            'Expected ' + H.Primitives_stringFromCharCode(quote) + '.'
          );
        else if (next === 92) {
          second = t1.peekChar$1(1);
          if (second === 10 || second === 13 || second === 12) {
            t1.readChar$0();
            t1.readChar$0();
            if (second === 13) t1.scanChar$1(10);
          } else
            t3._contents += H.Primitives_stringFromCharCode(
              B.consumeEscapedCharacter(t1)
            );
        } else if (next === 35)
          if (t1.peekChar$1(1) === 123) {
            t5 = this.singleInterpolation$0();
            buffer._flushText$0();
            t4.push(t5);
          } else
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
        else t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return new D.StringExpression(
        buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2))),
        true
      );
    },
    identifierLike$0() {
      var invocation,
        lower,
        color,
        specialFunction,
        $name,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        t2 = plain == null;
      if (!t2) {
        if (plain === 'if' && t1.peekChar$0() === 40) {
          invocation = _this._argumentInvocation$0();
          return new L.IfExpression(
            invocation,
            identifier.span.expand$1(0, invocation.span)
          );
        } else if (plain === 'not') {
          _this.whitespace$0();
          return new X.UnaryOperationExpression(
            C.UnaryOperator_not_not,
            _this._singleExpression$0(),
            identifier.span
          );
        }
        lower = plain.toLowerCase();
        if (t1.peekChar$0() !== 40) {
          switch (plain) {
            case 'false':
              return new Z.BooleanExpression(false, identifier.span);
            case 'null':
              return new O.NullExpression(identifier.span);
            case 'true':
              return new Z.BooleanExpression(true, identifier.span);
          }
          color = $.$get$colorsByName().$index(0, lower);
          if (color != null) {
            color = K.SassColor$rgb(
              color.get$red(),
              color.get$green(),
              color.get$blue(),
              color.alpha,
              identifier.span
            );
            t1 = color.originalSpan;
            t1.toString;
            return new K.ColorExpression(color, t1);
          }
        }
        specialFunction = _this.trySpecialFunction$2(lower, start);
        if (specialFunction != null) return specialFunction;
      }
      switch (t1.peekChar$0()) {
        case 46:
          if (t1.peekChar$1(1) === 46)
            return new D.StringExpression(identifier, false);
          t1.readChar$0();
          if (t2) _this.error$2(0, string$.Interpn, identifier.span);
          if (t1.peekChar$0() === 36) {
            $name = _this.variableName$0();
            _this._assertPublic$2(
              $name,
              new V.StylesheetParser_identifierLike_closure(_this, start)
            );
            return new S.VariableExpression(plain, $name, t1.spanFrom$1(start));
          }
          return new F.FunctionExpression(
            plain,
            _this._publicIdentifier$0(),
            _this._argumentInvocation$0(),
            t1.spanFrom$1(start)
          );
        case 40:
          if (t2)
            return new N.InterpolatedFunctionExpression(
              identifier,
              _this._argumentInvocation$0(),
              t1.spanFrom$1(start)
            );
          else
            return new F.FunctionExpression(
              null,
              plain,
              _this._argumentInvocation$0(),
              t1.spanFrom$1(start)
            );
        default:
          return new D.StringExpression(identifier, false);
      }
    },
    trySpecialFunction$2($name, start) {
      var t1,
        buffer,
        t2,
        t3,
        t4,
        next,
        _this = this,
        _null = null;
      switch (B.unvendor($name)) {
        case 'calc':
        case 'element':
        case 'expression':
          if (!_this.scanner.scanChar$1(40)) return _null;
          t1 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer(
            t1,
            H._setArrayType([], type$.JSArray_Object)
          );
          t2 = '' + $name;
          t1._contents = t2;
          t1._contents = t2 + H.Primitives_stringFromCharCode(40);
          break;
        case 'min':
        case 'max':
          t1 = _this.scanner;
          t2 = t1._string_scanner$_position;
          if (!t1.scanChar$1(40)) return _null;
          _this.whitespace$0();
          t3 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer(
            t3,
            H._setArrayType([], type$.JSArray_Object)
          );
          t4 = '' + $name;
          t3._contents = t4;
          t3._contents = t4 + H.Primitives_stringFromCharCode(40);
          if (!_this._tryMinMaxContents$1(buffer)) {
            t1.set$state(new S._SpanScannerState(t1, t2));
            return _null;
          }
          return new D.StringExpression(
            buffer.interpolation$1(t1.spanFrom$1(start)),
            false
          );
        case 'progid':
          t1 = _this.scanner;
          if (!t1.scanChar$1(58)) return _null;
          t2 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer(
            t2,
            H._setArrayType([], type$.JSArray_Object)
          );
          t3 = '' + $name;
          t2._contents = t3;
          t2._contents = t3 + H.Primitives_stringFromCharCode(58);
          next = t1.peekChar$0();
          while (true) {
            if (next != null) {
              if (!(next >= 97 && next <= 122)) t3 = next >= 65 && next <= 90;
              else t3 = true;
              t3 = t3 || next === 46;
            } else t3 = false;
            if (!t3) break;
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            next = t1.peekChar$0();
          }
          t1.expectChar$1(40);
          t2._contents += H.Primitives_stringFromCharCode(40);
          break;
        case 'url':
          return X.NullableExtension_andThen(
            _this._tryUrlContents$1(start),
            new V.StylesheetParser_trySpecialFunction_closure()
          );
        case 'clamp':
          if ($name !== 'clamp') return _null;
          if (!_this.scanner.scanChar$1(40)) return _null;
          t1 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer(
            t1,
            H._setArrayType([], type$.JSArray_Object)
          );
          t2 = '' + $name;
          t1._contents = t2;
          t1._contents = t2 + H.Primitives_stringFromCharCode(40);
          break;
        default:
          return _null;
      }
      buffer.addInterpolation$1(
        _this._interpolatedDeclarationValue$1$allowEmpty(true)
      );
      t1 = _this.scanner;
      t1.expectChar$1(41);
      buffer._interpolation_buffer$_text._contents += H.Primitives_stringFromCharCode(
        41
      );
      return new D.StringExpression(
        buffer.interpolation$1(t1.spanFrom$1(start)),
        false
      );
    },
    _tryMinMaxContents$2$allowComma(buffer, allowComma) {
      var t1,
        t2,
        t3,
        t4,
        start,
        end,
        exception,
        t5,
        _this = this;
      for (
        t1 = _this.scanner,
          t2 = buffer._interpolation_buffer$_text,
          t3 = !allowComma,
          t4 = _this.get$_number();
        true;

      ) {
        switch (t1.peekChar$0()) {
          case 45:
          case 43:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 46:
            try {
              start = t1._string_scanner$_position;
              t4.call$0();
              end = t1._string_scanner$_position;
              t2._contents += C.JSString_methods.substring$2(
                t1.string,
                start,
                end
              );
            } catch (exception) {
              if (type$.FormatException._is(H.unwrapException(exception)))
                return false;
              else throw exception;
            }
            break;
          case 35:
            if (t1.peekChar$1(1) !== 123) return false;
            t5 = _this.singleInterpolation$0();
            buffer._flushText$0();
            buffer._interpolation_buffer$_contents.push(t5);
            break;
          case 99:
          case 67:
            switch (t1.peekChar$1(1)) {
              case 97:
              case 65:
                if (!_this._tryMinMaxFunction$2(buffer, 'calc')) return false;
                break;
              case 108:
              case 76:
                if (!_this._tryMinMaxFunction$2(buffer, 'clamp')) return false;
                break;
            }
            break;
          case 101:
          case 69:
            if (!_this._tryMinMaxFunction$2(buffer, 'env')) return false;
            break;
          case 118:
          case 86:
            if (!_this._tryMinMaxFunction$2(buffer, 'var')) return false;
            break;
          case 40:
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            if (!_this._tryMinMaxContents$2$allowComma(buffer, false))
              return false;
            break;
          case 109:
          case 77:
            t1.readChar$0();
            if (_this.scanIdentChar$1(105)) {
              if (!_this.scanIdentChar$1(110)) return false;
              t2._contents += 'min(';
            } else if (_this.scanIdentChar$1(97)) {
              if (!_this.scanIdentChar$1(120)) return false;
              t2._contents += 'max(';
            } else return false;
            if (!t1.scanChar$1(40)) return false;
            if (!_this._tryMinMaxContents$1(buffer)) return false;
            break;
          default:
            return false;
        }
        _this.whitespace$0();
        switch (t1.peekChar$0()) {
          case 41:
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            return true;
          case 43:
          case 45:
          case 42:
          case 47:
            t2._contents += H.Primitives_stringFromCharCode(32);
            t5 = t2._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            t2._contents = t5 + H.Primitives_stringFromCharCode(32);
            break;
          case 44:
            if (t3) return false;
            t5 = t2._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            t2._contents = t5 + H.Primitives_stringFromCharCode(32);
            break;
          default:
            return false;
        }
        _this.whitespace$0();
      }
    },
    _tryMinMaxContents$1(buffer) {
      return this._tryMinMaxContents$2$allowComma(buffer, true);
    },
    _tryMinMaxFunction$2(buffer, $name) {
      var t1, t2, t3;
      if (!this.scanIdentifier$1($name)) return false;
      t1 = this.scanner;
      if (!t1.scanChar$1(40)) return false;
      t2 = buffer._interpolation_buffer$_text;
      t3 = t2._contents += $name;
      t2._contents = t3 + H.Primitives_stringFromCharCode(40);
      buffer.addInterpolation$1(
        this._interpolatedDeclarationValue$1$allowEmpty(true)
      );
      t2._contents += H.Primitives_stringFromCharCode(41);
      if (!t1.scanChar$1(41)) return false;
      return true;
    },
    _tryUrlContents$2$name(start, $name) {
      var t3,
        t4,
        buffer,
        t5,
        next,
        endPosition,
        result,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40)) return null;
      _this.whitespaceWithoutComments$0();
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t5 = '' + ($name == null ? 'url' : $name);
      t3._contents = t5;
      t3._contents = t5 + H.Primitives_stringFromCharCode(40);
      for (; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (next === 92) t3._contents += H.S(_this.escape$0());
        else {
          if (next !== 33)
            if (next !== 37)
              if (next !== 38) t5 = (next >= 42 && next <= 126) || next >= 128;
              else t5 = true;
            else t5 = true;
          else t5 = true;
          if (t5)
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 35)
            if (t1.peekChar$1(1) === 123) {
              t5 = _this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (
            next === 32 ||
            next === 9 ||
            next === 10 ||
            next === 13 ||
            next === 12
          ) {
            _this.whitespaceWithoutComments$0();
            if (t1.peekChar$0() !== 41) break;
          } else if (next === 41) {
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t2 = t1._sourceFile;
            t5 = start.position;
            t1 = new Y._FileSpan(t2, t5, endPosition);
            t1._FileSpan$3(t2, t5, endPosition);
            t5 = type$.Object;
            t2 = P.List_List$of(t4, true, t5);
            t4 = t3._contents;
            if (t4.length !== 0) t2.push(t4.charCodeAt(0) == 0 ? t4 : t4);
            result = P.List_List$from(t2, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t3 = new X.Interpolation(result, t1);
            t3.Interpolation$2(t2, t1);
            return t3;
          } else break;
        }
      }
      t1.set$state(new S._SpanScannerState(t1, t2));
      return null;
    },
    _tryUrlContents$1(start) {
      return this._tryUrlContents$2$name(start, null);
    },
    dynamicUrl$0() {
      var contents,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentifier$1('url');
      contents = _this._tryUrlContents$1(start);
      if (contents != null) return new D.StringExpression(contents, false);
      return new N.InterpolatedFunctionExpression(
        X.Interpolation$(
          H._setArrayType(['url'], type$.JSArray_Object),
          t1.spanFrom$1(start)
        ),
        _this._argumentInvocation$0(),
        t1.spanFrom$1(start)
      );
    },
    almostAnyValue$1$omitComments(omitComments) {
      var t4,
        t5,
        t6,
        next,
        commentStart,
        end,
        t7,
        contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      $label0$1: for (
        t4 = t1.string, t5 = t4.length, t6 = !omitComments;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 34:
          case 39:
            buffer.addInterpolation$1(
              _this.interpolatedString$0().asInterpolation$0()
            );
            break;
          case 47:
            commentStart = t1._string_scanner$_position;
            if (_this.scanComment$0()) {
              if (t6) {
                end = t1._string_scanner$_position;
                t3._contents += C.JSString_methods.substring$2(
                  t4,
                  commentStart,
                  end
                );
              }
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 35:
            if (t1.peekChar$1(1) === 123)
              buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 13:
          case 10:
          case 12:
            if (_this.get$indented()) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 33:
          case 59:
          case 123:
          case 125:
            break $label0$1;
          case 117:
          case 85:
            t7 = t1._string_scanner$_position;
            if (!_this.scanIdentifier$1('url')) {
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            }
            contents = _this._tryUrlContents$1(new S._SpanScannerState(t1, t7));
            if (contents == null) {
              if (t7 < 0 || t7 > t5)
                H.throwExpression(
                  P.ArgumentError$('Invalid position ' + t7, null)
                );
              t1._string_scanner$_position = t7;
              t1._lastMatch = null;
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            } else buffer.addInterpolation$1(contents);
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              t3._contents += _this.identifier$0();
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
      }
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    almostAnyValue$0() {
      return this.almostAnyValue$1$omitComments(false);
    },
    _interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
      allowColon,
      allowEmpty,
      allowSemicolon
    ) {
      var t4,
        t5,
        t6,
        t7,
        wroteNewline,
        next,
        t8,
        start,
        end,
        contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        ),
        brackets = H._setArrayType([], type$.JSArray_int);
      $label0$1: for (
        t4 = t1.string,
          t5 = t4.length,
          t6 = !allowColon,
          t7 = !allowSemicolon,
          wroteNewline = false;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            t3._contents += H.S(_this.escape$1$identifierStart(true));
            wroteNewline = false;
            break;
          case 34:
          case 39:
            buffer.addInterpolation$1(
              _this.interpolatedString$0().asInterpolation$0()
            );
            wroteNewline = false;
            break;
          case 47:
            if (t1.peekChar$1(1) === 42) {
              t8 = _this.get$loudComment();
              start = t1._string_scanner$_position;
              t8.call$0();
              end = t1._string_scanner$_position;
              t3._contents += C.JSString_methods.substring$2(t4, start, end);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 35:
            if (t1.peekChar$1(1) === 123)
              buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 32:
          case 9:
            if (!wroteNewline) {
              t8 = t1.peekChar$1(1);
              t8 = !(
                t8 === 32 ||
                t8 === 9 ||
                t8 === 10 ||
                t8 === 13 ||
                t8 === 12
              );
            } else t8 = true;
            if (t8)
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            else t1.readChar$0();
            break;
          case 10:
          case 13:
          case 12:
            if (_this.get$indented()) break $label0$1;
            t8 = t1.peekChar$1(-1);
            if (!(t8 === 10 || t8 === 13 || t8 === 12)) t3._contents += '\n';
            t1.readChar$0();
            wroteNewline = true;
            break;
          case 40:
          case 123:
          case 91:
            next.toString;
            t3._contents += H.Primitives_stringFromCharCode(next);
            brackets.push(T.opposite(t1.readChar$0()));
            wroteNewline = false;
            break;
          case 41:
          case 125:
          case 93:
            if (brackets.length === 0) break $label0$1;
            next.toString;
            t3._contents += H.Primitives_stringFromCharCode(next);
            t1.expectChar$1(brackets.pop());
            wroteNewline = false;
            break;
          case 59:
            if (t7 && brackets.length === 0) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 58:
            if (t6 && brackets.length === 0) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 117:
          case 85:
            t8 = t1._string_scanner$_position;
            if (!_this.scanIdentifier$1('url')) {
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            }
            contents = _this._tryUrlContents$1(new S._SpanScannerState(t1, t8));
            if (contents == null) {
              if (t8 < 0 || t8 > t5)
                H.throwExpression(
                  P.ArgumentError$('Invalid position ' + t8, null)
                );
              t1._string_scanner$_position = t8;
              t1._lastMatch = null;
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            } else buffer.addInterpolation$1(contents);
            wroteNewline = false;
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              t3._contents += _this.identifier$0();
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
        }
      }
      if (brackets.length !== 0)
        t1.expectChar$1(C.JSArray_methods.get$last(brackets));
      if (
        !allowEmpty &&
        buffer._interpolation_buffer$_contents.length === 0 &&
        t3._contents.length === 0
      )
        t1.error$1(0, 'Expected token.');
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _interpolatedDeclarationValue$1$allowEmpty(allowEmpty) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        allowEmpty,
        false
      );
    },
    _interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(
      allowEmpty,
      allowSemicolon
    ) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        allowEmpty,
        allowSemicolon
      );
    },
    _interpolatedDeclarationValue$0() {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        false,
        false
      );
    },
    interpolatedIdentifier$0() {
      var first,
        _this = this,
        _s20_ = 'Expected identifier.',
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        t2 = new P.StringBuffer(''),
        t3 = H._setArrayType([], type$.JSArray_Object),
        buffer = new Z.InterpolationBuffer(t2, t3);
      if (t1.scanChar$1(45)) {
        t2._contents += H.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          t2._contents += H.Primitives_stringFromCharCode(45);
          _this._interpolatedIdentifierBody$1(buffer);
          return buffer.interpolation$1(t1.spanFrom$1(start));
        }
      }
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s20_);
      else if (first === 95 || T.isAlphabetic0(first) || first >= 128)
        t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        t2._contents += H.S(_this.escape$1$identifierStart(true));
      else if (first === 35 && t1.peekChar$1(1) === 123) {
        t2 = _this.singleInterpolation$0();
        buffer._flushText$0();
        t3.push(t2);
      } else t1.error$1(0, _s20_);
      _this._interpolatedIdentifierBody$1(buffer);
      return buffer.interpolation$1(t1.spanFrom$1(start));
    },
    _interpolatedIdentifierBody$1(buffer) {
      var t1, t2, t3, next, t4;
      for (
        t1 = buffer._interpolation_buffer$_contents,
          t2 = this.scanner,
          t3 = buffer._interpolation_buffer$_text;
        true;

      ) {
        next = t2.peekChar$0();
        if (next == null) break;
        else {
          if (next !== 95)
            if (next !== 45) {
              if (!(next >= 97 && next <= 122)) t4 = next >= 65 && next <= 90;
              else t4 = true;
              if (!t4) t4 = next >= 48 && next <= 57;
              else t4 = true;
              t4 = t4 || next >= 128;
            } else t4 = true;
          else t4 = true;
          if (t4)
            t3._contents += H.Primitives_stringFromCharCode(t2.readChar$0());
          else if (next === 92) t3._contents += H.S(this.escape$0());
          else if (next === 35 && t2.peekChar$1(1) === 123) {
            t4 = this.singleInterpolation$0();
            buffer._flushText$0();
            t1.push(t4);
          } else break;
        }
      }
    },
    singleInterpolation$0() {
      var contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('#{');
      _this.whitespace$0();
      contents = _this.expression$0();
      t1.expectChar$1(125);
      if (_this.get$plainCss())
        _this.error$2(
          0,
          string$.Interpp,
          t1.spanFrom$1(new S._SpanScannerState(t1, t2))
        );
      return contents;
    },
    _mediaQueryList$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      for (; true; ) {
        this.whitespace$0();
        this._stylesheet$_mediaQuery$1(buffer);
        if (!t1.scanChar$1(44)) break;
        t4 = t3._contents += H.Primitives_stringFromCharCode(44);
        t3._contents = t4 + H.Primitives_stringFromCharCode(32);
      }
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet$_mediaQuery$1(buffer) {
      var t1,
        identifier,
        _this = this;
      if (_this.scanner.peekChar$0() !== 40) {
        buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        _this.whitespace$0();
        if (!_this._lookingAtInterpolatedIdentifier$0()) return;
        t1 = buffer._interpolation_buffer$_text;
        t1._contents += H.Primitives_stringFromCharCode(32);
        identifier = _this.interpolatedIdentifier$0();
        _this.whitespace$0();
        if (B.equalsIgnoreCase(identifier.get$asPlain(), 'and'))
          t1._contents += ' and ';
        else {
          buffer.addInterpolation$1(identifier);
          if (_this.scanIdentifier$1('and')) {
            _this.whitespace$0();
            t1._contents += ' and ';
          } else return;
        }
      }
      for (t1 = buffer._interpolation_buffer$_text; true; ) {
        _this.whitespace$0();
        buffer.addInterpolation$1(_this._mediaFeature$0());
        _this.whitespace$0();
        if (!_this.scanIdentifier$1('and')) break;
        t1._contents += ' and ';
      }
    },
    _mediaFeature$0() {
      var interpolation,
        t2,
        t3,
        t4,
        buffer,
        t5,
        next,
        t6,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return X.Interpolation$(
          H._setArrayType([interpolation], type$.JSArray_Object),
          interpolation.get$span()
        );
      }
      t2 = t1._string_scanner$_position;
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer(t3, t4);
      t1.expectChar$1(40);
      t3._contents += H.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this._expressionUntilComparison$0();
      buffer._flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += H.Primitives_stringFromCharCode(58);
        t3._contents = t5 + H.Primitives_stringFromCharCode(32);
        t5 = _this.expression$0();
        buffer._flushText$0();
        t4.push(t5);
      } else {
        next = t1.peekChar$0();
        t5 = next !== 60;
        if (!t5 || next === 62 || next === 61) {
          t3._contents += H.Primitives_stringFromCharCode(32);
          t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          if ((!t5 || next === 62) && t1.scanChar$1(61))
            t3._contents += H.Primitives_stringFromCharCode(61);
          t3._contents += H.Primitives_stringFromCharCode(32);
          _this.whitespace$0();
          t6 = _this._expressionUntilComparison$0();
          buffer._flushText$0();
          t4.push(t6);
          if (!t5 || next === 62) {
            next.toString;
            t5 = t1.scanChar$1(next);
          } else t5 = false;
          if (t5) {
            t5 = t3._contents += H.Primitives_stringFromCharCode(32);
            t3._contents = t5 + H.Primitives_stringFromCharCode(next);
            if (t1.scanChar$1(61))
              t3._contents += H.Primitives_stringFromCharCode(61);
            t3._contents += H.Primitives_stringFromCharCode(32);
            _this.whitespace$0();
            t5 = _this._expressionUntilComparison$0();
            buffer._flushText$0();
            t4.push(t5);
          }
        }
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += H.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _expressionUntilComparison$0() {
      return this.expression$1$until(
        new V.StylesheetParser__expressionUntilComparison_closure(this)
      );
    },
    _supportsCondition$0() {
      var condition,
        operator,
        right,
        endPosition,
        t3,
        t4,
        lowerOperator,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      if (_this.scanIdentifier$1('not')) {
        _this.whitespace$0();
        return new M.SupportsNegation(
          _this._supportsConditionInParens$0(),
          t1.spanFrom$1(new S._SpanScannerState(t1, t2))
        );
      }
      condition = _this._supportsConditionInParens$0();
      _this.whitespace$0();
      for (operator = null; _this.lookingAtIdentifier$0(); ) {
        if (operator != null) _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1('or')) operator = 'or';
        else {
          _this.expectIdentifier$1('and');
          operator = 'and';
        }
        _this.whitespace$0();
        right = _this._supportsConditionInParens$0();
        endPosition = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        t4 = new Y._FileSpan(t3, t2, endPosition);
        t4._FileSpan$3(t3, t2, endPosition);
        condition = new U.SupportsOperation(condition, right, operator, t4);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== 'and' && lowerOperator !== 'or')
          H.throwExpression(
            P.ArgumentError$value(
              operator,
              'operator',
              'may only be "and" or "or".'
            )
          );
        _this.whitespace$0();
      }
      return condition;
    },
    _supportsConditionInParens$0() {
      var $name,
        nameStart,
        wasInParentheses,
        identifier,
        operation,
        contents,
        identifier0,
        t2,
        $arguments,
        condition,
        exception,
        value,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (_this._lookingAtInterpolatedIdentifier$0()) {
        identifier0 = _this.interpolatedIdentifier$0();
        t2 = identifier0.get$asPlain();
        if ((t2 == null ? null : t2.toLowerCase()) === 'not')
          _this.error$2(
            0,
            '"not" is not a valid identifier here.',
            identifier0.span
          );
        if (t1.scanChar$1(40)) {
          $arguments = _this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(
            true,
            true
          );
          t1.expectChar$1(41);
          return new F.SupportsFunction(
            identifier0,
            $arguments,
            t1.spanFrom$1(start)
          );
        } else {
          t2 = identifier0.contents;
          if (
            t2.length !== 1 ||
            !type$.Expression._is(C.JSArray_methods.get$first(t2))
          )
            _this.error$2(0, 'Expected @supports condition.', identifier0.span);
          else
            return new X.SupportsInterpolation(
              type$.Expression._as(C.JSArray_methods.get$first(t2)),
              t1.spanFrom$1(start)
            );
        }
      }
      t1.expectChar$1(40);
      _this.whitespace$0();
      if (_this.scanIdentifier$1('not')) {
        _this.whitespace$0();
        condition = _this._supportsConditionInParens$0();
        t1.expectChar$1(41);
        return new M.SupportsNegation(condition, t1.spanFrom$1(start));
      } else if (t1.peekChar$0() === 40) {
        condition = _this._supportsCondition$0();
        t1.expectChar$1(41);
        return condition;
      }
      $name = null;
      nameStart = new S._SpanScannerState(t1, t1._string_scanner$_position);
      wasInParentheses = _this._inParentheses;
      try {
        $name = _this.expression$0();
        t1.expectChar$1(58);
      } catch (exception) {
        if (type$.FormatException._is(H.unwrapException(exception))) {
          t1.set$state(nameStart);
          _this._inParentheses = wasInParentheses;
          identifier = _this.interpolatedIdentifier$0();
          operation = _this._trySupportsOperation$2(identifier, nameStart);
          if (operation != null) {
            t1.expectChar$1(41);
            return operation;
          }
          t2 = new Z.InterpolationBuffer(
            new P.StringBuffer(''),
            H._setArrayType([], type$.JSArray_Object)
          );
          t2.addInterpolation$1(identifier);
          t2.addInterpolation$1(
            _this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
              false,
              true,
              true
            )
          );
          contents = t2.interpolation$1(t1.spanFrom$1(nameStart));
          if (t1.peekChar$0() === 58) throw exception;
          t1.expectChar$1(41);
          return new Y.SupportsAnything(contents, t1.spanFrom$1(start));
        } else throw exception;
      }
      _this.whitespace$0();
      value = _this.expression$0();
      t1.expectChar$1(41);
      return new L.SupportsDeclaration($name, value, t1.spanFrom$1(start));
    },
    _trySupportsOperation$2(interpolation, start) {
      var expression,
        beforeWhitespace,
        t2,
        t3,
        operator,
        operation,
        right,
        t4,
        endPosition,
        t5,
        t6,
        lowerOperator,
        _this = this,
        _null = null,
        t1 = interpolation.contents;
      if (t1.length !== 1) return _null;
      expression = C.JSArray_methods.get$first(t1);
      if (!type$.Expression._is(expression)) return _null;
      t1 = _this.scanner;
      beforeWhitespace = new S._SpanScannerState(
        t1,
        t1._string_scanner$_position
      );
      _this.whitespace$0();
      for (
        t2 = start.position,
          t3 = interpolation.span,
          operator = _null,
          operation = operator;
        _this.lookingAtIdentifier$0();

      ) {
        if (operator != null) _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1('and')) operator = 'and';
        else {
          if (!_this.scanIdentifier$1('or')) {
            if (beforeWhitespace._scanner !== t1)
              H.throwExpression(P.ArgumentError$(string$.The_gi, _null));
            t2 = beforeWhitespace.position;
            if (t2 < 0 || t2 > t1.string.length)
              H.throwExpression(
                P.ArgumentError$('Invalid position ' + t2, _null)
              );
            t1._string_scanner$_position = t2;
            return (t1._lastMatch = null);
          }
          operator = 'or';
        }
        _this.whitespace$0();
        right = _this._supportsConditionInParens$0();
        t4 =
          operation == null
            ? new X.SupportsInterpolation(expression, t3)
            : operation;
        endPosition = t1._string_scanner$_position;
        t5 = t1._sourceFile;
        t6 = new Y._FileSpan(t5, t2, endPosition);
        t6._FileSpan$3(t5, t2, endPosition);
        operation = new U.SupportsOperation(t4, right, operator, t6);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== 'and' && lowerOperator !== 'or')
          H.throwExpression(
            P.ArgumentError$value(
              operator,
              'operator',
              'may only be "and" or "or".'
            )
          );
        _this.whitespace$0();
      }
      return operation;
    },
    _lookingAtInterpolatedIdentifier$0() {
      var second,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic0(first) ||
        first >= 128 ||
        first === 92
      )
        return true;
      if (first === 35) return t1.peekChar$1(1) === 123;
      if (first !== 45) return false;
      second = t1.peekChar$1(1);
      if (second == null) return false;
      if (second === 35) return t1.peekChar$1(2) === 123;
      return (
        second === 95 ||
        T.isAlphabetic0(second) ||
        second >= 128 ||
        second === 92 ||
        second === 45
      );
    },
    _lookingAtInterpolatedIdentifierBody$0() {
      var t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic0(first) ||
        first >= 128 ||
        T.isDigit(first) ||
        first === 45 ||
        first === 92
      )
        return true;
      return first === 35 && t1.peekChar$1(1) === 123;
    },
    _lookingAtExpression$0() {
      var next,
        t1 = this.scanner,
        character = t1.peekChar$0();
      if (character == null) return false;
      if (character === 46) return t1.peekChar$1(1) !== 46;
      if (character === 33) {
        next = t1.peekChar$1(1);
        if (next != null)
          if ((next | 32) >>> 0 !== 105)
            t1 =
              next === 32 ||
              next === 9 ||
              next === 10 ||
              next === 13 ||
              next === 12;
          else t1 = true;
        else t1 = true;
        return t1;
      }
      if (character !== 40)
        if (character !== 47)
          if (character !== 91)
            if (character !== 39)
              if (character !== 34)
                if (character !== 35)
                  if (character !== 43)
                    if (character !== 45)
                      if (character !== 92)
                        if (character !== 36)
                          if (character !== 38)
                            t1 =
                              character === 95 ||
                              T.isAlphabetic0(character) ||
                              character >= 128 ||
                              T.isDigit(character);
                          else t1 = true;
                        else t1 = true;
                      else t1 = true;
                    else t1 = true;
                  else t1 = true;
                else t1 = true;
              else t1 = true;
            else t1 = true;
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    _withChildren$1$3(child, start, create) {
      var result = create.call$2(
        this.children$1(0, child),
        this.scanner.spanFrom$1(start)
      );
      this.whitespaceWithoutComments$0();
      return result;
    },
    _withChildren$3(child, start, create) {
      return this._withChildren$1$3(child, start, create, type$.dynamic);
    },
    _urlString$0() {
      var innerError,
        t2,
        exception,
        t1 = this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        url = this.string$0();
      try {
        t2 = P.Uri_parse(url);
        return t2;
      } catch (exception) {
        t2 = H.unwrapException(exception);
        if (type$.FormatException._is(t2)) {
          innerError = t2;
          this.error$2(
            0,
            'Invalid URL: ' + J.get$message$x(innerError),
            t1.spanFrom$1(start)
          );
        } else throw exception;
      }
    },
    _publicIdentifier$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        result = _this.identifier$1$normalize(true);
      _this._assertPublic$2(
        result,
        new V.StylesheetParser__publicIdentifier_closure(
          _this,
          new S._SpanScannerState(t1, t2)
        )
      );
      return result;
    },
    _assertPublic$2(identifier, span) {
      var first = C.JSString_methods._codeUnitAt$1(identifier, 0);
      if (!(first === 45 || first === 95)) return;
      this.error$2(0, string$.Privat, span.call$0());
    },
    get$plainCss() {
      return false;
    },
  };
  V.StylesheetParser_parse_closure.prototype = {
    call$0() {
      var statements,
        t4,
        t1 = this.$this,
        t2 = t1.scanner,
        t3 = t2._string_scanner$_position;
      t2.scanChar$1(65279);
      statements = t1.statements$1(new V.StylesheetParser_parse__closure(t1));
      t2.expectDone$0();
      t4 = t1._globalVariables;
      t4 = t4.get$values(t4);
      C.JSArray_methods.addAll$1(
        statements,
        H.MappedIterable_MappedIterable(
          t4,
          new V.StylesheetParser_parse__closure0(),
          H._instanceType(t4)._eval$1('Iterable.E'),
          type$.Statement
        )
      );
      return V.Stylesheet$internal(
        statements,
        t2.spanFrom$1(new S._SpanScannerState(t2, t3)),
        t1.get$plainCss()
      );
    },
    $signature: 239,
  };
  V.StylesheetParser_parse__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.scan$1('@charset')) {
        t1.whitespace$0();
        t1.string$0();
        return null;
      }
      return t1._statement$1$root(true);
    },
    $signature: 238,
  };
  V.StylesheetParser_parse__closure0.prototype = {
    call$1(declaration) {
      return Z.VariableDeclaration$(
        declaration.name,
        new O.NullExpression(declaration.expression.get$span()),
        declaration.span,
        null,
        false,
        true,
        null
      );
    },
    $signature: 237,
  };
  V.StylesheetParser_parseArgumentDeclaration_closure.prototype = {
    call$0() {
      var $arguments,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$2$name(64, '@-rule');
      t1.identifier$0();
      t1.whitespace$0();
      t1.identifier$0();
      $arguments = t1._argumentDeclaration$0();
      t1.whitespace$0();
      t2.expectChar$1(123);
      return $arguments;
    },
    $signature: 236,
  };
  V.StylesheetParser_parseVariableDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.lookingAtIdentifier$0()
        ? t1._variableDeclarationWithNamespace$0()
        : t1.variableDeclarationWithoutNamespace$0();
    },
    $signature: 179,
  };
  V.StylesheetParser_parseUseRule_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.scanner,
        t3 = t2._string_scanner$_position;
      t2.expectChar$2$name(64, '@-rule');
      t1.expectIdentifier$1('use');
      t1.whitespace$0();
      return t1._useRule$1(new S._SpanScannerState(t2, t3));
    },
    $signature: 235,
  };
  V.StylesheetParser__parseSingleProduction_closure.prototype = {
    call$0() {
      var result = this.production.call$0();
      this.$this.scanner.expectDone$0();
      return result;
    },
    $signature() {
      return this.T._eval$1('0()');
    },
  };
  V.StylesheetParser__statement_closure.prototype = {
    call$0() {
      return this.$this._statement$0();
    },
    $signature: 103,
  };
  V.StylesheetParser_variableDeclarationWithoutNamespace_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  V.StylesheetParser_variableDeclarationWithoutNamespace_closure0.prototype = {
    call$0() {
      return this.declaration;
    },
    $signature: 179,
  };
  V.StylesheetParser__declarationOrBuffer_closure.prototype = {
    call$2(children, span) {
      return L.Declaration$nested(this.name, children, span, null);
    },
    $signature: 75,
  };
  V.StylesheetParser__declarationOrBuffer_closure0.prototype = {
    call$2(children, span) {
      return L.Declaration$nested(this.name, children, span, this._box_0.value);
    },
    $signature: 75,
  };
  V.StylesheetParser__styleRule_closure.prototype = {
    call$2(children, span) {
      var _this = this,
        t1 = _this.$this;
      if (t1.get$indented() && children.length === 0)
        t1.logger.warn$2$span(
          0,
          string$.This_s,
          _this._box_0.interpolation.span
        );
      t1._inStyleRule = _this.wasInStyleRule;
      return X.StyleRule$(
        _this._box_0.interpolation,
        children,
        t1.scanner.spanFrom$1(_this.start)
      );
    },
    $signature: 234,
  };
  V.StylesheetParser__propertyOrVariableDeclaration_closure.prototype = {
    call$2(children, span) {
      return L.Declaration$nested(this._box_0.name, children, span, null);
    },
    $signature: 75,
  };
  V.StylesheetParser__propertyOrVariableDeclaration_closure0.prototype = {
    call$2(children, span) {
      return L.Declaration$nested(this._box_0.name, children, span, this.value);
    },
    $signature: 75,
  };
  V.StylesheetParser__atRootRule_closure.prototype = {
    call$2(children, span) {
      return V.AtRootRule$(children, span, this.query);
    },
    $signature: 184,
  };
  V.StylesheetParser__atRootRule_closure0.prototype = {
    call$2(children, span) {
      return V.AtRootRule$(children, span, null);
    },
    $signature: 184,
  };
  V.StylesheetParser__eachRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._inControlDirective = _this.wasInControlDirective;
      return V.EachRule$(_this.variables, _this.list, children, span);
    },
    $signature: 231,
  };
  V.StylesheetParser__functionRule_closure.prototype = {
    call$2(children, span) {
      return M.FunctionRule$(
        this.name,
        this.$arguments,
        children,
        span,
        this.precedingComment
      );
    },
    $signature: 230,
  };
  V.StylesheetParser__forRule_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.lookingAtIdentifier$0()) return false;
      if (t1.scanIdentifier$1('to')) return (this._box_0.exclusive = true);
      else if (t1.scanIdentifier$1('through')) {
        this._box_0.exclusive = false;
        return true;
      } else return false;
    },
    $signature: 25,
  };
  V.StylesheetParser__forRule_closure0.prototype = {
    call$2(children, span) {
      var t1,
        _this = this;
      _this.$this._inControlDirective = _this.wasInControlDirective;
      t1 = _this._box_0.exclusive;
      t1.toString;
      return B.ForRule$(
        _this.variable,
        _this.from,
        _this.to,
        children,
        span,
        t1
      );
    },
    $signature: 229,
  };
  V.StylesheetParser__memberList_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.peekChar$0() === 36)
        this.variables.add$1(0, t1.variableName$0());
      else this.identifiers.add$1(0, t1.identifier$1$normalize(true));
    },
    $signature: 2,
  };
  V.StylesheetParser__includeRule_closure.prototype = {
    call$2(children, span) {
      return Y.ContentBlock$(this.contentArguments_, children, span);
    },
    $signature: 226,
  };
  V.StylesheetParser_mediaRule_closure.prototype = {
    call$2(children, span) {
      return G.MediaRule$(this.query, children, span);
    },
    $signature: 225,
  };
  V.StylesheetParser__mixinRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._stylesheet$_inMixin = false;
      return T.MixinRule$(
        _this.name,
        _this.$arguments,
        children,
        span,
        _this.precedingComment
      );
    },
    $signature: 223,
  };
  V.StylesheetParser_mozDocumentRule_closure.prototype = {
    call$2(children, span) {
      var _this = this;
      if (_this._box_0.needsDeprecationWarning)
        _this.$this.logger.warn$3$deprecation$span(
          0,
          string$.x40_moz_,
          true,
          span
        );
      return U.AtRule$(_this.name, span, children, _this.value);
    },
    $signature: 191,
  };
  V.StylesheetParser_supportsRule_closure.prototype = {
    call$2(children, span) {
      return B.SupportsRule$(this.condition, children, span);
    },
    $signature: 221,
  };
  V.StylesheetParser__whileRule_closure.prototype = {
    call$2(children, span) {
      this.$this._inControlDirective = this.wasInControlDirective;
      return G.WhileRule$(this.condition, children, span);
    },
    $signature: 220,
  };
  V.StylesheetParser_unknownAtRule_closure.prototype = {
    call$2(children, span) {
      return U.AtRule$(this.name, span, children, this._box_0.value);
    },
    $signature: 191,
  };
  V.StylesheetParser_expression_resetState.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      t1.operands_ = t1.operators_ = t1.spaceExpressions_ = t1.commaExpressions_ = null;
      t2 = this.$this;
      t2.scanner.set$state(this.start);
      t1.allowSlash = t2.lookingAtNumber$0();
      t1.singleExpression_ = t2._singleExpression$0();
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_resolveOneOperation.prototype = {
    call$0() {
      var singleExpression,
        t3,
        t4,
        t1 = this._box_0,
        operator = t1.operators_.pop(),
        t2 = t1.operands_;
      t2.toString;
      singleExpression = t1.singleExpression_;
      if (singleExpression == null) {
        t3 = this.$this.scanner;
        t4 = operator.operator.length;
        t3.error$3$length$position(
          0,
          'Expected expression.',
          t4,
          t3._string_scanner$_position - t4
        );
      }
      if (operator !== C.BinaryOperator_RTB) t1.allowSlash = false;
      if (t1.allowSlash && !this.$this._inParentheses)
        t1.singleExpression_ = new V.BinaryOperationExpression(
          C.BinaryOperator_RTB,
          t2.pop(),
          singleExpression,
          true
        );
      else
        t1.singleExpression_ = new V.BinaryOperationExpression(
          operator,
          t2.pop(),
          singleExpression,
          false
        );
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_resolveOperations.prototype = {
    call$0() {
      var t1,
        operators = this._box_0.operators_;
      if (operators == null) return;
      for (t1 = this.resolveOneOperation; operators.length !== 0; ) t1.call$0();
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_addSingleExpression.prototype = {
    call$2$number(expression, number) {
      var t2,
        spaceExpressions,
        _this = this,
        t1 = _this._box_0;
      if (t1.singleExpression_ != null) {
        t2 = _this.$this;
        if (t2._inParentheses) {
          t2._inParentheses = false;
          if (t1.allowSlash) {
            _this.resetState.call$0();
            return;
          }
        }
        spaceExpressions = t1.spaceExpressions_;
        if (spaceExpressions == null)
          spaceExpressions = t1.spaceExpressions_ = H._setArrayType(
            [],
            type$.JSArray_Expression
          );
        _this.resolveOperations.call$0();
        t2 = t1.singleExpression_;
        t2.toString;
        spaceExpressions.push(t2);
        t1.allowSlash = number;
      } else if (!number) t1.allowSlash = false;
      t1.singleExpression_ = expression;
    },
    call$1(expression) {
      return this.call$2$number(expression, false);
    },
    $signature: 218,
  };
  V.StylesheetParser_expression_addOperator.prototype = {
    call$1(operator) {
      var t2,
        t3,
        operators,
        operands,
        t4,
        singleExpression,
        singleExpression_,
        t1 = this.$this;
      if (
        t1.get$plainCss() &&
        operator !== C.BinaryOperator_RTB &&
        operator !== C.BinaryOperator_kjl
      ) {
        t2 = t1.scanner;
        t3 = operator.operator.length;
        t2.error$3$length$position(
          0,
          "Operators aren't allowed in plain CSS.",
          t3,
          t2._string_scanner$_position - t3
        );
      }
      t2 = this._box_0;
      t2.allowSlash = t2.allowSlash && operator === C.BinaryOperator_RTB;
      operators = t2.operators_;
      if (operators == null)
        operators = t2.operators_ = H._setArrayType(
          [],
          type$.JSArray_BinaryOperator
        );
      operands = t2.operands_;
      if (operands == null)
        operands = t2.operands_ = H._setArrayType([], type$.JSArray_Expression);
      t3 = this.resolveOneOperation;
      t4 = operator.precedence;
      while (true) {
        if (
          !(
            operators.length !== 0 &&
            C.JSArray_methods.get$last(operators).precedence >= t4
          )
        )
          break;
        t3.call$0();
      }
      operators.push(operator);
      singleExpression = t2.singleExpression_;
      if (singleExpression == null) {
        t3 = t1.scanner;
        t4 = operator.operator.length;
        t3.error$3$length$position(
          0,
          'Expected expression.',
          t4,
          t3._string_scanner$_position - t4
        );
      }
      operands.push(singleExpression);
      t1.whitespace$0();
      t2.allowSlash = t2.allowSlash && t1.lookingAtNumber$0();
      singleExpression_ = t1._singleExpression$0();
      t2.singleExpression_ = singleExpression_;
      t2.allowSlash =
        t2.allowSlash && singleExpression_ instanceof T.NumberExpression;
    },
    $signature: 217,
  };
  V.StylesheetParser_expression_resolveSpaceExpressions.prototype = {
    call$0() {
      var t1, spaceExpressions, singleExpression, t2;
      this.resolveOperations.call$0();
      t1 = this._box_0;
      spaceExpressions = t1.spaceExpressions_;
      if (spaceExpressions != null) {
        singleExpression = t1.singleExpression_;
        if (singleExpression == null)
          this.$this.scanner.error$1(0, 'Expected expression.');
        spaceExpressions.push(singleExpression);
        t2 = C.JSArray_methods.get$first(spaceExpressions)
          .get$span()
          .expand$1(0, singleExpression.get$span());
        t1.singleExpression_ = new D.ListExpression(
          P.List_List$unmodifiable(spaceExpressions, type$.Expression),
          C.ListSeparator_woc,
          false,
          t2
        );
        t1.spaceExpressions_ = null;
      }
    },
    $signature: 0,
  };
  V.StylesheetParser__expressionUntilComma_closure.prototype = {
    call$0() {
      return this.$this.scanner.peekChar$0() === 44;
    },
    $signature: 25,
  };
  V.StylesheetParser__unicodeRange_closure.prototype = {
    call$1(char) {
      return char != null && T.isHex(char);
    },
    $signature: 26,
  };
  V.StylesheetParser__unicodeRange_closure0.prototype = {
    call$1(char) {
      return char != null && T.isHex(char);
    },
    $signature: 26,
  };
  V.StylesheetParser_identifierLike_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  V.StylesheetParser_trySpecialFunction_closure.prototype = {
    call$1(contents) {
      return new D.StringExpression(contents, false);
    },
    $signature: 216,
  };
  V.StylesheetParser__expressionUntilComparison_closure.prototype = {
    call$0() {
      var t1 = this.$this.scanner,
        next = t1.peekChar$0();
      if (next === 61) return t1.peekChar$1(1) !== 61;
      return next === 60 || next === 62;
    },
    $signature: 25,
  };
  V.StylesheetParser__publicIdentifier_closure.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  M.StylesheetGraph.prototype = {
    modifiedSince$3(url, since, baseImporter) {
      var node = this._stylesheet_graph$_add$3(url, baseImporter, null);
      if (node == null) return true;
      return (
        new M.StylesheetGraph_modifiedSince_transitiveModificationTime(
          this
        ).call$1(node)._core$_value > since._core$_value
      );
    },
    _stylesheet_graph$_add$3(url, baseImporter, baseUrl) {
      var t1,
        t2,
        _this = this,
        tuple = _this._ignoreErrors$1(
          new M.StylesheetGraph__add_closure(_this, url, baseImporter, baseUrl)
        );
      if (tuple == null) return null;
      t1 = tuple.item1;
      t2 = tuple.item2;
      _this.addCanonical$3(t1, t2, tuple.item3);
      return _this._nodes.$index(0, t2);
    },
    addCanonical$3(importer, canonicalUrl, originalUrl) {
      var stylesheet,
        _this = this,
        t1 = _this._nodes;
      if (t1.$index(0, canonicalUrl) != null) return C.Set_empty1;
      stylesheet = _this._ignoreErrors$1(
        new M.StylesheetGraph_addCanonical_closure(
          _this,
          importer,
          canonicalUrl,
          originalUrl
        )
      );
      if (stylesheet == null) return C.Set_empty1;
      t1.$indexSet(
        0,
        canonicalUrl,
        M.StylesheetNode$_(
          stylesheet,
          importer,
          canonicalUrl,
          _this._upstreamNodes$3(stylesheet, importer, canonicalUrl)
        )
      );
      t1 = _this._recanonicalizeImports$2(importer, canonicalUrl);
      return t1;
    },
    _upstreamNodes$3(stylesheet, baseImporter, baseUrl) {
      var t4,
        t5,
        t6,
        t7,
        t1 = type$.Uri,
        active = P.LinkedHashSet_LinkedHashSet$_literal([baseUrl], t1),
        t2 = type$.JSArray_Uri,
        t3 = H._setArrayType([], t2);
      t2 = H._setArrayType([], t2);
      new F._FindDependenciesVisitor(t3, t2).visitChildren$1(
        stylesheet.children
      );
      t4 = type$.nullable_StylesheetNode;
      t5 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t4);
      for (t6 = C.JSArray_methods.get$iterator(t3); t6.moveNext$0(); ) {
        t7 = t6.get$current();
        t5.$indexSet(0, t7, this._nodeFor$4(t7, baseImporter, baseUrl, active));
      }
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t4);
      for (
        t2 = J.get$iterator$ax(
          new S.Tuple2(t3, t2, type$.Tuple2_of_List_Uri_and_List_Uri).item2
        );
        t2.moveNext$0();

      ) {
        t3 = t2.get$current();
        t1.$indexSet(
          0,
          t3,
          this._nodeFor$5$forImport(t3, baseImporter, baseUrl, active, true)
        );
      }
      return new S.Tuple2(
        t5,
        t1,
        type$.Tuple2_of_Map_of_Uri_and_nullable_StylesheetNode_and_Map_of_Uri_and_nullable_StylesheetNode
      );
    },
    _recanonicalizeImports$2(importer, canonicalUrl) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        newUpstream,
        newUpstreamImports,
        _this = this,
        changed = P.LinkedHashSet_LinkedHashSet$_empty(type$.StylesheetNode);
      for (
        t1 = _this._nodes,
          t1 = t1.get$values(t1),
          t1 = t1.get$iterator(t1),
          t2 = type$.UnmodifiableMapView_of_Uri_and_nullable_StylesheetNode,
          t3 = type$.Uri,
          t4 = type$.nullable_StylesheetNode;
        t1.moveNext$0();

      ) {
        t5 = t1.get$current();
        newUpstream = _this._recanonicalizeImportsForNode$4$forImport(
          t5,
          importer,
          canonicalUrl,
          false
        );
        newUpstreamImports = _this._recanonicalizeImportsForNode$4$forImport(
          t5,
          importer,
          canonicalUrl,
          true
        );
        if (
          newUpstream.get$isNotEmpty(newUpstream) ||
          newUpstreamImports.get$isNotEmpty(newUpstreamImports)
        ) {
          changed.add$1(0, t5);
          t5._replaceUpstream$2(
            Y.mergeMaps(
              new P.UnmodifiableMapView(t5._upstream, t2),
              newUpstream,
              t3,
              t4
            ),
            Y.mergeMaps(
              new P.UnmodifiableMapView(t5._upstreamImports, t2),
              newUpstreamImports,
              t3,
              t4
            )
          );
        }
      }
      if (changed._collection$_length !== 0)
        _this._transitiveModificationTimes.clear$0(0);
      return changed;
    },
    _recanonicalizeImportsForNode$4$forImport(
      node,
      importer,
      canonicalUrl,
      forImport
    ) {
      var t1 = type$.UnmodifiableMapView_of_Uri_and_nullable_StylesheetNode,
        map = forImport
          ? new P.UnmodifiableMapView(node._upstreamImports, t1)
          : new P.UnmodifiableMapView(node._upstream, t1),
        newMap = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Uri,
          type$.nullable_StylesheetNode
        );
      map._map.forEach$1(
        0,
        new M.StylesheetGraph__recanonicalizeImportsForNode_closure(
          this,
          importer,
          canonicalUrl,
          node,
          forImport,
          newMap
        )
      );
      return newMap;
    },
    _nodeFor$5$forImport(url, baseImporter, baseUrl, active, forImport) {
      var importer,
        canonicalUrl,
        resolvedUrl,
        t1,
        stylesheet,
        node,
        _this = this,
        tuple = _this._ignoreErrors$1(
          new M.StylesheetGraph__nodeFor_closure(
            _this,
            url,
            baseImporter,
            baseUrl,
            forImport
          )
        );
      if (tuple == null) return null;
      importer = tuple.item1;
      canonicalUrl = tuple.item2;
      resolvedUrl = tuple.item3;
      t1 = _this._nodes;
      if (t1.containsKey$1(canonicalUrl)) return t1.$index(0, canonicalUrl);
      if (active.contains$1(0, canonicalUrl)) return null;
      stylesheet = _this._ignoreErrors$1(
        new M.StylesheetGraph__nodeFor_closure0(
          _this,
          importer,
          canonicalUrl,
          resolvedUrl
        )
      );
      if (stylesheet == null) return null;
      active.add$1(0, canonicalUrl);
      node = M.StylesheetNode$_(
        stylesheet,
        importer,
        canonicalUrl,
        _this._upstreamNodes$3(stylesheet, importer, canonicalUrl)
      );
      active.remove$1(0, canonicalUrl);
      t1.$indexSet(0, canonicalUrl, node);
      return node;
    },
    _nodeFor$4(url, baseImporter, baseUrl, active) {
      return this._nodeFor$5$forImport(
        url,
        baseImporter,
        baseUrl,
        active,
        false
      );
    },
    _ignoreErrors$1$1(callback) {
      var t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return null;
      }
    },
    _ignoreErrors$1(callback) {
      return this._ignoreErrors$1$1(callback, type$.dynamic);
    },
  };
  M.StylesheetGraph_modifiedSince_transitiveModificationTime.prototype = {
    call$1(node) {
      return this.$this._transitiveModificationTimes.putIfAbsent$2(
        node.canonicalUrl,
        new M.StylesheetGraph_modifiedSince_transitiveModificationTime_closure(
          node,
          this
        )
      );
    },
    $signature: 214,
  };
  M.StylesheetGraph_modifiedSince_transitiveModificationTime_closure.prototype = {
    call$0() {
      var t2,
        t3,
        upstreamTime,
        t1 = this.node,
        latest = t1.importer.modificationTime$1(t1.canonicalUrl);
      for (
        t2 = t1._upstream,
          t2 = t2.get$values(t2),
          t1 = t1._upstreamImports,
          t1 = t2.followedBy$1(0, t1.get$values(t1)),
          t1 = new H.FollowedByIterator(
            J.get$iterator$ax(t1.__internal$_first),
            t1._second
          ),
          t2 = this.transitiveModificationTime;
        t1.moveNext$0();

      ) {
        t3 = t1._currentIterator.get$current();
        upstreamTime =
          t3 == null ? new P.DateTime(Date.now(), false) : t2.call$1(t3);
        if (upstreamTime._core$_value > latest._core$_value)
          latest = upstreamTime;
      }
      return latest;
    },
    $signature: 123,
  };
  M.StylesheetGraph__add_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this.importCache.canonicalize$3$baseImporter$baseUrl(
        _this.url,
        _this.baseImporter,
        _this.baseUrl
      );
    },
    $signature: 90,
  };
  M.StylesheetGraph_addCanonical_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this.importCache.importCanonical$3$originalUrl(
        _this.importer,
        _this.canonicalUrl,
        _this.originalUrl
      );
    },
    $signature: 91,
  };
  M.StylesheetGraph__recanonicalizeImportsForNode_closure.prototype = {
    call$2(url, upstream) {
      var result,
        t1,
        t2,
        t3,
        t4,
        exception,
        newCanonicalUrl,
        _this = this;
      if (!_this.importer.couldCanonicalize$2(url, _this.canonicalUrl)) return;
      t1 = _this.$this;
      t2 = t1.importCache;
      t3 = t2._canonicalizeCache;
      t4 = type$.Tuple2_Uri_bool;
      t3.remove$1(0, new S.Tuple2(url, false, t4));
      t3.remove$1(0, new S.Tuple2(url, true, t4));
      result = null;
      try {
        t3 = _this.node;
        result = t2.canonicalize$4$baseImporter$baseUrl$forImport(
          url,
          t3.importer,
          t3.canonicalUrl,
          _this.forImport
        );
      } catch (exception) {
        H.unwrapException(exception);
      }
      t2 = result;
      newCanonicalUrl = t2 == null ? null : t2.item2;
      if (
        J.$eq$(newCanonicalUrl, upstream == null ? null : upstream.canonicalUrl)
      )
        return;
      t1 = result == null ? null : t1._nodes.$index(0, result.item2);
      _this.newMap.$indexSet(0, url, t1);
    },
    $signature: 213,
  };
  M.StylesheetGraph__nodeFor_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this.importCache.canonicalize$4$baseImporter$baseUrl$forImport(
        _this.url,
        _this.baseImporter,
        _this.baseUrl,
        _this.forImport
      );
    },
    $signature: 90,
  };
  M.StylesheetGraph__nodeFor_closure0.prototype = {
    call$0() {
      var _this = this;
      return _this.$this.importCache.importCanonical$3$originalUrl(
        _this.importer,
        _this.canonicalUrl,
        _this.resolvedUrl
      );
    },
    $signature: 91,
  };
  M.StylesheetNode.prototype = {
    StylesheetNode$_$4(_stylesheet, importer, canonicalUrl, allUpstream) {
      var t1, t2;
      for (
        t1 = this._upstream,
          t1 = t1.get$values(t1),
          t2 = this._upstreamImports,
          t2 = t1.followedBy$1(0, t2.get$values(t2)),
          t2 = new H.FollowedByIterator(
            J.get$iterator$ax(t2.__internal$_first),
            t2._second
          );
        t2.moveNext$0();

      ) {
        t1 = t2._currentIterator.get$current();
        if (t1 != null) t1._downstream.add$1(0, this);
      }
    },
    _replaceUpstream$2(newUpstream, newUpstreamImports) {
      var t3,
        oldUpstream,
        newUpstreamSet,
        _this = this,
        t1 = type$.nullable_StylesheetNode,
        t2 = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      for (
        t3 = _this._upstream, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      )
        t2.add$1(0, t3.get$current());
      for (
        t3 = _this._upstreamImports,
          t3 = t3.get$values(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      )
        t2.add$1(0, t3.get$current());
      t3 = type$.StylesheetNode;
      oldUpstream = X.SetExtension_removeNull(t2, t3);
      t1 = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      for (
        t2 = newUpstream.get$values(newUpstream), t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      )
        t1.add$1(0, t2.get$current());
      for (
        t2 = newUpstreamImports.get$values(newUpstreamImports),
          t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      )
        t1.add$1(0, t2.get$current());
      newUpstreamSet = X.SetExtension_removeNull(t1, t3);
      for (
        t1 = oldUpstream.difference$1(newUpstreamSet), t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      )
        t1.get$current()._downstream.remove$1(0, _this);
      for (
        t1 = newUpstreamSet.difference$1(oldUpstream), t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      )
        t1.get$current()._downstream.add$1(0, _this);
      _this._upstream = newUpstream;
      _this._upstreamImports = newUpstreamImports;
    },
    toString$0(_) {
      var t1 = X.NullableExtension_andThen(
        this._stylesheet.span.file.url,
        D.path__prettyUri$closure()
      );
      return t1 == null ? '<unknown>' : t1;
    },
  };
  M.Syntax.prototype = {
    toString$0(_) {
      return this._syntax$_name;
    },
  };
  K.LimitedMapView.prototype = {
    get$keys(_) {
      return this._limited_map_view$_keys;
    },
    get$length(_) {
      return this._limited_map_view$_keys._collection$_length;
    },
    get$isEmpty(_) {
      return this._limited_map_view$_keys._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._limited_map_view$_keys._collection$_length !== 0;
    },
    $index(_, key) {
      return this._limited_map_view$_keys.contains$1(0, key)
        ? this._limited_map_view$_map.$index(0, key)
        : null;
    },
    containsKey$1(key) {
      return this._limited_map_view$_keys.contains$1(0, key);
    },
    remove$1(_, key) {
      return this._limited_map_view$_keys.contains$1(0, key)
        ? this._limited_map_view$_map.remove$1(0, key)
        : null;
    },
  };
  Z.MergedMapView.prototype = {
    get$keys(_) {
      var t1 = this._mapsByKey;
      return t1.get$keys(t1);
    },
    get$length(_) {
      var t1 = this._mapsByKey;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._mapsByKey;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._mapsByKey;
      return t1.get$isNotEmpty(t1);
    },
    MergedMapView$1(maps, $K, $V) {
      var t1, t2, t3, _i, map, t4, t5;
      for (
        t1 = maps.length,
          t2 = this._mapsByKey,
          t3 = $K._eval$1('@<0>')._bind$1($V)._eval$1('MergedMapView<1,2>'),
          _i = 0;
        _i < maps.length;
        maps.length === t1 || (0, H.throwConcurrentModificationError)(maps),
          ++_i
      ) {
        map = maps[_i];
        if (t3._is(map))
          for (
            t4 = map._mapsByKey,
              t4 = t4.get$values(t4),
              t4 = t4.get$iterator(t4);
            t4.moveNext$0();

          ) {
            t5 = t4.get$current();
            B.setAll(t2, t5.get$keys(t5), t5);
          }
        else B.setAll(t2, map.get$keys(map), map);
      }
    },
    $index(_, key) {
      var t1 = this._mapsByKey.$index(0, this.$ti._precomputed1._as(key));
      return t1 == null ? null : t1.$index(0, key);
    },
    $indexSet(_, key, value) {
      var child = this._mapsByKey.$index(0, key);
      if (child == null)
        throw H.wrapException(P.UnsupportedError$(string$.New_en));
      child.$indexSet(0, key, value);
    },
    remove$1(_, key) {
      throw H.wrapException(P.UnsupportedError$(string$.Entrie));
    },
    containsKey$1(key) {
      return this._mapsByKey.containsKey$1(key);
    },
  };
  N.NoSourceMapBuffer0.prototype = {
    get$length(_) {
      return this._no_source_map_buffer0$_buffer._contents.length;
    },
    forSpan$1$2(span, callback) {
      return callback.call$0();
    },
    forSpan$2(span, callback) {
      return this.forSpan$1$2(span, callback, type$.dynamic);
    },
    write$1(_, object) {
      this._no_source_map_buffer0$_buffer._contents += H.S(object);
      return null;
    },
    writeCharCode$1(charCode) {
      this._no_source_map_buffer0$_buffer._contents += H.Primitives_stringFromCharCode(
        charCode
      );
      return null;
    },
    toString$0(_) {
      var t1 = this._no_source_map_buffer0$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    buildSourceMap$1$prefix(prefix) {
      return H.throwExpression(P.UnsupportedError$(string$.NoSour));
    },
  };
  F.PrefixedMapView.prototype = {
    get$keys(_) {
      return new F._PrefixedKeys(this);
    },
    get$length(_) {
      var t1 = this._prefixed_map_view$_map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._prefixed_map_view$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._prefixed_map_view$_map;
      return t1.get$isNotEmpty(t1);
    },
    $index(_, key) {
      return typeof key == 'string' &&
        C.JSString_methods.startsWith$1(key, this._prefix)
        ? this._prefixed_map_view$_map.$index(
            0,
            J.substring$1$s(key, this._prefix.length)
          )
        : null;
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        C.JSString_methods.startsWith$1(key, this._prefix) &&
        this._prefixed_map_view$_map.containsKey$1(
          J.substring$1$s(key, this._prefix.length)
        )
      );
    },
  };
  F._PrefixedKeys.prototype = {
    get$length(_) {
      var t1 = this._view._prefixed_map_view$_map;
      return t1.get$length(t1);
    },
    get$iterator(_) {
      var t1 = this._view._prefixed_map_view$_map;
      t1 = J.map$1$1$ax(
        t1.get$keys(t1),
        new F._PrefixedKeys_iterator_closure(this),
        type$.String
      );
      return t1.get$iterator(t1);
    },
    contains$1(_, key) {
      return this._view.containsKey$1(key);
    },
  };
  F._PrefixedKeys_iterator_closure.prototype = {
    call$1(key) {
      return this.$this._view._prefix + key;
    },
    $signature: 5,
  };
  U.PublicMemberMapView.prototype = {
    get$keys(_) {
      var t1 = this._public_member_map_view$_inner;
      return J.where$1$ax(t1.get$keys(t1), B.utils__isPublic$closure());
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        B.isPublic(key) &&
        this._public_member_map_view$_inner.containsKey$1(key)
      );
    },
    $index(_, key) {
      if (typeof key == 'string' && B.isPublic(key))
        return this._public_member_map_view$_inner.$index(0, key);
      return null;
    },
  };
  D.SourceMapBuffer0.prototype = {
    get$_source_map_buffer0$_targetLocation() {
      var t1 = this._source_map_buffer0$_buffer._contents,
        t2 = this._source_map_buffer0$_line;
      return V.SourceLocation$(
        t1.length,
        this._source_map_buffer0$_column,
        t2,
        null
      );
    },
    get$length(_) {
      return this._source_map_buffer0$_buffer._contents.length;
    },
    forSpan$1$2(span, callback) {
      var t1,
        _this = this,
        wasInSpan = _this._source_map_buffer0$_inSpan;
      _this._source_map_buffer0$_inSpan = true;
      _this._addEntry$2(
        Y.FileLocation$_(span.file, span._file$_start),
        _this.get$_source_map_buffer0$_targetLocation()
      );
      try {
        t1 = callback.call$0();
        return t1;
      } finally {
        _this._source_map_buffer0$_inSpan = wasInSpan;
      }
    },
    forSpan$2(span, callback) {
      return this.forSpan$1$2(span, callback, type$.dynamic);
    },
    _addEntry$2(source, target) {
      var entry,
        t2,
        t1 = this._source_map_buffer0$_entries;
      if (t1.length !== 0) {
        entry = C.JSArray_methods.get$last(t1);
        t2 = entry.source;
        if (
          t2.file.getLine$1(t2.offset) ===
            source.file.getLine$1(source.offset) &&
          entry.target.line === target.line
        )
          return;
        if (entry.target.offset === target.offset) return;
      }
      t1.push(new L.Entry(source, target, null));
    },
    write$1(_, object) {
      var t1,
        i,
        string = J.toString$0$(object);
      this._source_map_buffer0$_buffer._contents += string;
      for (t1 = string.length, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(string, i) === 10)
          this._source_map_buffer0$_writeLine$0();
        else ++this._source_map_buffer0$_column;
    },
    writeCharCode$1(charCode) {
      this._source_map_buffer0$_buffer._contents += H.Primitives_stringFromCharCode(
        charCode
      );
      if (charCode === 10) this._source_map_buffer0$_writeLine$0();
      else ++this._source_map_buffer0$_column;
    },
    _source_map_buffer0$_writeLine$0() {
      var _this = this,
        t1 = _this._source_map_buffer0$_entries;
      if (
        C.JSArray_methods.get$last(t1).target.line ===
          _this._source_map_buffer0$_line &&
        C.JSArray_methods.get$last(t1).target.column ===
          _this._source_map_buffer0$_column
      )
        t1.pop();
      ++_this._source_map_buffer0$_line;
      _this._source_map_buffer0$_column = 0;
      if (_this._source_map_buffer0$_inSpan)
        t1.push(
          new L.Entry(
            C.JSArray_methods.get$last(t1).source,
            _this.get$_source_map_buffer0$_targetLocation(),
            null
          )
        );
    },
    toString$0(_) {
      var t1 = this._source_map_buffer0$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    buildSourceMap$1$prefix(prefix) {
      var i,
        t2,
        prefixColumn,
        _box_0 = {},
        t1 = prefix.length;
      if (t1 === 0)
        return T.SingleMapping_SingleMapping$fromEntries(
          this._source_map_buffer0$_entries
        );
      _box_0.prefixColumn = _box_0.prefixLines = 0;
      for (i = 0, t2 = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(prefix, i) === 10) {
          ++_box_0.prefixLines;
          _box_0.prefixColumn = 0;
          t2 = 0;
        } else {
          prefixColumn = t2 + 1;
          _box_0.prefixColumn = prefixColumn;
          t2 = prefixColumn;
        }
      t2 = this._source_map_buffer0$_entries;
      return T.SingleMapping_SingleMapping$fromEntries(
        new H.MappedListIterable(
          t2,
          new D.SourceMapBuffer_buildSourceMap_closure(_box_0, t1),
          H._arrayInstanceType(t2)._eval$1('MappedListIterable<1,Entry>')
        )
      );
    },
  };
  D.SourceMapBuffer_buildSourceMap_closure.prototype = {
    call$1(entry) {
      var t1 = entry.source,
        t2 = entry.target,
        t3 = t2.line,
        t4 = this._box_0,
        t5 = t4.prefixLines;
      t4 = t3 === 0 ? t4.prefixColumn : 0;
      return new L.Entry(
        t1,
        V.SourceLocation$(
          t2.offset + this.prefixLength,
          t2.column + t4,
          t3 + t5,
          null
        ),
        entry.identifierName
      );
    },
    $signature: 200,
  };
  R.UnprefixedMapView.prototype = {
    get$keys(_) {
      return new R._UnprefixedKeys(this);
    },
    $index(_, key) {
      return typeof key == 'string'
        ? this._unprefixed_map_view$_map.$index(
            0,
            this._unprefixed_map_view$_prefix + key
          )
        : null;
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        this._unprefixed_map_view$_map.containsKey$1(
          this._unprefixed_map_view$_prefix + key
        )
      );
    },
    remove$1(_, key) {
      return typeof key == 'string'
        ? this._unprefixed_map_view$_map.remove$1(
            0,
            this._unprefixed_map_view$_prefix + key
          )
        : null;
    },
  };
  R._UnprefixedKeys.prototype = {
    get$iterator(_) {
      var t1 = this._unprefixed_map_view$_view._unprefixed_map_view$_map;
      t1 = J.where$1$ax(
        t1.get$keys(t1),
        new R._UnprefixedKeys_iterator_closure(this)
      ).map$1$1(0, new R._UnprefixedKeys_iterator_closure0(this), type$.String);
      return t1.get$iterator(t1);
    },
    contains$1(_, key) {
      return this._unprefixed_map_view$_view.containsKey$1(key);
    },
  };
  R._UnprefixedKeys_iterator_closure.prototype = {
    call$1(key) {
      return C.JSString_methods.startsWith$1(
        key,
        this.$this._unprefixed_map_view$_view._unprefixed_map_view$_prefix
      );
    },
    $signature: 6,
  };
  R._UnprefixedKeys_iterator_closure0.prototype = {
    call$1(key) {
      return C.JSString_methods.substring$1(
        key,
        this.$this._unprefixed_map_view$_view._unprefixed_map_view$_prefix
          .length
      );
    },
    $signature: 5,
  };
  B.indent_closure.prototype = {
    call$1(line) {
      return C.JSString_methods.$mul(' ', this.indentation) + line;
    },
    $signature: 5,
  };
  B.flattenVertically_closure.prototype = {
    call$1(inner) {
      return Q.QueueList_QueueList$from(inner, this.T);
    },
    $signature() {
      return this.T._eval$1('QueueList<0>(Iterable<0>)');
    },
  };
  B.flattenVertically_closure0.prototype = {
    call$1(queue) {
      this.result.push(queue.removeFirst$0());
      return queue.get$length(queue) === 0;
    },
    $signature() {
      return this.T._eval$1('bool(QueueList<0>)');
    },
  };
  B.longestCommonSubsequence_closure.prototype = {
    call$2(element1, element2) {
      return J.$eq$(element1, element2) ? element1 : null;
    },
    $signature() {
      return this.T._eval$1('0?(0,0)');
    },
  };
  B.longestCommonSubsequence_backtrack.prototype = {
    call$2(i, j) {
      var selection,
        t1,
        _this = this;
      if (i === -1 || j === -1)
        return H._setArrayType([], _this.T._eval$1('JSArray<0>'));
      selection = _this.selections[i][j];
      if (selection != null) {
        t1 = _this.call$2(i - 1, j - 1);
        J.add$1$ax(t1, selection);
        return t1;
      }
      t1 = _this.lengths;
      return t1[i + 1][j] > t1[i][j + 1]
        ? _this.call$2(i, j - 1)
        : _this.call$2(i - 1, j);
    },
    $signature() {
      return this.T._eval$1('List<0>(int,int)');
    },
  };
  B.mapAddAll2_closure.prototype = {
    call$2(key, inner) {
      var t1 = this.destination,
        innerDestination = t1.$index(0, key);
      if (innerDestination != null) innerDestination.addAll$1(0, inner);
      else t1.$indexSet(0, key, inner);
    },
    $signature() {
      return this.K1._eval$1('@<0>')
        ._bind$1(this.K2)
        ._bind$1(this.V)
        ._eval$1('~(1,Map<2,3>)');
    },
  };
  F.Value.prototype = {
    get$isTruthy() {
      return true;
    },
    get$separator() {
      return C.ListSeparator_undecided_null;
    },
    get$hasBrackets() {
      return false;
    },
    get$asList() {
      return H._setArrayType([this], type$.JSArray_Value);
    },
    get$lengthAsList() {
      return 1;
    },
    get$isBlank() {
      return false;
    },
    get$isSpecialNumber() {
      return false;
    },
    get$isVar() {
      return false;
    },
    get$realNull() {
      return this;
    },
    sassIndexToListIndex$2(sassIndex, $name) {
      var _this = this,
        index = sassIndex.assertNumber$1($name).assertInt$1($name);
      if (index === 0)
        throw H.wrapException(
          _this._value$_exception$2('List index may not be 0.', $name)
        );
      if (Math.abs(index) > _this.get$lengthAsList())
        throw H.wrapException(
          _this._value$_exception$2(
            'Invalid index ' +
              sassIndex.toString$0(0) +
              ' for a list with ' +
              _this.get$lengthAsList() +
              ' elements.',
            $name
          )
        );
      return index < 0 ? _this.get$lengthAsList() + index : index - 1;
    },
    assertColor$1($name) {
      return H.throwExpression(
        this._value$_exception$2(this.toString$0(0) + ' is not a color.', $name)
      );
    },
    assertFunction$1($name) {
      return H.throwExpression(
        this._value$_exception$2(
          this.toString$0(0) + ' is not a function reference.',
          $name
        )
      );
    },
    assertMap$1($name) {
      return H.throwExpression(
        this._value$_exception$2(this.toString$0(0) + ' is not a map.', $name)
      );
    },
    tryMap$0() {
      return null;
    },
    assertNumber$1($name) {
      return H.throwExpression(
        this._value$_exception$2(
          this.toString$0(0) + ' is not a number.',
          $name
        )
      );
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertString$1($name) {
      return H.throwExpression(
        this._value$_exception$2(
          this.toString$0(0) + ' is not a string.',
          $name
        )
      );
    },
    assertSelector$2$allowParent$name(allowParent, $name) {
      var error,
        t1,
        exception,
        string = this._selectorString$1($name);
      try {
        t1 = D.SelectorList_SelectorList$parse(string, allowParent, true, null);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException) {
          error = t1;
          throw H.wrapException(
            this._value$_exception$2(
              C.JSString_methods.replaceFirst$2(
                J.toString$0$(error),
                'Error: ',
                ''
              ),
              $name
            )
          );
        } else throw exception;
      }
    },
    assertSelector$1$name($name) {
      return this.assertSelector$2$allowParent$name(false, $name);
    },
    assertSelector$0() {
      return this.assertSelector$2$allowParent$name(false, null);
    },
    assertSelector$1$allowParent(allowParent) {
      return this.assertSelector$2$allowParent$name(allowParent, null);
    },
    assertCompoundSelector$1$name($name) {
      var error,
        t1,
        exception,
        allowParent = false,
        string = this._selectorString$1($name);
      try {
        t1 = T.SelectorParser$(
          string,
          allowParent,
          true,
          null,
          null
        ).parseCompoundSelector$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException) {
          error = t1;
          throw H.wrapException(
            this._value$_exception$2(
              C.JSString_methods.replaceFirst$2(
                J.toString$0$(error),
                'Error: ',
                ''
              ),
              $name
            )
          );
        } else throw exception;
      }
    },
    _selectorString$1($name) {
      var string = this._selectorStringOrNull$0();
      if (string != null) return string;
      throw H.wrapException(
        this._value$_exception$2(this.toString$0(0) + string$.x20is_no, $name)
      );
    },
    _selectorStringOrNull$0() {
      var t1,
        t2,
        result,
        t3,
        _i,
        complex,
        string,
        compound,
        _this = this,
        _null = null;
      if (_this instanceof D.SassString) return _this.text;
      if (!(_this instanceof D.SassList)) return _null;
      t1 = _this._list$_contents;
      t2 = t1.length;
      if (t2 === 0) return _null;
      result = H._setArrayType([], type$.JSArray_String);
      t3 = _this.separator;
      switch (t3) {
        case C.ListSeparator_kWM:
          for (_i = 0; _i < t2; ++_i) {
            complex = t1[_i];
            if (complex instanceof D.SassString) result.push(complex.text);
            else if (
              complex instanceof D.SassList &&
              complex.separator === C.ListSeparator_woc
            ) {
              string = complex._selectorStringOrNull$0();
              if (string == null) return _null;
              result.push(string);
            } else return _null;
          }
          break;
        case C.ListSeparator_1gm:
          return _null;
        default:
          for (_i = 0; _i < t2; ++_i) {
            compound = t1[_i];
            if (compound instanceof D.SassString) result.push(compound.text);
            else return _null;
          }
          break;
      }
      return C.JSArray_methods.join$1(
        result,
        t3 === C.ListSeparator_kWM ? ', ' : ' '
      );
    },
    withListContents$2$separator(contents, separator) {
      var t1 = separator == null ? this.get$separator() : separator,
        t2 = this.get$hasBrackets();
      return D.SassList$(contents, t1, t2);
    },
    withListContents$1(contents) {
      return this.withListContents$2$separator(contents, null);
    },
    greaterThan$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' > ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    greaterThanOrEquals$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' >= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThan$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' < ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThanOrEquals$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' <= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    times$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' * ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    modulo$1(other) {
      return H.throwExpression(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' % ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    plus$1(other) {
      if (other instanceof D.SassString)
        return new D.SassString(
          N.serializeValue0(this, false, true) + other.text,
          other.hasQuotes
        );
      else
        return new D.SassString(
          N.serializeValue0(this, false, true) +
            N.serializeValue0(other, false, true),
          false
        );
    },
    minus$1(other) {
      return new D.SassString(
        N.serializeValue0(this, false, true) +
          '-' +
          N.serializeValue0(other, false, true),
        false
      );
    },
    dividedBy$1(other) {
      return new D.SassString(
        N.serializeValue0(this, false, true) +
          '/' +
          N.serializeValue0(other, false, true),
        false
      );
    },
    unaryPlus$0() {
      return new D.SassString(
        '+' + N.serializeValue0(this, false, true),
        false
      );
    },
    unaryMinus$0() {
      return new D.SassString(
        '-' + N.serializeValue0(this, false, true),
        false
      );
    },
    unaryNot$0() {
      return C.SassBoolean_false0;
    },
    withoutSlash$0() {
      return this;
    },
    toString$0(_) {
      return N.serializeValue0(this, true, true);
    },
    _value$_exception$2(message, $name) {
      return new E.SassScriptException(
        $name == null ? message : '$' + $name + ': ' + message
      );
    },
  };
  D.SassArgumentList.prototype = {};
  Z.SassBoolean.prototype = {
    get$isTruthy() {
      return this.value;
    },
    accept$1$1(visitor) {
      return visitor._serialize$_buffer.write$1(0, String(this.value));
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unaryNot$0() {
      return this.value ? C.SassBoolean_false0 : C.SassBoolean_true0;
    },
  };
  K.SassColor.prototype = {
    get$red() {
      if (this._red == null) this._hslToRgb$0();
      var t1 = this._red;
      t1.toString;
      return t1;
    },
    get$green() {
      if (this._green == null) this._hslToRgb$0();
      var t1 = this._green;
      t1.toString;
      return t1;
    },
    get$blue() {
      if (this._blue == null) this._hslToRgb$0();
      var t1 = this._blue;
      t1.toString;
      return t1;
    },
    get$hue() {
      if (this._hue == null) this._rgbToHsl$0();
      var t1 = this._hue;
      t1.toString;
      return t1;
    },
    get$saturation() {
      if (this._saturation == null) this._rgbToHsl$0();
      var t1 = this._saturation;
      t1.toString;
      return t1;
    },
    get$lightness() {
      if (this._lightness == null) this._rgbToHsl$0();
      var t1 = this._lightness;
      t1.toString;
      return t1;
    },
    get$whiteness() {
      return (
        (Math.min(Math.min(this.get$red(), this.get$green()), this.get$blue()) /
          255) *
        100
      );
    },
    get$blackness() {
      return (
        100 -
        (Math.max(Math.max(this.get$red(), this.get$green()), this.get$blue()) /
          255) *
          100
      );
    },
    accept$1$1(visitor) {
      return visitor.visitColor$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertColor$1($name) {
      return this;
    },
    changeRgb$4$alpha$blue$green$red(alpha, blue, green, red) {
      return K.SassColor$rgb(
        red,
        green,
        blue,
        alpha == null ? this.alpha : alpha,
        null
      );
    },
    changeRgb$3$blue$green$red(blue, green, red) {
      return this.changeRgb$4$alpha$blue$green$red(null, blue, green, red);
    },
    changeHsl$4$alpha$hue$lightness$saturation(
      alpha,
      hue,
      lightness,
      saturation
    ) {
      var _this = this,
        t1 = hue == null ? _this.get$hue() : hue,
        t2 = saturation == null ? _this.get$saturation() : saturation,
        t3 = lightness == null ? _this.get$lightness() : lightness;
      return K.SassColor$hsl(t1, t2, t3, alpha == null ? _this.alpha : alpha);
    },
    changeHsl$1$saturation(saturation) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        null,
        null,
        saturation
      );
    },
    changeHsl$1$lightness(lightness) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        null,
        lightness,
        null
      );
    },
    changeHsl$1$hue(hue) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        hue,
        null,
        null
      );
    },
    changeAlpha$1(alpha) {
      var _this = this;
      return new K.SassColor(
        _this._red,
        _this._green,
        _this._blue,
        _this._hue,
        _this._saturation,
        _this._lightness,
        T.fuzzyAssertRange(alpha, 0, 1, 'alpha'),
        null
      );
    },
    plus$1(other) {
      if (!(other instanceof T.SassNumber) && !(other instanceof K.SassColor))
        return this.super$Value$plus(other);
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' + ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    minus$1(other) {
      if (!(other instanceof T.SassNumber) && !(other instanceof K.SassColor))
        return this.super$Value$minus(other);
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' - ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    dividedBy$1(other) {
      if (!(other instanceof T.SassNumber) && !(other instanceof K.SassColor))
        return this.super$Value$dividedBy(other);
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' / ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof K.SassColor &&
        other.get$red() === _this.get$red() &&
        other.get$green() === _this.get$green() &&
        other.get$blue() === _this.get$blue() &&
        other.alpha === _this.alpha
      );
    },
    get$hashCode(_) {
      var _this = this;
      return (
        C.JSInt_methods.get$hashCode(_this.get$red()) ^
        C.JSInt_methods.get$hashCode(_this.get$green()) ^
        C.JSInt_methods.get$hashCode(_this.get$blue()) ^
        C.JSNumber_methods.get$hashCode(_this.alpha)
      );
    },
    _rgbToHsl$0() {
      var t2,
        lightness,
        _this = this,
        scaledRed = _this.get$red() / 255,
        scaledGreen = _this.get$green() / 255,
        scaledBlue = _this.get$blue() / 255,
        max = Math.max(Math.max(scaledRed, scaledGreen), scaledBlue),
        min = Math.min(Math.min(scaledRed, scaledGreen), scaledBlue),
        delta = max - min,
        t1 = max === min;
      if (t1) _this._hue = 0;
      else if (max === scaledRed)
        _this._hue = C.JSNumber_methods.$mod(
          (60 * (scaledGreen - scaledBlue)) / delta,
          360
        );
      else if (max === scaledGreen)
        _this._hue = C.JSNumber_methods.$mod(
          120 + (60 * (scaledBlue - scaledRed)) / delta,
          360
        );
      else if (max === scaledBlue)
        _this._hue = C.JSNumber_methods.$mod(
          240 + (60 * (scaledRed - scaledGreen)) / delta,
          360
        );
      t2 = max + min;
      lightness = 50 * t2;
      _this._lightness = lightness;
      if (t1) _this._saturation = 0;
      else {
        t1 = 100 * delta;
        if (lightness < 50) _this._saturation = t1 / t2;
        else _this._saturation = t1 / (2 - max - min);
      }
    },
    _hslToRgb$0() {
      var _this = this,
        scaledHue = _this.get$hue() / 360,
        scaledSaturation = _this.get$saturation() / 100,
        scaledLightness = _this.get$lightness() / 100,
        m2 =
          scaledLightness <= 0.5
            ? scaledLightness * (scaledSaturation + 1)
            : scaledLightness +
              scaledSaturation -
              scaledLightness * scaledSaturation,
        m1 = scaledLightness * 2 - m2;
      _this._red = T.fuzzyRound(
        K.SassColor__hueToRgb(m1, m2, scaledHue + 0.3333333333333333) * 255
      );
      _this._green = T.fuzzyRound(
        K.SassColor__hueToRgb(m1, m2, scaledHue) * 255
      );
      _this._blue = T.fuzzyRound(
        K.SassColor__hueToRgb(m1, m2, scaledHue - 0.3333333333333333) * 255
      );
    },
  };
  K.SassColor_SassColor$hwb_toRgb.prototype = {
    call$1(hue) {
      return T.fuzzyRound(
        (K.SassColor__hueToRgb(0, 1, hue) * this.factor +
          this._box_0.scaledWhiteness) *
          255
      );
    },
    $signature: 34,
  };
  F.SassFunction.prototype = {
    accept$1$1(visitor) {
      var t1, t2;
      if (!visitor._serialize$_inspect)
        H.throwExpression(
          E.SassScriptException$(
            this.toString$0(0) + " isn't a valid CSS value."
          )
        );
      t1 = visitor._serialize$_buffer;
      t1.write$1(0, 'get-function(');
      t2 = this.callable;
      visitor._visitQuotedString$1(t2.get$name(t2));
      t1.writeCharCode$1(41);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertFunction$1($name) {
      return this;
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof F.SassFunction && this.callable.$eq(0, other.callable)
      );
    },
    get$hashCode(_) {
      var t1 = this.callable;
      return t1.get$hashCode(t1);
    },
  };
  D.SassList.prototype = {
    get$isBlank() {
      return C.JSArray_methods.every$1(
        this._list$_contents,
        new D.SassList_isBlank_closure()
      );
    },
    get$asList() {
      return this._list$_contents;
    },
    get$lengthAsList() {
      return this._list$_contents.length;
    },
    SassList$3$brackets(contents, separator, brackets) {
      if (
        this.separator === C.ListSeparator_undecided_null &&
        this._list$_contents.length > 1
      )
        throw H.wrapException(P.ArgumentError$(string$.A_list, null));
    },
    accept$1$1(visitor) {
      return visitor.visitList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this._list$_contents.length === 0
        ? C.SassMap_Map_empty
        : this.super$Value$assertMap($name);
    },
    tryMap$0() {
      return this._list$_contents.length === 0 ? C.SassMap_Map_empty : null;
    },
    $eq(_, other) {
      var t1,
        _this = this;
      if (other == null) return false;
      if (
        !(
          other instanceof D.SassList &&
          other.separator === _this.separator &&
          other.hasBrackets === _this.hasBrackets &&
          C.C_ListEquality.equals$2(
            0,
            other._list$_contents,
            _this._list$_contents
          )
        )
      )
        t1 =
          _this._list$_contents.length === 0 &&
          other instanceof A.SassMap &&
          other.get$asList().length === 0;
      else t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this._list$_contents);
    },
    get$separator() {
      return this.separator;
    },
    get$hasBrackets() {
      return this.hasBrackets;
    },
  };
  D.SassList_isBlank_closure.prototype = {
    call$1(element) {
      return element.get$isBlank();
    },
    $signature: 54,
  };
  D.ListSeparator.prototype = {
    toString$0(_) {
      return this._list$_name;
    },
  };
  A.SassMap.prototype = {
    get$separator() {
      var t1 = this.contents;
      return t1.get$isEmpty(t1)
        ? C.ListSeparator_undecided_null
        : C.ListSeparator_kWM;
    },
    get$asList() {
      var result = H._setArrayType([], type$.JSArray_Value);
      this.contents.forEach$1(0, new A.SassMap_asList_closure(result));
      return result;
    },
    get$lengthAsList() {
      var t1 = this.contents;
      return t1.get$length(t1);
    },
    accept$1$1(visitor) {
      return visitor.visitMap$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this;
    },
    tryMap$0() {
      return this;
    },
    $eq(_, other) {
      var t1;
      if (other == null) return false;
      if (
        !(
          other instanceof A.SassMap &&
          C.C_MapEquality.equals$2(0, other.contents, this.contents)
        )
      ) {
        t1 = this.contents;
        t1 =
          t1.get$isEmpty(t1) &&
          other instanceof D.SassList &&
          other._list$_contents.length === 0;
      } else t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.contents;
      return t1.get$isEmpty(t1)
        ? C.C_ListEquality0.hash$1(C.List_empty5)
        : C.C_MapEquality.hash$1(t1);
    },
  };
  A.SassMap_asList_closure.prototype = {
    call$2(key, value) {
      this.result.push(
        D.SassList$(
          H._setArrayType([key, value], type$.JSArray_Value),
          C.ListSeparator_woc,
          false
        )
      );
    },
    $signature: 44,
  };
  O._SassNull.prototype = {
    get$isTruthy() {
      return false;
    },
    get$isBlank() {
      return true;
    },
    get$realNull() {
      return null;
    },
    accept$1$1(visitor) {
      if (visitor._serialize$_inspect)
        visitor._serialize$_buffer.write$1(0, 'null');
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unaryNot$0() {
      return C.SassBoolean_true0;
    },
  };
  T.SassNumber.prototype = {
    get$unitString() {
      var _this = this;
      return _this.get$hasUnits()
        ? _this._unitString$2(
            _this.get$numeratorUnits(),
            _this.get$denominatorUnits()
          )
        : '';
    },
    accept$1$1(visitor) {
      return visitor.visitNumber$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    withoutSlash$0() {
      var _this = this;
      return _this.asSlash == null ? _this : _this.withValue$1(_this.value);
    },
    assertNumber$1($name) {
      return this;
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertInt$1($name) {
      var t1 = this.value,
        integer = T.fuzzyIsInt(t1) ? C.JSNumber_methods.round$0(t1) : null;
      if (integer != null) return integer;
      throw H.wrapException(
        this._number$_exception$2(this.toString$0(0) + ' is not an int.', $name)
      );
    },
    assertInt$0() {
      return this.assertInt$1(null);
    },
    valueInRange$3(min, max, $name) {
      var _this = this,
        result = T.fuzzyCheckRange(_this.value, min, max);
      if (result != null) return result;
      throw H.wrapException(
        _this._number$_exception$2(
          'Expected ' +
            _this.toString$0(0) +
            ' to be within ' +
            min +
            _this.get$unitString() +
            ' and ' +
            max +
            _this.get$unitString() +
            '.',
          $name
        )
      );
    },
    assertUnit$2(unit, $name) {
      if (this.hasUnit$1(unit)) return;
      throw H.wrapException(
        this._number$_exception$2(
          'Expected ' + this.toString$0(0) + ' to have unit "' + unit + '".',
          $name
        )
      );
    },
    assertNoUnits$1($name) {
      if (!this.get$hasUnits()) return;
      throw H.wrapException(
        this._number$_exception$2(
          'Expected ' + this.toString$0(0) + ' to have no units.',
          $name
        )
      );
    },
    coerceValueToMatch$1(other) {
      return this._coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        other.get$numeratorUnits(),
        other.get$denominatorUnits(),
        true,
        null,
        other,
        null
      );
    },
    convertValueToMatch$3(other, $name, otherName) {
      return this._coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        other.get$numeratorUnits(),
        other.get$denominatorUnits(),
        false,
        $name,
        other,
        otherName
      );
    },
    coerce$3(newNumerators, newDenominators, $name) {
      return T.SassNumber_SassNumber$withUnits(
        this.coerceValue$3(newNumerators, newDenominators, $name),
        newDenominators,
        newNumerators
      );
    },
    coerce$2(newNumerators, newDenominators) {
      return this.coerce$3(newNumerators, newDenominators, null);
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this._coerceOrConvertValue$4$coerceUnitless$name(
        newNumerators,
        newDenominators,
        true,
        $name
      );
    },
    coerceValueToUnit$2(unit, $name) {
      var t1 = type$.JSArray_String;
      return this.coerceValue$3(
        H._setArrayType([unit], t1),
        H._setArrayType([], t1),
        $name
      );
    },
    _coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
      newNumerators,
      newDenominators,
      coerceUnitless,
      $name,
      other,
      otherName
    ) {
      var t1,
        otherHasUnits,
        t2,
        _compatibilityException,
        oldNumerators,
        oldDenominators,
        _i,
        _this = this,
        _box_0 = {};
      if (
        C.C_ListEquality.equals$2(
          0,
          _this.get$numeratorUnits(),
          newNumerators
        ) &&
        C.C_ListEquality.equals$2(
          0,
          _this.get$denominatorUnits(),
          newDenominators
        )
      )
        return _this.value;
      t1 = J.getInterceptor$asx(newNumerators);
      otherHasUnits =
        t1.get$isNotEmpty(newNumerators) || newDenominators.length !== 0;
      if (coerceUnitless) t2 = !_this.get$hasUnits() || !otherHasUnits;
      else t2 = false;
      if (t2) return _this.value;
      _compatibilityException = new T.SassNumber__coerceOrConvertValue__compatibilityException(
        _this,
        other,
        otherName,
        otherHasUnits,
        $name,
        newNumerators,
        newDenominators
      );
      _box_0.value = _this.value;
      oldNumerators = J.toList$0$ax(_this.get$numeratorUnits());
      for (t1 = t1.get$iterator(newNumerators); t1.moveNext$0(); )
        B.removeFirstWhere(
          oldNumerators,
          new T.SassNumber__coerceOrConvertValue_closure(
            _box_0,
            _this,
            t1.get$current()
          ),
          new T.SassNumber__coerceOrConvertValue_closure0(
            _compatibilityException
          )
        );
      t1 = _this.get$denominatorUnits();
      oldDenominators = H._setArrayType(t1.slice(0), H._arrayInstanceType(t1));
      for (
        t1 = newDenominators.length, _i = 0;
        _i < newDenominators.length;
        newDenominators.length === t1 ||
          (0, H.throwConcurrentModificationError)(newDenominators),
          ++_i
      )
        B.removeFirstWhere(
          oldDenominators,
          new T.SassNumber__coerceOrConvertValue_closure1(
            _box_0,
            _this,
            newDenominators[_i]
          ),
          new T.SassNumber__coerceOrConvertValue_closure2(
            _compatibilityException
          )
        );
      if (oldNumerators.length !== 0 || oldDenominators.length !== 0)
        throw H.wrapException(_compatibilityException.call$0());
      return _box_0.value;
    },
    _coerceOrConvertValue$4$coerceUnitless$name(
      newNumerators,
      newDenominators,
      coerceUnitless,
      $name
    ) {
      return this._coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        newNumerators,
        newDenominators,
        coerceUnitless,
        $name,
        null,
        null
      );
    },
    isComparableTo$1(other) {
      var exception;
      if (!this.get$hasUnits() || !other.get$hasUnits()) return true;
      try {
        this.greaterThan$1(other);
        return true;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassScriptException)
          return false;
        else throw exception;
      }
    },
    greaterThan$1(other) {
      if (other instanceof T.SassNumber)
        return this._coerceUnits$2(other, T.number0__fuzzyGreaterThan$closure())
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' > ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    greaterThanOrEquals$1(other) {
      if (other instanceof T.SassNumber)
        return this._coerceUnits$2(
          other,
          T.number0__fuzzyGreaterThanOrEquals$closure()
        )
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' >= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThan$1(other) {
      if (other instanceof T.SassNumber)
        return this._coerceUnits$2(other, T.number0__fuzzyLessThan$closure())
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' < ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThanOrEquals$1(other) {
      if (other instanceof T.SassNumber)
        return this._coerceUnits$2(
          other,
          T.number0__fuzzyLessThanOrEquals$closure()
        )
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            this.toString$0(0) +
            ' <= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    modulo$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber)
        return _this.withValue$1(
          _this._coerceUnits$2(other, _this.get$moduloLikeSass())
        );
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' % ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    moduloLikeSass$2(num1, num2) {
      var result;
      if (num2 > 0) return C.JSNumber_methods.$mod(num1, num2);
      if (num2 === 0) return 0 / 0;
      result = C.JSNumber_methods.$mod(num1, num2);
      return result === 0 ? 0 : result + num2;
    },
    plus$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber)
        return _this.withValue$1(
          _this._coerceUnits$2(other, new T.SassNumber_plus_closure())
        );
      if (!(other instanceof K.SassColor)) return _this.super$Value$plus(other);
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' + ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    minus$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber)
        return _this.withValue$1(
          _this._coerceUnits$2(other, new T.SassNumber_minus_closure())
        );
      if (!(other instanceof K.SassColor))
        return _this.super$Value$minus(other);
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' - ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    times$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber) {
        if (!other.get$hasUnits())
          return _this.withValue$1(_this.value * other.value);
        return _this.multiplyUnits$3(
          _this.value * other.value,
          other.get$numeratorUnits(),
          other.get$denominatorUnits()
        );
      }
      throw H.wrapException(
        E.SassScriptException$(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' * ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    dividedBy$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber) {
        if (!other.get$hasUnits())
          return _this.withValue$1(_this.value / other.value);
        return _this.multiplyUnits$3(
          _this.value / other.value,
          other.get$denominatorUnits(),
          other.get$numeratorUnits()
        );
      }
      return _this.super$Value$dividedBy(other);
    },
    unaryPlus$0() {
      return this;
    },
    _coerceUnits$1$2(other, operation) {
      var t1, exception;
      try {
        t1 = operation.call$2(this.value, other.coerceValueToMatch$1(this));
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassScriptException) {
          this.coerceValueToMatch$1(other);
          throw exception;
        } else throw exception;
      }
    },
    _coerceUnits$2(other, operation) {
      return this._coerceUnits$1$2(other, operation, type$.dynamic);
    },
    multiplyUnits$3(value, otherNumerators, otherDenominators) {
      var newNumerators,
        mutableOtherDenominators,
        t1,
        t2,
        mutableDenominatorUnits,
        _this = this,
        _box_0 = {};
      _box_0.value = value;
      if (J.get$isEmpty$asx(_this.get$numeratorUnits())) {
        if (
          J.get$isEmpty$asx(otherDenominators) &&
          !_this._areAnyConvertible$2(
            _this.get$denominatorUnits(),
            otherNumerators
          )
        )
          return T.SassNumber_SassNumber$withUnits(
            value,
            _this.get$denominatorUnits(),
            otherNumerators
          );
        else if (_this.get$denominatorUnits().length === 0)
          return T.SassNumber_SassNumber$withUnits(
            value,
            otherDenominators,
            otherNumerators
          );
      } else if (J.get$isEmpty$asx(otherNumerators))
        if (J.get$isEmpty$asx(otherDenominators))
          return T.SassNumber_SassNumber$withUnits(
            value,
            otherDenominators,
            _this.get$numeratorUnits()
          );
        else if (
          _this.get$denominatorUnits().length === 0 &&
          !_this._areAnyConvertible$2(
            _this.get$numeratorUnits(),
            otherDenominators
          )
        )
          return T.SassNumber_SassNumber$withUnits(
            value,
            otherDenominators,
            _this.get$numeratorUnits()
          );
      newNumerators = H._setArrayType([], type$.JSArray_String);
      mutableOtherDenominators = J.toList$0$ax(otherDenominators);
      for (
        t1 = J.get$iterator$ax(_this.get$numeratorUnits());
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        B.removeFirstWhere(
          mutableOtherDenominators,
          new T.SassNumber_multiplyUnits_closure(_box_0, _this, t2),
          new T.SassNumber_multiplyUnits_closure0(newNumerators, t2)
        );
      }
      t1 = _this.get$denominatorUnits();
      mutableDenominatorUnits = H._setArrayType(
        t1.slice(0),
        H._arrayInstanceType(t1)
      );
      for (t1 = J.get$iterator$ax(otherNumerators); t1.moveNext$0(); ) {
        t2 = t1.get$current();
        B.removeFirstWhere(
          mutableDenominatorUnits,
          new T.SassNumber_multiplyUnits_closure1(_box_0, _this, t2),
          new T.SassNumber_multiplyUnits_closure2(newNumerators, t2)
        );
      }
      t1 = _box_0.value;
      C.JSArray_methods.addAll$1(
        mutableDenominatorUnits,
        mutableOtherDenominators
      );
      return T.SassNumber_SassNumber$withUnits(
        t1,
        mutableDenominatorUnits,
        newNumerators
      );
    },
    _areAnyConvertible$2(units1, units2) {
      return J.any$1$ax(
        units1,
        new T.SassNumber__areAnyConvertible_closure(units2)
      );
    },
    conversionFactor$2(unit1, unit2) {
      var innerMap;
      if (unit1 === unit2) return 1;
      innerMap = C.Map_K2BWj.$index(0, unit1);
      if (innerMap == null) return null;
      return innerMap.$index(0, unit2);
    },
    _unitString$2(numerators, denominators) {
      var t1 = J.getInterceptor$asx(numerators);
      if (t1.get$isEmpty(numerators)) {
        t1 = denominators.length;
        if (t1 === 0) return 'no units';
        if (t1 === 1)
          return J.$add$ansx(C.JSArray_methods.get$single(denominators), '^-1');
        return '(' + C.JSArray_methods.join$1(denominators, '*') + ')^-1';
      }
      if (denominators.length === 0) return t1.join$1(numerators, '*');
      return (
        t1.join$1(numerators, '*') +
        '/' +
        C.JSArray_methods.join$1(denominators, '*')
      );
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      if (other instanceof T.SassNumber) {
        if (
          J.get$length$asx(_this.get$numeratorUnits()) !==
            J.get$length$asx(other.get$numeratorUnits()) ||
          _this.get$denominatorUnits().length !==
            other.get$denominatorUnits().length
        )
          return false;
        if (!_this.get$hasUnits())
          return Math.abs(_this.value - other.value) < $.$get$epsilon();
        if (
          !C.C_ListEquality.equals$2(
            0,
            _this._canonicalizeUnitList$1(_this.get$numeratorUnits()),
            _this._canonicalizeUnitList$1(other.get$numeratorUnits())
          ) ||
          !C.C_ListEquality.equals$2(
            0,
            _this._canonicalizeUnitList$1(_this.get$denominatorUnits()),
            _this._canonicalizeUnitList$1(other.get$denominatorUnits())
          )
        )
          return false;
        return (
          Math.abs(
            (_this.value *
              _this._canonicalMultiplier$1(_this.get$numeratorUnits())) /
              _this._canonicalMultiplier$1(_this.get$denominatorUnits()) -
              (other.value *
                _this._canonicalMultiplier$1(other.get$numeratorUnits())) /
                _this._canonicalMultiplier$1(other.get$denominatorUnits())
          ) < $.$get$epsilon()
        );
      } else return false;
    },
    get$hashCode(_) {
      var _this = this;
      return T.fuzzyHashCode(
        (_this.value *
          _this._canonicalMultiplier$1(_this.get$numeratorUnits())) /
          _this._canonicalMultiplier$1(_this.get$denominatorUnits())
      );
    },
    _canonicalizeUnitList$1(units) {
      var type,
        t1 = J.getInterceptor$asx(units);
      if (t1.get$isEmpty(units)) return units;
      if (t1.get$length(units) === 1) {
        type = $.$get$_typesByUnit().$index(0, t1.get$first(units));
        if (type == null) t1 = units;
        else {
          t1 = C.Map_U8AHF.$index(0, type);
          t1.toString;
          t1 = H._setArrayType(
            [C.JSArray_methods.get$first(t1)],
            type$.JSArray_String
          );
        }
        return t1;
      }
      t1 = t1.map$1$1(
        units,
        new T.SassNumber__canonicalizeUnitList_closure(),
        type$.String
      );
      t1 = P.List_List$of(t1, true, t1.$ti._eval$1('ListIterable.E'));
      C.JSArray_methods.sort$0(t1);
      return t1;
    },
    _canonicalMultiplier$1(units) {
      return J.fold$2$ax(
        units,
        1,
        new T.SassNumber__canonicalMultiplier_closure(this)
      );
    },
    canonicalMultiplierForUnit$1(unit) {
      var t1,
        innerMap = C.Map_K2BWj.$index(0, unit);
      if (innerMap == null) t1 = 1;
      else {
        t1 = innerMap.get$values(innerMap);
        t1 = 1 / t1.get$first(t1);
      }
      return t1;
    },
    _number$_exception$2(message, $name) {
      return new E.SassScriptException(
        $name == null ? message : '$' + $name + ': ' + message
      );
    },
  };
  T.SassNumber__coerceOrConvertValue__compatibilityException.prototype = {
    call$0() {
      var t2,
        t3,
        message,
        t4,
        type,
        unit,
        _this = this,
        t1 = _this.other;
      if (t1 != null) {
        t2 = _this.$this;
        t3 = t2.toString$0(0) + ' and';
        message = new P.StringBuffer(t3);
        t4 = _this.otherName;
        if (t4 != null) t3 = message._contents = t3 + (' $' + t4 + ':');
        t1 = t3 + (' ' + t1.toString$0(0) + ' have incompatible units');
        message._contents = t1;
        if (!t2.get$hasUnits() || !_this.otherHasUnits)
          message._contents = t1 + " (one has units and the other doesn't)";
        t1 = message.toString$0(0) + '.';
        t2 = _this.name;
        return new E.SassScriptException(
          t2 == null ? t1 : '$' + t2 + ': ' + t1
        );
      } else if (!_this.otherHasUnits) {
        t1 = 'Expected ' + _this.$this.toString$0(0) + ' to have no units.';
        t2 = _this.name;
        return new E.SassScriptException(
          t2 == null ? t1 : '$' + t2 + ': ' + t1
        );
      } else {
        t1 = _this.newNumerators;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) === 1 && _this.newDenominators.length === 0) {
          type = $.$get$_typesByUnit().$index(0, t2.get$first(t1));
          if (type != null) {
            t1 = 'Expected ' + _this.$this.toString$0(0) + ' to have ';
            t1 =
              t1 +
              (C.JSArray_methods.contains$1(
                H._setArrayType([97, 101, 105, 111, 117], type$.JSArray_int),
                C.JSString_methods._codeUnitAt$1(type, 0)
              )
                ? 'an ' + type
                : 'a ' + type) +
              ' unit (';
            t2 = C.Map_U8AHF.$index(0, type);
            t2.toString;
            t2 = t1 + C.JSArray_methods.join$1(t2, ', ') + ').';
            t1 = _this.name;
            return new E.SassScriptException(
              t1 == null ? t2 : '$' + t1 + ': ' + t2
            );
          }
        }
        t3 = _this.newDenominators;
        unit = B.pluralize('unit', t2.get$length(t1) + t3.length, null);
        t2 = _this.$this;
        t3 =
          'Expected ' +
          t2.toString$0(0) +
          ' to have ' +
          unit +
          ' ' +
          t2._unitString$2(t1, t3) +
          '.';
        t1 = _this.name;
        return new E.SassScriptException(
          t1 == null ? t3 : '$' + t1 + ': ' + t3
        );
      }
    },
    $signature: 211,
  };
  T.SassNumber__coerceOrConvertValue_closure.prototype = {
    call$1(oldNumerator) {
      var factor = this.$this.conversionFactor$2(
        this.newNumerator,
        oldNumerator
      );
      if (factor == null) return false;
      this._box_0.value *= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber__coerceOrConvertValue_closure0.prototype = {
    call$0() {
      return H.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0,
  };
  T.SassNumber__coerceOrConvertValue_closure1.prototype = {
    call$1(oldDenominator) {
      var factor = this.$this.conversionFactor$2(
        this.newDenominator,
        oldDenominator
      );
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber__coerceOrConvertValue_closure2.prototype = {
    call$0() {
      return H.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0,
  };
  T.SassNumber_plus_closure.prototype = {
    call$2(num1, num2) {
      return num1 + num2;
    },
    $signature: 43,
  };
  T.SassNumber_minus_closure.prototype = {
    call$2(num1, num2) {
      return num1 - num2;
    },
    $signature: 43,
  };
  T.SassNumber_multiplyUnits_closure.prototype = {
    call$1(denominator) {
      var factor = this.$this.conversionFactor$2(this.numerator, denominator);
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber_multiplyUnits_closure0.prototype = {
    call$0() {
      return this.newNumerators.push(this.numerator);
    },
    $signature: 0,
  };
  T.SassNumber_multiplyUnits_closure1.prototype = {
    call$1(denominator) {
      var factor = this.$this.conversionFactor$2(this.numerator, denominator);
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber_multiplyUnits_closure2.prototype = {
    call$0() {
      return this.newNumerators.push(this.numerator);
    },
    $signature: 0,
  };
  T.SassNumber__areAnyConvertible_closure.prototype = {
    call$1(unit1) {
      var innerMap = C.Map_K2BWj.$index(0, unit1);
      if (innerMap == null) return J.contains$1$asx(this.units2, unit1);
      return J.any$1$ax(this.units2, innerMap.get$containsKey());
    },
    $signature: 6,
  };
  T.SassNumber__canonicalizeUnitList_closure.prototype = {
    call$1(unit) {
      var t1,
        type = $.$get$_typesByUnit().$index(0, unit);
      if (type == null) t1 = unit;
      else {
        t1 = C.Map_U8AHF.$index(0, type);
        t1.toString;
        t1 = C.JSArray_methods.get$first(t1);
      }
      return t1;
    },
    $signature: 5,
  };
  T.SassNumber__canonicalMultiplier_closure.prototype = {
    call$2(multiplier, unit) {
      return multiplier * this.$this.canonicalMultiplierForUnit$1(unit);
    },
    $signature: 203,
  };
  S.ComplexSassNumber.prototype = {
    get$hasUnits() {
      return true;
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return false;
    },
    withValue$1(value) {
      return new S.ComplexSassNumber(
        this.numeratorUnits,
        this.denominatorUnits,
        value,
        null
      );
    },
    withSlash$2(numerator, denominator) {
      return new S.ComplexSassNumber(
        this.numeratorUnits,
        this.denominatorUnits,
        this.value,
        new S.Tuple2(numerator, denominator, type$.Tuple2_SassNumber_SassNumber)
      );
    },
    get$numeratorUnits() {
      return this.numeratorUnits;
    },
    get$denominatorUnits() {
      return this.denominatorUnits;
    },
  };
  L.SingleUnitSassNumber.prototype = {
    get$numeratorUnits() {
      return new P.UnmodifiableListView(
        H._setArrayType([this._unit], type$.JSArray_String),
        type$.UnmodifiableListView_String
      );
    },
    get$denominatorUnits() {
      return C.List_empty;
    },
    get$hasUnits() {
      return true;
    },
    withValue$1(value) {
      return new L.SingleUnitSassNumber(this._unit, value, null);
    },
    withSlash$2(numerator, denominator) {
      return new L.SingleUnitSassNumber(
        this._unit,
        this.value,
        new S.Tuple2(numerator, denominator, type$.Tuple2_SassNumber_SassNumber)
      );
    },
    hasUnit$1(unit) {
      return unit === this._unit;
    },
    compatibleWithUnit$1(unit) {
      return this.conversionFactor$2(this._unit, unit) != null;
    },
    coerceValueToMatch$1(other) {
      return this.convertValueToMatch$3(other, null, null);
    },
    convertValueToMatch$3(other, $name, otherName) {
      var t1 =
        other instanceof L.SingleUnitSassNumber
          ? this._coerceValueToUnit$1(other._unit)
          : null;
      return t1 == null
        ? this.super$SassNumber$convertValueToMatch(other, $name, otherName)
        : t1;
    },
    coerce$2(newNumerators, newDenominators) {
      var t1 = J.getInterceptor$asx(newNumerators);
      t1 =
        t1.get$length(newNumerators) === 1 && newDenominators.length === 0
          ? this._coerceToUnit$1(t1.$index(newNumerators, 0))
          : null;
      return t1 == null
        ? this.super$SassNumber$coerce(newNumerators, newDenominators, null)
        : t1;
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      var t1 = J.getInterceptor$asx(newNumerators);
      t1 =
        t1.get$length(newNumerators) === 1 && newDenominators.length === 0
          ? this._coerceValueToUnit$1(t1.$index(newNumerators, 0))
          : null;
      return t1 == null
        ? this.super$SassNumber$coerceValue(
            newNumerators,
            newDenominators,
            $name
          )
        : t1;
    },
    coerceValueToUnit$2(unit, $name) {
      var t1 = this._coerceValueToUnit$1(unit);
      return t1 == null
        ? this.super$SassNumber$coerceValueToUnit(unit, $name)
        : t1;
    },
    _coerceToUnit$1(unit) {
      var _this = this,
        t1 = _this._unit;
      if (t1 === unit) return _this;
      return X.NullableExtension_andThen(
        _this.conversionFactor$2(unit, t1),
        new L.SingleUnitSassNumber__coerceToUnit_closure(_this, unit)
      );
    },
    _coerceValueToUnit$1(unit) {
      return X.NullableExtension_andThen(
        this.conversionFactor$2(unit, this._unit),
        new L.SingleUnitSassNumber__coerceValueToUnit_closure(this)
      );
    },
    multiplyUnits$3(value, otherNumerators, otherDenominators) {
      var mutableOtherDenominators,
        t1 = {};
      t1.value = value;
      t1.newNumerators = otherNumerators;
      mutableOtherDenominators = J.toList$0$ax(otherDenominators);
      B.removeFirstWhere(
        mutableOtherDenominators,
        new L.SingleUnitSassNumber_multiplyUnits_closure(t1, this),
        new L.SingleUnitSassNumber_multiplyUnits_closure0(t1, this)
      );
      return T.SassNumber_SassNumber$withUnits(
        t1.value,
        mutableOtherDenominators,
        t1.newNumerators
      );
    },
    unaryMinus$0() {
      return new L.SingleUnitSassNumber(this._unit, -this.value, null);
    },
    $eq(_, other) {
      var factor;
      if (other == null) return false;
      if (other instanceof L.SingleUnitSassNumber) {
        factor = this.conversionFactor$2(other._unit, this._unit);
        return (
          factor != null &&
          Math.abs(this.value * factor - other.value) < $.$get$epsilon()
        );
      } else return false;
    },
    get$hashCode(_) {
      return T.fuzzyHashCode(
        this.value * this.canonicalMultiplierForUnit$1(this._unit)
      );
    },
  };
  L.SingleUnitSassNumber__coerceToUnit_closure.prototype = {
    call$1(factor) {
      return new L.SingleUnitSassNumber(
        this.unit,
        this.$this.value * factor,
        null
      );
    },
    $signature: 209,
  };
  L.SingleUnitSassNumber__coerceValueToUnit_closure.prototype = {
    call$1(factor) {
      return this.$this.value * factor;
    },
    $signature: 71,
  };
  L.SingleUnitSassNumber_multiplyUnits_closure.prototype = {
    call$1(denominator) {
      var t1 = this.$this,
        factor = t1.conversionFactor$2(denominator, t1._unit);
      if (factor == null) return false;
      this._box_0.value *= factor;
      return true;
    },
    $signature: 6,
  };
  L.SingleUnitSassNumber_multiplyUnits_closure0.prototype = {
    call$0() {
      var t1 = H._setArrayType([this.$this._unit], type$.JSArray_String),
        t2 = this._box_0;
      C.JSArray_methods.addAll$1(t1, t2.newNumerators);
      t2.newNumerators = t1;
    },
    $signature: 0,
  };
  N.UnitlessSassNumber.prototype = {
    get$numeratorUnits() {
      return C.List_empty;
    },
    get$denominatorUnits() {
      return C.List_empty;
    },
    get$hasUnits() {
      return false;
    },
    withValue$1(value) {
      return new N.UnitlessSassNumber(value, null);
    },
    withSlash$2(numerator, denominator) {
      return new N.UnitlessSassNumber(
        this.value,
        new S.Tuple2(numerator, denominator, type$.Tuple2_SassNumber_SassNumber)
      );
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return true;
    },
    coerceValueToMatch$1(other) {
      return this.value;
    },
    convertValueToMatch$3(other, $name, otherName) {
      return other.get$hasUnits()
        ? this.super$SassNumber$convertValueToMatch(other, $name, otherName)
        : this.value;
    },
    coerce$2(newNumerators, newDenominators) {
      return T.SassNumber_SassNumber$withUnits(
        this.value,
        newDenominators,
        newNumerators
      );
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this.value;
    },
    coerceValueToUnit$2(unit, $name) {
      return this.value;
    },
    greaterThan$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber) {
        t1 = this.value;
        t2 = other.value;
        return t1 > t2 && !(Math.abs(t1 - t2) < $.$get$epsilon())
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      }
      return this.super$SassNumber$greaterThan(other);
    },
    greaterThanOrEquals$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber) {
        t1 = this.value;
        t2 = other.value;
        return t1 > t2 || Math.abs(t1 - t2) < $.$get$epsilon()
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      }
      return this.super$SassNumber$greaterThanOrEquals(other);
    },
    lessThan$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber) {
        t1 = this.value;
        t2 = other.value;
        return t1 < t2 && !(Math.abs(t1 - t2) < $.$get$epsilon())
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      }
      return this.super$SassNumber$lessThan(other);
    },
    lessThanOrEquals$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber) {
        t1 = this.value;
        t2 = other.value;
        return t1 < t2 || Math.abs(t1 - t2) < $.$get$epsilon()
          ? C.SassBoolean_true0
          : C.SassBoolean_false0;
      }
      return this.super$SassNumber$lessThanOrEquals(other);
    },
    modulo$1(other) {
      if (other instanceof T.SassNumber)
        return other.withValue$1(
          this.moduloLikeSass$2(this.value, other.value)
        );
      return this.super$SassNumber$modulo(other);
    },
    plus$1(other) {
      if (other instanceof T.SassNumber)
        return other.withValue$1(this.value + other.value);
      return this.super$SassNumber$plus(other);
    },
    minus$1(other) {
      if (other instanceof T.SassNumber)
        return other.withValue$1(this.value - other.value);
      return this.super$SassNumber$minus(other);
    },
    times$1(other) {
      if (other instanceof T.SassNumber)
        return other.withValue$1(this.value * other.value);
      return this.super$SassNumber$times(other);
    },
    dividedBy$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber) {
        t1 = this.value / other.value;
        if (other.get$hasUnits()) {
          t2 = other.get$denominatorUnits();
          t2 = T.SassNumber_SassNumber$withUnits(
            t1,
            other.get$numeratorUnits(),
            t2
          );
          t1 = t2;
        } else t1 = new N.UnitlessSassNumber(t1, null);
        return t1;
      }
      return this.super$SassNumber$dividedBy(other);
    },
    unaryMinus$0() {
      return new N.UnitlessSassNumber(-this.value, null);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof N.UnitlessSassNumber &&
        Math.abs(this.value - other.value) < $.$get$epsilon()
      );
    },
    get$hashCode(_) {
      return T.fuzzyHashCode(this.value);
    },
  };
  D.SassString.prototype = {
    get$sassLength() {
      var _this = this,
        t1 = _this.__SassString_sassLength;
      if (t1 == null) {
        t1 = new P.Runes(_this.text);
        t1 = t1.get$length(t1);
        if (_this.__SassString_sassLength == null)
          _this.__SassString_sassLength = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('sassLength'));
      }
      return t1;
    },
    get$isSpecialNumber() {
      var t1, t2;
      if (this.hasQuotes) return false;
      t1 = this.text;
      if (t1.length < 6) return false;
      t2 = C.JSString_methods._codeUnitAt$1(t1, 0) | 32;
      if (t2 === 99) {
        t2 = C.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 108) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 97)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 109)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 4) | 32) !== 112)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 5) === 40;
        } else if (t2 === 97) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 108)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 99)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 4) === 40;
        } else return false;
      } else if (t2 === 118) {
        if ((C.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 97) return false;
        if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 114)
          return false;
        return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 101) {
        if ((C.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 110)
          return false;
        if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 118)
          return false;
        return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 109) {
        t2 = C.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 97) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 120)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else if (t2 === 105) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 110)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else return false;
      } else return false;
    },
    get$isVar() {
      if (this.hasQuotes) return false;
      var t1 = this.text;
      if (t1.length < 8) return false;
      return (
        (C.JSString_methods._codeUnitAt$1(t1, 0) | 32) === 118 &&
        (C.JSString_methods._codeUnitAt$1(t1, 1) | 32) === 97 &&
        (C.JSString_methods._codeUnitAt$1(t1, 2) | 32) === 114 &&
        C.JSString_methods._codeUnitAt$1(t1, 3) === 40
      );
    },
    get$isBlank() {
      return !this.hasQuotes && this.text.length === 0;
    },
    accept$1$1(visitor) {
      var t1 = visitor._quote && this.hasQuotes,
        t2 = this.text;
      if (t1) visitor._visitQuotedString$1(t2);
      else visitor._visitUnquotedString$1(t2);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertString$1($name) {
      return this;
    },
    plus$1(other) {
      var t1 = this.text,
        t2 = this.hasQuotes;
      if (other instanceof D.SassString)
        return new D.SassString(t1 + other.text, t2);
      else
        return new D.SassString(t1 + N.serializeValue0(other, false, true), t2);
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof D.SassString && this.text === other.text;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.text);
    },
  };
  E._EvaluateVisitor0.prototype = {
    _EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap0(
      functions,
      importCache,
      logger,
      nodeImporter,
      quietDeps,
      sourceMap
    ) {
      var t2,
        metaModule,
        t3,
        _i,
        module,
        $function,
        t4,
        _this = this,
        _s20_ = '$name, $module: null',
        _s9_ = 'sass:meta',
        t1 = type$.JSArray_AsyncBuiltInCallable,
        metaFunctions = H._setArrayType(
          [
            Q.BuiltInCallable$function(
              'global-variable-exists',
              _s20_,
              new E._EvaluateVisitor_closure9(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'variable-exists',
              '$name',
              new E._EvaluateVisitor_closure10(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'function-exists',
              _s20_,
              new E._EvaluateVisitor_closure11(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'mixin-exists',
              _s20_,
              new E._EvaluateVisitor_closure12(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'content-exists',
              '',
              new E._EvaluateVisitor_closure13(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'module-variables',
              '$module',
              new E._EvaluateVisitor_closure14(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'module-functions',
              '$module',
              new E._EvaluateVisitor_closure15(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'get-function',
              '$name, $css: false, $module: null',
              new E._EvaluateVisitor_closure16(_this),
              _s9_
            ),
            new S.AsyncBuiltInCallable(
              'call',
              L.ScssParser$(
                '@function call($function, $args...) {',
                null,
                _s9_
              ).parseArgumentDeclaration$0(),
              new E._EvaluateVisitor_closure17(_this)
            ),
          ],
          t1
        ),
        metaMixins = H._setArrayType(
          [
            S.AsyncBuiltInCallable$mixin(
              'load-css',
              '$url, $with: null',
              new E._EvaluateVisitor_closure18(_this),
              _s9_
            ),
          ],
          t1
        );
      t1 = type$.AsyncBuiltInCallable;
      t2 = P.List_List$of($.$get$global(), true, t1);
      C.JSArray_methods.addAll$1(t2, metaFunctions);
      metaModule = Q.BuiltInModule$('meta', t2, metaMixins, null, t1);
      for (
        t1 = P.List_List$of(
          $.$get$coreModules(),
          true,
          type$.BuiltInModule_AsyncBuiltInCallable
        ),
          t1.push(metaModule),
          t2 = t1.length,
          t3 = _this._async_evaluate$_builtInModules,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        module = t1[_i];
        t3.$indexSet(0, module.url, module);
      }
      t1 = H._setArrayType([], type$.JSArray_AsyncCallable);
      C.JSArray_methods.addAll$1(t1, $.$get$globalFunctions());
      C.JSArray_methods.addAll$1(t1, metaFunctions);
      for (
        t2 = t1.length, t3 = _this._async_evaluate$_builtInFunctions, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        $function = t1[_i];
        t4 = J.get$name$x($function);
        t3.$indexSet(0, H.stringReplaceAllUnchecked(t4, '_', '-'), $function);
      }
    },
    run$2(importer, node) {
      return this.run$body$_EvaluateVisitor(importer, node);
    },
    run$body$_EvaluateVisitor(importer, node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.EvaluateResult),
        $async$returnValue,
        $async$self = this;
      var $async$run$2 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._async_evaluate$_withWarnCallback$1$2(
                node,
                new E._EvaluateVisitor_run_closure0(
                  $async$self,
                  node,
                  importer
                ),
                type$.FutureOr_EvaluateResult
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$run$2, $async$completer);
    },
    _async_evaluate$_withWarnCallback$1$2(nodeWithSpan, callback, $T) {
      return N.withWarnCallback(
        new E._EvaluateVisitor__withWarnCallback_closure0(this, nodeWithSpan),
        callback,
        $T
      );
    },
    _async_evaluate$_assertInModule$1$2(value, $name) {
      if (value != null) return value;
      throw H.wrapException(
        P.StateError$("Can't access " + $name + ' outside of a module.')
      );
    },
    _async_evaluate$_assertInModule$2(value, $name) {
      return this._async_evaluate$_assertInModule$1$2(
        value,
        $name,
        type$.dynamic
      );
    },
    _async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      baseUrl,
      configuration,
      namesInErrors
    ) {
      return this._loadModule$body$_EvaluateVisitor(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        baseUrl,
        configuration,
        namesInErrors
      );
    },
    _async_evaluate$_loadModule$5$configuration(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      configuration
    ) {
      return this._async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        configuration,
        false
      );
    },
    _async_evaluate$_loadModule$4(url, stackFrame, nodeWithSpan, callback) {
      return this._async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        null,
        false
      );
    },
    _loadModule$body$_EvaluateVisitor(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      baseUrl,
      configuration,
      namesInErrors
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1,
        builtInModule;
      var $async$_async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                builtInModule = $async$self._async_evaluate$_builtInModules.$index(
                  0,
                  url
                );
                $async$goto = builtInModule != null ? 3 : 4;
                break;
              case 3:
                // then
                if (configuration instanceof A.ExplicitConfiguration) {
                  t1 = namesInErrors
                    ? 'Built-in module ' +
                      url.toString$0(0) +
                      " can't be configured."
                    : "Built-in modules can't be configured.";
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      t1,
                      configuration.nodeWithSpan.get$span()
                    )
                  );
                }
                $async$goto = 5;
                return P._asyncAwait(
                  $async$self._addExceptionSpanAsync$1$2(
                    nodeWithSpan,
                    new E._EvaluateVisitor__loadModule_closure1(
                      callback,
                      builtInModule
                    ),
                    type$.void
                  ),
                  $async$_async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors
                );
              case 5:
                // returning from await.
                // goto return
                $async$goto = 1;
                break;
              case 4:
                // join
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate$_withStackFrame$1$3(
                    stackFrame,
                    nodeWithSpan,
                    new E._EvaluateVisitor__loadModule_closure2(
                      $async$self,
                      url,
                      nodeWithSpan,
                      baseUrl,
                      namesInErrors,
                      configuration,
                      callback
                    ),
                    type$.Null
                  ),
                  $async$_async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors
                );
              case 6:
              // returning from await.
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors,
        $async$completer
      );
    },
    _async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan(
      importer,
      stylesheet,
      configuration,
      namesInErrors,
      nodeWithSpan
    ) {
      return this._execute$body$_EvaluateVisitor(
        importer,
        stylesheet,
        configuration,
        namesInErrors,
        nodeWithSpan
      );
    },
    _async_evaluate$_execute$2(importer, stylesheet) {
      return this._async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan(
        importer,
        stylesheet,
        null,
        false,
        null
      );
    },
    _execute$body$_EvaluateVisitor(
      importer,
      stylesheet,
      configuration,
      namesInErrors,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.Module_AsyncCallable
        ),
        $async$returnValue,
        $async$self = this,
        currentConfiguration,
        message,
        t2,
        existingSpan,
        configurationSpan,
        environment,
        css,
        extensionStore,
        module,
        url,
        t1,
        alreadyLoaded;
      var $async$_async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                url = stylesheet.span.file.url;
                t1 = $async$self._async_evaluate$_modules;
                alreadyLoaded = t1.$index(0, url);
                if (alreadyLoaded != null) {
                  t1 = configuration == null;
                  currentConfiguration = t1
                    ? $async$self._async_evaluate$_configuration
                    : configuration;
                  if (currentConfiguration instanceof A.ExplicitConfiguration) {
                    message = namesInErrors
                      ? $.$get$context().prettyUri$1(url) + string$.x20was_a
                      : string$.This_mw;
                    t2 = $async$self._async_evaluate$_moduleNodes.$index(
                      0,
                      url
                    );
                    existingSpan = t2 == null ? null : t2.get$span();
                    configurationSpan = t1
                      ? currentConfiguration.nodeWithSpan.get$span()
                      : null;
                    t1 = P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.FileSpan,
                      type$.String
                    );
                    if (existingSpan != null)
                      t1.$indexSet(0, existingSpan, 'original load');
                    if (configurationSpan != null)
                      t1.$indexSet(0, configurationSpan, 'configuration');
                    throw H.wrapException(
                      t1.get$isEmpty(t1)
                        ? $async$self._async_evaluate$_exception$1(message)
                        : $async$self._async_evaluate$_multiSpanException$3(
                            message,
                            'new load',
                            t1
                          )
                    );
                  }
                  $async$returnValue = alreadyLoaded;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                environment = Q.AsyncEnvironment$();
                css = H._Cell$();
                extensionStore = X.ExtensionStore$();
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_withEnvironment$1$2(
                    environment,
                    new E._EvaluateVisitor__execute_closure0(
                      $async$self,
                      importer,
                      stylesheet,
                      extensionStore,
                      configuration,
                      css
                    ),
                    type$.Null
                  ),
                  $async$_async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan
                );
              case 3:
                // returning from await.
                module = environment.toModule$2(
                  css._readLocal$0(),
                  extensionStore
                );
                if (url != null) {
                  t1.$indexSet(0, url, module);
                  if (nodeWithSpan != null)
                    $async$self._async_evaluate$_moduleNodes.$indexSet(
                      0,
                      url,
                      nodeWithSpan
                    );
                }
                $async$returnValue = module;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan,
        $async$completer
      );
    },
    _async_evaluate$_addOutOfOrderImports$0() {
      var t1,
        t2,
        _this = this,
        _s5_ = '_root',
        _s13_ = '_endOfImports',
        outOfOrderImports = _this._async_evaluate$_outOfOrderImports;
      if (outOfOrderImports == null)
        return _this._async_evaluate$_assertInModule$2(
          _this._async_evaluate$__root,
          _s5_
        ).children;
      t1 = _this._async_evaluate$_assertInModule$2(
        _this._async_evaluate$__root,
        _s5_
      ).children;
      t1 = P.List_List$of(
        H.SubListIterable$(
          t1,
          0,
          H.checkNotNullable(
            _this._async_evaluate$_assertInModule$2(
              _this._async_evaluate$__endOfImports,
              _s13_
            ),
            'count',
            type$.int
          ),
          t1.$ti._eval$1('ListMixin.E')
        ),
        true,
        type$.ModifiableCssNode
      );
      C.JSArray_methods.addAll$1(t1, outOfOrderImports);
      t2 = _this._async_evaluate$_assertInModule$2(
        _this._async_evaluate$__root,
        _s5_
      ).children;
      C.JSArray_methods.addAll$1(
        t1,
        H.SubListIterable$(
          t2,
          _this._async_evaluate$_assertInModule$2(
            _this._async_evaluate$__endOfImports,
            _s13_
          ),
          null,
          t2.$ti._eval$1('ListMixin.E')
        )
      );
      return t1;
    },
    _async_evaluate$_combineCss$2$clone(root, clone) {
      var selectors,
        unsatisfiedExtension,
        sortedModules,
        t1,
        imports,
        css,
        t2,
        t3,
        statements,
        index,
        _this = this;
      if (
        !C.JSArray_methods.any$1(
          root.get$upstream(),
          new E._EvaluateVisitor__combineCss_closure2()
        )
      ) {
        selectors = root.get$extensionStore().get$simpleSelectors();
        unsatisfiedExtension = B.firstOrNull(
          root
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new E._EvaluateVisitor__combineCss_closure3(selectors)
            )
        );
        if (unsatisfiedExtension != null)
          _this._async_evaluate$_throwForUnsatisfiedExtension$1(
            unsatisfiedExtension
          );
        return root.get$css(root);
      }
      sortedModules = _this._async_evaluate$_topologicalModules$1(root);
      if (clone) {
        t1 = sortedModules.$ti._eval$1(
          'MappedListIterable<ListMixin.E,Module<AsyncCallable>>'
        );
        sortedModules = P.List_List$of(
          new H.MappedListIterable(
            sortedModules,
            new E._EvaluateVisitor__combineCss_closure4(),
            t1
          ),
          true,
          t1._eval$1('ListIterable.E')
        );
      }
      _this._async_evaluate$_extendModules$1(sortedModules);
      t1 = type$.JSArray_CssNode;
      imports = H._setArrayType([], t1);
      css = H._setArrayType([], t1);
      for (
        t1 = J.get$reversed$ax(sortedModules),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t3 = t2._as(t1.__internal$_current);
        t3 = t3.get$css(t3);
        statements = t3.get$children(t3);
        index = _this._async_evaluate$_indexAfterImports$1(statements);
        t3 = J.getInterceptor$ax(statements);
        C.JSArray_methods.addAll$1(
          imports,
          t3.getRange$2(statements, 0, index)
        );
        C.JSArray_methods.addAll$1(
          css,
          t3.getRange$2(statements, index, t3.get$length(statements))
        );
      }
      return new V.CssStylesheet(
        new P.UnmodifiableListView(
          C.JSArray_methods.$add(imports, css),
          type$.UnmodifiableListView_CssNode
        ),
        root.get$css(root).get$span()
      );
    },
    _async_evaluate$_combineCss$1(root) {
      return this._async_evaluate$_combineCss$2$clone(root, false);
    },
    _async_evaluate$_extendModules$1(sortedModules) {
      var t1,
        t2,
        originalSelectors,
        $self,
        t3,
        t4,
        _i,
        url,
        downstreamExtensionStores = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Uri,
          type$.List_ExtensionStore
        ),
        unsatisfiedExtensions = new P._LinkedIdentityHashSet(
          type$._LinkedIdentityHashSet_Extension
        );
      for (t1 = J.get$iterator$ax(sortedModules); t1.moveNext$0(); ) {
        t2 = t1.get$current();
        originalSelectors = t2
          .get$extensionStore()
          .get$simpleSelectors()
          .toSet$0(0);
        unsatisfiedExtensions.addAll$1(
          0,
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new E._EvaluateVisitor__extendModules_closure1(originalSelectors)
            )
        );
        $self = downstreamExtensionStores.$index(0, t2.get$url());
        t3 = t2.get$extensionStore().get$addExtensions();
        if ($self != null) t3.call$1($self);
        t3 = t2.get$extensionStore();
        if (t3.get$isEmpty(t3)) continue;
        for (
          t3 = t2.get$upstream(), t4 = t3.length, _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          url = t3[_i].get$url();
          if (url == null) continue;
          J.add$1$ax(
            downstreamExtensionStores.putIfAbsent$2(
              url,
              new E._EvaluateVisitor__extendModules_closure2()
            ),
            t2.get$extensionStore()
          );
        }
        unsatisfiedExtensions.removeAll$1(
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              originalSelectors.get$contains(originalSelectors)
            )
        );
      }
      if (unsatisfiedExtensions._collection$_length !== 0)
        this._async_evaluate$_throwForUnsatisfiedExtension$1(
          unsatisfiedExtensions.get$first(unsatisfiedExtensions)
        );
    },
    _async_evaluate$_throwForUnsatisfiedExtension$1(extension) {
      throw H.wrapException(
        E.SassException$(
          string$.The_ta +
            extension.target.toString$0(0) +
            ' !optional" to avoid this error.',
          extension.span
        )
      );
    },
    _async_evaluate$_topologicalModules$1(root) {
      var t1 = type$.Module_AsyncCallable,
        sorted = Q.QueueList$(null, t1);
      new E._EvaluateVisitor__topologicalModules_visitModule0(
        P.LinkedHashSet_LinkedHashSet$_empty(t1),
        sorted
      ).call$1(root);
      return sorted;
    },
    _async_evaluate$_indexAfterImports$1(statements) {
      var t1, t2, t3, lastImport, i, statement;
      for (
        t1 = J.getInterceptor$asx(statements),
          t2 = type$.CssComment,
          t3 = type$.CssImport,
          lastImport = -1,
          i = 0;
        i < t1.get$length(statements);
        ++i
      ) {
        statement = t1.$index(statements, i);
        if (t3._is(statement)) lastImport = i;
        else if (!t2._is(statement)) break;
      }
      return lastImport + 1;
    },
    visitStylesheet$1(node) {
      return this.visitStylesheet$body$_EvaluateVisitor(node);
    },
    visitStylesheet$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i;
      var $async$visitStylesheet$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = node.children), (t2 = t1.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(
                t1[_i].accept$1($async$self),
                $async$visitStylesheet$1
              );
            case 6:
            // returning from await.
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitStylesheet$1, $async$completer);
    },
    visitAtRootRule$1(node) {
      return this.visitAtRootRule$body$_EvaluateVisitor(node);
    },
    visitAtRootRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        grandparent,
        root,
        innerCopy,
        t2,
        outerCopy,
        copy,
        unparsedQuery,
        query,
        $parent,
        included,
        $async$temp1,
        $async$temp2;
      var $async$visitAtRootRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              unparsedQuery = node.query;
              $async$goto = unparsedQuery != null ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp1 = unparsedQuery;
              $async$temp2 = E;
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate$_performInterpolation$2$warnForColor(
                  unparsedQuery,
                  true
                ),
                $async$visitAtRootRule$1
              );
            case 6:
              // returning from await.
              $async$result = $async$self._async_evaluate$_adjustParseError$2(
                $async$temp1,
                new $async$temp2._EvaluateVisitor_visitAtRootRule_closure2(
                  $async$self,
                  $async$result
                )
              );
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$result = C.AtRootQuery_UsS;
            case 4:
              // join
              query = $async$result;
              $parent = $async$self._async_evaluate$_assertInModule$2(
                $async$self._async_evaluate$__parent,
                '__parent'
              );
              included = H._setArrayType(
                [],
                type$.JSArray_ModifiableCssParentNode
              );
              for (
                t1 = type$.CssStylesheet;
                !t1._is($parent);
                $parent = grandparent
              ) {
                if (!query.excludes$1($parent)) included.push($parent);
                grandparent = $parent._parent;
                if (grandparent == null)
                  throw H.wrapException(P.StateError$(string$.CssNod));
              }
              root = $async$self._async_evaluate$_trimIncluded$1(included);
              $async$goto =
                root ===
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                )
                  ? 7
                  : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return P._asyncAwait(
                $async$self._async_evaluate$_environment.scope$1$2$when(
                  new E._EvaluateVisitor_visitAtRootRule_closure3(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  type$.Null
                ),
                $async$visitAtRootRule$1
              );
            case 9:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
              if (included.length !== 0) {
                innerCopy = C.JSArray_methods.get$first(
                  included
                ).copyWithoutChildren$0();
                for (
                  t1 = H.SubListIterable$(
                    included,
                    1,
                    null,
                    type$.ModifiableCssParentNode
                  ),
                    t1 = new H.ListIterator(t1, t1.get$length(t1)),
                    t2 = H._instanceType(t1)._precomputed1,
                    outerCopy = innerCopy;
                  t1.moveNext$0();
                  outerCopy = copy
                ) {
                  copy = t2._as(t1.__internal$_current).copyWithoutChildren$0();
                  copy.addChild$1(outerCopy);
                }
                root.addChild$1(outerCopy);
              } else innerCopy = root;
              $async$goto = 10;
              return P._asyncAwait(
                $async$self
                  ._async_evaluate$_scopeForAtRoot$4(
                    node,
                    innerCopy,
                    query,
                    included
                  )
                  .call$1(
                    new E._EvaluateVisitor_visitAtRootRule_closure4(
                      $async$self,
                      node
                    )
                  ),
                $async$visitAtRootRule$1
              );
            case 10:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitAtRootRule$1, $async$completer);
    },
    _async_evaluate$_trimIncluded$1(nodes) {
      var $parent,
        t1,
        innermostContiguous,
        i,
        t2,
        grandparent,
        root,
        _this = this,
        _null = null,
        _s5_ = '_root',
        _s22_ = ' to be an ancestor of ';
      if (nodes.length === 0)
        return _this._async_evaluate$_assertInModule$2(
          _this._async_evaluate$__root,
          _s5_
        );
      $parent = _this._async_evaluate$_assertInModule$2(
        _this._async_evaluate$__parent,
        '__parent'
      );
      for (
        t1 = nodes.length, innermostContiguous = _null, i = 0;
        i < t1;
        ++i, $parent = grandparent
      ) {
        for (
          ;
          (t2 = nodes[i]), $parent !== t2;
          innermostContiguous = _null, $parent = grandparent
        ) {
          grandparent = $parent._parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(
                'Expected ' +
                  t2.toString$0(0) +
                  _s22_ +
                  _this.toString$0(0) +
                  '.',
                _null
              )
            );
        }
        if (innermostContiguous == null) innermostContiguous = i;
        grandparent = $parent._parent;
        if (grandparent == null)
          throw H.wrapException(
            P.ArgumentError$(
              'Expected ' +
                t2.toString$0(0) +
                _s22_ +
                _this.toString$0(0) +
                '.',
              _null
            )
          );
      }
      if (
        $parent !==
        _this._async_evaluate$_assertInModule$2(
          _this._async_evaluate$__root,
          _s5_
        )
      )
        return _this._async_evaluate$_assertInModule$2(
          _this._async_evaluate$__root,
          _s5_
        );
      innermostContiguous.toString;
      root = nodes[innermostContiguous];
      C.JSArray_methods.removeRange$2(nodes, innermostContiguous, nodes.length);
      return root;
    },
    _async_evaluate$_scopeForAtRoot$4(node, newParent, query, included) {
      var _this = this,
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure5(
          _this,
          newParent,
          node
        ),
        t1 = query._all || query._at_root_query$_rule;
      if (t1 !== query.include)
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure6(_this, scope);
      if (
        _this._async_evaluate$_mediaQueries != null &&
        query.excludesName$1('media')
      )
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure7(_this, scope);
      if (
        _this._async_evaluate$_inKeyframes &&
        query.excludesName$1('keyframes')
      )
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure8(_this, scope);
      return _this._async_evaluate$_inUnknownAtRule &&
        !C.JSArray_methods.any$1(
          included,
          new E._EvaluateVisitor__scopeForAtRoot_closure9()
        )
        ? new E._EvaluateVisitor__scopeForAtRoot_closure10(_this, scope)
        : scope;
    },
    visitContentBlock$1(node) {
      return H.throwExpression(P.UnsupportedError$(string$.Evalua));
    },
    visitContentRule$1(node) {
      return this.visitContentRule$body$_EvaluateVisitor(node);
    },
    visitContentRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        $content;
      var $async$visitContentRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $content =
                $async$self._async_evaluate$_environment
                  ._async_environment$_content;
              if ($content == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_runUserDefinedCallable$1$4(
                  node.$arguments,
                  $content,
                  node,
                  new E._EvaluateVisitor_visitContentRule_closure0(
                    $async$self,
                    $content
                  ),
                  type$.Null
                ),
                $async$visitContentRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitContentRule$1, $async$completer);
    },
    visitDebugRule$1(node) {
      return this.visitDebugRule$body$_EvaluateVisitor(node);
    },
    visitDebugRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        value,
        t1;
      var $async$visitDebugRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                node.expression.accept$1($async$self),
                $async$visitDebugRule$1
              );
            case 3:
              // returning from await.
              value = $async$result;
              t1 =
                value instanceof D.SassString
                  ? value.text
                  : N.serializeValue0(value, true, true);
              $async$self._async_evaluate$_logger.debug$2(0, t1, node.span);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitDebugRule$1, $async$completer);
    },
    visitDeclaration$1(node) {
      return this.visitDeclaration$body$_EvaluateVisitor(node);
    },
    visitDeclaration$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        $name,
        t2,
        cssValue,
        t3,
        t4,
        children,
        oldDeclarationName;
      var $async$visitDeclaration$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (
                ($async$self._async_evaluate$_atRootExcludingStyleRule
                  ? null
                  : $async$self._async_evaluate$_styleRuleIgnoringAtRoot) ==
                  null &&
                !$async$self._async_evaluate$_inUnknownAtRule &&
                !$async$self._async_evaluate$_inKeyframes
              )
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Declarm,
                    node.span
                  )
                );
              t1 = node.name;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_interpolationToValue$2$warnForColor(
                  t1,
                  true
                ),
                $async$visitDeclaration$1
              );
            case 3:
              // returning from await.
              $name = $async$result;
              t2 = $async$self._async_evaluate$_declarationName;
              if (t2 != null)
                $name = new F.CssValue(
                  t2 + '-' + H.S($name.get$value($name)),
                  $name.get$span(),
                  type$.CssValue_String
                );
              t2 = node.value;
              $async$goto = 4;
              return P._asyncAwait(
                X.NullableExtension_andThen(
                  t2,
                  new E._EvaluateVisitor_visitDeclaration_closure1($async$self)
                ),
                $async$visitDeclaration$1
              );
            case 4:
              // returning from await.
              cssValue = $async$result;
              t3 = cssValue != null;
              if (t3)
                t4 =
                  !cssValue.get$value(cssValue).get$isBlank() ||
                  cssValue.get$value(cssValue).get$asList().length === 0;
              else t4 = false;
              if (t4) {
                t3 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                );
                t1 = C.JSString_methods.startsWith$1(
                  t1.get$initialPlain(),
                  '--'
                );
                if ($async$self._async_evaluate$_sourceMap) {
                  t2 = X.NullableExtension_andThen(
                    t2,
                    $async$self.get$_async_evaluate$_expressionNode()
                  );
                  t2 = t2 == null ? null : t2.get$span();
                } else t2 = null;
                t3.addChild$1(
                  L.ModifiableCssDeclaration$(
                    $name,
                    cssValue,
                    node.span,
                    t1,
                    t2
                  )
                );
              } else if (J.startsWith$1$s($name.get$value($name), '--') && t3)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    'Custom property values may not be empty.',
                    cssValue.get$span()
                  )
                );
              children = node.children;
              $async$goto = children != null ? 5 : 6;
              break;
            case 5:
              // then
              oldDeclarationName = $async$self._async_evaluate$_declarationName;
              $async$self._async_evaluate$_declarationName = $name.get$value(
                $name
              );
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate$_environment.scope$1$2$when(
                  new E._EvaluateVisitor_visitDeclaration_closure2(
                    $async$self,
                    children
                  ),
                  node.hasDeclarations,
                  type$.Null
                ),
                $async$visitDeclaration$1
              );
            case 7:
              // returning from await.
              $async$self._async_evaluate$_declarationName = oldDeclarationName;
            case 6:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitDeclaration$1, $async$completer);
    },
    visitEachRule$1(node) {
      return this.visitEachRule$body$_EvaluateVisitor(node);
    },
    visitEachRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        list,
        nodeWithSpan,
        setVariables;
      var $async$visitEachRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.list;
              $async$goto = 3;
              return P._asyncAwait(
                t1.accept$1($async$self),
                $async$visitEachRule$1
              );
            case 3:
              // returning from await.
              list = $async$result;
              nodeWithSpan = $async$self._async_evaluate$_expressionNode$1(t1);
              setVariables =
                node.variables.length === 1
                  ? new E._EvaluateVisitor_visitEachRule_closure2(
                      $async$self,
                      node,
                      nodeWithSpan
                    )
                  : new E._EvaluateVisitor_visitEachRule_closure3(
                      $async$self,
                      node,
                      nodeWithSpan
                    );
              $async$returnValue = $async$self._async_evaluate$_environment.scope$1$2$semiGlobal(
                new E._EvaluateVisitor_visitEachRule_closure4(
                  $async$self,
                  list,
                  setVariables,
                  node
                ),
                true,
                type$.nullable_Value
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitEachRule$1, $async$completer);
    },
    _async_evaluate$_setMultipleVariables$3(variables, value, nodeWithSpan) {
      var i,
        list = value.get$asList(),
        t1 = variables.length,
        minLength = Math.min(t1, list.length);
      for (i = 0; i < minLength; ++i)
        this._async_evaluate$_environment.setLocalVariable$3(
          variables[i],
          this._async_evaluate$_withoutSlash$2(list[i], nodeWithSpan),
          nodeWithSpan
        );
      for (i = minLength; i < t1; ++i)
        this._async_evaluate$_environment.setLocalVariable$3(
          variables[i],
          C.C__SassNull0,
          nodeWithSpan
        );
    },
    visitErrorRule$1(node) {
      return this.visitErrorRule$body$_EvaluateVisitor(node);
    },
    visitErrorRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$visitErrorRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$temp2 = J;
              $async$goto = 2;
              return P._asyncAwait(
                node.expression.accept$1($async$self),
                $async$visitErrorRule$1
              );
            case 2:
              // returning from await.
              throw $async$temp1.wrapException(
                $async$self._async_evaluate$_exception$2(
                  $async$temp2.toString$0$($async$result),
                  node.span
                )
              );
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitErrorRule$1, $async$completer);
    },
    visitExtendRule$1(node) {
      return this.visitExtendRule$body$_EvaluateVisitor(node);
    },
    visitExtendRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        targetText,
        t1,
        t2,
        t3,
        _i,
        t4,
        styleRule;
      var $async$visitExtendRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              styleRule = $async$self._async_evaluate$_atRootExcludingStyleRule
                ? null
                : $async$self._async_evaluate$_styleRuleIgnoringAtRoot;
              if (
                styleRule == null ||
                $async$self._async_evaluate$_declarationName != null
              )
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.x40exten,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_interpolationToValue$2$warnForColor(
                  node.selector,
                  true
                ),
                $async$visitExtendRule$1
              );
            case 3:
              // returning from await.
              targetText = $async$result;
              for (
                t1 = $async$self._async_evaluate$_adjustParseError$2(
                  targetText,
                  new E._EvaluateVisitor_visitExtendRule_closure0(
                    $async$self,
                    targetText
                  )
                ).components,
                  t2 = t1.length,
                  t3 = type$.CompoundSelector,
                  _i = 0;
                _i < t2;
                ++_i
              ) {
                t4 = t1[_i].components;
                if (
                  t4.length !== 1 ||
                  !(
                    C.JSArray_methods.get$first(t4) instanceof
                    X.CompoundSelector
                  )
                )
                  throw H.wrapException(
                    E.SassFormatException$(
                      'complex selectors may not be extended.',
                      targetText.get$span()
                    )
                  );
                t4 = t3._as(C.JSArray_methods.get$first(t4)).components;
                if (t4.length !== 1)
                  throw H.wrapException(
                    E.SassFormatException$(
                      string$.compou +
                        C.JSArray_methods.join$1(t4, ', ') +
                        string$.x60_inst,
                      targetText.get$span()
                    )
                  );
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__extensionStore,
                    '_extensionStore'
                  )
                  .addExtension$4(
                    styleRule.selector,
                    C.JSArray_methods.get$first(t4),
                    node,
                    $async$self._async_evaluate$_mediaQueries
                  );
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitExtendRule$1, $async$completer);
    },
    visitAtRule$1(node) {
      return this.visitAtRule$body$_EvaluateVisitor(node);
    },
    visitAtRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        $name,
        value,
        children,
        wasInKeyframes,
        wasInUnknownAtRule;
      var $async$visitAtRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.At_rul,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_interpolationToValue$1(node.name),
                $async$visitAtRule$1
              );
            case 3:
              // returning from await.
              $name = $async$result;
              $async$goto = 4;
              return P._asyncAwait(
                X.NullableExtension_andThen(
                  node.value,
                  new E._EvaluateVisitor_visitAtRule_closure2($async$self)
                ),
                $async$visitAtRule$1
              );
            case 4:
              // returning from await.
              value = $async$result;
              children = node.children;
              if (children == null) {
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__parent,
                    '__parent'
                  )
                  .addChild$1(
                    U.ModifiableCssAtRule$($name, node.span, true, value)
                  );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate$_inKeyframes;
              wasInUnknownAtRule = $async$self._async_evaluate$_inUnknownAtRule;
              if (B.unvendor($name.get$value($name)) === 'keyframes')
                $async$self._async_evaluate$_inKeyframes = true;
              else $async$self._async_evaluate$_inUnknownAtRule = true;
              $async$goto = 5;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssAtRule$($name, node.span, false, value),
                  new E._EvaluateVisitor_visitAtRule_closure3(
                    $async$self,
                    children
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitAtRule_closure4(),
                  type$.ModifiableCssAtRule,
                  type$.Null
                ),
                $async$visitAtRule$1
              );
            case 5:
              // returning from await.
              $async$self._async_evaluate$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate$_inKeyframes = wasInKeyframes;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitAtRule$1, $async$completer);
    },
    visitForRule$1(node) {
      return this.visitForRule$body$_EvaluateVisitor(node);
    },
    visitForRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        fromNumber,
        t4,
        toNumber,
        from,
        to,
        direction;
      var $async$visitForRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = node.from;
              t3 = type$.SassNumber;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._addExceptionSpanAsync$1$2(
                  t2,
                  new E._EvaluateVisitor_visitForRule_closure4(
                    $async$self,
                    node
                  ),
                  t3
                ),
                $async$visitForRule$1
              );
            case 3:
              // returning from await.
              fromNumber = $async$result;
              t4 = node.to;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._addExceptionSpanAsync$1$2(
                  t4,
                  new E._EvaluateVisitor_visitForRule_closure5(
                    $async$self,
                    node
                  ),
                  t3
                ),
                $async$visitForRule$1
              );
            case 4:
              // returning from await.
              toNumber = $async$result;
              from = $async$self._async_evaluate$_addExceptionSpan$2(
                t2,
                new E._EvaluateVisitor_visitForRule_closure6(fromNumber)
              );
              to = t1.to = $async$self._async_evaluate$_addExceptionSpan$2(
                t4,
                new E._EvaluateVisitor_visitForRule_closure7(
                  toNumber,
                  fromNumber
                )
              );
              direction = from > to ? -1 : 1;
              if (
                from === (!node.isExclusive ? (t1.to = to + direction) : to)
              ) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self._async_evaluate$_environment.scope$1$2$semiGlobal(
                new E._EvaluateVisitor_visitForRule_closure8(
                  t1,
                  $async$self,
                  node,
                  from,
                  direction,
                  fromNumber
                ),
                true,
                type$.nullable_Value
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitForRule$1, $async$completer);
    },
    visitForwardRule$1(node) {
      return this.visitForwardRule$body$_EvaluateVisitor(node);
    },
    visitForwardRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        newConfiguration,
        _i,
        variable,
        oldConfiguration,
        adjustedConfiguration,
        t1,
        t2,
        t3;
      var $async$visitForwardRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldConfiguration = $async$self._async_evaluate$_configuration;
              adjustedConfiguration = oldConfiguration.throughForward$1(node);
              t1 = node.configuration;
              t2 = t1.length;
              t3 = node.url;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate$_addForwardConfiguration$2(
                  adjustedConfiguration,
                  node
                ),
                $async$visitForwardRule$1
              );
            case 6:
              // returning from await.
              newConfiguration = $async$result;
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate$_loadModule$5$configuration(
                  t3,
                  '@forward',
                  node,
                  new E._EvaluateVisitor_visitForwardRule_closure1(
                    $async$self,
                    node
                  ),
                  newConfiguration
                ),
                $async$visitForwardRule$1
              );
            case 7:
              // returning from await.
              t3 = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
              for (_i = 0; _i < t2; ++_i) {
                variable = t1[_i];
                if (!variable.isGuarded) t3.add$1(0, variable.name);
              }
              $async$self._async_evaluate$_removeUsedConfiguration$3$except(
                adjustedConfiguration,
                newConfiguration,
                t3
              );
              $async$self._async_evaluate$_assertConfigurationIsEmpty$1(
                newConfiguration
              );
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$self._async_evaluate$_configuration = adjustedConfiguration;
              $async$goto = 8;
              return P._asyncAwait(
                $async$self._async_evaluate$_loadModule$4(
                  t3,
                  '@forward',
                  node,
                  new E._EvaluateVisitor_visitForwardRule_closure2(
                    $async$self,
                    node
                  )
                ),
                $async$visitForwardRule$1
              );
            case 8:
              // returning from await.
              $async$self._async_evaluate$_configuration = oldConfiguration;
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitForwardRule$1, $async$completer);
    },
    _async_evaluate$_addForwardConfiguration$2(configuration, node) {
      return this._addForwardConfiguration$body$_EvaluateVisitor(
        configuration,
        node
      );
    },
    _addForwardConfiguration$body$_EvaluateVisitor(configuration, node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Configuration),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        _i,
        variable,
        t4,
        t5,
        variableNodeWithSpan,
        t1,
        newValues,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$_async_evaluate$_addForwardConfiguration$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = configuration._values;
                newValues = P.LinkedHashMap_LinkedHashMap$of(
                  new P.UnmodifiableMapView(
                    t1,
                    type$.UnmodifiableMapView_String_ConfiguredValue
                  ),
                  type$.String,
                  type$.ConfiguredValue
                );
                (t2 = node.configuration), (t3 = t2.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t3)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                variable = t2[_i];
                if (variable.isGuarded) {
                  t4 = variable.name;
                  t5 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, t4);
                  if (t5 != null && !t5.value.$eq(0, C.C__SassNull0)) {
                    newValues.$indexSet(0, t4, t5);
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                }
                t4 = variable.expression;
                variableNodeWithSpan = $async$self._async_evaluate$_expressionNode$1(
                  t4
                );
                $async$temp1 = newValues;
                $async$temp2 = variable.name;
                $async$temp3 = Z;
                $async$goto = 6;
                return P._asyncAwait(
                  t4.accept$1($async$self),
                  $async$_async_evaluate$_addForwardConfiguration$2
                );
              case 6:
                // returning from await.
                $async$temp1.$indexSet(
                  0,
                  $async$temp2,
                  new $async$temp3.ConfiguredValue(
                    $async$self._async_evaluate$_withoutSlash$2(
                      $async$result,
                      variableNodeWithSpan
                    ),
                    variable.span,
                    variableNodeWithSpan
                  )
                );
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                if (
                  configuration instanceof A.ExplicitConfiguration ||
                  t1.get$isEmpty(t1)
                ) {
                  $async$returnValue = new A.ExplicitConfiguration(
                    node,
                    newValues
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  $async$returnValue = new A.Configuration(newValues);
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_addForwardConfiguration$2,
        $async$completer
      );
    },
    _async_evaluate$_removeUsedConfiguration$3$except(
      upstream,
      downstream,
      except
    ) {
      var t1, t2, t3, t4, _i, $name;
      for (
        t1 = upstream._values,
          t2 = J.toList$0$ax(t1.get$keys(t1)),
          t3 = t2.length,
          t4 = downstream._values,
          _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      ) {
        $name = t2[_i];
        if (except.contains$1(0, $name)) continue;
        if (!t4.containsKey$1($name))
          if (!t1.get$isEmpty(t1)) t1.remove$1(0, $name);
      }
    },
    _async_evaluate$_assertConfigurationIsEmpty$2$nameInError(
      configuration,
      nameInError
    ) {
      var t1, entry;
      if (!(configuration instanceof A.ExplicitConfiguration)) return;
      t1 = configuration._values;
      if (t1.get$isEmpty(t1)) return;
      t1 = t1.get$entries(t1);
      entry = t1.get$first(t1);
      t1 = nameInError
        ? '$' + H.S(entry.key) + string$.x20was_n
        : string$.This_v;
      throw H.wrapException(
        this._async_evaluate$_exception$2(t1, entry.value.configurationSpan)
      );
    },
    _async_evaluate$_assertConfigurationIsEmpty$1(configuration) {
      return this._async_evaluate$_assertConfigurationIsEmpty$2$nameInError(
        configuration,
        false
      );
    },
    visitFunctionRule$1(node) {
      return this.visitFunctionRule$body$_EvaluateVisitor(node);
    },
    visitFunctionRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        index,
        t4;
      var $async$visitFunctionRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate$_environment;
              t2 = t1.closure$0();
              t3 = t1._async_environment$_functions;
              index = t3.length - 1;
              t4 = node.name;
              t1._async_environment$_functionIndices.$indexSet(0, t4, index);
              J.$indexSet$ax(
                t3[index],
                t4,
                new E.UserDefinedCallable(
                  node,
                  t2,
                  type$.UserDefinedCallable_AsyncEnvironment
                )
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitFunctionRule$1, $async$completer);
    },
    visitIfRule$1(node) {
      return this.visitIfRule$body$_EvaluateVisitor(node);
    },
    visitIfRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i,
        clauseToCheck,
        _box_0;
      var $async$visitIfRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              _box_0.clause = node.lastClause;
              (t1 = node.clauses), (t2 = t1.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              clauseToCheck = t1[_i];
              $async$goto = 6;
              return P._asyncAwait(
                clauseToCheck.expression.accept$1($async$self),
                $async$visitIfRule$1
              );
            case 6:
              // returning from await.
              if ($async$result.get$isTruthy()) {
                _box_0.clause = clauseToCheck;
                // goto after for
                $async$goto = 5;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              t1 = _box_0.clause;
              if (t1 == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate$_environment.scope$1$3$semiGlobal$when(
                  new E._EvaluateVisitor_visitIfRule_closure0(
                    _box_0,
                    $async$self
                  ),
                  true,
                  t1.hasDeclarations,
                  type$.nullable_Value
                ),
                $async$visitIfRule$1
              );
            case 7:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIfRule$1, $async$completer);
    },
    visitImportRule$1(node) {
      return this.visitImportRule$body$_EvaluateVisitor(node);
    },
    visitImportRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        _i,
        $import;
      var $async$visitImportRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = node.imports),
                (t2 = t1.length),
                (t3 = type$.StaticImport),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $import = t1[_i];
              $async$goto = $import instanceof B.DynamicImport ? 6 : 8;
              break;
            case 6:
              // then
              $async$goto = 9;
              return P._asyncAwait(
                $async$self._async_evaluate$_visitDynamicImport$1($import),
                $async$visitImportRule$1
              );
            case 9:
              // returning from await.
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate$_visitStaticImport$1(
                  t3._as($import)
                ),
                $async$visitImportRule$1
              );
            case 10:
            // returning from await.
            case 7:
            // join
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitImportRule$1, $async$completer);
    },
    _async_evaluate$_visitDynamicImport$1($import) {
      return this._async_evaluate$_withStackFrame$1$3(
        '@import',
        $import,
        new E._EvaluateVisitor__visitDynamicImport_closure0(this, $import),
        type$.void
      );
    },
    _async_evaluate$_loadStylesheet$4$baseUrl$forImport(
      url,
      span,
      baseUrl,
      forImport
    ) {
      return this._loadStylesheet$body$_EvaluateVisitor(
        url,
        span,
        baseUrl,
        forImport
      );
    },
    _async_evaluate$_loadStylesheet$3$baseUrl(url, span, baseUrl) {
      return this._async_evaluate$_loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        baseUrl,
        false
      );
    },
    _async_evaluate$_loadStylesheet$3$forImport(url, span, forImport) {
      return this._async_evaluate$_loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        null,
        forImport
      );
    },
    _loadStylesheet$body$_EvaluateVisitor(url, span, baseUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$._LoadedStylesheet),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        importCache,
        tuple,
        isDependency,
        stylesheet,
        result,
        error,
        error0,
        message,
        t1,
        t2,
        t3,
        t4,
        exception,
        message0,
        $async$exception;
      var $async$_async_evaluate$_loadStylesheet$4$baseUrl$forImport = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                baseUrl = baseUrl;
                $async$handler = 4;
                $async$self._async_evaluate$_importSpan = span;
                importCache = $async$self._async_evaluate$_importCache;
                $async$goto = importCache != null ? 7 : 9;
                break;
              case 7:
                // then
                if (baseUrl == null)
                  baseUrl = $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__stylesheet,
                    '_stylesheet'
                  ).span.file.url;
                $async$goto = 10;
                return P._asyncAwait(
                  importCache.canonicalize$4$baseImporter$baseUrl$forImport(
                    P.Uri_parse(url),
                    $async$self._async_evaluate$_importer,
                    baseUrl,
                    forImport
                  ),
                  $async$_async_evaluate$_loadStylesheet$4$baseUrl$forImport
                );
              case 10:
                // returning from await.
                tuple = $async$result;
                $async$goto = tuple != null ? 11 : 12;
                break;
              case 11:
                // then
                isDependency =
                  $async$self._async_evaluate$_inDependency ||
                  tuple.item1 !== $async$self._async_evaluate$_importer;
                t1 = tuple.item1;
                t2 = tuple.item2;
                t3 = tuple.item3;
                t4 = $async$self._async_evaluate$_quietDeps && isDependency;
                $async$goto = 13;
                return P._asyncAwait(
                  importCache.importCanonical$4$originalUrl$quiet(
                    t1,
                    t2,
                    t3,
                    t4
                  ),
                  $async$_async_evaluate$_loadStylesheet$4$baseUrl$forImport
                );
              case 13:
                // returning from await.
                stylesheet = $async$result;
                if (stylesheet != null) {
                  $async$self._async_evaluate$_loadedUrls.add$1(0, tuple.item2);
                  t1 = tuple.item1;
                  $async$returnValue = new E._LoadedStylesheet0(
                    stylesheet,
                    t1,
                    isDependency
                  );
                  $async$next = [1];
                  // goto finally
                  $async$goto = 5;
                  break;
                }
              case 12:
                // join
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = 14;
                return P._asyncAwait(
                  $async$self._async_evaluate$_importLikeNode$2(url, forImport),
                  $async$_async_evaluate$_loadStylesheet$4$baseUrl$forImport
                );
              case 14:
                // returning from await.
                result = $async$result;
                if (result != null) {
                  t1 = $async$self._async_evaluate$_loadedUrls;
                  X.NullableExtension_andThen(
                    result.stylesheet.span.file.url,
                    t1.get$add(t1)
                  );
                  $async$returnValue = result;
                  $async$next = [1];
                  // goto finally
                  $async$goto = 5;
                  break;
                }
              case 8:
                // join
                if (C.JSString_methods.startsWith$1(url, 'package:') && true)
                  throw H.wrapException(string$.x22packa);
                else throw H.wrapException("Can't find stylesheet to import.");
                $async$next.push(6);
                // goto finally
                $async$goto = 5;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof E.SassException) {
                  error = t1;
                  t1 = $async$self._async_evaluate$_exception$2(
                    error._span_exception$_message,
                    error.get$span()
                  );
                  throw H.wrapException(t1);
                } else {
                  error0 = t1;
                  message = null;
                  try {
                    message = H._asString(J.get$message$x(error0));
                  } catch (exception) {
                    H.unwrapException($async$exception);
                    message0 = J.toString$0$(error0);
                    message = message0;
                  }
                  t1 = $async$self._async_evaluate$_exception$1(message);
                  throw H.wrapException(t1);
                }
                $async$next.push(6);
                // goto finally
                $async$goto = 5;
                break;
              case 3:
                // uncaught
                $async$next = [2];
              case 5:
                // finally
                $async$handler = 2;
                $async$self._async_evaluate$_importSpan = null;
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_loadStylesheet$4$baseUrl$forImport,
        $async$completer
      );
    },
    _async_evaluate$_importLikeNode$2(originalUrl, forImport) {
      return this._importLikeNode$body$_EvaluateVisitor(originalUrl, forImport);
    },
    _importLikeNode$body$_EvaluateVisitor(originalUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable__LoadedStylesheet
        ),
        $async$returnValue,
        $async$self = this,
        result,
        contents,
        t2,
        url,
        t1;
      var $async$_async_evaluate$_importLikeNode$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate$_nodeImporter;
                t1.toString;
                $async$goto = 3;
                return P._asyncAwait(
                  t1.loadAsync$3(
                    originalUrl,
                    $async$self._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__stylesheet,
                      '_stylesheet'
                    ).span.file.url,
                    forImport
                  ),
                  $async$_async_evaluate$_importLikeNode$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                if (result == null) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = J.getInterceptor$x(result);
                contents = t1.get$contents(result);
                t2 = t1.get$file(result);
                url = $.$get$context().toUri$1(t2).toString$0(0);
                t1 = t1.get$isIndentedSyntax(result)
                  ? C.Syntax_Sass
                  : C.Syntax_SCSS;
                $async$returnValue = new E._LoadedStylesheet0(
                  V.Stylesheet_Stylesheet$parse(
                    contents,
                    t1,
                    $async$self._async_evaluate$_quietDeps
                      ? $.$get$Logger_quiet()
                      : $async$self._async_evaluate$_logger,
                    url
                  ),
                  null,
                  true
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_importLikeNode$2,
        $async$completer
      );
    },
    _async_evaluate$_visitStaticImport$1($import) {
      return this._visitStaticImport$body$_EvaluateVisitor($import);
    },
    _visitStaticImport$body$_EvaluateVisitor($import) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1,
        url,
        supports,
        node,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$_async_evaluate$_visitStaticImport$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_interpolationToValue$1(
                    $import.url
                  ),
                  $async$_async_evaluate$_visitStaticImport$1
                );
              case 3:
                // returning from await.
                url = $async$result;
                $async$goto = 4;
                return P._asyncAwait(
                  X.NullableExtension_andThen(
                    $import.supports,
                    new E._EvaluateVisitor__visitStaticImport_closure0(
                      $async$self
                    )
                  ),
                  $async$_async_evaluate$_visitStaticImport$1
                );
              case 4:
                // returning from await.
                supports = $async$result;
                $async$temp1 = F;
                $async$temp2 = url;
                $async$temp3 = $import.span;
                $async$goto = 5;
                return P._asyncAwait(
                  X.NullableExtension_andThen(
                    $import.media,
                    $async$self.get$_async_evaluate$_visitMediaQueries()
                  ),
                  $async$_async_evaluate$_visitStaticImport$1
                );
              case 5:
                // returning from await.
                node = $async$temp1.ModifiableCssImport$(
                  $async$temp2,
                  $async$temp3,
                  $async$result,
                  supports
                );
                if (
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__parent,
                    '__parent'
                  ) !==
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__root,
                    '_root'
                  )
                )
                  $async$self
                    ._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__parent,
                      '__parent'
                    )
                    .addChild$1(node);
                else if (
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__endOfImports,
                    '_endOfImports'
                  ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__root,
                      '_root'
                    ).children._collection$_source
                  )
                ) {
                  $async$self
                    ._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__root,
                      '_root'
                    )
                    .addChild$1(node);
                  $async$self._async_evaluate$__endOfImports =
                    $async$self._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__endOfImports,
                      '_endOfImports'
                    ) + 1;
                } else {
                  t1 = $async$self._async_evaluate$_outOfOrderImports;
                  (t1 == null
                    ? ($async$self._async_evaluate$_outOfOrderImports = H._setArrayType(
                        [],
                        type$.JSArray_ModifiableCssImport
                      ))
                    : t1
                  ).push(node);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_visitStaticImport$1,
        $async$completer
      );
    },
    visitIncludeRule$1(node) {
      return this.visitIncludeRule$body$_EvaluateVisitor(node);
    },
    visitIncludeRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        nodeWithSpan,
        t1,
        mixin;
      var $async$visitIncludeRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              mixin = $async$self._async_evaluate$_addExceptionSpan$2(
                node,
                new E._EvaluateVisitor_visitIncludeRule_closure3(
                  $async$self,
                  node
                )
              );
              if (mixin == null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    'Undefined mixin.',
                    node.span
                  )
                );
              nodeWithSpan = new B._FakeAstNode(
                new E._EvaluateVisitor_visitIncludeRule_closure4(node)
              );
              $async$goto = type$.AsyncBuiltInCallable._is(mixin) ? 3 : 5;
              break;
            case 3:
              // then
              if (node.content != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    "Mixin doesn't accept a content block.",
                    node.span
                  )
                );
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate$_runBuiltInCallable$3(
                  node.$arguments,
                  mixin,
                  nodeWithSpan
                ),
                $async$visitIncludeRule$1
              );
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = type$.UserDefinedCallable_AsyncEnvironment._is(
                mixin
              )
                ? 7
                : 9;
              break;
            case 7:
              // then
              t1 = node.content;
              if (
                t1 != null &&
                !type$.MixinRule._as(mixin.declaration).get$hasContent()
              )
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$(
                    "Mixin doesn't accept a content block.",
                    node.get$spanWithoutContent(),
                    'invocation',
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [
                        mixin.declaration.$arguments.get$spanWithName(),
                        'declaration',
                      ],
                      type$.FileSpan,
                      type$.String
                    ),
                    $async$self._async_evaluate$_stackTrace$1(
                      node.get$spanWithoutContent()
                    )
                  )
                );
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate$_runUserDefinedCallable$1$4(
                  node.$arguments,
                  mixin,
                  nodeWithSpan,
                  new E._EvaluateVisitor_visitIncludeRule_closure5(
                    $async$self,
                    X.NullableExtension_andThen(
                      t1,
                      new E._EvaluateVisitor_visitIncludeRule_closure6(
                        $async$self
                      )
                    ),
                    mixin,
                    nodeWithSpan
                  ),
                  type$.Null
                ),
                $async$visitIncludeRule$1
              );
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              throw H.wrapException(
                P.UnsupportedError$(
                  'Unknown callable type ' + mixin.toString$0(0) + '.'
                )
              );
            case 8:
            // join
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIncludeRule$1, $async$completer);
    },
    visitMixinRule$1(node) {
      return this.visitMixinRule$body$_EvaluateVisitor(node);
    },
    visitMixinRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        index,
        t4;
      var $async$visitMixinRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate$_environment;
              t2 = t1.closure$0();
              t3 = t1._async_environment$_mixins;
              index = t3.length - 1;
              t4 = node.name;
              t1._async_environment$_mixinIndices.$indexSet(0, t4, index);
              J.$indexSet$ax(
                t3[index],
                t4,
                new E.UserDefinedCallable(
                  node,
                  t2,
                  type$.UserDefinedCallable_AsyncEnvironment
                )
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMixinRule$1, $async$completer);
    },
    visitLoudComment$1(node) {
      return this.visitLoudComment$body$_EvaluateVisitor(node);
    },
    visitLoudComment$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$visitLoudComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_inFunction) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ) ===
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__root,
                    '_root'
                  ) &&
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__endOfImports,
                  '_endOfImports'
                ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__root,
                      '_root'
                    ).children._collection$_source
                  )
              )
                $async$self._async_evaluate$__endOfImports =
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              t1 = node.text;
              $async$temp1 = $async$self._async_evaluate$_assertInModule$2(
                $async$self._async_evaluate$__parent,
                '__parent'
              );
              $async$temp2 = R;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_performInterpolation$1(t1),
                $async$visitLoudComment$1
              );
            case 3:
              // returning from await.
              $async$temp1.addChild$1(
                new $async$temp2.ModifiableCssComment($async$result, t1.span)
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitLoudComment$1, $async$completer);
    },
    visitMediaRule$1(node) {
      return this.visitMediaRule$body$_EvaluateVisitor(node);
    },
    visitMediaRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        queries,
        mergedQueries,
        t1;
      var $async$visitMediaRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Media_,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_visitMediaQueries$1(node.query),
                $async$visitMediaRule$1
              );
            case 3:
              // returning from await.
              queries = $async$result;
              mergedQueries = X.NullableExtension_andThen(
                $async$self._async_evaluate$_mediaQueries,
                new E._EvaluateVisitor_visitMediaRule_closure2(
                  $async$self,
                  queries
                )
              );
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? queries : mergedQueries;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  G.ModifiableCssMediaRule$(t1, node.span),
                  new E._EvaluateVisitor_visitMediaRule_closure3(
                    $async$self,
                    mergedQueries,
                    queries,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitMediaRule_closure4(mergedQueries),
                  type$.ModifiableCssMediaRule,
                  type$.Null
                ),
                $async$visitMediaRule$1
              );
            case 4:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMediaRule$1, $async$completer);
    },
    _async_evaluate$_visitMediaQueries$1(interpolation) {
      return this._visitMediaQueries$body$_EvaluateVisitor(interpolation);
    },
    _visitMediaQueries$body$_EvaluateVisitor(interpolation) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_CssMediaQuery),
        $async$returnValue,
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate$_visitMediaQueries$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = interpolation;
                $async$temp2 = E;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$2$warnForColor(
                    interpolation,
                    true
                  ),
                  $async$_async_evaluate$_visitMediaQueries$1
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$self._async_evaluate$_adjustParseError$2(
                  $async$temp1,
                  new $async$temp2._EvaluateVisitor__visitMediaQueries_closure0(
                    $async$self,
                    $async$result
                  )
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_visitMediaQueries$1,
        $async$completer
      );
    },
    _async_evaluate$_mergeMediaQueries$2(queries1, queries2) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        result,
        queries = H._setArrayType([], type$.JSArray_CssMediaQuery);
      for (
        t1 = J.get$iterator$ax(queries1),
          t2 = J.getInterceptor$ax(queries2),
          t3 = type$.MediaQuerySuccessfulMergeResult;
        t1.moveNext$0();

      ) {
        t4 = t1.get$current();
        for (t5 = t2.get$iterator(queries2); t5.moveNext$0(); ) {
          result = t4.merge$1(t5.get$current());
          if (result === C._SingletonCssMediaQueryMergeResult_empty) continue;
          if (result === C._SingletonCssMediaQueryMergeResult_unrepresentable)
            return null;
          queries.push(t3._as(result).query);
        }
      }
      return queries;
    },
    visitReturnRule$1(node) {
      return this.visitReturnRule$body$_EvaluateVisitor(node);
    },
    visitReturnRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$visitReturnRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.expression;
              $async$goto = 3;
              return P._asyncAwait(
                t1.accept$1($async$self),
                $async$visitReturnRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate$_withoutSlash$2(
                $async$result,
                t1
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitReturnRule$1, $async$completer);
    },
    visitSilentComment$1(node) {
      return this.visitSilentComment$body$_EvaluateVisitor(node);
    },
    visitSilentComment$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue;
      var $async$visitSilentComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitSilentComment$1, $async$completer);
    },
    visitStyleRule$1(node) {
      return this.visitStyleRule$body$_EvaluateVisitor(node);
    },
    visitStyleRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t2,
        selectorText,
        rule,
        oldAtRootExcludingStyleRule,
        t1;
      var $async$visitStyleRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Style_,
                    node.span
                  )
                );
              t2 = node.selector;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_interpolationToValue$3$trim$warnForColor(
                  t2,
                  true,
                  true
                ),
                $async$visitStyleRule$1
              );
            case 3:
              // returning from await.
              selectorText = $async$result;
              $async$goto = $async$self._async_evaluate$_inKeyframes ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssKeyframeBlock$(
                    new F.CssValue(
                      P.List_List$unmodifiable(
                        $async$self._async_evaluate$_adjustParseError$2(
                          t2,
                          new E._EvaluateVisitor_visitStyleRule_closure6(
                            $async$self,
                            selectorText
                          )
                        ),
                        type$.String
                      ),
                      t2.span,
                      type$.CssValue_List_String
                    ),
                    node.span
                  ),
                  new E._EvaluateVisitor_visitStyleRule_closure7(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitStyleRule_closure8(),
                  type$.ModifiableCssKeyframeBlock,
                  type$.Null
                ),
                $async$visitStyleRule$1
              );
            case 6:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              t1.parsedSelector = $async$self._async_evaluate$_adjustParseError$2(
                t2,
                new E._EvaluateVisitor_visitStyleRule_closure9(
                  $async$self,
                  selectorText
                )
              );
              t1.parsedSelector = $async$self._async_evaluate$_addExceptionSpan$2(
                t2,
                new E._EvaluateVisitor_visitStyleRule_closure10(t1, $async$self)
              );
              rule = X.ModifiableCssStyleRule$(
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__extensionStore,
                    '_extensionStore'
                  )
                  .addSelector$3(
                    t1.parsedSelector,
                    t2.span,
                    $async$self._async_evaluate$_mediaQueries
                  ),
                node.span,
                t1.parsedSelector
              );
              oldAtRootExcludingStyleRule =
                $async$self._async_evaluate$_atRootExcludingStyleRule;
              t1 = $async$self._async_evaluate$_atRootExcludingStyleRule = false;
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  rule,
                  new E._EvaluateVisitor_visitStyleRule_closure11(
                    $async$self,
                    rule,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitStyleRule_closure12(),
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$visitStyleRule$1
              );
            case 7:
              // returning from await.
              $async$self._async_evaluate$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if (
                (oldAtRootExcludingStyleRule
                  ? null
                  : $async$self._async_evaluate$_styleRuleIgnoringAtRoot) ==
                null
              ) {
                t1 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ).children;
                t1 = !t1.get$isEmpty(t1);
              }
              if (t1) {
                t1 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ).children;
                t1.get$last(t1).isGroupEnd = true;
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitStyleRule$1, $async$completer);
    },
    visitSupportsRule$1(node) {
      return this.visitSupportsRule$body$_EvaluateVisitor(node);
    },
    visitSupportsRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$visitSupportsRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Suppor,
                    node.span
                  )
                );
              t1 = node.condition;
              $async$temp1 = B;
              $async$temp2 = F;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._async_evaluate$_visitSupportsCondition$1(t1),
                $async$visitSupportsRule$1
              );
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  $async$temp1.ModifiableCssSupportsRule$(
                    new $async$temp2.CssValue(
                      $async$result,
                      t1.get$span(),
                      type$.CssValue_String
                    ),
                    node.span
                  ),
                  new E._EvaluateVisitor_visitSupportsRule_closure1(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitSupportsRule_closure2(),
                  type$.ModifiableCssSupportsRule,
                  type$.Null
                ),
                $async$visitSupportsRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitSupportsRule$1, $async$completer);
    },
    _async_evaluate$_visitSupportsCondition$1(condition) {
      return this._visitSupportsCondition$body$_EvaluateVisitor(condition);
    },
    _visitSupportsCondition$body$_EvaluateVisitor(condition) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate$_visitSupportsCondition$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = condition instanceof U.SupportsOperation ? 3 : 5;
                break;
              case 3:
                // then
                t1 = condition.operator;
                $async$temp1 = H;
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate$_parenthesize$2(
                    condition.left,
                    t1
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 6:
                // returning from await.
                $async$temp1 = $async$temp1.S($async$result) + ' ' + t1 + ' ';
                $async$temp2 = H;
                $async$goto = 7;
                return P._asyncAwait(
                  $async$self._async_evaluate$_parenthesize$2(
                    condition.right,
                    t1
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 7:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result);
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = condition instanceof M.SupportsNegation ? 8 : 10;
                break;
              case 8:
                // then
                $async$temp1 = H;
                $async$goto = 11;
                return P._asyncAwait(
                  $async$self._async_evaluate$_parenthesize$1(
                    condition.condition
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 11:
                // returning from await.
                $async$returnValue = 'not ' + $async$temp1.S($async$result);
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 9;
                break;
              case 10:
                // else
                $async$goto =
                  condition instanceof X.SupportsInterpolation ? 12 : 14;
                break;
              case 12:
                // then
                $async$goto = 15;
                return P._asyncAwait(
                  $async$self._evaluateToCss$2$quote(
                    condition.expression,
                    false
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 15:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 13;
                break;
              case 14:
                // else
                $async$goto =
                  condition instanceof L.SupportsDeclaration ? 16 : 18;
                break;
              case 16:
                // then
                $async$temp1 = H;
                $async$goto = 19;
                return P._asyncAwait(
                  $async$self._evaluateToCss$1(condition.name),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 19:
                // returning from await.
                $async$temp1 = '(' + $async$temp1.S($async$result) + ': ';
                $async$temp2 = H;
                $async$goto = 20;
                return P._asyncAwait(
                  $async$self._evaluateToCss$1(condition.value),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 20:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 17;
                break;
              case 18:
                // else
                $async$goto = condition instanceof F.SupportsFunction ? 21 : 23;
                break;
              case 21:
                // then
                $async$temp1 = H;
                $async$goto = 24;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$1(
                    condition.name
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 24:
                // returning from await.
                $async$temp1 = $async$temp1.S($async$result) + '(';
                $async$temp2 = H;
                $async$goto = 25;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$1(
                    condition.$arguments
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 25:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 22;
                break;
              case 23:
                // else
                $async$goto = condition instanceof Y.SupportsAnything ? 26 : 28;
                break;
              case 26:
                // then
                $async$temp1 = H;
                $async$goto = 29;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$1(
                    condition.contents
                  ),
                  $async$_async_evaluate$_visitSupportsCondition$1
                );
              case 29:
                // returning from await.
                $async$returnValue = '(' + $async$temp1.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 27;
                break;
              case 28:
                // else
                throw H.wrapException(
                  P.ArgumentError$(
                    'Unknown supports condition type ' +
                      H.getRuntimeType(condition).toString$0(0) +
                      '.',
                    null
                  )
                );
              case 27:
              // join
              case 22:
              // join
              case 17:
              // join
              case 13:
              // join
              case 9:
              // join
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_visitSupportsCondition$1,
        $async$completer
      );
    },
    _async_evaluate$_parenthesize$2(condition, operator) {
      return this._parenthesize$body$_EvaluateVisitor(condition, operator);
    },
    _async_evaluate$_parenthesize$1(condition) {
      return this._async_evaluate$_parenthesize$2(condition, null);
    },
    _parenthesize$body$_EvaluateVisitor(condition, operator) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1;
      var $async$_async_evaluate$_parenthesize$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!(condition instanceof M.SupportsNegation))
                  if (condition instanceof U.SupportsOperation)
                    t1 = operator == null || operator !== condition.operator;
                  else t1 = false;
                else t1 = true;
                $async$goto = t1 ? 3 : 5;
                break;
              case 3:
                // then
                $async$temp1 = H;
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate$_visitSupportsCondition$1(
                    condition
                  ),
                  $async$_async_evaluate$_parenthesize$2
                );
              case 6:
                // returning from await.
                $async$returnValue = '(' + $async$temp1.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = 7;
                return P._asyncAwait(
                  $async$self._async_evaluate$_visitSupportsCondition$1(
                    condition
                  ),
                  $async$_async_evaluate$_parenthesize$2
                );
              case 7:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_parenthesize$2,
        $async$completer
      );
    },
    visitVariableDeclaration$1(node) {
      return this.visitVariableDeclaration$body$_EvaluateVisitor(node);
    },
    visitVariableDeclaration$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        value,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$visitVariableDeclaration$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (node.isGuarded) {
                  if (
                    node.namespace == null &&
                    $async$self._async_evaluate$_environment
                      ._async_environment$_variables.length === 1
                  ) {
                    t1 = $async$self._async_evaluate$_configuration._values;
                    t1 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, node.name);
                    if (t1 != null && !t1.value.$eq(0, C.C__SassNull0)) {
                      $async$self._async_evaluate$_addExceptionSpan$2(
                        node,
                        new E._EvaluateVisitor_visitVariableDeclaration_closure2(
                          $async$self,
                          node,
                          t1
                        )
                      );
                      $async$returnValue = null;
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                  }
                  value = $async$self._async_evaluate$_addExceptionSpan$2(
                    node,
                    new E._EvaluateVisitor_visitVariableDeclaration_closure3(
                      $async$self,
                      node
                    )
                  );
                  if (value != null && !value.$eq(0, C.C__SassNull0)) {
                    $async$returnValue = null;
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                }
                if (
                  node.isGlobal &&
                  !$async$self._async_evaluate$_environment.globalVariableExists$1(
                    node.name
                  )
                ) {
                  t1 =
                    $async$self._async_evaluate$_environment
                      ._async_environment$_variables.length === 1
                      ? string$.As_of_S
                      : string$.As_of_R +
                        B.declarationName(node.span) +
                        ': null` at the stylesheet root.';
                  $async$self._async_evaluate$_warn$3$deprecation(
                    t1,
                    node.span,
                    true
                  );
                }
                t1 = node.expression;
                $async$temp1 = node;
                $async$temp2 = E;
                $async$temp3 = node;
                $async$goto = 3;
                return P._asyncAwait(
                  t1.accept$1($async$self),
                  $async$visitVariableDeclaration$1
                );
              case 3:
                // returning from await.
                $async$self._async_evaluate$_addExceptionSpan$2(
                  $async$temp1,
                  new $async$temp2._EvaluateVisitor_visitVariableDeclaration_closure4(
                    $async$self,
                    $async$temp3,
                    $async$self._async_evaluate$_withoutSlash$2(
                      $async$result,
                      t1
                    )
                  )
                );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitVariableDeclaration$1,
        $async$completer
      );
    },
    visitUseRule$1(node) {
      return this.visitUseRule$body$_EvaluateVisitor(node);
    },
    visitUseRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        values,
        _i,
        variable,
        t3,
        variableNodeWithSpan,
        configuration,
        t1,
        t2,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$visitUseRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.configuration;
              t2 = t1.length;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              values = P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.ConfiguredValue
              );
              _i = 0;
            case 6:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 8;
                break;
              }
              variable = t1[_i];
              t3 = variable.expression;
              variableNodeWithSpan = $async$self._async_evaluate$_expressionNode$1(
                t3
              );
              $async$temp1 = values;
              $async$temp2 = variable.name;
              $async$temp3 = Z;
              $async$goto = 9;
              return P._asyncAwait(
                t3.accept$1($async$self),
                $async$visitUseRule$1
              );
            case 9:
              // returning from await.
              $async$temp1.$indexSet(
                0,
                $async$temp2,
                new $async$temp3.ConfiguredValue(
                  $async$self._async_evaluate$_withoutSlash$2(
                    $async$result,
                    variableNodeWithSpan
                  ),
                  variable.span,
                  variableNodeWithSpan
                )
              );
            case 7:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 6;
              break;
            case 8:
              // after for
              configuration = new A.ExplicitConfiguration(node, values);
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              configuration = C.Configuration_Map_empty;
            case 4:
              // join
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate$_loadModule$5$configuration(
                  node.url,
                  '@use',
                  node,
                  new E._EvaluateVisitor_visitUseRule_closure0(
                    $async$self,
                    node
                  ),
                  configuration
                ),
                $async$visitUseRule$1
              );
            case 10:
              // returning from await.
              $async$self._async_evaluate$_assertConfigurationIsEmpty$1(
                configuration
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitUseRule$1, $async$completer);
    },
    visitWarnRule$1(node) {
      return this.visitWarnRule$body$_EvaluateVisitor(node);
    },
    visitWarnRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        value,
        t1;
      var $async$visitWarnRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._addExceptionSpanAsync$1$2(
                  node,
                  new E._EvaluateVisitor_visitWarnRule_closure0(
                    $async$self,
                    node
                  ),
                  type$.Value
                ),
                $async$visitWarnRule$1
              );
            case 3:
              // returning from await.
              value = $async$result;
              t1 =
                value instanceof D.SassString
                  ? value.text
                  : $async$self._async_evaluate$_serialize$2(
                      value,
                      node.expression
                    );
              $async$self._async_evaluate$_logger.warn$2$trace(
                0,
                t1,
                $async$self._async_evaluate$_stackTrace$1(node.span)
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitWarnRule$1, $async$completer);
    },
    visitWhileRule$1(node) {
      return this._async_evaluate$_environment.scope$1$3$semiGlobal$when(
        new E._EvaluateVisitor_visitWhileRule_closure0(this, node),
        true,
        node.hasDeclarations,
        type$.nullable_Value
      );
    },
    visitBinaryOperationExpression$1(node) {
      return this._addExceptionSpanAsync$1$2(
        node,
        new E._EvaluateVisitor_visitBinaryOperationExpression_closure0(
          this,
          node
        ),
        type$.Value
      );
    },
    visitValueExpression$1(node) {
      return this.visitValueExpression$body$_EvaluateVisitor(node);
    },
    visitValueExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue;
      var $async$visitValueExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitValueExpression$1, $async$completer);
    },
    visitVariableExpression$1(node) {
      return this.visitVariableExpression$body$_EvaluateVisitor(node);
    },
    visitVariableExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        result;
      var $async$visitVariableExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                result = $async$self._async_evaluate$_addExceptionSpan$2(
                  node,
                  new E._EvaluateVisitor_visitVariableExpression_closure0(
                    $async$self,
                    node
                  )
                );
                if (result != null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    'Undefined variable.',
                    node.span
                  )
                );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitVariableExpression$1,
        $async$completer
      );
    },
    visitUnaryOperationExpression$1(node) {
      return this.visitUnaryOperationExpression$body$_EvaluateVisitor(node);
    },
    visitUnaryOperationExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        operand,
        t1;
      var $async$visitUnaryOperationExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            $async$outer: switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  node.operand.accept$1($async$self),
                  $async$visitUnaryOperationExpression$1
                );
              case 3:
                // returning from await.
                operand = $async$result;
                t1 = node.operator;
                switch (t1) {
                  case C.UnaryOperator_j2w:
                    $async$returnValue = operand.unaryPlus$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_U4G:
                    $async$returnValue = operand.unaryMinus$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_zDx:
                    $async$returnValue = new D.SassString(
                      '/' + N.serializeValue0(operand, false, true),
                      false
                    );
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_not_not:
                    $async$returnValue = operand.unaryNot$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw H.wrapException(
                      P.StateError$(
                        'Unknown unary operator ' + t1.toString$0(0) + '.'
                      )
                    );
                }
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitUnaryOperationExpression$1,
        $async$completer
      );
    },
    visitBooleanExpression$1(node) {
      return this.visitBooleanExpression$body$_EvaluateVisitor(node);
    },
    visitBooleanExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassBoolean),
        $async$returnValue;
      var $async$visitBooleanExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value
                ? C.SassBoolean_true0
                : C.SassBoolean_false0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitBooleanExpression$1,
        $async$completer
      );
    },
    visitIfExpression$1(node) {
      return this.visitIfExpression$body$_EvaluateVisitor(node);
    },
    visitIfExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        condition,
        t2,
        ifTrue,
        ifFalse,
        result,
        pair,
        positional,
        named,
        t1;
      var $async$visitIfExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_evaluateMacroArguments$1(node),
                $async$visitIfExpression$1
              );
            case 3:
              // returning from await.
              pair = $async$result;
              positional = pair.item1;
              named = pair.item2;
              t1 = J.getInterceptor$asx(positional);
              $async$self._async_evaluate$_verifyArguments$4(
                t1.get$length(positional),
                named,
                $.$get$IfExpression_declaration(),
                node
              );
              if (t1.get$length(positional) > 0)
                condition = t1.$index(positional, 0);
              else {
                t2 = named.$index(0, 'condition');
                t2.toString;
                condition = t2;
              }
              if (t1.get$length(positional) > 1)
                ifTrue = t1.$index(positional, 1);
              else {
                t2 = named.$index(0, 'if-true');
                t2.toString;
                ifTrue = t2;
              }
              if (t1.get$length(positional) > 2)
                ifFalse = t1.$index(positional, 2);
              else {
                t1 = named.$index(0, 'if-false');
                t1.toString;
                ifFalse = t1;
              }
              $async$goto = 4;
              return P._asyncAwait(
                condition.accept$1($async$self),
                $async$visitIfExpression$1
              );
            case 4:
              // returning from await.
              result = $async$result.get$isTruthy() ? ifTrue : ifFalse;
              $async$goto = 5;
              return P._asyncAwait(
                result.accept$1($async$self),
                $async$visitIfExpression$1
              );
            case 5:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate$_withoutSlash$2(
                $async$result,
                $async$self._async_evaluate$_expressionNode$1(result)
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIfExpression$1, $async$completer);
    },
    visitNullExpression$1(node) {
      return this.visitNullExpression$body$_EvaluateVisitor(node);
    },
    visitNullExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue;
      var $async$visitNullExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.C__SassNull0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitNullExpression$1, $async$completer);
    },
    visitNumberExpression$1(node) {
      return this.visitNumberExpression$body$_EvaluateVisitor(node);
    },
    visitNumberExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber),
        $async$returnValue,
        t1,
        t2;
      var $async$visitNumberExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.value;
              t2 = node.unit;
              $async$returnValue =
                t2 == null
                  ? new N.UnitlessSassNumber(t1, null)
                  : new L.SingleUnitSassNumber(t2, t1, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitNumberExpression$1,
        $async$completer
      );
    },
    visitParenthesizedExpression$1(node) {
      return node.expression.accept$1(this);
    },
    visitColorExpression$1(node) {
      return this.visitColorExpression$body$_EvaluateVisitor(node);
    },
    visitColorExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassColor),
        $async$returnValue;
      var $async$visitColorExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitColorExpression$1, $async$completer);
    },
    visitListExpression$1(node) {
      return this.visitListExpression$body$_EvaluateVisitor(node);
    },
    visitListExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassList),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$visitListExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = D;
              $async$goto = 3;
              return P._asyncAwait(
                B.mapAsync(
                  node.contents,
                  new E._EvaluateVisitor_visitListExpression_closure0(
                    $async$self
                  ),
                  type$.Expression,
                  type$.Value
                ),
                $async$visitListExpression$1
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.SassList$(
                $async$result,
                node.separator,
                node.hasBrackets
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitListExpression$1, $async$completer);
    },
    visitMapExpression$1(node) {
      return this.visitMapExpression$body$_EvaluateVisitor(node);
    },
    visitMapExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassMap),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        _i,
        pair,
        t4,
        keyValue,
        valueValue,
        oldValueSpan,
        t1,
        map,
        keyNodes;
      var $async$visitMapExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Value;
              map = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              keyNodes = P.LinkedHashMap_LinkedHashMap$_empty(
                t1,
                type$.AstNode
              );
              (t2 = node.pairs), (t3 = t2.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              pair = t2[_i];
              t4 = pair.item1;
              $async$goto = 6;
              return P._asyncAwait(
                t4.accept$1($async$self),
                $async$visitMapExpression$1
              );
            case 6:
              // returning from await.
              keyValue = $async$result;
              $async$goto = 7;
              return P._asyncAwait(
                pair.item2.accept$1($async$self),
                $async$visitMapExpression$1
              );
            case 7:
              // returning from await.
              valueValue = $async$result;
              if (map.$index(0, keyValue) != null) {
                t1 = keyNodes.$index(0, keyValue);
                oldValueSpan = t1 == null ? null : t1.get$span();
                t1 = t4.get$span();
                t2 = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.FileSpan,
                  type$.String
                );
                if (oldValueSpan != null)
                  t2.$indexSet(0, oldValueSpan, 'first key');
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$(
                    'Duplicate key.',
                    t1,
                    'second key',
                    t2,
                    $async$self._async_evaluate$_stackTrace$1(t4.get$span())
                  )
                );
              }
              map.$indexSet(0, keyValue, valueValue);
              keyNodes.$indexSet(0, keyValue, t4);
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = new A.SassMap(
                H.ConstantMap_ConstantMap$from(map, t1, t1)
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMapExpression$1, $async$completer);
    },
    visitFunctionExpression$1(node) {
      return this.visitFunctionExpression$body$_EvaluateVisitor(node);
    },
    visitFunctionExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        oldInFunction,
        result,
        t1,
        $function;
      var $async$visitFunctionExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                $function = $async$self._async_evaluate$_addExceptionSpan$2(
                  node,
                  new E._EvaluateVisitor_visitFunctionExpression_closure1(
                    $async$self,
                    node
                  )
                );
                t1.$function = $function;
                if ($function == null) {
                  if (node.namespace != null)
                    throw H.wrapException(
                      $async$self._async_evaluate$_exception$2(
                        'Undefined function.',
                        node.span
                      )
                    );
                  t1.$function = new L.PlainCssCallable(node.originalName);
                }
                oldInFunction = $async$self._async_evaluate$_inFunction;
                $async$self._async_evaluate$_inFunction = true;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_addErrorSpan$1$2(
                    node,
                    new E._EvaluateVisitor_visitFunctionExpression_closure2(
                      t1,
                      $async$self,
                      node
                    ),
                    type$.Value
                  ),
                  $async$visitFunctionExpression$1
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_inFunction = oldInFunction;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitFunctionExpression$1,
        $async$completer
      );
    },
    visitInterpolatedFunctionExpression$1(node) {
      return this.visitInterpolatedFunctionExpression$body$_EvaluateVisitor(
        node
      );
    },
    visitInterpolatedFunctionExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        result,
        t1,
        oldInFunction;
      var $async$visitInterpolatedFunctionExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$1(
                    node.name
                  ),
                  $async$visitInterpolatedFunctionExpression$1
                );
              case 3:
                // returning from await.
                t1 = $async$result;
                oldInFunction = $async$self._async_evaluate$_inFunction;
                $async$self._async_evaluate$_inFunction = true;
                $async$goto = 4;
                return P._asyncAwait(
                  $async$self._async_evaluate$_addErrorSpan$1$2(
                    node,
                    new E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure0(
                      $async$self,
                      node,
                      new L.PlainCssCallable(t1)
                    ),
                    type$.Value
                  ),
                  $async$visitInterpolatedFunctionExpression$1
                );
              case 4:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_inFunction = oldInFunction;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitInterpolatedFunctionExpression$1,
        $async$completer
      );
    },
    _async_evaluate$_getFunction$2$namespace($name, namespace) {
      var local = this._async_evaluate$_environment.getFunction$2$namespace(
        $name,
        namespace
      );
      if (local != null || namespace != null) return local;
      return this._async_evaluate$_builtInFunctions.$index(0, $name);
    },
    _async_evaluate$_runUserDefinedCallable$1$4(
      $arguments,
      callable,
      nodeWithSpan,
      run,
      $V
    ) {
      return this._runUserDefinedCallable$body$_EvaluateVisitor(
        $arguments,
        callable,
        nodeWithSpan,
        run,
        $V,
        $V
      );
    },
    _runUserDefinedCallable$body$_EvaluateVisitor(
      $arguments,
      callable,
      nodeWithSpan,
      run,
      $V,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        evaluated,
        $name;
      var $async$_async_evaluate$_runUserDefinedCallable$1$4 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_evaluateArguments$1($arguments),
                  $async$_async_evaluate$_runUserDefinedCallable$1$4
                );
              case 3:
                // returning from await.
                evaluated = $async$result;
                $name = callable.declaration.name;
                if ($name !== '@content') $name += '()';
                $async$goto = 4;
                return P._asyncAwait(
                  $async$self._async_evaluate$_withStackFrame$1$3(
                    $name,
                    nodeWithSpan,
                    new E._EvaluateVisitor__runUserDefinedCallable_closure0(
                      $async$self,
                      callable,
                      evaluated,
                      nodeWithSpan,
                      run,
                      $V
                    ),
                    $V
                  ),
                  $async$_async_evaluate$_runUserDefinedCallable$1$4
                );
              case 4:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_runUserDefinedCallable$1$4,
        $async$completer
      );
    },
    _async_evaluate$_runFunctionCallable$3($arguments, callable, nodeWithSpan) {
      return this._runFunctionCallable$body$_EvaluateVisitor(
        $arguments,
        callable,
        nodeWithSpan
      );
    },
    _runFunctionCallable$body$_EvaluateVisitor(
      $arguments,
      callable,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        first,
        _i,
        argument,
        restArg,
        rest,
        $async$temp1;
      var $async$_async_evaluate$_runFunctionCallable$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = type$.AsyncBuiltInCallable._is(callable) ? 3 : 5;
                break;
              case 3:
                // then
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate$_runBuiltInCallable$3(
                    $arguments,
                    callable,
                    nodeWithSpan
                  ),
                  $async$_async_evaluate$_runFunctionCallable$3
                );
              case 6:
                // returning from await.
                $async$returnValue = $async$self._async_evaluate$_withoutSlash$2(
                  $async$result,
                  nodeWithSpan
                );
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = type$.UserDefinedCallable_AsyncEnvironment._is(
                  callable
                )
                  ? 7
                  : 9;
                break;
              case 7:
                // then
                $async$goto = 10;
                return P._asyncAwait(
                  $async$self._async_evaluate$_runUserDefinedCallable$1$4(
                    $arguments,
                    callable,
                    nodeWithSpan,
                    new E._EvaluateVisitor__runFunctionCallable_closure0(
                      $async$self,
                      callable
                    ),
                    type$.Value
                  ),
                  $async$_async_evaluate$_runFunctionCallable$3
                );
              case 10:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = callable instanceof L.PlainCssCallable ? 11 : 13;
                break;
              case 11:
                // then
                t1 = $arguments.named;
                if (t1.get$isNotEmpty(t1) || $arguments.keywordRest != null)
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      string$.Plain_,
                      nodeWithSpan.get$span()
                    )
                  );
                t1 = callable.name + '(';
                (t2 = $arguments.positional),
                  (t3 = t2.length),
                  (first = true),
                  (_i = 0);
              case 14:
                // for condition
                if (!(_i < t3)) {
                  // goto after for
                  $async$goto = 16;
                  break;
                }
                argument = t2[_i];
                if (first) first = false;
                else t1 += ', ';
                $async$temp1 = H;
                $async$goto = 17;
                return P._asyncAwait(
                  $async$self._evaluateToCss$1(argument),
                  $async$_async_evaluate$_runFunctionCallable$3
                );
              case 17:
                // returning from await.
                t1 += $async$temp1.S($async$result);
              case 15:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 14;
                break;
              case 16:
                // after for
                restArg = $arguments.rest;
                $async$goto = restArg != null ? 18 : 19;
                break;
              case 18:
                // then
                $async$goto = 20;
                return P._asyncAwait(
                  restArg.accept$1($async$self),
                  $async$_async_evaluate$_runFunctionCallable$3
                );
              case 20:
                // returning from await.
                rest = $async$result;
                if (!first) t1 += ', ';
                t1 += $async$self._async_evaluate$_serialize$2(rest, restArg);
              case 19:
                // join
                t1 += H.Primitives_stringFromCharCode(41);
                $async$returnValue = new D.SassString(
                  t1.charCodeAt(0) == 0 ? t1 : t1,
                  false
                );
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 12;
                break;
              case 13:
                // else
                throw H.wrapException(
                  P.ArgumentError$(
                    'Unknown callable type ' +
                      J.get$runtimeType$u(callable).toString$0(0) +
                      '.',
                    null
                  )
                );
              case 12:
              // join
              case 8:
              // join
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_runFunctionCallable$3,
        $async$completer
      );
    },
    _async_evaluate$_runBuiltInCallable$3($arguments, callable, nodeWithSpan) {
      return this._runBuiltInCallable$body$_EvaluateVisitor(
        $arguments,
        callable,
        nodeWithSpan
      );
    },
    _runBuiltInCallable$body$_EvaluateVisitor(
      $arguments,
      callable,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        callback,
        result,
        error,
        error0,
        error1,
        message,
        namedSet,
        tuple,
        overload,
        declaredArguments,
        i,
        t1,
        argument,
        t2,
        t3,
        rest,
        argumentList,
        exception,
        message0,
        evaluated,
        oldCallableNode,
        $async$exception;
      var $async$_async_evaluate$_runBuiltInCallable$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_evaluateArguments$1($arguments),
                  $async$_async_evaluate$_runBuiltInCallable$3
                );
              case 3:
                // returning from await.
                evaluated = $async$result;
                oldCallableNode = $async$self._async_evaluate$_callableNode;
                $async$self._async_evaluate$_callableNode = nodeWithSpan;
                namedSet = new M.MapKeySet(
                  evaluated.named,
                  type$.MapKeySet_String
                );
                tuple = callable.callbackFor$2(
                  evaluated.positional.length,
                  namedSet
                );
                overload = tuple.item1;
                callback = tuple.item2;
                $async$self._async_evaluate$_addExceptionSpan$2(
                  nodeWithSpan,
                  new E._EvaluateVisitor__runBuiltInCallable_closure2(
                    overload,
                    evaluated,
                    namedSet
                  )
                );
                declaredArguments = overload.$arguments;
                (i = evaluated.positional.length),
                  (t1 = declaredArguments.length);
              case 4:
                // for condition
                if (!(i < t1)) {
                  // goto after for
                  $async$goto = 6;
                  break;
                }
                argument = declaredArguments[i];
                t2 = evaluated.positional;
                t3 = evaluated.named.remove$1(0, argument.name);
                $async$goto = t3 == null ? 7 : 8;
                break;
              case 7:
                // then
                t3 = argument.defaultValue;
                $async$goto = 9;
                return P._asyncAwait(
                  t3.accept$1($async$self),
                  $async$_async_evaluate$_runBuiltInCallable$3
                );
              case 9:
                // returning from await.
                t3 = $async$self._async_evaluate$_withoutSlash$2(
                  $async$result,
                  t3
                );
              case 8:
                // join
                t2.push(t3);
              case 5:
                // for update
                ++i;
                // goto for condition
                $async$goto = 4;
                break;
              case 6:
                // after for
                if (overload.restArgument != null) {
                  if (evaluated.positional.length > t1) {
                    rest = C.JSArray_methods.sublist$1(
                      evaluated.positional,
                      t1
                    );
                    C.JSArray_methods.removeRange$2(
                      evaluated.positional,
                      t1,
                      evaluated.positional.length
                    );
                  } else rest = C.List_empty5;
                  t1 = evaluated.named;
                  argumentList = D.SassArgumentList$(
                    rest,
                    t1,
                    evaluated.separator === C.ListSeparator_undecided_null
                      ? C.ListSeparator_kWM
                      : evaluated.separator
                  );
                  evaluated.positional.push(argumentList);
                } else argumentList = null;
                result = null;
                $async$handler = 11;
                t1 = type$.nullable_Object;
                $async$goto = 14;
                return P._asyncAwait(
                  P.runZoned(
                    new E._EvaluateVisitor__runBuiltInCallable_closure3(
                      callback,
                      evaluated
                    ),
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [C.Symbol__currentCallableNode, nodeWithSpan],
                      t1,
                      t1
                    ),
                    type$.FutureOr_Value
                  ),
                  $async$_async_evaluate$_runBuiltInCallable$3
                );
              case 14:
                // returning from await.
                result = $async$result;
                $async$handler = 2;
                // goto after finally
                $async$goto = 13;
                break;
              case 11:
                // catch
                $async$handler = 10;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (type$.SassRuntimeException._is(t1)) throw $async$exception;
                else if (t1 instanceof E.MultiSpanSassScriptException) {
                  error = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$(
                      error.message,
                      nodeWithSpan.get$span(),
                      error.primaryLabel,
                      error.secondarySpans,
                      $async$self._async_evaluate$_stackTrace$1(
                        nodeWithSpan.get$span()
                      )
                    )
                  );
                } else if (t1 instanceof E.MultiSpanSassException) {
                  error0 = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$(
                      error0._span_exception$_message,
                      error0.get$span(),
                      error0.primaryLabel,
                      error0.secondarySpans,
                      $async$self._async_evaluate$_stackTrace$1(
                        error0.get$span()
                      )
                    )
                  );
                } else {
                  error1 = t1;
                  message = null;
                  try {
                    message = H._asString(J.get$message$x(error1));
                  } catch (exception) {
                    H.unwrapException($async$exception);
                    message0 = J.toString$0$(error1);
                    message = message0;
                  }
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      message,
                      nodeWithSpan.get$span()
                    )
                  );
                }
                // goto after finally
                $async$goto = 13;
                break;
              case 10:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 13:
                // after finally
                $async$self._async_evaluate$_callableNode = oldCallableNode;
                if (argumentList == null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = evaluated.named;
                if (t1.get$isEmpty(t1)) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (argumentList._wereKeywordsAccessed) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = evaluated.named;
                t1 = t1.get$keys(t1);
                t1 =
                  'No ' +
                  B.pluralize('argument', t1.get$length(t1), null) +
                  ' named ';
                t2 = evaluated.named;
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$(
                    t1 +
                      H.S(
                        B.toSentence(
                          t2
                            .get$keys(t2)
                            .map$1$1(
                              0,
                              new E._EvaluateVisitor__runBuiltInCallable_closure4(),
                              type$.Object
                            ),
                          'or'
                        )
                      ) +
                      '.',
                    nodeWithSpan.get$span(),
                    'invocation',
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [overload.get$spanWithName(), 'declaration'],
                      type$.FileSpan,
                      type$.String
                    ),
                    $async$self._async_evaluate$_stackTrace$1(
                      nodeWithSpan.get$span()
                    )
                  )
                );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_runBuiltInCallable$3,
        $async$completer
      );
    },
    _async_evaluate$_evaluateArguments$1($arguments) {
      return this._evaluateArguments$body$_EvaluateVisitor($arguments);
    },
    _evaluateArguments$body$_EvaluateVisitor($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$._ArgumentResults),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i,
        expression,
        nodeForSpan,
        named,
        namedNodes,
        t3,
        t4,
        t5,
        restArgs,
        rest,
        restNodeForSpan,
        separator,
        keywordRestArgs,
        keywordRest,
        keywordRestNodeForSpan,
        positional,
        positionalNodes,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate$_evaluateArguments$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                positional = H._setArrayType([], type$.JSArray_Value);
                positionalNodes = H._setArrayType([], type$.JSArray_AstNode);
                (t1 = $arguments.positional), (t2 = t1.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                expression = t1[_i];
                nodeForSpan = $async$self._async_evaluate$_expressionNode$1(
                  expression
                );
                $async$temp1 = positional;
                $async$goto = 6;
                return P._asyncAwait(
                  expression.accept$1($async$self),
                  $async$_async_evaluate$_evaluateArguments$1
                );
              case 6:
                // returning from await.
                $async$temp1.push(
                  $async$self._async_evaluate$_withoutSlash$2(
                    $async$result,
                    nodeForSpan
                  )
                );
                positionalNodes.push(nodeForSpan);
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                t1 = type$.String;
                named = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value);
                t2 = type$.AstNode;
                namedNodes = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                (t3 = $arguments.named),
                  (t3 = t3.get$entries(t3)),
                  (t3 = t3.get$iterator(t3));
              case 7:
                // for condition
                if (!t3.moveNext$0()) {
                  // goto after for
                  $async$goto = 8;
                  break;
                }
                t4 = t3.get$current();
                t5 = t4.value;
                nodeForSpan = $async$self._async_evaluate$_expressionNode$1(t5);
                t4 = t4.key;
                $async$temp1 = named;
                $async$temp2 = t4;
                $async$goto = 9;
                return P._asyncAwait(
                  t5.accept$1($async$self),
                  $async$_async_evaluate$_evaluateArguments$1
                );
              case 9:
                // returning from await.
                $async$temp1.$indexSet(
                  0,
                  $async$temp2,
                  $async$self._async_evaluate$_withoutSlash$2(
                    $async$result,
                    nodeForSpan
                  )
                );
                namedNodes.$indexSet(0, t4, nodeForSpan);
                // goto for condition
                $async$goto = 7;
                break;
              case 8:
                // after for
                restArgs = $arguments.rest;
                if (restArgs == null) {
                  $async$returnValue = new E._ArgumentResults0(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    C.ListSeparator_undecided_null
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 10;
                return P._asyncAwait(
                  restArgs.accept$1($async$self),
                  $async$_async_evaluate$_evaluateArguments$1
                );
              case 10:
                // returning from await.
                rest = $async$result;
                restNodeForSpan = $async$self._async_evaluate$_expressionNode$1(
                  restArgs
                );
                if (rest instanceof A.SassMap) {
                  $async$self._async_evaluate$_addRestMap$4(
                    named,
                    rest,
                    restArgs,
                    new E._EvaluateVisitor__evaluateArguments_closure3()
                  );
                  t3 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                  for (
                    t4 = rest.contents,
                      t4 = J.get$iterator$ax(t4.get$keys(t4)),
                      t5 = type$.SassString;
                    t4.moveNext$0();

                  )
                    t3.$indexSet(
                      0,
                      t5._as(t4.get$current()).text,
                      restNodeForSpan
                    );
                  namedNodes.addAll$1(0, t3);
                  separator = C.ListSeparator_undecided_null;
                } else if (rest instanceof D.SassList) {
                  t3 = rest._list$_contents;
                  C.JSArray_methods.addAll$1(
                    positional,
                    new H.MappedListIterable(
                      t3,
                      new E._EvaluateVisitor__evaluateArguments_closure4(
                        $async$self,
                        restNodeForSpan
                      ),
                      H._arrayInstanceType(t3)._eval$1(
                        'MappedListIterable<1,Value>'
                      )
                    )
                  );
                  C.JSArray_methods.addAll$1(
                    positionalNodes,
                    P.List_List$filled(t3.length, restNodeForSpan, false, t2)
                  );
                  separator = rest.separator;
                  if (rest instanceof D.SassArgumentList) {
                    rest._wereKeywordsAccessed = true;
                    rest._keywords.forEach$1(
                      0,
                      new E._EvaluateVisitor__evaluateArguments_closure5(
                        $async$self,
                        named,
                        restNodeForSpan,
                        namedNodes
                      )
                    );
                  }
                } else {
                  positional.push(
                    $async$self._async_evaluate$_withoutSlash$2(
                      rest,
                      restNodeForSpan
                    )
                  );
                  positionalNodes.push(restNodeForSpan);
                  separator = C.ListSeparator_undecided_null;
                }
                keywordRestArgs = $arguments.keywordRest;
                if (keywordRestArgs == null) {
                  $async$returnValue = new E._ArgumentResults0(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    separator
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 11;
                return P._asyncAwait(
                  keywordRestArgs.accept$1($async$self),
                  $async$_async_evaluate$_evaluateArguments$1
                );
              case 11:
                // returning from await.
                keywordRest = $async$result;
                keywordRestNodeForSpan = $async$self._async_evaluate$_expressionNode$1(
                  keywordRestArgs
                );
                if (keywordRest instanceof A.SassMap) {
                  $async$self._async_evaluate$_addRestMap$4(
                    named,
                    keywordRest,
                    keywordRestArgs,
                    new E._EvaluateVisitor__evaluateArguments_closure6()
                  );
                  t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                  for (
                    t2 = keywordRest.contents,
                      t2 = J.get$iterator$ax(t2.get$keys(t2)),
                      t3 = type$.SassString;
                    t2.moveNext$0();

                  )
                    t1.$indexSet(
                      0,
                      t3._as(t2.get$current()).text,
                      keywordRestNodeForSpan
                    );
                  namedNodes.addAll$1(0, t1);
                  $async$returnValue = new E._ArgumentResults0(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    separator
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      string$.Variabs + keywordRest.toString$0(0) + ').',
                      keywordRestArgs.get$span()
                    )
                  );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_evaluateArguments$1,
        $async$completer
      );
    },
    _async_evaluate$_evaluateMacroArguments$1(invocation) {
      return this._evaluateMacroArguments$body$_EvaluateVisitor(invocation);
    },
    _evaluateMacroArguments$body$_EvaluateVisitor(invocation) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.Tuple2_of_List_Expression_and_Map_String_Expression
        ),
        $async$returnValue,
        $async$self = this,
        t2,
        positional,
        named,
        rest,
        restNodeForSpan,
        keywordRestArgs_,
        keywordRest,
        keywordRestNodeForSpan,
        t1,
        restArgs_;
      var $async$_async_evaluate$_evaluateMacroArguments$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = invocation.$arguments;
                restArgs_ = t1.rest;
                if (restArgs_ == null) {
                  $async$returnValue = new S.Tuple2(
                    t1.positional,
                    t1.named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = t1.positional;
                positional = H._setArrayType(
                  t2.slice(0),
                  H._arrayInstanceType(t2)
                );
                named = P.LinkedHashMap_LinkedHashMap$of(
                  t1.named,
                  type$.String,
                  type$.Expression
                );
                $async$goto = 3;
                return P._asyncAwait(
                  restArgs_.accept$1($async$self),
                  $async$_async_evaluate$_evaluateMacroArguments$1
                );
              case 3:
                // returning from await.
                rest = $async$result;
                restNodeForSpan = $async$self._async_evaluate$_expressionNode$1(
                  restArgs_
                );
                if (rest instanceof A.SassMap)
                  $async$self._async_evaluate$_addRestMap$4(
                    named,
                    rest,
                    invocation,
                    new E._EvaluateVisitor__evaluateMacroArguments_closure3(
                      restArgs_
                    )
                  );
                else if (rest instanceof D.SassList) {
                  t2 = rest._list$_contents;
                  C.JSArray_methods.addAll$1(
                    positional,
                    new H.MappedListIterable(
                      t2,
                      new E._EvaluateVisitor__evaluateMacroArguments_closure4(
                        $async$self,
                        restNodeForSpan,
                        restArgs_
                      ),
                      H._arrayInstanceType(t2)._eval$1(
                        'MappedListIterable<1,Expression>'
                      )
                    )
                  );
                  if (rest instanceof D.SassArgumentList) {
                    rest._wereKeywordsAccessed = true;
                    rest._keywords.forEach$1(
                      0,
                      new E._EvaluateVisitor__evaluateMacroArguments_closure5(
                        $async$self,
                        named,
                        restNodeForSpan,
                        restArgs_
                      )
                    );
                  }
                } else
                  positional.push(
                    new F.ValueExpression(
                      $async$self._async_evaluate$_withoutSlash$2(
                        rest,
                        restNodeForSpan
                      ),
                      restArgs_.get$span()
                    )
                  );
                keywordRestArgs_ = t1.keywordRest;
                if (keywordRestArgs_ == null) {
                  $async$returnValue = new S.Tuple2(
                    positional,
                    named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 4;
                return P._asyncAwait(
                  keywordRestArgs_.accept$1($async$self),
                  $async$_async_evaluate$_evaluateMacroArguments$1
                );
              case 4:
                // returning from await.
                keywordRest = $async$result;
                keywordRestNodeForSpan = $async$self._async_evaluate$_expressionNode$1(
                  keywordRestArgs_
                );
                if (keywordRest instanceof A.SassMap) {
                  $async$self._async_evaluate$_addRestMap$4(
                    named,
                    keywordRest,
                    invocation,
                    new E._EvaluateVisitor__evaluateMacroArguments_closure6(
                      $async$self,
                      keywordRestNodeForSpan,
                      keywordRestArgs_
                    )
                  );
                  $async$returnValue = new S.Tuple2(
                    positional,
                    named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      string$.Variabs + keywordRest.toString$0(0) + ').',
                      keywordRestArgs_.get$span()
                    )
                  );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_evaluateMacroArguments$1,
        $async$completer
      );
    },
    _async_evaluate$_addRestMap$1$4(values, map, nodeWithSpan, convert) {
      map.contents.forEach$1(
        0,
        new E._EvaluateVisitor__addRestMap_closure0(
          this,
          values,
          convert,
          this._async_evaluate$_expressionNode$1(nodeWithSpan),
          map,
          nodeWithSpan
        )
      );
    },
    _async_evaluate$_addRestMap$4(values, map, nodeWithSpan, convert) {
      return this._async_evaluate$_addRestMap$1$4(
        values,
        map,
        nodeWithSpan,
        convert,
        type$.dynamic
      );
    },
    _async_evaluate$_verifyArguments$4(
      positional,
      named,
      $arguments,
      nodeWithSpan
    ) {
      return this._async_evaluate$_addExceptionSpan$2(
        nodeWithSpan,
        new E._EvaluateVisitor__verifyArguments_closure0(
          $arguments,
          positional,
          named
        )
      );
    },
    visitSelectorExpression$1(node) {
      return this.visitSelectorExpression$body$_EvaluateVisitor(node);
    },
    visitSelectorExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$visitSelectorExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate$_styleRuleIgnoringAtRoot;
                t1 = t1 == null ? null : t1.originalSelector.get$asSassList();
                $async$returnValue = t1 == null ? C.C__SassNull0 : t1;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitSelectorExpression$1,
        $async$completer
      );
    },
    visitStringExpression$1(node) {
      return this.visitStringExpression$body$_EvaluateVisitor(node);
    },
    visitStringExpression$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassString),
        $async$returnValue,
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$visitStringExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = D;
              $async$temp2 = J;
              $async$goto = 3;
              return P._asyncAwait(
                B.mapAsync(
                  node.text.contents,
                  new E._EvaluateVisitor_visitStringExpression_closure0(
                    $async$self
                  ),
                  type$.Object,
                  type$.String
                ),
                $async$visitStringExpression$1
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.SassString(
                $async$temp2.join$0$ax($async$result),
                node.hasQuotes
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitStringExpression$1,
        $async$completer
      );
    },
    visitCssAtRule$1(node) {
      return this.visitCssAtRule$body$_EvaluateVisitor(node);
    },
    visitCssAtRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        wasInKeyframes,
        wasInUnknownAtRule,
        t1;
      var $async$visitCssAtRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.At_rul,
                    node.span
                  )
                );
              if (node.isChildless) {
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__parent,
                    '__parent'
                  )
                  .addChild$1(
                    U.ModifiableCssAtRule$(
                      node.name,
                      node.span,
                      true,
                      node.value
                    )
                  );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate$_inKeyframes;
              wasInUnknownAtRule = $async$self._async_evaluate$_inUnknownAtRule;
              t1 = node.name;
              if (B.unvendor(t1.get$value(t1)) === 'keyframes')
                $async$self._async_evaluate$_inKeyframes = true;
              else $async$self._async_evaluate$_inUnknownAtRule = true;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssAtRule$(t1, node.span, false, node.value),
                  new E._EvaluateVisitor_visitCssAtRule_closure1(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssAtRule_closure2(),
                  type$.ModifiableCssAtRule,
                  type$.Null
                ),
                $async$visitCssAtRule$1
              );
            case 3:
              // returning from await.
              $async$self._async_evaluate$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate$_inKeyframes = wasInKeyframes;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssAtRule$1, $async$completer);
    },
    visitCssComment$1(node) {
      return this.visitCssComment$body$_EvaluateVisitor(node);
    },
    visitCssComment$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ) ===
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__root,
                    '_root'
                  ) &&
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__endOfImports,
                  '_endOfImports'
                ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate$_assertInModule$2(
                      $async$self._async_evaluate$__root,
                      '_root'
                    ).children._collection$_source
                  )
              )
                $async$self._async_evaluate$__endOfImports =
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              $async$self
                ._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                )
                .addChild$1(new R.ModifiableCssComment(node.text, node.span));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssComment$1, $async$completer);
    },
    visitCssDeclaration$1(node) {
      return this.visitCssDeclaration$body$_EvaluateVisitor(node);
    },
    visitCssDeclaration$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1;
      var $async$visitCssDeclaration$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.name;
              $async$self
                ._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                )
                .addChild$1(
                  L.ModifiableCssDeclaration$(
                    t1,
                    node.value,
                    node.span,
                    J.startsWith$1$s(t1.get$value(t1), '--'),
                    node.valueSpanForMap
                  )
                );
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssDeclaration$1, $async$completer);
    },
    visitCssImport$1(node) {
      return this.visitCssImport$body$_EvaluateVisitor(node);
    },
    visitCssImport$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        modifiableNode;
      var $async$visitCssImport$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              modifiableNode = F.ModifiableCssImport$(
                node.url,
                node.span,
                node.media,
                node.supports
              );
              if (
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ) !==
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__root,
                  '_root'
                )
              )
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__parent,
                    '__parent'
                  )
                  .addChild$1(modifiableNode);
              else if (
                $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__endOfImports,
                  '_endOfImports'
                ) ===
                J.get$length$asx(
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__root,
                    '_root'
                  ).children._collection$_source
                )
              ) {
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__root,
                    '_root'
                  )
                  .addChild$1(modifiableNode);
                $async$self._async_evaluate$__endOfImports =
                  $async$self._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              } else {
                t1 = $async$self._async_evaluate$_outOfOrderImports;
                (t1 == null
                  ? ($async$self._async_evaluate$_outOfOrderImports = H._setArrayType(
                      [],
                      type$.JSArray_ModifiableCssImport
                    ))
                  : t1
                ).push(modifiableNode);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssImport$1, $async$completer);
    },
    visitCssKeyframeBlock$1(node) {
      return this.visitCssKeyframeBlock$body$_EvaluateVisitor(node);
    },
    visitCssKeyframeBlock$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssKeyframeBlock$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssKeyframeBlock$(node.selector, node.span),
                  new E._EvaluateVisitor_visitCssKeyframeBlock_closure1(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssKeyframeBlock_closure2(),
                  type$.ModifiableCssKeyframeBlock,
                  type$.Null
                ),
                $async$visitCssKeyframeBlock$1
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitCssKeyframeBlock$1,
        $async$completer
      );
    },
    visitCssMediaRule$1(node) {
      return this.visitCssMediaRule$body$_EvaluateVisitor(node);
    },
    visitCssMediaRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        mergedQueries,
        t1;
      var $async$visitCssMediaRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Media_,
                    node.span
                  )
                );
              mergedQueries = X.NullableExtension_andThen(
                $async$self._async_evaluate$_mediaQueries,
                new E._EvaluateVisitor_visitCssMediaRule_closure2(
                  $async$self,
                  node
                )
              );
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? node.queries : mergedQueries;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  G.ModifiableCssMediaRule$(t1, node.span),
                  new E._EvaluateVisitor_visitCssMediaRule_closure3(
                    $async$self,
                    mergedQueries,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssMediaRule_closure4(
                    mergedQueries
                  ),
                  type$.ModifiableCssMediaRule,
                  type$.Null
                ),
                $async$visitCssMediaRule$1
              );
            case 3:
            // returning from await.
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssMediaRule$1, $async$completer);
    },
    visitCssStyleRule$1(node) {
      return this.visitCssStyleRule$body$_EvaluateVisitor(node);
    },
    visitCssStyleRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        styleRule,
        t2,
        t3,
        t4,
        t5,
        originalSelector,
        rule,
        oldAtRootExcludingStyleRule;
      var $async$visitCssStyleRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Style_,
                    node.span
                  )
                );
              t1 = $async$self._async_evaluate$_atRootExcludingStyleRule;
              styleRule = t1
                ? null
                : $async$self._async_evaluate$_styleRuleIgnoringAtRoot;
              t2 = node.selector;
              t3 = t2.value;
              t4 = styleRule == null;
              t5 = t4 ? null : styleRule.originalSelector;
              originalSelector = t3.resolveParentSelectors$2$implicitParent(
                t5,
                !t1
              );
              rule = X.ModifiableCssStyleRule$(
                $async$self
                  ._async_evaluate$_assertInModule$2(
                    $async$self._async_evaluate$__extensionStore,
                    '_extensionStore'
                  )
                  .addSelector$3(
                    originalSelector,
                    t2.span,
                    $async$self._async_evaluate$_mediaQueries
                  ),
                node.span,
                originalSelector
              );
              oldAtRootExcludingStyleRule =
                $async$self._async_evaluate$_atRootExcludingStyleRule;
              $async$self._async_evaluate$_atRootExcludingStyleRule = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  rule,
                  new E._EvaluateVisitor_visitCssStyleRule_closure1(
                    $async$self,
                    rule,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssStyleRule_closure2(),
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$visitCssStyleRule$1
              );
            case 2:
              // returning from await.
              $async$self._async_evaluate$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if (t4) {
                t1 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ).children;
                t1 = !t1.get$isEmpty(t1);
              } else t1 = false;
              if (t1) {
                t1 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                ).children;
                t1.get$last(t1).isGroupEnd = true;
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssStyleRule$1, $async$completer);
    },
    visitCssStylesheet$1(node) {
      return this.visitCssStylesheet$body$_EvaluateVisitor(node);
    },
    visitCssStylesheet$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1;
      var $async$visitCssStylesheet$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$iterator$ax(node.get$children(node));
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t1.get$current().accept$1($async$self),
                $async$visitCssStylesheet$1
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssStylesheet$1, $async$completer);
    },
    visitCssSupportsRule$1(node) {
      return this.visitCssSupportsRule$body$_EvaluateVisitor(node);
    },
    visitCssSupportsRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssSupportsRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate$_exception$2(
                    string$.Suppor,
                    node.span
                  )
                );
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate$_withParent$2$4$scopeWhen$through(
                  B.ModifiableCssSupportsRule$(node.condition, node.span),
                  new E._EvaluateVisitor_visitCssSupportsRule_closure1(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssSupportsRule_closure2(),
                  type$.ModifiableCssSupportsRule,
                  type$.Null
                ),
                $async$visitCssSupportsRule$1
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssSupportsRule$1, $async$completer);
    },
    _async_evaluate$_handleReturn$1$2(list, callback) {
      return this._handleReturn$body$_EvaluateVisitor(list, callback);
    },
    _async_evaluate$_handleReturn$2(list, callback) {
      return this._async_evaluate$_handleReturn$1$2(
        list,
        callback,
        type$.dynamic
      );
    },
    _handleReturn$body$_EvaluateVisitor(list, callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        t1,
        _i,
        result;
      var $async$_async_evaluate$_handleReturn$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = list.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < list.length)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                $async$goto = 6;
                return P._asyncAwait(
                  callback.call$1(list[_i]),
                  $async$_async_evaluate$_handleReturn$1$2
                );
              case 6:
                // returning from await.
                result = $async$result;
                if (result != null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 4:
                // for update
                list.length === t1 ||
                  (0, H.throwConcurrentModificationError)(list),
                  ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_handleReturn$1$2,
        $async$completer
      );
    },
    _async_evaluate$_withEnvironment$1$2(environment, callback, $T) {
      return this._withEnvironment$body$_EvaluateVisitor(
        environment,
        callback,
        $T,
        $T
      );
    },
    _withEnvironment$body$_EvaluateVisitor(
      environment,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldEnvironment;
      var $async$_async_evaluate$_withEnvironment$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldEnvironment = $async$self._async_evaluate$_environment;
                $async$self._async_evaluate$_environment = environment;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate$_withEnvironment$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_environment = oldEnvironment;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_withEnvironment$1$2,
        $async$completer
      );
    },
    _async_evaluate$_interpolationToValue$3$trim$warnForColor(
      interpolation,
      trim,
      warnForColor
    ) {
      return this._interpolationToValue$body$_EvaluateVisitor(
        interpolation,
        trim,
        warnForColor
      );
    },
    _async_evaluate$_interpolationToValue$1(interpolation) {
      return this._async_evaluate$_interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        false
      );
    },
    _async_evaluate$_interpolationToValue$2$warnForColor(
      interpolation,
      warnForColor
    ) {
      return this._async_evaluate$_interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        warnForColor
      );
    },
    _interpolationToValue$body$_EvaluateVisitor(
      interpolation,
      trim,
      warnForColor
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_String),
        $async$returnValue,
        $async$self = this,
        result,
        t1;
      var $async$_async_evaluate$_interpolationToValue$3$trim$warnForColor = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_performInterpolation$2$warnForColor(
                    interpolation,
                    warnForColor
                  ),
                  $async$_async_evaluate$_interpolationToValue$3$trim$warnForColor
                );
              case 3:
                // returning from await.
                result = $async$result;
                t1 = trim ? B.trimAscii(result, true) : result;
                $async$returnValue = new F.CssValue(
                  t1,
                  interpolation.span,
                  type$.CssValue_String
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_interpolationToValue$3$trim$warnForColor,
        $async$completer
      );
    },
    _async_evaluate$_performInterpolation$2$warnForColor(
      interpolation,
      warnForColor
    ) {
      return this._performInterpolation$body$_EvaluateVisitor(
        interpolation,
        warnForColor
      );
    },
    _async_evaluate$_performInterpolation$1(interpolation) {
      return this._async_evaluate$_performInterpolation$2$warnForColor(
        interpolation,
        false
      );
    },
    _performInterpolation$body$_EvaluateVisitor(interpolation, warnForColor) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$_async_evaluate$_performInterpolation$2$warnForColor = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncAwait(
                  B.mapAsync(
                    interpolation.contents,
                    new E._EvaluateVisitor__performInterpolation_closure0(
                      $async$self,
                      warnForColor,
                      interpolation
                    ),
                    type$.Object,
                    type$.String
                  ),
                  $async$_async_evaluate$_performInterpolation$2$warnForColor
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$temp1.join$0$ax($async$result);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_performInterpolation$2$warnForColor,
        $async$completer
      );
    },
    _evaluateToCss$2$quote(expression, quote) {
      return this._evaluateToCss$body$_EvaluateVisitor(expression, quote);
    },
    _evaluateToCss$1(expression) {
      return this._evaluateToCss$2$quote(expression, true);
    },
    _evaluateToCss$body$_EvaluateVisitor(expression, quote) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this;
      var $async$_evaluateToCss$2$quote = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                expression.accept$1($async$self),
                $async$_evaluateToCss$2$quote
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate$_serialize$3$quote(
                $async$result,
                expression,
                quote
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_evaluateToCss$2$quote, $async$completer);
    },
    _async_evaluate$_serialize$3$quote(value, nodeWithSpan, quote) {
      return this._async_evaluate$_addExceptionSpan$2(
        nodeWithSpan,
        new E._EvaluateVisitor__serialize_closure0(value, quote)
      );
    },
    _async_evaluate$_serialize$2(value, nodeWithSpan) {
      return this._async_evaluate$_serialize$3$quote(value, nodeWithSpan, true);
    },
    _async_evaluate$_expressionNode$1(expression) {
      var t1;
      if (expression instanceof S.VariableExpression) {
        t1 = this._async_evaluate$_addExceptionSpan$2(
          expression,
          new E._EvaluateVisitor__expressionNode_closure0(this, expression)
        );
        return t1 == null ? expression : t1;
      } else return expression;
    },
    _async_evaluate$_withParent$2$4$scopeWhen$through(
      node,
      callback,
      scopeWhen,
      through,
      $S,
      $T
    ) {
      return this._withParent$body$_EvaluateVisitor(
        node,
        callback,
        scopeWhen,
        through,
        $S,
        $T,
        $T
      );
    },
    _async_evaluate$_withParent$2$2(node, callback, $S, $T) {
      return this._async_evaluate$_withParent$2$4$scopeWhen$through(
        node,
        callback,
        true,
        null,
        $S,
        $T
      );
    },
    _async_evaluate$_withParent$2$3$scopeWhen(
      node,
      callback,
      scopeWhen,
      $S,
      $T
    ) {
      return this._async_evaluate$_withParent$2$4$scopeWhen$through(
        node,
        callback,
        scopeWhen,
        null,
        $S,
        $T
      );
    },
    _withParent$body$_EvaluateVisitor(
      node,
      callback,
      scopeWhen,
      through,
      $S,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$_async_evaluate$_withParent$2$4$scopeWhen$through = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self._async_evaluate$_addChild$2$through(node, through);
                t1 = $async$self._async_evaluate$_assertInModule$2(
                  $async$self._async_evaluate$__parent,
                  '__parent'
                );
                $async$self._async_evaluate$__parent = node;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate$_environment.scope$1$2$when(
                    callback,
                    scopeWhen,
                    $T
                  ),
                  $async$_async_evaluate$_withParent$2$4$scopeWhen$through
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$__parent = t1;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_withParent$2$4$scopeWhen$through,
        $async$completer
      );
    },
    _async_evaluate$_addChild$2$through(node, through) {
      var grandparent,
        t1,
        $parent = this._async_evaluate$_assertInModule$2(
          this._async_evaluate$__parent,
          '__parent'
        );
      if (through != null) {
        for (; through.call$1($parent); $parent = grandparent) {
          grandparent = $parent._parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(string$.throug + node.toString$0(0) + '.', null)
            );
        }
        if ($parent.get$hasFollowingSibling()) {
          t1 = $parent._parent;
          t1.toString;
          $parent = $parent.copyWithoutChildren$0();
          t1.addChild$1($parent);
        }
      }
      $parent.addChild$1(node);
    },
    _async_evaluate$_addChild$1(node) {
      return this._async_evaluate$_addChild$2$through(node, null);
    },
    _async_evaluate$_withStyleRule$1$2(rule, callback, $T) {
      return this._withStyleRule$body$_EvaluateVisitor(rule, callback, $T, $T);
    },
    _withStyleRule$body$_EvaluateVisitor(rule, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldRule;
      var $async$_async_evaluate$_withStyleRule$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldRule = $async$self._async_evaluate$_styleRuleIgnoringAtRoot;
                $async$self._async_evaluate$_styleRuleIgnoringAtRoot = rule;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate$_withStyleRule$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_styleRuleIgnoringAtRoot = oldRule;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_withStyleRule$1$2,
        $async$completer
      );
    },
    _async_evaluate$_withMediaQueries$1$2(queries, callback, $T) {
      return this._withMediaQueries$body$_EvaluateVisitor(
        queries,
        callback,
        $T,
        $T
      );
    },
    _withMediaQueries$body$_EvaluateVisitor(
      queries,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldMediaQueries;
      var $async$_async_evaluate$_withMediaQueries$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldMediaQueries = $async$self._async_evaluate$_mediaQueries;
                $async$self._async_evaluate$_mediaQueries = queries;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate$_withMediaQueries$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_mediaQueries = oldMediaQueries;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_withMediaQueries$1$2,
        $async$completer
      );
    },
    _async_evaluate$_withStackFrame$1$3(member, nodeWithSpan, callback, $T) {
      return this._withStackFrame$body$_EvaluateVisitor(
        member,
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _withStackFrame$body$_EvaluateVisitor(
      member,
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        oldMember,
        result,
        t1;
      var $async$_async_evaluate$_withStackFrame$1$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate$_stack;
                t1.push(
                  new S.Tuple2(
                    $async$self._async_evaluate$_member,
                    nodeWithSpan,
                    type$.Tuple2_String_AstNode
                  )
                );
                oldMember = $async$self._async_evaluate$_member;
                $async$self._async_evaluate$_member = member;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate$_withStackFrame$1$3
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate$_member = oldMember;
                t1.pop();
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_withStackFrame$1$3,
        $async$completer
      );
    },
    _async_evaluate$_withoutSlash$2(value, nodeForSpan) {
      if (value instanceof T.SassNumber && value.asSlash != null)
        this._async_evaluate$_warn$3$deprecation(
          string$.Using__ +
            H.S(
              new E._EvaluateVisitor__withoutSlash_recommendation0().call$1(
                value
              )
            ) +
            string$.x0a_More,
          nodeForSpan.get$span(),
          true
        );
      return value.withoutSlash$0();
    },
    _async_evaluate$_stackFrame$2(member, span) {
      return B.frameForSpan(
        span,
        member,
        X.NullableExtension_andThen(
          span.file.url,
          new E._EvaluateVisitor__stackFrame_closure0(this)
        )
      );
    },
    _async_evaluate$_stackTrace$1(span) {
      var _this = this,
        t1 = _this._async_evaluate$_stack;
      t1 = P.List_List$of(
        new H.MappedListIterable(
          t1,
          new E._EvaluateVisitor__stackTrace_closure0(_this),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Frame>')
        ),
        true,
        type$.Frame
      );
      if (span != null)
        t1.push(
          _this._async_evaluate$_stackFrame$2(
            _this._async_evaluate$_member,
            span
          )
        );
      return Y.Trace$(
        new H.ReversedListIterable(
          t1,
          H._arrayInstanceType(t1)._eval$1('ReversedListIterable<1>')
        ),
        null
      );
    },
    _async_evaluate$_stackTrace$0() {
      return this._async_evaluate$_stackTrace$1(null);
    },
    _async_evaluate$_warn$3$deprecation(message, span, deprecation) {
      var _this = this;
      if (
        _this._async_evaluate$_quietDeps &&
        _this._async_evaluate$_inDependency
      )
        return;
      if (
        !_this._async_evaluate$_warningsEmitted.add$1(
          0,
          new S.Tuple2(message, span, type$.Tuple2_String_SourceSpan)
        )
      )
        return;
      _this._async_evaluate$_logger.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        _this._async_evaluate$_stackTrace$1(span)
      );
    },
    _async_evaluate$_warn$2(message, span) {
      return this._async_evaluate$_warn$3$deprecation(message, span, false);
    },
    _async_evaluate$_exception$2(message, span) {
      var t1 =
        span == null
          ? C.JSArray_methods.get$last(
              this._async_evaluate$_stack
            ).item2.get$span()
          : span;
      return new E.SassRuntimeException(
        this._async_evaluate$_stackTrace$1(span),
        message,
        t1
      );
    },
    _async_evaluate$_exception$1(message) {
      return this._async_evaluate$_exception$2(message, null);
    },
    _async_evaluate$_multiSpanException$3(
      message,
      primaryLabel,
      secondaryLabels
    ) {
      var t1 = C.JSArray_methods.get$last(
        this._async_evaluate$_stack
      ).item2.get$span();
      return new E.MultiSpanSassRuntimeException(
        this._async_evaluate$_stackTrace$0(),
        primaryLabel,
        H.ConstantMap_ConstantMap$from(
          secondaryLabels,
          type$.FileSpan,
          type$.String
        ),
        message,
        t1
      );
    },
    _async_evaluate$_adjustParseError$1$2(nodeWithSpan, callback) {
      var error,
        errorText,
        span,
        syntheticFile,
        syntheticSpan,
        t1,
        exception,
        t2,
        t3,
        t4,
        t5,
        _null = null;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException) {
          error = t1;
          t1 = error;
          errorText = P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              G.SourceSpanException.prototype.get$span.call(t1).file
                ._decodedChars,
              0,
              _null
            ),
            0,
            _null
          );
          span = nodeWithSpan.get$span();
          t1 = span;
          t2 = span;
          syntheticFile = C.JSString_methods.replaceRange$3(
            P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                span.file._decodedChars,
                0,
                _null
              ),
              0,
              _null
            ),
            Y.FileLocation$_(t1.file, t1._file$_start).offset,
            Y.FileLocation$_(t2.file, t2._end).offset,
            errorText
          );
          t2 = Y.SourceFile$fromString(syntheticFile, span.file.url);
          t1 = span;
          t1 = Y.FileLocation$_(t1.file, t1._file$_start);
          t3 = error;
          t3 = G.SourceSpanException.prototype.get$span.call(t3);
          t3 = Y.FileLocation$_(t3.file, t3._file$_start);
          t4 = span;
          t4 = Y.FileLocation$_(t4.file, t4._file$_start);
          t5 = error;
          t5 = G.SourceSpanException.prototype.get$span.call(t5);
          syntheticSpan = t2.span$2(
            t1.offset + t3.offset,
            t4.offset + Y.FileLocation$_(t5.file, t5._end).offset
          );
          throw H.wrapException(
            this._async_evaluate$_exception$2(
              error._span_exception$_message,
              syntheticSpan
            )
          );
        } else throw exception;
      }
    },
    _async_evaluate$_adjustParseError$2(nodeWithSpan, callback) {
      return this._async_evaluate$_adjustParseError$1$2(
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _async_evaluate$_addExceptionSpan$1$2(nodeWithSpan, callback) {
      var error, error0, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.MultiSpanSassScriptException) {
          error = t1;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              error.message,
              nodeWithSpan.get$span(),
              error.primaryLabel,
              error.secondarySpans,
              this._async_evaluate$_stackTrace$1(nodeWithSpan.get$span())
            )
          );
        } else if (t1 instanceof E.SassScriptException) {
          error0 = t1;
          throw H.wrapException(
            this._async_evaluate$_exception$2(
              error0.message,
              nodeWithSpan.get$span()
            )
          );
        } else throw exception;
      }
    },
    _async_evaluate$_addExceptionSpan$2(nodeWithSpan, callback) {
      return this._async_evaluate$_addExceptionSpan$1$2(
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _addExceptionSpanAsync$1$2(nodeWithSpan, callback, $T) {
      return this._addExceptionSpanAsync$body$_EvaluateVisitor(
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _addExceptionSpanAsync$body$_EvaluateVisitor(
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        error,
        error0,
        t1,
        exception,
        $async$exception;
      var $async$_addExceptionSpanAsync$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$handler = 4;
                $async$goto = 7;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_addExceptionSpanAsync$1$2
                );
              case 7:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof E.MultiSpanSassScriptException) {
                  error = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$(
                      error.message,
                      nodeWithSpan.get$span(),
                      error.primaryLabel,
                      error.secondarySpans,
                      $async$self._async_evaluate$_stackTrace$1(
                        nodeWithSpan.get$span()
                      )
                    )
                  );
                } else if (t1 instanceof E.SassScriptException) {
                  error0 = t1;
                  throw H.wrapException(
                    $async$self._async_evaluate$_exception$2(
                      error0.message,
                      nodeWithSpan.get$span()
                    )
                  );
                } else throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_addExceptionSpanAsync$1$2,
        $async$completer
      );
    },
    _async_evaluate$_addErrorSpan$1$2(nodeWithSpan, callback, $T) {
      return this._addErrorSpan$body$_EvaluateVisitor(
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _addErrorSpan$body$_EvaluateVisitor(
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        error,
        t1,
        exception,
        $async$exception;
      var $async$_async_evaluate$_addErrorSpan$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$handler = 4;
                $async$goto = 7;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate$_addErrorSpan$1$2
                );
              case 7:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (type$.SassRuntimeException._is(t1)) {
                  error = t1;
                  t1 = error.get$span();
                  if (
                    !C.JSString_methods.startsWith$1(
                      P.String_String$fromCharCodes(
                        C.NativeUint32List_methods.sublist$2(
                          t1.file._decodedChars,
                          t1._file$_start,
                          t1._end
                        ),
                        0,
                        null
                      ),
                      '@error'
                    )
                  )
                    throw $async$exception;
                  throw H.wrapException(
                    E.SassRuntimeException$(
                      error._span_exception$_message,
                      nodeWithSpan.get$span(),
                      $async$self._async_evaluate$_stackTrace$0()
                    )
                  );
                } else throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate$_addErrorSpan$1$2,
        $async$completer
      );
    },
  };
  E._EvaluateVisitor_closure9.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._async_evaluate$_environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.globalVariableExists$2$namespace(
        t2,
        module == null ? null : module.text
      )
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  E._EvaluateVisitor_closure10.prototype = {
    call$1($arguments) {
      var variable = J.$index$asx($arguments, 0).assertString$1('name'),
        t1 = this.$this._async_evaluate$_environment;
      return t1.getVariable$1(
        H.stringReplaceAllUnchecked(variable.text, '_', '-')
      ) != null
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  E._EvaluateVisitor_closure11.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t3,
        t4,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this;
      t2 = t1._async_evaluate$_environment;
      t3 = variable.text;
      t4 = H.stringReplaceAllUnchecked(t3, '_', '-');
      return t2.getFunction$2$namespace(
        t4,
        module == null ? null : module.text
      ) != null || t1._async_evaluate$_builtInFunctions.containsKey$1(t3)
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  E._EvaluateVisitor_closure12.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._async_evaluate$_environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.getMixin$2$namespace(t2, module == null ? null : module.text) !=
        null
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  E._EvaluateVisitor_closure13.prototype = {
    call$1($arguments) {
      var t1 = this.$this._async_evaluate$_environment;
      if (!t1._async_environment$_inMixin)
        throw H.wrapException(E.SassScriptException$(string$.conten));
      return t1._async_environment$_content != null
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  E._EvaluateVisitor_closure14.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._async_evaluate$_environment._async_environment$_modules.$index(
          0,
          t1
        );
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$variables(),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, new D.SassString(t4.key, true), t4.value);
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 29,
  };
  E._EvaluateVisitor_closure15.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._async_evaluate$_environment._async_environment$_modules.$index(
          0,
          t1
        );
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$functions(module),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(
          0,
          new D.SassString(t4.key, true),
          new F.SassFunction(t4.value)
        );
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 29,
  };
  E._EvaluateVisitor_closure16.prototype = {
    call$1($arguments) {
      var module,
        callable,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        $name = t1.$index($arguments, 0).assertString$1('name'),
        css = t1.$index($arguments, 1).get$isTruthy();
      t1 = t1.$index($arguments, 2).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      if (css && module != null) throw H.wrapException(string$.x24css_a);
      if (css) callable = new L.PlainCssCallable($name.text);
      else {
        t1 = this.$this;
        t2 = t1._async_evaluate$_callableNode;
        t2.toString;
        callable = t1._async_evaluate$_addExceptionSpan$2(
          t2,
          new E._EvaluateVisitor__closure4(t1, $name, module)
        );
      }
      if (callable != null) return new F.SassFunction(callable);
      throw H.wrapException('Function not found: ' + $name.toString$0(0));
    },
    $signature: 205,
  };
  E._EvaluateVisitor__closure4.prototype = {
    call$0() {
      var t1 = H.stringReplaceAllUnchecked(this.name.text, '_', '-'),
        t2 = this.module;
      t2 = t2 == null ? null : t2.text;
      return this.$this._async_evaluate$_getFunction$2$namespace(t1, t2);
    },
    $signature: 107,
  };
  E._EvaluateVisitor_closure17.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure0($arguments);
    },
    $call$body$_EvaluateVisitor_closure0($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        invocation,
        callableNode,
        t1,
        $function,
        args;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              $function = t1.$index($arguments, 0);
              args = type$.SassArgumentList._as(t1.$index($arguments, 1));
              t1 = $async$self.$this;
              t2 = t1._async_evaluate$_callableNode;
              t2.toString;
              t3 = H._setArrayType([], type$.JSArray_Expression);
              t4 = type$.String;
              t5 = type$.Expression;
              t6 = t2.get$span();
              t7 = t2.get$span();
              args._wereKeywordsAccessed = true;
              t8 = args._keywords;
              if (t8.get$isEmpty(t8)) t2 = null;
              else {
                t9 = type$.Value;
                t10 = P.LinkedHashMap_LinkedHashMap$_empty(t9, t9);
                for (
                  args._wereKeywordsAccessed = true,
                    t8 = t8.get$entries(t8),
                    t8 = t8.get$iterator(t8);
                  t8.moveNext$0();

                ) {
                  t11 = t8.get$current();
                  t10.$indexSet(0, new D.SassString(t11.key, false), t11.value);
                }
                t2 = new F.ValueExpression(
                  new A.SassMap(H.ConstantMap_ConstantMap$from(t10, t9, t9)),
                  t2.get$span()
                );
              }
              invocation = new X.ArgumentInvocation(
                P.List_List$unmodifiable(t3, t5),
                H.ConstantMap_ConstantMap$from(
                  P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                  t4,
                  t5
                ),
                new F.ValueExpression(args, t7),
                t2,
                t6
              );
              $async$goto = $function instanceof D.SassString ? 3 : 4;
              break;
            case 3:
              // then
              N.warn(string$.Passin + $function.toString$0(0) + '))', true);
              callableNode = t1._async_evaluate$_callableNode;
              $async$goto = 5;
              return P._asyncAwait(
                t1.visitFunctionExpression$1(
                  new F.FunctionExpression(
                    null,
                    $function.text,
                    invocation,
                    callableNode.get$span()
                  )
                ),
                $async$call$1
              );
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t2 = $function.assertFunction$1('function');
              t3 = t1._async_evaluate$_callableNode;
              t3.toString;
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate$_runFunctionCallable$3(
                  invocation,
                  t2.callable,
                  t3
                ),
                $async$call$1
              );
            case 6:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 127,
  };
  E._EvaluateVisitor_closure18.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure($arguments);
    },
    $call$body$_EvaluateVisitor_closure($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        withMap,
        t2,
        values,
        configuration,
        t1,
        url;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              url = P.Uri_parse(
                t1.$index($arguments, 0).assertString$1('url').text
              );
              t1 = t1.$index($arguments, 1).get$realNull();
              withMap = t1 == null ? null : t1.assertMap$1('with').contents;
              t1 = $async$self.$this;
              t2 = t1._async_evaluate$_callableNode;
              t2.toString;
              if (withMap != null) {
                values = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.String,
                  type$.ConfiguredValue
                );
                withMap.forEach$1(
                  0,
                  new E._EvaluateVisitor__closure2(values, t2.get$span(), t2)
                );
                configuration = new A.ExplicitConfiguration(t2, values);
              } else configuration = C.Configuration_Map_empty;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate$_loadModule$7$baseUrl$configuration$namesInErrors(
                  url,
                  'load-css()',
                  t2,
                  new E._EvaluateVisitor__closure3(t1),
                  t2.get$span().file.url,
                  configuration,
                  true
                ),
                $async$call$1
              );
            case 3:
              // returning from await.
              t1._async_evaluate$_assertConfigurationIsEmpty$2$nameInError(
                configuration,
                true
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 210,
  };
  E._EvaluateVisitor__closure2.prototype = {
    call$2(variable, value) {
      var t1 = variable.assertString$1('with key'),
        $name = H.stringReplaceAllUnchecked(t1.text, '_', '-');
      t1 = this.values;
      if (t1.containsKey$1($name))
        throw H.wrapException(
          'The variable $' + $name + ' was configured twice.'
        );
      t1.$indexSet(
        0,
        $name,
        new Z.ConfiguredValue(value, this.span, this.callableNode)
      );
    },
    $signature: 44,
  };
  E._EvaluateVisitor__closure3.prototype = {
    call$1(module) {
      var t1 = this.$this;
      return t1._async_evaluate$_combineCss$2$clone(module, true).accept$1(t1);
    },
    $signature: 202,
  };
  E._EvaluateVisitor_run_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.EvaluateResult),
        $async$returnValue,
        $async$self = this,
        t2,
        t1,
        url,
        $async$temp1,
        $async$temp2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node;
              url = t1.span.file.url;
              if (url != null) {
                t2 = $async$self.$this;
                t2._async_evaluate$_activeModules.$indexSet(0, url, null);
                t2._async_evaluate$_loadedUrls.add$1(0, url);
              }
              t2 = $async$self.$this;
              $async$temp1 = E;
              $async$temp2 = t2;
              $async$goto = 3;
              return P._asyncAwait(
                t2._async_evaluate$_execute$2($async$self.importer, t1),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.EvaluateResult(
                $async$temp2._async_evaluate$_combineCss$1($async$result)
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 212,
  };
  E._EvaluateVisitor__withWarnCallback_closure0.prototype = {
    call$2(message, deprecation) {
      var t1 = this.$this,
        t2 = t1._async_evaluate$_importSpan;
      if (t2 == null) {
        t2 = t1._async_evaluate$_callableNode;
        t2 = t2 == null ? null : t2.get$span();
      }
      return t1._async_evaluate$_warn$3$deprecation(
        message,
        t2 == null ? this.nodeWithSpan.span : t2,
        deprecation
      );
    },
    $signature: 100,
  };
  E._EvaluateVisitor__loadModule_closure1.prototype = {
    call$0() {
      return this.callback.call$1(this.builtInModule);
    },
    $signature: 0,
  };
  E._EvaluateVisitor__loadModule_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        oldInDependency,
        module,
        error,
        error0,
        error1,
        error2,
        message,
        exception,
        t1,
        t2,
        result,
        stylesheet,
        canonicalUrl,
        $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.nodeWithSpan;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_loadStylesheet$3$baseUrl(
                  $async$self.url.toString$0(0),
                  t2.get$span(),
                  $async$self.baseUrl
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              canonicalUrl = stylesheet.span.file.url;
              if (
                canonicalUrl != null &&
                t1._async_evaluate$_activeModules.containsKey$1(canonicalUrl)
              ) {
                message = $async$self.namesInErrors
                  ? 'Module loop: ' +
                    $.$get$context().prettyUri$1(canonicalUrl) +
                    ' is already being loaded.'
                  : string$.Module;
                t2 = X.NullableExtension_andThen(
                  t1._async_evaluate$_activeModules.$index(0, canonicalUrl),
                  new E._EvaluateVisitor__loadModule__closure0(t1, message)
                );
                throw H.wrapException(
                  t2 == null ? t1._async_evaluate$_exception$1(message) : t2
                );
              }
              if (canonicalUrl != null)
                t1._async_evaluate$_activeModules.$indexSet(
                  0,
                  canonicalUrl,
                  t2
                );
              oldInDependency = t1._async_evaluate$_inDependency;
              t1._async_evaluate$_inDependency = result.isDependency;
              module = null;
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate$_execute$5$configuration$namesInErrors$nodeWithSpan(
                  result.importer,
                  stylesheet,
                  $async$self.configuration,
                  $async$self.namesInErrors,
                  t2
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              module = $async$result;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              t1._async_evaluate$_activeModules.remove$1(0, canonicalUrl);
              t1._async_evaluate$_inDependency = oldInDependency;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return P._asyncAwait(
                $async$self.callback.call$1(module),
                $async$call$0
              );
            case 11:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception = $async$currentError;
              t2 = H.unwrapException($async$exception);
              if (type$.SassRuntimeException._is(t2)) throw $async$exception;
              else if (t2 instanceof E.MultiSpanSassException) {
                error = t2;
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$(
                    error._span_exception$_message,
                    error.get$span(),
                    error.primaryLabel,
                    error.secondarySpans,
                    t1._async_evaluate$_stackTrace$1(error.get$span())
                  )
                );
              } else if (t2 instanceof E.SassException) {
                error0 = t2;
                throw H.wrapException(
                  t1._async_evaluate$_exception$2(
                    error0._span_exception$_message,
                    error0.get$span()
                  )
                );
              } else if (t2 instanceof E.MultiSpanSassScriptException) {
                error1 = t2;
                throw H.wrapException(
                  t1._async_evaluate$_multiSpanException$3(
                    error1.message,
                    error1.primaryLabel,
                    error1.secondarySpans
                  )
                );
              } else if (t2 instanceof E.SassScriptException) {
                error2 = t2;
                throw H.wrapException(
                  t1._async_evaluate$_exception$1(error2.message)
                );
              } else throw $async$exception;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__loadModule__closure0.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate$_multiSpanException$3(
        this.message,
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 60,
  };
  E._EvaluateVisitor__execute_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t3,
        t4,
        t5,
        t6,
        t1,
        oldImporter,
        oldStylesheet,
        oldRoot,
        oldParent,
        oldEndOfImports,
        oldOutOfOrderImports,
        oldExtensionStore,
        t2,
        oldStyleRule,
        oldMediaQueries,
        oldDeclarationName,
        oldInUnknownAtRule,
        oldInKeyframes,
        oldConfiguration;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate$_importer;
              oldStylesheet = t1._async_evaluate$__stylesheet;
              oldRoot = t1._async_evaluate$__root;
              oldParent = t1._async_evaluate$__parent;
              oldEndOfImports = t1._async_evaluate$__endOfImports;
              oldOutOfOrderImports = t1._async_evaluate$_outOfOrderImports;
              oldExtensionStore = t1._async_evaluate$__extensionStore;
              t2 = t1._async_evaluate$_atRootExcludingStyleRule;
              oldStyleRule = t2
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              oldMediaQueries = t1._async_evaluate$_mediaQueries;
              oldDeclarationName = t1._async_evaluate$_declarationName;
              oldInUnknownAtRule = t1._async_evaluate$_inUnknownAtRule;
              oldInKeyframes = t1._async_evaluate$_inKeyframes;
              oldConfiguration = t1._async_evaluate$_configuration;
              t1._async_evaluate$_importer = $async$self.importer;
              t3 = t1._async_evaluate$__stylesheet = $async$self.stylesheet;
              t4 = t3.span;
              t5 = t1._async_evaluate$__parent = t1._async_evaluate$__root = V.ModifiableCssStylesheet$(
                t4
              );
              t1._async_evaluate$__endOfImports = 0;
              t1._async_evaluate$_outOfOrderImports = null;
              t1._async_evaluate$__extensionStore = $async$self.extensionStore;
              t1._async_evaluate$_declarationName = t1._async_evaluate$_mediaQueries = t1._async_evaluate$_styleRuleIgnoringAtRoot = null;
              t1._async_evaluate$_inKeyframes = t1._async_evaluate$_atRootExcludingStyleRule = t1._async_evaluate$_inUnknownAtRule = false;
              t6 = $async$self.configuration;
              if (t6 != null) t1._async_evaluate$_configuration = t6;
              $async$goto = 2;
              return P._asyncAwait(t1.visitStylesheet$1(t3), $async$call$0);
            case 2:
              // returning from await.
              t3 =
                t1._async_evaluate$_outOfOrderImports == null
                  ? t5
                  : new V.CssStylesheet(
                      new P.UnmodifiableListView(
                        t1._async_evaluate$_addOutOfOrderImports$0(),
                        type$.UnmodifiableListView_CssNode
                      ),
                      t4
                    );
              $async$self.css._value = t3;
              t1._async_evaluate$_importer = oldImporter;
              t1._async_evaluate$__stylesheet = oldStylesheet;
              t1._async_evaluate$__root = oldRoot;
              t1._async_evaluate$__parent = oldParent;
              t1._async_evaluate$__endOfImports = oldEndOfImports;
              t1._async_evaluate$_outOfOrderImports = oldOutOfOrderImports;
              t1._async_evaluate$__extensionStore = oldExtensionStore;
              t1._async_evaluate$_styleRuleIgnoringAtRoot = oldStyleRule;
              t1._async_evaluate$_mediaQueries = oldMediaQueries;
              t1._async_evaluate$_declarationName = oldDeclarationName;
              t1._async_evaluate$_inUnknownAtRule = oldInUnknownAtRule;
              t1._async_evaluate$_atRootExcludingStyleRule = t2;
              t1._async_evaluate$_inKeyframes = oldInKeyframes;
              t1._async_evaluate$_configuration = oldConfiguration;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__combineCss_closure2.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 87,
  };
  E._EvaluateVisitor__combineCss_closure3.prototype = {
    call$1(target) {
      return !this.selectors.contains$1(0, target);
    },
    $signature: 15,
  };
  E._EvaluateVisitor__combineCss_closure4.prototype = {
    call$1(module) {
      return module.cloneCss$0();
    },
    $signature: 215,
  };
  E._EvaluateVisitor__extendModules_closure1.prototype = {
    call$1(target) {
      return !this.originalSelectors.contains$1(0, target);
    },
    $signature: 15,
  };
  E._EvaluateVisitor__extendModules_closure2.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_ExtensionStore);
    },
    $signature: 197,
  };
  E._EvaluateVisitor__topologicalModules_visitModule0.prototype = {
    call$1(module) {
      var t1, t2, t3, _i, upstream;
      for (
        t1 = module.get$upstream(), t2 = t1.length, t3 = this.seen, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        upstream = t1[_i];
        if (upstream.get$transitivelyContainsCss() && t3.add$1(0, upstream))
          this.call$1(upstream);
      }
      this.sorted.addFirst$1(module);
    },
    $signature: 202,
  };
  E._EvaluateVisitor_visitAtRootRule_closure2.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new V.AtRootQueryParser(
        t1,
        this.$this._async_evaluate$_logger
      ).parse$0();
    },
    $signature: 98,
  };
  E._EvaluateVisitor_visitAtRootRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRootRule_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure5.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__parent,
                '__parent'
              );
              t1._async_evaluate$__parent = $async$self.newParent;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_environment.scope$1$2$when(
                  callback,
                  $async$self.node.hasDeclarations,
                  type$.void
                ),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate$__parent = t2;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure6.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        oldAtRootExcludingStyleRule;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldAtRootExcludingStyleRule =
                t1._async_evaluate$_atRootExcludingStyleRule;
              t1._async_evaluate$_atRootExcludingStyleRule = true;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure7.prototype = {
    call$1(callback) {
      return this.$this._async_evaluate$_withMediaQueries$1$2(
        null,
        new E._EvaluateVisitor__scopeForAtRoot__closure0(
          this.innerScope,
          callback
        ),
        type$.Null
      );
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot__closure0.prototype = {
    call$0() {
      return this.innerScope.call$1(this.callback);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure8.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        wasInKeyframes;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInKeyframes = t1._async_evaluate$_inKeyframes;
              t1._async_evaluate$_inKeyframes = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate$_inKeyframes = wasInKeyframes;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure9.prototype = {
    call$1($parent) {
      return type$.CssAtRule._is($parent);
    },
    $signature: 194,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure10.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        wasInUnknownAtRule;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInUnknownAtRule = t1._async_evaluate$_inUnknownAtRule;
              t1._async_evaluate$_inUnknownAtRule = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate$_inUnknownAtRule = wasInUnknownAtRule;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor_visitContentRule_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.content.declaration.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 6:
            // returning from await.
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitDeclaration_closure1.prototype = {
    call$1(value) {
      return this.$call$body$_EvaluateVisitor_visitDeclaration_closure(value);
    },
    $call$body$_EvaluateVisitor_visitDeclaration_closure(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_Value),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = F;
              $async$goto = 3;
              return P._asyncAwait(
                value.accept$1($async$self.$this),
                $async$call$1
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.CssValue(
                $async$result,
                value.get$span(),
                type$.CssValue_Value
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 219,
  };
  E._EvaluateVisitor_visitDeclaration_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitEachRule_closure2.prototype = {
    call$1(value) {
      var t1 = this.$this,
        t2 = this.nodeWithSpan;
      return t1._async_evaluate$_environment.setLocalVariable$3(
        C.JSArray_methods.get$first(this.node.variables),
        t1._async_evaluate$_withoutSlash$2(value, t2),
        t2
      );
    },
    $signature: 48,
  };
  E._EvaluateVisitor_visitEachRule_closure3.prototype = {
    call$1(value) {
      return this.$this._async_evaluate$_setMultipleVariables$3(
        this.node.variables,
        value,
        this.nodeWithSpan
      );
    },
    $signature: 48,
  };
  E._EvaluateVisitor_visitEachRule_closure4.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      return t1._async_evaluate$_handleReturn$2(
        _this.list.get$asList(),
        new E._EvaluateVisitor_visitEachRule__closure0(
          t1,
          _this.setVariables,
          _this.node
        )
      );
    },
    $signature: 58,
  };
  E._EvaluateVisitor_visitEachRule__closure0.prototype = {
    call$1(element) {
      var t1;
      this.setVariables.call$1(element);
      t1 = this.$this;
      return t1._async_evaluate$_handleReturn$2(
        this.node.children,
        new E._EvaluateVisitor_visitEachRule___closure0(t1)
      );
    },
    $signature: 222,
  };
  E._EvaluateVisitor_visitEachRule___closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 78,
  };
  E._EvaluateVisitor_visitExtendRule_closure0.prototype = {
    call$0() {
      var t1 = this.targetText;
      return D.SelectorList_SelectorList$parse(
        B.trimAscii(t1.get$value(t1), true),
        false,
        true,
        this.$this._async_evaluate$_logger
      );
    },
    $signature: 39,
  };
  E._EvaluateVisitor_visitAtRule_closure2.prototype = {
    call$1(value) {
      return this.$this._async_evaluate$_interpolationToValue$3$trim$warnForColor(
        value,
        true,
        true
      );
    },
    $signature: 224,
  };
  E._EvaluateVisitor_visitAtRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              $async$goto =
                styleRule == null || t1._async_evaluate$_inKeyframes ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitAtRule__closure0(
                    t1,
                    $async$self.children
                  ),
                  false,
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRule_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitForRule_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber),
        $async$returnValue,
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.node.from.accept$1($async$self.$this),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 189,
  };
  E._EvaluateVisitor_visitForRule_closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber),
        $async$returnValue,
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.node.to.accept$1($async$self.$this),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 189,
  };
  E._EvaluateVisitor_visitForRule_closure6.prototype = {
    call$0() {
      return this.fromNumber.assertInt$0();
    },
    $signature: 18,
  };
  E._EvaluateVisitor_visitForRule_closure7.prototype = {
    call$0() {
      var t1 = this.fromNumber;
      return this.toNumber
        .coerce$2(t1.get$numeratorUnits(), t1.get$denominatorUnits())
        .assertInt$0();
    },
    $signature: 18,
  };
  E._EvaluateVisitor_visitForRule_closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        i,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        result,
        t1,
        t2,
        nodeWithSpan;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.node;
              nodeWithSpan = t1._async_evaluate$_expressionNode$1(t2.from);
              (i = $async$self.from),
                (t3 = $async$self._box_0),
                (t4 = $async$self.direction),
                (t5 = t2.variable),
                (t6 = $async$self.fromNumber),
                (t2 = t2.children);
            case 3:
              // for condition
              if (!(i !== t3.to)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t7 = t1._async_evaluate$_environment;
              t8 = t6.get$numeratorUnits();
              t7.setLocalVariable$3(
                t5,
                T.SassNumber_SassNumber$withUnits(
                  i,
                  t6.get$denominatorUnits(),
                  t8
                ),
                nodeWithSpan
              );
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate$_handleReturn$2(
                  t2,
                  new E._EvaluateVisitor_visitForRule__closure0(t1)
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              i += t4;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 58,
  };
  E._EvaluateVisitor_visitForRule__closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 78,
  };
  E._EvaluateVisitor_visitForwardRule_closure1.prototype = {
    call$1(module) {
      this.$this._async_evaluate$_environment.forwardModule$2(
        module,
        this.node
      );
    },
    $signature: 114,
  };
  E._EvaluateVisitor_visitForwardRule_closure2.prototype = {
    call$1(module) {
      this.$this._async_evaluate$_environment.forwardModule$2(
        module,
        this.node
      );
    },
    $signature: 114,
  };
  E._EvaluateVisitor_visitIfRule_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._async_evaluate$_handleReturn$2(
        this._box_0.clause.children,
        new E._EvaluateVisitor_visitIfRule__closure0(t1)
      );
    },
    $signature: 58,
  };
  E._EvaluateVisitor_visitIfRule__closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 78,
  };
  E._EvaluateVisitor__visitDynamicImport_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t3,
        oldImporter,
        oldInDependency,
        children,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        environment,
        module,
        visitor,
        t1,
        t2,
        result,
        stylesheet,
        url;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.$import;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate$_loadStylesheet$3$forImport(
                  t2.urlString,
                  t2.span,
                  true
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              url = stylesheet.span.file.url;
              if (url != null) {
                t3 = t1._async_evaluate$_activeModules;
                if (t3.containsKey$1(url)) {
                  t2 = X.NullableExtension_andThen(
                    t3.$index(0, url),
                    new E._EvaluateVisitor__visitDynamicImport__closure1(t1)
                  );
                  throw H.wrapException(
                    t2 == null
                      ? t1._async_evaluate$_exception$1(
                          'This file is already being loaded.'
                        )
                      : t2
                  );
                }
                t3.$indexSet(0, url, t2);
              }
              t2 = new P.UnmodifiableListView(
                stylesheet._uses,
                type$.UnmodifiableListView_UseRule
              );
              if (t2.get$length(t2) === 0) {
                t2 = new P.UnmodifiableListView(
                  stylesheet._forwards,
                  type$.UnmodifiableListView_ForwardRule
                );
                t2 = t2.get$length(t2) === 0;
              } else t2 = false;
              $async$goto = t2 ? 4 : 5;
              break;
            case 4:
              // then
              oldImporter = t1._async_evaluate$_importer;
              t2 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__stylesheet,
                '_stylesheet'
              );
              oldInDependency = t1._async_evaluate$_inDependency;
              t1._async_evaluate$_importer = result.importer;
              t1._async_evaluate$__stylesheet = stylesheet;
              t1._async_evaluate$_inDependency = result.isDependency;
              $async$goto = 6;
              return P._asyncAwait(
                t1.visitStylesheet$1(stylesheet),
                $async$call$0
              );
            case 6:
              // returning from await.
              t1._async_evaluate$_importer = oldImporter;
              t1._async_evaluate$__stylesheet = t2;
              t1._async_evaluate$_inDependency = oldInDependency;
              t1._async_evaluate$_activeModules.remove$1(0, url);
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              children = H._Cell$();
              t2 = t1._async_evaluate$_environment;
              t3 = type$.String;
              t4 = type$.Module_AsyncCallable;
              t5 = type$.AstNode;
              t6 = H._setArrayType([], type$.JSArray_Module_AsyncCallable);
              t7 = t2._async_environment$_variables;
              t7 = H._setArrayType(t7.slice(0), H._arrayInstanceType(t7));
              t8 = t2._async_environment$_variableNodes;
              t8 = H._setArrayType(t8.slice(0), H._arrayInstanceType(t8));
              t9 = t2._async_environment$_functions;
              t9 = H._setArrayType(t9.slice(0), H._arrayInstanceType(t9));
              t10 = t2._async_environment$_mixins;
              t10 = H._setArrayType(t10.slice(0), H._arrayInstanceType(t10));
              environment = Q.AsyncEnvironment$_(
                P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
                P.LinkedHashMap_LinkedHashMap$_empty(t3, t5),
                P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                t2._async_environment$_importedModules,
                null,
                null,
                t6,
                t7,
                t8,
                t9,
                t10,
                t2._async_environment$_content
              );
              $async$goto = 7;
              return P._asyncAwait(
                t1._async_evaluate$_withEnvironment$1$2(
                  environment,
                  new E._EvaluateVisitor__visitDynamicImport__closure2(
                    t1,
                    result,
                    stylesheet,
                    environment,
                    children
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 7:
              // returning from await.
              module = environment.toDummyModule$0();
              t1._async_evaluate$_environment.importForwards$1(module);
              $async$goto = module.transitivelyContainsCss ? 8 : 9;
              break;
            case 8:
              // then
              $async$goto = 10;
              return P._asyncAwait(
                t1
                  ._async_evaluate$_combineCss$2$clone(
                    module,
                    module.transitivelyContainsExtensions
                  )
                  .accept$1(t1),
                $async$call$0
              );
            case 10:
            // returning from await.
            case 9:
              // join
              visitor = new E._ImportedCssVisitor0(t1);
              for (
                t2 = J.get$iterator$ax(children._readLocal$0());
                t2.moveNext$0();

              )
                t2.get$current().accept$1(visitor);
              t1._async_evaluate$_activeModules.remove$1(0, url);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor__visitDynamicImport__closure1.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate$_multiSpanException$3(
        'This file is already being loaded.',
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 60,
  };
  E._EvaluateVisitor__visitDynamicImport__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t7,
        t8,
        t1,
        oldImporter,
        t2,
        t3,
        t4,
        t5,
        oldOutOfOrderImports,
        oldConfiguration,
        oldInDependency,
        t6;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate$_importer;
              t2 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__stylesheet,
                '_stylesheet'
              );
              t3 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__root,
                '_root'
              );
              t4 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__parent,
                '__parent'
              );
              t5 = t1._async_evaluate$_assertInModule$2(
                t1._async_evaluate$__endOfImports,
                '_endOfImports'
              );
              oldOutOfOrderImports = t1._async_evaluate$_outOfOrderImports;
              oldConfiguration = t1._async_evaluate$_configuration;
              oldInDependency = t1._async_evaluate$_inDependency;
              t6 = $async$self.result;
              t1._async_evaluate$_importer = t6.importer;
              t7 = t1._async_evaluate$__stylesheet = $async$self.stylesheet;
              t8 = V.ModifiableCssStylesheet$(t7.span);
              t1._async_evaluate$__root = t8;
              t1._async_evaluate$__parent = t1._async_evaluate$_assertInModule$2(
                t8,
                '_root'
              );
              t1._async_evaluate$__endOfImports = 0;
              t1._async_evaluate$_outOfOrderImports = null;
              t1._async_evaluate$_inDependency = t6.isDependency;
              t6 = new P.UnmodifiableListView(
                t7._forwards,
                type$.UnmodifiableListView_ForwardRule
              );
              if (!t6.get$isEmpty(t6))
                t1._async_evaluate$_configuration = $async$self.environment.toImplicitConfiguration$0();
              $async$goto = 2;
              return P._asyncAwait(t1.visitStylesheet$1(t7), $async$call$0);
            case 2:
              // returning from await.
              $async$self.children._value = t1._async_evaluate$_addOutOfOrderImports$0();
              t1._async_evaluate$_importer = oldImporter;
              t1._async_evaluate$__stylesheet = t2;
              t1._async_evaluate$__root = t3;
              t1._async_evaluate$__parent = t4;
              t1._async_evaluate$__endOfImports = t5;
              t1._async_evaluate$_outOfOrderImports = oldOutOfOrderImports;
              t1._async_evaluate$_configuration = oldConfiguration;
              t1._async_evaluate$_inDependency = oldInDependency;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__visitStaticImport_closure0.prototype = {
    call$1(supports) {
      return this.$call$body$_EvaluateVisitor__visitStaticImport_closure(
        supports
      );
    },
    $call$body$_EvaluateVisitor__visitStaticImport_closure(supports) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_String),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2,
        $async$temp3,
        $async$temp4;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$temp1 = F;
              $async$temp2 = H;
              $async$goto = supports instanceof L.SupportsDeclaration ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp3 = H;
              $async$goto = 6;
              return P._asyncAwait(
                t1._evaluateToCss$1(supports.name),
                $async$call$1
              );
            case 6:
              // returning from await.
              $async$temp3 = $async$temp3.S($async$result) + ': ';
              $async$temp4 = H;
              $async$goto = 7;
              return P._asyncAwait(
                t1._evaluateToCss$1(supports.value),
                $async$call$1
              );
            case 7:
              // returning from await.
              $async$result = $async$temp3 + $async$temp4.S($async$result);
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                X.NullableExtension_andThen(
                  supports,
                  t1.get$_async_evaluate$_visitSupportsCondition()
                ),
                $async$call$1
              );
            case 8:
            // returning from await.
            case 4:
              // join
              $async$returnValue = new $async$temp1.CssValue(
                'supports(' + $async$temp2.S($async$result) + ')',
                supports.get$span(),
                type$.CssValue_String
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 227,
  };
  E._EvaluateVisitor_visitIncludeRule_closure3.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_environment.getMixin$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 107,
  };
  E._EvaluateVisitor_visitIncludeRule_closure4.prototype = {
    call$0() {
      return this.node.get$spanWithoutContent();
    },
    $signature: 33,
  };
  E._EvaluateVisitor_visitIncludeRule_closure6.prototype = {
    call$1($content) {
      return new E.UserDefinedCallable(
        $content,
        this.$this._async_evaluate$_environment.closure$0(),
        type$.UserDefinedCallable_AsyncEnvironment
      );
    },
    $signature: 228,
  };
  E._EvaluateVisitor_visitIncludeRule_closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate$_environment.withContent$2(
                  $async$self.contentCallable,
                  new E._EvaluateVisitor_visitIncludeRule__closure0(
                    t1,
                    $async$self.mixin,
                    $async$self.nodeWithSpan
                  )
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitIncludeRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate$_environment.asMixin$1(
                  new E._EvaluateVisitor_visitIncludeRule___closure0(
                    t1,
                    $async$self.mixin,
                    $async$self.nodeWithSpan
                  )
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor_visitIncludeRule___closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        t2,
        t3,
        t4,
        t5,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.mixin.declaration.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (t4 = $async$self.nodeWithSpan),
                (t5 = type$.nullable_Value),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(
                t3._async_evaluate$_addErrorSpan$1$2(
                  t4,
                  new E._EvaluateVisitor_visitIncludeRule____closure0(
                    t3,
                    t1[_i]
                  ),
                  t5
                ),
                $async$call$0
              );
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor_visitIncludeRule____closure0.prototype = {
    call$0() {
      return this.statement.accept$1(this.$this);
    },
    $signature: 58,
  };
  E._EvaluateVisitor_visitMediaRule_closure2.prototype = {
    call$1(mediaQueries) {
      return this.$this._async_evaluate$_mergeMediaQueries$2(
        mediaQueries,
        this.queries
      );
    },
    $signature: 77,
  };
  E._EvaluateVisitor_visitMediaRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.mergedQueries;
              if (t2 == null) t2 = $async$self.queries;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_withMediaQueries$1$2(
                  t2,
                  new E._EvaluateVisitor_visitMediaRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitMediaRule___closure0(
                    t1,
                    $async$self.node
                  ),
                  false,
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule___closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule_closure4.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  E._EvaluateVisitor__visitMediaQueries_closure0.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new F.MediaQueryParser(
        t1,
        this.$this._async_evaluate$_logger
      ).parse$0();
    },
    $signature: 121,
  };
  E._EvaluateVisitor_visitStyleRule_closure6.prototype = {
    call$0() {
      var t1 = this.selectorText;
      return E.KeyframeSelectorParser$(
        t1.get$value(t1),
        this.$this._async_evaluate$_logger
      ).parse$0();
    },
    $signature: 42,
  };
  E._EvaluateVisitor_visitStyleRule_closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule_closure8.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitStyleRule_closure9.prototype = {
    call$0() {
      var _s11_ = '_stylesheet',
        t1 = this.selectorText,
        t2 = this.$this;
      return D.SelectorList_SelectorList$parse(
        t1.get$value(t1),
        !t2._async_evaluate$_assertInModule$2(
          t2._async_evaluate$__stylesheet,
          _s11_
        ).plainCss,
        !t2._async_evaluate$_assertInModule$2(
          t2._async_evaluate$__stylesheet,
          _s11_
        ).plainCss,
        t2._async_evaluate$_logger
      );
    },
    $signature: 39,
  };
  E._EvaluateVisitor_visitStyleRule_closure10.prototype = {
    call$0() {
      var t1 = this._box_0.parsedSelector,
        t2 = this.$this,
        t3 = t2._async_evaluate$_styleRuleIgnoringAtRoot;
      t3 = t3 == null ? null : t3.originalSelector;
      return t1.resolveParentSelectors$2$implicitParent(
        t3,
        !t2._async_evaluate$_atRootExcludingStyleRule
      );
    },
    $signature: 39,
  };
  E._EvaluateVisitor_visitStyleRule_closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_withStyleRule$1$2(
                  $async$self.rule,
                  new E._EvaluateVisitor_visitStyleRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule_closure12.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitSupportsRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate$_withParent$2$2(
                  X.ModifiableCssStyleRule$(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitSupportsRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitSupportsRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitSupportsRule_closure2.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure2.prototype = {
    call$0() {
      var t1 = this.override;
      this.$this._async_evaluate$_environment.setVariable$4$global(
        this.node.name,
        t1.value,
        t1.assignmentNode,
        true
      );
    },
    $signature: 2,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure3.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 32,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure4.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1._async_evaluate$_environment.setVariable$5$global$namespace(
        t2.name,
        this.value,
        t1._async_evaluate$_expressionNode$1(t2.expression),
        t2.isGlobal,
        t2.namespace
      );
    },
    $signature: 2,
  };
  E._EvaluateVisitor_visitUseRule_closure0.prototype = {
    call$1(module) {
      var t1 = this.node;
      this.$this._async_evaluate$_environment.addModule$3$namespace(
        module,
        t1,
        t1.namespace
      );
    },
    $signature: 114,
  };
  E._EvaluateVisitor_visitWarnRule_closure0.prototype = {
    call$0() {
      return this.node.expression.accept$1(this.$this);
    },
    $signature: 57,
  };
  E._EvaluateVisitor_visitWhileRule_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        result;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node),
                (t2 = t1.condition),
                (t3 = $async$self.$this),
                (t1 = t1.children);
            case 3:
              // for condition
              $async$goto = 5;
              return P._asyncAwait(t2.accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
              if (!$async$result.get$isTruthy()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(
                t3._async_evaluate$_handleReturn$2(
                  t1,
                  new E._EvaluateVisitor_visitWhileRule__closure0(t3)
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 58,
  };
  E._EvaluateVisitor_visitWhileRule__closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 78,
  };
  E._EvaluateVisitor_visitBinaryOperationExpression_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        right,
        result,
        t1,
        t2,
        left,
        t3,
        $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node;
              t2 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(t1.left.accept$1(t2), $async$call$0);
            case 3:
              // returning from await.
              left = $async$result;
              t3 = t1.operator;
            case 4:
              // switch
              switch (t3) {
                case C.BinaryOperator_kjl:
                  // goto case
                  $async$goto = 6;
                  break;
                case C.BinaryOperator_or_or_1:
                  // goto case
                  $async$goto = 7;
                  break;
                case C.BinaryOperator_and_and_2:
                  // goto case
                  $async$goto = 8;
                  break;
                case C.BinaryOperator_YlX:
                  // goto case
                  $async$goto = 9;
                  break;
                case C.BinaryOperator_i5H:
                  // goto case
                  $async$goto = 10;
                  break;
                case C.BinaryOperator_AcR:
                  // goto case
                  $async$goto = 11;
                  break;
                case C.BinaryOperator_1da:
                  // goto case
                  $async$goto = 12;
                  break;
                case C.BinaryOperator_8qt:
                  // goto case
                  $async$goto = 13;
                  break;
                case C.BinaryOperator_33h:
                  // goto case
                  $async$goto = 14;
                  break;
                case C.BinaryOperator_AcR0:
                  // goto case
                  $async$goto = 15;
                  break;
                case C.BinaryOperator_iyO:
                  // goto case
                  $async$goto = 16;
                  break;
                case C.BinaryOperator_O1M:
                  // goto case
                  $async$goto = 17;
                  break;
                case C.BinaryOperator_RTB:
                  // goto case
                  $async$goto = 18;
                  break;
                case C.BinaryOperator_2ad:
                  // goto case
                  $async$goto = 19;
                  break;
                default:
                  // goto default
                  $async$goto = 20;
                  break;
              }
              break;
            case 6:
              // case
              $async$goto = 21;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 21:
              // returning from await.
              right = $async$result;
              $async$returnValue = new D.SassString(
                N.serializeValue0(left, false, true) +
                  '=' +
                  N.serializeValue0(right, false, true),
                false
              );
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              $async$goto = left.get$isTruthy() ? 22 : 24;
              break;
            case 22:
              // then
              $async$result = left;
              // goto join
              $async$goto = 23;
              break;
            case 24:
              // else
              $async$goto = 25;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 25:
            // returning from await.
            case 23:
              // join
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
              $async$goto = left.get$isTruthy() ? 26 : 28;
              break;
            case 26:
              // then
              $async$goto = 29;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 29:
              // returning from await.
              // goto join
              $async$goto = 27;
              break;
            case 28:
              // else
              $async$result = left;
            case 27:
              // join
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 9:
              // case
              $async$temp1 = left;
              $async$goto = 30;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 30:
              // returning from await.
              $async$returnValue = $async$temp1.$eq(0, $async$result)
                ? C.SassBoolean_true0
                : C.SassBoolean_false0;
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // case
              $async$temp1 = left;
              $async$goto = 31;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 31:
              // returning from await.
              $async$returnValue = !$async$temp1.$eq(0, $async$result)
                ? C.SassBoolean_true0
                : C.SassBoolean_false0;
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              $async$temp1 = left;
              $async$goto = 32;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 32:
              // returning from await.
              $async$returnValue = $async$temp1.greaterThan$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // case
              $async$temp1 = left;
              $async$goto = 33;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 33:
              // returning from await.
              $async$returnValue = $async$temp1.greaterThanOrEquals$1(
                $async$result
              );
              // goto return
              $async$goto = 1;
              break;
            case 13:
              // case
              $async$temp1 = left;
              $async$goto = 34;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 34:
              // returning from await.
              $async$returnValue = $async$temp1.lessThan$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 14:
              // case
              $async$temp1 = left;
              $async$goto = 35;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 35:
              // returning from await.
              $async$returnValue = $async$temp1.lessThanOrEquals$1(
                $async$result
              );
              // goto return
              $async$goto = 1;
              break;
            case 15:
              // case
              $async$temp1 = left;
              $async$goto = 36;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 36:
              // returning from await.
              $async$returnValue = $async$temp1.plus$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 16:
              // case
              $async$temp1 = left;
              $async$goto = 37;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 37:
              // returning from await.
              $async$returnValue = $async$temp1.minus$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 17:
              // case
              $async$temp1 = left;
              $async$goto = 38;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 38:
              // returning from await.
              $async$returnValue = $async$temp1.times$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 18:
              // case
              $async$goto = 39;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 39:
              // returning from await.
              right = $async$result;
              result = left.dividedBy$1(right);
              if (
                t1.allowsSlash &&
                left instanceof T.SassNumber &&
                right instanceof T.SassNumber
              ) {
                $async$returnValue = type$.SassNumber._as(result).withSlash$2(
                  left,
                  right
                );
                // goto return
                $async$goto = 1;
                break;
              } else {
                if (
                  left instanceof T.SassNumber &&
                  right instanceof T.SassNumber
                )
                  t2._async_evaluate$_warn$3$deprecation(
                    string$.Using__ +
                      H.S(
                        new E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation0().call$1(
                          t1
                        )
                      ) +
                      string$.x0a_More,
                    t1.get$span(),
                    true
                  );
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 19:
              // case
              $async$temp1 = left;
              $async$goto = 40;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 40:
              // returning from await.
              $async$returnValue = $async$temp1.modulo$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 20:
              // default
              throw H.wrapException(
                P.ArgumentError$(
                  'Unknown binary operator ' + t3.toString$0(0) + '.',
                  null
                )
              );
            case 5:
            // after switch
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 57,
  };
  E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation0.prototype = {
    call$1(expression) {
      if (
        expression instanceof V.BinaryOperationExpression &&
        expression.operator === C.BinaryOperator_RTB
      )
        return (
          'math.div(' +
          H.S(this.call$1(expression.left)) +
          ', ' +
          H.S(this.call$1(expression.right)) +
          ')'
        );
      else return expression.toString$0(0);
    },
    $signature: 82,
  };
  E._EvaluateVisitor_visitVariableExpression_closure0.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 32,
  };
  E._EvaluateVisitor_visitListExpression_closure0.prototype = {
    call$1(expression) {
      return expression.accept$1(this.$this);
    },
    $signature: 232,
  };
  E._EvaluateVisitor_visitFunctionExpression_closure1.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_getFunction$2$namespace(
        H.stringReplaceAllUnchecked(t1.originalName, '_', '-'),
        t1.namespace
      );
    },
    $signature: 107,
  };
  E._EvaluateVisitor_visitFunctionExpression_closure2.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_runFunctionCallable$3(
        t1.$arguments,
        this._box_0.$function,
        t1
      );
    },
    $signature: 57,
  };
  E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure0.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate$_runFunctionCallable$3(
        t1.$arguments,
        this.$function,
        t1
      );
    },
    $signature: 57,
  };
  E._EvaluateVisitor__runUserDefinedCallable_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.callable,
        t3 = _this.V;
      return t1._async_evaluate$_withEnvironment$1$2(
        t2.environment.closure$0(),
        new E._EvaluateVisitor__runUserDefinedCallable__closure0(
          t1,
          _this.evaluated,
          t2,
          _this.nodeWithSpan,
          _this.run,
          t3
        ),
        t3
      );
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable__closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.V;
      return t1._async_evaluate$_environment.scope$1$1(
        new E._EvaluateVisitor__runUserDefinedCallable___closure0(
          t1,
          _this.evaluated,
          _this.callable,
          _this.nodeWithSpan,
          _this.run,
          t2
        ),
        t2
      );
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable___closure0.prototype = {
    call$0() {
      return this.$call$body$_EvaluateVisitor__runUserDefinedCallable___closure(
        this.V
      );
    },
    $call$body$_EvaluateVisitor__runUserDefinedCallable___closure($async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        declaredArguments,
        t7,
        minLength,
        t8,
        i,
        argument,
        t9,
        value,
        t10,
        t11,
        restArgument,
        rest,
        argumentList,
        result,
        argumentWord,
        argumentNames,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.evaluated;
              t3 = t2.positional;
              t4 = t2.named;
              t5 = $async$self.callable.declaration.$arguments;
              t6 = $async$self.nodeWithSpan;
              t1._async_evaluate$_verifyArguments$4(t3.length, t4, t5, t6);
              declaredArguments = t5.$arguments;
              t7 = declaredArguments.length;
              minLength = Math.min(t3.length, t7);
              for (t8 = t2.positionalNodes, i = 0; i < minLength; ++i)
                t1._async_evaluate$_environment.setLocalVariable$3(
                  declaredArguments[i].name,
                  t3[i],
                  t8[i]
                );
              (i = t3.length), (t8 = t2.namedNodes);
            case 3:
              // for condition
              if (!(i < t7)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              argument = declaredArguments[i];
              t9 = argument.name;
              value = t4.remove$1(0, t9);
              $async$goto = value == null ? 6 : 7;
              break;
            case 6:
              // then
              t10 = argument.defaultValue;
              $async$temp1 = t1;
              $async$goto = 8;
              return P._asyncAwait(t10.accept$1(t1), $async$call$0);
            case 8:
              // returning from await.
              value = $async$temp1._async_evaluate$_withoutSlash$2(
                $async$result,
                t1._async_evaluate$_expressionNode$1(t10)
              );
            case 7:
              // join
              t10 = t1._async_evaluate$_environment;
              t11 = t8.$index(0, t9);
              if (t11 == null) {
                t11 = argument.defaultValue;
                t11.toString;
                t11 = t1._async_evaluate$_expressionNode$1(t11);
              }
              t10.setLocalVariable$3(t9, value, t11);
            case 4:
              // for update
              ++i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              restArgument = t5.restArgument;
              if (restArgument != null) {
                rest =
                  t3.length > t7
                    ? C.JSArray_methods.sublist$1(t3, t7)
                    : C.List_empty5;
                t2 = t2.separator;
                argumentList = D.SassArgumentList$(
                  rest,
                  t4,
                  t2 === C.ListSeparator_undecided_null
                    ? C.ListSeparator_kWM
                    : t2
                );
                t1._async_evaluate$_environment.setLocalVariable$3(
                  restArgument,
                  argumentList,
                  t6
                );
              } else argumentList = null;
              $async$goto = 9;
              return P._asyncAwait($async$self.run.call$0(), $async$call$0);
            case 9:
              // returning from await.
              result = $async$result;
              if (argumentList == null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (t4.get$isEmpty(t4)) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (argumentList._wereKeywordsAccessed) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = t4.get$keys(t4);
              argumentWord = B.pluralize('argument', t2.get$length(t2), null);
              t4 = t4.get$keys(t4);
              argumentNames = B.toSentence(
                H.MappedIterable_MappedIterable(
                  t4,
                  new E._EvaluateVisitor__runUserDefinedCallable____closure0(),
                  H._instanceType(t4)._eval$1('Iterable.E'),
                  type$.Object
                ),
                'or'
              );
              throw H.wrapException(
                E.MultiSpanSassRuntimeException$(
                  'No ' + argumentWord + ' named ' + argumentNames + '.',
                  t6.get$span(),
                  'invocation',
                  P.LinkedHashMap_LinkedHashMap$_literal(
                    [t5.get$spanWithName(), 'declaration'],
                    type$.FileSpan,
                    type$.String
                  ),
                  t1._async_evaluate$_stackTrace$1(t6.get$span())
                )
              );
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable____closure0.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  E._EvaluateVisitor__runFunctionCallable_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        t4,
        _i,
        $returnValue;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.callable.declaration),
                (t2 = t1.children),
                (t3 = t2.length),
                (t4 = $async$self.$this),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(t2[_i].accept$1(t4), $async$call$0);
            case 6:
              // returning from await.
              $returnValue = $async$result;
              if ($returnValue instanceof F.Value) {
                $async$returnValue = $returnValue;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              throw H.wrapException(
                t4._async_evaluate$_exception$2(
                  'Function finished without @return.',
                  t1.span
                )
              );
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 57,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure2.prototype = {
    call$0() {
      return this.overload.verify$2(
        this.evaluated.positional.length,
        this.namedSet
      );
    },
    $signature: 0,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure3.prototype = {
    call$0() {
      return this.callback.call$1(this.evaluated.positional);
    },
    $signature: 233,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure4.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  E._EvaluateVisitor__evaluateArguments_closure3.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 31,
  };
  E._EvaluateVisitor__evaluateArguments_closure4.prototype = {
    call$1(value) {
      return this.$this._async_evaluate$_withoutSlash$2(
        value,
        this.restNodeForSpan
      );
    },
    $signature: 31,
  };
  E._EvaluateVisitor__evaluateArguments_closure5.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.restNodeForSpan;
      _this.named.$indexSet(
        0,
        key,
        _this.$this._async_evaluate$_withoutSlash$2(value, t1)
      );
      _this.namedNodes.$indexSet(0, key, t1);
    },
    $signature: 76,
  };
  E._EvaluateVisitor__evaluateArguments_closure6.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 31,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure3.prototype = {
    call$1(value) {
      return new F.ValueExpression(value, this.restArgs.get$span());
    },
    $signature: 47,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure4.prototype = {
    call$1(value) {
      return new F.ValueExpression(
        this.$this._async_evaluate$_withoutSlash$2(value, this.restNodeForSpan),
        this.restArgs.get$span()
      );
    },
    $signature: 47,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure5.prototype = {
    call$2(key, value) {
      var _this = this;
      _this.named.$indexSet(
        0,
        key,
        new F.ValueExpression(
          _this.$this._async_evaluate$_withoutSlash$2(
            value,
            _this.restNodeForSpan
          ),
          _this.restArgs.get$span()
        )
      );
    },
    $signature: 76,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure6.prototype = {
    call$1(value) {
      return new F.ValueExpression(
        this.$this._async_evaluate$_withoutSlash$2(
          value,
          this.keywordRestNodeForSpan
        ),
        this.keywordRestArgs.get$span()
      );
    },
    $signature: 47,
  };
  E._EvaluateVisitor__addRestMap_closure0.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.$this;
      if (key instanceof D.SassString)
        _this.values.$indexSet(
          0,
          key.text,
          _this.convert.call$1(
            t1._async_evaluate$_withoutSlash$2(value, _this.expressionNode)
          )
        );
      else
        throw H.wrapException(
          t1._async_evaluate$_exception$2(
            string$.Variab_ +
              key.toString$0(0) +
              ' is not a string in ' +
              _this.map.toString$0(0) +
              '.',
            _this.nodeWithSpan.get$span()
          )
        );
    },
    $signature: 44,
  };
  E._EvaluateVisitor__verifyArguments_closure0.prototype = {
    call$0() {
      return this.$arguments.verify$2(
        this.positional,
        new M.MapKeySet(this.named, type$.MapKeySet_String)
      );
    },
    $signature: 0,
  };
  E._EvaluateVisitor_visitStringExpression_closure0.prototype = {
    call$1(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (typeof value == 'string') {
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              }
              type$.Expression._as(value);
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(value.accept$1(t1), $async$call$1);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue =
                result instanceof D.SassString
                  ? result.text
                  : t1._async_evaluate$_serialize$3$quote(result, value, false);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 74,
  };
  E._EvaluateVisitor_visitCssAtRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssAtRule_closure2.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitCssKeyframeBlock_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssKeyframeBlock_closure2.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure2.prototype = {
    call$1(mediaQueries) {
      return this.$this._async_evaluate$_mergeMediaQueries$2(
        mediaQueries,
        this.node.queries
      );
    },
    $signature: 77,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.mergedQueries;
              if (t2 == null) t2 = $async$self.node.queries;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_withMediaQueries$1$2(
                  t2,
                  new E._EvaluateVisitor_visitCssMediaRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children),
                (t2 = new H.ListIterator(t2, t2.get$length(t2))),
                (t3 = H._instanceType(t2)._precomputed1);
            case 5:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                t3._as(t2.__internal$_current).accept$1(t1),
                $async$call$0
              );
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                t1._async_evaluate$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitCssMediaRule___closure0(
                    t1,
                    $async$self.node
                  ),
                  false,
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$call$0
              );
            case 8:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule___closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure4.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitCssStyleRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate$_withStyleRule$1$2(
                  $async$self.rule,
                  new E._EvaluateVisitor_visitCssStyleRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssStyleRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssStyleRule_closure2.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor_visitCssSupportsRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children),
                (t2 = new H.ListIterator(t2, t2.get$length(t2))),
                (t3 = H._instanceType(t2)._precomputed1);
            case 5:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                t3._as(t2.__internal$_current).accept$1(t1),
                $async$call$0
              );
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                t1._async_evaluate$_withParent$2$2(
                  X.ModifiableCssStyleRule$(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitCssSupportsRule__closure0(
                    t1,
                    $async$self.node
                  ),
                  type$.ModifiableCssStyleRule,
                  type$.Null
                ),
                $async$call$0
              );
            case 8:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssSupportsRule__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssSupportsRule_closure2.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._EvaluateVisitor__performInterpolation_closure0.prototype = {
    call$1(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        result,
        t2,
        t3;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (typeof value == 'string') {
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              }
              type$.Expression._as(value);
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(value.accept$1(t1), $async$call$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (
                $async$self.warnForColor &&
                result instanceof K.SassColor &&
                $.$get$namesByColor().containsKey$1(result)
              ) {
                t2 = X.Interpolation$(
                  H._setArrayType([''], type$.JSArray_Object),
                  $async$self.interpolation.span
                );
                t3 = $.$get$namesByColor();
                t1._async_evaluate$_warn$2(
                  string$.You_pr +
                    H.S(t3.$index(0, result)) +
                    string$.x20in_in +
                    result.toString$0(0) +
                    string$.x2c_whicw +
                    H.S(t3.$index(0, result)) +
                    string$.x22x29__If +
                    new V.BinaryOperationExpression(
                      C.BinaryOperator_AcR0,
                      new D.StringExpression(t2, true),
                      value,
                      false
                    ).toString$0(0) +
                    "'.",
                  value.get$span()
                );
              }
              $async$returnValue = t1._async_evaluate$_serialize$3$quote(
                result,
                value,
                false
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 74,
  };
  E._EvaluateVisitor__serialize_closure0.prototype = {
    call$0() {
      return N.serializeValue0(this.value, false, this.quote);
    },
    $signature: 28,
  };
  E._EvaluateVisitor__expressionNode_closure0.prototype = {
    call$0() {
      var t1 = this.expression;
      return this.$this._async_evaluate$_environment.getVariableNode$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 177,
  };
  E._EvaluateVisitor__withoutSlash_recommendation0.prototype = {
    call$1(number) {
      var asSlash = number.asSlash;
      if (asSlash != null)
        return (
          'math.div(' +
          H.S(this.call$1(asSlash.item1)) +
          ', ' +
          H.S(this.call$1(asSlash.item2)) +
          ')'
        );
      else return N.serializeValue0(number, true, true);
    },
    $signature: 176,
  };
  E._EvaluateVisitor__stackFrame_closure0.prototype = {
    call$1(url) {
      var t1 = this.$this._async_evaluate$_importCache;
      t1 = t1 == null ? null : t1.humanize$1(url);
      return t1 == null ? url : t1;
    },
    $signature: 105,
  };
  E._EvaluateVisitor__stackTrace_closure0.prototype = {
    call$1(tuple) {
      return this.$this._async_evaluate$_stackFrame$2(
        tuple.item1,
        tuple.item2.get$span()
      );
    },
    $signature: 174,
  };
  E._ImportedCssVisitor0.prototype = {
    visitCssAtRule$1(node) {
      var t1 = node.isChildless
        ? null
        : new E._ImportedCssVisitor_visitCssAtRule_closure0();
      this._async_evaluate$_visitor._async_evaluate$_addChild$2$through(
        node,
        t1
      );
    },
    visitCssComment$1(node) {
      return this._async_evaluate$_visitor._async_evaluate$_addChild$1(node);
    },
    visitCssDeclaration$1(node) {},
    visitCssImport$1(node) {
      var t2,
        _s13_ = '_endOfImports',
        t1 = this._async_evaluate$_visitor;
      if (
        t1._async_evaluate$_assertInModule$2(
          t1._async_evaluate$__parent,
          '__parent'
        ) !==
        t1._async_evaluate$_assertInModule$2(t1._async_evaluate$__root, '_root')
      )
        t1._async_evaluate$_addChild$1(node);
      else if (
        t1._async_evaluate$_assertInModule$2(
          t1._async_evaluate$__endOfImports,
          _s13_
        ) ===
        J.get$length$asx(
          t1._async_evaluate$_assertInModule$2(
            t1._async_evaluate$__root,
            '_root'
          ).children._collection$_source
        )
      ) {
        t1._async_evaluate$_addChild$1(node);
        t1._async_evaluate$__endOfImports =
          t1._async_evaluate$_assertInModule$2(
            t1._async_evaluate$__endOfImports,
            _s13_
          ) + 1;
      } else {
        t2 = t1._async_evaluate$_outOfOrderImports;
        (t2 == null
          ? (t1._async_evaluate$_outOfOrderImports = H._setArrayType(
              [],
              type$.JSArray_ModifiableCssImport
            ))
          : t2
        ).push(node);
      }
    },
    visitCssKeyframeBlock$1(node) {},
    visitCssMediaRule$1(node) {
      var t1 = this._async_evaluate$_visitor,
        mediaQueries = t1._async_evaluate$_mediaQueries;
      t1._async_evaluate$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssMediaRule_closure0(
          mediaQueries == null ||
            t1._async_evaluate$_mergeMediaQueries$2(
              mediaQueries,
              node.queries
            ) != null
        )
      );
    },
    visitCssStyleRule$1(node) {
      return this._async_evaluate$_visitor._async_evaluate$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssStyleRule_closure0()
      );
    },
    visitCssStylesheet$1(node) {
      var t1, t2;
      for (
        t1 = node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(this);
    },
    visitCssSupportsRule$1(node) {
      return this._async_evaluate$_visitor._async_evaluate$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssSupportsRule_closure0()
      );
    },
  };
  E._ImportedCssVisitor_visitCssAtRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._ImportedCssVisitor_visitCssMediaRule_closure0.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.hasBeenMerged && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  E._ImportedCssVisitor_visitCssStyleRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E._ImportedCssVisitor_visitCssSupportsRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  E.EvaluateResult.prototype = {};
  E._ArgumentResults0.prototype = {};
  E._LoadedStylesheet0.prototype = {};
  V._CloneCssVisitor.prototype = {
    visitCssAtRule$1(node) {
      var t1 = node.isChildless,
        rule = U.ModifiableCssAtRule$(node.name, node.span, t1, node.value);
      return t1 ? rule : this._visitChildren$2(rule, node);
    },
    visitCssComment$1(node) {
      return new R.ModifiableCssComment(node.text, node.span);
    },
    visitCssDeclaration$1(node) {
      return L.ModifiableCssDeclaration$(
        node.name,
        node.value,
        node.span,
        node.parsedAsCustomProperty,
        node.valueSpanForMap
      );
    },
    visitCssImport$1(node) {
      return F.ModifiableCssImport$(
        node.url,
        node.span,
        node.media,
        node.supports
      );
    },
    visitCssKeyframeBlock$1(node) {
      return this._visitChildren$2(
        U.ModifiableCssKeyframeBlock$(node.selector, node.span),
        node
      );
    },
    visitCssMediaRule$1(node) {
      return this._visitChildren$2(
        G.ModifiableCssMediaRule$(node.queries, node.span),
        node
      );
    },
    visitCssStyleRule$1(node) {
      var newSelector = this._oldToNewSelectors.$index(0, node.selector);
      if (newSelector == null)
        throw H.wrapException(P.StateError$(string$.The_Ex));
      return this._visitChildren$2(
        X.ModifiableCssStyleRule$(
          newSelector,
          node.span,
          node.originalSelector
        ),
        node
      );
    },
    visitCssStylesheet$1(node) {
      return this._visitChildren$2(
        V.ModifiableCssStylesheet$(node.get$span()),
        node
      );
    },
    visitCssSupportsRule$1(node) {
      return this._visitChildren$2(
        B.ModifiableCssSupportsRule$(node.condition, node.span),
        node
      );
    },
    _visitChildren$1$2(newParent, oldParent) {
      var t1, t2, newChild;
      for (
        t1 = J.get$iterator$ax(oldParent.get$children(oldParent));
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        newChild = t2.accept$1(this);
        newChild.isGroupEnd = t2.get$isGroupEnd();
        newParent.addChild$1(newChild);
      }
      return newParent;
    },
    _visitChildren$2(newParent, oldParent) {
      return this._visitChildren$1$2(
        newParent,
        oldParent,
        type$.ModifiableCssParentNode
      );
    },
  };
  R.Evaluator.prototype = {};
  R._EvaluateVisitor.prototype = {
    _EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap(
      functions,
      importCache,
      logger,
      nodeImporter,
      quietDeps,
      sourceMap
    ) {
      var t2,
        metaModule,
        t3,
        _i,
        module,
        $function,
        t4,
        _this = this,
        _s20_ = '$name, $module: null',
        _s9_ = 'sass:meta',
        t1 = type$.JSArray_BuiltInCallable,
        metaFunctions = H._setArrayType(
          [
            Q.BuiltInCallable$function(
              'global-variable-exists',
              _s20_,
              new R._EvaluateVisitor_closure(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'variable-exists',
              '$name',
              new R._EvaluateVisitor_closure0(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'function-exists',
              _s20_,
              new R._EvaluateVisitor_closure1(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'mixin-exists',
              _s20_,
              new R._EvaluateVisitor_closure2(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'content-exists',
              '',
              new R._EvaluateVisitor_closure3(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'module-variables',
              '$module',
              new R._EvaluateVisitor_closure4(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'module-functions',
              '$module',
              new R._EvaluateVisitor_closure5(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'get-function',
              '$name, $css: false, $module: null',
              new R._EvaluateVisitor_closure6(_this),
              _s9_
            ),
            Q.BuiltInCallable$function(
              'call',
              '$function, $args...',
              new R._EvaluateVisitor_closure7(_this),
              _s9_
            ),
          ],
          t1
        ),
        metaMixins = H._setArrayType(
          [
            Q.BuiltInCallable$mixin(
              'load-css',
              '$url, $with: null',
              new R._EvaluateVisitor_closure8(_this),
              _s9_
            ),
          ],
          t1
        );
      t1 = type$.BuiltInCallable;
      t2 = P.List_List$of($.$get$global(), true, t1);
      C.JSArray_methods.addAll$1(t2, metaFunctions);
      metaModule = Q.BuiltInModule$('meta', t2, metaMixins, null, t1);
      for (
        t1 = P.List_List$of(
          $.$get$coreModules(),
          true,
          type$.BuiltInModule_BuiltInCallable
        ),
          t1.push(metaModule),
          t2 = t1.length,
          t3 = _this._builtInModules,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        module = t1[_i];
        t3.$indexSet(0, module.url, module);
      }
      t1 = H._setArrayType([], type$.JSArray_Callable);
      C.JSArray_methods.addAll$1(t1, $.$get$globalFunctions());
      C.JSArray_methods.addAll$1(t1, metaFunctions);
      for (
        t2 = t1.length, t3 = _this._builtInFunctions, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        $function = t1[_i];
        t4 = J.get$name$x($function);
        t3.$indexSet(0, H.stringReplaceAllUnchecked(t4, '_', '-'), $function);
      }
    },
    run$2(importer, node) {
      return this._withWarnCallback$1$2(
        node,
        new R._EvaluateVisitor_run_closure(this, node, importer),
        type$.EvaluateResult
      );
    },
    runExpression$2(importer, expression) {
      return this._withWarnCallback$1$2(
        expression,
        new R._EvaluateVisitor_runExpression_closure(
          this,
          importer,
          expression
        ),
        type$.Value
      );
    },
    runStatement$2(importer, statement) {
      return this._withWarnCallback$1$2(
        statement,
        new R._EvaluateVisitor_runStatement_closure(this, importer, statement),
        type$.void
      );
    },
    _withWarnCallback$1$2(nodeWithSpan, callback, $T) {
      return N.withWarnCallback(
        new R._EvaluateVisitor__withWarnCallback_closure(this, nodeWithSpan),
        callback,
        $T
      );
    },
    _assertInModule$1$2(value, $name) {
      if (value != null) return value;
      throw H.wrapException(
        P.StateError$("Can't access " + $name + ' outside of a module.')
      );
    },
    _assertInModule$2(value, $name) {
      return this._assertInModule$1$2(value, $name, type$.dynamic);
    },
    _withFakeStylesheet$1$3(importer, nodeWithSpan, callback) {
      var t1,
        _this = this,
        oldImporter = _this._importer;
      _this._importer = importer;
      _this.__stylesheet = V.Stylesheet$(
        C.List_empty9,
        nodeWithSpan.get$span()
      );
      try {
        t1 = callback.call$0();
        return t1;
      } finally {
        _this._importer = oldImporter;
        _this.__stylesheet = null;
      }
    },
    _withFakeStylesheet$3(importer, nodeWithSpan, callback) {
      return this._withFakeStylesheet$1$3(
        importer,
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _loadModule$7$baseUrl$configuration$namesInErrors(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      baseUrl,
      configuration,
      namesInErrors
    ) {
      var t1,
        _this = this,
        builtInModule = _this._builtInModules.$index(0, url);
      if (builtInModule != null) {
        if (configuration instanceof A.ExplicitConfiguration) {
          t1 = namesInErrors
            ? 'Built-in module ' + url.toString$0(0) + " can't be configured."
            : "Built-in modules can't be configured.";
          throw H.wrapException(
            _this._evaluate$_exception$2(
              t1,
              configuration.nodeWithSpan.get$span()
            )
          );
        }
        _this._addExceptionSpan$2(
          nodeWithSpan,
          new R._EvaluateVisitor__loadModule_closure(callback, builtInModule)
        );
        return;
      }
      _this._withStackFrame$3(
        stackFrame,
        nodeWithSpan,
        new R._EvaluateVisitor__loadModule_closure0(
          _this,
          url,
          nodeWithSpan,
          baseUrl,
          namesInErrors,
          configuration,
          callback
        )
      );
    },
    _loadModule$5$configuration(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      configuration
    ) {
      return this._loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        configuration,
        false
      );
    },
    _loadModule$4(url, stackFrame, nodeWithSpan, callback) {
      return this._loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        null,
        false
      );
    },
    _execute$5$configuration$namesInErrors$nodeWithSpan(
      importer,
      stylesheet,
      configuration,
      namesInErrors,
      nodeWithSpan
    ) {
      var currentConfiguration,
        message,
        t2,
        existingSpan,
        configurationSpan,
        environment,
        css,
        extensionStore,
        module,
        _this = this,
        url = stylesheet.span.file.url,
        t1 = _this._modules,
        alreadyLoaded = t1.$index(0, url);
      if (alreadyLoaded != null) {
        t1 = configuration == null;
        currentConfiguration = t1 ? _this._configuration : configuration;
        if (currentConfiguration instanceof A.ExplicitConfiguration) {
          message = namesInErrors
            ? $.$get$context().prettyUri$1(url) + string$.x20was_a
            : string$.This_mw;
          t2 = _this._moduleNodes.$index(0, url);
          existingSpan = t2 == null ? null : t2.get$span();
          configurationSpan = t1
            ? currentConfiguration.nodeWithSpan.get$span()
            : null;
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          if (existingSpan != null)
            t1.$indexSet(0, existingSpan, 'original load');
          if (configurationSpan != null)
            t1.$indexSet(0, configurationSpan, 'configuration');
          throw H.wrapException(
            t1.get$isEmpty(t1)
              ? _this._evaluate$_exception$1(message)
              : _this._multiSpanException$3(message, 'new load', t1)
          );
        }
        return alreadyLoaded;
      }
      environment = O.Environment$();
      css = H._Cell$();
      extensionStore = X.ExtensionStore$();
      _this._withEnvironment$2(
        environment,
        new R._EvaluateVisitor__execute_closure(
          _this,
          importer,
          stylesheet,
          extensionStore,
          configuration,
          css
        )
      );
      module = environment.toModule$2(css._readLocal$0(), extensionStore);
      if (url != null) {
        t1.$indexSet(0, url, module);
        if (nodeWithSpan != null)
          _this._moduleNodes.$indexSet(0, url, nodeWithSpan);
      }
      return module;
    },
    _execute$2(importer, stylesheet) {
      return this._execute$5$configuration$namesInErrors$nodeWithSpan(
        importer,
        stylesheet,
        null,
        false,
        null
      );
    },
    _addOutOfOrderImports$0() {
      var t1,
        t2,
        _this = this,
        _s5_ = '_root',
        _s13_ = '_endOfImports',
        outOfOrderImports = _this._outOfOrderImports;
      if (outOfOrderImports == null)
        return _this._assertInModule$2(_this.__root, _s5_).children;
      t1 = _this._assertInModule$2(_this.__root, _s5_).children;
      t1 = P.List_List$of(
        H.SubListIterable$(
          t1,
          0,
          H.checkNotNullable(
            _this._assertInModule$2(_this.__endOfImports, _s13_),
            'count',
            type$.int
          ),
          t1.$ti._eval$1('ListMixin.E')
        ),
        true,
        type$.ModifiableCssNode
      );
      C.JSArray_methods.addAll$1(t1, outOfOrderImports);
      t2 = _this._assertInModule$2(_this.__root, _s5_).children;
      C.JSArray_methods.addAll$1(
        t1,
        H.SubListIterable$(
          t2,
          _this._assertInModule$2(_this.__endOfImports, _s13_),
          null,
          t2.$ti._eval$1('ListMixin.E')
        )
      );
      return t1;
    },
    _combineCss$2$clone(root, clone) {
      var selectors,
        unsatisfiedExtension,
        sortedModules,
        t1,
        imports,
        css,
        t2,
        t3,
        statements,
        index,
        _this = this;
      if (
        !C.JSArray_methods.any$1(
          root.get$upstream(),
          new R._EvaluateVisitor__combineCss_closure()
        )
      ) {
        selectors = root.get$extensionStore().get$simpleSelectors();
        unsatisfiedExtension = B.firstOrNull(
          root
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new R._EvaluateVisitor__combineCss_closure0(selectors)
            )
        );
        if (unsatisfiedExtension != null)
          _this._throwForUnsatisfiedExtension$1(unsatisfiedExtension);
        return root.get$css(root);
      }
      sortedModules = _this._topologicalModules$1(root);
      if (clone) {
        t1 = sortedModules.$ti._eval$1(
          'MappedListIterable<ListMixin.E,Module<Callable>>'
        );
        sortedModules = P.List_List$of(
          new H.MappedListIterable(
            sortedModules,
            new R._EvaluateVisitor__combineCss_closure1(),
            t1
          ),
          true,
          t1._eval$1('ListIterable.E')
        );
      }
      _this._extendModules$1(sortedModules);
      t1 = type$.JSArray_CssNode;
      imports = H._setArrayType([], t1);
      css = H._setArrayType([], t1);
      for (
        t1 = J.get$reversed$ax(sortedModules),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t3 = t2._as(t1.__internal$_current);
        t3 = t3.get$css(t3);
        statements = t3.get$children(t3);
        index = _this._indexAfterImports$1(statements);
        t3 = J.getInterceptor$ax(statements);
        C.JSArray_methods.addAll$1(
          imports,
          t3.getRange$2(statements, 0, index)
        );
        C.JSArray_methods.addAll$1(
          css,
          t3.getRange$2(statements, index, t3.get$length(statements))
        );
      }
      return new V.CssStylesheet(
        new P.UnmodifiableListView(
          C.JSArray_methods.$add(imports, css),
          type$.UnmodifiableListView_CssNode
        ),
        root.get$css(root).get$span()
      );
    },
    _combineCss$1(root) {
      return this._combineCss$2$clone(root, false);
    },
    _extendModules$1(sortedModules) {
      var t1,
        t2,
        originalSelectors,
        $self,
        t3,
        t4,
        _i,
        url,
        downstreamExtensionStores = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Uri,
          type$.List_ExtensionStore
        ),
        unsatisfiedExtensions = new P._LinkedIdentityHashSet(
          type$._LinkedIdentityHashSet_Extension
        );
      for (t1 = J.get$iterator$ax(sortedModules); t1.moveNext$0(); ) {
        t2 = t1.get$current();
        originalSelectors = t2
          .get$extensionStore()
          .get$simpleSelectors()
          .toSet$0(0);
        unsatisfiedExtensions.addAll$1(
          0,
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new R._EvaluateVisitor__extendModules_closure(originalSelectors)
            )
        );
        $self = downstreamExtensionStores.$index(0, t2.get$url());
        t3 = t2.get$extensionStore().get$addExtensions();
        if ($self != null) t3.call$1($self);
        t3 = t2.get$extensionStore();
        if (t3.get$isEmpty(t3)) continue;
        for (
          t3 = t2.get$upstream(), t4 = t3.length, _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          url = t3[_i].get$url();
          if (url == null) continue;
          J.add$1$ax(
            downstreamExtensionStores.putIfAbsent$2(
              url,
              new R._EvaluateVisitor__extendModules_closure0()
            ),
            t2.get$extensionStore()
          );
        }
        unsatisfiedExtensions.removeAll$1(
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              originalSelectors.get$contains(originalSelectors)
            )
        );
      }
      if (unsatisfiedExtensions._collection$_length !== 0)
        this._throwForUnsatisfiedExtension$1(
          unsatisfiedExtensions.get$first(unsatisfiedExtensions)
        );
    },
    _throwForUnsatisfiedExtension$1(extension) {
      throw H.wrapException(
        E.SassException$(
          string$.The_ta +
            extension.target.toString$0(0) +
            ' !optional" to avoid this error.',
          extension.span
        )
      );
    },
    _topologicalModules$1(root) {
      var t1 = type$.Module_Callable,
        sorted = Q.QueueList$(null, t1);
      new R._EvaluateVisitor__topologicalModules_visitModule(
        P.LinkedHashSet_LinkedHashSet$_empty(t1),
        sorted
      ).call$1(root);
      return sorted;
    },
    _indexAfterImports$1(statements) {
      var t1, t2, t3, lastImport, i, statement;
      for (
        t1 = J.getInterceptor$asx(statements),
          t2 = type$.CssComment,
          t3 = type$.CssImport,
          lastImport = -1,
          i = 0;
        i < t1.get$length(statements);
        ++i
      ) {
        statement = t1.$index(statements, i);
        if (t3._is(statement)) lastImport = i;
        else if (!t2._is(statement)) break;
      }
      return lastImport + 1;
    },
    visitStylesheet$1(node) {
      var t1, t2, _i;
      for (t1 = node.children, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].accept$1(this);
      return null;
    },
    visitAtRootRule$1(node) {
      var t1,
        grandparent,
        root,
        innerCopy,
        t2,
        outerCopy,
        copy,
        _this = this,
        _s8_ = '__parent',
        unparsedQuery = node.query,
        query =
          unparsedQuery != null
            ? _this._adjustParseError$2(
                unparsedQuery,
                new R._EvaluateVisitor_visitAtRootRule_closure(
                  _this,
                  _this._performInterpolation$2$warnForColor(
                    unparsedQuery,
                    true
                  )
                )
              )
            : C.AtRootQuery_UsS,
        $parent = _this._assertInModule$2(_this.__parent, _s8_),
        included = H._setArrayType([], type$.JSArray_ModifiableCssParentNode);
      for (t1 = type$.CssStylesheet; !t1._is($parent); $parent = grandparent) {
        if (!query.excludes$1($parent)) included.push($parent);
        grandparent = $parent._parent;
        if (grandparent == null)
          throw H.wrapException(P.StateError$(string$.CssNod));
      }
      root = _this._trimIncluded$1(included);
      if (root === _this._assertInModule$2(_this.__parent, _s8_)) {
        _this._environment.scope$1$2$when(
          new R._EvaluateVisitor_visitAtRootRule_closure0(_this, node),
          node.hasDeclarations,
          type$.Null
        );
        return null;
      }
      if (included.length !== 0) {
        innerCopy = C.JSArray_methods.get$first(
          included
        ).copyWithoutChildren$0();
        for (
          t1 = H.SubListIterable$(
            included,
            1,
            null,
            type$.ModifiableCssParentNode
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1,
            outerCopy = innerCopy;
          t1.moveNext$0();
          outerCopy = copy
        ) {
          copy = t2._as(t1.__internal$_current).copyWithoutChildren$0();
          copy.addChild$1(outerCopy);
        }
        root.addChild$1(outerCopy);
      } else innerCopy = root;
      _this
        ._scopeForAtRoot$4(node, innerCopy, query, included)
        .call$1(new R._EvaluateVisitor_visitAtRootRule_closure1(_this, node));
      return null;
    },
    _trimIncluded$1(nodes) {
      var $parent,
        t1,
        innermostContiguous,
        i,
        t2,
        grandparent,
        root,
        _this = this,
        _null = null,
        _s5_ = '_root',
        _s22_ = ' to be an ancestor of ';
      if (nodes.length === 0)
        return _this._assertInModule$2(_this.__root, _s5_);
      $parent = _this._assertInModule$2(_this.__parent, '__parent');
      for (
        t1 = nodes.length, innermostContiguous = _null, i = 0;
        i < t1;
        ++i, $parent = grandparent
      ) {
        for (
          ;
          (t2 = nodes[i]), $parent !== t2;
          innermostContiguous = _null, $parent = grandparent
        ) {
          grandparent = $parent._parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(
                'Expected ' +
                  t2.toString$0(0) +
                  _s22_ +
                  _this.toString$0(0) +
                  '.',
                _null
              )
            );
        }
        if (innermostContiguous == null) innermostContiguous = i;
        grandparent = $parent._parent;
        if (grandparent == null)
          throw H.wrapException(
            P.ArgumentError$(
              'Expected ' +
                t2.toString$0(0) +
                _s22_ +
                _this.toString$0(0) +
                '.',
              _null
            )
          );
      }
      if ($parent !== _this._assertInModule$2(_this.__root, _s5_))
        return _this._assertInModule$2(_this.__root, _s5_);
      innermostContiguous.toString;
      root = nodes[innermostContiguous];
      C.JSArray_methods.removeRange$2(nodes, innermostContiguous, nodes.length);
      return root;
    },
    _scopeForAtRoot$4(node, newParent, query, included) {
      var _this = this,
        scope = new R._EvaluateVisitor__scopeForAtRoot_closure(
          _this,
          newParent,
          node
        ),
        t1 = query._all || query._at_root_query$_rule;
      if (t1 !== query.include)
        scope = new R._EvaluateVisitor__scopeForAtRoot_closure0(_this, scope);
      if (_this._mediaQueries != null && query.excludesName$1('media'))
        scope = new R._EvaluateVisitor__scopeForAtRoot_closure1(_this, scope);
      if (_this._inKeyframes && query.excludesName$1('keyframes'))
        scope = new R._EvaluateVisitor__scopeForAtRoot_closure2(_this, scope);
      return _this._inUnknownAtRule &&
        !C.JSArray_methods.any$1(
          included,
          new R._EvaluateVisitor__scopeForAtRoot_closure3()
        )
        ? new R._EvaluateVisitor__scopeForAtRoot_closure4(_this, scope)
        : scope;
    },
    visitContentBlock$1(node) {
      return H.throwExpression(P.UnsupportedError$(string$.Evalua));
    },
    visitContentRule$1(node) {
      var $content = this._environment._content;
      if ($content == null) return null;
      this._runUserDefinedCallable$1$4(
        node.$arguments,
        $content,
        node,
        new R._EvaluateVisitor_visitContentRule_closure(this, $content),
        type$.Null
      );
      return null;
    },
    visitDebugRule$1(node) {
      var value = node.expression.accept$1(this),
        t1 =
          value instanceof D.SassString
            ? value.text
            : N.serializeValue0(value, true, true);
      this._evaluate$_logger.debug$2(0, t1, node.span);
      return null;
    },
    visitDeclaration$1(node) {
      var t1,
        $name,
        t2,
        cssValue,
        t3,
        t4,
        children,
        oldDeclarationName,
        _this = this,
        _null = null;
      if (
        (_this._atRootExcludingStyleRule
          ? _null
          : _this._styleRuleIgnoringAtRoot) == null &&
        !_this._inUnknownAtRule &&
        !_this._inKeyframes
      )
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Declarm, node.span)
        );
      t1 = node.name;
      $name = _this._interpolationToValue$2$warnForColor(t1, true);
      t2 = _this._declarationName;
      if (t2 != null)
        $name = new F.CssValue(
          t2 + '-' + H.S($name.value),
          $name.span,
          type$.CssValue_String
        );
      t2 = node.value;
      cssValue = X.NullableExtension_andThen(
        t2,
        new R._EvaluateVisitor_visitDeclaration_closure(_this)
      );
      t3 = cssValue != null;
      if (t3)
        t4 =
          !cssValue.get$value(cssValue).get$isBlank() ||
          cssValue.get$value(cssValue).get$asList().length === 0;
      else t4 = false;
      if (t4) {
        t3 = _this._assertInModule$2(_this.__parent, '__parent');
        t1 = C.JSString_methods.startsWith$1(t1.get$initialPlain(), '--');
        if (_this._sourceMap) {
          t2 = X.NullableExtension_andThen(t2, _this.get$_expressionNode());
          t2 = t2 == null ? _null : t2.get$span();
        } else t2 = _null;
        t3.addChild$1(
          L.ModifiableCssDeclaration$($name, cssValue, node.span, t1, t2)
        );
      } else if (J.startsWith$1$s($name.value, '--') && t3)
        throw H.wrapException(
          _this._evaluate$_exception$2(
            'Custom property values may not be empty.',
            cssValue.get$span()
          )
        );
      children = node.children;
      if (children != null) {
        oldDeclarationName = _this._declarationName;
        _this._declarationName = $name.value;
        _this._environment.scope$1$2$when(
          new R._EvaluateVisitor_visitDeclaration_closure0(_this, children),
          node.hasDeclarations,
          type$.Null
        );
        _this._declarationName = oldDeclarationName;
      }
      return _null;
    },
    visitEachRule$1(node) {
      var _this = this,
        t1 = node.list,
        list = t1.accept$1(_this),
        nodeWithSpan = _this._expressionNode$1(t1),
        setVariables =
          node.variables.length === 1
            ? new R._EvaluateVisitor_visitEachRule_closure(
                _this,
                node,
                nodeWithSpan
              )
            : new R._EvaluateVisitor_visitEachRule_closure0(
                _this,
                node,
                nodeWithSpan
              );
      return _this._environment.scope$1$2$semiGlobal(
        new R._EvaluateVisitor_visitEachRule_closure1(
          _this,
          list,
          setVariables,
          node
        ),
        true,
        type$.nullable_Value
      );
    },
    _setMultipleVariables$3(variables, value, nodeWithSpan) {
      var i,
        list = value.get$asList(),
        t1 = variables.length,
        minLength = Math.min(t1, list.length);
      for (i = 0; i < minLength; ++i)
        this._environment.setLocalVariable$3(
          variables[i],
          this._withoutSlash$2(list[i], nodeWithSpan),
          nodeWithSpan
        );
      for (i = minLength; i < t1; ++i)
        this._environment.setLocalVariable$3(
          variables[i],
          C.C__SassNull0,
          nodeWithSpan
        );
    },
    visitErrorRule$1(node) {
      throw H.wrapException(
        this._evaluate$_exception$2(
          node.expression.accept$1(this).toString$0(0),
          node.span
        )
      );
    },
    visitExtendRule$1(node) {
      var targetText,
        t1,
        t2,
        t3,
        _i,
        t4,
        _this = this,
        styleRule = _this._atRootExcludingStyleRule
          ? null
          : _this._styleRuleIgnoringAtRoot;
      if (styleRule == null || _this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.x40exten, node.span)
        );
      targetText = _this._interpolationToValue$2$warnForColor(
        node.selector,
        true
      );
      for (
        t1 = _this._adjustParseError$2(
          targetText,
          new R._EvaluateVisitor_visitExtendRule_closure(_this, targetText)
        ).components,
          t2 = t1.length,
          t3 = type$.CompoundSelector,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        t4 = t1[_i].components;
        if (
          t4.length !== 1 ||
          !(C.JSArray_methods.get$first(t4) instanceof X.CompoundSelector)
        )
          throw H.wrapException(
            E.SassFormatException$(
              'complex selectors may not be extended.',
              targetText.span
            )
          );
        t4 = t3._as(C.JSArray_methods.get$first(t4)).components;
        if (t4.length !== 1)
          throw H.wrapException(
            E.SassFormatException$(
              string$.compou +
                C.JSArray_methods.join$1(t4, ', ') +
                string$.x60_inst,
              targetText.span
            )
          );
        _this
          ._assertInModule$2(_this.__extensionStore, '_extensionStore')
          .addExtension$4(
            styleRule.selector,
            C.JSArray_methods.get$first(t4),
            node,
            _this._mediaQueries
          );
      }
      return null;
    },
    visitAtRule$1(node) {
      var $name,
        value,
        children,
        wasInKeyframes,
        wasInUnknownAtRule,
        _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.At_rul, node.span)
        );
      $name = _this._interpolationToValue$1(node.name);
      value = X.NullableExtension_andThen(
        node.value,
        new R._EvaluateVisitor_visitAtRule_closure(_this)
      );
      children = node.children;
      if (children == null) {
        _this
          ._assertInModule$2(_this.__parent, '__parent')
          .addChild$1(U.ModifiableCssAtRule$($name, node.span, true, value));
        return null;
      }
      wasInKeyframes = _this._inKeyframes;
      wasInUnknownAtRule = _this._inUnknownAtRule;
      if (B.unvendor($name.value) === 'keyframes') _this._inKeyframes = true;
      else _this._inUnknownAtRule = true;
      _this._withParent$2$4$scopeWhen$through(
        U.ModifiableCssAtRule$($name, node.span, false, value),
        new R._EvaluateVisitor_visitAtRule_closure0(_this, children),
        node.hasDeclarations,
        new R._EvaluateVisitor_visitAtRule_closure1(),
        type$.ModifiableCssAtRule,
        type$.Null
      );
      _this._inUnknownAtRule = wasInUnknownAtRule;
      _this._inKeyframes = wasInKeyframes;
      return null;
    },
    visitForRule$1(node) {
      var _this = this,
        t1 = {},
        t2 = node.from,
        fromNumber = _this._addExceptionSpan$2(
          t2,
          new R._EvaluateVisitor_visitForRule_closure(_this, node)
        ),
        t3 = node.to,
        toNumber = _this._addExceptionSpan$2(
          t3,
          new R._EvaluateVisitor_visitForRule_closure0(_this, node)
        ),
        from = _this._addExceptionSpan$2(
          t2,
          new R._EvaluateVisitor_visitForRule_closure1(fromNumber)
        ),
        to = (t1.to = _this._addExceptionSpan$2(
          t3,
          new R._EvaluateVisitor_visitForRule_closure2(toNumber, fromNumber)
        )),
        direction = from > to ? -1 : 1;
      if (from === (!node.isExclusive ? (t1.to = to + direction) : to))
        return null;
      return _this._environment.scope$1$2$semiGlobal(
        new R._EvaluateVisitor_visitForRule_closure3(
          t1,
          _this,
          node,
          from,
          direction,
          fromNumber
        ),
        true,
        type$.nullable_Value
      );
    },
    visitForwardRule$1(node) {
      var newConfiguration,
        _i,
        variable,
        _this = this,
        _s8_ = '@forward',
        oldConfiguration = _this._configuration,
        adjustedConfiguration = oldConfiguration.throughForward$1(node),
        t1 = node.configuration,
        t2 = t1.length,
        t3 = node.url;
      if (t2 !== 0) {
        newConfiguration = _this._addForwardConfiguration$2(
          adjustedConfiguration,
          node
        );
        _this._loadModule$5$configuration(
          t3,
          _s8_,
          node,
          new R._EvaluateVisitor_visitForwardRule_closure(_this, node),
          newConfiguration
        );
        t3 = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
        for (_i = 0; _i < t2; ++_i) {
          variable = t1[_i];
          if (!variable.isGuarded) t3.add$1(0, variable.name);
        }
        _this._removeUsedConfiguration$3$except(
          adjustedConfiguration,
          newConfiguration,
          t3
        );
        _this._assertConfigurationIsEmpty$1(newConfiguration);
      } else {
        _this._configuration = adjustedConfiguration;
        _this._loadModule$4(
          t3,
          _s8_,
          node,
          new R._EvaluateVisitor_visitForwardRule_closure0(_this, node)
        );
        _this._configuration = oldConfiguration;
      }
      return null;
    },
    _addForwardConfiguration$2(configuration, node) {
      var t2,
        t3,
        _i,
        variable,
        t4,
        t5,
        variableNodeWithSpan,
        t1 = configuration._values,
        newValues = P.LinkedHashMap_LinkedHashMap$of(
          new P.UnmodifiableMapView(
            t1,
            type$.UnmodifiableMapView_String_ConfiguredValue
          ),
          type$.String,
          type$.ConfiguredValue
        );
      for (t2 = node.configuration, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        variable = t2[_i];
        if (variable.isGuarded) {
          t4 = variable.name;
          t5 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, t4);
          if (t5 != null && !t5.value.$eq(0, C.C__SassNull0)) {
            newValues.$indexSet(0, t4, t5);
            continue;
          }
        }
        t4 = variable.expression;
        variableNodeWithSpan = this._expressionNode$1(t4);
        newValues.$indexSet(
          0,
          variable.name,
          new Z.ConfiguredValue(
            this._withoutSlash$2(t4.accept$1(this), variableNodeWithSpan),
            variable.span,
            variableNodeWithSpan
          )
        );
      }
      if (
        configuration instanceof A.ExplicitConfiguration ||
        t1.get$isEmpty(t1)
      )
        return new A.ExplicitConfiguration(node, newValues);
      else return new A.Configuration(newValues);
    },
    _removeUsedConfiguration$3$except(upstream, downstream, except) {
      var t1, t2, t3, t4, _i, $name;
      for (
        t1 = upstream._values,
          t2 = J.toList$0$ax(t1.get$keys(t1)),
          t3 = t2.length,
          t4 = downstream._values,
          _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      ) {
        $name = t2[_i];
        if (except.contains$1(0, $name)) continue;
        if (!t4.containsKey$1($name))
          if (!t1.get$isEmpty(t1)) t1.remove$1(0, $name);
      }
    },
    _assertConfigurationIsEmpty$2$nameInError(configuration, nameInError) {
      var t1, entry;
      if (!(configuration instanceof A.ExplicitConfiguration)) return;
      t1 = configuration._values;
      if (t1.get$isEmpty(t1)) return;
      t1 = t1.get$entries(t1);
      entry = t1.get$first(t1);
      t1 = nameInError
        ? '$' + H.S(entry.key) + string$.x20was_n
        : string$.This_v;
      throw H.wrapException(
        this._evaluate$_exception$2(t1, entry.value.configurationSpan)
      );
    },
    _assertConfigurationIsEmpty$1(configuration) {
      return this._assertConfigurationIsEmpty$2$nameInError(
        configuration,
        false
      );
    },
    visitFunctionRule$1(node) {
      var t1 = this._environment,
        t2 = t1.closure$0(),
        t3 = t1._functions,
        index = t3.length - 1,
        t4 = node.name;
      t1._functionIndices.$indexSet(0, t4, index);
      J.$indexSet$ax(
        t3[index],
        t4,
        new E.UserDefinedCallable(
          node,
          t2,
          type$.UserDefinedCallable_Environment
        )
      );
      return null;
    },
    visitIfRule$1(node) {
      var t1,
        t2,
        _i,
        clauseToCheck,
        _box_0 = {};
      _box_0.clause = node.lastClause;
      for (t1 = node.clauses, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        clauseToCheck = t1[_i];
        if (clauseToCheck.expression.accept$1(this).get$isTruthy()) {
          _box_0.clause = clauseToCheck;
          break;
        }
      }
      t1 = _box_0.clause;
      if (t1 == null) return null;
      return this._environment.scope$1$3$semiGlobal$when(
        new R._EvaluateVisitor_visitIfRule_closure(_box_0, this),
        true,
        t1.hasDeclarations,
        type$.nullable_Value
      );
    },
    visitImportRule$1(node) {
      var t1, t2, t3, _i, $import;
      for (
        t1 = node.imports, t2 = t1.length, t3 = type$.StaticImport, _i = 0;
        _i < t2;
        ++_i
      ) {
        $import = t1[_i];
        if ($import instanceof B.DynamicImport)
          this._visitDynamicImport$1($import);
        else this._visitStaticImport$1(t3._as($import));
      }
      return null;
    },
    _visitDynamicImport$1($import) {
      return this._withStackFrame$3(
        '@import',
        $import,
        new R._EvaluateVisitor__visitDynamicImport_closure(this, $import)
      );
    },
    _loadStylesheet$4$baseUrl$forImport(url, span, baseUrl, forImport) {
      var importCache,
        tuple,
        isDependency,
        stylesheet,
        result,
        error,
        error0,
        message,
        t1,
        t2,
        t3,
        t4,
        exception,
        message0,
        _this = this;
      baseUrl = baseUrl;
      try {
        _this._importSpan = span;
        importCache = _this._evaluate$_importCache;
        if (importCache != null) {
          if (baseUrl == null)
            baseUrl = _this._assertInModule$2(_this.__stylesheet, '_stylesheet')
              .span.file.url;
          tuple = importCache.canonicalize$4$baseImporter$baseUrl$forImport(
            P.Uri_parse(url),
            _this._importer,
            baseUrl,
            forImport
          );
          if (tuple != null) {
            isDependency =
              _this._inDependency || tuple.item1 !== _this._importer;
            t1 = tuple.item1;
            t2 = tuple.item2;
            t3 = tuple.item3;
            t4 = _this._quietDeps && isDependency;
            stylesheet = importCache.importCanonical$4$originalUrl$quiet(
              t1,
              t2,
              t3,
              t4
            );
            if (stylesheet != null) {
              _this._loadedUrls.add$1(0, tuple.item2);
              t1 = tuple.item1;
              return new R._LoadedStylesheet(stylesheet, t1, isDependency);
            }
          }
        } else {
          result = _this._importLikeNode$2(url, forImport);
          if (result != null) {
            t1 = _this._loadedUrls;
            X.NullableExtension_andThen(
              result.stylesheet.span.file.url,
              t1.get$add(t1)
            );
            return result;
          }
        }
        if (C.JSString_methods.startsWith$1(url, 'package:') && true)
          throw H.wrapException(string$.x22packa);
        else throw H.wrapException("Can't find stylesheet to import.");
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassException) {
          error = t1;
          t1 = _this._evaluate$_exception$2(
            error._span_exception$_message,
            error.get$span()
          );
          throw H.wrapException(t1);
        } else {
          error0 = t1;
          message = null;
          try {
            message = H._asString(J.get$message$x(error0));
          } catch (exception) {
            H.unwrapException(exception);
            message0 = J.toString$0$(error0);
            message = message0;
          }
          t1 = _this._evaluate$_exception$1(message);
          throw H.wrapException(t1);
        }
      } finally {
        _this._importSpan = null;
      }
    },
    _loadStylesheet$3$baseUrl(url, span, baseUrl) {
      return this._loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        baseUrl,
        false
      );
    },
    _loadStylesheet$3$forImport(url, span, forImport) {
      return this._loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        null,
        forImport
      );
    },
    _importLikeNode$2(originalUrl, forImport) {
      var result,
        contents,
        url,
        _this = this,
        t1 = _this._nodeImporter;
      t1.toString;
      result = t1.load$3(
        0,
        originalUrl,
        _this._assertInModule$2(_this.__stylesheet, '_stylesheet').span.file
          .url,
        forImport
      );
      contents = result.get$contents(result);
      t1 = result.get$file(result);
      url = $.$get$context().toUri$1(t1).toString$0(0);
      t1 = result.get$isIndentedSyntax(result) ? C.Syntax_Sass : C.Syntax_SCSS;
      return new R._LoadedStylesheet(
        V.Stylesheet_Stylesheet$parse(
          contents,
          t1,
          _this._quietDeps ? $.$get$Logger_quiet() : _this._evaluate$_logger,
          url
        ),
        null,
        true
      );
    },
    _visitStaticImport$1($import) {
      var t1,
        _this = this,
        _s8_ = '__parent',
        _s5_ = '_root',
        _s13_ = '_endOfImports',
        url = _this._interpolationToValue$1($import.url),
        supports = X.NullableExtension_andThen(
          $import.supports,
          new R._EvaluateVisitor__visitStaticImport_closure(_this)
        ),
        node = F.ModifiableCssImport$(
          url,
          $import.span,
          X.NullableExtension_andThen(
            $import.media,
            _this.get$_visitMediaQueries()
          ),
          supports
        );
      if (
        _this._assertInModule$2(_this.__parent, _s8_) !==
        _this._assertInModule$2(_this.__root, _s5_)
      )
        _this._assertInModule$2(_this.__parent, _s8_).addChild$1(node);
      else if (
        _this._assertInModule$2(_this.__endOfImports, _s13_) ===
        J.get$length$asx(
          _this._assertInModule$2(_this.__root, _s5_).children
            ._collection$_source
        )
      ) {
        _this._assertInModule$2(_this.__root, _s5_).addChild$1(node);
        _this.__endOfImports =
          _this._assertInModule$2(_this.__endOfImports, _s13_) + 1;
      } else {
        t1 = _this._outOfOrderImports;
        (t1 == null
          ? (_this._outOfOrderImports = H._setArrayType(
              [],
              type$.JSArray_ModifiableCssImport
            ))
          : t1
        ).push(node);
      }
      return null;
    },
    visitIncludeRule$1(node) {
      var nodeWithSpan,
        t1,
        _this = this,
        _s37_ = "Mixin doesn't accept a content block.",
        mixin = _this._addExceptionSpan$2(
          node,
          new R._EvaluateVisitor_visitIncludeRule_closure(_this, node)
        );
      if (mixin == null)
        throw H.wrapException(
          _this._evaluate$_exception$2('Undefined mixin.', node.span)
        );
      nodeWithSpan = new B._FakeAstNode(
        new R._EvaluateVisitor_visitIncludeRule_closure0(node)
      );
      if (mixin instanceof Q.BuiltInCallable) {
        if (node.content != null)
          throw H.wrapException(_this._evaluate$_exception$2(_s37_, node.span));
        _this._runBuiltInCallable$3(node.$arguments, mixin, nodeWithSpan);
      } else if (type$.UserDefinedCallable_Environment._is(mixin)) {
        t1 = node.content;
        if (
          t1 != null &&
          !type$.MixinRule._as(mixin.declaration).get$hasContent()
        )
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              _s37_,
              node.get$spanWithoutContent(),
              'invocation',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  mixin.declaration.$arguments.get$spanWithName(),
                  'declaration',
                ],
                type$.FileSpan,
                type$.String
              ),
              _this._evaluate$_stackTrace$1(node.get$spanWithoutContent())
            )
          );
        _this._runUserDefinedCallable$1$4(
          node.$arguments,
          mixin,
          nodeWithSpan,
          new R._EvaluateVisitor_visitIncludeRule_closure1(
            _this,
            X.NullableExtension_andThen(
              t1,
              new R._EvaluateVisitor_visitIncludeRule_closure2(_this)
            ),
            mixin,
            nodeWithSpan
          ),
          type$.Null
        );
      } else
        throw H.wrapException(
          P.UnsupportedError$(
            'Unknown callable type ' + mixin.toString$0(0) + '.'
          )
        );
      return null;
    },
    visitMixinRule$1(node) {
      var t1 = this._environment,
        t2 = t1.closure$0(),
        t3 = t1._mixins,
        index = t3.length - 1,
        t4 = node.name;
      t1._mixinIndices.$indexSet(0, t4, index);
      J.$indexSet$ax(
        t3[index],
        t4,
        new E.UserDefinedCallable(
          node,
          t2,
          type$.UserDefinedCallable_Environment
        )
      );
      return null;
    },
    visitLoudComment$1(node) {
      var t1,
        _this = this,
        _s8_ = '__parent',
        _s13_ = '_endOfImports';
      if (_this._inFunction) return null;
      if (
        _this._assertInModule$2(_this.__parent, _s8_) ===
          _this._assertInModule$2(_this.__root, '_root') &&
        _this._assertInModule$2(_this.__endOfImports, _s13_) ===
          J.get$length$asx(
            _this._assertInModule$2(_this.__root, '_root').children
              ._collection$_source
          )
      )
        _this.__endOfImports =
          _this._assertInModule$2(_this.__endOfImports, _s13_) + 1;
      t1 = node.text;
      _this
        ._assertInModule$2(_this.__parent, _s8_)
        .addChild$1(
          new R.ModifiableCssComment(_this._performInterpolation$1(t1), t1.span)
        );
      return null;
    },
    visitMediaRule$1(node) {
      var queries,
        mergedQueries,
        t1,
        _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Media_, node.span)
        );
      queries = _this._visitMediaQueries$1(node.query);
      mergedQueries = X.NullableExtension_andThen(
        _this._mediaQueries,
        new R._EvaluateVisitor_visitMediaRule_closure(_this, queries)
      );
      t1 = mergedQueries == null;
      if (!t1 && J.get$isEmpty$asx(mergedQueries)) return null;
      t1 = t1 ? queries : mergedQueries;
      _this._withParent$2$4$scopeWhen$through(
        G.ModifiableCssMediaRule$(t1, node.span),
        new R._EvaluateVisitor_visitMediaRule_closure0(
          _this,
          mergedQueries,
          queries,
          node
        ),
        node.hasDeclarations,
        new R._EvaluateVisitor_visitMediaRule_closure1(mergedQueries),
        type$.ModifiableCssMediaRule,
        type$.Null
      );
      return null;
    },
    _visitMediaQueries$1(interpolation) {
      return this._adjustParseError$2(
        interpolation,
        new R._EvaluateVisitor__visitMediaQueries_closure(
          this,
          this._performInterpolation$2$warnForColor(interpolation, true)
        )
      );
    },
    _mergeMediaQueries$2(queries1, queries2) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        result,
        queries = H._setArrayType([], type$.JSArray_CssMediaQuery);
      for (
        t1 = J.get$iterator$ax(queries1),
          t2 = J.getInterceptor$ax(queries2),
          t3 = type$.MediaQuerySuccessfulMergeResult;
        t1.moveNext$0();

      ) {
        t4 = t1.get$current();
        for (t5 = t2.get$iterator(queries2); t5.moveNext$0(); ) {
          result = t4.merge$1(t5.get$current());
          if (result === C._SingletonCssMediaQueryMergeResult_empty) continue;
          if (result === C._SingletonCssMediaQueryMergeResult_unrepresentable)
            return null;
          queries.push(t3._as(result).query);
        }
      }
      return queries;
    },
    visitReturnRule$1(node) {
      var t1 = node.expression;
      return this._withoutSlash$2(t1.accept$1(this), t1);
    },
    visitSilentComment$1(node) {
      return null;
    },
    visitStyleRule$1(node) {
      var t2,
        selectorText,
        rule,
        oldAtRootExcludingStyleRule,
        _this = this,
        _s8_ = '__parent',
        t1 = {};
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Style_, node.span)
        );
      t2 = node.selector;
      selectorText = _this._interpolationToValue$3$trim$warnForColor(
        t2,
        true,
        true
      );
      if (_this._inKeyframes) {
        _this._withParent$2$4$scopeWhen$through(
          U.ModifiableCssKeyframeBlock$(
            new F.CssValue(
              P.List_List$unmodifiable(
                _this._adjustParseError$2(
                  t2,
                  new R._EvaluateVisitor_visitStyleRule_closure(
                    _this,
                    selectorText
                  )
                ),
                type$.String
              ),
              t2.span,
              type$.CssValue_List_String
            ),
            node.span
          ),
          new R._EvaluateVisitor_visitStyleRule_closure0(_this, node),
          node.hasDeclarations,
          new R._EvaluateVisitor_visitStyleRule_closure1(),
          type$.ModifiableCssKeyframeBlock,
          type$.Null
        );
        return null;
      }
      t1.parsedSelector = _this._adjustParseError$2(
        t2,
        new R._EvaluateVisitor_visitStyleRule_closure2(_this, selectorText)
      );
      t1.parsedSelector = _this._addExceptionSpan$2(
        t2,
        new R._EvaluateVisitor_visitStyleRule_closure3(t1, _this)
      );
      rule = X.ModifiableCssStyleRule$(
        _this
          ._assertInModule$2(_this.__extensionStore, '_extensionStore')
          .addSelector$3(t1.parsedSelector, t2.span, _this._mediaQueries),
        node.span,
        t1.parsedSelector
      );
      oldAtRootExcludingStyleRule = _this._atRootExcludingStyleRule;
      t1 = _this._atRootExcludingStyleRule = false;
      _this._withParent$2$4$scopeWhen$through(
        rule,
        new R._EvaluateVisitor_visitStyleRule_closure4(_this, rule, node),
        node.hasDeclarations,
        new R._EvaluateVisitor_visitStyleRule_closure5(),
        type$.ModifiableCssStyleRule,
        type$.Null
      );
      _this._atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
      if (
        (oldAtRootExcludingStyleRule ? null : _this._styleRuleIgnoringAtRoot) ==
        null
      ) {
        t1 = _this._assertInModule$2(_this.__parent, _s8_).children;
        t1 = !t1.get$isEmpty(t1);
      }
      if (t1) {
        t1 = _this._assertInModule$2(_this.__parent, _s8_).children;
        t1.get$last(t1).isGroupEnd = true;
      }
      return null;
    },
    visitSupportsRule$1(node) {
      var t1,
        _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Suppor, node.span)
        );
      t1 = node.condition;
      _this._withParent$2$4$scopeWhen$through(
        B.ModifiableCssSupportsRule$(
          new F.CssValue(
            _this._visitSupportsCondition$1(t1),
            t1.get$span(),
            type$.CssValue_String
          ),
          node.span
        ),
        new R._EvaluateVisitor_visitSupportsRule_closure(_this, node),
        node.hasDeclarations,
        new R._EvaluateVisitor_visitSupportsRule_closure0(),
        type$.ModifiableCssSupportsRule,
        type$.Null
      );
      return null;
    },
    _visitSupportsCondition$1(condition) {
      var t1,
        t2,
        _this = this;
      if (condition instanceof U.SupportsOperation) {
        t1 = condition.operator;
        return (
          _this._parenthesize$2(condition.left, t1) +
          ' ' +
          t1 +
          ' ' +
          _this._parenthesize$2(condition.right, t1)
        );
      } else if (condition instanceof M.SupportsNegation)
        return 'not ' + _this._parenthesize$1(condition.condition);
      else if (condition instanceof X.SupportsInterpolation) {
        t1 = condition.expression;
        return _this._evaluate$_serialize$3$quote(
          t1.accept$1(_this),
          t1,
          false
        );
      } else if (condition instanceof L.SupportsDeclaration) {
        t1 = condition.name;
        t2 = condition.value;
        return (
          '(' +
          _this._evaluate$_serialize$3$quote(t1.accept$1(_this), t1, true) +
          ': ' +
          _this._evaluate$_serialize$3$quote(t2.accept$1(_this), t2, true) +
          ')'
        );
      } else if (condition instanceof F.SupportsFunction)
        return (
          _this._performInterpolation$1(condition.name) +
          '(' +
          _this._performInterpolation$1(condition.$arguments) +
          ')'
        );
      else if (condition instanceof Y.SupportsAnything)
        return '(' + _this._performInterpolation$1(condition.contents) + ')';
      else
        throw H.wrapException(
          P.ArgumentError$(
            'Unknown supports condition type ' +
              H.getRuntimeType(condition).toString$0(0) +
              '.',
            null
          )
        );
    },
    _parenthesize$2(condition, operator) {
      var t1;
      if (!(condition instanceof M.SupportsNegation))
        if (condition instanceof U.SupportsOperation)
          t1 = operator == null || operator !== condition.operator;
        else t1 = false;
      else t1 = true;
      if (t1) return '(' + this._visitSupportsCondition$1(condition) + ')';
      else return this._visitSupportsCondition$1(condition);
    },
    _parenthesize$1(condition) {
      return this._parenthesize$2(condition, null);
    },
    visitVariableDeclaration$1(node) {
      var t1,
        value,
        _this = this,
        _null = null;
      if (node.isGuarded) {
        if (
          node.namespace == null &&
          _this._environment._variables.length === 1
        ) {
          t1 = _this._configuration._values;
          t1 = t1.get$isEmpty(t1) ? _null : t1.remove$1(0, node.name);
          if (t1 != null && !t1.value.$eq(0, C.C__SassNull0)) {
            _this._addExceptionSpan$2(
              node,
              new R._EvaluateVisitor_visitVariableDeclaration_closure(
                _this,
                node,
                t1
              )
            );
            return _null;
          }
        }
        value = _this._addExceptionSpan$2(
          node,
          new R._EvaluateVisitor_visitVariableDeclaration_closure0(_this, node)
        );
        if (value != null && !value.$eq(0, C.C__SassNull0)) return _null;
      }
      if (
        node.isGlobal &&
        !_this._environment.globalVariableExists$1(node.name)
      ) {
        t1 =
          _this._environment._variables.length === 1
            ? string$.As_of_S
            : string$.As_of_R +
              B.declarationName(node.span) +
              ': null` at the stylesheet root.';
        _this._warn$3$deprecation(t1, node.span, true);
      }
      t1 = node.expression;
      _this._addExceptionSpan$2(
        node,
        new R._EvaluateVisitor_visitVariableDeclaration_closure1(
          _this,
          node,
          _this._withoutSlash$2(t1.accept$1(_this), t1)
        )
      );
      return _null;
    },
    visitUseRule$1(node) {
      var values,
        _i,
        variable,
        t3,
        variableNodeWithSpan,
        configuration,
        _this = this,
        t1 = node.configuration,
        t2 = t1.length;
      if (t2 !== 0) {
        values = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.ConfiguredValue
        );
        for (_i = 0; _i < t2; ++_i) {
          variable = t1[_i];
          t3 = variable.expression;
          variableNodeWithSpan = _this._expressionNode$1(t3);
          values.$indexSet(
            0,
            variable.name,
            new Z.ConfiguredValue(
              _this._withoutSlash$2(t3.accept$1(_this), variableNodeWithSpan),
              variable.span,
              variableNodeWithSpan
            )
          );
        }
        configuration = new A.ExplicitConfiguration(node, values);
      } else configuration = C.Configuration_Map_empty;
      _this._loadModule$5$configuration(
        node.url,
        '@use',
        node,
        new R._EvaluateVisitor_visitUseRule_closure(_this, node),
        configuration
      );
      _this._assertConfigurationIsEmpty$1(configuration);
      return null;
    },
    visitWarnRule$1(node) {
      var _this = this,
        value = _this._addExceptionSpan$2(
          node,
          new R._EvaluateVisitor_visitWarnRule_closure(_this, node)
        ),
        t1 =
          value instanceof D.SassString
            ? value.text
            : _this._evaluate$_serialize$2(value, node.expression);
      _this._evaluate$_logger.warn$2$trace(
        0,
        t1,
        _this._evaluate$_stackTrace$1(node.span)
      );
      return null;
    },
    visitWhileRule$1(node) {
      return this._environment.scope$1$3$semiGlobal$when(
        new R._EvaluateVisitor_visitWhileRule_closure(this, node),
        true,
        node.hasDeclarations,
        type$.nullable_Value
      );
    },
    visitBinaryOperationExpression$1(node) {
      return this._addExceptionSpan$2(
        node,
        new R._EvaluateVisitor_visitBinaryOperationExpression_closure(
          this,
          node
        )
      );
    },
    visitValueExpression$1(node) {
      return node.value;
    },
    visitVariableExpression$1(node) {
      var result = this._addExceptionSpan$2(
        node,
        new R._EvaluateVisitor_visitVariableExpression_closure(this, node)
      );
      if (result != null) return result;
      throw H.wrapException(
        this._evaluate$_exception$2('Undefined variable.', node.span)
      );
    },
    visitUnaryOperationExpression$1(node) {
      var operand = node.operand.accept$1(this),
        t1 = node.operator;
      switch (t1) {
        case C.UnaryOperator_j2w:
          return operand.unaryPlus$0();
        case C.UnaryOperator_U4G:
          return operand.unaryMinus$0();
        case C.UnaryOperator_zDx:
          return new D.SassString(
            '/' + N.serializeValue0(operand, false, true),
            false
          );
        case C.UnaryOperator_not_not:
          return operand.unaryNot$0();
        default:
          throw H.wrapException(
            P.StateError$('Unknown unary operator ' + t1.toString$0(0) + '.')
          );
      }
    },
    visitBooleanExpression$1(node) {
      return node.value ? C.SassBoolean_true0 : C.SassBoolean_false0;
    },
    visitIfExpression$1(node) {
      var condition,
        t2,
        ifTrue,
        ifFalse,
        result,
        _this = this,
        pair = _this._evaluateMacroArguments$1(node),
        positional = pair.item1,
        named = pair.item2,
        t1 = J.getInterceptor$asx(positional);
      _this._verifyArguments$4(
        t1.get$length(positional),
        named,
        $.$get$IfExpression_declaration(),
        node
      );
      if (t1.get$length(positional) > 0) condition = t1.$index(positional, 0);
      else {
        t2 = named.$index(0, 'condition');
        t2.toString;
        condition = t2;
      }
      if (t1.get$length(positional) > 1) ifTrue = t1.$index(positional, 1);
      else {
        t2 = named.$index(0, 'if-true');
        t2.toString;
        ifTrue = t2;
      }
      if (t1.get$length(positional) > 2) ifFalse = t1.$index(positional, 2);
      else {
        t1 = named.$index(0, 'if-false');
        t1.toString;
        ifFalse = t1;
      }
      result = condition.accept$1(_this).get$isTruthy() ? ifTrue : ifFalse;
      return _this._withoutSlash$2(
        result.accept$1(_this),
        _this._expressionNode$1(result)
      );
    },
    visitNullExpression$1(node) {
      return C.C__SassNull0;
    },
    visitNumberExpression$1(node) {
      var t1 = node.value,
        t2 = node.unit;
      return t2 == null
        ? new N.UnitlessSassNumber(t1, null)
        : new L.SingleUnitSassNumber(t2, t1, null);
    },
    visitParenthesizedExpression$1(node) {
      return node.expression.accept$1(this);
    },
    visitColorExpression$1(node) {
      return node.value;
    },
    visitListExpression$1(node) {
      var t1 = node.contents;
      return D.SassList$(
        new H.MappedListIterable(
          t1,
          new R._EvaluateVisitor_visitListExpression_closure(this),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value>')
        ),
        node.separator,
        node.hasBrackets
      );
    },
    visitMapExpression$1(node) {
      var t2,
        t3,
        _i,
        pair,
        t4,
        keyValue,
        valueValue,
        oldValueSpan,
        t1 = type$.Value,
        map = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        keyNodes = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode);
      for (t2 = node.pairs, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        pair = t2[_i];
        t4 = pair.item1;
        keyValue = t4.accept$1(this);
        valueValue = pair.item2.accept$1(this);
        if (map.$index(0, keyValue) != null) {
          t1 = keyNodes.$index(0, keyValue);
          oldValueSpan = t1 == null ? null : t1.get$span();
          t1 = t4.get$span();
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          if (oldValueSpan != null) t2.$indexSet(0, oldValueSpan, 'first key');
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              'Duplicate key.',
              t1,
              'second key',
              t2,
              this._evaluate$_stackTrace$1(t4.get$span())
            )
          );
        }
        map.$indexSet(0, keyValue, valueValue);
        keyNodes.$indexSet(0, keyValue, t4);
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(map, t1, t1));
    },
    visitFunctionExpression$1(node) {
      var oldInFunction,
        result,
        _this = this,
        t1 = {},
        $function = _this._addExceptionSpan$2(
          node,
          new R._EvaluateVisitor_visitFunctionExpression_closure(_this, node)
        );
      t1.$function = $function;
      if ($function == null) {
        if (node.namespace != null)
          throw H.wrapException(
            _this._evaluate$_exception$2('Undefined function.', node.span)
          );
        t1.$function = new L.PlainCssCallable(node.originalName);
      }
      oldInFunction = _this._inFunction;
      _this._inFunction = true;
      result = _this._addErrorSpan$2(
        node,
        new R._EvaluateVisitor_visitFunctionExpression_closure0(t1, _this, node)
      );
      _this._inFunction = oldInFunction;
      return result;
    },
    visitInterpolatedFunctionExpression$1(node) {
      var result,
        _this = this,
        t1 = _this._performInterpolation$1(node.name),
        oldInFunction = _this._inFunction;
      _this._inFunction = true;
      result = _this._addErrorSpan$2(
        node,
        new R._EvaluateVisitor_visitInterpolatedFunctionExpression_closure(
          _this,
          node,
          new L.PlainCssCallable(t1)
        )
      );
      _this._inFunction = oldInFunction;
      return result;
    },
    _getFunction$2$namespace($name, namespace) {
      var local = this._environment.getFunction$2$namespace($name, namespace);
      if (local != null || namespace != null) return local;
      return this._builtInFunctions.$index(0, $name);
    },
    _runUserDefinedCallable$1$4($arguments, callable, nodeWithSpan, run, $V) {
      var evaluated = this._evaluateArguments$1($arguments),
        $name = callable.declaration.name;
      if ($name !== '@content') $name += '()';
      return this._withStackFrame$3(
        $name,
        nodeWithSpan,
        new R._EvaluateVisitor__runUserDefinedCallable_closure(
          this,
          callable,
          evaluated,
          nodeWithSpan,
          run,
          $V
        )
      );
    },
    _runFunctionCallable$3($arguments, callable, nodeWithSpan) {
      var t1,
        t2,
        t3,
        first,
        _i,
        argument,
        restArg,
        rest,
        _this = this;
      if (callable instanceof Q.BuiltInCallable)
        return _this._withoutSlash$2(
          _this._runBuiltInCallable$3($arguments, callable, nodeWithSpan),
          nodeWithSpan
        );
      else if (type$.UserDefinedCallable_Environment._is(callable))
        return _this._runUserDefinedCallable$1$4(
          $arguments,
          callable,
          nodeWithSpan,
          new R._EvaluateVisitor__runFunctionCallable_closure(_this, callable),
          type$.Value
        );
      else if (callable instanceof L.PlainCssCallable) {
        t1 = $arguments.named;
        if (t1.get$isNotEmpty(t1) || $arguments.keywordRest != null)
          throw H.wrapException(
            _this._evaluate$_exception$2(
              string$.Plain_,
              nodeWithSpan.get$span()
            )
          );
        t1 = callable.name + '(';
        for (
          t2 = $arguments.positional, t3 = t2.length, first = true, _i = 0;
          _i < t3;
          ++_i
        ) {
          argument = t2[_i];
          if (first) first = false;
          else t1 += ', ';
          t1 += _this._evaluate$_serialize$3$quote(
            argument.accept$1(_this),
            argument,
            true
          );
        }
        restArg = $arguments.rest;
        if (restArg != null) {
          rest = restArg.accept$1(_this);
          if (!first) t1 += ', ';
          t1 += _this._evaluate$_serialize$2(rest, restArg);
        }
        t1 += H.Primitives_stringFromCharCode(41);
        return new D.SassString(t1.charCodeAt(0) == 0 ? t1 : t1, false);
      } else
        throw H.wrapException(
          P.ArgumentError$(
            'Unknown callable type ' +
              J.get$runtimeType$u(callable).toString$0(0) +
              '.',
            null
          )
        );
    },
    _runBuiltInCallable$3($arguments, callable, nodeWithSpan) {
      var callback,
        result,
        error,
        error0,
        error1,
        message,
        namedSet,
        tuple,
        overload,
        declaredArguments,
        i,
        t1,
        argument,
        t2,
        t3,
        rest,
        argumentList,
        exception,
        message0,
        _this = this,
        evaluated = _this._evaluateArguments$1($arguments),
        oldCallableNode = _this._callableNode;
      _this._callableNode = nodeWithSpan;
      namedSet = new M.MapKeySet(evaluated.named, type$.MapKeySet_String);
      tuple = callable.callbackFor$2(evaluated.positional.length, namedSet);
      overload = tuple.item1;
      callback = tuple.item2;
      _this._addExceptionSpan$2(
        nodeWithSpan,
        new R._EvaluateVisitor__runBuiltInCallable_closure(
          overload,
          evaluated,
          namedSet
        )
      );
      declaredArguments = overload.$arguments;
      for (
        i = evaluated.positional.length, t1 = declaredArguments.length;
        i < t1;
        ++i
      ) {
        argument = declaredArguments[i];
        t2 = evaluated.positional;
        t3 = evaluated.named.remove$1(0, argument.name);
        if (t3 == null) {
          t3 = argument.defaultValue;
          t3 = _this._withoutSlash$2(t3.accept$1(_this), t3);
        }
        t2.push(t3);
      }
      if (overload.restArgument != null) {
        if (evaluated.positional.length > t1) {
          rest = C.JSArray_methods.sublist$1(evaluated.positional, t1);
          C.JSArray_methods.removeRange$2(
            evaluated.positional,
            t1,
            evaluated.positional.length
          );
        } else rest = C.List_empty5;
        t1 = evaluated.named;
        argumentList = D.SassArgumentList$(
          rest,
          t1,
          evaluated.separator === C.ListSeparator_undecided_null
            ? C.ListSeparator_kWM
            : evaluated.separator
        );
        evaluated.positional.push(argumentList);
      } else argumentList = null;
      result = null;
      try {
        t1 = type$.nullable_Object;
        result = P.runZoned(
          new R._EvaluateVisitor__runBuiltInCallable_closure0(
            callback,
            evaluated
          ),
          P.LinkedHashMap_LinkedHashMap$_literal(
            [C.Symbol__currentCallableNode, nodeWithSpan],
            t1,
            t1
          ),
          type$.Value
        );
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SassRuntimeException._is(t1)) throw exception;
        else if (t1 instanceof E.MultiSpanSassScriptException) {
          error = t1;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              error.message,
              nodeWithSpan.get$span(),
              error.primaryLabel,
              error.secondarySpans,
              _this._evaluate$_stackTrace$1(nodeWithSpan.get$span())
            )
          );
        } else if (t1 instanceof E.MultiSpanSassException) {
          error0 = t1;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              error0._span_exception$_message,
              error0.get$span(),
              error0.primaryLabel,
              error0.secondarySpans,
              _this._evaluate$_stackTrace$1(error0.get$span())
            )
          );
        } else {
          error1 = t1;
          message = null;
          try {
            message = H._asString(J.get$message$x(error1));
          } catch (exception) {
            H.unwrapException(exception);
            message0 = J.toString$0$(error1);
            message = message0;
          }
          throw H.wrapException(
            _this._evaluate$_exception$2(message, nodeWithSpan.get$span())
          );
        }
      }
      _this._callableNode = oldCallableNode;
      if (argumentList == null) return result;
      t1 = evaluated.named;
      if (t1.get$isEmpty(t1)) return result;
      if (argumentList._wereKeywordsAccessed) return result;
      t1 = evaluated.named;
      t1 = t1.get$keys(t1);
      t1 = 'No ' + B.pluralize('argument', t1.get$length(t1), null) + ' named ';
      t2 = evaluated.named;
      throw H.wrapException(
        E.MultiSpanSassRuntimeException$(
          t1 +
            H.S(
              B.toSentence(
                t2
                  .get$keys(t2)
                  .map$1$1(
                    0,
                    new R._EvaluateVisitor__runBuiltInCallable_closure1(),
                    type$.Object
                  ),
                'or'
              )
            ) +
            '.',
          nodeWithSpan.get$span(),
          'invocation',
          P.LinkedHashMap_LinkedHashMap$_literal(
            [overload.get$spanWithName(), 'declaration'],
            type$.FileSpan,
            type$.String
          ),
          _this._evaluate$_stackTrace$1(nodeWithSpan.get$span())
        )
      );
    },
    _evaluateArguments$1($arguments) {
      var t1,
        t2,
        _i,
        expression,
        nodeForSpan,
        named,
        namedNodes,
        t3,
        t4,
        t5,
        restArgs,
        rest,
        restNodeForSpan,
        separator,
        keywordRestArgs,
        keywordRest,
        keywordRestNodeForSpan,
        _this = this,
        positional = H._setArrayType([], type$.JSArray_Value),
        positionalNodes = H._setArrayType([], type$.JSArray_AstNode);
      for (t1 = $arguments.positional, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        expression = t1[_i];
        nodeForSpan = _this._expressionNode$1(expression);
        positional.push(
          _this._withoutSlash$2(expression.accept$1(_this), nodeForSpan)
        );
        positionalNodes.push(nodeForSpan);
      }
      t1 = type$.String;
      named = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value);
      t2 = type$.AstNode;
      namedNodes = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      for (
        t3 = $arguments.named,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t5 = t4.value;
        nodeForSpan = _this._expressionNode$1(t5);
        t4 = t4.key;
        named.$indexSet(
          0,
          t4,
          _this._withoutSlash$2(t5.accept$1(_this), nodeForSpan)
        );
        namedNodes.$indexSet(0, t4, nodeForSpan);
      }
      restArgs = $arguments.rest;
      if (restArgs == null)
        return new R._ArgumentResults(
          positional,
          positionalNodes,
          named,
          namedNodes,
          C.ListSeparator_undecided_null
        );
      rest = restArgs.accept$1(_this);
      restNodeForSpan = _this._expressionNode$1(restArgs);
      if (rest instanceof A.SassMap) {
        _this._addRestMap$4(
          named,
          rest,
          restArgs,
          new R._EvaluateVisitor__evaluateArguments_closure()
        );
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        for (
          t4 = rest.contents,
            t4 = J.get$iterator$ax(t4.get$keys(t4)),
            t5 = type$.SassString;
          t4.moveNext$0();

        )
          t3.$indexSet(0, t5._as(t4.get$current()).text, restNodeForSpan);
        namedNodes.addAll$1(0, t3);
        separator = C.ListSeparator_undecided_null;
      } else if (rest instanceof D.SassList) {
        t3 = rest._list$_contents;
        C.JSArray_methods.addAll$1(
          positional,
          new H.MappedListIterable(
            t3,
            new R._EvaluateVisitor__evaluateArguments_closure0(
              _this,
              restNodeForSpan
            ),
            H._arrayInstanceType(t3)._eval$1('MappedListIterable<1,Value>')
          )
        );
        C.JSArray_methods.addAll$1(
          positionalNodes,
          P.List_List$filled(t3.length, restNodeForSpan, false, t2)
        );
        separator = rest.separator;
        if (rest instanceof D.SassArgumentList) {
          rest._wereKeywordsAccessed = true;
          rest._keywords.forEach$1(
            0,
            new R._EvaluateVisitor__evaluateArguments_closure1(
              _this,
              named,
              restNodeForSpan,
              namedNodes
            )
          );
        }
      } else {
        positional.push(_this._withoutSlash$2(rest, restNodeForSpan));
        positionalNodes.push(restNodeForSpan);
        separator = C.ListSeparator_undecided_null;
      }
      keywordRestArgs = $arguments.keywordRest;
      if (keywordRestArgs == null)
        return new R._ArgumentResults(
          positional,
          positionalNodes,
          named,
          namedNodes,
          separator
        );
      keywordRest = keywordRestArgs.accept$1(_this);
      keywordRestNodeForSpan = _this._expressionNode$1(keywordRestArgs);
      if (keywordRest instanceof A.SassMap) {
        _this._addRestMap$4(
          named,
          keywordRest,
          keywordRestArgs,
          new R._EvaluateVisitor__evaluateArguments_closure2()
        );
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        for (
          t2 = keywordRest.contents,
            t2 = J.get$iterator$ax(t2.get$keys(t2)),
            t3 = type$.SassString;
          t2.moveNext$0();

        )
          t1.$indexSet(
            0,
            t3._as(t2.get$current()).text,
            keywordRestNodeForSpan
          );
        namedNodes.addAll$1(0, t1);
        return new R._ArgumentResults(
          positional,
          positionalNodes,
          named,
          namedNodes,
          separator
        );
      } else
        throw H.wrapException(
          _this._evaluate$_exception$2(
            string$.Variabs + keywordRest.toString$0(0) + ').',
            keywordRestArgs.get$span()
          )
        );
    },
    _evaluateMacroArguments$1(invocation) {
      var t2,
        positional,
        named,
        rest,
        restNodeForSpan,
        keywordRestArgs_,
        keywordRest,
        keywordRestNodeForSpan,
        _this = this,
        t1 = invocation.$arguments,
        restArgs_ = t1.rest;
      if (restArgs_ == null)
        return new S.Tuple2(
          t1.positional,
          t1.named,
          type$.Tuple2_of_List_Expression_and_Map_String_Expression
        );
      t2 = t1.positional;
      positional = H._setArrayType(t2.slice(0), H._arrayInstanceType(t2));
      named = P.LinkedHashMap_LinkedHashMap$of(
        t1.named,
        type$.String,
        type$.Expression
      );
      rest = restArgs_.accept$1(_this);
      restNodeForSpan = _this._expressionNode$1(restArgs_);
      if (rest instanceof A.SassMap)
        _this._addRestMap$4(
          named,
          rest,
          invocation,
          new R._EvaluateVisitor__evaluateMacroArguments_closure(restArgs_)
        );
      else if (rest instanceof D.SassList) {
        t2 = rest._list$_contents;
        C.JSArray_methods.addAll$1(
          positional,
          new H.MappedListIterable(
            t2,
            new R._EvaluateVisitor__evaluateMacroArguments_closure0(
              _this,
              restNodeForSpan,
              restArgs_
            ),
            H._arrayInstanceType(t2)._eval$1('MappedListIterable<1,Expression>')
          )
        );
        if (rest instanceof D.SassArgumentList) {
          rest._wereKeywordsAccessed = true;
          rest._keywords.forEach$1(
            0,
            new R._EvaluateVisitor__evaluateMacroArguments_closure1(
              _this,
              named,
              restNodeForSpan,
              restArgs_
            )
          );
        }
      } else
        positional.push(
          new F.ValueExpression(
            _this._withoutSlash$2(rest, restNodeForSpan),
            restArgs_.get$span()
          )
        );
      keywordRestArgs_ = t1.keywordRest;
      if (keywordRestArgs_ == null)
        return new S.Tuple2(
          positional,
          named,
          type$.Tuple2_of_List_Expression_and_Map_String_Expression
        );
      keywordRest = keywordRestArgs_.accept$1(_this);
      keywordRestNodeForSpan = _this._expressionNode$1(keywordRestArgs_);
      if (keywordRest instanceof A.SassMap) {
        _this._addRestMap$4(
          named,
          keywordRest,
          invocation,
          new R._EvaluateVisitor__evaluateMacroArguments_closure2(
            _this,
            keywordRestNodeForSpan,
            keywordRestArgs_
          )
        );
        return new S.Tuple2(
          positional,
          named,
          type$.Tuple2_of_List_Expression_and_Map_String_Expression
        );
      } else
        throw H.wrapException(
          _this._evaluate$_exception$2(
            string$.Variabs + keywordRest.toString$0(0) + ').',
            keywordRestArgs_.get$span()
          )
        );
    },
    _addRestMap$1$4(values, map, nodeWithSpan, convert) {
      map.contents.forEach$1(
        0,
        new R._EvaluateVisitor__addRestMap_closure(
          this,
          values,
          convert,
          this._expressionNode$1(nodeWithSpan),
          map,
          nodeWithSpan
        )
      );
    },
    _addRestMap$4(values, map, nodeWithSpan, convert) {
      return this._addRestMap$1$4(
        values,
        map,
        nodeWithSpan,
        convert,
        type$.dynamic
      );
    },
    _verifyArguments$4(positional, named, $arguments, nodeWithSpan) {
      return this._addExceptionSpan$2(
        nodeWithSpan,
        new R._EvaluateVisitor__verifyArguments_closure(
          $arguments,
          positional,
          named
        )
      );
    },
    visitSelectorExpression$1(node) {
      var t1 = this._styleRuleIgnoringAtRoot;
      t1 = t1 == null ? null : t1.originalSelector.get$asSassList();
      return t1 == null ? C.C__SassNull0 : t1;
    },
    visitStringExpression$1(node) {
      var t1 = node.text.contents;
      return new D.SassString(
        new H.MappedListIterable(
          t1,
          new R._EvaluateVisitor_visitStringExpression_closure(this),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$0(0),
        node.hasQuotes
      );
    },
    visitCssAtRule$1(node) {
      var wasInKeyframes,
        wasInUnknownAtRule,
        t1,
        _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.At_rul, node.span)
        );
      if (node.isChildless) {
        _this
          ._assertInModule$2(_this.__parent, '__parent')
          .addChild$1(
            U.ModifiableCssAtRule$(node.name, node.span, true, node.value)
          );
        return null;
      }
      wasInKeyframes = _this._inKeyframes;
      wasInUnknownAtRule = _this._inUnknownAtRule;
      t1 = node.name;
      if (B.unvendor(t1.get$value(t1)) === 'keyframes')
        _this._inKeyframes = true;
      else _this._inUnknownAtRule = true;
      _this._withParent$2$4$scopeWhen$through(
        U.ModifiableCssAtRule$(t1, node.span, false, node.value),
        new R._EvaluateVisitor_visitCssAtRule_closure(_this, node),
        false,
        new R._EvaluateVisitor_visitCssAtRule_closure0(),
        type$.ModifiableCssAtRule,
        type$.Null
      );
      _this._inUnknownAtRule = wasInUnknownAtRule;
      _this._inKeyframes = wasInKeyframes;
    },
    visitCssComment$1(node) {
      var _this = this,
        _s8_ = '__parent',
        _s13_ = '_endOfImports';
      if (
        _this._assertInModule$2(_this.__parent, _s8_) ===
          _this._assertInModule$2(_this.__root, '_root') &&
        _this._assertInModule$2(_this.__endOfImports, _s13_) ===
          J.get$length$asx(
            _this._assertInModule$2(_this.__root, '_root').children
              ._collection$_source
          )
      )
        _this.__endOfImports =
          _this._assertInModule$2(_this.__endOfImports, _s13_) + 1;
      _this
        ._assertInModule$2(_this.__parent, _s8_)
        .addChild$1(new R.ModifiableCssComment(node.text, node.span));
    },
    visitCssDeclaration$1(node) {
      var t1 = node.name;
      this._assertInModule$2(this.__parent, '__parent').addChild$1(
        L.ModifiableCssDeclaration$(
          t1,
          node.value,
          node.span,
          J.startsWith$1$s(t1.get$value(t1), '--'),
          node.valueSpanForMap
        )
      );
    },
    visitCssImport$1(node) {
      var t1,
        _this = this,
        _s8_ = '__parent',
        _s5_ = '_root',
        _s13_ = '_endOfImports',
        modifiableNode = F.ModifiableCssImport$(
          node.url,
          node.span,
          node.media,
          node.supports
        );
      if (
        _this._assertInModule$2(_this.__parent, _s8_) !==
        _this._assertInModule$2(_this.__root, _s5_)
      )
        _this
          ._assertInModule$2(_this.__parent, _s8_)
          .addChild$1(modifiableNode);
      else if (
        _this._assertInModule$2(_this.__endOfImports, _s13_) ===
        J.get$length$asx(
          _this._assertInModule$2(_this.__root, _s5_).children
            ._collection$_source
        )
      ) {
        _this._assertInModule$2(_this.__root, _s5_).addChild$1(modifiableNode);
        _this.__endOfImports =
          _this._assertInModule$2(_this.__endOfImports, _s13_) + 1;
      } else {
        t1 = _this._outOfOrderImports;
        (t1 == null
          ? (_this._outOfOrderImports = H._setArrayType(
              [],
              type$.JSArray_ModifiableCssImport
            ))
          : t1
        ).push(modifiableNode);
      }
    },
    visitCssKeyframeBlock$1(node) {
      this._withParent$2$4$scopeWhen$through(
        U.ModifiableCssKeyframeBlock$(node.selector, node.span),
        new R._EvaluateVisitor_visitCssKeyframeBlock_closure(this, node),
        false,
        new R._EvaluateVisitor_visitCssKeyframeBlock_closure0(),
        type$.ModifiableCssKeyframeBlock,
        type$.Null
      );
    },
    visitCssMediaRule$1(node) {
      var mergedQueries,
        t1,
        _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Media_, node.span)
        );
      mergedQueries = X.NullableExtension_andThen(
        _this._mediaQueries,
        new R._EvaluateVisitor_visitCssMediaRule_closure(_this, node)
      );
      t1 = mergedQueries == null;
      if (!t1 && J.get$isEmpty$asx(mergedQueries)) return null;
      t1 = t1 ? node.queries : mergedQueries;
      _this._withParent$2$4$scopeWhen$through(
        G.ModifiableCssMediaRule$(t1, node.span),
        new R._EvaluateVisitor_visitCssMediaRule_closure0(
          _this,
          mergedQueries,
          node
        ),
        false,
        new R._EvaluateVisitor_visitCssMediaRule_closure1(mergedQueries),
        type$.ModifiableCssMediaRule,
        type$.Null
      );
    },
    visitCssStyleRule$1(node) {
      var t1,
        styleRule,
        t2,
        t3,
        t4,
        t5,
        originalSelector,
        rule,
        oldAtRootExcludingStyleRule,
        _this = this,
        _s8_ = '__parent';
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Style_, node.span)
        );
      t1 = _this._atRootExcludingStyleRule;
      styleRule = t1 ? null : _this._styleRuleIgnoringAtRoot;
      t2 = node.selector;
      t3 = t2.value;
      t4 = styleRule == null;
      t5 = t4 ? null : styleRule.originalSelector;
      originalSelector = t3.resolveParentSelectors$2$implicitParent(t5, !t1);
      rule = X.ModifiableCssStyleRule$(
        _this
          ._assertInModule$2(_this.__extensionStore, '_extensionStore')
          .addSelector$3(originalSelector, t2.span, _this._mediaQueries),
        node.span,
        originalSelector
      );
      oldAtRootExcludingStyleRule = _this._atRootExcludingStyleRule;
      _this._atRootExcludingStyleRule = false;
      _this._withParent$2$4$scopeWhen$through(
        rule,
        new R._EvaluateVisitor_visitCssStyleRule_closure(_this, rule, node),
        false,
        new R._EvaluateVisitor_visitCssStyleRule_closure0(),
        type$.ModifiableCssStyleRule,
        type$.Null
      );
      _this._atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
      if (t4) {
        t1 = _this._assertInModule$2(_this.__parent, _s8_).children;
        t1 = !t1.get$isEmpty(t1);
      } else t1 = false;
      if (t1) {
        t1 = _this._assertInModule$2(_this.__parent, _s8_).children;
        t1.get$last(t1).isGroupEnd = true;
      }
    },
    visitCssStylesheet$1(node) {
      var t1;
      for (t1 = J.get$iterator$ax(node.get$children(node)); t1.moveNext$0(); )
        t1.get$current().accept$1(this);
    },
    visitCssSupportsRule$1(node) {
      var _this = this;
      if (_this._declarationName != null)
        throw H.wrapException(
          _this._evaluate$_exception$2(string$.Suppor, node.span)
        );
      _this._withParent$2$4$scopeWhen$through(
        B.ModifiableCssSupportsRule$(node.condition, node.span),
        new R._EvaluateVisitor_visitCssSupportsRule_closure(_this, node),
        false,
        new R._EvaluateVisitor_visitCssSupportsRule_closure0(),
        type$.ModifiableCssSupportsRule,
        type$.Null
      );
    },
    _handleReturn$1$2(list, callback) {
      var t1, _i, result;
      for (
        t1 = list.length, _i = 0;
        _i < list.length;
        list.length === t1 || (0, H.throwConcurrentModificationError)(list),
          ++_i
      ) {
        result = callback.call$1(list[_i]);
        if (result != null) return result;
      }
      return null;
    },
    _handleReturn$2(list, callback) {
      return this._handleReturn$1$2(list, callback, type$.dynamic);
    },
    _withEnvironment$1$2(environment, callback) {
      var result,
        oldEnvironment = this._environment;
      this._environment = environment;
      result = callback.call$0();
      this._environment = oldEnvironment;
      return result;
    },
    _withEnvironment$2(environment, callback) {
      return this._withEnvironment$1$2(environment, callback, type$.dynamic);
    },
    _interpolationToValue$3$trim$warnForColor(
      interpolation,
      trim,
      warnForColor
    ) {
      var result = this._performInterpolation$2$warnForColor(
          interpolation,
          warnForColor
        ),
        t1 = trim ? B.trimAscii(result, true) : result;
      return new F.CssValue(t1, interpolation.span, type$.CssValue_String);
    },
    _interpolationToValue$1(interpolation) {
      return this._interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        false
      );
    },
    _interpolationToValue$2$warnForColor(interpolation, warnForColor) {
      return this._interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        warnForColor
      );
    },
    _performInterpolation$2$warnForColor(interpolation, warnForColor) {
      var t1 = interpolation.contents;
      return new H.MappedListIterable(
        t1,
        new R._EvaluateVisitor__performInterpolation_closure(
          this,
          warnForColor,
          interpolation
        ),
        H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
      ).join$0(0);
    },
    _performInterpolation$1(interpolation) {
      return this._performInterpolation$2$warnForColor(interpolation, false);
    },
    _evaluate$_serialize$3$quote(value, nodeWithSpan, quote) {
      return this._addExceptionSpan$2(
        nodeWithSpan,
        new R._EvaluateVisitor__serialize_closure(value, quote)
      );
    },
    _evaluate$_serialize$2(value, nodeWithSpan) {
      return this._evaluate$_serialize$3$quote(value, nodeWithSpan, true);
    },
    _expressionNode$1(expression) {
      var t1;
      if (expression instanceof S.VariableExpression) {
        t1 = this._addExceptionSpan$2(
          expression,
          new R._EvaluateVisitor__expressionNode_closure(this, expression)
        );
        return t1 == null ? expression : t1;
      } else return expression;
    },
    _withParent$2$4$scopeWhen$through(
      node,
      callback,
      scopeWhen,
      through,
      $S,
      $T
    ) {
      var t1,
        result,
        _this = this;
      _this._addChild$2$through(node, through);
      t1 = _this._assertInModule$2(_this.__parent, '__parent');
      _this.__parent = node;
      result = _this._environment.scope$1$2$when(callback, scopeWhen, $T);
      _this.__parent = t1;
      return result;
    },
    _withParent$2$3$scopeWhen(node, callback, scopeWhen, $S, $T) {
      return this._withParent$2$4$scopeWhen$through(
        node,
        callback,
        scopeWhen,
        null,
        $S,
        $T
      );
    },
    _withParent$2$2(node, callback, $S, $T) {
      return this._withParent$2$4$scopeWhen$through(
        node,
        callback,
        true,
        null,
        $S,
        $T
      );
    },
    _addChild$2$through(node, through) {
      var grandparent,
        t1,
        $parent = this._assertInModule$2(this.__parent, '__parent');
      if (through != null) {
        for (; through.call$1($parent); $parent = grandparent) {
          grandparent = $parent._parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(string$.throug + node.toString$0(0) + '.', null)
            );
        }
        if ($parent.get$hasFollowingSibling()) {
          t1 = $parent._parent;
          t1.toString;
          $parent = $parent.copyWithoutChildren$0();
          t1.addChild$1($parent);
        }
      }
      $parent.addChild$1(node);
    },
    _addChild$1(node) {
      return this._addChild$2$through(node, null);
    },
    _withStyleRule$1$2(rule, callback) {
      var result,
        oldRule = this._styleRuleIgnoringAtRoot;
      this._styleRuleIgnoringAtRoot = rule;
      result = callback.call$0();
      this._styleRuleIgnoringAtRoot = oldRule;
      return result;
    },
    _withStyleRule$2(rule, callback) {
      return this._withStyleRule$1$2(rule, callback, type$.dynamic);
    },
    _withMediaQueries$1$2(queries, callback) {
      var result,
        oldMediaQueries = this._mediaQueries;
      this._mediaQueries = queries;
      result = callback.call$0();
      this._mediaQueries = oldMediaQueries;
      return result;
    },
    _withMediaQueries$2(queries, callback) {
      return this._withMediaQueries$1$2(queries, callback, type$.dynamic);
    },
    _withStackFrame$1$3(member, nodeWithSpan, callback) {
      var oldMember,
        result,
        _this = this,
        t1 = _this._stack;
      t1.push(
        new S.Tuple2(_this._member, nodeWithSpan, type$.Tuple2_String_AstNode)
      );
      oldMember = _this._member;
      _this._member = member;
      result = callback.call$0();
      _this._member = oldMember;
      t1.pop();
      return result;
    },
    _withStackFrame$3(member, nodeWithSpan, callback) {
      return this._withStackFrame$1$3(
        member,
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _withoutSlash$2(value, nodeForSpan) {
      if (value instanceof T.SassNumber && value.asSlash != null)
        this._warn$3$deprecation(
          string$.Using__ +
            H.S(
              new R._EvaluateVisitor__withoutSlash_recommendation().call$1(
                value
              )
            ) +
            string$.x0a_More,
          nodeForSpan.get$span(),
          true
        );
      return value.withoutSlash$0();
    },
    _stackFrame$2(member, span) {
      return B.frameForSpan(
        span,
        member,
        X.NullableExtension_andThen(
          span.file.url,
          new R._EvaluateVisitor__stackFrame_closure(this)
        )
      );
    },
    _evaluate$_stackTrace$1(span) {
      var _this = this,
        t1 = _this._stack;
      t1 = P.List_List$of(
        new H.MappedListIterable(
          t1,
          new R._EvaluateVisitor__stackTrace_closure(_this),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Frame>')
        ),
        true,
        type$.Frame
      );
      if (span != null) t1.push(_this._stackFrame$2(_this._member, span));
      return Y.Trace$(
        new H.ReversedListIterable(
          t1,
          H._arrayInstanceType(t1)._eval$1('ReversedListIterable<1>')
        ),
        null
      );
    },
    _evaluate$_stackTrace$0() {
      return this._evaluate$_stackTrace$1(null);
    },
    _warn$3$deprecation(message, span, deprecation) {
      var _this = this;
      if (_this._quietDeps && _this._inDependency) return;
      if (
        !_this._warningsEmitted.add$1(
          0,
          new S.Tuple2(message, span, type$.Tuple2_String_SourceSpan)
        )
      )
        return;
      _this._evaluate$_logger.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        _this._evaluate$_stackTrace$1(span)
      );
    },
    _warn$2(message, span) {
      return this._warn$3$deprecation(message, span, false);
    },
    _evaluate$_exception$2(message, span) {
      var t1 =
        span == null
          ? C.JSArray_methods.get$last(this._stack).item2.get$span()
          : span;
      return new E.SassRuntimeException(
        this._evaluate$_stackTrace$1(span),
        message,
        t1
      );
    },
    _evaluate$_exception$1(message) {
      return this._evaluate$_exception$2(message, null);
    },
    _multiSpanException$3(message, primaryLabel, secondaryLabels) {
      var t1 = C.JSArray_methods.get$last(this._stack).item2.get$span();
      return new E.MultiSpanSassRuntimeException(
        this._evaluate$_stackTrace$0(),
        primaryLabel,
        H.ConstantMap_ConstantMap$from(
          secondaryLabels,
          type$.FileSpan,
          type$.String
        ),
        message,
        t1
      );
    },
    _adjustParseError$1$2(nodeWithSpan, callback) {
      var error,
        errorText,
        span,
        syntheticFile,
        syntheticSpan,
        t1,
        exception,
        t2,
        t3,
        t4,
        t5,
        _null = null;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException) {
          error = t1;
          t1 = error;
          errorText = P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              G.SourceSpanException.prototype.get$span.call(t1).file
                ._decodedChars,
              0,
              _null
            ),
            0,
            _null
          );
          span = nodeWithSpan.get$span();
          t1 = span;
          t2 = span;
          syntheticFile = C.JSString_methods.replaceRange$3(
            P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                span.file._decodedChars,
                0,
                _null
              ),
              0,
              _null
            ),
            Y.FileLocation$_(t1.file, t1._file$_start).offset,
            Y.FileLocation$_(t2.file, t2._end).offset,
            errorText
          );
          t2 = Y.SourceFile$fromString(syntheticFile, span.file.url);
          t1 = span;
          t1 = Y.FileLocation$_(t1.file, t1._file$_start);
          t3 = error;
          t3 = G.SourceSpanException.prototype.get$span.call(t3);
          t3 = Y.FileLocation$_(t3.file, t3._file$_start);
          t4 = span;
          t4 = Y.FileLocation$_(t4.file, t4._file$_start);
          t5 = error;
          t5 = G.SourceSpanException.prototype.get$span.call(t5);
          syntheticSpan = t2.span$2(
            t1.offset + t3.offset,
            t4.offset + Y.FileLocation$_(t5.file, t5._end).offset
          );
          throw H.wrapException(
            this._evaluate$_exception$2(
              error._span_exception$_message,
              syntheticSpan
            )
          );
        } else throw exception;
      }
    },
    _adjustParseError$2(nodeWithSpan, callback) {
      return this._adjustParseError$1$2(nodeWithSpan, callback, type$.dynamic);
    },
    _addExceptionSpan$1$2(nodeWithSpan, callback) {
      var error, error0, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.MultiSpanSassScriptException) {
          error = t1;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              error.message,
              nodeWithSpan.get$span(),
              error.primaryLabel,
              error.secondarySpans,
              this._evaluate$_stackTrace$1(nodeWithSpan.get$span())
            )
          );
        } else if (t1 instanceof E.SassScriptException) {
          error0 = t1;
          throw H.wrapException(
            this._evaluate$_exception$2(error0.message, nodeWithSpan.get$span())
          );
        } else throw exception;
      }
    },
    _addExceptionSpan$2(nodeWithSpan, callback) {
      return this._addExceptionSpan$1$2(nodeWithSpan, callback, type$.dynamic);
    },
    _addErrorSpan$1$2(nodeWithSpan, callback) {
      var error, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SassRuntimeException._is(t1)) {
          error = t1;
          t1 = error.get$span();
          if (
            !C.JSString_methods.startsWith$1(
              P.String_String$fromCharCodes(
                C.NativeUint32List_methods.sublist$2(
                  t1.file._decodedChars,
                  t1._file$_start,
                  t1._end
                ),
                0,
                null
              ),
              '@error'
            )
          )
            throw exception;
          throw H.wrapException(
            E.SassRuntimeException$(
              error._span_exception$_message,
              nodeWithSpan.get$span(),
              this._evaluate$_stackTrace$0()
            )
          );
        } else throw exception;
      }
    },
    _addErrorSpan$2(nodeWithSpan, callback) {
      return this._addErrorSpan$1$2(nodeWithSpan, callback, type$.dynamic);
    },
  };
  R._EvaluateVisitor_closure.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.globalVariableExists$2$namespace(
        t2,
        module == null ? null : module.text
      )
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  R._EvaluateVisitor_closure0.prototype = {
    call$1($arguments) {
      var variable = J.$index$asx($arguments, 0).assertString$1('name'),
        t1 = this.$this._environment;
      return t1.getVariable$1(
        H.stringReplaceAllUnchecked(variable.text, '_', '-')
      ) != null
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  R._EvaluateVisitor_closure1.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t3,
        t4,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this;
      t2 = t1._environment;
      t3 = variable.text;
      t4 = H.stringReplaceAllUnchecked(t3, '_', '-');
      return t2.getFunction$2$namespace(
        t4,
        module == null ? null : module.text
      ) != null || t1._builtInFunctions.containsKey$1(t3)
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  R._EvaluateVisitor_closure2.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.getMixin$2$namespace(t2, module == null ? null : module.text) !=
        null
        ? C.SassBoolean_true0
        : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  R._EvaluateVisitor_closure3.prototype = {
    call$1($arguments) {
      var t1 = this.$this._environment;
      if (!t1._inMixin)
        throw H.wrapException(E.SassScriptException$(string$.conten));
      return t1._content != null ? C.SassBoolean_true0 : C.SassBoolean_false0;
    },
    $signature: 13,
  };
  R._EvaluateVisitor_closure4.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._environment._environment$_modules.$index(0, t1);
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$variables(),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, new D.SassString(t4.key, true), t4.value);
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 29,
  };
  R._EvaluateVisitor_closure5.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._environment._environment$_modules.$index(0, t1);
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$functions(module),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(
          0,
          new D.SassString(t4.key, true),
          new F.SassFunction(t4.value)
        );
      }
      return new A.SassMap(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 29,
  };
  R._EvaluateVisitor_closure6.prototype = {
    call$1($arguments) {
      var module,
        callable,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        $name = t1.$index($arguments, 0).assertString$1('name'),
        css = t1.$index($arguments, 1).get$isTruthy();
      t1 = t1.$index($arguments, 2).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      if (css && module != null) throw H.wrapException(string$.x24css_a);
      if (css) callable = new L.PlainCssCallable($name.text);
      else {
        t1 = this.$this;
        t2 = t1._callableNode;
        t2.toString;
        callable = t1._addExceptionSpan$2(
          t2,
          new R._EvaluateVisitor__closure1(t1, $name, module)
        );
      }
      if (callable != null) return new F.SassFunction(callable);
      throw H.wrapException('Function not found: ' + $name.toString$0(0));
    },
    $signature: 205,
  };
  R._EvaluateVisitor__closure1.prototype = {
    call$0() {
      var t1 = H.stringReplaceAllUnchecked(this.name.text, '_', '-'),
        t2 = this.module;
      t2 = t2 == null ? null : t2.text;
      return this.$this._getFunction$2$namespace(t1, t2);
    },
    $signature: 104,
  };
  R._EvaluateVisitor_closure7.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        invocation,
        callableNode,
        callable,
        t1 = J.getInterceptor$asx($arguments),
        $function = t1.$index($arguments, 0),
        args = type$.SassArgumentList._as(t1.$index($arguments, 1));
      t1 = this.$this;
      t2 = t1._callableNode;
      t2.toString;
      t3 = H._setArrayType([], type$.JSArray_Expression);
      t4 = type$.String;
      t5 = type$.Expression;
      t6 = t2.get$span();
      t7 = t2.get$span();
      args._wereKeywordsAccessed = true;
      t8 = args._keywords;
      if (t8.get$isEmpty(t8)) t2 = null;
      else {
        t9 = type$.Value;
        t10 = P.LinkedHashMap_LinkedHashMap$_empty(t9, t9);
        for (
          args._wereKeywordsAccessed = true,
            t8 = t8.get$entries(t8),
            t8 = t8.get$iterator(t8);
          t8.moveNext$0();

        ) {
          t11 = t8.get$current();
          t10.$indexSet(0, new D.SassString(t11.key, false), t11.value);
        }
        t2 = new F.ValueExpression(
          new A.SassMap(H.ConstantMap_ConstantMap$from(t10, t9, t9)),
          t2.get$span()
        );
      }
      invocation = new X.ArgumentInvocation(
        P.List_List$unmodifiable(t3, t5),
        H.ConstantMap_ConstantMap$from(
          P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
          t4,
          t5
        ),
        new F.ValueExpression(args, t7),
        t2,
        t6
      );
      if ($function instanceof D.SassString) {
        N.warn(string$.Passin + $function.toString$0(0) + '))', true);
        callableNode = t1._callableNode;
        return t1.visitFunctionExpression$1(
          new F.FunctionExpression(
            null,
            $function.text,
            invocation,
            callableNode.get$span()
          )
        );
      }
      callable = $function.assertFunction$1('function').callable;
      if (type$.Callable._is(callable)) {
        t2 = t1._callableNode;
        t2.toString;
        return t1._runFunctionCallable$3(invocation, callable, t2);
      } else
        throw H.wrapException(
          E.SassScriptException$(
            'The function ' +
              callable.get$name(callable) +
              ' is asynchronous.\nThis is probably caused by a bug in a Sass plugin.'
          )
        );
    },
    $signature: 3,
  };
  R._EvaluateVisitor_closure8.prototype = {
    call$1($arguments) {
      var withMap,
        t2,
        values,
        configuration,
        t1 = J.getInterceptor$asx($arguments),
        url = P.Uri_parse(t1.$index($arguments, 0).assertString$1('url').text);
      t1 = t1.$index($arguments, 1).get$realNull();
      withMap = t1 == null ? null : t1.assertMap$1('with').contents;
      t1 = this.$this;
      t2 = t1._callableNode;
      t2.toString;
      if (withMap != null) {
        values = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.ConfiguredValue
        );
        withMap.forEach$1(
          0,
          new R._EvaluateVisitor__closure(values, t2.get$span(), t2)
        );
        configuration = new A.ExplicitConfiguration(t2, values);
      } else configuration = C.Configuration_Map_empty;
      t1._loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        'load-css()',
        t2,
        new R._EvaluateVisitor__closure0(t1),
        t2.get$span().file.url,
        configuration,
        true
      );
      t1._assertConfigurationIsEmpty$2$nameInError(configuration, true);
      return null;
    },
    $signature: 244,
  };
  R._EvaluateVisitor__closure.prototype = {
    call$2(variable, value) {
      var t1 = variable.assertString$1('with key'),
        $name = H.stringReplaceAllUnchecked(t1.text, '_', '-');
      t1 = this.values;
      if (t1.containsKey$1($name))
        throw H.wrapException(
          'The variable $' + $name + ' was configured twice.'
        );
      t1.$indexSet(
        0,
        $name,
        new Z.ConfiguredValue(value, this.span, this.callableNode)
      );
    },
    $signature: 44,
  };
  R._EvaluateVisitor__closure0.prototype = {
    call$1(module) {
      var t1 = this.$this;
      return t1._combineCss$2$clone(module, true).accept$1(t1);
    },
    $signature: 50,
  };
  R._EvaluateVisitor_run_closure.prototype = {
    call$0() {
      var t2,
        _this = this,
        t1 = _this.node,
        url = t1.span.file.url;
      if (url != null) {
        t2 = _this.$this;
        t2._activeModules.$indexSet(0, url, null);
        t2._loadedUrls.add$1(0, url);
      }
      t2 = _this.$this;
      return new E.EvaluateResult(
        t2._combineCss$1(t2._execute$2(_this.importer, t1))
      );
    },
    $signature: 246,
  };
  R._EvaluateVisitor_runExpression_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.expression;
      return t1._withFakeStylesheet$3(
        this.importer,
        t2,
        new R._EvaluateVisitor_runExpression__closure(t1, t2)
      );
    },
    $signature: 36,
  };
  R._EvaluateVisitor_runExpression__closure.prototype = {
    call$0() {
      return this.expression.accept$1(this.$this);
    },
    $signature: 36,
  };
  R._EvaluateVisitor_runStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.statement;
      return t1._withFakeStylesheet$3(
        this.importer,
        t2,
        new R._EvaluateVisitor_runStatement__closure(t1, t2)
      );
    },
    $signature: 0,
  };
  R._EvaluateVisitor_runStatement__closure.prototype = {
    call$0() {
      return this.statement.accept$1(this.$this);
    },
    $signature: 0,
  };
  R._EvaluateVisitor__withWarnCallback_closure.prototype = {
    call$2(message, deprecation) {
      var t1 = this.$this,
        t2 = t1._importSpan;
      if (t2 == null) {
        t2 = t1._callableNode;
        t2 = t2 == null ? null : t2.get$span();
      }
      return t1._warn$3$deprecation(
        message,
        t2 == null ? this.nodeWithSpan.get$span() : t2,
        deprecation
      );
    },
    $signature: 100,
  };
  R._EvaluateVisitor__loadModule_closure.prototype = {
    call$0() {
      return this.callback.call$1(this.builtInModule);
    },
    $signature: 0,
  };
  R._EvaluateVisitor__loadModule_closure0.prototype = {
    call$0() {
      var oldInDependency,
        module,
        error,
        error0,
        error1,
        error2,
        message,
        exception,
        _this = this,
        t1 = _this.$this,
        t2 = _this.nodeWithSpan,
        result = t1._loadStylesheet$3$baseUrl(
          _this.url.toString$0(0),
          t2.get$span(),
          _this.baseUrl
        ),
        stylesheet = result.stylesheet,
        canonicalUrl = stylesheet.span.file.url;
      if (
        canonicalUrl != null &&
        t1._activeModules.containsKey$1(canonicalUrl)
      ) {
        message = _this.namesInErrors
          ? 'Module loop: ' +
            $.$get$context().prettyUri$1(canonicalUrl) +
            ' is already being loaded.'
          : string$.Module;
        t2 = X.NullableExtension_andThen(
          t1._activeModules.$index(0, canonicalUrl),
          new R._EvaluateVisitor__loadModule__closure(t1, message)
        );
        throw H.wrapException(
          t2 == null ? t1._evaluate$_exception$1(message) : t2
        );
      }
      if (canonicalUrl != null)
        t1._activeModules.$indexSet(0, canonicalUrl, t2);
      oldInDependency = t1._inDependency;
      t1._inDependency = result.isDependency;
      module = null;
      try {
        module = t1._execute$5$configuration$namesInErrors$nodeWithSpan(
          result.importer,
          stylesheet,
          _this.configuration,
          _this.namesInErrors,
          t2
        );
      } finally {
        t1._activeModules.remove$1(0, canonicalUrl);
        t1._inDependency = oldInDependency;
      }
      try {
        _this.callback.call$1(module);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        if (type$.SassRuntimeException._is(t2)) throw exception;
        else if (t2 instanceof E.MultiSpanSassException) {
          error = t2;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$(
              error._span_exception$_message,
              error.get$span(),
              error.primaryLabel,
              error.secondarySpans,
              t1._evaluate$_stackTrace$1(error.get$span())
            )
          );
        } else if (t2 instanceof E.SassException) {
          error0 = t2;
          throw H.wrapException(
            t1._evaluate$_exception$2(
              error0._span_exception$_message,
              error0.get$span()
            )
          );
        } else if (t2 instanceof E.MultiSpanSassScriptException) {
          error1 = t2;
          throw H.wrapException(
            t1._multiSpanException$3(
              error1.message,
              error1.primaryLabel,
              error1.secondarySpans
            )
          );
        } else if (t2 instanceof E.SassScriptException) {
          error2 = t2;
          throw H.wrapException(t1._evaluate$_exception$1(error2.message));
        } else throw exception;
      }
    },
    $signature: 2,
  };
  R._EvaluateVisitor__loadModule__closure.prototype = {
    call$1(previousLoad) {
      return this.$this._multiSpanException$3(
        this.message,
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 60,
  };
  R._EvaluateVisitor__execute_closure.prototype = {
    call$0() {
      var t3,
        t4,
        t5,
        t6,
        _this = this,
        t1 = _this.$this,
        oldImporter = t1._importer,
        oldStylesheet = t1.__stylesheet,
        oldRoot = t1.__root,
        oldParent = t1.__parent,
        oldEndOfImports = t1.__endOfImports,
        oldOutOfOrderImports = t1._outOfOrderImports,
        oldExtensionStore = t1.__extensionStore,
        t2 = t1._atRootExcludingStyleRule,
        oldStyleRule = t2 ? null : t1._styleRuleIgnoringAtRoot,
        oldMediaQueries = t1._mediaQueries,
        oldDeclarationName = t1._declarationName,
        oldInUnknownAtRule = t1._inUnknownAtRule,
        oldInKeyframes = t1._inKeyframes,
        oldConfiguration = t1._configuration;
      t1._importer = _this.importer;
      t3 = t1.__stylesheet = _this.stylesheet;
      t4 = t3.span;
      t5 = t1.__parent = t1.__root = V.ModifiableCssStylesheet$(t4);
      t1.__endOfImports = 0;
      t1._outOfOrderImports = null;
      t1.__extensionStore = _this.extensionStore;
      t1._declarationName = t1._mediaQueries = t1._styleRuleIgnoringAtRoot = null;
      t1._inKeyframes = t1._atRootExcludingStyleRule = t1._inUnknownAtRule = false;
      t6 = _this.configuration;
      if (t6 != null) t1._configuration = t6;
      t1.visitStylesheet$1(t3);
      t3 =
        t1._outOfOrderImports == null
          ? t5
          : new V.CssStylesheet(
              new P.UnmodifiableListView(
                t1._addOutOfOrderImports$0(),
                type$.UnmodifiableListView_CssNode
              ),
              t4
            );
      _this.css._value = t3;
      t1._importer = oldImporter;
      t1.__stylesheet = oldStylesheet;
      t1.__root = oldRoot;
      t1.__parent = oldParent;
      t1.__endOfImports = oldEndOfImports;
      t1._outOfOrderImports = oldOutOfOrderImports;
      t1.__extensionStore = oldExtensionStore;
      t1._styleRuleIgnoringAtRoot = oldStyleRule;
      t1._mediaQueries = oldMediaQueries;
      t1._declarationName = oldDeclarationName;
      t1._inUnknownAtRule = oldInUnknownAtRule;
      t1._atRootExcludingStyleRule = t2;
      t1._inKeyframes = oldInKeyframes;
      t1._configuration = oldConfiguration;
    },
    $signature: 2,
  };
  R._EvaluateVisitor__combineCss_closure.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 101,
  };
  R._EvaluateVisitor__combineCss_closure0.prototype = {
    call$1(target) {
      return !this.selectors.contains$1(0, target);
    },
    $signature: 15,
  };
  R._EvaluateVisitor__combineCss_closure1.prototype = {
    call$1(module) {
      return module.cloneCss$0();
    },
    $signature: 248,
  };
  R._EvaluateVisitor__extendModules_closure.prototype = {
    call$1(target) {
      return !this.originalSelectors.contains$1(0, target);
    },
    $signature: 15,
  };
  R._EvaluateVisitor__extendModules_closure0.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_ExtensionStore);
    },
    $signature: 197,
  };
  R._EvaluateVisitor__topologicalModules_visitModule.prototype = {
    call$1(module) {
      var t1, t2, t3, _i, upstream;
      for (
        t1 = module.get$upstream(), t2 = t1.length, t3 = this.seen, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        upstream = t1[_i];
        if (upstream.get$transitivelyContainsCss() && t3.add$1(0, upstream))
          this.call$1(upstream);
      }
      this.sorted.addFirst$1(module);
    },
    $signature: 50,
  };
  R._EvaluateVisitor_visitAtRootRule_closure.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new V.AtRootQueryParser(
        t1,
        this.$this._evaluate$_logger
      ).parse$0();
    },
    $signature: 98,
  };
  R._EvaluateVisitor_visitAtRootRule_closure0.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitAtRootRule_closure1.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 0,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure.prototype = {
    call$1(callback) {
      var t1 = this.$this,
        t2 = t1._assertInModule$2(t1.__parent, '__parent');
      t1.__parent = this.newParent;
      t1._environment.scope$1$2$when(
        callback,
        this.node.hasDeclarations,
        type$.void
      );
      t1.__parent = t2;
    },
    $signature: 40,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure0.prototype = {
    call$1(callback) {
      var t1 = this.$this,
        oldAtRootExcludingStyleRule = t1._atRootExcludingStyleRule;
      t1._atRootExcludingStyleRule = true;
      this.innerScope.call$1(callback);
      t1._atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
    },
    $signature: 40,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure1.prototype = {
    call$1(callback) {
      return this.$this._withMediaQueries$2(
        null,
        new R._EvaluateVisitor__scopeForAtRoot__closure(
          this.innerScope,
          callback
        )
      );
    },
    $signature: 40,
  };
  R._EvaluateVisitor__scopeForAtRoot__closure.prototype = {
    call$0() {
      return this.innerScope.call$1(this.callback);
    },
    $signature: 2,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure2.prototype = {
    call$1(callback) {
      var t1 = this.$this,
        wasInKeyframes = t1._inKeyframes;
      t1._inKeyframes = false;
      this.innerScope.call$1(callback);
      t1._inKeyframes = wasInKeyframes;
    },
    $signature: 40,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure3.prototype = {
    call$1($parent) {
      return type$.CssAtRule._is($parent);
    },
    $signature: 194,
  };
  R._EvaluateVisitor__scopeForAtRoot_closure4.prototype = {
    call$1(callback) {
      var t1 = this.$this,
        wasInUnknownAtRule = t1._inUnknownAtRule;
      t1._inUnknownAtRule = false;
      this.innerScope.call$1(callback);
      t1._inUnknownAtRule = wasInUnknownAtRule;
    },
    $signature: 40,
  };
  R._EvaluateVisitor_visitContentRule_closure.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.content.declaration.children,
          t2 = t1.length,
          t3 = this.$this,
          _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
      return null;
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitDeclaration_closure.prototype = {
    call$1(value) {
      return new F.CssValue(
        value.accept$1(this.$this),
        value.get$span(),
        type$.CssValue_Value
      );
    },
    $signature: 249,
  };
  R._EvaluateVisitor_visitDeclaration_closure0.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitEachRule_closure.prototype = {
    call$1(value) {
      var t1 = this.$this,
        t2 = this.nodeWithSpan;
      return t1._environment.setLocalVariable$3(
        C.JSArray_methods.get$first(this.node.variables),
        t1._withoutSlash$2(value, t2),
        t2
      );
    },
    $signature: 48,
  };
  R._EvaluateVisitor_visitEachRule_closure0.prototype = {
    call$1(value) {
      return this.$this._setMultipleVariables$3(
        this.node.variables,
        value,
        this.nodeWithSpan
      );
    },
    $signature: 48,
  };
  R._EvaluateVisitor_visitEachRule_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      return t1._handleReturn$2(
        _this.list.get$asList(),
        new R._EvaluateVisitor_visitEachRule__closure(
          t1,
          _this.setVariables,
          _this.node
        )
      );
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitEachRule__closure.prototype = {
    call$1(element) {
      var t1;
      this.setVariables.call$1(element);
      t1 = this.$this;
      return t1._handleReturn$2(
        this.node.children,
        new R._EvaluateVisitor_visitEachRule___closure(t1)
      );
    },
    $signature: 250,
  };
  R._EvaluateVisitor_visitEachRule___closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 73,
  };
  R._EvaluateVisitor_visitExtendRule_closure.prototype = {
    call$0() {
      return D.SelectorList_SelectorList$parse(
        B.trimAscii(this.targetText.value, true),
        false,
        true,
        this.$this._evaluate$_logger
      );
    },
    $signature: 39,
  };
  R._EvaluateVisitor_visitAtRule_closure.prototype = {
    call$1(value) {
      return this.$this._interpolationToValue$3$trim$warnForColor(
        value,
        true,
        true
      );
    },
    $signature: 252,
  };
  R._EvaluateVisitor_visitAtRule_closure0.prototype = {
    call$0() {
      var t2,
        t3,
        _i,
        t1 = this.$this,
        styleRule = t1._atRootExcludingStyleRule
          ? null
          : t1._styleRuleIgnoringAtRoot;
      if (styleRule == null || t1._inKeyframes)
        for (t2 = this.children, t3 = t2.length, _i = 0; _i < t3; ++_i)
          t2[_i].accept$1(t1);
      else
        t1._withParent$2$3$scopeWhen(
          X.ModifiableCssStyleRule$(
            styleRule.selector,
            styleRule.span,
            styleRule.originalSelector
          ),
          new R._EvaluateVisitor_visitAtRule__closure(t1, this.children),
          false,
          type$.ModifiableCssStyleRule,
          type$.Null
        );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitAtRule__closure.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitAtRule_closure1.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitForRule_closure.prototype = {
    call$0() {
      return this.node.from.accept$1(this.$this).assertNumber$0();
    },
    $signature: 154,
  };
  R._EvaluateVisitor_visitForRule_closure0.prototype = {
    call$0() {
      return this.node.to.accept$1(this.$this).assertNumber$0();
    },
    $signature: 154,
  };
  R._EvaluateVisitor_visitForRule_closure1.prototype = {
    call$0() {
      return this.fromNumber.assertInt$0();
    },
    $signature: 18,
  };
  R._EvaluateVisitor_visitForRule_closure2.prototype = {
    call$0() {
      var t1 = this.fromNumber;
      return this.toNumber
        .coerce$2(t1.get$numeratorUnits(), t1.get$denominatorUnits())
        .assertInt$0();
    },
    $signature: 18,
  };
  R._EvaluateVisitor_visitForRule_closure3.prototype = {
    call$0() {
      var i,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        result,
        _this = this,
        t1 = _this.$this,
        t2 = _this.node,
        nodeWithSpan = t1._expressionNode$1(t2.from);
      for (
        i = _this.from,
          t3 = _this._box_0,
          t4 = _this.direction,
          t5 = t2.variable,
          t6 = _this.fromNumber,
          t2 = t2.children;
        i !== t3.to;
        i += t4
      ) {
        t7 = t1._environment;
        t8 = t6.get$numeratorUnits();
        t7.setLocalVariable$3(
          t5,
          T.SassNumber_SassNumber$withUnits(i, t6.get$denominatorUnits(), t8),
          nodeWithSpan
        );
        result = t1._handleReturn$2(
          t2,
          new R._EvaluateVisitor_visitForRule__closure(t1)
        );
        if (result != null) return result;
      }
      return null;
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitForRule__closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 73,
  };
  R._EvaluateVisitor_visitForwardRule_closure.prototype = {
    call$1(module) {
      this.$this._environment.forwardModule$2(module, this.node);
    },
    $signature: 50,
  };
  R._EvaluateVisitor_visitForwardRule_closure0.prototype = {
    call$1(module) {
      this.$this._environment.forwardModule$2(module, this.node);
    },
    $signature: 50,
  };
  R._EvaluateVisitor_visitIfRule_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._handleReturn$2(
        this._box_0.clause.children,
        new R._EvaluateVisitor_visitIfRule__closure(t1)
      );
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitIfRule__closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 73,
  };
  R._EvaluateVisitor__visitDynamicImport_closure.prototype = {
    call$0() {
      var t3,
        oldImporter,
        oldInDependency,
        children,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        environment,
        module,
        visitor,
        t1 = this.$this,
        t2 = this.$import,
        result = t1._loadStylesheet$3$forImport(t2.urlString, t2.span, true),
        stylesheet = result.stylesheet,
        url = stylesheet.span.file.url;
      if (url != null) {
        t3 = t1._activeModules;
        if (t3.containsKey$1(url)) {
          t2 = X.NullableExtension_andThen(
            t3.$index(0, url),
            new R._EvaluateVisitor__visitDynamicImport__closure(t1)
          );
          throw H.wrapException(
            t2 == null
              ? t1._evaluate$_exception$1('This file is already being loaded.')
              : t2
          );
        }
        t3.$indexSet(0, url, t2);
      }
      t2 = new P.UnmodifiableListView(
        stylesheet._uses,
        type$.UnmodifiableListView_UseRule
      );
      if (t2.get$length(t2) === 0) {
        t2 = new P.UnmodifiableListView(
          stylesheet._forwards,
          type$.UnmodifiableListView_ForwardRule
        );
        t2 = t2.get$length(t2) === 0;
      } else t2 = false;
      if (t2) {
        oldImporter = t1._importer;
        t2 = t1._assertInModule$2(t1.__stylesheet, '_stylesheet');
        oldInDependency = t1._inDependency;
        t1._importer = result.importer;
        t1.__stylesheet = stylesheet;
        t1._inDependency = result.isDependency;
        t1.visitStylesheet$1(stylesheet);
        t1._importer = oldImporter;
        t1.__stylesheet = t2;
        t1._inDependency = oldInDependency;
        t1._activeModules.remove$1(0, url);
        return;
      }
      children = H._Cell$();
      t2 = t1._environment;
      t3 = type$.String;
      t4 = type$.Module_Callable;
      t5 = type$.AstNode;
      t6 = H._setArrayType([], type$.JSArray_Module_Callable);
      t7 = t2._variables;
      t7 = H._setArrayType(t7.slice(0), H._arrayInstanceType(t7));
      t8 = t2._variableNodes;
      t8 = H._setArrayType(t8.slice(0), H._arrayInstanceType(t8));
      t9 = t2._functions;
      t9 = H._setArrayType(t9.slice(0), H._arrayInstanceType(t9));
      t10 = t2._mixins;
      t10 = H._setArrayType(t10.slice(0), H._arrayInstanceType(t10));
      environment = O.Environment$_(
        P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
        P.LinkedHashMap_LinkedHashMap$_empty(t3, t5),
        P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
        t2._importedModules,
        null,
        null,
        t6,
        t7,
        t8,
        t9,
        t10,
        t2._content
      );
      t1._withEnvironment$2(
        environment,
        new R._EvaluateVisitor__visitDynamicImport__closure0(
          t1,
          result,
          stylesheet,
          environment,
          children
        )
      );
      module = environment.toDummyModule$0();
      t1._environment.importForwards$1(module);
      if (module.transitivelyContainsCss)
        t1._combineCss$2$clone(
          module,
          module.transitivelyContainsExtensions
        ).accept$1(t1);
      visitor = new R._ImportedCssVisitor(t1);
      for (t2 = J.get$iterator$ax(children._readLocal$0()); t2.moveNext$0(); )
        t2.get$current().accept$1(visitor);
      t1._activeModules.remove$1(0, url);
    },
    $signature: 0,
  };
  R._EvaluateVisitor__visitDynamicImport__closure.prototype = {
    call$1(previousLoad) {
      return this.$this._multiSpanException$3(
        'This file is already being loaded.',
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 60,
  };
  R._EvaluateVisitor__visitDynamicImport__closure0.prototype = {
    call$0() {
      var t7,
        t8,
        _this = this,
        t1 = _this.$this,
        oldImporter = t1._importer,
        t2 = t1._assertInModule$2(t1.__stylesheet, '_stylesheet'),
        t3 = t1._assertInModule$2(t1.__root, '_root'),
        t4 = t1._assertInModule$2(t1.__parent, '__parent'),
        t5 = t1._assertInModule$2(t1.__endOfImports, '_endOfImports'),
        oldOutOfOrderImports = t1._outOfOrderImports,
        oldConfiguration = t1._configuration,
        oldInDependency = t1._inDependency,
        t6 = _this.result;
      t1._importer = t6.importer;
      t7 = t1.__stylesheet = _this.stylesheet;
      t8 = V.ModifiableCssStylesheet$(t7.span);
      t1.__root = t8;
      t1.__parent = t1._assertInModule$2(t8, '_root');
      t1.__endOfImports = 0;
      t1._outOfOrderImports = null;
      t1._inDependency = t6.isDependency;
      t6 = new P.UnmodifiableListView(
        t7._forwards,
        type$.UnmodifiableListView_ForwardRule
      );
      if (!t6.get$isEmpty(t6))
        t1._configuration = _this.environment.toImplicitConfiguration$0();
      t1.visitStylesheet$1(t7);
      _this.children._value = t1._addOutOfOrderImports$0();
      t1._importer = oldImporter;
      t1.__stylesheet = t2;
      t1.__root = t3;
      t1.__parent = t4;
      t1.__endOfImports = t5;
      t1._outOfOrderImports = oldOutOfOrderImports;
      t1._configuration = oldConfiguration;
      t1._inDependency = oldInDependency;
    },
    $signature: 2,
  };
  R._EvaluateVisitor__visitStaticImport_closure.prototype = {
    call$1(supports) {
      var t2,
        t3,
        arg,
        t1 = this.$this;
      if (supports instanceof L.SupportsDeclaration) {
        t2 = supports.name;
        t3 = supports.value;
        arg =
          t1._evaluate$_serialize$3$quote(t2.accept$1(t1), t2, true) +
          ': ' +
          t1._evaluate$_serialize$3$quote(t3.accept$1(t1), t3, true);
      } else
        arg = X.NullableExtension_andThen(
          supports,
          t1.get$_visitSupportsCondition()
        );
      return new F.CssValue(
        'supports(' + H.S(arg) + ')',
        supports.get$span(),
        type$.CssValue_String
      );
    },
    $signature: 254,
  };
  R._EvaluateVisitor_visitIncludeRule_closure.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._environment.getMixin$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 104,
  };
  R._EvaluateVisitor_visitIncludeRule_closure0.prototype = {
    call$0() {
      return this.node.get$spanWithoutContent();
    },
    $signature: 33,
  };
  R._EvaluateVisitor_visitIncludeRule_closure2.prototype = {
    call$1($content) {
      return new E.UserDefinedCallable(
        $content,
        this.$this._environment.closure$0(),
        type$.UserDefinedCallable_Environment
      );
    },
    $signature: 255,
  };
  R._EvaluateVisitor_visitIncludeRule_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = t1._environment,
        oldContent = t2._content;
      t2._content = _this.contentCallable;
      new R._EvaluateVisitor_visitIncludeRule__closure(
        t1,
        _this.mixin,
        _this.nodeWithSpan
      ).call$0();
      t2._content = oldContent;
      return null;
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitIncludeRule__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._environment,
        oldInMixin = t2._inMixin;
      t2._inMixin = true;
      new R._EvaluateVisitor_visitIncludeRule___closure(
        t1,
        this.mixin,
        this.nodeWithSpan
      ).call$0();
      t2._inMixin = oldInMixin;
      return null;
    },
    $signature: 0,
  };
  R._EvaluateVisitor_visitIncludeRule___closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, _i;
      for (
        t1 = this.mixin.declaration.children,
          t2 = t1.length,
          t3 = this.$this,
          t4 = this.nodeWithSpan,
          _i = 0;
        _i < t2;
        ++_i
      )
        t3._addErrorSpan$2(
          t4,
          new R._EvaluateVisitor_visitIncludeRule____closure(t3, t1[_i])
        );
    },
    $signature: 0,
  };
  R._EvaluateVisitor_visitIncludeRule____closure.prototype = {
    call$0() {
      return this.statement.accept$1(this.$this);
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitMediaRule_closure.prototype = {
    call$1(mediaQueries) {
      return this.$this._mergeMediaQueries$2(mediaQueries, this.queries);
    },
    $signature: 77,
  };
  R._EvaluateVisitor_visitMediaRule_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.mergedQueries;
      if (t2 == null) t2 = _this.queries;
      t1._withMediaQueries$2(
        t2,
        new R._EvaluateVisitor_visitMediaRule__closure(t1, _this.node)
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitMediaRule__closure.prototype = {
    call$0() {
      var t2,
        t3,
        _i,
        t1 = this.$this,
        styleRule = t1._atRootExcludingStyleRule
          ? null
          : t1._styleRuleIgnoringAtRoot;
      if (styleRule == null)
        for (t2 = this.node.children, t3 = t2.length, _i = 0; _i < t3; ++_i)
          t2[_i].accept$1(t1);
      else
        t1._withParent$2$3$scopeWhen(
          X.ModifiableCssStyleRule$(
            styleRule.selector,
            styleRule.span,
            styleRule.originalSelector
          ),
          new R._EvaluateVisitor_visitMediaRule___closure(t1, this.node),
          false,
          type$.ModifiableCssStyleRule,
          type$.Null
        );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitMediaRule___closure.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitMediaRule_closure1.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  R._EvaluateVisitor__visitMediaQueries_closure.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new F.MediaQueryParser(t1, this.$this._evaluate$_logger).parse$0();
    },
    $signature: 121,
  };
  R._EvaluateVisitor_visitStyleRule_closure.prototype = {
    call$0() {
      return E.KeyframeSelectorParser$(
        this.selectorText.value,
        this.$this._evaluate$_logger
      ).parse$0();
    },
    $signature: 42,
  };
  R._EvaluateVisitor_visitStyleRule_closure0.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitStyleRule_closure1.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitStyleRule_closure2.prototype = {
    call$0() {
      var _s11_ = '_stylesheet',
        t1 = this.$this;
      return D.SelectorList_SelectorList$parse(
        this.selectorText.value,
        !t1._assertInModule$2(t1.__stylesheet, _s11_).plainCss,
        !t1._assertInModule$2(t1.__stylesheet, _s11_).plainCss,
        t1._evaluate$_logger
      );
    },
    $signature: 39,
  };
  R._EvaluateVisitor_visitStyleRule_closure3.prototype = {
    call$0() {
      var t1 = this._box_0.parsedSelector,
        t2 = this.$this,
        t3 = t2._styleRuleIgnoringAtRoot;
      t3 = t3 == null ? null : t3.originalSelector;
      return t1.resolveParentSelectors$2$implicitParent(
        t3,
        !t2._atRootExcludingStyleRule
      );
    },
    $signature: 39,
  };
  R._EvaluateVisitor_visitStyleRule_closure4.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._withStyleRule$2(
        this.rule,
        new R._EvaluateVisitor_visitStyleRule__closure(t1, this.node)
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitStyleRule__closure.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitStyleRule_closure5.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitSupportsRule_closure.prototype = {
    call$0() {
      var t2,
        t3,
        _i,
        t1 = this.$this,
        styleRule = t1._atRootExcludingStyleRule
          ? null
          : t1._styleRuleIgnoringAtRoot;
      if (styleRule == null)
        for (t2 = this.node.children, t3 = t2.length, _i = 0; _i < t3; ++_i)
          t2[_i].accept$1(t1);
      else
        t1._withParent$2$2(
          X.ModifiableCssStyleRule$(
            styleRule.selector,
            styleRule.span,
            styleRule.originalSelector
          ),
          new R._EvaluateVisitor_visitSupportsRule__closure(t1, this.node),
          type$.ModifiableCssStyleRule,
          type$.Null
        );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitSupportsRule__closure.prototype = {
    call$0() {
      var t1, t2, t3, _i;
      for (
        t1 = this.node.children, t2 = t1.length, t3 = this.$this, _i = 0;
        _i < t2;
        ++_i
      )
        t1[_i].accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitSupportsRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitVariableDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.override;
      this.$this._environment.setVariable$4$global(
        this.node.name,
        t1.value,
        t1.assignmentNode,
        true
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitVariableDeclaration_closure0.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitVariableDeclaration_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1._environment.setVariable$5$global$namespace(
        t2.name,
        this.value,
        t1._expressionNode$1(t2.expression),
        t2.isGlobal,
        t2.namespace
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitUseRule_closure.prototype = {
    call$1(module) {
      var t1 = this.node;
      this.$this._environment.addModule$3$namespace(module, t1, t1.namespace);
    },
    $signature: 50,
  };
  R._EvaluateVisitor_visitWarnRule_closure.prototype = {
    call$0() {
      return this.node.expression.accept$1(this.$this);
    },
    $signature: 36,
  };
  R._EvaluateVisitor_visitWhileRule_closure.prototype = {
    call$0() {
      var t1, t2, t3, result;
      for (
        t1 = this.node, t2 = t1.condition, t3 = this.$this, t1 = t1.children;
        t2.accept$1(t3).get$isTruthy();

      ) {
        result = t3._handleReturn$2(
          t1,
          new R._EvaluateVisitor_visitWhileRule__closure(t3)
        );
        if (result != null) return result;
      }
      return null;
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitWhileRule__closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 73,
  };
  R._EvaluateVisitor_visitBinaryOperationExpression_closure.prototype = {
    call$0() {
      var right,
        result,
        t1 = this.node,
        t2 = this.$this,
        left = t1.left.accept$1(t2),
        t3 = t1.operator;
      switch (t3) {
        case C.BinaryOperator_kjl:
          right = t1.right.accept$1(t2);
          return new D.SassString(
            N.serializeValue0(left, false, true) +
              '=' +
              N.serializeValue0(right, false, true),
            false
          );
        case C.BinaryOperator_or_or_1:
          return left.get$isTruthy() ? left : t1.right.accept$1(t2);
        case C.BinaryOperator_and_and_2:
          return left.get$isTruthy() ? t1.right.accept$1(t2) : left;
        case C.BinaryOperator_YlX:
          return left.$eq(0, t1.right.accept$1(t2))
            ? C.SassBoolean_true0
            : C.SassBoolean_false0;
        case C.BinaryOperator_i5H:
          return !left.$eq(0, t1.right.accept$1(t2))
            ? C.SassBoolean_true0
            : C.SassBoolean_false0;
        case C.BinaryOperator_AcR:
          return left.greaterThan$1(t1.right.accept$1(t2));
        case C.BinaryOperator_1da:
          return left.greaterThanOrEquals$1(t1.right.accept$1(t2));
        case C.BinaryOperator_8qt:
          return left.lessThan$1(t1.right.accept$1(t2));
        case C.BinaryOperator_33h:
          return left.lessThanOrEquals$1(t1.right.accept$1(t2));
        case C.BinaryOperator_AcR0:
          return left.plus$1(t1.right.accept$1(t2));
        case C.BinaryOperator_iyO:
          return left.minus$1(t1.right.accept$1(t2));
        case C.BinaryOperator_O1M:
          return left.times$1(t1.right.accept$1(t2));
        case C.BinaryOperator_RTB:
          right = t1.right.accept$1(t2);
          result = left.dividedBy$1(right);
          if (
            t1.allowsSlash &&
            left instanceof T.SassNumber &&
            right instanceof T.SassNumber
          )
            return type$.SassNumber._as(result).withSlash$2(left, right);
          else {
            if (left instanceof T.SassNumber && right instanceof T.SassNumber)
              t2._warn$3$deprecation(
                string$.Using__ +
                  H.S(
                    new R._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation().call$1(
                      t1
                    )
                  ) +
                  string$.x0a_More,
                t1.get$span(),
                true
              );
            return result;
          }
        case C.BinaryOperator_2ad:
          return left.modulo$1(t1.right.accept$1(t2));
        default:
          throw H.wrapException(
            P.ArgumentError$(
              'Unknown binary operator ' + t3.toString$0(0) + '.',
              null
            )
          );
      }
    },
    $signature: 36,
  };
  R._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation.prototype = {
    call$1(expression) {
      if (
        expression instanceof V.BinaryOperationExpression &&
        expression.operator === C.BinaryOperator_RTB
      )
        return (
          'math.div(' +
          H.S(this.call$1(expression.left)) +
          ', ' +
          H.S(this.call$1(expression.right)) +
          ')'
        );
      else return expression.toString$0(0);
    },
    $signature: 82,
  };
  R._EvaluateVisitor_visitVariableExpression_closure.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 32,
  };
  R._EvaluateVisitor_visitListExpression_closure.prototype = {
    call$1(expression) {
      return expression.accept$1(this.$this);
    },
    $signature: 256,
  };
  R._EvaluateVisitor_visitFunctionExpression_closure.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._getFunction$2$namespace(
        H.stringReplaceAllUnchecked(t1.originalName, '_', '-'),
        t1.namespace
      );
    },
    $signature: 104,
  };
  R._EvaluateVisitor_visitFunctionExpression_closure0.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._runFunctionCallable$3(
        t1.$arguments,
        this._box_0.$function,
        t1
      );
    },
    $signature: 36,
  };
  R._EvaluateVisitor_visitInterpolatedFunctionExpression_closure.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._runFunctionCallable$3(
        t1.$arguments,
        this.$function,
        t1
      );
    },
    $signature: 36,
  };
  R._EvaluateVisitor__runUserDefinedCallable_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.callable;
      return t1._withEnvironment$2(
        t2.environment.closure$0(),
        new R._EvaluateVisitor__runUserDefinedCallable__closure(
          t1,
          _this.evaluated,
          t2,
          _this.nodeWithSpan,
          _this.run,
          _this.V
        )
      );
    },
    $signature() {
      return this.V._eval$1('0()');
    },
  };
  R._EvaluateVisitor__runUserDefinedCallable__closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.V;
      return t1._environment.scope$1$1(
        new R._EvaluateVisitor__runUserDefinedCallable___closure(
          t1,
          _this.evaluated,
          _this.callable,
          _this.nodeWithSpan,
          _this.run,
          t2
        ),
        t2
      );
    },
    $signature() {
      return this.V._eval$1('0()');
    },
  };
  R._EvaluateVisitor__runUserDefinedCallable___closure.prototype = {
    call$0() {
      var declaredArguments,
        t7,
        minLength,
        t8,
        i,
        argument,
        t9,
        value,
        t10,
        t11,
        restArgument,
        rest,
        argumentList,
        result,
        argumentWord,
        argumentNames,
        _this = this,
        t1 = _this.$this,
        t2 = _this.evaluated,
        t3 = t2.positional,
        t4 = t2.named,
        t5 = _this.callable.declaration.$arguments,
        t6 = _this.nodeWithSpan;
      t1._verifyArguments$4(t3.length, t4, t5, t6);
      declaredArguments = t5.$arguments;
      t7 = declaredArguments.length;
      minLength = Math.min(t3.length, t7);
      for (t8 = t2.positionalNodes, i = 0; i < minLength; ++i)
        t1._environment.setLocalVariable$3(
          declaredArguments[i].name,
          t3[i],
          t8[i]
        );
      for (i = t3.length, t8 = t2.namedNodes; i < t7; ++i) {
        argument = declaredArguments[i];
        t9 = argument.name;
        value = t4.remove$1(0, t9);
        if (value == null) {
          t10 = argument.defaultValue;
          value = t1._withoutSlash$2(
            t10.accept$1(t1),
            t1._expressionNode$1(t10)
          );
        }
        t10 = t1._environment;
        t11 = t8.$index(0, t9);
        if (t11 == null) {
          t11 = argument.defaultValue;
          t11.toString;
          t11 = t1._expressionNode$1(t11);
        }
        t10.setLocalVariable$3(t9, value, t11);
      }
      restArgument = t5.restArgument;
      if (restArgument != null) {
        rest =
          t3.length > t7 ? C.JSArray_methods.sublist$1(t3, t7) : C.List_empty5;
        t2 = t2.separator;
        argumentList = D.SassArgumentList$(
          rest,
          t4,
          t2 === C.ListSeparator_undecided_null ? C.ListSeparator_kWM : t2
        );
        t1._environment.setLocalVariable$3(restArgument, argumentList, t6);
      } else argumentList = null;
      result = _this.run.call$0();
      if (argumentList == null) return result;
      if (t4.get$isEmpty(t4)) return result;
      if (argumentList._wereKeywordsAccessed) return result;
      t2 = t4.get$keys(t4);
      argumentWord = B.pluralize('argument', t2.get$length(t2), null);
      t4 = t4.get$keys(t4);
      argumentNames = B.toSentence(
        H.MappedIterable_MappedIterable(
          t4,
          new R._EvaluateVisitor__runUserDefinedCallable____closure(),
          H._instanceType(t4)._eval$1('Iterable.E'),
          type$.Object
        ),
        'or'
      );
      throw H.wrapException(
        E.MultiSpanSassRuntimeException$(
          'No ' + argumentWord + ' named ' + argumentNames + '.',
          t6.get$span(),
          'invocation',
          P.LinkedHashMap_LinkedHashMap$_literal(
            [t5.get$spanWithName(), 'declaration'],
            type$.FileSpan,
            type$.String
          ),
          t1._evaluate$_stackTrace$1(t6.get$span())
        )
      );
    },
    $signature() {
      return this.V._eval$1('0()');
    },
  };
  R._EvaluateVisitor__runUserDefinedCallable____closure.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  R._EvaluateVisitor__runFunctionCallable_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, _i, $returnValue;
      for (
        t1 = this.callable.declaration,
          t2 = t1.children,
          t3 = t2.length,
          t4 = this.$this,
          _i = 0;
        _i < t3;
        ++_i
      ) {
        $returnValue = t2[_i].accept$1(t4);
        if ($returnValue instanceof F.Value) return $returnValue;
      }
      throw H.wrapException(
        t4._evaluate$_exception$2('Function finished without @return.', t1.span)
      );
    },
    $signature: 36,
  };
  R._EvaluateVisitor__runBuiltInCallable_closure.prototype = {
    call$0() {
      return this.overload.verify$2(
        this.evaluated.positional.length,
        this.namedSet
      );
    },
    $signature: 0,
  };
  R._EvaluateVisitor__runBuiltInCallable_closure0.prototype = {
    call$0() {
      return this.callback.call$1(this.evaluated.positional);
    },
    $signature: 36,
  };
  R._EvaluateVisitor__runBuiltInCallable_closure1.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  R._EvaluateVisitor__evaluateArguments_closure.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 31,
  };
  R._EvaluateVisitor__evaluateArguments_closure0.prototype = {
    call$1(value) {
      return this.$this._withoutSlash$2(value, this.restNodeForSpan);
    },
    $signature: 31,
  };
  R._EvaluateVisitor__evaluateArguments_closure1.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.restNodeForSpan;
      _this.named.$indexSet(0, key, _this.$this._withoutSlash$2(value, t1));
      _this.namedNodes.$indexSet(0, key, t1);
    },
    $signature: 76,
  };
  R._EvaluateVisitor__evaluateArguments_closure2.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 31,
  };
  R._EvaluateVisitor__evaluateMacroArguments_closure.prototype = {
    call$1(value) {
      return new F.ValueExpression(value, this.restArgs.get$span());
    },
    $signature: 47,
  };
  R._EvaluateVisitor__evaluateMacroArguments_closure0.prototype = {
    call$1(value) {
      return new F.ValueExpression(
        this.$this._withoutSlash$2(value, this.restNodeForSpan),
        this.restArgs.get$span()
      );
    },
    $signature: 47,
  };
  R._EvaluateVisitor__evaluateMacroArguments_closure1.prototype = {
    call$2(key, value) {
      var _this = this;
      _this.named.$indexSet(
        0,
        key,
        new F.ValueExpression(
          _this.$this._withoutSlash$2(value, _this.restNodeForSpan),
          _this.restArgs.get$span()
        )
      );
    },
    $signature: 76,
  };
  R._EvaluateVisitor__evaluateMacroArguments_closure2.prototype = {
    call$1(value) {
      return new F.ValueExpression(
        this.$this._withoutSlash$2(value, this.keywordRestNodeForSpan),
        this.keywordRestArgs.get$span()
      );
    },
    $signature: 47,
  };
  R._EvaluateVisitor__addRestMap_closure.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.$this;
      if (key instanceof D.SassString)
        _this.values.$indexSet(
          0,
          key.text,
          _this.convert.call$1(t1._withoutSlash$2(value, _this.expressionNode))
        );
      else
        throw H.wrapException(
          t1._evaluate$_exception$2(
            string$.Variab_ +
              key.toString$0(0) +
              ' is not a string in ' +
              _this.map.toString$0(0) +
              '.',
            _this.nodeWithSpan.get$span()
          )
        );
    },
    $signature: 44,
  };
  R._EvaluateVisitor__verifyArguments_closure.prototype = {
    call$0() {
      return this.$arguments.verify$2(
        this.positional,
        new M.MapKeySet(this.named, type$.MapKeySet_String)
      );
    },
    $signature: 0,
  };
  R._EvaluateVisitor_visitStringExpression_closure.prototype = {
    call$1(value) {
      var t1, result;
      if (typeof value == 'string') return value;
      type$.Expression._as(value);
      t1 = this.$this;
      result = value.accept$1(t1);
      return result instanceof D.SassString
        ? result.text
        : t1._evaluate$_serialize$3$quote(result, value, false);
    },
    $signature: 51,
  };
  R._EvaluateVisitor_visitCssAtRule_closure.prototype = {
    call$0() {
      var t1, t2, t3;
      for (
        t1 = this.node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = this.$this;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssAtRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitCssKeyframeBlock_closure.prototype = {
    call$0() {
      var t1, t2, t3;
      for (
        t1 = this.node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = this.$this;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssKeyframeBlock_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitCssMediaRule_closure.prototype = {
    call$1(mediaQueries) {
      return this.$this._mergeMediaQueries$2(mediaQueries, this.node.queries);
    },
    $signature: 77,
  };
  R._EvaluateVisitor_visitCssMediaRule_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.mergedQueries;
      if (t2 == null) t2 = _this.node.queries;
      t1._withMediaQueries$2(
        t2,
        new R._EvaluateVisitor_visitCssMediaRule__closure(t1, _this.node)
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssMediaRule__closure.prototype = {
    call$0() {
      var t2,
        t3,
        t1 = this.$this,
        styleRule = t1._atRootExcludingStyleRule
          ? null
          : t1._styleRuleIgnoringAtRoot;
      if (styleRule == null)
        for (
          t2 = this.node.children,
            t2 = new H.ListIterator(t2, t2.get$length(t2)),
            t3 = H._instanceType(t2)._precomputed1;
          t2.moveNext$0();

        )
          t3._as(t2.__internal$_current).accept$1(t1);
      else
        t1._withParent$2$3$scopeWhen(
          X.ModifiableCssStyleRule$(
            styleRule.selector,
            styleRule.span,
            styleRule.originalSelector
          ),
          new R._EvaluateVisitor_visitCssMediaRule___closure(t1, this.node),
          false,
          type$.ModifiableCssStyleRule,
          type$.Null
        );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssMediaRule___closure.prototype = {
    call$0() {
      var t1, t2, t3;
      for (
        t1 = this.node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = this.$this;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssMediaRule_closure1.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitCssStyleRule_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._withStyleRule$2(
        this.rule,
        new R._EvaluateVisitor_visitCssStyleRule__closure(t1, this.node)
      );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssStyleRule__closure.prototype = {
    call$0() {
      var t1, t2, t3;
      for (
        t1 = this.node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = this.$this;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssStyleRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor_visitCssSupportsRule_closure.prototype = {
    call$0() {
      var t2,
        t3,
        t1 = this.$this,
        styleRule = t1._atRootExcludingStyleRule
          ? null
          : t1._styleRuleIgnoringAtRoot;
      if (styleRule == null)
        for (
          t2 = this.node.children,
            t2 = new H.ListIterator(t2, t2.get$length(t2)),
            t3 = H._instanceType(t2)._precomputed1;
          t2.moveNext$0();

        )
          t3._as(t2.__internal$_current).accept$1(t1);
      else
        t1._withParent$2$2(
          X.ModifiableCssStyleRule$(
            styleRule.selector,
            styleRule.span,
            styleRule.originalSelector
          ),
          new R._EvaluateVisitor_visitCssSupportsRule__closure(t1, this.node),
          type$.ModifiableCssStyleRule,
          type$.Null
        );
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssSupportsRule__closure.prototype = {
    call$0() {
      var t1, t2, t3;
      for (
        t1 = this.node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = this.$this;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(t3);
    },
    $signature: 2,
  };
  R._EvaluateVisitor_visitCssSupportsRule_closure0.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._EvaluateVisitor__performInterpolation_closure.prototype = {
    call$1(value) {
      var t1, result, t2, t3;
      if (typeof value == 'string') return value;
      type$.Expression._as(value);
      t1 = this.$this;
      result = value.accept$1(t1);
      if (
        this.warnForColor &&
        result instanceof K.SassColor &&
        $.$get$namesByColor().containsKey$1(result)
      ) {
        t2 = X.Interpolation$(
          H._setArrayType([''], type$.JSArray_Object),
          this.interpolation.span
        );
        t3 = $.$get$namesByColor();
        t1._warn$2(
          string$.You_pr +
            H.S(t3.$index(0, result)) +
            string$.x20in_in +
            result.toString$0(0) +
            string$.x2c_whicw +
            H.S(t3.$index(0, result)) +
            string$.x22x29__If +
            new V.BinaryOperationExpression(
              C.BinaryOperator_AcR0,
              new D.StringExpression(t2, true),
              value,
              false
            ).toString$0(0) +
            "'.",
          value.get$span()
        );
      }
      return t1._evaluate$_serialize$3$quote(result, value, false);
    },
    $signature: 51,
  };
  R._EvaluateVisitor__serialize_closure.prototype = {
    call$0() {
      return N.serializeValue0(this.value, false, this.quote);
    },
    $signature: 28,
  };
  R._EvaluateVisitor__expressionNode_closure.prototype = {
    call$0() {
      var t1 = this.expression;
      return this.$this._environment.getVariableNode$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 177,
  };
  R._EvaluateVisitor__withoutSlash_recommendation.prototype = {
    call$1(number) {
      var asSlash = number.asSlash;
      if (asSlash != null)
        return (
          'math.div(' +
          H.S(this.call$1(asSlash.item1)) +
          ', ' +
          H.S(this.call$1(asSlash.item2)) +
          ')'
        );
      else return N.serializeValue0(number, true, true);
    },
    $signature: 176,
  };
  R._EvaluateVisitor__stackFrame_closure.prototype = {
    call$1(url) {
      var t1 = this.$this._evaluate$_importCache;
      t1 = t1 == null ? null : t1.humanize$1(url);
      return t1 == null ? url : t1;
    },
    $signature: 105,
  };
  R._EvaluateVisitor__stackTrace_closure.prototype = {
    call$1(tuple) {
      return this.$this._stackFrame$2(tuple.item1, tuple.item2.get$span());
    },
    $signature: 174,
  };
  R._ImportedCssVisitor.prototype = {
    visitCssAtRule$1(node) {
      var t1 = node.isChildless
        ? null
        : new R._ImportedCssVisitor_visitCssAtRule_closure();
      this._visitor._addChild$2$through(node, t1);
    },
    visitCssComment$1(node) {
      return this._visitor._addChild$1(node);
    },
    visitCssDeclaration$1(node) {},
    visitCssImport$1(node) {
      var t2,
        _s13_ = '_endOfImports',
        t1 = this._visitor;
      if (
        t1._assertInModule$2(t1.__parent, '__parent') !==
        t1._assertInModule$2(t1.__root, '_root')
      )
        t1._addChild$1(node);
      else if (
        t1._assertInModule$2(t1.__endOfImports, _s13_) ===
        J.get$length$asx(
          t1._assertInModule$2(t1.__root, '_root').children._collection$_source
        )
      ) {
        t1._addChild$1(node);
        t1.__endOfImports = t1._assertInModule$2(t1.__endOfImports, _s13_) + 1;
      } else {
        t2 = t1._outOfOrderImports;
        (t2 == null
          ? (t1._outOfOrderImports = H._setArrayType(
              [],
              type$.JSArray_ModifiableCssImport
            ))
          : t2
        ).push(node);
      }
    },
    visitCssKeyframeBlock$1(node) {},
    visitCssMediaRule$1(node) {
      var t1 = this._visitor,
        mediaQueries = t1._mediaQueries;
      t1._addChild$2$through(
        node,
        new R._ImportedCssVisitor_visitCssMediaRule_closure(
          mediaQueries == null ||
            t1._mergeMediaQueries$2(mediaQueries, node.queries) != null
        )
      );
    },
    visitCssStyleRule$1(node) {
      return this._visitor._addChild$2$through(
        node,
        new R._ImportedCssVisitor_visitCssStyleRule_closure()
      );
    },
    visitCssStylesheet$1(node) {
      var t1, t2;
      for (
        t1 = node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(this);
    },
    visitCssSupportsRule$1(node) {
      return this._visitor._addChild$2$through(
        node,
        new R._ImportedCssVisitor_visitCssSupportsRule_closure()
      );
    },
  };
  R._ImportedCssVisitor_visitCssAtRule_closure.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._ImportedCssVisitor_visitCssMediaRule_closure.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule._is(node))
        t1 = this.hasBeenMerged && type$.CssMediaRule._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 7,
  };
  R._ImportedCssVisitor_visitCssStyleRule_closure.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._ImportedCssVisitor_visitCssSupportsRule_closure.prototype = {
    call$1(node) {
      return type$.CssStyleRule._is(node);
    },
    $signature: 7,
  };
  R._ArgumentResults.prototype = {};
  R._LoadedStylesheet.prototype = {};
  F._FindDependenciesVisitor.prototype = {
    visitEachRule$1(node) {},
    visitForRule$1(node) {},
    visitIfRule$1(node) {},
    visitWhileRule$1(node) {},
    visitUseRule$1(node) {
      var t1 = node.url;
      if (t1.get$scheme() !== 'sass') this._usesAndForwards.push(t1);
    },
    visitForwardRule$1(node) {
      var t1 = node.url;
      if (t1.get$scheme() !== 'sass') this._usesAndForwards.push(t1);
    },
    visitImportRule$1(node) {
      var t1, t2, t3, _i, $import;
      for (
        t1 = node.imports, t2 = t1.length, t3 = this._imports, _i = 0;
        _i < t2;
        ++_i
      ) {
        $import = t1[_i];
        if ($import instanceof B.DynamicImport)
          t3.push(P.Uri_parse($import.urlString));
      }
    },
  };
  D.RecursiveStatementVisitor.prototype = {
    visitAtRootRule$1(node) {
      this.visitChildren$1(node.children);
    },
    visitAtRule$1(node) {
      return X.NullableExtension_andThen(
        node.children,
        this.get$visitChildren()
      );
    },
    visitContentBlock$1(node) {
      return null;
    },
    visitContentRule$1(node) {},
    visitDebugRule$1(node) {},
    visitDeclaration$1(node) {
      return X.NullableExtension_andThen(
        node.children,
        this.get$visitChildren()
      );
    },
    visitErrorRule$1(node) {},
    visitExtendRule$1(node) {},
    visitFunctionRule$1(node) {
      return null;
    },
    visitIncludeRule$1(node) {
      return X.NullableExtension_andThen(
        node.content,
        this.get$visitContentBlock()
      );
    },
    visitLoudComment$1(node) {},
    visitMediaRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitMixinRule$1(node) {
      return null;
    },
    visitReturnRule$1(node) {},
    visitSilentComment$1(node) {},
    visitStyleRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitStylesheet$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitSupportsRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitVariableDeclaration$1(node) {},
    visitWarnRule$1(node) {},
    visitChildren$1(children) {
      var t1;
      for (t1 = J.get$iterator$ax(children); t1.moveNext$0(); )
        t1.get$current().accept$1(this);
    },
  };
  N.serialize_closure.prototype = {
    call$1(codeUnit) {
      return codeUnit > 127;
    },
    $signature: 46,
  };
  N._SerializeVisitor0.prototype = {
    visitCssStylesheet$1(node) {
      var t1,
        t2,
        t3,
        t4,
        previous,
        i,
        child,
        _this = this;
      for (
        t1 = _this._style !== C.OutputStyle_compressed,
          t2 = type$.CssComment,
          t3 = type$.CssParentNode,
          t4 = _this._serialize$_buffer,
          previous = null,
          i = 0;
        i < J.get$length$asx(node.get$children(node));
        ++i
      ) {
        child = J.$index$asx(node.get$children(node), i);
        if (_this._isInvisible$1(child)) continue;
        if (previous != null) {
          if (t3._is(previous) ? previous.get$isChildless() : !t2._is(previous))
            t4.writeCharCode$1(59);
          if (t1) t4.write$1(0, '\n');
          if (previous.get$isGroupEnd()) if (t1) t4.write$1(0, '\n');
        }
        child.accept$1(_this);
        previous = child;
      }
      if (previous != null)
        t1 =
          (t3._is(previous) ? previous.get$isChildless() : !t2._is(previous)) &&
          t1;
      else t1 = false;
      if (t1) t4.writeCharCode$1(59);
    },
    visitCssComment$1(node) {
      this._serialize$_buffer.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssComment_closure(this, node)
      );
    },
    visitCssAtRule$1(node) {
      var t1,
        _this = this;
      _this._writeIndentation$0();
      t1 = _this._serialize$_buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssAtRule_closure(_this, node)
      );
      if (!node.isChildless) {
        if (_this._style !== C.OutputStyle_compressed) t1.writeCharCode$1(32);
        _this._serialize$_visitChildren$1(node.children);
      }
    },
    visitCssMediaRule$1(node) {
      var t1,
        _this = this;
      _this._writeIndentation$0();
      t1 = _this._serialize$_buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssMediaRule_closure(_this, node)
      );
      if (_this._style !== C.OutputStyle_compressed) t1.writeCharCode$1(32);
      _this._serialize$_visitChildren$1(node.children);
    },
    visitCssImport$1(node) {
      this._writeIndentation$0();
      this._serialize$_buffer.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssImport_closure(this, node)
      );
    },
    _writeImportUrl$1(url) {
      var urlContents,
        maybeQuote,
        _this = this;
      if (
        _this._style !== C.OutputStyle_compressed ||
        C.JSString_methods._codeUnitAt$1(url, 0) !== 117
      ) {
        _this._serialize$_buffer.write$1(0, url);
        return;
      }
      urlContents = C.JSString_methods.substring$2(url, 4, url.length - 1);
      maybeQuote = C.JSString_methods._codeUnitAt$1(urlContents, 0);
      if (maybeQuote === 39 || maybeQuote === 34)
        _this._serialize$_buffer.write$1(0, urlContents);
      else _this._visitQuotedString$1(urlContents);
    },
    visitCssKeyframeBlock$1(node) {
      var t1,
        _this = this;
      _this._writeIndentation$0();
      t1 = _this._serialize$_buffer;
      t1.forSpan$2(
        node.selector.span,
        new N._SerializeVisitor_visitCssKeyframeBlock_closure(_this, node)
      );
      if (_this._style !== C.OutputStyle_compressed) t1.writeCharCode$1(32);
      _this._serialize$_visitChildren$1(node.children);
    },
    _visitMediaQuery$1(query) {
      var t2,
        t3,
        _this = this,
        t1 = query.modifier;
      if (t1 != null) {
        t2 = _this._serialize$_buffer;
        t2.write$1(0, t1);
        t2.writeCharCode$1(32);
      }
      t1 = query.type;
      if (t1 != null) {
        t2 = _this._serialize$_buffer;
        t2.write$1(0, t1);
        if (query.features.length !== 0) t2.write$1(0, ' and ');
      }
      t1 = query.features;
      t2 = _this._style === C.OutputStyle_compressed ? 'and ' : ' and ';
      t3 = _this._serialize$_buffer;
      _this._writeBetween$3(t1, t2, t3.get$write(t3));
    },
    visitCssStyleRule$1(node) {
      var t1,
        _this = this;
      _this._writeIndentation$0();
      t1 = _this._serialize$_buffer;
      t1.forSpan$2(
        node.selector.span,
        new N._SerializeVisitor_visitCssStyleRule_closure(_this, node)
      );
      if (_this._style !== C.OutputStyle_compressed) t1.writeCharCode$1(32);
      _this._serialize$_visitChildren$1(node.children);
    },
    visitCssSupportsRule$1(node) {
      var t1,
        _this = this;
      _this._writeIndentation$0();
      t1 = _this._serialize$_buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssSupportsRule_closure(_this, node)
      );
      if (_this._style !== C.OutputStyle_compressed) t1.writeCharCode$1(32);
      _this._serialize$_visitChildren$1(node.children);
    },
    visitCssDeclaration$1(node) {
      var error,
        error0,
        t1,
        t2,
        exception,
        _this = this;
      _this._writeIndentation$0();
      t1 = node.name;
      _this._serialize$_write$1(t1);
      t2 = _this._serialize$_buffer;
      t2.writeCharCode$1(58);
      if (
        J.startsWith$1$s(t1.get$value(t1), '--') &&
        node.parsedAsCustomProperty
      )
        t2.forSpan$2(
          node.value.get$span(),
          new N._SerializeVisitor_visitCssDeclaration_closure(_this, node)
        );
      else {
        if (_this._style !== C.OutputStyle_compressed) t2.writeCharCode$1(32);
        try {
          t2.forSpan$2(
            node.valueSpanForMap,
            new N._SerializeVisitor_visitCssDeclaration_closure0(_this, node)
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.MultiSpanSassScriptException) {
            error = t1;
            throw H.wrapException(
              E.MultiSpanSassException$(
                error.message,
                node.value.get$span(),
                error.primaryLabel,
                error.secondarySpans
              )
            );
          } else if (t1 instanceof E.SassScriptException) {
            error0 = t1;
            throw H.wrapException(
              E.SassException$(error0.message, node.value.get$span())
            );
          } else throw exception;
        }
      }
    },
    _writeFoldedValue$1(node) {
      var t2,
        next,
        t3,
        t1 = node.value,
        scanner = X.StringScanner$(
          type$.SassString._as(t1.get$value(t1)).text,
          null,
          null
        );
      for (
        t1 = scanner.string.length, t2 = this._serialize$_buffer;
        scanner._string_scanner$_position !== t1;

      ) {
        next = scanner.readChar$0();
        if (next !== 10) {
          t2.writeCharCode$1(next);
          continue;
        }
        t2.writeCharCode$1(32);
        while (true) {
          t3 = scanner.peekChar$0();
          if (!(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12))
            break;
          scanner.readChar$0();
        }
      }
    },
    _writeReindentedValue$1(node) {
      var _this = this,
        t1 = node.value,
        value = type$.SassString._as(t1.get$value(t1)).text,
        minimumIndentation = _this._minimumIndentation$1(value);
      if (minimumIndentation == null) {
        _this._serialize$_buffer.write$1(0, value);
        return;
      } else if (minimumIndentation === -1) {
        t1 = _this._serialize$_buffer;
        t1.write$1(0, B.trimAsciiRight(value, true));
        t1.writeCharCode$1(32);
        return;
      }
      t1 = node.name.get$span();
      t1 = Y.FileLocation$_(t1.file, t1._file$_start);
      _this._writeWithIndent$2(
        value,
        Math.min(minimumIndentation, t1.file.getColumn$1(t1.offset))
      );
    },
    _minimumIndentation$1(text) {
      var character,
        t2,
        min,
        next,
        min0,
        scanner = Z.LineScanner$(text),
        t1 = scanner.string.length;
      while (true) {
        if (scanner._string_scanner$_position !== t1) {
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          t2 = character !== 10;
        } else t2 = false;
        if (!t2) break;
      }
      if (scanner._string_scanner$_position === t1)
        return scanner.peekChar$1(-1) === 10 ? -1 : null;
      for (min = null; scanner._string_scanner$_position !== t1; ) {
        for (; scanner._string_scanner$_position !== t1; ) {
          next = scanner.peekChar$0();
          if (next !== 32 && next !== 9) break;
          scanner._adjustLineAndColumn$1(
            scanner.super$StringScanner$readChar()
          );
        }
        if (scanner._string_scanner$_position === t1 || scanner.scanChar$1(10))
          continue;
        min0 = scanner._line_scanner$_column;
        min = min == null ? min0 : Math.min(min, min0);
        while (true) {
          if (scanner._string_scanner$_position !== t1) {
            character = scanner.super$StringScanner$readChar();
            scanner._adjustLineAndColumn$1(character);
            t2 = character !== 10;
          } else t2 = false;
          if (!t2) break;
        }
      }
      return min == null ? -1 : min;
    },
    _writeWithIndent$2(text, minimumIndentation) {
      var t1,
        t2,
        t3,
        character,
        lineStart,
        newlines,
        end,
        scanner = Z.LineScanner$(text);
      for (
        t1 = scanner.string, t2 = t1.length, t3 = this._serialize$_buffer;
        scanner._string_scanner$_position !== t2;

      ) {
        character = scanner.super$StringScanner$readChar();
        scanner._adjustLineAndColumn$1(character);
        if (character === 10) break;
        t3.writeCharCode$1(character);
      }
      for (; true; ) {
        lineStart = scanner._string_scanner$_position;
        for (newlines = 1; true; ) {
          if (scanner._string_scanner$_position === t2) {
            t3.writeCharCode$1(32);
            return;
          }
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          if (character === 32 || character === 9) continue;
          if (character !== 10) break;
          lineStart = scanner._string_scanner$_position;
          ++newlines;
        }
        this._writeTimes$2(10, newlines);
        this._writeIndentation$0();
        end = scanner._string_scanner$_position;
        t3.write$1(
          0,
          C.JSString_methods.substring$2(
            t1,
            lineStart + minimumIndentation,
            end
          )
        );
        for (; true; ) {
          if (scanner._string_scanner$_position === t2) return;
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          if (character === 10) break;
          t3.writeCharCode$1(character);
        }
      }
    },
    visitColor$1(value) {
      var $name,
        hexLength,
        t2,
        t3,
        _this = this,
        _null = null,
        t1 = _this._style === C.OutputStyle_compressed;
      if (t1 && Math.abs(value.alpha - 1) < $.$get$epsilon()) {
        $name = $.$get$namesByColor().$index(0, value);
        hexLength = _this._canUseShortHex$1(value) ? 4 : 7;
        if ($name != null && $name.length <= hexLength)
          _this._serialize$_buffer.write$1(0, $name);
        else {
          t1 = _this._serialize$_buffer;
          if (_this._canUseShortHex$1(value)) {
            t1.writeCharCode$1(35);
            t1.writeCharCode$1(T.hexCharFor(value.get$red() & 15));
            t1.writeCharCode$1(T.hexCharFor(value.get$green() & 15));
            t1.writeCharCode$1(T.hexCharFor(value.get$blue() & 15));
          } else {
            t1.writeCharCode$1(35);
            _this._writeHexComponent$1(value.get$red());
            _this._writeHexComponent$1(value.get$green());
            _this._writeHexComponent$1(value.get$blue());
          }
        }
        return;
      }
      t2 = value.originalSpan;
      t3 = t2 == null;
      if (
        (t3
          ? _null
          : P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                t2.file._decodedChars,
                t2._file$_start,
                t2._end
              ),
              0,
              _null
            )) != null
      ) {
        t1 = t3
          ? _null
          : P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                t2.file._decodedChars,
                t2._file$_start,
                t2._end
              ),
              0,
              _null
            );
        _this._serialize$_buffer.write$1(0, t1);
      } else {
        t2 = $.$get$namesByColor();
        if (
          t2.containsKey$1(value) &&
          !(Math.abs(value.alpha - 0) < $.$get$epsilon())
        )
          _this._serialize$_buffer.write$1(0, t2.$index(0, value));
        else {
          t2 = value.alpha;
          t3 = _this._serialize$_buffer;
          if (Math.abs(t2 - 1) < $.$get$epsilon()) {
            t3.writeCharCode$1(35);
            _this._writeHexComponent$1(value.get$red());
            _this._writeHexComponent$1(value.get$green());
            _this._writeHexComponent$1(value.get$blue());
          } else {
            t3.write$1(0, 'rgba(' + value.get$red());
            t3.write$1(0, t1 ? ',' : ', ');
            t3.write$1(0, value.get$green());
            t3.write$1(0, t1 ? ',' : ', ');
            t3.write$1(0, value.get$blue());
            t3.write$1(0, t1 ? ',' : ', ');
            _this._writeNumber$1(t2);
            t3.writeCharCode$1(41);
          }
        }
      }
    },
    _canUseShortHex$1(color) {
      var t1 = color.get$red();
      if ((t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4)) {
        t1 = color.get$green();
        if ((t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4)) {
          t1 = color.get$blue();
          t1 = (t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4);
        } else t1 = false;
      } else t1 = false;
      return t1;
    },
    _writeHexComponent$1(color) {
      var t1 = this._serialize$_buffer;
      t1.writeCharCode$1(
        T.hexCharFor(C.JSInt_methods._shrOtherPositive$1(color, 4))
      );
      t1.writeCharCode$1(T.hexCharFor(color & 15));
    },
    visitList$1(value) {
      var t2,
        t3,
        singleton,
        t4,
        t5,
        _this = this,
        t1 = value.hasBrackets;
      if (t1) _this._serialize$_buffer.writeCharCode$1(91);
      else if (value._list$_contents.length === 0) {
        if (!_this._serialize$_inspect)
          throw H.wrapException(
            E.SassScriptException$("() isn't a valid CSS value.")
          );
        _this._serialize$_buffer.write$1(0, '()');
        return;
      }
      t2 = _this._serialize$_inspect;
      if (t2)
        if (value._list$_contents.length === 1) {
          t3 = value.separator;
          t3 = t3 === C.ListSeparator_kWM || t3 === C.ListSeparator_1gm;
          singleton = t3;
        } else singleton = false;
      else singleton = false;
      if (singleton && !t1) _this._serialize$_buffer.writeCharCode$1(40);
      t3 = value._list$_contents;
      t3 = t2
        ? t3
        : new H.WhereIterable(
            t3,
            new N._SerializeVisitor_visitList_closure(),
            H._arrayInstanceType(t3)._eval$1('WhereIterable<1>')
          );
      t4 = value.separator;
      t5 = _this._separatorString$1(t4);
      _this._writeBetween$3(
        t3,
        t5,
        t2
          ? new N._SerializeVisitor_visitList_closure0(_this, value)
          : new N._SerializeVisitor_visitList_closure1(_this)
      );
      if (singleton) {
        t2 = _this._serialize$_buffer;
        t2.write$1(0, t4.separator);
        if (!t1) t2.writeCharCode$1(41);
      }
      if (t1) _this._serialize$_buffer.writeCharCode$1(93);
    },
    _separatorString$1(separator) {
      switch (separator) {
        case C.ListSeparator_kWM:
          return this._style === C.OutputStyle_compressed ? ',' : ', ';
        case C.ListSeparator_1gm:
          return this._style === C.OutputStyle_compressed ? '/' : ' / ';
        case C.ListSeparator_woc:
          return ' ';
        default:
          return '';
      }
    },
    _elementNeedsParens$2(separator, value) {
      var t1;
      if (value instanceof D.SassList) {
        if (value._list$_contents.length < 2) return false;
        if (value.hasBrackets) return false;
        switch (separator) {
          case C.ListSeparator_kWM:
            return value.separator === C.ListSeparator_kWM;
          case C.ListSeparator_1gm:
            t1 = value.separator;
            return t1 === C.ListSeparator_kWM || t1 === C.ListSeparator_1gm;
          default:
            return value.separator !== C.ListSeparator_undecided_null;
        }
      }
      return false;
    },
    visitMap$1(map) {
      var t1,
        t2,
        _this = this;
      if (!_this._serialize$_inspect)
        throw H.wrapException(
          E.SassScriptException$(
            map.toString$0(0) + " isn't a valid CSS value."
          )
        );
      t1 = _this._serialize$_buffer;
      t1.writeCharCode$1(40);
      t2 = map.contents;
      _this._writeBetween$3(
        t2.get$entries(t2),
        ', ',
        new N._SerializeVisitor_visitMap_closure(_this)
      );
      t1.writeCharCode$1(41);
    },
    _writeMapElement$1(value) {
      var needsParens =
        value instanceof D.SassList &&
        value.separator === C.ListSeparator_kWM &&
        !value.hasBrackets;
      if (needsParens) this._serialize$_buffer.writeCharCode$1(40);
      value.accept$1(this);
      if (needsParens) this._serialize$_buffer.writeCharCode$1(41);
    },
    visitNumber$1(value) {
      var _this = this,
        asSlash = value.asSlash;
      if (asSlash != null) {
        _this.visitNumber$1(asSlash.item1);
        _this._serialize$_buffer.writeCharCode$1(47);
        _this.visitNumber$1(asSlash.item2);
        return;
      }
      _this._writeNumber$1(value.value);
      if (!_this._serialize$_inspect) {
        if (
          J.get$length$asx(value.get$numeratorUnits()) > 1 ||
          value.get$denominatorUnits().length !== 0
        )
          throw H.wrapException(
            E.SassScriptException$(
              value.toString$0(0) + " isn't a valid CSS value."
            )
          );
        if (J.get$isNotEmpty$asx(value.get$numeratorUnits()))
          _this._serialize$_buffer.write$1(
            0,
            J.get$first$ax(value.get$numeratorUnits())
          );
      } else _this._serialize$_buffer.write$1(0, value.get$unitString());
    },
    _writeNumber$1(number) {
      var text,
        _this = this,
        integer = T.fuzzyIsInt(number)
          ? C.JSNumber_methods.round$0(number)
          : null;
      if (integer != null) {
        _this._serialize$_buffer.write$1(
          0,
          _this._removeExponent$1(C.JSInt_methods.toString$0(integer))
        );
        return;
      }
      text = _this._removeExponent$1(C.JSNumber_methods.toString$0(number));
      if (text.length < 12) {
        if (
          _this._style === C.OutputStyle_compressed &&
          C.JSString_methods._codeUnitAt$1(text, 0) === 48
        )
          text = C.JSString_methods.substring$1(text, 1);
        _this._serialize$_buffer.write$1(0, text);
        return;
      }
      _this._writeRounded$1(text);
    },
    _removeExponent$1(text) {
      var buffer,
        t3,
        additionalZeroes,
        t1 = C.JSString_methods._codeUnitAt$1(text, 0),
        negative = t1 === 45,
        exponent = H._Cell$(),
        t2 = text.length,
        i = 0;
      while (true) {
        if (!(i < t2)) {
          buffer = null;
          break;
        }
        c$0: {
          if (C.JSString_methods._codeUnitAt$1(text, i) !== 101) break c$0;
          buffer = new P.StringBuffer('');
          t1 = buffer._contents = '' + H.Primitives_stringFromCharCode(t1);
          if (negative) {
            t1 += H.Primitives_stringFromCharCode(
              C.JSString_methods._codeUnitAt$1(text, 1)
            );
            buffer._contents = t1;
            if (i > 3)
              buffer._contents =
                t1 + C.JSString_methods.substring$2(text, 3, i);
          } else if (i > 2)
            buffer._contents = t1 + C.JSString_methods.substring$2(text, 2, i);
          exponent._value = P.int_parse(
            C.JSString_methods.substring$2(text, i + 1, t2),
            null
          );
          break;
        }
        ++i;
      }
      if (buffer == null) return text;
      if (exponent._readLocal$0() > 0) {
        t1 = exponent._readLocal$0();
        t2 = buffer._contents;
        t3 = negative ? 1 : 0;
        additionalZeroes = t1 - (t2.length - 1 - t3);
        for (t1 = t2, i = 0; i < additionalZeroes; ++i) {
          t1 += H.Primitives_stringFromCharCode(48);
          buffer._contents = t1;
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        t1 = (negative ? '' + H.Primitives_stringFromCharCode(45) : '') + '0.';
        t2 = exponent.__late_helper$_name;
        i = -1;
        while (true) {
          t3 = exponent._value;
          if (t3 === exponent) H.throwExpression(H.LateError$localNI(t2));
          if (!(i > t3)) break;
          t1 += H.Primitives_stringFromCharCode(48);
          --i;
        }
        if (negative) {
          t2 = buffer._contents;
          t2 = C.JSString_methods.substring$1(
            t2.charCodeAt(0) == 0 ? t2 : t2,
            1
          );
        } else t2 = buffer;
        t2 = t1 + H.S(t2);
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      }
    },
    _writeRounded$1(text) {
      var t1,
        digits,
        negative,
        textIndex,
        digitsIndex,
        textIndex0,
        codeUnit,
        digitsIndex0,
        indexAfterPrecision,
        digitsIndex1,
        newDigit,
        writtenIndex,
        t2,
        _this = this;
      if (C.JSString_methods.endsWith$1(text, '.0')) {
        _this._serialize$_buffer.write$1(
          0,
          C.JSString_methods.substring$2(text, 0, text.length - 2)
        );
        return;
      }
      t1 = text.length;
      digits = new Uint8Array(t1 + 1);
      negative = C.JSString_methods._codeUnitAt$1(text, 0) === 45;
      textIndex = negative ? 1 : 0;
      for (
        digitsIndex = 1;
        true;
        textIndex = textIndex0, digitsIndex = digitsIndex0
      ) {
        if (textIndex === t1) {
          _this._serialize$_buffer.write$1(0, text);
          return;
        }
        textIndex0 = textIndex + 1;
        codeUnit = C.JSString_methods._codeUnitAt$1(text, textIndex);
        if (codeUnit === 46) {
          textIndex = textIndex0;
          break;
        }
        digitsIndex0 = digitsIndex + 1;
        digits[digitsIndex] = codeUnit - 48;
      }
      indexAfterPrecision = textIndex + 10;
      if (indexAfterPrecision >= t1) {
        _this._serialize$_buffer.write$1(0, text);
        return;
      }
      for (
        digitsIndex0 = digitsIndex;
        textIndex < indexAfterPrecision;
        textIndex = textIndex0, digitsIndex0 = digitsIndex1
      ) {
        digitsIndex1 = digitsIndex0 + 1;
        textIndex0 = textIndex + 1;
        digits[digitsIndex0] =
          C.JSString_methods._codeUnitAt$1(text, textIndex) - 48;
      }
      if (C.JSString_methods._codeUnitAt$1(text, textIndex) - 48 >= 5)
        for (; true; digitsIndex0 = digitsIndex1) {
          digitsIndex1 = digitsIndex0 - 1;
          newDigit = digits[digitsIndex1] + 1;
          digits[digitsIndex1] = newDigit;
          if (newDigit !== 10) break;
        }
      for (; digitsIndex0 < digitsIndex; ++digitsIndex0)
        digits[digitsIndex0] = 0;
      while (true) {
        t1 = digitsIndex0 > digitsIndex;
        if (!(t1 && digits[digitsIndex0 - 1] === 0)) break;
        --digitsIndex0;
      }
      if (digitsIndex0 === 2 && digits[0] === 0 && digits[1] === 0) {
        _this._serialize$_buffer.writeCharCode$1(48);
        return;
      }
      if (negative) _this._serialize$_buffer.writeCharCode$1(45);
      if (digits[0] === 0)
        writtenIndex =
          _this._style === C.OutputStyle_compressed && digits[1] === 0 ? 2 : 1;
      else writtenIndex = 0;
      for (
        t2 = _this._serialize$_buffer;
        writtenIndex < digitsIndex;
        ++writtenIndex
      )
        t2.writeCharCode$1(48 + digits[writtenIndex]);
      if (t1) {
        t2.writeCharCode$1(46);
        for (; writtenIndex < digitsIndex0; ++writtenIndex)
          t2.writeCharCode$1(48 + digits[writtenIndex]);
      }
    },
    _visitQuotedString$2$forceDoubleQuote(string, forceDoubleQuote) {
      var t1,
        includesSingleQuote,
        includesDoubleQuote,
        i,
        char,
        newIndex,
        quote,
        _this = this,
        buffer = forceDoubleQuote
          ? _this._serialize$_buffer
          : new P.StringBuffer('');
      if (forceDoubleQuote) buffer.writeCharCode$1(34);
      for (
        t1 = string.length,
          includesSingleQuote = false,
          includesDoubleQuote = false,
          i = 0;
        i < t1;
        ++i
      ) {
        char = C.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 39:
            if (forceDoubleQuote) buffer.writeCharCode$1(39);
            else {
              if (includesDoubleQuote) {
                _this._visitQuotedString$2$forceDoubleQuote(string, true);
                return;
              } else buffer.writeCharCode$1(39);
              includesSingleQuote = true;
            }
            break;
          case 34:
            if (forceDoubleQuote) {
              buffer.writeCharCode$1(92);
              buffer.writeCharCode$1(34);
            } else {
              if (includesSingleQuote) {
                _this._visitQuotedString$2$forceDoubleQuote(string, true);
                return;
              } else buffer.writeCharCode$1(34);
              includesDoubleQuote = true;
            }
            break;
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            _this._writeEscape$4(buffer, char, string, i);
            break;
          case 92:
            buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(92);
            break;
          default:
            newIndex = _this._tryPrivateUseCharacter$4(buffer, char, string, i);
            if (newIndex != null) {
              i = newIndex;
              break;
            }
            buffer.writeCharCode$1(char);
            break;
        }
      }
      if (forceDoubleQuote) buffer.writeCharCode$1(34);
      else {
        quote = includesDoubleQuote ? 39 : 34;
        t1 = _this._serialize$_buffer;
        t1.writeCharCode$1(quote);
        t1.write$1(0, buffer);
        t1.writeCharCode$1(quote);
      }
    },
    _visitQuotedString$1(string) {
      return this._visitQuotedString$2$forceDoubleQuote(string, false);
    },
    _visitUnquotedString$1(string) {
      var t1, t2, afterNewline, i, char, newIndex;
      for (
        t1 = string.length,
          t2 = this._serialize$_buffer,
          afterNewline = false,
          i = 0;
        i < t1;
        ++i
      ) {
        char = C.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 10:
            t2.writeCharCode$1(32);
            afterNewline = true;
            break;
          case 32:
            if (!afterNewline) t2.writeCharCode$1(32);
            break;
          default:
            newIndex = this._tryPrivateUseCharacter$4(t2, char, string, i);
            if (newIndex != null) {
              i = newIndex;
              afterNewline = false;
              break;
            }
            t2.writeCharCode$1(char);
            afterNewline = false;
            break;
        }
      }
    },
    _tryPrivateUseCharacter$4(buffer, codeUnit, string, i) {
      var t1;
      if (this._style === C.OutputStyle_compressed) return null;
      if (codeUnit >= 57344 && codeUnit <= 63743) {
        this._writeEscape$4(buffer, codeUnit, string, i);
        return i;
      }
      if (codeUnit >>> 7 === 439 && string.length > i + 1) {
        t1 = i + 1;
        this._writeEscape$4(
          buffer,
          65536 +
            ((codeUnit & 1023) << 10) +
            (C.JSString_methods._codeUnitAt$1(string, t1) & 1023),
          string,
          t1
        );
        return t1;
      }
      return null;
    },
    _writeEscape$4(buffer, character, string, i) {
      var t1, next;
      buffer.writeCharCode$1(92);
      buffer.write$1(0, C.JSInt_methods.toRadixString$1(character, 16));
      t1 = i + 1;
      if (string.length === t1) return;
      next = C.JSString_methods._codeUnitAt$1(string, t1);
      if (T.isHex(next) || next === 32 || next === 9)
        buffer.writeCharCode$1(32);
    },
    visitComplexSelector$1(complex) {
      var t1, t2, t3, t4, lastComponent, _i, component, t5;
      for (
        t1 = complex.components,
          t2 = t1.length,
          t3 = this._serialize$_buffer,
          t4 = this._style === C.OutputStyle_compressed,
          lastComponent = null,
          _i = 0;
        _i < t2;
        ++_i, lastComponent = component
      ) {
        component = t1[_i];
        if (lastComponent != null)
          if (!(t4 && lastComponent instanceof S.Combinator))
            t5 = !(t4 && component instanceof S.Combinator);
          else t5 = false;
        else t5 = false;
        if (t5) t3.write$1(0, ' ');
        if (component instanceof X.CompoundSelector)
          this.visitCompoundSelector$1(component);
        else t3.write$1(0, component);
      }
    },
    visitCompoundSelector$1(compound) {
      var t2,
        t3,
        _i,
        t1 = this._serialize$_buffer,
        start = t1.get$length(t1);
      for (t2 = compound.components, t3 = t2.length, _i = 0; _i < t3; ++_i)
        t2[_i].accept$1(this);
      if (t1.get$length(t1) === start) t1.writeCharCode$1(42);
    },
    visitSelectorList$1(list) {
      var t1,
        t2,
        t3,
        first,
        t4,
        _this = this,
        complexes = list.components;
      for (
        t1 = J.get$iterator$ax(
          _this._serialize$_inspect
            ? complexes
            : new H.WhereIterable(
                complexes,
                new N._SerializeVisitor_visitSelectorList_closure(),
                H._arrayInstanceType(complexes)._eval$1('WhereIterable<1>')
              )
        ),
          t2 = _this._style !== C.OutputStyle_compressed,
          t3 = _this._serialize$_buffer,
          first = true;
        t1.moveNext$0();

      ) {
        t4 = t1.get$current();
        if (first) first = false;
        else {
          t3.writeCharCode$1(44);
          if (t4.lineBreak) {
            if (t2) t3.write$1(0, '\n');
          } else if (t2) t3.writeCharCode$1(32);
        }
        _this.visitComplexSelector$1(t4);
      }
    },
    visitPseudoSelector$1(pseudo) {
      var t3,
        t4,
        t5,
        innerSelector = pseudo.selector,
        t1 = innerSelector == null,
        t2 = !t1;
      if (t2 && pseudo.name === 'not' && innerSelector.get$isInvisible())
        return;
      t3 = this._serialize$_buffer;
      t3.writeCharCode$1(58);
      if (!pseudo.isSyntacticClass) t3.writeCharCode$1(58);
      t3.write$1(0, pseudo.name);
      t4 = pseudo.argument;
      t5 = t4 == null;
      if (t5 && t1) return;
      t3.writeCharCode$1(40);
      if (!t5) {
        t3.write$1(0, t4);
        if (t2) t3.writeCharCode$1(32);
      }
      if (t2) this.visitSelectorList$1(innerSelector);
      t3.writeCharCode$1(41);
    },
    _serialize$_write$1(value) {
      return this._serialize$_buffer.forSpan$2(
        value.get$span(),
        new N._SerializeVisitor__write_closure(this, value)
      );
    },
    _serialize$_visitChildren$1(children) {
      var _this = this,
        t1 = {},
        t2 = _this._serialize$_buffer;
      t2.writeCharCode$1(123);
      if (children.every$1(children, _this.get$_isInvisible())) {
        t2.writeCharCode$1(125);
        return;
      }
      _this._writeLineFeed$0();
      t1.previous_ = null;
      ++_this._indentation;
      new N._SerializeVisitor__visitChildren_closure(
        t1,
        _this,
        children
      ).call$0();
      --_this._indentation;
      t1 = t1.previous_;
      t1.toString;
      if (
        (type$.CssParentNode._is(t1)
          ? t1.get$isChildless()
          : !type$.CssComment._is(t1)) &&
        _this._style !== C.OutputStyle_compressed
      )
        t2.writeCharCode$1(59);
      _this._writeLineFeed$0();
      _this._writeIndentation$0();
      t2.writeCharCode$1(125);
    },
    _writeLineFeed$0() {
      if (this._style !== C.OutputStyle_compressed)
        this._serialize$_buffer.write$1(0, '\n');
    },
    _writeIndentation$0() {
      var _this = this;
      if (_this._style === C.OutputStyle_compressed) return;
      _this._writeTimes$2(
        _this._indentCharacter,
        _this._indentation * _this._indentWidth
      );
    },
    _writeTimes$2(char, times) {
      var t1, i;
      for (t1 = this._serialize$_buffer, i = 0; i < times; ++i)
        t1.writeCharCode$1(char);
    },
    _writeBetween$1$3(iterable, text, callback) {
      var t1, t2, first, value;
      for (
        t1 = J.get$iterator$ax(iterable),
          t2 = this._serialize$_buffer,
          first = true;
        t1.moveNext$0();

      ) {
        value = t1.get$current();
        if (first) first = false;
        else t2.write$1(0, text);
        callback.call$1(value);
      }
    },
    _writeBetween$3(iterable, text, callback) {
      return this._writeBetween$1$3(iterable, text, callback, type$.dynamic);
    },
    _isInvisible$1(node) {
      if (this._serialize$_inspect) return false;
      if (
        this._style === C.OutputStyle_compressed &&
        type$.CssComment._is(node) &&
        C.JSString_methods._codeUnitAt$1(node.text, 2) !== 33
      )
        return true;
      if (type$.CssParentNode._is(node)) {
        if (type$.CssAtRule._is(node)) return false;
        if (
          type$.CssStyleRule._is(node) &&
          node.selector.value.get$isInvisible()
        )
          return true;
        return J.every$1$ax(node.get$children(node), this.get$_isInvisible());
      } else return false;
    },
  };
  N._SerializeVisitor_visitCssComment_closure.prototype = {
    call$0() {
      var t2,
        t3,
        minimumIndentation,
        t1 = this.$this;
      if (
        t1._style === C.OutputStyle_compressed &&
        C.JSString_methods._codeUnitAt$1(this.node.text, 2) !== 33
      )
        return;
      t2 = this.node;
      t3 = t2.text;
      minimumIndentation = t1._minimumIndentation$1(t3);
      if (minimumIndentation == null) {
        t1._writeIndentation$0();
        t1._serialize$_buffer.write$1(0, t3);
        return;
      }
      t2 = t2.span;
      t2 = Y.FileLocation$_(t2.file, t2._file$_start);
      minimumIndentation = Math.min(
        minimumIndentation,
        t2.file.getColumn$1(t2.offset)
      );
      t1._writeIndentation$0();
      t1._writeWithIndent$2(t3, minimumIndentation);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssAtRule_closure.prototype = {
    call$0() {
      var t3,
        value,
        t1 = this.$this,
        t2 = t1._serialize$_buffer;
      t2.writeCharCode$1(64);
      t3 = this.node;
      t1._serialize$_write$1(t3.name);
      value = t3.value;
      if (value != null) {
        t2.writeCharCode$1(32);
        t1._serialize$_write$1(value);
      }
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssMediaRule_closure.prototype = {
    call$0() {
      var t3,
        t4,
        t1 = this.$this,
        t2 = t1._serialize$_buffer;
      t2.write$1(0, '@media');
      t3 = t1._style === C.OutputStyle_compressed;
      if (t3) {
        t4 = C.JSArray_methods.get$first(this.node.queries);
        t4 = !(t4.modifier == null && t4.type == null);
      } else t4 = true;
      if (t4) t2.writeCharCode$1(32);
      t2 = t3 ? ',' : ', ';
      t1._writeBetween$3(this.node.queries, t2, t1.get$_visitMediaQuery());
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssImport_closure.prototype = {
    call$0() {
      var t3,
        t4,
        t5,
        supports,
        media,
        t1 = this.$this,
        t2 = t1._serialize$_buffer;
      t2.write$1(0, '@import');
      t3 = t1._style === C.OutputStyle_compressed;
      t4 = !t3;
      if (t4) t2.writeCharCode$1(32);
      t5 = this.node;
      t2.forSpan$2(
        t5.url.get$span(),
        new N._SerializeVisitor_visitCssImport__closure(t1, t5)
      );
      supports = t5.supports;
      if (supports != null) {
        if (t4) t2.writeCharCode$1(32);
        t1._serialize$_write$1(supports);
      }
      media = t5.media;
      if (media != null) {
        if (t4) t2.writeCharCode$1(32);
        t2 = t3 ? ',' : ', ';
        t1._writeBetween$3(media, t2, t1.get$_visitMediaQuery());
      }
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssImport__closure.prototype = {
    call$0() {
      var t1 = this.node.url;
      return this.$this._writeImportUrl$1(t1.get$value(t1));
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssKeyframeBlock_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._style === C.OutputStyle_compressed ? ',' : ', ',
        t3 = t1._serialize$_buffer;
      return t1._writeBetween$3(this.node.selector.value, t2, t3.get$write(t3));
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssStyleRule_closure.prototype = {
    call$0() {
      return this.$this.visitSelectorList$1(this.node.selector.value);
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssSupportsRule_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._serialize$_buffer;
      t2.write$1(0, '@supports');
      if (
        !(
          t1._style === C.OutputStyle_compressed &&
          J.codeUnitAt$1$s(this.node.condition.value, 0) === 40
        )
      )
        t2.writeCharCode$1(32);
      t1._serialize$_write$1(this.node.condition);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      if (t1._style === C.OutputStyle_compressed) t1._writeFoldedValue$1(t2);
      else t1._writeReindentedValue$1(t2);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssDeclaration_closure0.prototype = {
    call$0() {
      var t1 = this.node.value;
      return t1.get$value(t1).accept$1(this.$this);
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitList_closure.prototype = {
    call$1(element) {
      return !element.get$isBlank();
    },
    $signature: 54,
  };
  N._SerializeVisitor_visitList_closure0.prototype = {
    call$1(element) {
      var t1 = this.$this,
        needsParens = t1._elementNeedsParens$2(this.value.separator, element);
      if (needsParens) t1._serialize$_buffer.writeCharCode$1(40);
      element.accept$1(t1);
      if (needsParens) t1._serialize$_buffer.writeCharCode$1(41);
    },
    $signature: 48,
  };
  N._SerializeVisitor_visitList_closure1.prototype = {
    call$1(element) {
      element.accept$1(this.$this);
    },
    $signature: 48,
  };
  N._SerializeVisitor_visitMap_closure.prototype = {
    call$1(entry) {
      var t1 = this.$this;
      t1._writeMapElement$1(entry.key);
      t1._serialize$_buffer.write$1(0, ': ');
      t1._writeMapElement$1(entry.value);
    },
    $signature: 260,
  };
  N._SerializeVisitor_visitSelectorList_closure.prototype = {
    call$1(complex) {
      return !complex.get$isInvisible();
    },
    $signature: 16,
  };
  N._SerializeVisitor__write_closure.prototype = {
    call$0() {
      var t1 = this.value;
      return this.$this._serialize$_buffer.write$1(0, t1.get$value(t1));
    },
    $signature: 0,
  };
  N._SerializeVisitor__visitChildren_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, t6, t7, i, child, previous, t8;
      for (
        t1 = this.children._collection$_source,
          t2 = J.getInterceptor$asx(t1),
          t3 = this._box_0,
          t4 = this.$this,
          t5 = type$.CssComment,
          t6 = type$.CssParentNode,
          t7 = t4._serialize$_buffer,
          i = 0;
        i < t2.get$length(t1);
        ++i
      ) {
        child = t2.elementAt$1(t1, i);
        if (t4._isInvisible$1(child)) continue;
        previous = t3.previous_;
        if (previous != null) {
          if (t6._is(previous) ? previous.get$isChildless() : !t5._is(previous))
            t7.writeCharCode$1(59);
          t8 = t4._style !== C.OutputStyle_compressed;
          if (t8) t7.write$1(0, '\n');
          if (previous.get$isGroupEnd()) if (t8) t7.write$1(0, '\n');
        }
        t3.previous_ = child;
        child.accept$1(t4);
      }
    },
    $signature: 0,
  };
  N.OutputStyle.prototype = {
    toString$0(_) {
      return this._serialize$_name;
    },
  };
  N.LineFeed.prototype = {
    toString$0(_) {
      return 'lf';
    },
  };
  N.SerializeResult.prototype = {};
  A.StatementSearchVisitor.prototype = {
    visitAtRootRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitAtRule$1(node) {
      return X.NullableExtension_andThen(
        node.children,
        this.get$visitChildren()
      );
    },
    visitContentBlock$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitDebugRule$1(node) {
      return null;
    },
    visitDeclaration$1(node) {
      return X.NullableExtension_andThen(
        node.children,
        this.get$visitChildren()
      );
    },
    visitEachRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitErrorRule$1(node) {
      return null;
    },
    visitExtendRule$1(node) {
      return null;
    },
    visitForRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitForwardRule$1(node) {
      return null;
    },
    visitFunctionRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitIfRule$1(node) {
      var t1 = A._IterableExtension__search(
        node.clauses,
        new A.StatementSearchVisitor_visitIfRule_closure(this)
      );
      return t1 == null
        ? X.NullableExtension_andThen(
            node.lastClause,
            new A.StatementSearchVisitor_visitIfRule_closure0(this)
          )
        : t1;
    },
    visitImportRule$1(node) {
      return null;
    },
    visitIncludeRule$1(node) {
      return X.NullableExtension_andThen(
        node.content,
        this.get$visitContentBlock()
      );
    },
    visitLoudComment$1(node) {
      return null;
    },
    visitMediaRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitMixinRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitReturnRule$1(node) {
      return null;
    },
    visitSilentComment$1(node) {
      return null;
    },
    visitStyleRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitStylesheet$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitSupportsRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitUseRule$1(node) {
      return null;
    },
    visitVariableDeclaration$1(node) {
      return null;
    },
    visitWarnRule$1(node) {
      return null;
    },
    visitWhileRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitChildren$1(children) {
      return A._IterableExtension__search(
        children,
        new A.StatementSearchVisitor_visitChildren_closure(this)
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule_closure.prototype = {
    call$1(clause) {
      return A._IterableExtension__search(
        clause.children,
        new A.StatementSearchVisitor_visitIfRule__closure0(this.$this)
      );
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor.T?(IfClause)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule__closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor.T?(Statement)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule_closure0.prototype = {
    call$1(lastClause) {
      return A._IterableExtension__search(
        lastClause.children,
        new A.StatementSearchVisitor_visitIfRule__closure(this.$this)
      );
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor.T?(ElseClause)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule__closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor.T?(Statement)'
      );
    },
  };
  A.StatementSearchVisitor_visitChildren_closure.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor.T?(Statement)'
      );
    },
  };
  N.withWarnCallback_closure.prototype = {
    call$0() {
      return this.callback.call$0();
    },
    $signature() {
      return this.T._eval$1('0()');
    },
  };
  L.Entry.prototype = {
    compareTo$1(_, other) {
      var t1,
        t2,
        res = this.target.compareTo$1(0, other.target);
      if (res !== 0) return res;
      t1 = this.source;
      t2 = other.source;
      res = C.JSString_methods.compareTo$1(
        J.toString$0$(t1.file.url),
        J.toString$0$(t2.file.url)
      );
      if (res !== 0) return res;
      return t1.compareTo$1(0, t2);
    },
    $isComparable: 1,
  };
  T.Mapping.prototype = {};
  T.SingleMapping.prototype = {
    toJson$1$includeSourceContents(includeSourceContents) {
      var t1,
        t2,
        line,
        column,
        srcLine,
        srcColumn,
        srcUrlId,
        srcNameId,
        first,
        _i,
        entry,
        nextLine,
        i,
        t3,
        t4,
        column0,
        t5,
        newUrlId,
        srcLine0,
        srcColumn0,
        srcNameId0,
        result,
        _this = this,
        buff = new P.StringBuffer('');
      for (
        t1 = _this.lines,
          t2 = t1.length,
          line = 0,
          column = 0,
          srcLine = 0,
          srcColumn = 0,
          srcUrlId = 0,
          srcNameId = 0,
          first = true,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        entry = t1[_i];
        nextLine = entry.line;
        if (nextLine > line) {
          for (i = line; i < nextLine; ++i) buff._contents += ';';
          line = nextLine;
          column = 0;
          first = true;
        }
        for (
          t3 = J.get$iterator$ax(entry.entries);
          t3.moveNext$0();
          column = column0, first = false
        ) {
          t4 = t3.get$current();
          if (!first) buff._contents += ',';
          column0 = t4.column;
          t5 = L.encodeVlq(column0 - column);
          t5 = P.StringBuffer__writeAll(buff._contents, t5, '');
          buff._contents = t5;
          newUrlId = t4.sourceUrlId;
          t5 = P.StringBuffer__writeAll(
            t5,
            L.encodeVlq(newUrlId - srcUrlId),
            ''
          );
          buff._contents = t5;
          srcLine0 = t4.sourceLine;
          t5 = P.StringBuffer__writeAll(
            t5,
            L.encodeVlq(srcLine0 - srcLine),
            ''
          );
          buff._contents = t5;
          srcColumn0 = t4.sourceColumn;
          t5 = P.StringBuffer__writeAll(
            t5,
            L.encodeVlq(srcColumn0 - srcColumn),
            ''
          );
          buff._contents = t5;
          srcNameId0 = t4.sourceNameId;
          if (srcNameId0 == null) {
            srcUrlId = newUrlId;
            srcColumn = srcColumn0;
            srcLine = srcLine0;
            continue;
          }
          buff._contents = P.StringBuffer__writeAll(
            t5,
            L.encodeVlq(srcNameId0 - srcNameId),
            ''
          );
          srcNameId = srcNameId0;
          srcUrlId = newUrlId;
          srcColumn = srcColumn0;
          srcLine = srcLine0;
        }
      }
      t1 = _this.sourceRoot;
      if (t1 == null) t1 = '';
      t2 = buff._contents;
      result = P.LinkedHashMap_LinkedHashMap$_literal(
        [
          'version',
          3,
          'sourceRoot',
          t1,
          'sources',
          _this.urls,
          'names',
          _this.names,
          'mappings',
          t2.charCodeAt(0) == 0 ? t2 : t2,
        ],
        type$.String,
        type$.Object
      );
      t1 = _this.targetUrl;
      if (t1 != null) result.$indexSet(0, 'file', t1);
      if (includeSourceContents) {
        t1 = _this.files;
        t2 = H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String?>');
        result.$indexSet(
          0,
          'sourcesContent',
          P.List_List$of(
            new H.MappedListIterable(
              t1,
              new T.SingleMapping_toJson_closure(),
              t2
            ),
            true,
            t2._eval$1('ListIterable.E')
          )
        );
      }
      _this.extensions.forEach$1(
        0,
        new T.SingleMapping_toJson_closure0(result)
      );
      return result;
    },
    toJson$0() {
      return this.toJson$1$includeSourceContents(false);
    },
    toString$0(_) {
      var _this = this,
        t1 =
          H.getRuntimeType(_this).toString$0(0) +
          ' : [' +
          'targetUrl: ' +
          H.S(_this.targetUrl) +
          ', sourceRoot: ' +
          H.S(_this.sourceRoot) +
          ', urls: ' +
          H.S(_this.urls) +
          ', names: ' +
          H.S(_this.names) +
          ', lines: ' +
          H.S(_this.lines) +
          ']';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  T.SingleMapping_SingleMapping$fromEntries_closure.prototype = {
    call$0() {
      var t1 = this.urls;
      return t1.get$length(t1);
    },
    $signature: 18,
  };
  T.SingleMapping_SingleMapping$fromEntries_closure0.prototype = {
    call$0() {
      return this.sourceEntry.source.file;
    },
    $signature: 261,
  };
  T.SingleMapping_SingleMapping$fromEntries_closure1.prototype = {
    call$1(i) {
      return this.files.$index(0, i);
    },
    $signature: 262,
  };
  T.SingleMapping_toJson_closure.prototype = {
    call$1(file) {
      return file == null
        ? null
        : P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(file._decodedChars, 0, null),
            0,
            null
          );
    },
    $signature: 263,
  };
  T.SingleMapping_toJson_closure0.prototype = {
    call$2($name, value) {
      this.result.$indexSet(0, $name, value);
      return value;
    },
    $signature: 156,
  };
  T.TargetLineEntry.prototype = {
    toString$0(_) {
      return (
        H.getRuntimeType(this).toString$0(0) +
        ': ' +
        this.line +
        ' ' +
        H.S(this.entries)
      );
    },
  };
  T.TargetEntry.prototype = {
    toString$0(_) {
      var _this = this;
      return (
        H.getRuntimeType(_this).toString$0(0) +
        ': (' +
        _this.column +
        ', ' +
        _this.sourceUrlId +
        ', ' +
        _this.sourceLine +
        ', ' +
        _this.sourceColumn +
        ', ' +
        H.S(_this.sourceNameId) +
        ')'
      );
    },
  };
  Y.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j;
      for (
        t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0;
        i < t2;
        ++i
      ) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j >= t2 || t1[j] !== 10) c = 10;
        }
        if (c === 10) t3.push(i + 1);
      }
    },
    span$2(start, end) {
      return Y._FileSpan$(
        this,
        start,
        end == null ? this._decodedChars.length : end
      );
    },
    span$1(start) {
      return this.span$2(start, null);
    },
    getLine$1(offset) {
      var t1,
        _this = this;
      if (offset < 0)
        throw H.wrapException(
          P.RangeError$('Offset may not be negative, was ' + offset + '.')
        );
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(
          P.RangeError$(
            'Offset ' +
              offset +
              string$.x20must_ +
              _this.get$length(_this) +
              '.'
          )
        );
      t1 = _this._lineStarts;
      if (offset < C.JSArray_methods.get$first(t1)) return -1;
      if (offset >= C.JSArray_methods.get$last(t1)) return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return (_this._cachedLine = _this._binarySearch$1(offset) - 1);
    },
    _isNearCachedLine$1(offset) {
      var t2,
        t3,
        t1 = this._cachedLine;
      if (t1 == null) return false;
      t2 = this._lineStarts;
      if (offset < t2[t1]) return false;
      t3 = t2.length;
      if (t1 >= t3 - 1 || offset < t2[t1 + 1]) return true;
      if (t1 >= t3 - 2 || offset < t2[t1 + 2]) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min,
        half,
        t1 = this._lineStarts,
        max = t1.length - 1;
      for (min = 0; min < max; ) {
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (t1[half] > offset) max = half;
        else min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line,
        lineStart,
        _this = this;
      if (offset < 0)
        throw H.wrapException(
          P.RangeError$('Offset may not be negative, was ' + offset + '.')
        );
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(
          P.RangeError$(
            'Offset ' +
              offset +
              ' must be not be greater than the number of characters in the file, ' +
              _this.get$length(_this) +
              '.'
          )
        );
      line = _this.getLine$1(offset);
      lineStart = _this._lineStarts[line];
      if (lineStart > offset)
        throw H.wrapException(
          P.RangeError$('Line ' + line + ' comes after offset ' + offset + '.')
        );
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (line < 0)
        throw H.wrapException(
          P.RangeError$('Line may not be negative, was ' + line + '.')
        );
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw H.wrapException(
            P.RangeError$(
              'Line ' +
                line +
                ' must be less than the number of lines in the file, ' +
                this.get$lines() +
                '.'
            )
          );
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else t1 = true;
      if (t1)
        throw H.wrapException(
          P.RangeError$('Line ' + line + " doesn't have 0 columns.")
        );
      return result;
    },
  };
  Y.FileLocation.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    pointSpan$0() {
      var t1 = this.offset;
      return Y._FileSpan$(this.file, t1, t1);
    },
    get$offset() {
      return this.offset;
    },
  };
  Y._FileSpan.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start(_) {
      return Y.FileLocation$_(this.file, this._file$_start);
    },
    get$end(_) {
      return Y.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return P.String_String$fromCharCodes(
        C.NativeUint32List_methods.sublist$2(
          this.file._decodedChars,
          this._file$_start,
          this._end
        ),
        0,
        null
      );
    },
    get$context(_) {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1
            ? ''
            : P.String_String$fromCharCodes(
                C.NativeUint32List_methods.sublist$2(
                  t1._decodedChars,
                  t1.getOffset$1(endLine),
                  t1.getOffset$1(endLine + 1)
                ),
                0,
                null
              );
      } else
        endOffset =
          endLine === t1._lineStarts.length - 1
            ? t1._decodedChars.length
            : t1.getOffset$1(endLine + 1);
      return P.String_String$fromCharCodes(
        C.NativeUint32List_methods.sublist$2(
          t1._decodedChars,
          t1.getOffset$1(t1.getLine$1(_this._file$_start)),
          endOffset
        ),
        0,
        null
      );
    },
    _FileSpan$3(file, _start, _end) {
      var t3,
        t1 = this._end,
        t2 = this._file$_start;
      if (t1 < t2)
        throw H.wrapException(
          P.ArgumentError$(
            'End ' + t1 + ' must come after start ' + t2 + '.',
            null
          )
        );
      else {
        t3 = this.file;
        if (t1 > t3._decodedChars.length)
          throw H.wrapException(
            P.RangeError$(
              'End ' + t1 + string$.x20must_ + t3.get$length(t3) + '.'
            )
          );
        else if (t2 < 0)
          throw H.wrapException(
            P.RangeError$('Start may not be negative, was ' + t2 + '.')
          );
      }
    },
    compareTo$1(_, other) {
      var result;
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = C.JSInt_methods.compareTo$1(
        this._file$_start,
        other._file$_start
      );
      return result === 0
        ? C.JSInt_methods.compareTo$1(this._end, other._end)
        : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return (
        _this._file$_start === other._file$_start &&
        _this._end === other._end &&
        J.$eq$(_this.file.url, other.file.url)
      );
    },
    get$hashCode(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    expand$1(_, other) {
      var start,
        _this = this,
        t1 = _this.file;
      if (!J.$eq$(t1.url, other.file.url))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(_this.get$sourceUrl(_this)) +
              '" and  "' +
              H.S(other.get$sourceUrl(other)) +
              '" don\'t match.',
            null
          )
        );
      start = Math.min(_this._file$_start, other._file$_start);
      return Y._FileSpan$(t1, start, Math.max(_this._end, other._end));
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1,
  };
  U.Highlighter.prototype = {
    highlight$0() {
      var t2,
        highlightsByColumn,
        t3,
        t4,
        i,
        line,
        lastLine,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        index,
        primaryIdx,
        primary,
        _i,
        highlight,
        _this = this,
        _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(C.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = P.List_List$filled(
        t2,
        _null,
        false,
        type$.nullable__Highlight
      );
      for (
        t3 = _this._highlighter$_buffer,
          t2 = t2 !== 0,
          t4 = _this._primaryColor,
          i = 0;
        i < t1.length;
        ++i
      ) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end($._glyphs.get$upEnd());
            t3._contents += '\n';
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text('...');
            t3._contents += '\n';
          }
        }
        for (
          t5 = line.highlights,
            t6 = new H.ReversedListIterable(
              t5,
              H._arrayInstanceType(t5)._eval$1('ReversedListIterable<1>')
            ),
            t6 = new H.ListIterator(t6, t6.get$length(t6)),
            t7 = H._instanceType(t6)._precomputed1,
            t8 = line.number,
            t9 = line.text;
          t6.moveNext$0();

        ) {
          t10 = t7._as(t6.__internal$_current);
          t11 = t10.span;
          if (
            t11.get$start(t11).get$line() !== t11.get$end(t11).get$line() &&
            t11.get$start(t11).get$line() === t8 &&
            _this._isOnlyWhitespace$1(
              C.JSString_methods.substring$2(
                t9,
                0,
                t11.get$start(t11).get$column()
              )
            )
          ) {
            index = C.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              H.throwExpression(
                P.ArgumentError$(
                  H.S(highlightsByColumn) + ' contains no null elements.',
                  _null
                )
              );
            highlightsByColumn[index] = t10;
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += ' ';
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2) t3._contents += ' ';
        primaryIdx = C.JSArray_methods.indexWhere$1(
          t5,
          new U.Highlighter_highlight_closure()
        );
        primary = primaryIdx === -1 ? _null : t5[primaryIdx];
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 =
            t7.get$start(t7).get$line() === t8
              ? t7.get$start(t7).get$column()
              : 0;
          _this._writeHighlightedText$4$color(
            t9,
            t10,
            t7.get$end(t7).get$line() === t8
              ? t7.get$end(t7).get$column()
              : t9.length,
            t4
          );
        } else _this._writeText$1(t9);
        t3._contents += '\n';
        if (t6) _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (
          t6 = t5.length, _i = 0;
          _i < t5.length;
          t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i
        ) {
          highlight = t5[_i];
          if (highlight.isPrimary) continue;
          _this._writeIndicator$3(line, highlight, highlightsByColumn);
        }
      }
      _this._writeSidebar$1$end($._glyphs.get$upEnd());
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this,
        t1 = !_this._multipleFiles || url == null,
        t2 = $._glyphs;
      if (t1) _this._writeSidebar$1$end(t2.get$downEnd());
      else {
        _this._writeSidebar$1$end(t2.get$topLeftCorner());
        _this._colorize$2$color(
          new U.Highlighter__writeFileStart_closure(_this),
          '\x1b[34m'
        );
        _this._highlighter$_buffer._contents +=
          ' ' + $.$get$context().prettyUri$1(url);
      }
      _this._highlighter$_buffer._contents += '\n';
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1,
        currentColor,
        t2,
        t3,
        t4,
        t5,
        foundCurrent,
        _i,
        highlight,
        t6,
        startLine,
        t7,
        endLine,
        _this = this,
        _box_0 = {};
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1) currentColor = null;
      else
        currentColor = current.isPrimary
          ? _this._primaryColor
          : _this._secondaryColor;
      for (
        t2 = highlightsByColumn.length,
          t3 = _this._secondaryColor,
          t1 = !t1,
          t4 = _this._primaryColor,
          t5 = _this._highlighter$_buffer,
          foundCurrent = false,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        highlight = highlightsByColumn[_i];
        t6 = highlight == null;
        if (t6) startLine = null;
        else {
          t7 = highlight.span;
          startLine = t7.get$start(t7).get$line();
        }
        if (t6) endLine = null;
        else {
          t7 = highlight.span;
          endLine = t7.get$end(t7).get$line();
        }
        if (t1 && highlight === current) {
          _this._colorize$2$color(
            new U.Highlighter__writeMultilineHighlights_closure(
              _this,
              startLine,
              line
            ),
            currentColor
          );
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$2$color(
            new U.Highlighter__writeMultilineHighlights_closure0(
              _this,
              highlight
            ),
            currentColor
          );
        else if (t6)
          if (_box_0.openedOnThisLine)
            _this._colorize$2$color(
              new U.Highlighter__writeMultilineHighlights_closure1(_this),
              _box_0.openedOnThisLineColor
            );
          else t5._contents += ' ';
        else {
          t6 = highlight.isPrimary ? t4 : t3;
          _this._colorize$2$color(
            new U.Highlighter__writeMultilineHighlights_closure2(
              _box_0,
              _this,
              current,
              startLine,
              line,
              highlight,
              endLine
            ),
            t6
          );
        }
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(
        line,
        highlightsByColumn,
        null
      );
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(C.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$2$color(
        new U.Highlighter__writeHighlightedText_closure(
          _this,
          text,
          startColumn,
          endColumn
        ),
        color
      );
      _this._writeText$1(
        C.JSString_methods.substring$2(text, endColumn, text.length)
      );
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var t2,
        coversWholeLine,
        _this = this,
        color = highlight.isPrimary
          ? _this._primaryColor
          : _this._secondaryColor,
        t1 = highlight.span;
      if (t1.get$start(t1).get$line() === t1.get$end(t1).get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += ' ';
        _this._writeMultilineHighlights$3$current(
          line,
          highlightsByColumn,
          highlight
        );
        if (highlightsByColumn.length !== 0) t1._contents += ' ';
        _this._colorize$2$color(
          new U.Highlighter__writeIndicator_closure(_this, line, highlight),
          color
        );
        t1._contents += '\n';
      } else {
        t2 = line.number;
        if (t1.get$start(t1).get$line() === t2) {
          if (C.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          B.replaceFirstNull(highlightsByColumn, highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += ' ';
          _this._writeMultilineHighlights$3$current(
            line,
            highlightsByColumn,
            highlight
          );
          _this._colorize$2$color(
            new U.Highlighter__writeIndicator_closure0(_this, line, highlight),
            color
          );
          t1._contents += '\n';
        } else if (t1.get$end(t1).get$line() === t2) {
          coversWholeLine = t1.get$end(t1).get$column() === line.text.length;
          if (coversWholeLine && highlight.label == null) {
            B.replaceWithNull(highlightsByColumn, highlight);
            return;
          }
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += ' ';
          _this._writeMultilineHighlights$3$current(
            line,
            highlightsByColumn,
            highlight
          );
          _this._colorize$2$color(
            new U.Highlighter__writeIndicator_closure1(
              _this,
              coversWholeLine,
              line,
              highlight
            ),
            color
          );
          t1._contents += '\n';
          B.replaceWithNull(highlightsByColumn, highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t2,
        t1 = beginning ? 0 : 1,
        tabs = this._countTabs$1(
          C.JSString_methods.substring$2(line.text, 0, column + t1)
        );
      t1 = this._highlighter$_buffer;
      t2 = t1._contents += C.JSString_methods.$mul(
        $._glyphs.get$horizontalLine(),
        1 + column + tabs * 3
      );
      t1._contents = t2 + '^';
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (
        t1 = new H.CodeUnits(text),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = this._highlighter$_buffer,
          t3 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t4 = t3._as(t1.__internal$_current);
        if (t4 === 9) t2._contents += C.JSString_methods.$mul(' ', 4);
        else t2._contents += H.Primitives_stringFromCharCode(t4);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null) t1.text = C.JSInt_methods.toString$0(line + 1);
      this._colorize$2$color(
        new U.Highlighter__writeSidebar_closure(t1, this, end),
        '\x1b[34m'
      );
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count;
      for (
        t1 = new H.CodeUnits(text),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1,
          count = 0;
        t1.moveNext$0();

      )
        if (t2._as(t1.__internal$_current) === 9) ++count;
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (
        t1 = new H.CodeUnits(text),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t3 = t2._as(t1.__internal$_current);
        if (t3 !== 32 && t3 !== 9) return false;
      }
      return true;
    },
    _colorize$2$color(callback, color) {
      var t1 = this._primaryColor != null;
      if (t1 && color != null) this._highlighter$_buffer._contents += color;
      callback.call$0();
      if (t1 && color != null) this._highlighter$_buffer._contents += '\x1b[0m';
    },
  };
  U.Highlighter_closure.prototype = {
    call$0() {
      var t1 = this.color,
        t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, true)) return '\x1b[31m';
      if (t2.$eq(t1, false)) return null;
      return H._asStringQ(t1);
    },
    $signature: 37,
  };
  U.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = line.highlights;
      t1 = new H.WhereIterable(
        t1,
        new U.Highlighter$___closure(),
        H._arrayInstanceType(t1)._eval$1('WhereIterable<1>')
      );
      return t1.get$length(t1);
    },
    $signature: 264,
  };
  U.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span;
      return t1.get$start(t1).get$line() !== t1.get$end(t1).get$line();
    },
    $signature: 92,
  };
  U.Highlighter$__closure0.prototype = {
    call$1(line) {
      return line.url;
    },
    $signature: 266,
  };
  U.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span;
      return t1.get$sourceUrl(t1);
    },
    $signature: 267,
  };
  U.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      return highlight1.span.compareTo$1(0, highlight2.span);
    },
    $signature: 268,
  };
  U.Highlighter__collateLines_closure1.prototype = {
    call$1(highlightsForFile) {
      var t1,
        t2,
        t3,
        t4,
        context,
        t5,
        linesBeforeSpan,
        url,
        lineNumber,
        _i,
        line,
        activeHighlights,
        highlightIndex,
        oldHighlightLength,
        lines = H._setArrayType([], type$.JSArray__Line);
      for (
        t1 = J.getInterceptor$ax(highlightsForFile),
          t2 = t1.get$iterator(highlightsForFile),
          t3 = type$.JSArray__Highlight;
        t2.moveNext$0();

      ) {
        t4 = t2.get$current().span;
        context = t4.get$context(t4);
        t5 = B.findLineStart(
          context,
          t4.get$text(),
          t4.get$start(t4).get$column()
        );
        t5.toString;
        t5 = C.JSString_methods.allMatches$1(
          '\n',
          C.JSString_methods.substring$2(context, 0, t5)
        );
        linesBeforeSpan = t5.get$length(t5);
        url = t4.get$sourceUrl(t4);
        lineNumber = t4.get$start(t4).get$line() - linesBeforeSpan;
        for (t4 = context.split('\n'), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (
            lines.length === 0 ||
            lineNumber > C.JSArray_methods.get$last(lines).number
          )
            lines.push(
              new U._Line(line, lineNumber, url, H._setArrayType([], t3))
            );
          ++lineNumber;
        }
      }
      activeHighlights = H._setArrayType([], t3);
      for (
        t2 = lines.length, highlightIndex = 0, _i = 0;
        _i < lines.length;
        lines.length === t2 || (0, H.throwConcurrentModificationError)(lines),
          ++_i
      ) {
        line = lines[_i];
        if (!!activeHighlights.fixed$length)
          H.throwExpression(P.UnsupportedError$('removeWhere'));
        C.JSArray_methods._removeWhere$2(
          activeHighlights,
          new U.Highlighter__collateLines__closure(line),
          true
        );
        oldHighlightLength = activeHighlights.length;
        for (
          t3 = t1.skip$1(highlightsForFile, highlightIndex),
            t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t5 = t4.span;
          if (t5.get$start(t5).get$line() > line.number) break;
          if (!J.$eq$(t5.get$sourceUrl(t5), line.url)) break;
          activeHighlights.push(t4);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        C.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 269,
  };
  U.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      var t1 = highlight.span,
        t2 = this.line;
      return (
        !J.$eq$(t1.get$sourceUrl(t1), t2.url) ||
        t1.get$end(t1).get$line() < t2.number
      );
    },
    $signature: 92,
  };
  U.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      return highlight.isPrimary;
    },
    $signature: 92,
  };
  U.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents +=
        C.JSString_methods.$mul($._glyphs.get$horizontalLine(), 2) + '>';
      return null;
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = $._glyphs;
      t1 =
        this.startLine === this.line.number
          ? t1.get$topLeftCorner()
          : t1.get$bottomLeftCorner();
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = $._glyphs;
      t1 = this.highlight == null ? t1.get$horizontalLine() : t1.get$cross();
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += $._glyphs.get$horizontalLine();
      return null;
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.openedOnThisLine,
        t3 = $._glyphs,
        vertical = t2 ? t3.get$cross() : t3.get$verticalLine();
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$2$color(
            new U.Highlighter__writeMultilineHighlights__closure(t1, t2),
            t1.openedOnThisLineColor
          );
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = _this.highlight.isPrimary
              ? t2._primaryColor
              : t2._secondaryColor;
        } else {
          if (_this.endLine === t3) {
            t3 = _this.highlight.span;
            t2 = t3.get$end(t3).get$column() === t2.text.length;
          } else t2 = false;
          t3 = _this.$this;
          if (t2) {
            t1 =
              _this.highlight.label == null
                ? $._glyphs.glyphOrAscii$2('\u2514', '\\')
                : vertical;
            t3._highlighter$_buffer._contents += t1;
          } else
            t3._colorize$2$color(
              new U.Highlighter__writeMultilineHighlights__closure0(
                t3,
                vertical
              ),
              t1.openedOnThisLineColor
            );
        }
      }
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? '\u252c' : '\u250c';
      this.$this._highlighter$_buffer._contents += $._glyphs.glyphOrAscii$2(
        t1,
        '/'
      );
    },
    $signature: 0,
  };
  U.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 0,
  };
  U.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(
        C.JSString_methods.substring$2(
          _this.text,
          _this.startColumn,
          _this.endColumn
        )
      );
    },
    $signature: 0,
  };
  U.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore,
        tabsInside,
        t1 = this.$this,
        t2 = this.highlight,
        t3 = t2.span,
        t4 = t2.isPrimary ? '^' : $._glyphs.get$horizontalLineBold(),
        startColumn = t3.get$start(t3).get$column(),
        endColumn = t3.get$end(t3).get$column();
      t3 = this.line.text;
      tabsBefore = t1._countTabs$1(
        C.JSString_methods.substring$2(t3, 0, startColumn)
      );
      tabsInside = t1._countTabs$1(
        C.JSString_methods.substring$2(t3, startColumn, endColumn)
      );
      startColumn += tabsBefore * 3;
      t1 = t1._highlighter$_buffer;
      t1._contents += C.JSString_methods.$mul(' ', startColumn);
      t4 = t1._contents += C.JSString_methods.$mul(
        t4,
        Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1)
      );
      t2 = t2.label;
      if (t2 != null) t1._contents = t4 + (' ' + t2);
    },
    $signature: 0,
  };
  U.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      var t1 = this.highlight.span;
      return this.$this._writeArrow$2(this.line, t1.get$start(t1).get$column());
    },
    $signature: 0,
  };
  U.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var t2,
        _this = this,
        t1 = _this.$this;
      if (_this.coversWholeLine)
        t1._highlighter$_buffer._contents += C.JSString_methods.$mul(
          $._glyphs.get$horizontalLine(),
          3
        );
      else {
        t2 = _this.highlight.span;
        t1._writeArrow$3$beginning(
          _this.line,
          Math.max(t2.get$end(t2).get$column() - 1, 0),
          false
        );
      }
      t2 = _this.highlight.label;
      if (t2 != null) t1._highlighter$_buffer._contents += ' ' + t2;
    },
    $signature: 0,
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null) t3 = '';
      t2._contents += C.JSString_methods.padRight$1(
        t3,
        t1._paddingBeforeSidebar
      );
      t1 = this.end;
      t2._contents += t1 == null ? $._glyphs.get$verticalLine() : t1;
    },
    $signature: 0,
  };
  U._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.isPrimary ? '' + 'primary ' : '',
        t2 = this.span;
      t2 =
        t1 +
        ('' +
          t2.get$start(t2).get$line() +
          ':' +
          t2.get$start(t2).get$column() +
          '-' +
          t2.get$end(t2).get$line() +
          ':' +
          t2.get$end(t2).get$column());
      t1 = this.label;
      t1 = t1 != null ? t2 + (' (' + t1 + ')') : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  U._Highlight_closure.prototype = {
    call$0() {
      var t2,
        t3,
        t4,
        t5,
        t1 = this.span;
      if (
        !(
          type$.SourceSpanWithContext._is(t1) &&
          B.findLineStart(
            t1.get$context(t1),
            t1.get$text(),
            t1.get$start(t1).get$column()
          ) != null
        )
      ) {
        t2 = V.SourceLocation$(
          t1.get$start(t1).get$offset(),
          0,
          0,
          t1.get$sourceUrl(t1)
        );
        t3 = t1.get$end(t1).get$offset();
        t4 = t1.get$sourceUrl(t1);
        t5 = B.countCodeUnits(t1.get$text(), 10);
        t1 = X.SourceSpanWithContext$(
          t2,
          V.SourceLocation$(
            t3,
            U._Highlight__lastLineLength(t1.get$text()),
            t5,
            t4
          ),
          t1.get$text(),
          t1.get$text()
        );
      }
      return U._Highlight__normalizeEndOfLine(
        U._Highlight__normalizeTrailingNewline(
          U._Highlight__normalizeNewlines(t1)
        )
      );
    },
    $signature: 270,
  };
  U._Line.prototype = {
    toString$0(_) {
      return (
        '' +
        this.number +
        ': "' +
        this.text +
        '" (' +
        C.JSArray_methods.join$1(this.highlights, ', ') +
        ')'
      );
    },
  };
  V.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(t1) +
              '" and "' +
              H.S(other.get$sourceUrl(other)) +
              '" don\'t match.',
            null
          )
        );
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(t1) +
              '" and "' +
              H.S(other.get$sourceUrl(other)) +
              '" don\'t match.',
            null
          )
        );
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        type$.SourceLocation._is(other) &&
        J.$eq$(this.sourceUrl, other.get$sourceUrl(other)) &&
        this.offset === other.get$offset()
      );
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null) t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 =
          '<' +
          H.getRuntimeType(_this).toString$0(0) +
          ': ' +
          _this.offset +
          ' ',
        source = _this.sourceUrl;
      return (
        t1 +
        (H.S(source == null ? 'unknown source' : source) +
          ':' +
          (_this.line + 1) +
          ':' +
          (_this.column + 1)) +
        '>'
      );
    },
    $isComparable: 1,
    get$sourceUrl(receiver) {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    },
  };
  D.SourceLocationMixin.prototype = {
    distance$1(other) {
      var _this = this;
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(_this.get$sourceUrl(_this)) +
              '" and "' +
              H.S(other.get$sourceUrl(other)) +
              '" don\'t match.',
            null
          )
        );
      return Math.abs(_this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var _this = this;
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(_this.get$sourceUrl(_this)) +
              '" and "' +
              H.S(other.get$sourceUrl(other)) +
              '" don\'t match.',
            null
          )
        );
      return _this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        type$.SourceLocation._is(other) &&
        J.$eq$(this.file.url, other.get$sourceUrl(other)) &&
        this.offset === other.get$offset()
      );
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null) t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = this.offset,
        t2 = '<' + H.getRuntimeType(this).toString$0(0) + ': ' + t1 + ' ',
        t3 = this.file,
        source = t3.url;
      return (
        t2 +
        (H.S(source == null ? 'unknown source' : source) +
          ':' +
          (t3.getLine$1(t1) + 1) +
          ':' +
          (t3.getColumn$1(t1) + 1)) +
        '>'
      );
    },
    $isComparable: 1,
    $isSourceLocation: 1,
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(t1), t2.get$sourceUrl(t2)))
        throw H.wrapException(
          P.ArgumentError$(
            'Source URLs "' +
              H.S(t2.get$sourceUrl(t2)) +
              '" and  "' +
              H.S(t1.get$sourceUrl(t1)) +
              '" don\'t match.',
            null
          )
        );
      else if (t1.get$offset() < t2.get$offset())
        throw H.wrapException(
          P.ArgumentError$(
            'End ' +
              t1.toString$0(0) +
              ' must come after start ' +
              t2.toString$0(0) +
              '.',
            null
          )
        );
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw H.wrapException(
            P.ArgumentError$(
              'Text "' +
                t3 +
                '" must be ' +
                t2.distance$1(t1) +
                ' characters long.',
              null
            )
          );
      }
    },
    get$start(receiver) {
      return this.start;
    },
    get$end(receiver) {
      return this.end;
    },
    get$text() {
      return this.text;
    },
  };
  G.SourceSpanException.prototype = {
    get$message(_) {
      return this._span_exception$_message;
    },
    get$span() {
      return this._span;
    },
    toString$1$color(_, color) {
      this.get$span();
      return (
        'Error on ' +
        this.get$span().message$2$color(0, this._span_exception$_message, color)
      );
    },
    toString$0($receiver) {
      return this.toString$1$color($receiver, null);
    },
    $isException: 1,
  };
  G.SourceSpanFormatException.prototype = {
    $isFormatException: 1,
    get$source() {
      return this.source;
    },
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl(_) {
      var t1 = this.get$start(this);
      return t1.get$sourceUrl(t1);
    },
    get$length(_) {
      var _this = this;
      return (
        _this.get$end(_this).get$offset() - _this.get$start(_this).get$offset()
      );
    },
    compareTo$1(_, other) {
      var _this = this,
        result = _this.get$start(_this).compareTo$1(0, other.get$start(other));
      return result === 0
        ? _this.get$end(_this).compareTo$1(0, other.get$end(other))
        : result;
    },
    message$2$color(_, message, color) {
      var t2,
        highlight,
        _this = this,
        t1 =
          '' +
          ('line ' +
            (_this.get$start(_this).get$line() + 1) +
            ', column ' +
            (_this.get$start(_this).get$column() + 1));
      if (_this.get$sourceUrl(_this) != null) {
        t2 = _this.get$sourceUrl(_this);
        t2 = t1 + (' of ' + $.$get$context().prettyUri$1(t2));
        t1 = t2;
      }
      t1 += ': ' + message;
      highlight = _this.highlight$1$color(color);
      if (highlight.length !== 0) t1 = t1 + '\n' + highlight;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    message$1($receiver, message) {
      return this.message$2$color($receiver, message, null);
    },
    highlight$1$color(color) {
      var _this = this;
      if (
        !type$.SourceSpanWithContext._is(_this) &&
        _this.get$length(_this) === 0
      )
        return '';
      return U.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        type$.SourceSpan._is(other) &&
        _this.get$start(_this).$eq(0, other.get$start(other)) &&
        _this.get$end(_this).$eq(0, other.get$end(other))
      );
    },
    get$hashCode(_) {
      var t2,
        _this = this,
        t1 = _this.get$start(_this);
      t1 = t1.get$hashCode(t1);
      t2 = _this.get$end(_this);
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0(_) {
      var _this = this;
      return (
        '<' +
        H.getRuntimeType(_this).toString$0(0) +
        ': from ' +
        _this.get$start(_this).toString$0(0) +
        ' to ' +
        _this.get$end(_this).toString$0(0) +
        ' "' +
        _this.get$text() +
        '">'
      );
    },
    $isComparable: 1,
    $isSourceSpan: 1,
  };
  X.SourceSpanWithContext.prototype = {
    get$context(_) {
      return this._context;
    },
  };
  U.Chain.prototype = {
    toTrace$0() {
      var t1 = this.traces;
      return Y.Trace$(
        new H.ExpandIterable(
          t1,
          new U.Chain_toTrace_closure(),
          H._arrayInstanceType(t1)._eval$1('ExpandIterable<1,Frame>')
        ),
        null
      );
    },
    toString$0(_) {
      var t1 = this.traces,
        t2 = H._arrayInstanceType(t1);
      return new H.MappedListIterable(
        t1,
        new U.Chain_toString_closure(
          new H.MappedListIterable(
            t1,
            new U.Chain_toString_closure0(),
            t2._eval$1('MappedListIterable<1,int>')
          ).fold$2(0, 0, C.CONSTANT)
        ),
        t2._eval$1('MappedListIterable<1,String>')
      ).join$1(0, string$.x3d_____);
    },
    $isStackTrace: 1,
  };
  U.Chain_Chain$parse_closure.prototype = {
    call$1(line) {
      return line.length !== 0;
    },
    $signature: 6,
  };
  U.Chain_Chain$parse_closure0.prototype = {
    call$1(trace) {
      return Y.Trace$parseVM(trace);
    },
    $signature: 151,
  };
  U.Chain_Chain$parse_closure1.prototype = {
    call$1(trace) {
      return Y.Trace$parseFriendly(trace);
    },
    $signature: 151,
  };
  U.Chain_toTrace_closure.prototype = {
    call$1(trace) {
      return trace.get$frames();
    },
    $signature: 273,
  };
  U.Chain_toString_closure0.prototype = {
    call$1(trace) {
      var t1 = trace.get$frames();
      return new H.MappedListIterable(
        t1,
        new U.Chain_toString__closure0(),
        H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,int>')
      ).fold$2(0, 0, C.CONSTANT);
    },
    $signature: 274,
  };
  U.Chain_toString__closure0.prototype = {
    call$1(frame) {
      return frame.get$location().length;
    },
    $signature: 149,
  };
  U.Chain_toString_closure.prototype = {
    call$1(trace) {
      var t1 = trace.get$frames();
      return new H.MappedListIterable(
        t1,
        new U.Chain_toString__closure(this.longest),
        H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
      ).join$0(0);
    },
    $signature: 276,
  };
  U.Chain_toString__closure.prototype = {
    call$1(frame) {
      return (
        C.JSString_methods.padRight$1(frame.get$location(), this.longest) +
        '  ' +
        H.S(frame.get$member()) +
        '\n'
      );
    },
    $signature: 146,
  };
  A.Frame.prototype = {
    get$isCore() {
      return this.uri.get$scheme() === 'dart';
    },
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === 'data') return 'data:...';
      return $.$get$context().prettyUri$1(t1);
    },
    get$$package() {
      var t1 = this.uri;
      if (t1.get$scheme() !== 'package') return null;
      return C.JSArray_methods.get$first(t1.get$path(t1).split('/'));
    },
    get$location() {
      var t2,
        _this = this,
        t1 = _this.line;
      if (t1 == null) return _this.get$library();
      t2 = _this.column;
      if (t2 == null) return _this.get$library() + ' ' + H.S(t1);
      return _this.get$library() + ' ' + H.S(t1) + ':' + H.S(t2);
    },
    toString$0(_) {
      return this.get$location() + ' in ' + H.S(this.member);
    },
    get$uri() {
      return this.uri;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    },
    get$member() {
      return this.member;
    },
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0() {
      var match,
        t2,
        t3,
        member,
        uri,
        lineAndColumn,
        line,
        _null = null,
        t1 = this.frame;
      if (t1 === '...')
        return new A.Frame(
          P._Uri__Uri(_null, _null, _null, _null),
          _null,
          _null,
          '...'
        );
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return new N.UnparsedFrame(
          P._Uri__Uri(_null, 'unparsed', _null, _null),
          t1
        );
      t1 = match._match;
      t2 = t1[1];
      t2.toString;
      t3 = $.$get$_asyncBody();
      t2 = H.stringReplaceAllUnchecked(t2, t3, '<async>');
      member = H.stringReplaceAllUnchecked(t2, '<anonymous closure>', '<fn>');
      t2 = t1[2];
      t3 = t2;
      t3.toString;
      if (C.JSString_methods.startsWith$1(t3, '<data:'))
        uri = P.Uri_Uri$dataFromString('', _null, _null);
      else {
        t2 = t2;
        t2.toString;
        uri = P.Uri_parse(t2);
      }
      lineAndColumn = t1[3].split(':');
      t1 = lineAndColumn.length;
      line = t1 > 1 ? P.int_parse(lineAndColumn[1], _null) : _null;
      return new A.Frame(
        uri,
        line,
        t1 > 2 ? P.int_parse(lineAndColumn[2], _null) : _null,
        member
      );
    },
    $signature: 56,
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0() {
      var t2,
        t3,
        _s4_ = '<fn>',
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return new N.UnparsedFrame(
          P._Uri__Uri(null, 'unparsed', null, null),
          t1
        );
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      t2 = match._match;
      t3 = t2[2];
      if (t3 != null) {
        t3 = t3;
        t3.toString;
        t2 = t2[1];
        t2.toString;
        t2 = H.stringReplaceAllUnchecked(t2, '<anonymous>', _s4_);
        t2 = H.stringReplaceAllUnchecked(t2, 'Anonymous function', _s4_);
        return t1.call$2(
          t3,
          H.stringReplaceAllUnchecked(t2, '(anonymous function)', _s4_)
        );
      } else {
        t2 = t2[3];
        t2.toString;
        return t1.call$2(t2, _s4_);
      }
    },
    $signature: 56,
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2($location, member) {
      var t2,
        urlMatch,
        uri,
        line,
        columnMatch,
        _null = null,
        t1 = $.$get$_v8EvalLocation(),
        evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null; $location = t2) {
        t2 = evalMatch._match[1];
        t2.toString;
        evalMatch = t1.firstMatch$1(t2);
      }
      if ($location === 'native')
        return new A.Frame(P.Uri_parse('native'), _null, _null, member);
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return new N.UnparsedFrame(
          P._Uri__Uri(_null, 'unparsed', _null, _null),
          this.frame
        );
      t1 = urlMatch._match;
      t2 = t1[1];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      t2 = t1[2];
      t2.toString;
      line = P.int_parse(t2, _null);
      columnMatch = t1[3];
      return new A.Frame(
        uri,
        line,
        columnMatch != null ? P.int_parse(columnMatch, _null) : _null,
        member
      );
    },
    $signature: 279,
  };
  A.Frame_Frame$_parseFirefoxEval_closure.prototype = {
    call$0() {
      var t2,
        member,
        uri,
        line,
        _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxEvalLocation().firstMatch$1(t1);
      if (match == null)
        return new N.UnparsedFrame(
          P._Uri__Uri(_null, 'unparsed', _null, _null),
          t1
        );
      t1 = match._match;
      t2 = t1[1];
      t2.toString;
      member = H.stringReplaceAllUnchecked(t2, '/<', '');
      t2 = t1[2];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      t1 = t1[3];
      t1.toString;
      line = P.int_parse(t1, _null);
      return new A.Frame(
        uri,
        line,
        _null,
        member.length === 0 || member === 'anonymous' ? '<fn>' : member
      );
    },
    $signature: 56,
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0() {
      var t2,
        t3,
        t4,
        uri,
        member,
        line,
        column,
        _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return new N.UnparsedFrame(
          P._Uri__Uri(_null, 'unparsed', _null, _null),
          t1
        );
      t2 = match._match;
      t3 = t2[3];
      t4 = t3;
      t4.toString;
      if (C.JSString_methods.contains$1(t4, ' line '))
        return A.Frame_Frame$_parseFirefoxEval(t1);
      t1 = t3;
      t1.toString;
      uri = A.Frame__uriOrPathToUri(t1);
      member = t2[1];
      if (member != null) {
        t1 = t2[2];
        t1.toString;
        t1 = C.JSString_methods.allMatches$1('/', t1);
        member += C.JSArray_methods.join$0(
          P.List_List$filled(t1.get$length(t1), '.<fn>', false, type$.String)
        );
        if (member === '') member = '<fn>';
        member = C.JSString_methods.replaceFirst$2(
          member,
          $.$get$_initialDot(),
          ''
        );
      } else member = '<fn>';
      t1 = t2[4];
      if (t1 === '') line = _null;
      else {
        t1 = t1;
        t1.toString;
        line = P.int_parse(t1, _null);
      }
      t1 = t2[5];
      if (t1 == null || t1 === '') column = _null;
      else {
        t1 = t1;
        t1.toString;
        column = P.int_parse(t1, _null);
      }
      return new A.Frame(uri, line, column, member);
    },
    $signature: 56,
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0() {
      var t2,
        uri,
        line,
        column,
        _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw H.wrapException(
          P.FormatException$(
            "Couldn't parse package:stack_trace stack trace line '" + t1 + "'.",
            _null,
            _null
          )
        );
      t1 = match._match;
      t2 = t1[1];
      if (t2 === 'data:...') uri = P.Uri_Uri$dataFromString('', _null, _null);
      else {
        t2 = t2;
        t2.toString;
        uri = P.Uri_parse(t2);
      }
      if (uri.get$scheme() === '') {
        t2 = $.$get$context();
        uri = t2.toUri$1(
          t2.absolute$7(
            t2.style.pathFromUri$1(M._parseUri(uri)),
            _null,
            _null,
            _null,
            _null,
            _null,
            _null
          )
        );
      }
      t2 = t1[2];
      if (t2 == null) line = _null;
      else {
        t2 = t2;
        t2.toString;
        line = P.int_parse(t2, _null);
      }
      t2 = t1[3];
      if (t2 == null) column = _null;
      else {
        t2 = t2;
        t2.toString;
        column = P.int_parse(t2, _null);
      }
      return new A.Frame(uri, line, column, t1[4]);
    },
    $signature: 56,
  };
  T.LazyTrace.prototype = {
    get$_lazy_trace$_trace() {
      var _this = this,
        t1 = _this.__LazyTrace__trace;
      if (t1 == null) {
        t1 = _this._thunk.call$0();
        if (_this.__LazyTrace__trace == null) _this.__LazyTrace__trace = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('_trace'));
      }
      return t1;
    },
    get$frames() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    get$terse() {
      return new T.LazyTrace(new T.LazyTrace_terse_closure(this));
    },
    toString$0(_) {
      return this.get$_lazy_trace$_trace().toString$0(0);
    },
    $isStackTrace: 1,
    $isTrace: 1,
  };
  T.LazyTrace_terse_closure.prototype = {
    call$0() {
      return this.$this.get$_lazy_trace$_trace().get$terse();
    },
    $signature: 141,
  };
  Y.Trace.prototype = {
    get$terse() {
      return this.foldFrames$2$terse(new Y.Trace_terse_closure(), true);
    },
    foldFrames$2$terse(predicate, terse) {
      var newFrames,
        t1,
        t2,
        t3,
        _box_0 = {};
      _box_0.predicate = predicate;
      _box_0.predicate = new Y.Trace_foldFrames_closure(predicate);
      newFrames = H._setArrayType([], type$.JSArray_Frame);
      for (
        t1 = this.frames,
          t1 = new H.ReversedListIterable(
            t1,
            H._arrayInstanceType(t1)._eval$1('ReversedListIterable<1>')
          ),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t3 = t2._as(t1.__internal$_current);
        if (t3 instanceof N.UnparsedFrame || !_box_0.predicate.call$1(t3))
          newFrames.push(t3);
        else if (
          newFrames.length === 0 ||
          !_box_0.predicate.call$1(C.JSArray_methods.get$last(newFrames))
        )
          newFrames.push(
            new A.Frame(
              t3.get$uri(),
              t3.get$line(),
              t3.get$column(),
              t3.get$member()
            )
          );
      }
      t1 = type$.MappedListIterable_Frame_Frame;
      newFrames = P.List_List$of(
        new H.MappedListIterable(
          newFrames,
          new Y.Trace_foldFrames_closure0(_box_0),
          t1
        ),
        true,
        t1._eval$1('ListIterable.E')
      );
      if (
        newFrames.length > 1 &&
        _box_0.predicate.call$1(C.JSArray_methods.get$first(newFrames))
      )
        C.JSArray_methods.removeAt$1(newFrames, 0);
      return Y.Trace$(
        new H.ReversedListIterable(
          newFrames,
          H._arrayInstanceType(newFrames)._eval$1('ReversedListIterable<1>')
        ),
        this.original._stackTrace
      );
    },
    toString$0(_) {
      var t1 = this.frames,
        t2 = H._arrayInstanceType(t1);
      return new H.MappedListIterable(
        t1,
        new Y.Trace_toString_closure(
          new H.MappedListIterable(
            t1,
            new Y.Trace_toString_closure0(),
            t2._eval$1('MappedListIterable<1,int>')
          ).fold$2(0, 0, C.CONSTANT)
        ),
        t2._eval$1('MappedListIterable<1,String>')
      ).join$0(0);
    },
    $isStackTrace: 1,
    get$frames() {
      return this.frames;
    },
  };
  Y.Trace_Trace$from_closure.prototype = {
    call$0() {
      return Y.Trace_Trace$parse(this.trace.toString$0(0));
    },
    $signature: 141,
  };
  Y.Trace__parseVM_closure.prototype = {
    call$1(line) {
      return line.length !== 0;
    },
    $signature: 6,
  };
  Y.Trace__parseVM_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseVM(line);
    },
    $signature: 55,
  };
  Y.Trace$parseV8_closure.prototype = {
    call$1(line) {
      return !C.JSString_methods.startsWith$1(line, $.$get$_v8TraceLine());
    },
    $signature: 6,
  };
  Y.Trace$parseV8_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseV8(line);
    },
    $signature: 55,
  };
  Y.Trace$parseJSCore_closure.prototype = {
    call$1(line) {
      return line !== '\tat ';
    },
    $signature: 6,
  };
  Y.Trace$parseJSCore_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseV8(line);
    },
    $signature: 55,
  };
  Y.Trace$parseFirefox_closure.prototype = {
    call$1(line) {
      return line.length !== 0 && line !== '[native code]';
    },
    $signature: 6,
  };
  Y.Trace$parseFirefox_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseFirefox(line);
    },
    $signature: 55,
  };
  Y.Trace$parseFriendly_closure.prototype = {
    call$1(line) {
      return !C.JSString_methods.startsWith$1(line, '=====');
    },
    $signature: 6,
  };
  Y.Trace$parseFriendly_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseFriendly(line);
    },
    $signature: 55,
  };
  Y.Trace_terse_closure.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 136,
  };
  Y.Trace_foldFrames_closure.prototype = {
    call$1(frame) {
      var t1;
      if (this.oldPredicate.call$1(frame)) return true;
      if (frame.get$isCore()) return true;
      if (frame.get$$package() === 'stack_trace') return true;
      t1 = frame.get$member();
      t1.toString;
      if (!C.JSString_methods.contains$1(t1, '<async>')) return false;
      return frame.get$line() == null;
    },
    $signature: 136,
  };
  Y.Trace_foldFrames_closure0.prototype = {
    call$1(frame) {
      var t1, t2;
      if (
        frame instanceof N.UnparsedFrame ||
        !this._box_0.predicate.call$1(frame)
      )
        return frame;
      t1 = frame.get$library();
      t2 = $.$get$_terseRegExp();
      return new A.Frame(
        P.Uri_parse(H.stringReplaceAllUnchecked(t1, t2, '')),
        null,
        null,
        frame.get$member()
      );
    },
    $signature: 283,
  };
  Y.Trace_toString_closure0.prototype = {
    call$1(frame) {
      return frame.get$location().length;
    },
    $signature: 149,
  };
  Y.Trace_toString_closure.prototype = {
    call$1(frame) {
      if (frame instanceof N.UnparsedFrame) return frame.toString$0(0) + '\n';
      return (
        C.JSString_methods.padRight$1(frame.get$location(), this.longest) +
        '  ' +
        H.S(frame.get$member()) +
        '\n'
      );
    },
    $signature: 146,
  };
  N.UnparsedFrame.prototype = {
    toString$0(_) {
      return this.member;
    },
    $isFrame: 1,
    get$uri() {
      return this.uri;
    },
    get$line() {
      return null;
    },
    get$column() {
      return null;
    },
    get$isCore() {
      return false;
    },
    get$library() {
      return 'unparsed';
    },
    get$$package() {
      return null;
    },
    get$location() {
      return 'unparsed';
    },
    get$member() {
      return this.member;
    },
  };
  E.StringScannerException.prototype = {
    get$source() {
      return H._asString(this.source);
    },
  };
  Z.LineScanner.prototype = {
    scanChar$1(character) {
      if (!this.super$StringScanner$scanChar(character)) return false;
      this._adjustLineAndColumn$1(character);
      return true;
    },
    _adjustLineAndColumn$1(character) {
      var t1,
        _this = this;
      if (character !== 10) t1 = character === 13 && _this.peekChar$0() !== 10;
      else t1 = true;
      if (t1) {
        ++_this._line_scanner$_line;
        _this._line_scanner$_column = 0;
      } else ++_this._line_scanner$_column;
    },
    scan$1(pattern) {
      var t1,
        newlines,
        t2,
        _this = this;
      if (!_this.super$StringScanner$scan(pattern)) return false;
      t1 = _this.get$lastMatch();
      newlines = _this._newlinesIn$1(t1.pattern);
      t1 = _this._line_scanner$_line;
      t2 = newlines.length;
      _this._line_scanner$_line = t1 + t2;
      if (t2 === 0) {
        t1 = _this._line_scanner$_column;
        t2 = _this.get$lastMatch();
        _this._line_scanner$_column = t1 + t2.pattern.length;
      } else {
        t1 = _this.get$lastMatch();
        _this._line_scanner$_column =
          t1.pattern.length - J.get$end$z(C.JSArray_methods.get$last(newlines));
      }
      return true;
    },
    _newlinesIn$1(text) {
      var t1 = $.$get$_newlineRegExp().allMatches$1(0, text),
        newlines = P.List_List$of(
          t1,
          true,
          H._instanceType(t1)._eval$1('Iterable.E')
        );
      if (this.peekChar$1(-1) === 13 && this.peekChar$0() === 10)
        C.JSArray_methods.removeLast$0(newlines);
      return newlines;
    },
  };
  S.SpanScanner.prototype = {
    set$state(state) {
      if (state._scanner !== this)
        throw H.wrapException(P.ArgumentError$(string$.The_gi, null));
      this.set$position(state.position);
    },
    spanFrom$2(startState, endState) {
      var endPosition =
        endState == null ? this._string_scanner$_position : endState.position;
      return this._sourceFile.span$2(startState.position, endPosition);
    },
    spanFrom$1(startState) {
      return this.spanFrom$2(startState, null);
    },
    matches$1(pattern) {
      var t1,
        t2,
        _this = this;
      if (!_this.super$StringScanner$matches(pattern)) return false;
      t1 = _this._string_scanner$_position;
      t2 = _this.get$lastMatch();
      _this._sourceFile.span$2(t1, t2.start + t2.pattern.length);
      return true;
    },
    error$3$length$position(_, message, $length, position) {
      var t2,
        match,
        _this = this,
        t1 = _this.string;
      B.validateErrorArgs(t1, null, position, $length);
      t2 = position == null && $length == null;
      match = t2 ? _this.get$lastMatch() : null;
      if (position == null)
        position =
          match == null ? _this._string_scanner$_position : match.start;
      if ($length == null)
        if (match == null) $length = 0;
        else {
          t2 = match.start;
          $length = t2 + match.pattern.length - t2;
        }
      throw H.wrapException(
        E.StringScannerException$(
          message,
          _this._sourceFile.span$2(position, position + $length),
          t1
        )
      );
    },
    error$1($receiver, message) {
      return this.error$3$length$position($receiver, message, null, null);
    },
    error$2$position($receiver, message, position) {
      return this.error$3$length$position($receiver, message, null, position);
    },
    error$2$length($receiver, message, $length) {
      return this.error$3$length$position($receiver, message, $length, null);
    },
  };
  S._SpanScannerState.prototype = {};
  X.StringScanner.prototype = {
    set$position(position) {
      if (position < 0 || position > this.string.length)
        throw H.wrapException(
          P.ArgumentError$('Invalid position ' + position, null)
        );
      this._string_scanner$_position = position;
      this._lastMatch = null;
    },
    get$lastMatch() {
      var _this = this;
      if (_this._string_scanner$_position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    readChar$0() {
      var _this = this,
        t1 = _this._string_scanner$_position,
        t2 = _this.string;
      if (t1 === t2.length)
        _this.error$3$length$position(0, 'expected more input.', 0, t1);
      return C.JSString_methods.codeUnitAt$1(
        t2,
        _this._string_scanner$_position++
      );
    },
    peekChar$1(offset) {
      var index;
      if (offset == null) offset = 0;
      index = this._string_scanner$_position + offset;
      if (index < 0 || index >= this.string.length) return null;
      return C.JSString_methods.codeUnitAt$1(this.string, index);
    },
    peekChar$0() {
      return this.peekChar$1(null);
    },
    scanChar$1(character) {
      var t1 = this._string_scanner$_position,
        t2 = this.string;
      if (t1 === t2.length) return false;
      if (C.JSString_methods.codeUnitAt$1(t2, t1) !== character) return false;
      this._string_scanner$_position = t1 + 1;
      return true;
    },
    expectChar$2$name(character, $name) {
      if (this.scanChar$1(character)) return;
      if ($name == null)
        if (character === 92) $name = '"\\"';
        else
          $name =
            character === 34
              ? '"\\""'
              : '"' + H.Primitives_stringFromCharCode(character) + '"';
      this.error$3$length$position(
        0,
        'expected ' + $name + '.',
        0,
        this._string_scanner$_position
      );
    },
    expectChar$1(character) {
      return this.expectChar$2$name(character, null);
    },
    scan$1(pattern) {
      var t1,
        _this = this,
        success = _this.matches$1(pattern);
      if (success) {
        t1 = _this._lastMatch;
        _this._lastMatchPosition = _this._string_scanner$_position =
          t1.start + t1.pattern.length;
      }
      return success;
    },
    expect$1(pattern) {
      var t1, $name;
      if (this.scan$1(pattern)) return;
      t1 = H.stringReplaceAllUnchecked(pattern, '\\', '\\\\');
      $name = '"' + H.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
      this.error$3$length$position(
        0,
        'expected ' + $name + '.',
        0,
        this._string_scanner$_position
      );
    },
    expectDone$0() {
      var t1 = this._string_scanner$_position;
      if (t1 === this.string.length) return;
      this.error$3$length$position(0, 'expected no more input.', 0, t1);
    },
    matches$1(pattern) {
      var _this = this,
        t1 = C.JSString_methods.matchAsPrefix$2(
          pattern,
          _this.string,
          _this._string_scanner$_position
        );
      _this._lastMatch = t1;
      _this._lastMatchPosition = _this._string_scanner$_position;
      return t1 != null;
    },
    substring$1(_, start) {
      var end = this._string_scanner$_position;
      return C.JSString_methods.substring$2(this.string, start, end);
    },
    error$3$length$position(_, message, $length, position) {
      var t1 = this.string;
      B.validateErrorArgs(t1, null, position, $length);
      throw H.wrapException(
        E.StringScannerException$(
          message,
          Y.SourceFile$fromString(t1, this.sourceUrl).span$2(
            position,
            position + $length
          ),
          t1
        )
      );
    },
  };
  A.AsciiGlyphSet.prototype = {
    glyphOrAscii$2(glyph, alternative) {
      return alternative;
    },
    get$horizontalLine() {
      return '-';
    },
    get$verticalLine() {
      return '|';
    },
    get$topLeftCorner() {
      return ',';
    },
    get$bottomLeftCorner() {
      return "'";
    },
    get$cross() {
      return '+';
    },
    get$upEnd() {
      return "'";
    },
    get$downEnd() {
      return ',';
    },
    get$horizontalLineBold() {
      return '=';
    },
  };
  K.UnicodeGlyphSet.prototype = {
    glyphOrAscii$2(glyph, alternative) {
      return glyph;
    },
    get$horizontalLine() {
      return '\u2500';
    },
    get$verticalLine() {
      return '\u2502';
    },
    get$topLeftCorner() {
      return '\u250c';
    },
    get$bottomLeftCorner() {
      return '\u2514';
    },
    get$cross() {
      return '\u253c';
    },
    get$upEnd() {
      return '\u2575';
    },
    get$downEnd() {
      return '\u2577';
    },
    get$horizontalLineBold() {
      return '\u2501';
    },
  };
  S.Tuple2.prototype = {
    toString$0(_) {
      return '[' + H.S(this.item1) + ', ' + H.S(this.item2) + ']';
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof S.Tuple2 &&
        J.$eq$(other.item1, this.item1) &&
        J.$eq$(other.item2, this.item2)
      );
    },
    get$hashCode(_) {
      var t1 = J.get$hashCode$(this.item1),
        t2 = J.get$hashCode$(this.item2);
      return A._finish(
        A._combine(
          A._combine(0, C.JSInt_methods.get$hashCode(t1)),
          C.JSInt_methods.get$hashCode(t2)
        )
      );
    },
  };
  S.Tuple3.prototype = {
    toString$0(_) {
      return (
        '[' +
        this.item1.toString$0(0) +
        ', ' +
        this.item2.toString$0(0) +
        ', ' +
        this.item3.toString$0(0) +
        ']'
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof S.Tuple3 &&
        other.item1 === this.item1 &&
        other.item2.$eq(0, this.item2) &&
        other.item3.$eq(0, this.item3)
      );
    },
    get$hashCode(_) {
      var t3,
        t1 = H.Primitives_objectHashCode(this.item1),
        t2 = this.item2;
      t2 = t2.get$hashCode(t2);
      t3 = this.item3;
      t3 = t3.get$hashCode(t3);
      return A._finish(
        A._combine(
          A._combine(
            A._combine(0, C.JSInt_methods.get$hashCode(t1)),
            C.JSInt_methods.get$hashCode(t2)
          ),
          C.JSInt_methods.get$hashCode(t3)
        )
      );
    },
  };
  Y.SupportsAnything0.prototype = {
    toString$0(_) {
      return '(' + this.contents.toString$0(0) + ')';
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  Z.Argument0.prototype = {
    toString$0(_) {
      var t1 = this.defaultValue,
        t2 = this.name;
      return t1 == null ? t2 : t2 + ': ' + t1.toString$0(0);
    },
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  B.ArgumentDeclaration0.prototype = {
    get$spanWithName() {
      var t3,
        t4,
        t1 = this.span,
        t2 = t1.file,
        text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(t2._decodedChars, 0, null),
          0,
          null
        ),
        i = Y.FileLocation$_(t2, t1._file$_start).offset - 1;
      while (true) {
        if (i > 0) {
          t3 = C.JSString_methods.codeUnitAt$1(text, i);
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else t3 = false;
        if (!t3) break;
        --i;
      }
      t3 = C.JSString_methods.codeUnitAt$1(text, i);
      if (
        !(
          t3 === 95 ||
          T.isAlphabetic1(t3) ||
          t3 >= 128 ||
          T.isDigit0(t3) ||
          t3 === 45
        )
      )
        return t1;
      --i;
      while (true) {
        if (i >= 0) {
          t3 = C.JSString_methods.codeUnitAt$1(text, i);
          if (t3 !== 95) {
            if (!(t3 >= 97 && t3 <= 122)) t4 = t3 >= 65 && t3 <= 90;
            else t4 = true;
            t4 = t4 || t3 >= 128;
          } else t4 = true;
          if (!t4) {
            t4 = t3 >= 48 && t3 <= 57;
            t3 = t4 || t3 === 45;
          } else t3 = true;
        } else t3 = false;
        if (!t3) break;
        --i;
      }
      t3 = i + 1;
      t4 = C.JSString_methods.codeUnitAt$1(text, t3);
      if (!(t4 === 95 || T.isAlphabetic1(t4) || t4 >= 128)) return t1;
      return V.SpanExtensions_trimRight0(
        V.SpanExtensions_trimLeft0(
          t2.span$2(t3, Y.FileLocation$_(t2, t1._end).offset)
        )
      );
    },
    verify$2(positional, names) {
      var t1,
        t2,
        t3,
        namedUsed,
        i,
        argument,
        t4,
        unknownNames,
        _this = this,
        _s10_ = 'invocation',
        _s8_ = 'argument';
      for (
        t1 = _this.$arguments,
          t2 = t1.length,
          t3 = names._baseMap,
          namedUsed = 0,
          i = 0;
        i < t2;
        ++i
      ) {
        argument = t1[i];
        if (i < positional) {
          t4 = argument.name;
          if (t3.containsKey$1(t4))
            throw H.wrapException(
              E.SassScriptException$0(
                'Argument ' +
                  _this._argument_declaration$_originalArgumentName$1(t4) +
                  string$.x20was_p
              )
            );
        } else {
          t4 = argument.name;
          if (t3.containsKey$1(t4)) ++namedUsed;
          else if (argument.defaultValue == null)
            throw H.wrapException(
              E.MultiSpanSassScriptException$0(
                'Missing argument ' +
                  _this._argument_declaration$_originalArgumentName$1(t4) +
                  '.',
                _s10_,
                P.LinkedHashMap_LinkedHashMap$_literal(
                  [_this.get$spanWithName(), 'declaration'],
                  type$.FileSpan,
                  type$.String
                )
              )
            );
        }
      }
      if (_this.restArgument != null) return;
      if (positional > t2) {
        t1 = 'Only ' + t2 + ' ';
        throw H.wrapException(
          E.MultiSpanSassScriptException$0(
            t1 +
              (names.get$isEmpty(names) ? '' : 'positional ') +
              B.pluralize0(_s8_, t2, null) +
              ' allowed, but ' +
              positional +
              ' ' +
              B.pluralize0('was', positional, 'were') +
              ' passed.',
            _s10_,
            P.LinkedHashMap_LinkedHashMap$_literal(
              [_this.get$spanWithName(), 'declaration'],
              type$.FileSpan,
              type$.String
            )
          )
        );
      }
      if (namedUsed < t3.get$length(t3)) {
        t2 = type$.String;
        unknownNames = P.LinkedHashSet_LinkedHashSet$of(names, t2);
        unknownNames.removeAll$1(
          new H.MappedListIterable(
            t1,
            new B.ArgumentDeclaration_verify_closure1(),
            H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Object?>')
          )
        );
        throw H.wrapException(
          E.MultiSpanSassScriptException$0(
            'No ' +
              B.pluralize0(_s8_, unknownNames._collection$_length, null) +
              ' named ' +
              H.S(
                B.toSentence0(
                  unknownNames.map$1$1(
                    0,
                    new B.ArgumentDeclaration_verify_closure2(),
                    type$.Object
                  ),
                  'or'
                )
              ) +
              '.',
            _s10_,
            P.LinkedHashMap_LinkedHashMap$_literal(
              [_this.get$spanWithName(), 'declaration'],
              type$.FileSpan,
              t2
            )
          )
        );
      }
    },
    _argument_declaration$_originalArgumentName$1($name) {
      var t1,
        text,
        t2,
        _i,
        argument,
        t3,
        t4,
        end,
        _null = null;
      if ($name === this.restArgument) {
        t1 = this.span;
        text = P.String_String$fromCharCodes(
          C.NativeUint32List_methods.sublist$2(
            t1.file._decodedChars,
            t1._file$_start,
            t1._end
          ),
          0,
          _null
        );
        return C.JSString_methods.substring$2(
          C.JSString_methods.substring$1(
            text,
            C.JSString_methods.lastIndexOf$1(text, '$')
          ),
          0,
          C.JSString_methods.indexOf$1(text, '.')
        );
      }
      for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        argument = t1[_i];
        if (argument.name === $name) {
          t1 = argument.defaultValue;
          t2 = argument.span;
          t3 = t2.file;
          t4 = t2._file$_start;
          t2 = t2._end;
          if (t1 == null) {
            t1 = t3._decodedChars;
            t1 = P.String_String$fromCharCodes(
              new Uint32Array(
                t1.subarray(t4, H._checkValidRange(t4, t2, t1.length))
              ),
              0,
              _null
            );
          } else {
            t1 = t3._decodedChars;
            text = P.String_String$fromCharCodes(
              new Uint32Array(
                t1.subarray(t4, H._checkValidRange(t4, t2, t1.length))
              ),
              0,
              _null
            );
            t1 = C.JSString_methods.substring$2(
              text,
              0,
              C.JSString_methods.indexOf$1(text, ':')
            );
            end = B._lastNonWhitespace0(t1, false);
            t1 =
              end == null ? '' : C.JSString_methods.substring$2(t1, 0, end + 1);
          }
          return t1;
        }
      }
      throw H.wrapException(
        P.ArgumentError$(string$.This_d + $name + '".', _null)
      );
    },
    matches$2(positional, names) {
      var t1, t2, t3, namedUsed, i, argument;
      for (
        t1 = this.$arguments,
          t2 = t1.length,
          t3 = names._baseMap,
          namedUsed = 0,
          i = 0;
        i < t2;
        ++i
      ) {
        argument = t1[i];
        if (i < positional) {
          if (t3.containsKey$1(argument.name)) return false;
        } else if (t3.containsKey$1(argument.name)) ++namedUsed;
        else if (argument.defaultValue == null) return false;
      }
      if (this.restArgument != null) return true;
      if (positional > t2) return false;
      if (namedUsed < t3.get$length(t3)) return false;
      return true;
    },
    toString$0(_) {
      var t2,
        t3,
        _i,
        arg,
        t4,
        t5,
        t1 = H._setArrayType([], type$.JSArray_String);
      for (t2 = this.$arguments, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        arg = t2[_i];
        t4 = arg.defaultValue;
        t5 = arg.name;
        t1.push(t4 == null ? t5 : t5 + ': ' + t4.toString$0(0));
      }
      t2 = this.restArgument;
      if (t2 != null) t1.push(t2 + '...');
      return C.JSArray_methods.join$1(t1, ', ');
    },
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  B.ArgumentDeclaration_verify_closure1.prototype = {
    call$1(argument) {
      return argument.name;
    },
    $signature: 284,
  };
  B.ArgumentDeclaration_verify_closure2.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  X.ArgumentInvocation0.prototype = {
    get$isEmpty(_) {
      var t1;
      if (this.positional.length === 0) {
        t1 = this.named;
        t1 = t1.get$isEmpty(t1) && this.rest == null;
      } else t1 = false;
      return t1;
    },
    toString$0(_) {
      var t2,
        t3,
        t4,
        _this = this,
        t1 = P.List_List$of(_this.positional, true, type$.Object);
      for (
        t2 = _this.named, t3 = J.get$iterator$ax(t2.get$keys(t2));
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t1.push(t4 + ': ' + H.S(t2.$index(0, t4)));
      }
      t2 = _this.rest;
      if (t2 != null) t1.push(t2.toString$0(0) + '...');
      t2 = _this.keywordRest;
      if (t2 != null) t1.push(t2.toString$0(0) + '...');
      return '(' + C.JSArray_methods.join$1(t1, ', ') + ')';
    },
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  D.SassArgumentList0.prototype = {};
  B.AsyncImporter0.prototype = {};
  S.AsyncBuiltInCallable0.prototype = {
    callbackFor$2(positional, names) {
      return new S.Tuple2(
        this._async_built_in0$_arguments,
        this._async_built_in0$_callback,
        type$.Tuple2_of_ArgumentDeclaration_and_FutureOr_Value_Function_List_Value_2
      );
    },
    $isAsyncCallable0: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  S.AsyncBuiltInCallable$mixin_closure0.prototype = {
    call$1($arguments) {
      return this.$call$body$AsyncBuiltInCallable$mixin_closure0($arguments);
    },
    $call$body$AsyncBuiltInCallable$mixin_closure0($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.callback.call$1($arguments),
                $async$call$1
              );
            case 3:
              // returning from await.
              $async$returnValue = C.C__SassNull;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 122,
  };
  X._compileStylesheet_closure1.prototype = {
    call$1(url) {
      var t1,
        t2,
        _null = null;
      if (url === '')
        t1 = P.Uri_Uri$dataFromString(
          P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              this.stylesheet.span.file._decodedChars,
              0,
              _null
            ),
            0,
            _null
          ),
          C.C_Utf8Codec,
          _null
        ).get$_text();
      else {
        t1 = P.Uri_parse(url);
        t2 = this.importCache._async_import_cache0$_resultsCache.$index(0, t1);
        if (t2 == null) t2 = _null;
        else t2 = t2._result$_sourceMapUrl;
        t1 = (t2 == null ? t1 : t2).toString$0(0);
      }
      return t1;
    },
    $signature: 5,
  };
  Q.AsyncEnvironment0.prototype = {
    closure$0() {
      var t4,
        t5,
        t6,
        _this = this,
        t1 = _this._async_environment0$_forwardedModules,
        t2 = _this._async_environment0$_nestedForwardedModules,
        t3 = _this._async_environment0$_variables;
      t3 = H._setArrayType(t3.slice(0), H._arrayInstanceType(t3));
      t4 = _this._async_environment0$_variableNodes;
      t4 = H._setArrayType(t4.slice(0), H._arrayInstanceType(t4));
      t5 = _this._async_environment0$_functions;
      t5 = H._setArrayType(t5.slice(0), H._arrayInstanceType(t5));
      t6 = _this._async_environment0$_mixins;
      t6 = H._setArrayType(t6.slice(0), H._arrayInstanceType(t6));
      return Q.AsyncEnvironment$_0(
        _this._async_environment0$_modules,
        _this._async_environment0$_namespaceNodes,
        _this._async_environment0$_globalModules,
        _this._async_environment0$_importedModules,
        t1,
        t2,
        _this._async_environment0$_allModules,
        t3,
        t4,
        t5,
        t6,
        _this._async_environment0$_content
      );
    },
    addModule$3$namespace(module, nodeWithSpan, namespace) {
      var t1,
        t2,
        span,
        _this = this;
      if (namespace == null) {
        _this._async_environment0$_globalModules.$indexSet(
          0,
          module,
          nodeWithSpan
        );
        _this._async_environment0$_allModules.push(module);
        for (
          t1 = J.get$iterator$ax(
            J.get$keys$z(
              C.JSArray_methods.get$first(_this._async_environment0$_variables)
            )
          );
          t1.moveNext$0();

        ) {
          t2 = t1.get$current();
          if (module.get$variables().containsKey$1(t2))
            throw H.wrapException(
              E.SassScriptException$0(string$.This_ma + t2 + '".')
            );
        }
      } else {
        t1 = _this._async_environment0$_modules;
        if (t1.containsKey$1(namespace)) {
          t1 = _this._async_environment0$_namespaceNodes.$index(0, namespace);
          span = t1 == null ? null : t1.span;
          t1 = string$.There_ + namespace + '".';
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          if (span != null) t2.$indexSet(0, span, 'original @use');
          throw H.wrapException(
            E.MultiSpanSassScriptException$0(t1, 'new @use', t2)
          );
        }
        t1.$indexSet(0, namespace, module);
        _this._async_environment0$_namespaceNodes.$indexSet(
          0,
          namespace,
          nodeWithSpan
        );
        _this._async_environment0$_allModules.push(module);
      }
    },
    forwardModule$2(module, rule) {
      var view,
        t1,
        t2,
        _this = this,
        forwardedModules = _this._async_environment0$_forwardedModules;
      if (forwardedModules == null)
        forwardedModules = _this._async_environment0$_forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable_2,
          type$.AstNode_2
        );
      view = R.ForwardedModuleView_ifNecessary0(
        module,
        rule,
        type$.AsyncCallable_2
      );
      for (
        t1 = forwardedModules.get$keys(forwardedModules),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        _this._async_environment0$_assertNoConflicts$5(
          view.get$variables(),
          t2.get$variables(),
          view,
          t2,
          'variable'
        );
        _this._async_environment0$_assertNoConflicts$5(
          view.get$functions(view),
          t2.get$functions(t2),
          view,
          t2,
          'function'
        );
        _this._async_environment0$_assertNoConflicts$5(
          view.get$mixins(),
          t2.get$mixins(),
          view,
          t2,
          'mixin'
        );
      }
      _this._async_environment0$_allModules.push(module);
      forwardedModules.$indexSet(0, view, rule);
    },
    _async_environment0$_assertNoConflicts$5(
      newMembers,
      oldMembers,
      newModule,
      oldModule,
      type
    ) {
      var larger, smaller, t1, t2, $name, span;
      if (
        newMembers.get$length(newMembers) < oldMembers.get$length(oldMembers)
      ) {
        larger = oldMembers;
        smaller = newMembers;
      } else {
        larger = newMembers;
        smaller = oldMembers;
      }
      for (
        t1 = J.get$iterator$ax(smaller.get$keys(smaller)),
          t2 = type === 'variable';
        t1.moveNext$0();

      ) {
        $name = t1.get$current();
        if (!larger.containsKey$1($name)) continue;
        if (
          t2
            ? newModule.variableIdentity$1($name) ===
              oldModule.variableIdentity$1($name)
            : J.$eq$(larger.$index(0, $name), smaller.$index(0, $name))
        )
          continue;
        if (t2) $name = '$' + $name;
        t1 = this._async_environment0$_forwardedModules;
        if (t1 == null) span = null;
        else {
          t1 = t1.$index(0, oldModule);
          span = t1 == null ? null : t1.get$span();
        }
        t1 =
          'Two forwarded modules both define a ' +
          type +
          ' named ' +
          $name +
          '.';
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(type$.FileSpan, type$.String);
        if (span != null) t2.$indexSet(0, span, 'original @forward');
        throw H.wrapException(
          E.MultiSpanSassScriptException$0(t1, 'new @forward', t2)
        );
      }
    },
    importForwards$1(module) {
      var forwardedModules,
        t1,
        t2,
        t3,
        t4,
        t5,
        forwardedVariableNames,
        forwardedFunctionNames,
        forwardedMixinNames,
        _i,
        entry,
        shadowed,
        t6,
        _length,
        _list,
        _this = this,
        forwarded =
          module._async_environment0$_environment
            ._async_environment0$_forwardedModules;
      if (forwarded == null) return;
      forwardedModules = _this._async_environment0$_forwardedModules;
      if (forwardedModules != null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable_2,
          type$.AstNode_2
        );
        for (
          t2 = forwarded.get$entries(forwarded),
            t2 = t2.get$iterator(t2),
            t3 = _this._async_environment0$_globalModules;
          t2.moveNext$0();

        ) {
          t4 = t2.get$current();
          t5 = t4.key;
          if (!forwardedModules.containsKey$1(t5) || !t3.containsKey$1(t5))
            t1.$indexSet(0, t5, t4.value);
        }
        forwarded = t1;
      } else
        forwardedModules = _this._async_environment0$_forwardedModules = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Module_AsyncCallable_2,
          type$.AstNode_2
        );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedVariableNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new Q.AsyncEnvironment_importForwards_closure2(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t2 = forwarded.get$keys(forwarded);
      t1 = H._instanceType(t2)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedFunctionNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t2,
          new Q.AsyncEnvironment_importForwards_closure3(),
          t1
        ),
        t1._eval$1('Iterable.E')
      );
      t1 = forwarded.get$keys(forwarded);
      t2 = H._instanceType(t1)._eval$1('ExpandIterable<Iterable.E,String>');
      forwardedMixinNames = P.LinkedHashSet_LinkedHashSet$of(
        new H.ExpandIterable(
          t1,
          new Q.AsyncEnvironment_importForwards_closure4(),
          t2
        ),
        t2._eval$1('Iterable.E')
      );
      t1 = _this._async_environment0$_variables;
      t2 = t1.length;
      if (t2 === 1) {
        for (
          t2 = _this._async_environment0$_importedModules,
            t3 = t2.get$entries(t2).toList$0(0),
            t4 = t3.length,
            t5 = type$.AsyncCallable_2,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary0(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            t2.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view0$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) t2.$indexSet(0, shadowed, entry.value);
          }
        }
        for (
          t3 = forwardedModules.get$entries(forwardedModules).toList$0(0),
            t4 = t3.length,
            _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          entry = t3[_i];
          module = entry.key;
          shadowed = B.ShadowedModuleView_ifNecessary0(
            module,
            forwardedFunctionNames,
            forwardedMixinNames,
            forwardedVariableNames,
            t5
          );
          if (shadowed != null) {
            forwardedModules.remove$1(0, module);
            t6 = shadowed.variables;
            if (t6.get$isEmpty(t6)) {
              t6 = shadowed.functions;
              if (t6.get$isEmpty(t6)) {
                t6 = shadowed.mixins;
                if (t6.get$isEmpty(t6)) {
                  t6 = shadowed._shadowed_view0$_inner;
                  t6 = t6.get$css(t6);
                  t6 = J.get$isEmpty$asx(t6.get$children(t6));
                } else t6 = false;
              } else t6 = false;
            } else t6 = false;
            if (!t6) forwardedModules.$indexSet(0, shadowed, entry.value);
          }
        }
        t2.addAll$1(0, forwarded);
        forwardedModules.addAll$1(0, forwarded);
      } else {
        t3 = _this._async_environment0$_nestedForwardedModules;
        if (t3 == null) {
          _length = t2 - 1;
          _list = J.JSArray_JSArray$allocateGrowable(
            _length,
            type$.List_Module_AsyncCallable_2
          );
          for (
            t2 = type$.JSArray_Module_AsyncCallable_2, _i = 0;
            _i < _length;
            ++_i
          )
            _list[_i] = H._setArrayType([], t2);
          _this._async_environment0$_nestedForwardedModules = _list;
          t2 = _list;
        } else t2 = t3;
        C.JSArray_methods.addAll$1(
          C.JSArray_methods.get$last(t2),
          forwarded.get$keys(forwarded)
        );
      }
      for (
        t2 = P._LinkedHashSetIterator$(
          forwardedVariableNames,
          forwardedVariableNames._collection$_modifications
        ),
          t3 = H._instanceType(t2)._precomputed1,
          t4 = _this._async_environment0$_variableIndices,
          t5 = _this._async_environment0$_variableNodes;
        t2.moveNext$0();

      ) {
        t6 = t3._as(t2._collection$_current);
        t4.remove$1(0, t6);
        J.remove$1$z(C.JSArray_methods.get$last(t1), t6);
        J.remove$1$z(C.JSArray_methods.get$last(t5), t6);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedFunctionNames,
          forwardedFunctionNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._async_environment0$_functionIndices,
          t4 = _this._async_environment0$_functions;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
      for (
        t1 = P._LinkedHashSetIterator$(
          forwardedMixinNames,
          forwardedMixinNames._collection$_modifications
        ),
          t2 = H._instanceType(t1)._precomputed1,
          t3 = _this._async_environment0$_mixinIndices,
          t4 = _this._async_environment0$_mixins;
        t1.moveNext$0();

      ) {
        t5 = t2._as(t1._collection$_current);
        t3.remove$1(0, t5);
        J.remove$1$z(C.JSArray_methods.get$last(t4), t5);
      }
    },
    getVariable$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment0$_getModule$1(namespace)
          .get$variables()
          .$index(0, $name);
      if (_this._async_environment0$_lastVariableName === $name) {
        t1 = _this._async_environment0$_lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._async_environment0$_variables[t1], $name);
        return t1 == null
          ? _this._async_environment0$_getVariableFromGlobalModule$1($name)
          : t1;
      }
      t1 = _this._async_environment0$_variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._async_environment0$_lastVariableName = $name;
        _this._async_environment0$_lastVariableIndex = index;
        t1 = J.$index$asx(_this._async_environment0$_variables[index], $name);
        return t1 == null
          ? _this._async_environment0$_getVariableFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment0$_variableIndex$1($name);
      if (index == null)
        return _this._async_environment0$_getVariableFromGlobalModule$1($name);
      _this._async_environment0$_lastVariableName = $name;
      _this._async_environment0$_lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment0$_variables[index], $name);
      return t1 == null
        ? _this._async_environment0$_getVariableFromGlobalModule$1($name)
        : t1;
    },
    getVariable$1($name) {
      return this.getVariable$2$namespace($name, null);
    },
    _async_environment0$_getVariableFromGlobalModule$1($name) {
      return this._async_environment0$_fromOneModule$1$3(
        $name,
        'variable',
        new Q.AsyncEnvironment__getVariableFromGlobalModule_closure0($name),
        type$.Value_2
      );
    },
    getVariableNode$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment0$_getModule$1(namespace)
          .get$variableNodes()
          .$index(0, $name);
      if (_this._async_environment0$_lastVariableName === $name) {
        t1 = _this._async_environment0$_lastVariableIndex;
        t1.toString;
        t1 = J.$index$asx(_this._async_environment0$_variableNodes[t1], $name);
        return t1 == null
          ? _this._async_environment0$_getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      t1 = _this._async_environment0$_variableIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        _this._async_environment0$_lastVariableName = $name;
        _this._async_environment0$_lastVariableIndex = index;
        t1 = J.$index$asx(
          _this._async_environment0$_variableNodes[index],
          $name
        );
        return t1 == null
          ? _this._async_environment0$_getVariableNodeFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment0$_variableIndex$1($name);
      if (index == null)
        return _this._async_environment0$_getVariableNodeFromGlobalModule$1(
          $name
        );
      _this._async_environment0$_lastVariableName = $name;
      _this._async_environment0$_lastVariableIndex = index;
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment0$_variableNodes[index], $name);
      return t1 == null
        ? _this._async_environment0$_getVariableNodeFromGlobalModule$1($name)
        : t1;
    },
    _async_environment0$_getVariableNodeFromGlobalModule$1($name) {
      var t1, t2, value;
      for (
        t1 = this._async_environment0$_importedModules,
          t2 = this._async_environment0$_globalModules,
          t2 = t1.get$keys(t1).followedBy$1(0, t2.get$keys(t2)),
          t2 = new H.FollowedByIterator(
            J.get$iterator$ax(t2.__internal$_first),
            t2._second
          );
        t2.moveNext$0();

      ) {
        value = t2._currentIterator
          .get$current()
          .get$variableNodes()
          .$index(0, $name);
        if (value != null) return value;
      }
      return null;
    },
    globalVariableExists$2$namespace($name, namespace) {
      if (namespace != null)
        return this._async_environment0$_getModule$1(namespace)
          .get$variables()
          .containsKey$1($name);
      if (
        C.JSArray_methods.get$first(
          this._async_environment0$_variables
        ).containsKey$1($name)
      )
        return true;
      return (
        this._async_environment0$_getVariableFromGlobalModule$1($name) != null
      );
    },
    globalVariableExists$1($name) {
      return this.globalVariableExists$2$namespace($name, null);
    },
    _async_environment0$_variableIndex$1($name) {
      var t1, i;
      for (
        t1 = this._async_environment0$_variables, i = t1.length - 1;
        i >= 0;
        --i
      )
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    setVariable$5$global$namespace(
      $name,
      value,
      nodeWithSpan,
      global,
      namespace
    ) {
      var t1,
        moduleWithName,
        nestedForwardedModules,
        t2,
        t3,
        t4,
        t5,
        index,
        _this = this;
      if (namespace != null) {
        _this
          ._async_environment0$_getModule$1(namespace)
          .setVariable$3($name, value, nodeWithSpan);
        return;
      }
      if (global || _this._async_environment0$_variables.length === 1) {
        _this._async_environment0$_variableIndices.putIfAbsent$2(
          $name,
          new Q.AsyncEnvironment_setVariable_closure2(_this, $name)
        );
        t1 = _this._async_environment0$_variables;
        if (!C.JSArray_methods.get$first(t1).containsKey$1($name)) {
          moduleWithName = _this._async_environment0$_fromOneModule$1$3(
            $name,
            'variable',
            new Q.AsyncEnvironment_setVariable_closure3($name),
            type$.Module_AsyncCallable_2
          );
          if (moduleWithName != null) {
            moduleWithName.setVariable$3($name, value, nodeWithSpan);
            return;
          }
        }
        J.$indexSet$ax(C.JSArray_methods.get$first(t1), $name, value);
        J.$indexSet$ax(
          C.JSArray_methods.get$first(_this._async_environment0$_variableNodes),
          $name,
          nodeWithSpan
        );
        return;
      }
      nestedForwardedModules =
        _this._async_environment0$_nestedForwardedModules;
      if (
        nestedForwardedModules != null &&
        !_this._async_environment0$_variableIndices.containsKey$1($name) &&
        _this._async_environment0$_variableIndex$1($name) == null
      )
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H.instanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            t5 = t4._as(t3.__internal$_current);
            if (t5.get$variables().containsKey$1($name)) {
              t5.setVariable$3($name, value, nodeWithSpan);
              return;
            }
          }
      if (_this._async_environment0$_lastVariableName === $name) {
        t1 = _this._async_environment0$_lastVariableIndex;
        t1.toString;
        index = t1;
      } else
        index = _this._async_environment0$_variableIndices.putIfAbsent$2(
          $name,
          new Q.AsyncEnvironment_setVariable_closure4(_this, $name)
        );
      if (!_this._async_environment0$_inSemiGlobalScope && index === 0) {
        index = _this._async_environment0$_variables.length - 1;
        _this._async_environment0$_variableIndices.$indexSet(0, $name, index);
      }
      _this._async_environment0$_lastVariableName = $name;
      _this._async_environment0$_lastVariableIndex = index;
      J.$indexSet$ax(_this._async_environment0$_variables[index], $name, value);
      J.$indexSet$ax(
        _this._async_environment0$_variableNodes[index],
        $name,
        nodeWithSpan
      );
    },
    setVariable$4$global($name, value, nodeWithSpan, global) {
      return this.setVariable$5$global$namespace(
        $name,
        value,
        nodeWithSpan,
        global,
        null
      );
    },
    setLocalVariable$3($name, value, nodeWithSpan) {
      var index,
        _this = this,
        t1 = _this._async_environment0$_variables,
        t2 = t1.length;
      _this._async_environment0$_lastVariableName = $name;
      index = _this._async_environment0$_lastVariableIndex = t2 - 1;
      _this._async_environment0$_variableIndices.$indexSet(0, $name, index);
      J.$indexSet$ax(t1[index], $name, value);
      J.$indexSet$ax(
        _this._async_environment0$_variableNodes[index],
        $name,
        nodeWithSpan
      );
    },
    getFunction$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null) {
        t1 = _this._async_environment0$_getModule$1(namespace);
        return t1.get$functions(t1).$index(0, $name);
      }
      t1 = _this._async_environment0$_functionIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._async_environment0$_functions[index], $name);
        return t1 == null
          ? _this._async_environment0$_getFunctionFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment0$_functionIndex$1($name);
      if (index == null)
        return _this._async_environment0$_getFunctionFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment0$_functions[index], $name);
      return t1 == null
        ? _this._async_environment0$_getFunctionFromGlobalModule$1($name)
        : t1;
    },
    _async_environment0$_getFunctionFromGlobalModule$1($name) {
      return this._async_environment0$_fromOneModule$1$3(
        $name,
        'function',
        new Q.AsyncEnvironment__getFunctionFromGlobalModule_closure0($name),
        type$.AsyncCallable_2
      );
    },
    _async_environment0$_functionIndex$1($name) {
      var t1, i;
      for (
        t1 = this._async_environment0$_functions, i = t1.length - 1;
        i >= 0;
        --i
      )
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    getMixin$2$namespace($name, namespace) {
      var t1,
        index,
        _this = this;
      if (namespace != null)
        return _this
          ._async_environment0$_getModule$1(namespace)
          .get$mixins()
          .$index(0, $name);
      t1 = _this._async_environment0$_mixinIndices;
      index = t1.$index(0, $name);
      if (index != null) {
        t1 = J.$index$asx(_this._async_environment0$_mixins[index], $name);
        return t1 == null
          ? _this._async_environment0$_getMixinFromGlobalModule$1($name)
          : t1;
      }
      index = _this._async_environment0$_mixinIndex$1($name);
      if (index == null)
        return _this._async_environment0$_getMixinFromGlobalModule$1($name);
      t1.$indexSet(0, $name, index);
      t1 = J.$index$asx(_this._async_environment0$_mixins[index], $name);
      return t1 == null
        ? _this._async_environment0$_getMixinFromGlobalModule$1($name)
        : t1;
    },
    _async_environment0$_getMixinFromGlobalModule$1($name) {
      return this._async_environment0$_fromOneModule$1$3(
        $name,
        'mixin',
        new Q.AsyncEnvironment__getMixinFromGlobalModule_closure0($name),
        type$.AsyncCallable_2
      );
    },
    _async_environment0$_mixinIndex$1($name) {
      var t1, i;
      for (
        t1 = this._async_environment0$_mixins, i = t1.length - 1;
        i >= 0;
        --i
      )
        if (t1[i].containsKey$1($name)) return i;
      return null;
    },
    withContent$2($content, callback) {
      return this.withContent$body$AsyncEnvironment0($content, callback);
    },
    withContent$body$AsyncEnvironment0($content, callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        oldContent;
      var $async$withContent$2 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldContent = $async$self._async_environment0$_content;
              $async$self._async_environment0$_content = $content;
              $async$goto = 2;
              return P._asyncAwait(callback.call$0(), $async$withContent$2);
            case 2:
              // returning from await.
              $async$self._async_environment0$_content = oldContent;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$withContent$2, $async$completer);
    },
    asMixin$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        oldInMixin;
      var $async$asMixin$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldInMixin = $async$self._async_environment0$_inMixin;
              $async$self._async_environment0$_inMixin = true;
              $async$goto = 2;
              return P._asyncAwait(callback.call$0(), $async$asMixin$1);
            case 2:
              // returning from await.
              $async$self._async_environment0$_inMixin = oldInMixin;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$asMixin$1, $async$completer);
    },
    scope$1$3$semiGlobal$when(callback, semiGlobal, when, $T) {
      return this.scope$body$AsyncEnvironment0(
        callback,
        semiGlobal,
        when,
        $T,
        $T
      );
    },
    scope$1$1(callback, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, true, $T);
    },
    scope$1$2$when(callback, when, $T) {
      return this.scope$1$3$semiGlobal$when(callback, false, when, $T);
    },
    scope$1$2$semiGlobal(callback, semiGlobal, $T) {
      return this.scope$1$3$semiGlobal$when(callback, semiGlobal, true, $T);
    },
    scope$body$AsyncEnvironment0(callback, semiGlobal, when, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        wasInSemiGlobalScope,
        $name,
        name0,
        name1,
        t1,
        t2,
        t3,
        t4,
        t5;
      var $async$scope$1$3$semiGlobal$when = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                semiGlobal =
                  semiGlobal &&
                  $async$self._async_environment0$_inSemiGlobalScope;
                wasInSemiGlobalScope =
                  $async$self._async_environment0$_inSemiGlobalScope;
                $async$self._async_environment0$_inSemiGlobalScope = semiGlobal;
                $async$goto = !when ? 3 : 4;
                break;
              case 3:
                // then
                $async$handler = 5;
                $async$goto = 8;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$scope$1$3$semiGlobal$when
                );
              case 8:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                $async$next = [1];
                // goto finally
                $async$goto = 6;
                break;
                $async$next.push(7);
                // goto finally
                $async$goto = 6;
                break;
              case 5:
                // uncaught
                $async$next = [2];
              case 6:
                // finally
                $async$handler = 2;
                $async$self._async_environment0$_inSemiGlobalScope = wasInSemiGlobalScope;
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 7:
              // after finally
              case 4:
                // join
                t1 = $async$self._async_environment0$_variables;
                t2 = type$.String;
                C.JSArray_methods.add$1(
                  t1,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Value_2)
                );
                C.JSArray_methods.add$1(
                  $async$self._async_environment0$_variableNodes,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, type$.AstNode_2)
                );
                t3 = $async$self._async_environment0$_functions;
                t4 = type$.AsyncCallable_2;
                C.JSArray_methods.add$1(
                  t3,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, t4)
                );
                t5 = $async$self._async_environment0$_mixins;
                C.JSArray_methods.add$1(
                  t5,
                  P.LinkedHashMap_LinkedHashMap$_empty(t2, t4)
                );
                t4 = $async$self._async_environment0$_nestedForwardedModules;
                if (t4 != null)
                  t4.push(
                    H._setArrayType([], type$.JSArray_Module_AsyncCallable_2)
                  );
                $async$handler = 9;
                $async$goto = 12;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$scope$1$3$semiGlobal$when
                );
              case 12:
                // returning from await.
                t2 = $async$result;
                $async$returnValue = t2;
                $async$next = [1];
                // goto finally
                $async$goto = 10;
                break;
                $async$next.push(11);
                // goto finally
                $async$goto = 10;
                break;
              case 9:
                // uncaught
                $async$next = [2];
              case 10:
                // finally
                $async$handler = 2;
                $async$self._async_environment0$_inSemiGlobalScope = wasInSemiGlobalScope;
                $async$self._async_environment0$_lastVariableIndex = $async$self._async_environment0$_lastVariableName = null;
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t1))
                  ),
                    t2 = $async$self._async_environment0$_variableIndices;
                  t1.moveNext$0();

                ) {
                  $name = t1.get$current();
                  t2.remove$1(0, $name);
                }
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t3))
                  ),
                    t2 = $async$self._async_environment0$_functionIndices;
                  t1.moveNext$0();

                ) {
                  name0 = t1.get$current();
                  t2.remove$1(0, name0);
                }
                for (
                  t1 = J.get$iterator$ax(
                    J.get$keys$z(C.JSArray_methods.removeLast$0(t5))
                  ),
                    t2 = $async$self._async_environment0$_mixinIndices;
                  t1.moveNext$0();

                ) {
                  name1 = t1.get$current();
                  t2.remove$1(0, name1);
                }
                t1 = $async$self._async_environment0$_nestedForwardedModules;
                if (t1 != null) t1.pop();
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 11:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$scope$1$3$semiGlobal$when,
        $async$completer
      );
    },
    toImplicitConfiguration$0() {
      var t1,
        t2,
        i,
        values,
        nodes,
        t3,
        t4,
        t5,
        t6,
        configuration = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.String,
          type$.ConfiguredValue_2
        );
      for (
        t1 = this._async_environment0$_variables,
          t2 = this._async_environment0$_variableNodes,
          i = 0;
        i < t1.length;
        ++i
      ) {
        values = t1[i];
        nodes = t2[i];
        for (
          t3 = values.get$entries(values), t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t5 = t4.key;
          t4 = t4.value;
          t6 = nodes.$index(0, t5);
          t6.toString;
          configuration.$indexSet(0, t5, new Z.ConfiguredValue0(t4, null, t6));
        }
      }
      return new A.Configuration0(configuration);
    },
    toModule$2(css, extensionStore) {
      return Q._EnvironmentModule__EnvironmentModule1(
        this,
        css,
        extensionStore,
        X.NullableExtension_andThen0(
          this._async_environment0$_forwardedModules,
          new Q.AsyncEnvironment_toModule_closure0()
        )
      );
    },
    toDummyModule$0() {
      return Q._EnvironmentModule__EnvironmentModule1(
        this,
        new V.CssStylesheet0(
          new P.UnmodifiableListView(
            C.List_empty10,
            type$.UnmodifiableListView_CssNode_2
          ),
          Y.SourceFile$decoded(C.List_empty1, '<dummy module>').span$1(0)
        ),
        C.C_EmptyExtensionStore0,
        X.NullableExtension_andThen0(
          this._async_environment0$_forwardedModules,
          new Q.AsyncEnvironment_toDummyModule_closure0()
        )
      );
    },
    _async_environment0$_getModule$1(namespace) {
      var module = this._async_environment0$_modules.$index(0, namespace);
      if (module != null) return module;
      throw H.wrapException(
        E.SassScriptException$0(
          'There is no module with the namespace "' + namespace + '".'
        )
      );
    },
    _async_environment0$_fromOneModule$1$3($name, type, callback, $T) {
      var t1,
        t2,
        t3,
        t4,
        value,
        identity,
        valueInModule,
        identityFromModule,
        spans,
        t5,
        nestedForwardedModules = this
          ._async_environment0$_nestedForwardedModules;
      if (nestedForwardedModules != null)
        for (
          t1 = new H.ReversedListIterable(
            nestedForwardedModules,
            H._arrayInstanceType(nestedForwardedModules)._eval$1(
              'ReversedListIterable<1>'
            )
          ),
            t1 = new H.ListIterator(t1, t1.get$length(t1)),
            t2 = H._instanceType(t1)._precomputed1;
          t1.moveNext$0();

        )
          for (
            t3 = J.get$reversed$ax(t2._as(t1.__internal$_current)),
              t3 = new H.ListIterator(t3, t3.get$length(t3)),
              t4 = H._instanceType(t3)._precomputed1;
            t3.moveNext$0();

          ) {
            value = callback.call$1(t4._as(t3.__internal$_current));
            if (value != null) return value;
          }
      for (
        t1 = this._async_environment0$_importedModules,
          t1 = t1.get$keys(t1),
          t1 = t1.get$iterator(t1);
        t1.moveNext$0();

      ) {
        value = callback.call$1(t1.get$current());
        if (value != null) return value;
      }
      for (
        t1 = this._async_environment0$_globalModules,
          t2 = t1.get$keys(t1),
          t2 = t2.get$iterator(t2),
          t3 = type$.AsyncCallable_2,
          value = null,
          identity = null;
        t2.moveNext$0();

      ) {
        t4 = t2.get$current();
        valueInModule = callback.call$1(t4);
        if (valueInModule == null) continue;
        identityFromModule = t3._is(valueInModule)
          ? valueInModule
          : t4.variableIdentity$1($name);
        if (identityFromModule.$eq(0, identity)) continue;
        if (value != null) {
          spans = t1
            .get$entries(t1)
            .map$1$1(
              0,
              new Q.AsyncEnvironment__fromOneModule_closure0(callback, $T),
              type$.nullable_FileSpan
            );
          t2 = 'This ' + type + string$.x20is_av;
          t3 = type + ' use';
          t4 = P.LinkedHashMap_LinkedHashMap$_empty(
            type$.FileSpan,
            type$.String
          );
          for (t1 = spans.get$iterator(spans); t1.moveNext$0(); ) {
            t5 = t1.get$current();
            if (t5 != null) t4.$indexSet(0, t5, 'includes ' + type);
          }
          throw H.wrapException(E.MultiSpanSassScriptException$0(t2, t3, t4));
        }
        identity = identityFromModule;
        value = valueInModule;
      }
      return value;
    },
  };
  Q.AsyncEnvironment_importForwards_closure2.prototype = {
    call$1(module) {
      var t1 = module.get$variables();
      return t1.get$keys(t1);
    },
    $signature: 115,
  };
  Q.AsyncEnvironment_importForwards_closure3.prototype = {
    call$1(module) {
      var t1 = module.get$functions(module);
      return t1.get$keys(t1);
    },
    $signature: 115,
  };
  Q.AsyncEnvironment_importForwards_closure4.prototype = {
    call$1(module) {
      var t1 = module.get$mixins();
      return t1.get$keys(t1);
    },
    $signature: 115,
  };
  Q.AsyncEnvironment__getVariableFromGlobalModule_closure0.prototype = {
    call$1(module) {
      return module.get$variables().$index(0, this.name);
    },
    $signature: 287,
  };
  Q.AsyncEnvironment_setVariable_closure2.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._async_environment0$_lastVariableName = this.name;
      return (t1._async_environment0$_lastVariableIndex = 0);
    },
    $signature: 18,
  };
  Q.AsyncEnvironment_setVariable_closure3.prototype = {
    call$1(module) {
      return module.get$variables().containsKey$1(this.name) ? module : null;
    },
    $signature: 288,
  };
  Q.AsyncEnvironment_setVariable_closure4.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._async_environment0$_variableIndex$1(this.name);
      return t2 == null ? t1._async_environment0$_variables.length - 1 : t2;
    },
    $signature: 18,
  };
  Q.AsyncEnvironment__getFunctionFromGlobalModule_closure0.prototype = {
    call$1(module) {
      return module.get$functions(module).$index(0, this.name);
    },
    $signature: 124,
  };
  Q.AsyncEnvironment__getMixinFromGlobalModule_closure0.prototype = {
    call$1(module) {
      return module.get$mixins().$index(0, this.name);
    },
    $signature: 124,
  };
  Q.AsyncEnvironment_toModule_closure0.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_AsyncCallable_2);
    },
    $signature: 204,
  };
  Q.AsyncEnvironment_toDummyModule_closure0.prototype = {
    call$1(modules) {
      return new M.MapKeySet(modules, type$.MapKeySet_Module_AsyncCallable_2);
    },
    $signature: 204,
  };
  Q.AsyncEnvironment__fromOneModule_closure0.prototype = {
    call$1(entry) {
      return X.NullableExtension_andThen0(
        this.callback.call$1(entry.key),
        new Q.AsyncEnvironment__fromOneModule__closure0(entry, this.T)
      );
    },
    $signature: 291,
  };
  Q.AsyncEnvironment__fromOneModule__closure0.prototype = {
    call$1(_) {
      return this.entry.value.get$span();
    },
    $signature() {
      return this.T._eval$1('FileSpan(0)');
    },
  };
  Q._EnvironmentModule1.prototype = {
    get$url() {
      return this.css.get$span().file.url;
    },
    setVariable$3($name, value, nodeWithSpan) {
      var t1,
        t2,
        module = this._async_environment0$_modulesByVariable.$index(0, $name);
      if (module != null) {
        module.setVariable$3($name, value, nodeWithSpan);
        return;
      }
      t1 = this._async_environment0$_environment;
      t2 = t1._async_environment0$_variables;
      if (!C.JSArray_methods.get$first(t2).containsKey$1($name))
        throw H.wrapException(E.SassScriptException$0('Undefined variable.'));
      J.$indexSet$ax(C.JSArray_methods.get$first(t2), $name, value);
      J.$indexSet$ax(
        C.JSArray_methods.get$first(t1._async_environment0$_variableNodes),
        $name,
        nodeWithSpan
      );
      return;
    },
    variableIdentity$1($name) {
      var module = this._async_environment0$_modulesByVariable.$index(0, $name);
      return module == null ? this : module.variableIdentity$1($name);
    },
    cloneCss$0() {
      var result,
        _this = this,
        t1 = _this.css;
      if (J.get$isEmpty$asx(t1.get$children(t1))) return _this;
      result = _this.extensionStore.clone$0();
      return Q._EnvironmentModule$_1(
        _this._async_environment0$_environment,
        new V._CloneCssVisitor0(result.item2)._clone_css$_visitChildren$2(
          V.ModifiableCssStylesheet$0(t1.get$span()),
          t1
        ),
        result.item1,
        _this._async_environment0$_modulesByVariable,
        _this.variables,
        _this.variableNodes,
        _this.functions,
        _this.mixins,
        _this.transitivelyContainsCss,
        _this.transitivelyContainsExtensions
      );
    },
    toString$0(_) {
      var t1 = this.css;
      if (t1.get$span().file.url == null) t1 = '<unknown url>';
      else {
        t1 = t1.get$span();
        t1 = $.$get$context().prettyUri$1(t1.file.url);
      }
      return t1;
    },
    $isModule0: 1,
    get$upstream() {
      return this.upstream;
    },
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$extensionStore() {
      return this.extensionStore;
    },
    get$css(receiver) {
      return this.css;
    },
    get$transitivelyContainsCss() {
      return this.transitivelyContainsCss;
    },
    get$transitivelyContainsExtensions() {
      return this.transitivelyContainsExtensions;
    },
  };
  Q._EnvironmentModule__EnvironmentModule_closure11.prototype = {
    call$1(module) {
      return module.get$variables();
    },
    $signature: 292,
  };
  Q._EnvironmentModule__EnvironmentModule_closure12.prototype = {
    call$1(module) {
      return module.get$variableNodes();
    },
    $signature: 293,
  };
  Q._EnvironmentModule__EnvironmentModule_closure13.prototype = {
    call$1(module) {
      return module.get$functions(module);
    },
    $signature: 199,
  };
  Q._EnvironmentModule__EnvironmentModule_closure14.prototype = {
    call$1(module) {
      return module.get$mixins();
    },
    $signature: 199,
  };
  Q._EnvironmentModule__EnvironmentModule_closure15.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 94,
  };
  Q._EnvironmentModule__EnvironmentModule_closure16.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsExtensions();
    },
    $signature: 94,
  };
  E._EvaluateVisitor1.prototype = {
    _EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap1(
      functions,
      importCache,
      logger,
      nodeImporter,
      quietDeps,
      sourceMap
    ) {
      var t2,
        metaModule,
        t3,
        _i,
        module,
        $function,
        t4,
        _this = this,
        _s20_ = '$name, $module: null',
        _s9_ = 'sass:meta',
        t1 = type$.JSArray_AsyncBuiltInCallable_2,
        metaFunctions = H._setArrayType(
          [
            Q.BuiltInCallable$function0(
              'global-variable-exists',
              _s20_,
              new E._EvaluateVisitor_closure19(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'variable-exists',
              '$name',
              new E._EvaluateVisitor_closure20(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'function-exists',
              _s20_,
              new E._EvaluateVisitor_closure21(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'mixin-exists',
              _s20_,
              new E._EvaluateVisitor_closure22(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'content-exists',
              '',
              new E._EvaluateVisitor_closure23(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'module-variables',
              '$module',
              new E._EvaluateVisitor_closure24(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'module-functions',
              '$module',
              new E._EvaluateVisitor_closure25(_this),
              _s9_
            ),
            Q.BuiltInCallable$function0(
              'get-function',
              '$name, $css: false, $module: null',
              new E._EvaluateVisitor_closure26(_this),
              _s9_
            ),
            new S.AsyncBuiltInCallable0(
              'call',
              L.ScssParser$0(
                '@function call($function, $args...) {',
                null,
                _s9_
              ).parseArgumentDeclaration$0(),
              new E._EvaluateVisitor_closure27(_this)
            ),
          ],
          t1
        ),
        metaMixins = H._setArrayType(
          [
            S.AsyncBuiltInCallable$mixin0(
              'load-css',
              '$url, $with: null',
              new E._EvaluateVisitor_closure28(_this),
              _s9_
            ),
          ],
          t1
        );
      t1 = type$.AsyncBuiltInCallable_2;
      t2 = P.List_List$of($.$get$global6(), true, t1);
      C.JSArray_methods.addAll$1(t2, metaFunctions);
      metaModule = Q.BuiltInModule$0('meta', t2, metaMixins, null, t1);
      for (
        t1 = P.List_List$of(
          $.$get$coreModules0(),
          true,
          type$.BuiltInModule_AsyncBuiltInCallable_2
        ),
          t1.push(metaModule),
          t2 = t1.length,
          t3 = _this._async_evaluate0$_builtInModules,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        module = t1[_i];
        t3.$indexSet(0, module.url, module);
      }
      t1 = H._setArrayType([], type$.JSArray_AsyncCallable_2);
      C.JSArray_methods.addAll$1(t1, functions);
      C.JSArray_methods.addAll$1(t1, $.$get$globalFunctions0());
      C.JSArray_methods.addAll$1(t1, metaFunctions);
      for (
        t2 = t1.length, t3 = _this._async_evaluate0$_builtInFunctions, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        $function = t1[_i];
        t4 = J.get$name$x($function);
        t3.$indexSet(0, H.stringReplaceAllUnchecked(t4, '_', '-'), $function);
      }
    },
    run$2(importer, node) {
      return this.run$body$_EvaluateVisitor0(importer, node);
    },
    run$body$_EvaluateVisitor0(importer, node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.EvaluateResult_2),
        $async$returnValue,
        $async$self = this;
      var $async$run$2 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._async_evaluate0$_withWarnCallback$1$2(
                node,
                new E._EvaluateVisitor_run_closure1(
                  $async$self,
                  node,
                  importer
                ),
                type$.FutureOr_EvaluateResult_2
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$run$2, $async$completer);
    },
    _async_evaluate0$_withWarnCallback$1$2(nodeWithSpan, callback, $T) {
      return N.withWarnCallback0(
        new E._EvaluateVisitor__withWarnCallback_closure1(this, nodeWithSpan),
        callback,
        $T
      );
    },
    _async_evaluate0$_assertInModule$1$2(value, $name) {
      if (value != null) return value;
      throw H.wrapException(
        P.StateError$("Can't access " + $name + ' outside of a module.')
      );
    },
    _async_evaluate0$_assertInModule$2(value, $name) {
      return this._async_evaluate0$_assertInModule$1$2(
        value,
        $name,
        type$.dynamic
      );
    },
    _async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      baseUrl,
      configuration,
      namesInErrors
    ) {
      return this._loadModule$body$_EvaluateVisitor0(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        baseUrl,
        configuration,
        namesInErrors
      );
    },
    _async_evaluate0$_loadModule$5$configuration(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      configuration
    ) {
      return this._async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        configuration,
        false
      );
    },
    _async_evaluate0$_loadModule$4(url, stackFrame, nodeWithSpan, callback) {
      return this._async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors(
        url,
        stackFrame,
        nodeWithSpan,
        callback,
        null,
        null,
        false
      );
    },
    _loadModule$body$_EvaluateVisitor0(
      url,
      stackFrame,
      nodeWithSpan,
      callback,
      baseUrl,
      configuration,
      namesInErrors
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1,
        builtInModule;
      var $async$_async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                builtInModule = $async$self._async_evaluate0$_builtInModules.$index(
                  0,
                  url
                );
                $async$goto = builtInModule != null ? 3 : 4;
                break;
              case 3:
                // then
                if (configuration instanceof A.ExplicitConfiguration0) {
                  t1 = namesInErrors
                    ? 'Built-in module ' +
                      url.toString$0(0) +
                      " can't be configured."
                    : "Built-in modules can't be configured.";
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      t1,
                      configuration.nodeWithSpan.get$span()
                    )
                  );
                }
                $async$goto = 5;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_addExceptionSpanAsync$1$2(
                    nodeWithSpan,
                    new E._EvaluateVisitor__loadModule_closure3(
                      callback,
                      builtInModule
                    ),
                    type$.void
                  ),
                  $async$_async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors
                );
              case 5:
                // returning from await.
                // goto return
                $async$goto = 1;
                break;
              case 4:
                // join
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_withStackFrame$1$3(
                    stackFrame,
                    nodeWithSpan,
                    new E._EvaluateVisitor__loadModule_closure4(
                      $async$self,
                      url,
                      nodeWithSpan,
                      baseUrl,
                      namesInErrors,
                      configuration,
                      callback
                    ),
                    type$.Null
                  ),
                  $async$_async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors
                );
              case 6:
              // returning from await.
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors,
        $async$completer
      );
    },
    _async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan(
      importer,
      stylesheet,
      configuration,
      namesInErrors,
      nodeWithSpan
    ) {
      return this._execute$body$_EvaluateVisitor0(
        importer,
        stylesheet,
        configuration,
        namesInErrors,
        nodeWithSpan
      );
    },
    _async_evaluate0$_execute$2(importer, stylesheet) {
      return this._async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan(
        importer,
        stylesheet,
        null,
        false,
        null
      );
    },
    _execute$body$_EvaluateVisitor0(
      importer,
      stylesheet,
      configuration,
      namesInErrors,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.Module_AsyncCallable_2
        ),
        $async$returnValue,
        $async$self = this,
        currentConfiguration,
        message,
        t2,
        existingSpan,
        configurationSpan,
        environment,
        css,
        extensionStore,
        module,
        url,
        t1,
        alreadyLoaded;
      var $async$_async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                url = stylesheet.span.file.url;
                t1 = $async$self._async_evaluate0$_modules;
                alreadyLoaded = t1.$index(0, url);
                if (alreadyLoaded != null) {
                  t1 = configuration == null;
                  currentConfiguration = t1
                    ? $async$self._async_evaluate0$_configuration
                    : configuration;
                  if (
                    currentConfiguration instanceof A.ExplicitConfiguration0
                  ) {
                    message = namesInErrors
                      ? $.$get$context().prettyUri$1(url) + string$.x20was_a
                      : string$.This_mw;
                    t2 = $async$self._async_evaluate0$_moduleNodes.$index(
                      0,
                      url
                    );
                    existingSpan = t2 == null ? null : t2.get$span();
                    configurationSpan = t1
                      ? currentConfiguration.nodeWithSpan.get$span()
                      : null;
                    t1 = P.LinkedHashMap_LinkedHashMap$_empty(
                      type$.FileSpan,
                      type$.String
                    );
                    if (existingSpan != null)
                      t1.$indexSet(0, existingSpan, 'original load');
                    if (configurationSpan != null)
                      t1.$indexSet(0, configurationSpan, 'configuration');
                    throw H.wrapException(
                      t1.get$isEmpty(t1)
                        ? $async$self._async_evaluate0$_exception$1(message)
                        : $async$self._async_evaluate0$_multiSpanException$3(
                            message,
                            'new load',
                            t1
                          )
                    );
                  }
                  $async$returnValue = alreadyLoaded;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                environment = Q.AsyncEnvironment$0();
                css = H._Cell$();
                t2 = type$.SimpleSelector_2;
                extensionStore = new X.ExtensionStore0(
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    t2,
                    type$.Set_ModifiableCssValue_SelectorList_2
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    t2,
                    type$.Map_ComplexSelector_Extension_2
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    t2,
                    type$.List_Extension
                  ),
                  P.LinkedHashMap_LinkedHashMap$_empty(
                    type$.ModifiableCssValue_SelectorList_2,
                    type$.List_CssMediaQuery_2
                  ),
                  P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(
                    t2,
                    type$.int
                  ),
                  new P._LinkedIdentityHashSet(
                    type$._LinkedIdentityHashSet_ComplexSelector_2
                  ),
                  C.ExtendMode_normal0
                );
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_withEnvironment$1$2(
                    environment,
                    new E._EvaluateVisitor__execute_closure1(
                      $async$self,
                      importer,
                      stylesheet,
                      extensionStore,
                      configuration,
                      css
                    ),
                    type$.Null
                  ),
                  $async$_async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan
                );
              case 3:
                // returning from await.
                module = environment.toModule$2(
                  css._readLocal$0(),
                  extensionStore
                );
                if (url != null) {
                  t1.$indexSet(0, url, module);
                  if (nodeWithSpan != null)
                    $async$self._async_evaluate0$_moduleNodes.$indexSet(
                      0,
                      url,
                      nodeWithSpan
                    );
                }
                $async$returnValue = module;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan,
        $async$completer
      );
    },
    _async_evaluate0$_addOutOfOrderImports$0() {
      var t1,
        t2,
        _this = this,
        _s5_ = '_root',
        _s13_ = '_endOfImports',
        outOfOrderImports = _this._async_evaluate0$_outOfOrderImports;
      if (outOfOrderImports == null)
        return _this._async_evaluate0$_assertInModule$2(
          _this._async_evaluate0$__root,
          _s5_
        ).children;
      t1 = _this._async_evaluate0$_assertInModule$2(
        _this._async_evaluate0$__root,
        _s5_
      ).children;
      t1 = P.List_List$of(
        H.SubListIterable$(
          t1,
          0,
          H.checkNotNullable(
            _this._async_evaluate0$_assertInModule$2(
              _this._async_evaluate0$__endOfImports,
              _s13_
            ),
            'count',
            type$.int
          ),
          t1.$ti._eval$1('ListMixin.E')
        ),
        true,
        type$.ModifiableCssNode_2
      );
      C.JSArray_methods.addAll$1(t1, outOfOrderImports);
      t2 = _this._async_evaluate0$_assertInModule$2(
        _this._async_evaluate0$__root,
        _s5_
      ).children;
      C.JSArray_methods.addAll$1(
        t1,
        H.SubListIterable$(
          t2,
          _this._async_evaluate0$_assertInModule$2(
            _this._async_evaluate0$__endOfImports,
            _s13_
          ),
          null,
          t2.$ti._eval$1('ListMixin.E')
        )
      );
      return t1;
    },
    _async_evaluate0$_combineCss$2$clone(root, clone) {
      var selectors,
        iterator,
        unsatisfiedExtension,
        sortedModules,
        t1,
        imports,
        css,
        t2,
        t3,
        statements,
        index,
        _this = this;
      if (
        !C.JSArray_methods.any$1(
          root.get$upstream(),
          new E._EvaluateVisitor__combineCss_closure5()
        )
      ) {
        selectors = root.get$extensionStore().get$simpleSelectors();
        iterator = J.get$iterator$ax(
          root
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new E._EvaluateVisitor__combineCss_closure6(selectors)
            )
        );
        unsatisfiedExtension = iterator.moveNext$0()
          ? iterator.get$current()
          : null;
        if (unsatisfiedExtension != null)
          _this._async_evaluate0$_throwForUnsatisfiedExtension$1(
            unsatisfiedExtension
          );
        return root.get$css(root);
      }
      sortedModules = _this._async_evaluate0$_topologicalModules$1(root);
      if (clone) {
        t1 = sortedModules.$ti._eval$1(
          'MappedListIterable<ListMixin.E,Module0<AsyncCallable0>>'
        );
        sortedModules = P.List_List$of(
          new H.MappedListIterable(
            sortedModules,
            new E._EvaluateVisitor__combineCss_closure7(),
            t1
          ),
          true,
          t1._eval$1('ListIterable.E')
        );
      }
      _this._async_evaluate0$_extendModules$1(sortedModules);
      t1 = type$.JSArray_CssNode_2;
      imports = H._setArrayType([], t1);
      css = H._setArrayType([], t1);
      for (
        t1 = J.get$reversed$ax(sortedModules),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      ) {
        t3 = t2._as(t1.__internal$_current);
        t3 = t3.get$css(t3);
        statements = t3.get$children(t3);
        index = _this._async_evaluate0$_indexAfterImports$1(statements);
        t3 = J.getInterceptor$ax(statements);
        C.JSArray_methods.addAll$1(
          imports,
          t3.getRange$2(statements, 0, index)
        );
        C.JSArray_methods.addAll$1(
          css,
          t3.getRange$2(statements, index, t3.get$length(statements))
        );
      }
      return new V.CssStylesheet0(
        new P.UnmodifiableListView(
          C.JSArray_methods.$add(imports, css),
          type$.UnmodifiableListView_CssNode_2
        ),
        root.get$css(root).get$span()
      );
    },
    _async_evaluate0$_combineCss$1(root) {
      return this._async_evaluate0$_combineCss$2$clone(root, false);
    },
    _async_evaluate0$_extendModules$1(sortedModules) {
      var t1,
        t2,
        originalSelectors,
        $self,
        t3,
        t4,
        _i,
        url,
        downstreamExtensionStores = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.Uri,
          type$.List_ExtensionStore_2
        ),
        unsatisfiedExtensions = new P._LinkedIdentityHashSet(
          type$._LinkedIdentityHashSet_Extension_2
        );
      for (t1 = J.get$iterator$ax(sortedModules); t1.moveNext$0(); ) {
        t2 = t1.get$current();
        originalSelectors = t2
          .get$extensionStore()
          .get$simpleSelectors()
          .toSet$0(0);
        unsatisfiedExtensions.addAll$1(
          0,
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              new E._EvaluateVisitor__extendModules_closure3(originalSelectors)
            )
        );
        $self = downstreamExtensionStores.$index(0, t2.get$url());
        t3 = t2.get$extensionStore().get$addExtensions();
        if ($self != null) t3.call$1($self);
        t3 = t2.get$extensionStore();
        if (t3.get$isEmpty(t3)) continue;
        for (
          t3 = t2.get$upstream(), t4 = t3.length, _i = 0;
          _i < t3.length;
          t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i
        ) {
          url = t3[_i].get$url();
          if (url == null) continue;
          J.add$1$ax(
            downstreamExtensionStores.putIfAbsent$2(
              url,
              new E._EvaluateVisitor__extendModules_closure4()
            ),
            t2.get$extensionStore()
          );
        }
        unsatisfiedExtensions.removeAll$1(
          t2
            .get$extensionStore()
            .extensionsWhereTarget$1(
              originalSelectors.get$contains(originalSelectors)
            )
        );
      }
      if (unsatisfiedExtensions._collection$_length !== 0)
        this._async_evaluate0$_throwForUnsatisfiedExtension$1(
          unsatisfiedExtensions.get$first(unsatisfiedExtensions)
        );
    },
    _async_evaluate0$_throwForUnsatisfiedExtension$1(extension) {
      throw H.wrapException(
        E.SassException$0(
          string$.The_ta +
            extension.target.toString$0(0) +
            ' !optional" to avoid this error.',
          extension.span
        )
      );
    },
    _async_evaluate0$_topologicalModules$1(root) {
      var t1 = type$.Module_AsyncCallable_2,
        sorted = Q.QueueList$(null, t1);
      new E._EvaluateVisitor__topologicalModules_visitModule1(
        P.LinkedHashSet_LinkedHashSet$_empty(t1),
        sorted
      ).call$1(root);
      return sorted;
    },
    _async_evaluate0$_indexAfterImports$1(statements) {
      var t1, t2, t3, lastImport, i, statement;
      for (
        t1 = J.getInterceptor$asx(statements),
          t2 = type$.CssComment_2,
          t3 = type$.CssImport_2,
          lastImport = -1,
          i = 0;
        i < t1.get$length(statements);
        ++i
      ) {
        statement = t1.$index(statements, i);
        if (t3._is(statement)) lastImport = i;
        else if (!t2._is(statement)) break;
      }
      return lastImport + 1;
    },
    visitStylesheet$1(node) {
      return this.visitStylesheet$body$_EvaluateVisitor0(node);
    },
    visitStylesheet$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i;
      var $async$visitStylesheet$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = node.children), (t2 = t1.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(
                t1[_i].accept$1($async$self),
                $async$visitStylesheet$1
              );
            case 6:
            // returning from await.
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitStylesheet$1, $async$completer);
    },
    visitAtRootRule$1(node) {
      return this.visitAtRootRule$body$_EvaluateVisitor0(node);
    },
    visitAtRootRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        grandparent,
        root,
        innerCopy,
        t2,
        outerCopy,
        copy,
        unparsedQuery,
        query,
        $parent,
        included,
        $async$temp1,
        $async$temp2;
      var $async$visitAtRootRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              unparsedQuery = node.query;
              $async$goto = unparsedQuery != null ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp1 = unparsedQuery;
              $async$temp2 = E;
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate0$_performInterpolation$2$warnForColor(
                  unparsedQuery,
                  true
                ),
                $async$visitAtRootRule$1
              );
            case 6:
              // returning from await.
              $async$result = $async$self._async_evaluate0$_adjustParseError$2(
                $async$temp1,
                new $async$temp2._EvaluateVisitor_visitAtRootRule_closure5(
                  $async$self,
                  $async$result
                )
              );
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$result = C.AtRootQuery_UsS0;
            case 4:
              // join
              query = $async$result;
              $parent = $async$self._async_evaluate0$_assertInModule$2(
                $async$self._async_evaluate0$__parent,
                '__parent'
              );
              included = H._setArrayType(
                [],
                type$.JSArray_ModifiableCssParentNode_2
              );
              for (
                t1 = type$.CssStylesheet_2;
                !t1._is($parent);
                $parent = grandparent
              ) {
                if (!query.excludes$1($parent)) included.push($parent);
                grandparent = $parent._node2$_parent;
                if (grandparent == null)
                  throw H.wrapException(P.StateError$(string$.CssNod));
              }
              root = $async$self._async_evaluate0$_trimIncluded$1(included);
              $async$goto =
                root ===
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                )
                  ? 7
                  : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return P._asyncAwait(
                $async$self._async_evaluate0$_environment.scope$1$2$when(
                  new E._EvaluateVisitor_visitAtRootRule_closure6(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  type$.Null
                ),
                $async$visitAtRootRule$1
              );
            case 9:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
              if (included.length !== 0) {
                innerCopy = C.JSArray_methods.get$first(
                  included
                ).copyWithoutChildren$0();
                for (
                  t1 = H.SubListIterable$(
                    included,
                    1,
                    null,
                    type$.ModifiableCssParentNode_2
                  ),
                    t1 = new H.ListIterator(t1, t1.get$length(t1)),
                    t2 = H._instanceType(t1)._precomputed1,
                    outerCopy = innerCopy;
                  t1.moveNext$0();
                  outerCopy = copy
                ) {
                  copy = t2._as(t1.__internal$_current).copyWithoutChildren$0();
                  copy.addChild$1(outerCopy);
                }
                root.addChild$1(outerCopy);
              } else innerCopy = root;
              $async$goto = 10;
              return P._asyncAwait(
                $async$self
                  ._async_evaluate0$_scopeForAtRoot$4(
                    node,
                    innerCopy,
                    query,
                    included
                  )
                  .call$1(
                    new E._EvaluateVisitor_visitAtRootRule_closure7(
                      $async$self,
                      node
                    )
                  ),
                $async$visitAtRootRule$1
              );
            case 10:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitAtRootRule$1, $async$completer);
    },
    _async_evaluate0$_trimIncluded$1(nodes) {
      var $parent,
        t1,
        innermostContiguous,
        i,
        t2,
        grandparent,
        root,
        _this = this,
        _null = null,
        _s5_ = '_root',
        _s22_ = ' to be an ancestor of ';
      if (nodes.length === 0)
        return _this._async_evaluate0$_assertInModule$2(
          _this._async_evaluate0$__root,
          _s5_
        );
      $parent = _this._async_evaluate0$_assertInModule$2(
        _this._async_evaluate0$__parent,
        '__parent'
      );
      for (
        t1 = nodes.length, innermostContiguous = _null, i = 0;
        i < t1;
        ++i, $parent = grandparent
      ) {
        for (
          ;
          (t2 = nodes[i]), $parent !== t2;
          innermostContiguous = _null, $parent = grandparent
        ) {
          grandparent = $parent._node2$_parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(
                'Expected ' +
                  t2.toString$0(0) +
                  _s22_ +
                  _this.toString$0(0) +
                  '.',
                _null
              )
            );
        }
        if (innermostContiguous == null) innermostContiguous = i;
        grandparent = $parent._node2$_parent;
        if (grandparent == null)
          throw H.wrapException(
            P.ArgumentError$(
              'Expected ' +
                t2.toString$0(0) +
                _s22_ +
                _this.toString$0(0) +
                '.',
              _null
            )
          );
      }
      if (
        $parent !==
        _this._async_evaluate0$_assertInModule$2(
          _this._async_evaluate0$__root,
          _s5_
        )
      )
        return _this._async_evaluate0$_assertInModule$2(
          _this._async_evaluate0$__root,
          _s5_
        );
      innermostContiguous.toString;
      root = nodes[innermostContiguous];
      C.JSArray_methods.removeRange$2(nodes, innermostContiguous, nodes.length);
      return root;
    },
    _async_evaluate0$_scopeForAtRoot$4(node, newParent, query, included) {
      var _this = this,
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure11(
          _this,
          newParent,
          node
        ),
        t1 = query._at_root_query0$_all || query._at_root_query0$_rule;
      if (t1 !== query.include)
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure12(_this, scope);
      if (
        _this._async_evaluate0$_mediaQueries != null &&
        query.excludesName$1('media')
      )
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure13(_this, scope);
      if (
        _this._async_evaluate0$_inKeyframes &&
        query.excludesName$1('keyframes')
      )
        scope = new E._EvaluateVisitor__scopeForAtRoot_closure14(_this, scope);
      return _this._async_evaluate0$_inUnknownAtRule &&
        !C.JSArray_methods.any$1(
          included,
          new E._EvaluateVisitor__scopeForAtRoot_closure15()
        )
        ? new E._EvaluateVisitor__scopeForAtRoot_closure16(_this, scope)
        : scope;
    },
    visitContentBlock$1(node) {
      return H.throwExpression(P.UnsupportedError$(string$.Evalua));
    },
    visitContentRule$1(node) {
      return this.visitContentRule$body$_EvaluateVisitor0(node);
    },
    visitContentRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        $content;
      var $async$visitContentRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $content =
                $async$self._async_evaluate0$_environment
                  ._async_environment0$_content;
              if ($content == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_runUserDefinedCallable$1$4(
                  node.$arguments,
                  $content,
                  node,
                  new E._EvaluateVisitor_visitContentRule_closure1(
                    $async$self,
                    $content
                  ),
                  type$.Null
                ),
                $async$visitContentRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitContentRule$1, $async$completer);
    },
    visitDebugRule$1(node) {
      return this.visitDebugRule$body$_EvaluateVisitor0(node);
    },
    visitDebugRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        value,
        t1;
      var $async$visitDebugRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                node.expression.accept$1($async$self),
                $async$visitDebugRule$1
              );
            case 3:
              // returning from await.
              value = $async$result;
              t1 =
                value instanceof D.SassString0
                  ? value.text
                  : N.serializeValue(value, true, true);
              $async$self._async_evaluate0$_logger.debug$2(0, t1, node.span);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitDebugRule$1, $async$completer);
    },
    visitDeclaration$1(node) {
      return this.visitDeclaration$body$_EvaluateVisitor0(node);
    },
    visitDeclaration$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        $name,
        t2,
        cssValue,
        t3,
        t4,
        children,
        oldDeclarationName;
      var $async$visitDeclaration$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (
                ($async$self._async_evaluate0$_atRootExcludingStyleRule
                  ? null
                  : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot) ==
                  null &&
                !$async$self._async_evaluate0$_inUnknownAtRule &&
                !$async$self._async_evaluate0$_inKeyframes
              )
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Declarm,
                    node.span
                  )
                );
              t1 = node.name;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_interpolationToValue$2$warnForColor(
                  t1,
                  true
                ),
                $async$visitDeclaration$1
              );
            case 3:
              // returning from await.
              $name = $async$result;
              t2 = $async$self._async_evaluate0$_declarationName;
              if (t2 != null)
                $name = new F.CssValue0(
                  t2 + '-' + H.S($name.get$value($name)),
                  $name.get$span(),
                  type$.CssValue_String_2
                );
              t2 = node.value;
              $async$goto = 4;
              return P._asyncAwait(
                X.NullableExtension_andThen0(
                  t2,
                  new E._EvaluateVisitor_visitDeclaration_closure3($async$self)
                ),
                $async$visitDeclaration$1
              );
            case 4:
              // returning from await.
              cssValue = $async$result;
              t3 = cssValue != null;
              if (t3)
                t4 =
                  !cssValue.get$value(cssValue).get$isBlank() ||
                  cssValue.get$value(cssValue).get$asList().length === 0;
              else t4 = false;
              if (t4) {
                t3 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                );
                t1 = C.JSString_methods.startsWith$1(
                  t1.get$initialPlain(),
                  '--'
                );
                if ($async$self._async_evaluate0$_sourceMap) {
                  t2 = X.NullableExtension_andThen0(
                    t2,
                    $async$self.get$_async_evaluate0$_expressionNode()
                  );
                  t2 = t2 == null ? null : t2.get$span();
                } else t2 = null;
                t3.addChild$1(
                  L.ModifiableCssDeclaration$0(
                    $name,
                    cssValue,
                    node.span,
                    t1,
                    t2
                  )
                );
              } else if (J.startsWith$1$s($name.get$value($name), '--') && t3)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    'Custom property values may not be empty.',
                    cssValue.get$span()
                  )
                );
              children = node.children;
              $async$goto = children != null ? 5 : 6;
              break;
            case 5:
              // then
              oldDeclarationName =
                $async$self._async_evaluate0$_declarationName;
              $async$self._async_evaluate0$_declarationName = $name.get$value(
                $name
              );
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate0$_environment.scope$1$2$when(
                  new E._EvaluateVisitor_visitDeclaration_closure4(
                    $async$self,
                    children
                  ),
                  node.hasDeclarations,
                  type$.Null
                ),
                $async$visitDeclaration$1
              );
            case 7:
              // returning from await.
              $async$self._async_evaluate0$_declarationName = oldDeclarationName;
            case 6:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitDeclaration$1, $async$completer);
    },
    visitEachRule$1(node) {
      return this.visitEachRule$body$_EvaluateVisitor0(node);
    },
    visitEachRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        list,
        nodeWithSpan,
        setVariables;
      var $async$visitEachRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.list;
              $async$goto = 3;
              return P._asyncAwait(
                t1.accept$1($async$self),
                $async$visitEachRule$1
              );
            case 3:
              // returning from await.
              list = $async$result;
              nodeWithSpan = $async$self._async_evaluate0$_expressionNode$1(t1);
              setVariables =
                node.variables.length === 1
                  ? new E._EvaluateVisitor_visitEachRule_closure5(
                      $async$self,
                      node,
                      nodeWithSpan
                    )
                  : new E._EvaluateVisitor_visitEachRule_closure6(
                      $async$self,
                      node,
                      nodeWithSpan
                    );
              $async$returnValue = $async$self._async_evaluate0$_environment.scope$1$2$semiGlobal(
                new E._EvaluateVisitor_visitEachRule_closure7(
                  $async$self,
                  list,
                  setVariables,
                  node
                ),
                true,
                type$.nullable_Value_2
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitEachRule$1, $async$completer);
    },
    _async_evaluate0$_setMultipleVariables$3(variables, value, nodeWithSpan) {
      var i,
        list = value.get$asList(),
        t1 = variables.length,
        minLength = Math.min(t1, list.length);
      for (i = 0; i < minLength; ++i)
        this._async_evaluate0$_environment.setLocalVariable$3(
          variables[i],
          this._async_evaluate0$_withoutSlash$2(list[i], nodeWithSpan),
          nodeWithSpan
        );
      for (i = minLength; i < t1; ++i)
        this._async_evaluate0$_environment.setLocalVariable$3(
          variables[i],
          C.C__SassNull,
          nodeWithSpan
        );
    },
    visitErrorRule$1(node) {
      return this.visitErrorRule$body$_EvaluateVisitor0(node);
    },
    visitErrorRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$visitErrorRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = H;
              $async$temp2 = J;
              $async$goto = 2;
              return P._asyncAwait(
                node.expression.accept$1($async$self),
                $async$visitErrorRule$1
              );
            case 2:
              // returning from await.
              throw $async$temp1.wrapException(
                $async$self._async_evaluate0$_exception$2(
                  $async$temp2.toString$0$($async$result),
                  node.span
                )
              );
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitErrorRule$1, $async$completer);
    },
    visitExtendRule$1(node) {
      return this.visitExtendRule$body$_EvaluateVisitor0(node);
    },
    visitExtendRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        targetText,
        t1,
        t2,
        t3,
        _i,
        t4,
        styleRule;
      var $async$visitExtendRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              styleRule = $async$self._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
              if (
                styleRule == null ||
                $async$self._async_evaluate0$_declarationName != null
              )
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.x40exten,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_interpolationToValue$2$warnForColor(
                  node.selector,
                  true
                ),
                $async$visitExtendRule$1
              );
            case 3:
              // returning from await.
              targetText = $async$result;
              for (
                t1 = $async$self._async_evaluate0$_adjustParseError$2(
                  targetText,
                  new E._EvaluateVisitor_visitExtendRule_closure1(
                    $async$self,
                    targetText
                  )
                ).components,
                  t2 = t1.length,
                  t3 = type$.CompoundSelector_2,
                  _i = 0;
                _i < t2;
                ++_i
              ) {
                t4 = t1[_i].components;
                if (
                  t4.length !== 1 ||
                  !(
                    C.JSArray_methods.get$first(t4) instanceof
                    X.CompoundSelector0
                  )
                )
                  throw H.wrapException(
                    E.SassFormatException$0(
                      'complex selectors may not be extended.',
                      targetText.get$span()
                    )
                  );
                t4 = t3._as(C.JSArray_methods.get$first(t4)).components;
                if (t4.length !== 1)
                  throw H.wrapException(
                    E.SassFormatException$0(
                      string$.compou +
                        C.JSArray_methods.join$1(t4, ', ') +
                        string$.x60_inst,
                      targetText.get$span()
                    )
                  );
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__extensionStore,
                    '_extensionStore'
                  )
                  .addExtension$4(
                    styleRule.selector,
                    C.JSArray_methods.get$first(t4),
                    node,
                    $async$self._async_evaluate0$_mediaQueries
                  );
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitExtendRule$1, $async$completer);
    },
    visitAtRule$1(node) {
      return this.visitAtRule$body$_EvaluateVisitor0(node);
    },
    visitAtRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        $name,
        value,
        children,
        wasInKeyframes,
        wasInUnknownAtRule;
      var $async$visitAtRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.At_rul,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_interpolationToValue$1(node.name),
                $async$visitAtRule$1
              );
            case 3:
              // returning from await.
              $name = $async$result;
              $async$goto = 4;
              return P._asyncAwait(
                X.NullableExtension_andThen0(
                  node.value,
                  new E._EvaluateVisitor_visitAtRule_closure5($async$self)
                ),
                $async$visitAtRule$1
              );
            case 4:
              // returning from await.
              value = $async$result;
              children = node.children;
              if (children == null) {
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__parent,
                    '__parent'
                  )
                  .addChild$1(
                    U.ModifiableCssAtRule$0($name, node.span, true, value)
                  );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate0$_inKeyframes;
              wasInUnknownAtRule =
                $async$self._async_evaluate0$_inUnknownAtRule;
              if (B.unvendor0($name.get$value($name)) === 'keyframes')
                $async$self._async_evaluate0$_inKeyframes = true;
              else $async$self._async_evaluate0$_inUnknownAtRule = true;
              $async$goto = 5;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssAtRule$0($name, node.span, false, value),
                  new E._EvaluateVisitor_visitAtRule_closure6(
                    $async$self,
                    children
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitAtRule_closure7(),
                  type$.ModifiableCssAtRule_2,
                  type$.Null
                ),
                $async$visitAtRule$1
              );
            case 5:
              // returning from await.
              $async$self._async_evaluate0$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate0$_inKeyframes = wasInKeyframes;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitAtRule$1, $async$completer);
    },
    visitForRule$1(node) {
      return this.visitForRule$body$_EvaluateVisitor0(node);
    },
    visitForRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        fromNumber,
        t4,
        toNumber,
        from,
        to,
        direction;
      var $async$visitForRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = node.from;
              t3 = type$.SassNumber_2;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_addExceptionSpanAsync$1$2(
                  t2,
                  new E._EvaluateVisitor_visitForRule_closure9(
                    $async$self,
                    node
                  ),
                  t3
                ),
                $async$visitForRule$1
              );
            case 3:
              // returning from await.
              fromNumber = $async$result;
              t4 = node.to;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._async_evaluate0$_addExceptionSpanAsync$1$2(
                  t4,
                  new E._EvaluateVisitor_visitForRule_closure10(
                    $async$self,
                    node
                  ),
                  t3
                ),
                $async$visitForRule$1
              );
            case 4:
              // returning from await.
              toNumber = $async$result;
              from = $async$self._async_evaluate0$_addExceptionSpan$2(
                t2,
                new E._EvaluateVisitor_visitForRule_closure11(fromNumber)
              );
              to = t1.to = $async$self._async_evaluate0$_addExceptionSpan$2(
                t4,
                new E._EvaluateVisitor_visitForRule_closure12(
                  toNumber,
                  fromNumber
                )
              );
              direction = from > to ? -1 : 1;
              if (
                from === (!node.isExclusive ? (t1.to = to + direction) : to)
              ) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self._async_evaluate0$_environment.scope$1$2$semiGlobal(
                new E._EvaluateVisitor_visitForRule_closure13(
                  t1,
                  $async$self,
                  node,
                  from,
                  direction,
                  fromNumber
                ),
                true,
                type$.nullable_Value_2
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitForRule$1, $async$completer);
    },
    visitForwardRule$1(node) {
      return this.visitForwardRule$body$_EvaluateVisitor0(node);
    },
    visitForwardRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        newConfiguration,
        _i,
        variable,
        oldConfiguration,
        adjustedConfiguration,
        t1,
        t2,
        t3;
      var $async$visitForwardRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldConfiguration = $async$self._async_evaluate0$_configuration;
              adjustedConfiguration = oldConfiguration.throughForward$1(node);
              t1 = node.configuration;
              t2 = t1.length;
              t3 = node.url;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate0$_addForwardConfiguration$2(
                  adjustedConfiguration,
                  node
                ),
                $async$visitForwardRule$1
              );
            case 6:
              // returning from await.
              newConfiguration = $async$result;
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate0$_loadModule$5$configuration(
                  t3,
                  '@forward',
                  node,
                  new E._EvaluateVisitor_visitForwardRule_closure3(
                    $async$self,
                    node
                  ),
                  newConfiguration
                ),
                $async$visitForwardRule$1
              );
            case 7:
              // returning from await.
              t3 = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
              for (_i = 0; _i < t2; ++_i) {
                variable = t1[_i];
                if (!variable.isGuarded) t3.add$1(0, variable.name);
              }
              $async$self._async_evaluate0$_removeUsedConfiguration$3$except(
                adjustedConfiguration,
                newConfiguration,
                t3
              );
              $async$self._async_evaluate0$_assertConfigurationIsEmpty$1(
                newConfiguration
              );
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$self._async_evaluate0$_configuration = adjustedConfiguration;
              $async$goto = 8;
              return P._asyncAwait(
                $async$self._async_evaluate0$_loadModule$4(
                  t3,
                  '@forward',
                  node,
                  new E._EvaluateVisitor_visitForwardRule_closure4(
                    $async$self,
                    node
                  )
                ),
                $async$visitForwardRule$1
              );
            case 8:
              // returning from await.
              $async$self._async_evaluate0$_configuration = oldConfiguration;
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitForwardRule$1, $async$completer);
    },
    _async_evaluate0$_addForwardConfiguration$2(configuration, node) {
      return this._addForwardConfiguration$body$_EvaluateVisitor0(
        configuration,
        node
      );
    },
    _addForwardConfiguration$body$_EvaluateVisitor0(configuration, node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Configuration_2),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        _i,
        variable,
        t4,
        t5,
        variableNodeWithSpan,
        t1,
        newValues,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$_async_evaluate0$_addForwardConfiguration$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = configuration._configuration$_values;
                newValues = P.LinkedHashMap_LinkedHashMap$of(
                  new P.UnmodifiableMapView(
                    t1,
                    type$.UnmodifiableMapView_String_ConfiguredValue_2
                  ),
                  type$.String,
                  type$.ConfiguredValue_2
                );
                (t2 = node.configuration), (t3 = t2.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t3)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                variable = t2[_i];
                if (variable.isGuarded) {
                  t4 = variable.name;
                  t5 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, t4);
                  if (t5 != null && !t5.value.$eq(0, C.C__SassNull)) {
                    newValues.$indexSet(0, t4, t5);
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                }
                t4 = variable.expression;
                variableNodeWithSpan = $async$self._async_evaluate0$_expressionNode$1(
                  t4
                );
                $async$temp1 = newValues;
                $async$temp2 = variable.name;
                $async$temp3 = Z;
                $async$goto = 6;
                return P._asyncAwait(
                  t4.accept$1($async$self),
                  $async$_async_evaluate0$_addForwardConfiguration$2
                );
              case 6:
                // returning from await.
                $async$temp1.$indexSet(
                  0,
                  $async$temp2,
                  new $async$temp3.ConfiguredValue0(
                    $async$self._async_evaluate0$_withoutSlash$2(
                      $async$result,
                      variableNodeWithSpan
                    ),
                    variable.span,
                    variableNodeWithSpan
                  )
                );
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                if (
                  configuration instanceof A.ExplicitConfiguration0 ||
                  t1.get$isEmpty(t1)
                ) {
                  $async$returnValue = new A.ExplicitConfiguration0(
                    node,
                    newValues
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  $async$returnValue = new A.Configuration0(newValues);
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_addForwardConfiguration$2,
        $async$completer
      );
    },
    _async_evaluate0$_removeUsedConfiguration$3$except(
      upstream,
      downstream,
      except
    ) {
      var t1, t2, t3, t4, _i, $name;
      for (
        t1 = upstream._configuration$_values,
          t2 = J.toList$0$ax(t1.get$keys(t1)),
          t3 = t2.length,
          t4 = downstream._configuration$_values,
          _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      ) {
        $name = t2[_i];
        if (except.contains$1(0, $name)) continue;
        if (!t4.containsKey$1($name))
          if (!t1.get$isEmpty(t1)) t1.remove$1(0, $name);
      }
    },
    _async_evaluate0$_assertConfigurationIsEmpty$2$nameInError(
      configuration,
      nameInError
    ) {
      var t1, entry;
      if (!(configuration instanceof A.ExplicitConfiguration0)) return;
      t1 = configuration._configuration$_values;
      if (t1.get$isEmpty(t1)) return;
      t1 = t1.get$entries(t1);
      entry = t1.get$first(t1);
      t1 = nameInError
        ? '$' + H.S(entry.key) + string$.x20was_n
        : string$.This_v;
      throw H.wrapException(
        this._async_evaluate0$_exception$2(t1, entry.value.configurationSpan)
      );
    },
    _async_evaluate0$_assertConfigurationIsEmpty$1(configuration) {
      return this._async_evaluate0$_assertConfigurationIsEmpty$2$nameInError(
        configuration,
        false
      );
    },
    visitFunctionRule$1(node) {
      return this.visitFunctionRule$body$_EvaluateVisitor0(node);
    },
    visitFunctionRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        index,
        t4;
      var $async$visitFunctionRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate0$_environment;
              t2 = t1.closure$0();
              t3 = t1._async_environment0$_functions;
              index = t3.length - 1;
              t4 = node.name;
              t1._async_environment0$_functionIndices.$indexSet(0, t4, index);
              J.$indexSet$ax(
                t3[index],
                t4,
                new E.UserDefinedCallable0(
                  node,
                  t2,
                  type$.UserDefinedCallable_AsyncEnvironment_2
                )
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitFunctionRule$1, $async$completer);
    },
    visitIfRule$1(node) {
      return this.visitIfRule$body$_EvaluateVisitor0(node);
    },
    visitIfRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i,
        clauseToCheck,
        _box_0;
      var $async$visitIfRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              _box_0.clause = node.lastClause;
              (t1 = node.clauses), (t2 = t1.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              clauseToCheck = t1[_i];
              $async$goto = 6;
              return P._asyncAwait(
                clauseToCheck.expression.accept$1($async$self),
                $async$visitIfRule$1
              );
            case 6:
              // returning from await.
              if ($async$result.get$isTruthy()) {
                _box_0.clause = clauseToCheck;
                // goto after for
                $async$goto = 5;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              t1 = _box_0.clause;
              if (t1 == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate0$_environment.scope$1$3$semiGlobal$when(
                  new E._EvaluateVisitor_visitIfRule_closure1(
                    _box_0,
                    $async$self
                  ),
                  true,
                  t1.hasDeclarations,
                  type$.nullable_Value_2
                ),
                $async$visitIfRule$1
              );
            case 7:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIfRule$1, $async$completer);
    },
    visitImportRule$1(node) {
      return this.visitImportRule$body$_EvaluateVisitor0(node);
    },
    visitImportRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        _i,
        $import;
      var $async$visitImportRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = node.imports),
                (t2 = t1.length),
                (t3 = type$.StaticImport_2),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $import = t1[_i];
              $async$goto = $import instanceof B.DynamicImport0 ? 6 : 8;
              break;
            case 6:
              // then
              $async$goto = 9;
              return P._asyncAwait(
                $async$self._async_evaluate0$_visitDynamicImport$1($import),
                $async$visitImportRule$1
              );
            case 9:
              // returning from await.
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate0$_visitStaticImport$1(
                  t3._as($import)
                ),
                $async$visitImportRule$1
              );
            case 10:
            // returning from await.
            case 7:
            // join
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitImportRule$1, $async$completer);
    },
    _async_evaluate0$_visitDynamicImport$1($import) {
      return this._async_evaluate0$_withStackFrame$1$3(
        '@import',
        $import,
        new E._EvaluateVisitor__visitDynamicImport_closure1(this, $import),
        type$.void
      );
    },
    _async_evaluate0$_loadStylesheet$4$baseUrl$forImport(
      url,
      span,
      baseUrl,
      forImport
    ) {
      return this._loadStylesheet$body$_EvaluateVisitor0(
        url,
        span,
        baseUrl,
        forImport
      );
    },
    _async_evaluate0$_loadStylesheet$3$baseUrl(url, span, baseUrl) {
      return this._async_evaluate0$_loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        baseUrl,
        false
      );
    },
    _async_evaluate0$_loadStylesheet$3$forImport(url, span, forImport) {
      return this._async_evaluate0$_loadStylesheet$4$baseUrl$forImport(
        url,
        span,
        null,
        forImport
      );
    },
    _loadStylesheet$body$_EvaluateVisitor0(url, span, baseUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$._LoadedStylesheet_2
        ),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        importCache,
        tuple,
        isDependency,
        stylesheet,
        result,
        error,
        error0,
        message,
        t1,
        t2,
        t3,
        t4,
        exception,
        message0,
        $async$exception;
      var $async$_async_evaluate0$_loadStylesheet$4$baseUrl$forImport = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                baseUrl = baseUrl;
                $async$handler = 4;
                $async$self._async_evaluate0$_importSpan = span;
                importCache = $async$self._async_evaluate0$_importCache;
                $async$goto = importCache != null ? 7 : 9;
                break;
              case 7:
                // then
                if (baseUrl == null)
                  baseUrl = $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__stylesheet,
                    '_stylesheet'
                  ).span.file.url;
                $async$goto = 10;
                return P._asyncAwait(
                  importCache.canonicalize$4$baseImporter$baseUrl$forImport(
                    P.Uri_parse(url),
                    $async$self._async_evaluate0$_importer,
                    baseUrl,
                    forImport
                  ),
                  $async$_async_evaluate0$_loadStylesheet$4$baseUrl$forImport
                );
              case 10:
                // returning from await.
                tuple = $async$result;
                $async$goto = tuple != null ? 11 : 12;
                break;
              case 11:
                // then
                isDependency =
                  $async$self._async_evaluate0$_inDependency ||
                  tuple.item1 !== $async$self._async_evaluate0$_importer;
                t1 = tuple.item1;
                t2 = tuple.item2;
                t3 = tuple.item3;
                t4 = $async$self._async_evaluate0$_quietDeps && isDependency;
                $async$goto = 13;
                return P._asyncAwait(
                  importCache.importCanonical$4$originalUrl$quiet(
                    t1,
                    t2,
                    t3,
                    t4
                  ),
                  $async$_async_evaluate0$_loadStylesheet$4$baseUrl$forImport
                );
              case 13:
                // returning from await.
                stylesheet = $async$result;
                if (stylesheet != null) {
                  $async$self._async_evaluate0$_loadedUrls.add$1(
                    0,
                    tuple.item2
                  );
                  t1 = tuple.item1;
                  $async$returnValue = new E._LoadedStylesheet1(
                    stylesheet,
                    t1,
                    isDependency
                  );
                  $async$next = [1];
                  // goto finally
                  $async$goto = 5;
                  break;
                }
              case 12:
                // join
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = 14;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_importLikeNode$2(
                    url,
                    forImport
                  ),
                  $async$_async_evaluate0$_loadStylesheet$4$baseUrl$forImport
                );
              case 14:
                // returning from await.
                result = $async$result;
                if (result != null) {
                  t1 = $async$self._async_evaluate0$_loadedUrls;
                  X.NullableExtension_andThen0(
                    result.stylesheet.span.file.url,
                    t1.get$add(t1)
                  );
                  $async$returnValue = result;
                  $async$next = [1];
                  // goto finally
                  $async$goto = 5;
                  break;
                }
              case 8:
                // join
                if (C.JSString_methods.startsWith$1(url, 'package:') && true)
                  throw H.wrapException(string$.x22packa);
                else throw H.wrapException("Can't find stylesheet to import.");
                $async$next.push(6);
                // goto finally
                $async$goto = 5;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof E.SassException0) {
                  error = t1;
                  t1 = $async$self._async_evaluate0$_exception$2(
                    error._span_exception$_message,
                    error.get$span()
                  );
                  throw H.wrapException(t1);
                } else {
                  error0 = t1;
                  message = null;
                  try {
                    message = H._asString(J.get$message$x(error0));
                  } catch (exception) {
                    H.unwrapException($async$exception);
                    message0 = J.toString$0$(error0);
                    message = message0;
                  }
                  t1 = $async$self._async_evaluate0$_exception$1(message);
                  throw H.wrapException(t1);
                }
                $async$next.push(6);
                // goto finally
                $async$goto = 5;
                break;
              case 3:
                // uncaught
                $async$next = [2];
              case 5:
                // finally
                $async$handler = 2;
                $async$self._async_evaluate0$_importSpan = null;
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_loadStylesheet$4$baseUrl$forImport,
        $async$completer
      );
    },
    _async_evaluate0$_importLikeNode$2(originalUrl, forImport) {
      return this._importLikeNode$body$_EvaluateVisitor0(
        originalUrl,
        forImport
      );
    },
    _importLikeNode$body$_EvaluateVisitor0(originalUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable__LoadedStylesheet_2
        ),
        $async$returnValue,
        $async$self = this,
        result,
        contents,
        t2,
        url,
        t1;
      var $async$_async_evaluate0$_importLikeNode$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate0$_nodeImporter;
                t1.toString;
                $async$goto = 3;
                return P._asyncAwait(
                  t1.loadAsync$3(
                    originalUrl,
                    $async$self._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__stylesheet,
                      '_stylesheet'
                    ).span.file.url,
                    forImport
                  ),
                  $async$_async_evaluate0$_importLikeNode$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                if (result == null) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = J.getInterceptor$x(result);
                contents = t1.get$contents(result);
                t2 = t1.get$file(result);
                url = $.$get$context().toUri$1(t2).toString$0(0);
                t1 = t1.get$isIndentedSyntax(result)
                  ? C.Syntax_Sass0
                  : C.Syntax_SCSS0;
                $async$returnValue = new E._LoadedStylesheet1(
                  V.Stylesheet_Stylesheet$parse0(
                    contents,
                    t1,
                    $async$self._async_evaluate0$_quietDeps
                      ? $.$get$Logger_quiet0()
                      : $async$self._async_evaluate0$_logger,
                    url
                  ),
                  null,
                  true
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_importLikeNode$2,
        $async$completer
      );
    },
    _async_evaluate0$_visitStaticImport$1($import) {
      return this._visitStaticImport$body$_EvaluateVisitor0($import);
    },
    _visitStaticImport$body$_EvaluateVisitor0($import) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1,
        url,
        supports,
        node,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$_async_evaluate0$_visitStaticImport$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_interpolationToValue$1(
                    $import.url
                  ),
                  $async$_async_evaluate0$_visitStaticImport$1
                );
              case 3:
                // returning from await.
                url = $async$result;
                $async$goto = 4;
                return P._asyncAwait(
                  X.NullableExtension_andThen0(
                    $import.supports,
                    new E._EvaluateVisitor__visitStaticImport_closure1(
                      $async$self
                    )
                  ),
                  $async$_async_evaluate0$_visitStaticImport$1
                );
              case 4:
                // returning from await.
                supports = $async$result;
                $async$temp1 = F;
                $async$temp2 = url;
                $async$temp3 = $import.span;
                $async$goto = 5;
                return P._asyncAwait(
                  X.NullableExtension_andThen0(
                    $import.media,
                    $async$self.get$_async_evaluate0$_visitMediaQueries()
                  ),
                  $async$_async_evaluate0$_visitStaticImport$1
                );
              case 5:
                // returning from await.
                node = $async$temp1.ModifiableCssImport$0(
                  $async$temp2,
                  $async$temp3,
                  $async$result,
                  supports
                );
                if (
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__parent,
                    '__parent'
                  ) !==
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__root,
                    '_root'
                  )
                )
                  $async$self
                    ._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__parent,
                      '__parent'
                    )
                    .addChild$1(node);
                else if (
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__endOfImports,
                    '_endOfImports'
                  ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__root,
                      '_root'
                    ).children._collection$_source
                  )
                ) {
                  $async$self
                    ._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__root,
                      '_root'
                    )
                    .addChild$1(node);
                  $async$self._async_evaluate0$__endOfImports =
                    $async$self._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__endOfImports,
                      '_endOfImports'
                    ) + 1;
                } else {
                  t1 = $async$self._async_evaluate0$_outOfOrderImports;
                  (t1 == null
                    ? ($async$self._async_evaluate0$_outOfOrderImports = H._setArrayType(
                        [],
                        type$.JSArray_ModifiableCssImport_2
                      ))
                    : t1
                  ).push(node);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_visitStaticImport$1,
        $async$completer
      );
    },
    visitIncludeRule$1(node) {
      return this.visitIncludeRule$body$_EvaluateVisitor0(node);
    },
    visitIncludeRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        nodeWithSpan,
        t1,
        t2,
        t3,
        mixin;
      var $async$visitIncludeRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              mixin = $async$self._async_evaluate0$_addExceptionSpan$2(
                node,
                new E._EvaluateVisitor_visitIncludeRule_closure7(
                  $async$self,
                  node
                )
              );
              if (mixin == null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    'Undefined mixin.',
                    node.span
                  )
                );
              nodeWithSpan = new B._FakeAstNode0(
                new E._EvaluateVisitor_visitIncludeRule_closure8(node)
              );
              $async$goto = type$.AsyncBuiltInCallable_2._is(mixin) ? 3 : 5;
              break;
            case 3:
              // then
              if (node.content != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    "Mixin doesn't accept a content block.",
                    node.span
                  )
                );
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate0$_runBuiltInCallable$3(
                  node.$arguments,
                  mixin,
                  nodeWithSpan
                ),
                $async$visitIncludeRule$1
              );
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = type$.UserDefinedCallable_AsyncEnvironment_2._is(
                mixin
              )
                ? 7
                : 9;
              break;
            case 7:
              // then
              t1 = node.content;
              if (t1 != null) {
                t2 = type$.MixinRule_2._as(mixin.declaration);
                t3 = t2._mixin_rule$__MixinRule_hasContent;
                if (t3 == null) {
                  t3 = J.$eq$(
                    C.C__HasContentVisitor0.visitChildren$1(t2.children),
                    true
                  );
                  if (t2._mixin_rule$__MixinRule_hasContent == null) {
                    t2._mixin_rule$__MixinRule_hasContent = t3;
                    t2 = t3;
                  } else
                    t2 = H.throwExpression(H.LateError$fieldADI('hasContent'));
                } else t2 = t3;
                t2 = !t2;
              } else t2 = false;
              if (t2)
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$0(
                    "Mixin doesn't accept a content block.",
                    node.get$spanWithoutContent(),
                    'invocation',
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [
                        mixin.declaration.$arguments.get$spanWithName(),
                        'declaration',
                      ],
                      type$.FileSpan,
                      type$.String
                    ),
                    $async$self._async_evaluate0$_stackTrace$1(
                      node.get$spanWithoutContent()
                    )
                  )
                );
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate0$_runUserDefinedCallable$1$4(
                  node.$arguments,
                  mixin,
                  nodeWithSpan,
                  new E._EvaluateVisitor_visitIncludeRule_closure9(
                    $async$self,
                    X.NullableExtension_andThen0(
                      t1,
                      new E._EvaluateVisitor_visitIncludeRule_closure10(
                        $async$self
                      )
                    ),
                    mixin,
                    nodeWithSpan
                  ),
                  type$.Null
                ),
                $async$visitIncludeRule$1
              );
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              throw H.wrapException(
                P.UnsupportedError$(
                  'Unknown callable type ' + mixin.toString$0(0) + '.'
                )
              );
            case 8:
            // join
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIncludeRule$1, $async$completer);
    },
    visitMixinRule$1(node) {
      return this.visitMixinRule$body$_EvaluateVisitor0(node);
    },
    visitMixinRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        index,
        t4;
      var $async$visitMixinRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate0$_environment;
              t2 = t1.closure$0();
              t3 = t1._async_environment0$_mixins;
              index = t3.length - 1;
              t4 = node.name;
              t1._async_environment0$_mixinIndices.$indexSet(0, t4, index);
              J.$indexSet$ax(
                t3[index],
                t4,
                new E.UserDefinedCallable0(
                  node,
                  t2,
                  type$.UserDefinedCallable_AsyncEnvironment_2
                )
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMixinRule$1, $async$completer);
    },
    visitLoudComment$1(node) {
      return this.visitLoudComment$body$_EvaluateVisitor0(node);
    },
    visitLoudComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$visitLoudComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_inFunction) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ) ===
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__root,
                    '_root'
                  ) &&
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__endOfImports,
                  '_endOfImports'
                ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__root,
                      '_root'
                    ).children._collection$_source
                  )
              )
                $async$self._async_evaluate0$__endOfImports =
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              t1 = node.text;
              $async$temp1 = $async$self._async_evaluate0$_assertInModule$2(
                $async$self._async_evaluate0$__parent,
                '__parent'
              );
              $async$temp2 = R;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_performInterpolation$1(t1),
                $async$visitLoudComment$1
              );
            case 3:
              // returning from await.
              $async$temp1.addChild$1(
                new $async$temp2.ModifiableCssComment0($async$result, t1.span)
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitLoudComment$1, $async$completer);
    },
    visitMediaRule$1(node) {
      return this.visitMediaRule$body$_EvaluateVisitor0(node);
    },
    visitMediaRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        queries,
        mergedQueries,
        t1;
      var $async$visitMediaRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Media_,
                    node.span
                  )
                );
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_visitMediaQueries$1(node.query),
                $async$visitMediaRule$1
              );
            case 3:
              // returning from await.
              queries = $async$result;
              mergedQueries = X.NullableExtension_andThen0(
                $async$self._async_evaluate0$_mediaQueries,
                new E._EvaluateVisitor_visitMediaRule_closure5(
                  $async$self,
                  queries
                )
              );
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? queries : mergedQueries;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  G.ModifiableCssMediaRule$0(t1, node.span),
                  new E._EvaluateVisitor_visitMediaRule_closure6(
                    $async$self,
                    mergedQueries,
                    queries,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitMediaRule_closure7(mergedQueries),
                  type$.ModifiableCssMediaRule_2,
                  type$.Null
                ),
                $async$visitMediaRule$1
              );
            case 4:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMediaRule$1, $async$completer);
    },
    _async_evaluate0$_visitMediaQueries$1(interpolation) {
      return this._visitMediaQueries$body$_EvaluateVisitor0(interpolation);
    },
    _visitMediaQueries$body$_EvaluateVisitor0(interpolation) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.List_CssMediaQuery_2
        ),
        $async$returnValue,
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate0$_visitMediaQueries$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = interpolation;
                $async$temp2 = E;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$2$warnForColor(
                    interpolation,
                    true
                  ),
                  $async$_async_evaluate0$_visitMediaQueries$1
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$self._async_evaluate0$_adjustParseError$2(
                  $async$temp1,
                  new $async$temp2._EvaluateVisitor__visitMediaQueries_closure1(
                    $async$self,
                    $async$result
                  )
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_visitMediaQueries$1,
        $async$completer
      );
    },
    _async_evaluate0$_mergeMediaQueries$2(queries1, queries2) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        result,
        queries = H._setArrayType([], type$.JSArray_CssMediaQuery_2);
      for (
        t1 = J.get$iterator$ax(queries1),
          t2 = J.getInterceptor$ax(queries2),
          t3 = type$.MediaQuerySuccessfulMergeResult_2;
        t1.moveNext$0();

      ) {
        t4 = t1.get$current();
        for (t5 = t2.get$iterator(queries2); t5.moveNext$0(); ) {
          result = t4.merge$1(t5.get$current());
          if (result === C._SingletonCssMediaQueryMergeResult_empty0) continue;
          if (result === C._SingletonCssMediaQueryMergeResult_unrepresentable0)
            return null;
          queries.push(t3._as(result).query);
        }
      }
      return queries;
    },
    visitReturnRule$1(node) {
      return this.visitReturnRule$body$_EvaluateVisitor0(node);
    },
    visitReturnRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$visitReturnRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.expression;
              $async$goto = 3;
              return P._asyncAwait(
                t1.accept$1($async$self),
                $async$visitReturnRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2(
                $async$result,
                t1
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitReturnRule$1, $async$completer);
    },
    visitSilentComment$1(node) {
      return this.visitSilentComment$body$_EvaluateVisitor0(node);
    },
    visitSilentComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue;
      var $async$visitSilentComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitSilentComment$1, $async$completer);
    },
    visitStyleRule$1(node) {
      return this.visitStyleRule$body$_EvaluateVisitor0(node);
    },
    visitStyleRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t2,
        selectorText,
        rule,
        oldAtRootExcludingStyleRule,
        t1;
      var $async$visitStyleRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Style_,
                    node.span
                  )
                );
              t2 = node.selector;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_interpolationToValue$3$trim$warnForColor(
                  t2,
                  true,
                  true
                ),
                $async$visitStyleRule$1
              );
            case 3:
              // returning from await.
              selectorText = $async$result;
              $async$goto = $async$self._async_evaluate0$_inKeyframes ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssKeyframeBlock$0(
                    new F.CssValue0(
                      P.List_List$unmodifiable(
                        $async$self._async_evaluate0$_adjustParseError$2(
                          t2,
                          new E._EvaluateVisitor_visitStyleRule_closure13(
                            $async$self,
                            selectorText
                          )
                        ),
                        type$.String
                      ),
                      t2.span,
                      type$.CssValue_List_String_2
                    ),
                    node.span
                  ),
                  new E._EvaluateVisitor_visitStyleRule_closure14(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitStyleRule_closure15(),
                  type$.ModifiableCssKeyframeBlock_2,
                  type$.Null
                ),
                $async$visitStyleRule$1
              );
            case 6:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              t1.parsedSelector = $async$self._async_evaluate0$_adjustParseError$2(
                t2,
                new E._EvaluateVisitor_visitStyleRule_closure16(
                  $async$self,
                  selectorText
                )
              );
              t1.parsedSelector = $async$self._async_evaluate0$_addExceptionSpan$2(
                t2,
                new E._EvaluateVisitor_visitStyleRule_closure17(t1, $async$self)
              );
              rule = X.ModifiableCssStyleRule$0(
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__extensionStore,
                    '_extensionStore'
                  )
                  .addSelector$3(
                    t1.parsedSelector,
                    t2.span,
                    $async$self._async_evaluate0$_mediaQueries
                  ),
                node.span,
                t1.parsedSelector
              );
              oldAtRootExcludingStyleRule =
                $async$self._async_evaluate0$_atRootExcludingStyleRule;
              t1 = $async$self._async_evaluate0$_atRootExcludingStyleRule = false;
              $async$goto = 7;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  rule,
                  new E._EvaluateVisitor_visitStyleRule_closure18(
                    $async$self,
                    rule,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitStyleRule_closure19(),
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$visitStyleRule$1
              );
            case 7:
              // returning from await.
              $async$self._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if (
                (oldAtRootExcludingStyleRule
                  ? null
                  : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot) ==
                null
              ) {
                t1 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ).children;
                t1 = !t1.get$isEmpty(t1);
              }
              if (t1) {
                t1 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ).children;
                t1.get$last(t1).isGroupEnd = true;
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitStyleRule$1, $async$completer);
    },
    visitSupportsRule$1(node) {
      return this.visitSupportsRule$body$_EvaluateVisitor0(node);
    },
    visitSupportsRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$visitSupportsRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Suppor,
                    node.span
                  )
                );
              t1 = node.condition;
              $async$temp1 = B;
              $async$temp2 = F;
              $async$goto = 4;
              return P._asyncAwait(
                $async$self._async_evaluate0$_visitSupportsCondition$1(t1),
                $async$visitSupportsRule$1
              );
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  $async$temp1.ModifiableCssSupportsRule$0(
                    new $async$temp2.CssValue0(
                      $async$result,
                      t1.get$span(),
                      type$.CssValue_String_2
                    ),
                    node.span
                  ),
                  new E._EvaluateVisitor_visitSupportsRule_closure3(
                    $async$self,
                    node
                  ),
                  node.hasDeclarations,
                  new E._EvaluateVisitor_visitSupportsRule_closure4(),
                  type$.ModifiableCssSupportsRule_2,
                  type$.Null
                ),
                $async$visitSupportsRule$1
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitSupportsRule$1, $async$completer);
    },
    _async_evaluate0$_visitSupportsCondition$1(condition) {
      return this._visitSupportsCondition$body$_EvaluateVisitor0(condition);
    },
    _visitSupportsCondition$body$_EvaluateVisitor0(condition) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate0$_visitSupportsCondition$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = condition instanceof U.SupportsOperation0 ? 3 : 5;
                break;
              case 3:
                // then
                t1 = condition.operator;
                $async$temp1 = H;
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_parenthesize$2(
                    condition.left,
                    t1
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 6:
                // returning from await.
                $async$temp1 = $async$temp1.S($async$result) + ' ' + t1 + ' ';
                $async$temp2 = H;
                $async$goto = 7;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_parenthesize$2(
                    condition.right,
                    t1
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 7:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result);
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = condition instanceof M.SupportsNegation0 ? 8 : 10;
                break;
              case 8:
                // then
                $async$temp1 = H;
                $async$goto = 11;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_parenthesize$1(
                    condition.condition
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 11:
                // returning from await.
                $async$returnValue = 'not ' + $async$temp1.S($async$result);
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 9;
                break;
              case 10:
                // else
                $async$goto =
                  condition instanceof X.SupportsInterpolation0 ? 12 : 14;
                break;
              case 12:
                // then
                $async$goto = 15;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateToCss$2$quote(
                    condition.expression,
                    false
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 15:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 13;
                break;
              case 14:
                // else
                $async$goto =
                  condition instanceof L.SupportsDeclaration0 ? 16 : 18;
                break;
              case 16:
                // then
                $async$temp1 = H;
                $async$goto = 19;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateToCss$1(condition.name),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 19:
                // returning from await.
                $async$temp1 = '(' + $async$temp1.S($async$result) + ': ';
                $async$temp2 = H;
                $async$goto = 20;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateToCss$1(
                    condition.value
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 20:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 17;
                break;
              case 18:
                // else
                $async$goto =
                  condition instanceof F.SupportsFunction0 ? 21 : 23;
                break;
              case 21:
                // then
                $async$temp1 = H;
                $async$goto = 24;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$1(
                    condition.name
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 24:
                // returning from await.
                $async$temp1 = $async$temp1.S($async$result) + '(';
                $async$temp2 = H;
                $async$goto = 25;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$1(
                    condition.$arguments
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 25:
                // returning from await.
                $async$returnValue =
                  $async$temp1 + $async$temp2.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 22;
                break;
              case 23:
                // else
                $async$goto =
                  condition instanceof Y.SupportsAnything0 ? 26 : 28;
                break;
              case 26:
                // then
                $async$temp1 = H;
                $async$goto = 29;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$1(
                    condition.contents
                  ),
                  $async$_async_evaluate0$_visitSupportsCondition$1
                );
              case 29:
                // returning from await.
                $async$returnValue = '(' + $async$temp1.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 27;
                break;
              case 28:
                // else
                throw H.wrapException(
                  P.ArgumentError$(
                    'Unknown supports condition type ' +
                      H.getRuntimeType(condition).toString$0(0) +
                      '.',
                    null
                  )
                );
              case 27:
              // join
              case 22:
              // join
              case 17:
              // join
              case 13:
              // join
              case 9:
              // join
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_visitSupportsCondition$1,
        $async$completer
      );
    },
    _async_evaluate0$_parenthesize$2(condition, operator) {
      return this._parenthesize$body$_EvaluateVisitor0(condition, operator);
    },
    _async_evaluate0$_parenthesize$1(condition) {
      return this._async_evaluate0$_parenthesize$2(condition, null);
    },
    _parenthesize$body$_EvaluateVisitor0(condition, operator) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1;
      var $async$_async_evaluate0$_parenthesize$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!(condition instanceof M.SupportsNegation0))
                  if (condition instanceof U.SupportsOperation0)
                    t1 = operator == null || operator !== condition.operator;
                  else t1 = false;
                else t1 = true;
                $async$goto = t1 ? 3 : 5;
                break;
              case 3:
                // then
                $async$temp1 = H;
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_visitSupportsCondition$1(
                    condition
                  ),
                  $async$_async_evaluate0$_parenthesize$2
                );
              case 6:
                // returning from await.
                $async$returnValue = '(' + $async$temp1.S($async$result) + ')';
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = 7;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_visitSupportsCondition$1(
                    condition
                  ),
                  $async$_async_evaluate0$_parenthesize$2
                );
              case 7:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_parenthesize$2,
        $async$completer
      );
    },
    visitVariableDeclaration$1(node) {
      return this.visitVariableDeclaration$body$_EvaluateVisitor0(node);
    },
    visitVariableDeclaration$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        value,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$visitVariableDeclaration$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (node.isGuarded) {
                  if (
                    node.namespace == null &&
                    $async$self._async_evaluate0$_environment
                      ._async_environment0$_variables.length === 1
                  ) {
                    t1 =
                      $async$self._async_evaluate0$_configuration
                        ._configuration$_values;
                    t1 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, node.name);
                    if (t1 != null && !t1.value.$eq(0, C.C__SassNull)) {
                      $async$self._async_evaluate0$_addExceptionSpan$2(
                        node,
                        new E._EvaluateVisitor_visitVariableDeclaration_closure5(
                          $async$self,
                          node,
                          t1
                        )
                      );
                      $async$returnValue = null;
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                  }
                  value = $async$self._async_evaluate0$_addExceptionSpan$2(
                    node,
                    new E._EvaluateVisitor_visitVariableDeclaration_closure6(
                      $async$self,
                      node
                    )
                  );
                  if (value != null && !value.$eq(0, C.C__SassNull)) {
                    $async$returnValue = null;
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                }
                if (
                  node.isGlobal &&
                  !$async$self._async_evaluate0$_environment.globalVariableExists$1(
                    node.name
                  )
                ) {
                  t1 =
                    $async$self._async_evaluate0$_environment
                      ._async_environment0$_variables.length === 1
                      ? string$.As_of_S
                      : string$.As_of_R +
                        B.declarationName0(node.span) +
                        ': null` at the stylesheet root.';
                  $async$self._async_evaluate0$_warn$3$deprecation(
                    t1,
                    node.span,
                    true
                  );
                }
                t1 = node.expression;
                $async$temp1 = node;
                $async$temp2 = E;
                $async$temp3 = node;
                $async$goto = 3;
                return P._asyncAwait(
                  t1.accept$1($async$self),
                  $async$visitVariableDeclaration$1
                );
              case 3:
                // returning from await.
                $async$self._async_evaluate0$_addExceptionSpan$2(
                  $async$temp1,
                  new $async$temp2._EvaluateVisitor_visitVariableDeclaration_closure7(
                    $async$self,
                    $async$temp3,
                    $async$self._async_evaluate0$_withoutSlash$2(
                      $async$result,
                      t1
                    )
                  )
                );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitVariableDeclaration$1,
        $async$completer
      );
    },
    visitUseRule$1(node) {
      return this.visitUseRule$body$_EvaluateVisitor0(node);
    },
    visitUseRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        values,
        _i,
        variable,
        t3,
        variableNodeWithSpan,
        configuration,
        t1,
        t2,
        $async$temp1,
        $async$temp2,
        $async$temp3;
      var $async$visitUseRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.configuration;
              t2 = t1.length;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              values = P.LinkedHashMap_LinkedHashMap$_empty(
                type$.String,
                type$.ConfiguredValue_2
              );
              _i = 0;
            case 6:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 8;
                break;
              }
              variable = t1[_i];
              t3 = variable.expression;
              variableNodeWithSpan = $async$self._async_evaluate0$_expressionNode$1(
                t3
              );
              $async$temp1 = values;
              $async$temp2 = variable.name;
              $async$temp3 = Z;
              $async$goto = 9;
              return P._asyncAwait(
                t3.accept$1($async$self),
                $async$visitUseRule$1
              );
            case 9:
              // returning from await.
              $async$temp1.$indexSet(
                0,
                $async$temp2,
                new $async$temp3.ConfiguredValue0(
                  $async$self._async_evaluate0$_withoutSlash$2(
                    $async$result,
                    variableNodeWithSpan
                  ),
                  variable.span,
                  variableNodeWithSpan
                )
              );
            case 7:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 6;
              break;
            case 8:
              // after for
              configuration = new A.ExplicitConfiguration0(node, values);
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              configuration = C.Configuration_Map_empty0;
            case 4:
              // join
              $async$goto = 10;
              return P._asyncAwait(
                $async$self._async_evaluate0$_loadModule$5$configuration(
                  node.url,
                  '@use',
                  node,
                  new E._EvaluateVisitor_visitUseRule_closure1(
                    $async$self,
                    node
                  ),
                  configuration
                ),
                $async$visitUseRule$1
              );
            case 10:
              // returning from await.
              $async$self._async_evaluate0$_assertConfigurationIsEmpty$1(
                configuration
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitUseRule$1, $async$completer);
    },
    visitWarnRule$1(node) {
      return this.visitWarnRule$body$_EvaluateVisitor0(node);
    },
    visitWarnRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        value,
        t1;
      var $async$visitWarnRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_addExceptionSpanAsync$1$2(
                  node,
                  new E._EvaluateVisitor_visitWarnRule_closure1(
                    $async$self,
                    node
                  ),
                  type$.Value_2
                ),
                $async$visitWarnRule$1
              );
            case 3:
              // returning from await.
              value = $async$result;
              t1 =
                value instanceof D.SassString0
                  ? value.text
                  : $async$self._async_evaluate0$_serialize$2(
                      value,
                      node.expression
                    );
              $async$self._async_evaluate0$_logger.warn$2$trace(
                0,
                t1,
                $async$self._async_evaluate0$_stackTrace$1(node.span)
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitWarnRule$1, $async$completer);
    },
    visitWhileRule$1(node) {
      return this._async_evaluate0$_environment.scope$1$3$semiGlobal$when(
        new E._EvaluateVisitor_visitWhileRule_closure1(this, node),
        true,
        node.hasDeclarations,
        type$.nullable_Value_2
      );
    },
    visitBinaryOperationExpression$1(node) {
      return this._async_evaluate0$_addExceptionSpanAsync$1$2(
        node,
        new E._EvaluateVisitor_visitBinaryOperationExpression_closure1(
          this,
          node
        ),
        type$.Value_2
      );
    },
    visitValueExpression$1(node) {
      return this.visitValueExpression$body$_EvaluateVisitor0(node);
    },
    visitValueExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue;
      var $async$visitValueExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitValueExpression$1, $async$completer);
    },
    visitVariableExpression$1(node) {
      return this.visitVariableExpression$body$_EvaluateVisitor0(node);
    },
    visitVariableExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        result;
      var $async$visitVariableExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                result = $async$self._async_evaluate0$_addExceptionSpan$2(
                  node,
                  new E._EvaluateVisitor_visitVariableExpression_closure1(
                    $async$self,
                    node
                  )
                );
                if (result != null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    'Undefined variable.',
                    node.span
                  )
                );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitVariableExpression$1,
        $async$completer
      );
    },
    visitUnaryOperationExpression$1(node) {
      return this.visitUnaryOperationExpression$body$_EvaluateVisitor0(node);
    },
    visitUnaryOperationExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        operand,
        t1;
      var $async$visitUnaryOperationExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            $async$outer: switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  node.operand.accept$1($async$self),
                  $async$visitUnaryOperationExpression$1
                );
              case 3:
                // returning from await.
                operand = $async$result;
                t1 = node.operator;
                switch (t1) {
                  case C.UnaryOperator_j2w0:
                    $async$returnValue = operand.unaryPlus$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_U4G0:
                    $async$returnValue = operand.unaryMinus$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_zDx0:
                    $async$returnValue = new D.SassString0(
                      '/' + N.serializeValue(operand, false, true),
                      false
                    );
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case C.UnaryOperator_not_not0:
                    $async$returnValue = operand.unaryNot$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw H.wrapException(
                      P.StateError$(
                        'Unknown unary operator ' + t1.toString$0(0) + '.'
                      )
                    );
                }
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitUnaryOperationExpression$1,
        $async$completer
      );
    },
    visitBooleanExpression$1(node) {
      return this.visitBooleanExpression$body$_EvaluateVisitor0(node);
    },
    visitBooleanExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassBoolean_2),
        $async$returnValue;
      var $async$visitBooleanExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value
                ? C.SassBoolean_true
                : C.SassBoolean_false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitBooleanExpression$1,
        $async$completer
      );
    },
    visitIfExpression$1(node) {
      return this.visitIfExpression$body$_EvaluateVisitor0(node);
    },
    visitIfExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        condition,
        t2,
        ifTrue,
        ifFalse,
        result,
        pair,
        positional,
        named,
        t1;
      var $async$visitIfExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_evaluateMacroArguments$1(node),
                $async$visitIfExpression$1
              );
            case 3:
              // returning from await.
              pair = $async$result;
              positional = pair.item1;
              named = pair.item2;
              t1 = J.getInterceptor$asx(positional);
              $async$self._async_evaluate0$_verifyArguments$4(
                t1.get$length(positional),
                named,
                $.$get$IfExpression_declaration0(),
                node
              );
              if (t1.get$length(positional) > 0)
                condition = t1.$index(positional, 0);
              else {
                t2 = named.$index(0, 'condition');
                t2.toString;
                condition = t2;
              }
              if (t1.get$length(positional) > 1)
                ifTrue = t1.$index(positional, 1);
              else {
                t2 = named.$index(0, 'if-true');
                t2.toString;
                ifTrue = t2;
              }
              if (t1.get$length(positional) > 2)
                ifFalse = t1.$index(positional, 2);
              else {
                t1 = named.$index(0, 'if-false');
                t1.toString;
                ifFalse = t1;
              }
              $async$goto = 4;
              return P._asyncAwait(
                condition.accept$1($async$self),
                $async$visitIfExpression$1
              );
            case 4:
              // returning from await.
              result = $async$result.get$isTruthy() ? ifTrue : ifFalse;
              $async$goto = 5;
              return P._asyncAwait(
                result.accept$1($async$self),
                $async$visitIfExpression$1
              );
            case 5:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2(
                $async$result,
                $async$self._async_evaluate0$_expressionNode$1(result)
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitIfExpression$1, $async$completer);
    },
    visitNullExpression$1(node) {
      return this.visitNullExpression$body$_EvaluateVisitor0(node);
    },
    visitNullExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue;
      var $async$visitNullExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = C.C__SassNull;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitNullExpression$1, $async$completer);
    },
    visitNumberExpression$1(node) {
      return this.visitNumberExpression$body$_EvaluateVisitor0(node);
    },
    visitNumberExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue,
        t1,
        t2;
      var $async$visitNumberExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.value;
              t2 = node.unit;
              $async$returnValue =
                t2 == null
                  ? new N.UnitlessSassNumber0(t1, null)
                  : new L.SingleUnitSassNumber0(t2, t1, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitNumberExpression$1,
        $async$completer
      );
    },
    visitColorExpression$1(node) {
      return this.visitColorExpression$body$_EvaluateVisitor0(node);
    },
    visitColorExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassColor_2),
        $async$returnValue;
      var $async$visitColorExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitColorExpression$1, $async$completer);
    },
    visitListExpression$1(node) {
      return this.visitListExpression$body$_EvaluateVisitor0(node);
    },
    visitListExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassList_2),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$visitListExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = D;
              $async$goto = 3;
              return P._asyncAwait(
                B.mapAsync0(
                  node.contents,
                  new E._EvaluateVisitor_visitListExpression_closure1(
                    $async$self
                  ),
                  type$.Expression_2,
                  type$.Value_2
                ),
                $async$visitListExpression$1
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.SassList$0(
                $async$result,
                node.separator,
                node.hasBrackets
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitListExpression$1, $async$completer);
    },
    visitMapExpression$1(node) {
      return this.visitMapExpression$body$_EvaluateVisitor0(node);
    },
    visitMapExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassMap_2),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        _i,
        pair,
        t4,
        keyValue,
        valueValue,
        oldValueSpan,
        t1,
        map,
        keyNodes;
      var $async$visitMapExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Value_2;
              map = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              keyNodes = P.LinkedHashMap_LinkedHashMap$_empty(
                t1,
                type$.AstNode_2
              );
              (t2 = node.pairs), (t3 = t2.length), (_i = 0);
            case 3:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              pair = t2[_i];
              t4 = pair.item1;
              $async$goto = 6;
              return P._asyncAwait(
                t4.accept$1($async$self),
                $async$visitMapExpression$1
              );
            case 6:
              // returning from await.
              keyValue = $async$result;
              $async$goto = 7;
              return P._asyncAwait(
                pair.item2.accept$1($async$self),
                $async$visitMapExpression$1
              );
            case 7:
              // returning from await.
              valueValue = $async$result;
              if (map.$index(0, keyValue) != null) {
                t1 = keyNodes.$index(0, keyValue);
                oldValueSpan = t1 == null ? null : t1.get$span();
                t1 = t4.get$span();
                t2 = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.FileSpan,
                  type$.String
                );
                if (oldValueSpan != null)
                  t2.$indexSet(0, oldValueSpan, 'first key');
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$0(
                    'Duplicate key.',
                    t1,
                    'second key',
                    t2,
                    $async$self._async_evaluate0$_stackTrace$1(t4.get$span())
                  )
                );
              }
              map.$indexSet(0, keyValue, valueValue);
              keyNodes.$indexSet(0, keyValue, t4);
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = new A.SassMap0(
                H.ConstantMap_ConstantMap$from(map, t1, t1)
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitMapExpression$1, $async$completer);
    },
    visitFunctionExpression$1(node) {
      return this.visitFunctionExpression$body$_EvaluateVisitor0(node);
    },
    visitFunctionExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        oldInFunction,
        result,
        t1,
        $function;
      var $async$visitFunctionExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                $function = $async$self._async_evaluate0$_addExceptionSpan$2(
                  node,
                  new E._EvaluateVisitor_visitFunctionExpression_closure3(
                    $async$self,
                    node
                  )
                );
                t1.$function = $function;
                if ($function == null) {
                  if (node.namespace != null)
                    throw H.wrapException(
                      $async$self._async_evaluate0$_exception$2(
                        'Undefined function.',
                        node.span
                      )
                    );
                  t1.$function = new L.PlainCssCallable0(node.originalName);
                }
                oldInFunction = $async$self._async_evaluate0$_inFunction;
                $async$self._async_evaluate0$_inFunction = true;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_addErrorSpan$1$2(
                    node,
                    new E._EvaluateVisitor_visitFunctionExpression_closure4(
                      t1,
                      $async$self,
                      node
                    ),
                    type$.Value_2
                  ),
                  $async$visitFunctionExpression$1
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_inFunction = oldInFunction;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitFunctionExpression$1,
        $async$completer
      );
    },
    visitInterpolatedFunctionExpression$1(node) {
      return this.visitInterpolatedFunctionExpression$body$_EvaluateVisitor0(
        node
      );
    },
    visitInterpolatedFunctionExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        result,
        t1,
        oldInFunction;
      var $async$visitInterpolatedFunctionExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$1(
                    node.name
                  ),
                  $async$visitInterpolatedFunctionExpression$1
                );
              case 3:
                // returning from await.
                t1 = $async$result;
                oldInFunction = $async$self._async_evaluate0$_inFunction;
                $async$self._async_evaluate0$_inFunction = true;
                $async$goto = 4;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_addErrorSpan$1$2(
                    node,
                    new E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure1(
                      $async$self,
                      node,
                      new L.PlainCssCallable0(t1)
                    ),
                    type$.Value_2
                  ),
                  $async$visitInterpolatedFunctionExpression$1
                );
              case 4:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_inFunction = oldInFunction;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitInterpolatedFunctionExpression$1,
        $async$completer
      );
    },
    _async_evaluate0$_getFunction$2$namespace($name, namespace) {
      var local = this._async_evaluate0$_environment.getFunction$2$namespace(
        $name,
        namespace
      );
      if (local != null || namespace != null) return local;
      return this._async_evaluate0$_builtInFunctions.$index(0, $name);
    },
    _async_evaluate0$_runUserDefinedCallable$1$4(
      $arguments,
      callable,
      nodeWithSpan,
      run,
      $V
    ) {
      return this._runUserDefinedCallable$body$_EvaluateVisitor0(
        $arguments,
        callable,
        nodeWithSpan,
        run,
        $V,
        $V
      );
    },
    _runUserDefinedCallable$body$_EvaluateVisitor0(
      $arguments,
      callable,
      nodeWithSpan,
      run,
      $V,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        evaluated,
        $name;
      var $async$_async_evaluate0$_runUserDefinedCallable$1$4 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateArguments$1($arguments),
                  $async$_async_evaluate0$_runUserDefinedCallable$1$4
                );
              case 3:
                // returning from await.
                evaluated = $async$result;
                $name = callable.declaration.name;
                if ($name !== '@content') $name += '()';
                $async$goto = 4;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_withStackFrame$1$3(
                    $name,
                    nodeWithSpan,
                    new E._EvaluateVisitor__runUserDefinedCallable_closure1(
                      $async$self,
                      callable,
                      evaluated,
                      nodeWithSpan,
                      run,
                      $V
                    ),
                    $V
                  ),
                  $async$_async_evaluate0$_runUserDefinedCallable$1$4
                );
              case 4:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_runUserDefinedCallable$1$4,
        $async$completer
      );
    },
    _async_evaluate0$_runFunctionCallable$3(
      $arguments,
      callable,
      nodeWithSpan
    ) {
      return this._runFunctionCallable$body$_EvaluateVisitor0(
        $arguments,
        callable,
        nodeWithSpan
      );
    },
    _runFunctionCallable$body$_EvaluateVisitor0(
      $arguments,
      callable,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        first,
        _i,
        argument,
        restArg,
        rest,
        $async$temp1;
      var $async$_async_evaluate0$_runFunctionCallable$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = type$.AsyncBuiltInCallable_2._is(callable)
                  ? 3
                  : 5;
                break;
              case 3:
                // then
                $async$goto = 6;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_runBuiltInCallable$3(
                    $arguments,
                    callable,
                    nodeWithSpan
                  ),
                  $async$_async_evaluate0$_runFunctionCallable$3
                );
              case 6:
                // returning from await.
                $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2(
                  $async$result,
                  nodeWithSpan
                );
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                $async$goto = type$.UserDefinedCallable_AsyncEnvironment_2._is(
                  callable
                )
                  ? 7
                  : 9;
                break;
              case 7:
                // then
                $async$goto = 10;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_runUserDefinedCallable$1$4(
                    $arguments,
                    callable,
                    nodeWithSpan,
                    new E._EvaluateVisitor__runFunctionCallable_closure1(
                      $async$self,
                      callable
                    ),
                    type$.Value_2
                  ),
                  $async$_async_evaluate0$_runFunctionCallable$3
                );
              case 10:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = callable instanceof L.PlainCssCallable0 ? 11 : 13;
                break;
              case 11:
                // then
                t1 = $arguments.named;
                if (t1.get$isNotEmpty(t1) || $arguments.keywordRest != null)
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      string$.Plain_,
                      nodeWithSpan.get$span()
                    )
                  );
                t1 = callable.name + '(';
                (t2 = $arguments.positional),
                  (t3 = t2.length),
                  (first = true),
                  (_i = 0);
              case 14:
                // for condition
                if (!(_i < t3)) {
                  // goto after for
                  $async$goto = 16;
                  break;
                }
                argument = t2[_i];
                if (first) first = false;
                else t1 += ', ';
                $async$temp1 = H;
                $async$goto = 17;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateToCss$1(argument),
                  $async$_async_evaluate0$_runFunctionCallable$3
                );
              case 17:
                // returning from await.
                t1 += $async$temp1.S($async$result);
              case 15:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 14;
                break;
              case 16:
                // after for
                restArg = $arguments.rest;
                $async$goto = restArg != null ? 18 : 19;
                break;
              case 18:
                // then
                $async$goto = 20;
                return P._asyncAwait(
                  restArg.accept$1($async$self),
                  $async$_async_evaluate0$_runFunctionCallable$3
                );
              case 20:
                // returning from await.
                rest = $async$result;
                if (!first) t1 += ', ';
                t1 += $async$self._async_evaluate0$_serialize$2(rest, restArg);
              case 19:
                // join
                t1 += H.Primitives_stringFromCharCode(41);
                $async$returnValue = new D.SassString0(
                  t1.charCodeAt(0) == 0 ? t1 : t1,
                  false
                );
                // goto return
                $async$goto = 1;
                break;
                // goto join
                $async$goto = 12;
                break;
              case 13:
                // else
                throw H.wrapException(
                  P.ArgumentError$(
                    'Unknown callable type ' +
                      J.get$runtimeType$u(callable).toString$0(0) +
                      '.',
                    null
                  )
                );
              case 12:
              // join
              case 8:
              // join
              case 4:
              // join
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_runFunctionCallable$3,
        $async$completer
      );
    },
    _async_evaluate0$_runBuiltInCallable$3($arguments, callable, nodeWithSpan) {
      return this._runBuiltInCallable$body$_EvaluateVisitor0(
        $arguments,
        callable,
        nodeWithSpan
      );
    },
    _runBuiltInCallable$body$_EvaluateVisitor0(
      $arguments,
      callable,
      nodeWithSpan
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        callback,
        result,
        error,
        error0,
        error1,
        message,
        namedSet,
        tuple,
        overload,
        declaredArguments,
        i,
        t1,
        argument,
        t2,
        t3,
        rest,
        argumentList,
        exception,
        message0,
        evaluated,
        oldCallableNode,
        $async$exception;
      var $async$_async_evaluate0$_runBuiltInCallable$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_evaluateArguments$1($arguments),
                  $async$_async_evaluate0$_runBuiltInCallable$3
                );
              case 3:
                // returning from await.
                evaluated = $async$result;
                oldCallableNode = $async$self._async_evaluate0$_callableNode;
                $async$self._async_evaluate0$_callableNode = nodeWithSpan;
                namedSet = new M.MapKeySet(
                  evaluated.named,
                  type$.MapKeySet_String
                );
                tuple = callable.callbackFor$2(
                  evaluated.positional.length,
                  namedSet
                );
                overload = tuple.item1;
                callback = tuple.item2;
                $async$self._async_evaluate0$_addExceptionSpan$2(
                  nodeWithSpan,
                  new E._EvaluateVisitor__runBuiltInCallable_closure5(
                    overload,
                    evaluated,
                    namedSet
                  )
                );
                declaredArguments = overload.$arguments;
                (i = evaluated.positional.length),
                  (t1 = declaredArguments.length);
              case 4:
                // for condition
                if (!(i < t1)) {
                  // goto after for
                  $async$goto = 6;
                  break;
                }
                argument = declaredArguments[i];
                t2 = evaluated.positional;
                t3 = evaluated.named.remove$1(0, argument.name);
                $async$goto = t3 == null ? 7 : 8;
                break;
              case 7:
                // then
                t3 = argument.defaultValue;
                $async$goto = 9;
                return P._asyncAwait(
                  t3.accept$1($async$self),
                  $async$_async_evaluate0$_runBuiltInCallable$3
                );
              case 9:
                // returning from await.
                t3 = $async$self._async_evaluate0$_withoutSlash$2(
                  $async$result,
                  t3
                );
              case 8:
                // join
                t2.push(t3);
              case 5:
                // for update
                ++i;
                // goto for condition
                $async$goto = 4;
                break;
              case 6:
                // after for
                if (overload.restArgument != null) {
                  if (evaluated.positional.length > t1) {
                    rest = C.JSArray_methods.sublist$1(
                      evaluated.positional,
                      t1
                    );
                    C.JSArray_methods.removeRange$2(
                      evaluated.positional,
                      t1,
                      evaluated.positional.length
                    );
                  } else rest = C.List_empty14;
                  t1 = evaluated.named;
                  argumentList = D.SassArgumentList$0(
                    rest,
                    t1,
                    evaluated.separator === C.ListSeparator_undecided_null0
                      ? C.ListSeparator_kWM0
                      : evaluated.separator
                  );
                  evaluated.positional.push(argumentList);
                } else argumentList = null;
                result = null;
                $async$handler = 11;
                t1 = type$.nullable_Object;
                $async$goto = 14;
                return P._asyncAwait(
                  P.runZoned(
                    new E._EvaluateVisitor__runBuiltInCallable_closure6(
                      callback,
                      evaluated
                    ),
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [C.Symbol__currentCallableNode, nodeWithSpan],
                      t1,
                      t1
                    ),
                    type$.FutureOr_Value_2
                  ),
                  $async$_async_evaluate0$_runBuiltInCallable$3
                );
              case 14:
                // returning from await.
                result = $async$result;
                $async$handler = 2;
                // goto after finally
                $async$goto = 13;
                break;
              case 11:
                // catch
                $async$handler = 10;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (type$.SassRuntimeException_2._is(t1))
                  throw $async$exception;
                else if (t1 instanceof E.MultiSpanSassScriptException0) {
                  error = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$0(
                      error.message,
                      nodeWithSpan.get$span(),
                      error.primaryLabel,
                      error.secondarySpans,
                      $async$self._async_evaluate0$_stackTrace$1(
                        nodeWithSpan.get$span()
                      )
                    )
                  );
                } else if (t1 instanceof E.MultiSpanSassException0) {
                  error0 = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$0(
                      error0._span_exception$_message,
                      error0.get$span(),
                      error0.primaryLabel,
                      error0.secondarySpans,
                      $async$self._async_evaluate0$_stackTrace$1(
                        error0.get$span()
                      )
                    )
                  );
                } else {
                  error1 = t1;
                  message = null;
                  try {
                    message = H._asString(J.get$message$x(error1));
                  } catch (exception) {
                    H.unwrapException($async$exception);
                    message0 = J.toString$0$(error1);
                    message = message0;
                  }
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      message,
                      nodeWithSpan.get$span()
                    )
                  );
                }
                // goto after finally
                $async$goto = 13;
                break;
              case 10:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 13:
                // after finally
                $async$self._async_evaluate0$_callableNode = oldCallableNode;
                if (argumentList == null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = evaluated.named;
                if (t1.get$isEmpty(t1)) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (argumentList._argument_list$_wereKeywordsAccessed) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = evaluated.named;
                t1 = t1.get$keys(t1);
                t1 =
                  'No ' +
                  B.pluralize0('argument', t1.get$length(t1), null) +
                  ' named ';
                t2 = evaluated.named;
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$0(
                    t1 +
                      H.S(
                        B.toSentence0(
                          t2
                            .get$keys(t2)
                            .map$1$1(
                              0,
                              new E._EvaluateVisitor__runBuiltInCallable_closure7(),
                              type$.Object
                            ),
                          'or'
                        )
                      ) +
                      '.',
                    nodeWithSpan.get$span(),
                    'invocation',
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [overload.get$spanWithName(), 'declaration'],
                      type$.FileSpan,
                      type$.String
                    ),
                    $async$self._async_evaluate0$_stackTrace$1(
                      nodeWithSpan.get$span()
                    )
                  )
                );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_runBuiltInCallable$3,
        $async$completer
      );
    },
    _async_evaluate0$_evaluateArguments$1($arguments) {
      return this._evaluateArguments$body$_EvaluateVisitor0($arguments);
    },
    _evaluateArguments$body$_EvaluateVisitor0($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$._ArgumentResults_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i,
        expression,
        nodeForSpan,
        named,
        namedNodes,
        t3,
        t4,
        t5,
        restArgs,
        rest,
        restNodeForSpan,
        separator,
        keywordRestArgs,
        keywordRest,
        keywordRestNodeForSpan,
        positional,
        positionalNodes,
        $async$temp1,
        $async$temp2;
      var $async$_async_evaluate0$_evaluateArguments$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                positional = H._setArrayType([], type$.JSArray_Value_2);
                positionalNodes = H._setArrayType([], type$.JSArray_AstNode_2);
                (t1 = $arguments.positional), (t2 = t1.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                expression = t1[_i];
                nodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  expression
                );
                $async$temp1 = positional;
                $async$goto = 6;
                return P._asyncAwait(
                  expression.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateArguments$1
                );
              case 6:
                // returning from await.
                $async$temp1.push(
                  $async$self._async_evaluate0$_withoutSlash$2(
                    $async$result,
                    nodeForSpan
                  )
                );
                positionalNodes.push(nodeForSpan);
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                t1 = type$.String;
                named = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value_2);
                t2 = type$.AstNode_2;
                namedNodes = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                (t3 = $arguments.named),
                  (t3 = t3.get$entries(t3)),
                  (t3 = t3.get$iterator(t3));
              case 7:
                // for condition
                if (!t3.moveNext$0()) {
                  // goto after for
                  $async$goto = 8;
                  break;
                }
                t4 = t3.get$current();
                t5 = t4.value;
                nodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  t5
                );
                t4 = t4.key;
                $async$temp1 = named;
                $async$temp2 = t4;
                $async$goto = 9;
                return P._asyncAwait(
                  t5.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateArguments$1
                );
              case 9:
                // returning from await.
                $async$temp1.$indexSet(
                  0,
                  $async$temp2,
                  $async$self._async_evaluate0$_withoutSlash$2(
                    $async$result,
                    nodeForSpan
                  )
                );
                namedNodes.$indexSet(0, t4, nodeForSpan);
                // goto for condition
                $async$goto = 7;
                break;
              case 8:
                // after for
                restArgs = $arguments.rest;
                if (restArgs == null) {
                  $async$returnValue = new E._ArgumentResults1(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    C.ListSeparator_undecided_null0
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 10;
                return P._asyncAwait(
                  restArgs.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateArguments$1
                );
              case 10:
                // returning from await.
                rest = $async$result;
                restNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  restArgs
                );
                if (rest instanceof A.SassMap0) {
                  $async$self._async_evaluate0$_addRestMap$4(
                    named,
                    rest,
                    restArgs,
                    new E._EvaluateVisitor__evaluateArguments_closure7()
                  );
                  t3 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                  for (
                    t4 = rest.contents,
                      t4 = J.get$iterator$ax(t4.get$keys(t4)),
                      t5 = type$.SassString_2;
                    t4.moveNext$0();

                  )
                    t3.$indexSet(
                      0,
                      t5._as(t4.get$current()).text,
                      restNodeForSpan
                    );
                  namedNodes.addAll$1(0, t3);
                  separator = C.ListSeparator_undecided_null0;
                } else if (rest instanceof D.SassList0) {
                  t3 = rest._list1$_contents;
                  C.JSArray_methods.addAll$1(
                    positional,
                    new H.MappedListIterable(
                      t3,
                      new E._EvaluateVisitor__evaluateArguments_closure8(
                        $async$self,
                        restNodeForSpan
                      ),
                      H._arrayInstanceType(t3)._eval$1(
                        'MappedListIterable<1,Value0>'
                      )
                    )
                  );
                  C.JSArray_methods.addAll$1(
                    positionalNodes,
                    P.List_List$filled(t3.length, restNodeForSpan, false, t2)
                  );
                  separator = rest.separator;
                  if (rest instanceof D.SassArgumentList0) {
                    rest._argument_list$_wereKeywordsAccessed = true;
                    rest._argument_list$_keywords.forEach$1(
                      0,
                      new E._EvaluateVisitor__evaluateArguments_closure9(
                        $async$self,
                        named,
                        restNodeForSpan,
                        namedNodes
                      )
                    );
                  }
                } else {
                  positional.push(
                    $async$self._async_evaluate0$_withoutSlash$2(
                      rest,
                      restNodeForSpan
                    )
                  );
                  positionalNodes.push(restNodeForSpan);
                  separator = C.ListSeparator_undecided_null0;
                }
                keywordRestArgs = $arguments.keywordRest;
                if (keywordRestArgs == null) {
                  $async$returnValue = new E._ArgumentResults1(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    separator
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 11;
                return P._asyncAwait(
                  keywordRestArgs.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateArguments$1
                );
              case 11:
                // returning from await.
                keywordRest = $async$result;
                keywordRestNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  keywordRestArgs
                );
                if (keywordRest instanceof A.SassMap0) {
                  $async$self._async_evaluate0$_addRestMap$4(
                    named,
                    keywordRest,
                    keywordRestArgs,
                    new E._EvaluateVisitor__evaluateArguments_closure10()
                  );
                  t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                  for (
                    t2 = keywordRest.contents,
                      t2 = J.get$iterator$ax(t2.get$keys(t2)),
                      t3 = type$.SassString_2;
                    t2.moveNext$0();

                  )
                    t1.$indexSet(
                      0,
                      t3._as(t2.get$current()).text,
                      keywordRestNodeForSpan
                    );
                  namedNodes.addAll$1(0, t1);
                  $async$returnValue = new E._ArgumentResults1(
                    positional,
                    positionalNodes,
                    named,
                    namedNodes,
                    separator
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      string$.Variabs + keywordRest.toString$0(0) + ').',
                      keywordRestArgs.get$span()
                    )
                  );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_evaluateArguments$1,
        $async$completer
      );
    },
    _async_evaluate0$_evaluateMacroArguments$1(invocation) {
      return this._evaluateMacroArguments$body$_EvaluateVisitor0(invocation);
    },
    _evaluateMacroArguments$body$_EvaluateVisitor0(invocation) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.Tuple2_of_List_Expression_and_Map_String_Expression_2
        ),
        $async$returnValue,
        $async$self = this,
        t2,
        positional,
        named,
        rest,
        restNodeForSpan,
        keywordRestArgs_,
        keywordRest,
        keywordRestNodeForSpan,
        t1,
        restArgs_;
      var $async$_async_evaluate0$_evaluateMacroArguments$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = invocation.$arguments;
                restArgs_ = t1.rest;
                if (restArgs_ == null) {
                  $async$returnValue = new S.Tuple2(
                    t1.positional,
                    t1.named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression_2
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = t1.positional;
                positional = H._setArrayType(
                  t2.slice(0),
                  H._arrayInstanceType(t2)
                );
                named = P.LinkedHashMap_LinkedHashMap$of(
                  t1.named,
                  type$.String,
                  type$.Expression_2
                );
                $async$goto = 3;
                return P._asyncAwait(
                  restArgs_.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateMacroArguments$1
                );
              case 3:
                // returning from await.
                rest = $async$result;
                restNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  restArgs_
                );
                if (rest instanceof A.SassMap0)
                  $async$self._async_evaluate0$_addRestMap$4(
                    named,
                    rest,
                    invocation,
                    new E._EvaluateVisitor__evaluateMacroArguments_closure7(
                      restArgs_
                    )
                  );
                else if (rest instanceof D.SassList0) {
                  t2 = rest._list1$_contents;
                  C.JSArray_methods.addAll$1(
                    positional,
                    new H.MappedListIterable(
                      t2,
                      new E._EvaluateVisitor__evaluateMacroArguments_closure8(
                        $async$self,
                        restNodeForSpan,
                        restArgs_
                      ),
                      H._arrayInstanceType(t2)._eval$1(
                        'MappedListIterable<1,Expression0>'
                      )
                    )
                  );
                  if (rest instanceof D.SassArgumentList0) {
                    rest._argument_list$_wereKeywordsAccessed = true;
                    rest._argument_list$_keywords.forEach$1(
                      0,
                      new E._EvaluateVisitor__evaluateMacroArguments_closure9(
                        $async$self,
                        named,
                        restNodeForSpan,
                        restArgs_
                      )
                    );
                  }
                } else
                  positional.push(
                    new F.ValueExpression0(
                      $async$self._async_evaluate0$_withoutSlash$2(
                        rest,
                        restNodeForSpan
                      ),
                      restArgs_.get$span()
                    )
                  );
                keywordRestArgs_ = t1.keywordRest;
                if (keywordRestArgs_ == null) {
                  $async$returnValue = new S.Tuple2(
                    positional,
                    named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression_2
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 4;
                return P._asyncAwait(
                  keywordRestArgs_.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateMacroArguments$1
                );
              case 4:
                // returning from await.
                keywordRest = $async$result;
                keywordRestNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(
                  keywordRestArgs_
                );
                if (keywordRest instanceof A.SassMap0) {
                  $async$self._async_evaluate0$_addRestMap$4(
                    named,
                    keywordRest,
                    invocation,
                    new E._EvaluateVisitor__evaluateMacroArguments_closure10(
                      $async$self,
                      keywordRestNodeForSpan,
                      keywordRestArgs_
                    )
                  );
                  $async$returnValue = new S.Tuple2(
                    positional,
                    named,
                    type$.Tuple2_of_List_Expression_and_Map_String_Expression_2
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      string$.Variabs + keywordRest.toString$0(0) + ').',
                      keywordRestArgs_.get$span()
                    )
                  );
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_evaluateMacroArguments$1,
        $async$completer
      );
    },
    _async_evaluate0$_addRestMap$1$4(values, map, nodeWithSpan, convert) {
      map.contents.forEach$1(
        0,
        new E._EvaluateVisitor__addRestMap_closure1(
          this,
          values,
          convert,
          this._async_evaluate0$_expressionNode$1(nodeWithSpan),
          map,
          nodeWithSpan
        )
      );
    },
    _async_evaluate0$_addRestMap$4(values, map, nodeWithSpan, convert) {
      return this._async_evaluate0$_addRestMap$1$4(
        values,
        map,
        nodeWithSpan,
        convert,
        type$.dynamic
      );
    },
    _async_evaluate0$_verifyArguments$4(
      positional,
      named,
      $arguments,
      nodeWithSpan
    ) {
      return this._async_evaluate0$_addExceptionSpan$2(
        nodeWithSpan,
        new E._EvaluateVisitor__verifyArguments_closure1(
          $arguments,
          positional,
          named
        )
      );
    },
    visitSelectorExpression$1(node) {
      return this.visitSelectorExpression$body$_EvaluateVisitor0(node);
    },
    visitSelectorExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$visitSelectorExpression$1 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
                t1 = t1 == null ? null : t1.originalSelector.get$asSassList();
                $async$returnValue = t1 == null ? C.C__SassNull : t1;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$visitSelectorExpression$1,
        $async$completer
      );
    },
    visitStringExpression$1(node) {
      return this.visitStringExpression$body$_EvaluateVisitor0(node);
    },
    visitStringExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassString_2),
        $async$returnValue,
        $async$self = this,
        $async$temp1,
        $async$temp2;
      var $async$visitStringExpression$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = D;
              $async$temp2 = J;
              $async$goto = 3;
              return P._asyncAwait(
                B.mapAsync0(
                  node.text.contents,
                  new E._EvaluateVisitor_visitStringExpression_closure1(
                    $async$self
                  ),
                  type$.Object,
                  type$.String
                ),
                $async$visitStringExpression$1
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.SassString0(
                $async$temp2.join$0$ax($async$result),
                node.hasQuotes
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitStringExpression$1,
        $async$completer
      );
    },
    visitCssAtRule$1(node) {
      return this.visitCssAtRule$body$_EvaluateVisitor0(node);
    },
    visitCssAtRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        wasInKeyframes,
        wasInUnknownAtRule,
        t1;
      var $async$visitCssAtRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.At_rul,
                    node.span
                  )
                );
              if (node.isChildless) {
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__parent,
                    '__parent'
                  )
                  .addChild$1(
                    U.ModifiableCssAtRule$0(
                      node.name,
                      node.span,
                      true,
                      node.value
                    )
                  );
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate0$_inKeyframes;
              wasInUnknownAtRule =
                $async$self._async_evaluate0$_inUnknownAtRule;
              t1 = node.name;
              if (B.unvendor0(t1.get$value(t1)) === 'keyframes')
                $async$self._async_evaluate0$_inKeyframes = true;
              else $async$self._async_evaluate0$_inUnknownAtRule = true;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssAtRule$0(t1, node.span, false, node.value),
                  new E._EvaluateVisitor_visitCssAtRule_closure3(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssAtRule_closure4(),
                  type$.ModifiableCssAtRule_2,
                  type$.Null
                ),
                $async$visitCssAtRule$1
              );
            case 3:
              // returning from await.
              $async$self._async_evaluate0$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate0$_inKeyframes = wasInKeyframes;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssAtRule$1, $async$completer);
    },
    visitCssComment$1(node) {
      return this.visitCssComment$body$_EvaluateVisitor0(node);
    },
    visitCssComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssComment$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ) ===
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__root,
                    '_root'
                  ) &&
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__endOfImports,
                  '_endOfImports'
                ) ===
                  J.get$length$asx(
                    $async$self._async_evaluate0$_assertInModule$2(
                      $async$self._async_evaluate0$__root,
                      '_root'
                    ).children._collection$_source
                  )
              )
                $async$self._async_evaluate0$__endOfImports =
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              $async$self
                ._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                )
                .addChild$1(new R.ModifiableCssComment0(node.text, node.span));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssComment$1, $async$completer);
    },
    visitCssDeclaration$1(node) {
      return this.visitCssDeclaration$body$_EvaluateVisitor0(node);
    },
    visitCssDeclaration$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1;
      var $async$visitCssDeclaration$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.name;
              $async$self
                ._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                )
                .addChild$1(
                  L.ModifiableCssDeclaration$0(
                    t1,
                    node.value,
                    node.span,
                    J.startsWith$1$s(t1.get$value(t1), '--'),
                    node.valueSpanForMap
                  )
                );
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssDeclaration$1, $async$completer);
    },
    visitCssImport$1(node) {
      return this.visitCssImport$body$_EvaluateVisitor0(node);
    },
    visitCssImport$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        modifiableNode;
      var $async$visitCssImport$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              modifiableNode = F.ModifiableCssImport$0(
                node.url,
                node.span,
                node.media,
                node.supports
              );
              if (
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ) !==
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__root,
                  '_root'
                )
              )
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__parent,
                    '__parent'
                  )
                  .addChild$1(modifiableNode);
              else if (
                $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__endOfImports,
                  '_endOfImports'
                ) ===
                J.get$length$asx(
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__root,
                    '_root'
                  ).children._collection$_source
                )
              ) {
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__root,
                    '_root'
                  )
                  .addChild$1(modifiableNode);
                $async$self._async_evaluate0$__endOfImports =
                  $async$self._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__endOfImports,
                    '_endOfImports'
                  ) + 1;
              } else {
                t1 = $async$self._async_evaluate0$_outOfOrderImports;
                (t1 == null
                  ? ($async$self._async_evaluate0$_outOfOrderImports = H._setArrayType(
                      [],
                      type$.JSArray_ModifiableCssImport_2
                    ))
                  : t1
                ).push(modifiableNode);
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssImport$1, $async$completer);
    },
    visitCssKeyframeBlock$1(node) {
      return this.visitCssKeyframeBlock$body$_EvaluateVisitor0(node);
    },
    visitCssKeyframeBlock$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssKeyframeBlock$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  U.ModifiableCssKeyframeBlock$0(node.selector, node.span),
                  new E._EvaluateVisitor_visitCssKeyframeBlock_closure3(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssKeyframeBlock_closure4(),
                  type$.ModifiableCssKeyframeBlock_2,
                  type$.Null
                ),
                $async$visitCssKeyframeBlock$1
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync(
        $async$visitCssKeyframeBlock$1,
        $async$completer
      );
    },
    visitCssMediaRule$1(node) {
      return this.visitCssMediaRule$body$_EvaluateVisitor0(node);
    },
    visitCssMediaRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        mergedQueries,
        t1;
      var $async$visitCssMediaRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Media_,
                    node.span
                  )
                );
              mergedQueries = X.NullableExtension_andThen0(
                $async$self._async_evaluate0$_mediaQueries,
                new E._EvaluateVisitor_visitCssMediaRule_closure5(
                  $async$self,
                  node
                )
              );
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? node.queries : mergedQueries;
              $async$goto = 3;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  G.ModifiableCssMediaRule$0(t1, node.span),
                  new E._EvaluateVisitor_visitCssMediaRule_closure6(
                    $async$self,
                    mergedQueries,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssMediaRule_closure7(
                    mergedQueries
                  ),
                  type$.ModifiableCssMediaRule_2,
                  type$.Null
                ),
                $async$visitCssMediaRule$1
              );
            case 3:
            // returning from await.
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssMediaRule$1, $async$completer);
    },
    visitCssStyleRule$1(node) {
      return this.visitCssStyleRule$body$_EvaluateVisitor0(node);
    },
    visitCssStyleRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        styleRule,
        t2,
        t3,
        t4,
        t5,
        originalSelector,
        rule,
        oldAtRootExcludingStyleRule;
      var $async$visitCssStyleRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Style_,
                    node.span
                  )
                );
              t1 = $async$self._async_evaluate0$_atRootExcludingStyleRule;
              styleRule = t1
                ? null
                : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
              t2 = node.selector;
              t3 = t2.value;
              t4 = styleRule == null;
              t5 = t4 ? null : styleRule.originalSelector;
              originalSelector = t3.resolveParentSelectors$2$implicitParent(
                t5,
                !t1
              );
              rule = X.ModifiableCssStyleRule$0(
                $async$self
                  ._async_evaluate0$_assertInModule$2(
                    $async$self._async_evaluate0$__extensionStore,
                    '_extensionStore'
                  )
                  .addSelector$3(
                    originalSelector,
                    t2.span,
                    $async$self._async_evaluate0$_mediaQueries
                  ),
                node.span,
                originalSelector
              );
              oldAtRootExcludingStyleRule =
                $async$self._async_evaluate0$_atRootExcludingStyleRule;
              $async$self._async_evaluate0$_atRootExcludingStyleRule = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  rule,
                  new E._EvaluateVisitor_visitCssStyleRule_closure3(
                    $async$self,
                    rule,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssStyleRule_closure4(),
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$visitCssStyleRule$1
              );
            case 2:
              // returning from await.
              $async$self._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if (t4) {
                t1 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ).children;
                t1 = !t1.get$isEmpty(t1);
              } else t1 = false;
              if (t1) {
                t1 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                ).children;
                t1.get$last(t1).isGroupEnd = true;
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssStyleRule$1, $async$completer);
    },
    visitCssStylesheet$1(node) {
      return this.visitCssStylesheet$body$_EvaluateVisitor0(node);
    },
    visitCssStylesheet$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1;
      var $async$visitCssStylesheet$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$iterator$ax(node.get$children(node));
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t1.get$current().accept$1($async$self),
                $async$visitCssStylesheet$1
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssStylesheet$1, $async$completer);
    },
    visitCssSupportsRule$1(node) {
      return this.visitCssSupportsRule$body$_EvaluateVisitor0(node);
    },
    visitCssSupportsRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssSupportsRule$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw H.wrapException(
                  $async$self._async_evaluate0$_exception$2(
                    string$.Suppor,
                    node.span
                  )
                );
              $async$goto = 2;
              return P._asyncAwait(
                $async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(
                  B.ModifiableCssSupportsRule$0(node.condition, node.span),
                  new E._EvaluateVisitor_visitCssSupportsRule_closure3(
                    $async$self,
                    node
                  ),
                  false,
                  new E._EvaluateVisitor_visitCssSupportsRule_closure4(),
                  type$.ModifiableCssSupportsRule_2,
                  type$.Null
                ),
                $async$visitCssSupportsRule$1
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$visitCssSupportsRule$1, $async$completer);
    },
    _async_evaluate0$_handleReturn$1$2(list, callback) {
      return this._handleReturn$body$_EvaluateVisitor0(list, callback);
    },
    _async_evaluate0$_handleReturn$2(list, callback) {
      return this._async_evaluate0$_handleReturn$1$2(
        list,
        callback,
        type$.dynamic
      );
    },
    _handleReturn$body$_EvaluateVisitor0(list, callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        t1,
        _i,
        result;
      var $async$_async_evaluate0$_handleReturn$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = list.length), (_i = 0);
              case 3:
                // for condition
                if (!(_i < list.length)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                $async$goto = 6;
                return P._asyncAwait(
                  callback.call$1(list[_i]),
                  $async$_async_evaluate0$_handleReturn$1$2
                );
              case 6:
                // returning from await.
                result = $async$result;
                if (result != null) {
                  $async$returnValue = result;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 4:
                // for update
                list.length === t1 ||
                  (0, H.throwConcurrentModificationError)(list),
                  ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_handleReturn$1$2,
        $async$completer
      );
    },
    _async_evaluate0$_withEnvironment$1$2(environment, callback, $T) {
      return this._withEnvironment$body$_EvaluateVisitor0(
        environment,
        callback,
        $T,
        $T
      );
    },
    _withEnvironment$body$_EvaluateVisitor0(
      environment,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldEnvironment;
      var $async$_async_evaluate0$_withEnvironment$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldEnvironment = $async$self._async_evaluate0$_environment;
                $async$self._async_evaluate0$_environment = environment;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_withEnvironment$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_environment = oldEnvironment;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_withEnvironment$1$2,
        $async$completer
      );
    },
    _async_evaluate0$_interpolationToValue$3$trim$warnForColor(
      interpolation,
      trim,
      warnForColor
    ) {
      return this._interpolationToValue$body$_EvaluateVisitor0(
        interpolation,
        trim,
        warnForColor
      );
    },
    _async_evaluate0$_interpolationToValue$1(interpolation) {
      return this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        false
      );
    },
    _async_evaluate0$_interpolationToValue$2$warnForColor(
      interpolation,
      warnForColor
    ) {
      return this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(
        interpolation,
        false,
        warnForColor
      );
    },
    _interpolationToValue$body$_EvaluateVisitor0(
      interpolation,
      trim,
      warnForColor
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_String_2),
        $async$returnValue,
        $async$self = this,
        result,
        t1;
      var $async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_performInterpolation$2$warnForColor(
                    interpolation,
                    warnForColor
                  ),
                  $async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor
                );
              case 3:
                // returning from await.
                result = $async$result;
                t1 = trim ? B.trimAscii0(result, true) : result;
                $async$returnValue = new F.CssValue0(
                  t1,
                  interpolation.span,
                  type$.CssValue_String_2
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor,
        $async$completer
      );
    },
    _async_evaluate0$_performInterpolation$2$warnForColor(
      interpolation,
      warnForColor
    ) {
      return this._performInterpolation$body$_EvaluateVisitor0(
        interpolation,
        warnForColor
      );
    },
    _async_evaluate0$_performInterpolation$1(interpolation) {
      return this._async_evaluate0$_performInterpolation$2$warnForColor(
        interpolation,
        false
      );
    },
    _performInterpolation$body$_EvaluateVisitor0(interpolation, warnForColor) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$_async_evaluate0$_performInterpolation$2$warnForColor = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncAwait(
                  B.mapAsync0(
                    interpolation.contents,
                    new E._EvaluateVisitor__performInterpolation_closure1(
                      $async$self,
                      warnForColor,
                      interpolation
                    ),
                    type$.Object,
                    type$.String
                  ),
                  $async$_async_evaluate0$_performInterpolation$2$warnForColor
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$temp1.join$0$ax($async$result);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_performInterpolation$2$warnForColor,
        $async$completer
      );
    },
    _async_evaluate0$_evaluateToCss$2$quote(expression, quote) {
      return this._evaluateToCss$body$_EvaluateVisitor0(expression, quote);
    },
    _async_evaluate0$_evaluateToCss$1(expression) {
      return this._async_evaluate0$_evaluateToCss$2$quote(expression, true);
    },
    _evaluateToCss$body$_EvaluateVisitor0(expression, quote) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this;
      var $async$_async_evaluate0$_evaluateToCss$2$quote = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  expression.accept$1($async$self),
                  $async$_async_evaluate0$_evaluateToCss$2$quote
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$self._async_evaluate0$_serialize$3$quote(
                  $async$result,
                  expression,
                  quote
                );
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_evaluateToCss$2$quote,
        $async$completer
      );
    },
    _async_evaluate0$_serialize$3$quote(value, nodeWithSpan, quote) {
      return this._async_evaluate0$_addExceptionSpan$2(
        nodeWithSpan,
        new E._EvaluateVisitor__serialize_closure1(value, quote)
      );
    },
    _async_evaluate0$_serialize$2(value, nodeWithSpan) {
      return this._async_evaluate0$_serialize$3$quote(
        value,
        nodeWithSpan,
        true
      );
    },
    _async_evaluate0$_expressionNode$1(expression) {
      var t1;
      if (expression instanceof S.VariableExpression0) {
        t1 = this._async_evaluate0$_addExceptionSpan$2(
          expression,
          new E._EvaluateVisitor__expressionNode_closure1(this, expression)
        );
        return t1 == null ? expression : t1;
      } else return expression;
    },
    _async_evaluate0$_withParent$2$4$scopeWhen$through(
      node,
      callback,
      scopeWhen,
      through,
      $S,
      $T
    ) {
      return this._withParent$body$_EvaluateVisitor0(
        node,
        callback,
        scopeWhen,
        through,
        $S,
        $T,
        $T
      );
    },
    _async_evaluate0$_withParent$2$3$scopeWhen(
      node,
      callback,
      scopeWhen,
      $S,
      $T
    ) {
      return this._async_evaluate0$_withParent$2$4$scopeWhen$through(
        node,
        callback,
        scopeWhen,
        null,
        $S,
        $T
      );
    },
    _async_evaluate0$_withParent$2$2(node, callback, $S, $T) {
      return this._async_evaluate0$_withParent$2$4$scopeWhen$through(
        node,
        callback,
        true,
        null,
        $S,
        $T
      );
    },
    _withParent$body$_EvaluateVisitor0(
      node,
      callback,
      scopeWhen,
      through,
      $S,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$_async_evaluate0$_withParent$2$4$scopeWhen$through = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self._async_evaluate0$_addChild$2$through(node, through);
                t1 = $async$self._async_evaluate0$_assertInModule$2(
                  $async$self._async_evaluate0$__parent,
                  '__parent'
                );
                $async$self._async_evaluate0$__parent = node;
                $async$goto = 3;
                return P._asyncAwait(
                  $async$self._async_evaluate0$_environment.scope$1$2$when(
                    callback,
                    scopeWhen,
                    $T
                  ),
                  $async$_async_evaluate0$_withParent$2$4$scopeWhen$through
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$__parent = t1;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_withParent$2$4$scopeWhen$through,
        $async$completer
      );
    },
    _async_evaluate0$_addChild$2$through(node, through) {
      var grandparent,
        t1,
        $parent = this._async_evaluate0$_assertInModule$2(
          this._async_evaluate0$__parent,
          '__parent'
        );
      if (through != null) {
        for (; through.call$1($parent); $parent = grandparent) {
          grandparent = $parent._node2$_parent;
          if (grandparent == null)
            throw H.wrapException(
              P.ArgumentError$(string$.throug + node.toString$0(0) + '.', null)
            );
        }
        if ($parent.get$hasFollowingSibling()) {
          t1 = $parent._node2$_parent;
          t1.toString;
          $parent = $parent.copyWithoutChildren$0();
          t1.addChild$1($parent);
        }
      }
      $parent.addChild$1(node);
    },
    _async_evaluate0$_addChild$1(node) {
      return this._async_evaluate0$_addChild$2$through(node, null);
    },
    _async_evaluate0$_withStyleRule$1$2(rule, callback, $T) {
      return this._withStyleRule$body$_EvaluateVisitor0(rule, callback, $T, $T);
    },
    _withStyleRule$body$_EvaluateVisitor0(rule, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldRule;
      var $async$_async_evaluate0$_withStyleRule$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldRule = $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
                $async$self._async_evaluate0$_styleRuleIgnoringAtRoot = rule;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_withStyleRule$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_styleRuleIgnoringAtRoot = oldRule;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_withStyleRule$1$2,
        $async$completer
      );
    },
    _async_evaluate0$_withMediaQueries$1$2(queries, callback, $T) {
      return this._withMediaQueries$body$_EvaluateVisitor0(
        queries,
        callback,
        $T,
        $T
      );
    },
    _withMediaQueries$body$_EvaluateVisitor0(
      queries,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        result,
        oldMediaQueries;
      var $async$_async_evaluate0$_withMediaQueries$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                oldMediaQueries = $async$self._async_evaluate0$_mediaQueries;
                $async$self._async_evaluate0$_mediaQueries = queries;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_withMediaQueries$1$2
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_mediaQueries = oldMediaQueries;
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_withMediaQueries$1$2,
        $async$completer
      );
    },
    _async_evaluate0$_withStackFrame$1$3(member, nodeWithSpan, callback, $T) {
      return this._withStackFrame$body$_EvaluateVisitor0(
        member,
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _withStackFrame$body$_EvaluateVisitor0(
      member,
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        oldMember,
        result,
        t1;
      var $async$_async_evaluate0$_withStackFrame$1$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._async_evaluate0$_stack;
                t1.push(
                  new S.Tuple2(
                    $async$self._async_evaluate0$_member,
                    nodeWithSpan,
                    type$.Tuple2_String_AstNode_2
                  )
                );
                oldMember = $async$self._async_evaluate0$_member;
                $async$self._async_evaluate0$_member = member;
                $async$goto = 3;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_withStackFrame$1$3
                );
              case 3:
                // returning from await.
                result = $async$result;
                $async$self._async_evaluate0$_member = oldMember;
                t1.pop();
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_withStackFrame$1$3,
        $async$completer
      );
    },
    _async_evaluate0$_withoutSlash$2(value, nodeForSpan) {
      if (value instanceof T.SassNumber0 && value.asSlash != null)
        this._async_evaluate0$_warn$3$deprecation(
          string$.Using__ +
            H.S(
              new E._EvaluateVisitor__withoutSlash_recommendation1().call$1(
                value
              )
            ) +
            string$.x0a_More,
          nodeForSpan.get$span(),
          true
        );
      return value.withoutSlash$0();
    },
    _async_evaluate0$_stackFrame$2(member, span) {
      return B.frameForSpan0(
        span,
        member,
        X.NullableExtension_andThen0(
          span.file.url,
          new E._EvaluateVisitor__stackFrame_closure1(this)
        )
      );
    },
    _async_evaluate0$_stackTrace$1(span) {
      var _this = this,
        t1 = _this._async_evaluate0$_stack;
      t1 = P.List_List$of(
        new H.MappedListIterable(
          t1,
          new E._EvaluateVisitor__stackTrace_closure1(_this),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Frame>')
        ),
        true,
        type$.Frame
      );
      if (span != null)
        t1.push(
          _this._async_evaluate0$_stackFrame$2(
            _this._async_evaluate0$_member,
            span
          )
        );
      return Y.Trace$(
        new H.ReversedListIterable(
          t1,
          H._arrayInstanceType(t1)._eval$1('ReversedListIterable<1>')
        ),
        null
      );
    },
    _async_evaluate0$_stackTrace$0() {
      return this._async_evaluate0$_stackTrace$1(null);
    },
    _async_evaluate0$_warn$3$deprecation(message, span, deprecation) {
      var _this = this;
      if (
        _this._async_evaluate0$_quietDeps &&
        _this._async_evaluate0$_inDependency
      )
        return;
      if (
        !_this._async_evaluate0$_warningsEmitted.add$1(
          0,
          new S.Tuple2(message, span, type$.Tuple2_String_SourceSpan)
        )
      )
        return;
      _this._async_evaluate0$_logger.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        _this._async_evaluate0$_stackTrace$1(span)
      );
    },
    _async_evaluate0$_warn$2(message, span) {
      return this._async_evaluate0$_warn$3$deprecation(message, span, false);
    },
    _async_evaluate0$_exception$2(message, span) {
      var t1 =
        span == null
          ? C.JSArray_methods.get$last(
              this._async_evaluate0$_stack
            ).item2.get$span()
          : span;
      return new E.SassRuntimeException0(
        this._async_evaluate0$_stackTrace$1(span),
        message,
        t1
      );
    },
    _async_evaluate0$_exception$1(message) {
      return this._async_evaluate0$_exception$2(message, null);
    },
    _async_evaluate0$_multiSpanException$3(
      message,
      primaryLabel,
      secondaryLabels
    ) {
      var t1 = C.JSArray_methods.get$last(
        this._async_evaluate0$_stack
      ).item2.get$span();
      return new E.MultiSpanSassRuntimeException0(
        this._async_evaluate0$_stackTrace$0(),
        primaryLabel,
        H.ConstantMap_ConstantMap$from(
          secondaryLabels,
          type$.FileSpan,
          type$.String
        ),
        message,
        t1
      );
    },
    _async_evaluate0$_adjustParseError$1$2(nodeWithSpan, callback) {
      var error,
        errorText,
        span,
        syntheticFile,
        syntheticSpan,
        t1,
        exception,
        t2,
        t3,
        t4,
        t5,
        _null = null;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException0) {
          error = t1;
          t1 = error;
          errorText = P.String_String$fromCharCodes(
            C.NativeUint32List_methods.sublist$2(
              G.SourceSpanException.prototype.get$span.call(t1).file
                ._decodedChars,
              0,
              _null
            ),
            0,
            _null
          );
          span = nodeWithSpan.get$span();
          t1 = span;
          t2 = span;
          syntheticFile = C.JSString_methods.replaceRange$3(
            P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                span.file._decodedChars,
                0,
                _null
              ),
              0,
              _null
            ),
            Y.FileLocation$_(t1.file, t1._file$_start).offset,
            Y.FileLocation$_(t2.file, t2._end).offset,
            errorText
          );
          t2 = Y.SourceFile$fromString(syntheticFile, span.file.url);
          t1 = span;
          t1 = Y.FileLocation$_(t1.file, t1._file$_start);
          t3 = error;
          t3 = G.SourceSpanException.prototype.get$span.call(t3);
          t3 = Y.FileLocation$_(t3.file, t3._file$_start);
          t4 = span;
          t4 = Y.FileLocation$_(t4.file, t4._file$_start);
          t5 = error;
          t5 = G.SourceSpanException.prototype.get$span.call(t5);
          syntheticSpan = t2.span$2(
            t1.offset + t3.offset,
            t4.offset + Y.FileLocation$_(t5.file, t5._end).offset
          );
          throw H.wrapException(
            this._async_evaluate0$_exception$2(
              error._span_exception$_message,
              syntheticSpan
            )
          );
        } else throw exception;
      }
    },
    _async_evaluate0$_adjustParseError$2(nodeWithSpan, callback) {
      return this._async_evaluate0$_adjustParseError$1$2(
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _async_evaluate0$_addExceptionSpan$1$2(nodeWithSpan, callback) {
      var error, error0, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.MultiSpanSassScriptException0) {
          error = t1;
          throw H.wrapException(
            E.MultiSpanSassRuntimeException$0(
              error.message,
              nodeWithSpan.get$span(),
              error.primaryLabel,
              error.secondarySpans,
              this._async_evaluate0$_stackTrace$1(nodeWithSpan.get$span())
            )
          );
        } else if (t1 instanceof E.SassScriptException0) {
          error0 = t1;
          throw H.wrapException(
            this._async_evaluate0$_exception$2(
              error0.message,
              nodeWithSpan.get$span()
            )
          );
        } else throw exception;
      }
    },
    _async_evaluate0$_addExceptionSpan$2(nodeWithSpan, callback) {
      return this._async_evaluate0$_addExceptionSpan$1$2(
        nodeWithSpan,
        callback,
        type$.dynamic
      );
    },
    _async_evaluate0$_addExceptionSpanAsync$1$2(nodeWithSpan, callback, $T) {
      return this._addExceptionSpanAsync$body$_EvaluateVisitor0(
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _addExceptionSpanAsync$body$_EvaluateVisitor0(
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        error,
        error0,
        t1,
        exception,
        $async$exception;
      var $async$_async_evaluate0$_addExceptionSpanAsync$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$handler = 4;
                $async$goto = 7;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_addExceptionSpanAsync$1$2
                );
              case 7:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (t1 instanceof E.MultiSpanSassScriptException0) {
                  error = t1;
                  throw H.wrapException(
                    E.MultiSpanSassRuntimeException$0(
                      error.message,
                      nodeWithSpan.get$span(),
                      error.primaryLabel,
                      error.secondarySpans,
                      $async$self._async_evaluate0$_stackTrace$1(
                        nodeWithSpan.get$span()
                      )
                    )
                  );
                } else if (t1 instanceof E.SassScriptException0) {
                  error0 = t1;
                  throw H.wrapException(
                    $async$self._async_evaluate0$_exception$2(
                      error0.message,
                      nodeWithSpan.get$span()
                    )
                  );
                } else throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_addExceptionSpanAsync$1$2,
        $async$completer
      );
    },
    _async_evaluate0$_addErrorSpan$1$2(nodeWithSpan, callback, $T) {
      return this._addErrorSpan$body$_EvaluateVisitor0(
        nodeWithSpan,
        callback,
        $T,
        $T
      );
    },
    _addErrorSpan$body$_EvaluateVisitor0(
      nodeWithSpan,
      callback,
      $T,
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$handler = 2,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        error,
        t1,
        exception,
        $async$exception;
      var $async$_async_evaluate0$_addErrorSpan$1$2 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$handler = 4;
                $async$goto = 7;
                return P._asyncAwait(
                  callback.call$0(),
                  $async$_async_evaluate0$_addErrorSpan$1$2
                );
              case 7:
                // returning from await.
                t1 = $async$result;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                t1 = H.unwrapException($async$exception);
                if (type$.SassRuntimeException_2._is(t1)) {
                  error = t1;
                  t1 = error.get$span();
                  if (
                    !C.JSString_methods.startsWith$1(
                      P.String_String$fromCharCodes(
                        C.NativeUint32List_methods.sublist$2(
                          t1.file._decodedChars,
                          t1._file$_start,
                          t1._end
                        ),
                        0,
                        null
                      ),
                      '@error'
                    )
                  )
                    throw $async$exception;
                  throw H.wrapException(
                    E.SassRuntimeException$0(
                      error._span_exception$_message,
                      nodeWithSpan.get$span(),
                      $async$self._async_evaluate0$_stackTrace$0()
                    )
                  );
                } else throw $async$exception;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
              // after finally
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return P._asyncRethrow($async$currentError, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_evaluate0$_addErrorSpan$1$2,
        $async$completer
      );
    },
  };
  E._EvaluateVisitor_closure19.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._async_evaluate0$_environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.globalVariableExists$2$namespace(
        t2,
        module == null ? null : module.text
      )
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  E._EvaluateVisitor_closure20.prototype = {
    call$1($arguments) {
      var variable = J.$index$asx($arguments, 0).assertString$1('name'),
        t1 = this.$this._async_evaluate0$_environment;
      return t1.getVariable$1(
        H.stringReplaceAllUnchecked(variable.text, '_', '-')
      ) != null
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  E._EvaluateVisitor_closure21.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t3,
        t4,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this;
      t2 = t1._async_evaluate0$_environment;
      t3 = variable.text;
      t4 = H.stringReplaceAllUnchecked(t3, '_', '-');
      return t2.getFunction$2$namespace(
        t4,
        module == null ? null : module.text
      ) != null || t1._async_evaluate0$_builtInFunctions.containsKey$1(t3)
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  E._EvaluateVisitor_closure22.prototype = {
    call$1($arguments) {
      var module,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1('name');
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      t1 = this.$this._async_evaluate0$_environment;
      t2 = H.stringReplaceAllUnchecked(variable.text, '_', '-');
      return t1.getMixin$2$namespace(t2, module == null ? null : module.text) !=
        null
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  E._EvaluateVisitor_closure23.prototype = {
    call$1($arguments) {
      var t1 = this.$this._async_evaluate0$_environment;
      if (!t1._async_environment0$_inMixin)
        throw H.wrapException(E.SassScriptException$0(string$.conten));
      return t1._async_environment0$_content != null
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  E._EvaluateVisitor_closure24.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._async_evaluate0$_environment._async_environment0$_modules.$index(
          0,
          t1
        );
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value_2;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$variables(),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, new D.SassString0(t4.key, true), t4.value);
      }
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 38,
  };
  E._EvaluateVisitor_closure25.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.$index$asx($arguments, 0).assertString$1('module').text,
        module = this.$this._async_evaluate0$_environment._async_environment0$_modules.$index(
          0,
          t1
        );
      if (module == null)
        throw H.wrapException(
          'There is no module with namespace "' + t1 + '".'
        );
      t1 = type$.Value_2;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = module.get$functions(module),
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(
          0,
          new D.SassString0(t4.key, true),
          new F.SassFunction0(t4.value)
        );
      }
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 38,
  };
  E._EvaluateVisitor_closure26.prototype = {
    call$1($arguments) {
      var module,
        callable,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        $name = t1.$index($arguments, 0).assertString$1('name'),
        css = t1.$index($arguments, 1).get$isTruthy();
      t1 = t1.$index($arguments, 2).get$realNull();
      module = t1 == null ? null : t1.assertString$1('module');
      if (css && module != null) throw H.wrapException(string$.x24css_a);
      if (css) callable = new L.PlainCssCallable0($name.text);
      else {
        t1 = this.$this;
        t2 = t1._async_evaluate0$_callableNode;
        t2.toString;
        callable = t1._async_evaluate0$_addExceptionSpan$2(
          t2,
          new E._EvaluateVisitor__closure7(t1, $name, module)
        );
      }
      if (callable != null) return new F.SassFunction0(callable);
      throw H.wrapException('Function not found: ' + $name.toString$0(0));
    },
    $signature: 301,
  };
  E._EvaluateVisitor__closure7.prototype = {
    call$0() {
      var t1 = H.stringReplaceAllUnchecked(this.name.text, '_', '-'),
        t2 = this.module;
      t2 = t2 == null ? null : t2.text;
      return this.$this._async_evaluate0$_getFunction$2$namespace(t1, t2);
    },
    $signature: 84,
  };
  E._EvaluateVisitor_closure27.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure2($arguments);
    },
    $call$body$_EvaluateVisitor_closure2($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        invocation,
        callableNode,
        t1,
        $function,
        args;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              $function = t1.$index($arguments, 0);
              args = type$.SassArgumentList_2._as(t1.$index($arguments, 1));
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_callableNode;
              t2.toString;
              t3 = H._setArrayType([], type$.JSArray_Expression_2);
              t4 = type$.String;
              t5 = type$.Expression_2;
              t6 = t2.get$span();
              t7 = t2.get$span();
              args._argument_list$_wereKeywordsAccessed = true;
              t8 = args._argument_list$_keywords;
              if (t8.get$isEmpty(t8)) t2 = null;
              else {
                t9 = type$.Value_2;
                t10 = P.LinkedHashMap_LinkedHashMap$_empty(t9, t9);
                for (
                  args._argument_list$_wereKeywordsAccessed = true,
                    t8 = t8.get$entries(t8),
                    t8 = t8.get$iterator(t8);
                  t8.moveNext$0();

                ) {
                  t11 = t8.get$current();
                  t10.$indexSet(
                    0,
                    new D.SassString0(t11.key, false),
                    t11.value
                  );
                }
                t2 = new F.ValueExpression0(
                  new A.SassMap0(H.ConstantMap_ConstantMap$from(t10, t9, t9)),
                  t2.get$span()
                );
              }
              invocation = new X.ArgumentInvocation0(
                P.List_List$unmodifiable(t3, t5),
                H.ConstantMap_ConstantMap$from(
                  P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                  t4,
                  t5
                ),
                new F.ValueExpression0(args, t7),
                t2,
                t6
              );
              $async$goto = $function instanceof D.SassString0 ? 3 : 4;
              break;
            case 3:
              // then
              N.warn0(string$.Passin + $function.toString$0(0) + '))', true);
              callableNode = t1._async_evaluate0$_callableNode;
              $async$goto = 5;
              return P._asyncAwait(
                t1.visitFunctionExpression$1(
                  new F.FunctionExpression0(
                    null,
                    $function.text,
                    invocation,
                    callableNode.get$span()
                  )
                ),
                $async$call$1
              );
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t2 = $function.assertFunction$1('function');
              t3 = t1._async_evaluate0$_callableNode;
              t3.toString;
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate0$_runFunctionCallable$3(
                  invocation,
                  t2.callable,
                  t3
                ),
                $async$call$1
              );
            case 6:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 122,
  };
  E._EvaluateVisitor_closure28.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure1($arguments);
    },
    $call$body$_EvaluateVisitor_closure1($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        withMap,
        t2,
        values,
        configuration,
        t1,
        url;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              url = P.Uri_parse(
                t1.$index($arguments, 0).assertString$1('url').text
              );
              t1 = t1.$index($arguments, 1).get$realNull();
              withMap = t1 == null ? null : t1.assertMap$1('with').contents;
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_callableNode;
              t2.toString;
              if (withMap != null) {
                values = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.String,
                  type$.ConfiguredValue_2
                );
                withMap.forEach$1(
                  0,
                  new E._EvaluateVisitor__closure5(values, t2.get$span(), t2)
                );
                configuration = new A.ExplicitConfiguration0(t2, values);
              } else configuration = C.Configuration_Map_empty0;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors(
                  url,
                  'load-css()',
                  t2,
                  new E._EvaluateVisitor__closure6(t1),
                  t2.get$span().file.url,
                  configuration,
                  true
                ),
                $async$call$1
              );
            case 3:
              // returning from await.
              t1._async_evaluate0$_assertConfigurationIsEmpty$2$nameInError(
                configuration,
                true
              );
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 303,
  };
  E._EvaluateVisitor__closure5.prototype = {
    call$2(variable, value) {
      var t1 = variable.assertString$1('with key'),
        $name = H.stringReplaceAllUnchecked(t1.text, '_', '-');
      t1 = this.values;
      if (t1.containsKey$1($name))
        throw H.wrapException(
          'The variable $' + $name + ' was configured twice.'
        );
      t1.$indexSet(
        0,
        $name,
        new Z.ConfiguredValue0(value, this.span, this.callableNode)
      );
    },
    $signature: 63,
  };
  E._EvaluateVisitor__closure6.prototype = {
    call$1(module) {
      var t1 = this.$this;
      return t1._async_evaluate0$_combineCss$2$clone(module, true).accept$1(t1);
    },
    $signature: 186,
  };
  E._EvaluateVisitor_run_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.EvaluateResult_2),
        $async$returnValue,
        $async$self = this,
        t2,
        t1,
        url,
        $async$temp1,
        $async$temp2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node;
              url = t1.span.file.url;
              if (url != null) {
                t2 = $async$self.$this;
                t2._async_evaluate0$_activeModules.$indexSet(0, url, null);
                if (
                  !(
                    t2._async_evaluate0$_nodeImporter != null &&
                    url.toString$0(0) === 'stdin'
                  )
                )
                  t2._async_evaluate0$_loadedUrls.add$1(0, url);
              }
              t2 = $async$self.$this;
              $async$temp1 = E;
              $async$temp2 = t2;
              $async$goto = 3;
              return P._asyncAwait(
                t2._async_evaluate0$_execute$2($async$self.importer, t1),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.EvaluateResult0(
                $async$temp2._async_evaluate0$_combineCss$1($async$result),
                t2._async_evaluate0$_loadedUrls
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 306,
  };
  E._EvaluateVisitor__withWarnCallback_closure1.prototype = {
    call$2(message, deprecation) {
      var t1 = this.$this,
        t2 = t1._async_evaluate0$_importSpan;
      if (t2 == null) {
        t2 = t1._async_evaluate0$_callableNode;
        t2 = t2 == null ? null : t2.get$span();
      }
      return t1._async_evaluate0$_warn$3$deprecation(
        message,
        t2 == null ? this.nodeWithSpan.span : t2,
        deprecation
      );
    },
    $signature: 100,
  };
  E._EvaluateVisitor__loadModule_closure3.prototype = {
    call$0() {
      return this.callback.call$1(this.builtInModule);
    },
    $signature: 0,
  };
  E._EvaluateVisitor__loadModule_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1,
        $async$currentError,
        $async$next = [],
        $async$self = this,
        oldInDependency,
        module,
        error,
        error0,
        error1,
        error2,
        message,
        exception,
        t1,
        t2,
        result,
        stylesheet,
        canonicalUrl,
        $async$exception;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.nodeWithSpan;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_loadStylesheet$3$baseUrl(
                  $async$self.url.toString$0(0),
                  t2.get$span(),
                  $async$self.baseUrl
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              canonicalUrl = stylesheet.span.file.url;
              if (
                canonicalUrl != null &&
                t1._async_evaluate0$_activeModules.containsKey$1(canonicalUrl)
              ) {
                message = $async$self.namesInErrors
                  ? 'Module loop: ' +
                    $.$get$context().prettyUri$1(canonicalUrl) +
                    ' is already being loaded.'
                  : string$.Module;
                t2 = X.NullableExtension_andThen0(
                  t1._async_evaluate0$_activeModules.$index(0, canonicalUrl),
                  new E._EvaluateVisitor__loadModule__closure1(t1, message)
                );
                throw H.wrapException(
                  t2 == null ? t1._async_evaluate0$_exception$1(message) : t2
                );
              }
              if (canonicalUrl != null)
                t1._async_evaluate0$_activeModules.$indexSet(
                  0,
                  canonicalUrl,
                  t2
                );
              oldInDependency = t1._async_evaluate0$_inDependency;
              t1._async_evaluate0$_inDependency = result.isDependency;
              module = null;
              $async$handler = 3;
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan(
                  result.importer,
                  stylesheet,
                  $async$self.configuration,
                  $async$self.namesInErrors,
                  t2
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              module = $async$result;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              t1._async_evaluate0$_activeModules.remove$1(0, canonicalUrl);
              t1._async_evaluate0$_inDependency = oldInDependency;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return P._asyncAwait(
                $async$self.callback.call$1(module),
                $async$call$0
              );
            case 11:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception = $async$currentError;
              t2 = H.unwrapException($async$exception);
              if (type$.SassRuntimeException_2._is(t2)) throw $async$exception;
              else if (t2 instanceof E.MultiSpanSassException0) {
                error = t2;
                throw H.wrapException(
                  E.MultiSpanSassRuntimeException$0(
                    error._span_exception$_message,
                    error.get$span(),
                    error.primaryLabel,
                    error.secondarySpans,
                    t1._async_evaluate0$_stackTrace$1(error.get$span())
                  )
                );
              } else if (t2 instanceof E.SassException0) {
                error0 = t2;
                throw H.wrapException(
                  t1._async_evaluate0$_exception$2(
                    error0._span_exception$_message,
                    error0.get$span()
                  )
                );
              } else if (t2 instanceof E.MultiSpanSassScriptException0) {
                error1 = t2;
                throw H.wrapException(
                  t1._async_evaluate0$_multiSpanException$3(
                    error1.message,
                    error1.primaryLabel,
                    error1.secondarySpans
                  )
                );
              } else if (t2 instanceof E.SassScriptException0) {
                error2 = t2;
                throw H.wrapException(
                  t1._async_evaluate0$_exception$1(error2.message)
                );
              } else throw $async$exception;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__loadModule__closure1.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate0$_multiSpanException$3(
        this.message,
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 185,
  };
  E._EvaluateVisitor__execute_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t3,
        t4,
        t5,
        t6,
        t1,
        oldImporter,
        oldStylesheet,
        oldRoot,
        oldParent,
        oldEndOfImports,
        oldOutOfOrderImports,
        oldExtensionStore,
        t2,
        oldStyleRule,
        oldMediaQueries,
        oldDeclarationName,
        oldInUnknownAtRule,
        oldInKeyframes,
        oldConfiguration;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate0$_importer;
              oldStylesheet = t1._async_evaluate0$__stylesheet;
              oldRoot = t1._async_evaluate0$__root;
              oldParent = t1._async_evaluate0$__parent;
              oldEndOfImports = t1._async_evaluate0$__endOfImports;
              oldOutOfOrderImports = t1._async_evaluate0$_outOfOrderImports;
              oldExtensionStore = t1._async_evaluate0$__extensionStore;
              t2 = t1._async_evaluate0$_atRootExcludingStyleRule;
              oldStyleRule = t2
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              oldMediaQueries = t1._async_evaluate0$_mediaQueries;
              oldDeclarationName = t1._async_evaluate0$_declarationName;
              oldInUnknownAtRule = t1._async_evaluate0$_inUnknownAtRule;
              oldInKeyframes = t1._async_evaluate0$_inKeyframes;
              oldConfiguration = t1._async_evaluate0$_configuration;
              t1._async_evaluate0$_importer = $async$self.importer;
              t3 = t1._async_evaluate0$__stylesheet = $async$self.stylesheet;
              t4 = t3.span;
              t5 = t1._async_evaluate0$__parent = t1._async_evaluate0$__root = V.ModifiableCssStylesheet$0(
                t4
              );
              t1._async_evaluate0$__endOfImports = 0;
              t1._async_evaluate0$_outOfOrderImports = null;
              t1._async_evaluate0$__extensionStore = $async$self.extensionStore;
              t1._async_evaluate0$_declarationName = t1._async_evaluate0$_mediaQueries = t1._async_evaluate0$_styleRuleIgnoringAtRoot = null;
              t1._async_evaluate0$_inKeyframes = t1._async_evaluate0$_atRootExcludingStyleRule = t1._async_evaluate0$_inUnknownAtRule = false;
              t6 = $async$self.configuration;
              if (t6 != null) t1._async_evaluate0$_configuration = t6;
              $async$goto = 2;
              return P._asyncAwait(t1.visitStylesheet$1(t3), $async$call$0);
            case 2:
              // returning from await.
              t3 =
                t1._async_evaluate0$_outOfOrderImports == null
                  ? t5
                  : new V.CssStylesheet0(
                      new P.UnmodifiableListView(
                        t1._async_evaluate0$_addOutOfOrderImports$0(),
                        type$.UnmodifiableListView_CssNode_2
                      ),
                      t4
                    );
              $async$self.css._value = t3;
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = oldStylesheet;
              t1._async_evaluate0$__root = oldRoot;
              t1._async_evaluate0$__parent = oldParent;
              t1._async_evaluate0$__endOfImports = oldEndOfImports;
              t1._async_evaluate0$_outOfOrderImports = oldOutOfOrderImports;
              t1._async_evaluate0$__extensionStore = oldExtensionStore;
              t1._async_evaluate0$_styleRuleIgnoringAtRoot = oldStyleRule;
              t1._async_evaluate0$_mediaQueries = oldMediaQueries;
              t1._async_evaluate0$_declarationName = oldDeclarationName;
              t1._async_evaluate0$_inUnknownAtRule = oldInUnknownAtRule;
              t1._async_evaluate0$_atRootExcludingStyleRule = t2;
              t1._async_evaluate0$_inKeyframes = oldInKeyframes;
              t1._async_evaluate0$_configuration = oldConfiguration;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__combineCss_closure5.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 94,
  };
  E._EvaluateVisitor__combineCss_closure6.prototype = {
    call$1(target) {
      return !this.selectors.contains$1(0, target);
    },
    $signature: 19,
  };
  E._EvaluateVisitor__combineCss_closure7.prototype = {
    call$1(module) {
      return module.cloneCss$0();
    },
    $signature: 309,
  };
  E._EvaluateVisitor__extendModules_closure3.prototype = {
    call$1(target) {
      return !this.originalSelectors.contains$1(0, target);
    },
    $signature: 19,
  };
  E._EvaluateVisitor__extendModules_closure4.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_ExtensionStore_2);
    },
    $signature: 310,
  };
  E._EvaluateVisitor__topologicalModules_visitModule1.prototype = {
    call$1(module) {
      var t1, t2, t3, _i, upstream;
      for (
        t1 = module.get$upstream(), t2 = t1.length, t3 = this.seen, _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        upstream = t1[_i];
        if (upstream.get$transitivelyContainsCss() && t3.add$1(0, upstream))
          this.call$1(upstream);
      }
      this.sorted.addFirst$1(module);
    },
    $signature: 186,
  };
  E._EvaluateVisitor_visitAtRootRule_closure5.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new V.AtRootQueryParser0(
        t1,
        this.$this._async_evaluate0$_logger
      ).parse$0();
    },
    $signature: 182,
  };
  E._EvaluateVisitor_visitAtRootRule_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRootRule_closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure11.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__parent,
                '__parent'
              );
              t1._async_evaluate0$__parent = $async$self.newParent;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_environment.scope$1$2$when(
                  callback,
                  $async$self.node.hasDeclarations,
                  type$.void
                ),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate0$__parent = t2;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure12.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        oldAtRootExcludingStyleRule;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldAtRootExcludingStyleRule =
                t1._async_evaluate0$_atRootExcludingStyleRule;
              t1._async_evaluate0$_atRootExcludingStyleRule = true;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure13.prototype = {
    call$1(callback) {
      return this.$this._async_evaluate0$_withMediaQueries$1$2(
        null,
        new E._EvaluateVisitor__scopeForAtRoot__closure1(
          this.innerScope,
          callback
        ),
        type$.Null
      );
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot__closure1.prototype = {
    call$0() {
      return this.innerScope.call$1(this.callback);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure14.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        wasInKeyframes;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInKeyframes = t1._async_evaluate0$_inKeyframes;
              t1._async_evaluate0$_inKeyframes = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate0$_inKeyframes = wasInKeyframes;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure15.prototype = {
    call$1($parent) {
      return type$.CssAtRule_2._is($parent);
    },
    $signature: 312,
  };
  E._EvaluateVisitor__scopeForAtRoot_closure16.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        wasInUnknownAtRule;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInUnknownAtRule = t1._async_evaluate0$_inUnknownAtRule;
              t1._async_evaluate0$_inUnknownAtRule = false;
              $async$goto = 2;
              return P._asyncAwait(
                $async$self.innerScope.call$1(callback),
                $async$call$1
              );
            case 2:
              // returning from await.
              t1._async_evaluate0$_inUnknownAtRule = wasInUnknownAtRule;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 27,
  };
  E._EvaluateVisitor_visitContentRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.content.declaration.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 6:
            // returning from await.
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitDeclaration_closure3.prototype = {
    call$1(value) {
      return this.$call$body$_EvaluateVisitor_visitDeclaration_closure0(value);
    },
    $call$body$_EvaluateVisitor_visitDeclaration_closure0(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_Value_2),
        $async$returnValue,
        $async$self = this,
        $async$temp1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = F;
              $async$goto = 3;
              return P._asyncAwait(
                value.accept$1($async$self.$this),
                $async$call$1
              );
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.CssValue0(
                $async$result,
                value.get$span(),
                type$.CssValue_Value_2
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 313,
  };
  E._EvaluateVisitor_visitDeclaration_closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitEachRule_closure5.prototype = {
    call$1(value) {
      var t1 = this.$this,
        t2 = this.nodeWithSpan;
      return t1._async_evaluate0$_environment.setLocalVariable$3(
        C.JSArray_methods.get$first(this.node.variables),
        t1._async_evaluate0$_withoutSlash$2(value, t2),
        t2
      );
    },
    $signature: 59,
  };
  E._EvaluateVisitor_visitEachRule_closure6.prototype = {
    call$1(value) {
      return this.$this._async_evaluate0$_setMultipleVariables$3(
        this.node.variables,
        value,
        this.nodeWithSpan
      );
    },
    $signature: 59,
  };
  E._EvaluateVisitor_visitEachRule_closure7.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      return t1._async_evaluate0$_handleReturn$2(
        _this.list.get$asList(),
        new E._EvaluateVisitor_visitEachRule__closure1(
          t1,
          _this.setVariables,
          _this.node
        )
      );
    },
    $signature: 53,
  };
  E._EvaluateVisitor_visitEachRule__closure1.prototype = {
    call$1(element) {
      var t1;
      this.setVariables.call$1(element);
      t1 = this.$this;
      return t1._async_evaluate0$_handleReturn$2(
        this.node.children,
        new E._EvaluateVisitor_visitEachRule___closure1(t1)
      );
    },
    $signature: 316,
  };
  E._EvaluateVisitor_visitEachRule___closure1.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 62,
  };
  E._EvaluateVisitor_visitExtendRule_closure1.prototype = {
    call$0() {
      var t1 = this.targetText;
      return D.SelectorList_SelectorList$parse0(
        B.trimAscii0(t1.get$value(t1), true),
        false,
        true,
        this.$this._async_evaluate0$_logger
      );
    },
    $signature: 61,
  };
  E._EvaluateVisitor_visitAtRule_closure5.prototype = {
    call$1(value) {
      return this.$this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(
        value,
        true,
        true
      );
    },
    $signature: 319,
  };
  E._EvaluateVisitor_visitAtRule_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto =
                styleRule == null || t1._async_evaluate0$_inKeyframes ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate0$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$0(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitAtRule__closure1(
                    t1,
                    $async$self.children
                  ),
                  false,
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitAtRule_closure7.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitForRule_closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue,
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.node.from.accept$1($async$self.$this),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 172,
  };
  E._EvaluateVisitor_visitForRule_closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue,
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(
                $async$self.node.to.accept$1($async$self.$this),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 172,
  };
  E._EvaluateVisitor_visitForRule_closure11.prototype = {
    call$0() {
      return this.fromNumber.assertInt$0();
    },
    $signature: 18,
  };
  E._EvaluateVisitor_visitForRule_closure12.prototype = {
    call$0() {
      var t1 = this.fromNumber;
      return this.toNumber
        .coerce$2(t1.get$numeratorUnits(), t1.get$denominatorUnits())
        .assertInt$0();
    },
    $signature: 18,
  };
  E._EvaluateVisitor_visitForRule_closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        i,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        result,
        t1,
        t2,
        nodeWithSpan;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.node;
              nodeWithSpan = t1._async_evaluate0$_expressionNode$1(t2.from);
              (i = $async$self.from),
                (t3 = $async$self._box_0),
                (t4 = $async$self.direction),
                (t5 = t2.variable),
                (t6 = $async$self.fromNumber),
                (t2 = t2.children);
            case 3:
              // for condition
              if (!(i !== t3.to)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t7 = t1._async_evaluate0$_environment;
              t8 = t6.get$numeratorUnits();
              t7.setLocalVariable$3(
                t5,
                T.SassNumber_SassNumber$withUnits0(
                  i,
                  t6.get$denominatorUnits(),
                  t8
                ),
                nodeWithSpan
              );
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate0$_handleReturn$2(
                  t2,
                  new E._EvaluateVisitor_visitForRule__closure1(t1)
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              i += t4;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 53,
  };
  E._EvaluateVisitor_visitForRule__closure1.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 62,
  };
  E._EvaluateVisitor_visitForwardRule_closure3.prototype = {
    call$1(module) {
      this.$this._async_evaluate0$_environment.forwardModule$2(
        module,
        this.node
      );
    },
    $signature: 119,
  };
  E._EvaluateVisitor_visitForwardRule_closure4.prototype = {
    call$1(module) {
      this.$this._async_evaluate0$_environment.forwardModule$2(
        module,
        this.node
      );
    },
    $signature: 119,
  };
  E._EvaluateVisitor_visitIfRule_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._async_evaluate0$_handleReturn$2(
        this._box_0.clause.children,
        new E._EvaluateVisitor_visitIfRule__closure1(t1)
      );
    },
    $signature: 53,
  };
  E._EvaluateVisitor_visitIfRule__closure1.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 62,
  };
  E._EvaluateVisitor__visitDynamicImport_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t3,
        oldImporter,
        oldInDependency,
        children,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        environment,
        module,
        visitor,
        t1,
        t2,
        result,
        stylesheet,
        url;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.$import;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate0$_loadStylesheet$3$forImport(
                  t2.urlString,
                  t2.span,
                  true
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              url = stylesheet.span.file.url;
              if (url != null) {
                t3 = t1._async_evaluate0$_activeModules;
                if (t3.containsKey$1(url)) {
                  t2 = X.NullableExtension_andThen0(
                    t3.$index(0, url),
                    new E._EvaluateVisitor__visitDynamicImport__closure3(t1)
                  );
                  throw H.wrapException(
                    t2 == null
                      ? t1._async_evaluate0$_exception$1(
                          'This file is already being loaded.'
                        )
                      : t2
                  );
                }
                t3.$indexSet(0, url, t2);
              }
              t2 = new P.UnmodifiableListView(
                stylesheet._stylesheet1$_uses,
                type$.UnmodifiableListView_UseRule_2
              );
              if (t2.get$length(t2) === 0) {
                t2 = new P.UnmodifiableListView(
                  stylesheet._stylesheet1$_forwards,
                  type$.UnmodifiableListView_ForwardRule_2
                );
                t2 = t2.get$length(t2) === 0;
              } else t2 = false;
              $async$goto = t2 ? 4 : 5;
              break;
            case 4:
              // then
              oldImporter = t1._async_evaluate0$_importer;
              t2 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__stylesheet,
                '_stylesheet'
              );
              oldInDependency = t1._async_evaluate0$_inDependency;
              t1._async_evaluate0$_importer = result.importer;
              t1._async_evaluate0$__stylesheet = stylesheet;
              t1._async_evaluate0$_inDependency = result.isDependency;
              $async$goto = 6;
              return P._asyncAwait(
                t1.visitStylesheet$1(stylesheet),
                $async$call$0
              );
            case 6:
              // returning from await.
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = t2;
              t1._async_evaluate0$_inDependency = oldInDependency;
              t1._async_evaluate0$_activeModules.remove$1(0, url);
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              children = H._Cell$();
              t2 = t1._async_evaluate0$_environment;
              t3 = type$.String;
              t4 = type$.Module_AsyncCallable_2;
              t5 = type$.AstNode_2;
              t6 = H._setArrayType([], type$.JSArray_Module_AsyncCallable_2);
              t7 = t2._async_environment0$_variables;
              t7 = H._setArrayType(t7.slice(0), H._arrayInstanceType(t7));
              t8 = t2._async_environment0$_variableNodes;
              t8 = H._setArrayType(t8.slice(0), H._arrayInstanceType(t8));
              t9 = t2._async_environment0$_functions;
              t9 = H._setArrayType(t9.slice(0), H._arrayInstanceType(t9));
              t10 = t2._async_environment0$_mixins;
              t10 = H._setArrayType(t10.slice(0), H._arrayInstanceType(t10));
              environment = Q.AsyncEnvironment$_0(
                P.LinkedHashMap_LinkedHashMap$_empty(t3, t4),
                P.LinkedHashMap_LinkedHashMap$_empty(t3, t5),
                P.LinkedHashMap_LinkedHashMap$_empty(t4, t5),
                t2._async_environment0$_importedModules,
                null,
                null,
                t6,
                t7,
                t8,
                t9,
                t10,
                t2._async_environment0$_content
              );
              $async$goto = 7;
              return P._asyncAwait(
                t1._async_evaluate0$_withEnvironment$1$2(
                  environment,
                  new E._EvaluateVisitor__visitDynamicImport__closure4(
                    t1,
                    result,
                    stylesheet,
                    environment,
                    children
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 7:
              // returning from await.
              module = environment.toDummyModule$0();
              t1._async_evaluate0$_environment.importForwards$1(module);
              $async$goto = module.transitivelyContainsCss ? 8 : 9;
              break;
            case 8:
              // then
              $async$goto = 10;
              return P._asyncAwait(
                t1
                  ._async_evaluate0$_combineCss$2$clone(
                    module,
                    module.transitivelyContainsExtensions
                  )
                  .accept$1(t1),
                $async$call$0
              );
            case 10:
            // returning from await.
            case 9:
              // join
              visitor = new E._ImportedCssVisitor1(t1);
              for (
                t2 = J.get$iterator$ax(children._readLocal$0());
                t2.moveNext$0();

              )
                t2.get$current().accept$1(visitor);
              t1._async_evaluate0$_activeModules.remove$1(0, url);
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor__visitDynamicImport__closure3.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate0$_multiSpanException$3(
        'This file is already being loaded.',
        'new load',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [previousLoad.get$span(), 'original load'],
          type$.FileSpan,
          type$.String
        )
      );
    },
    $signature: 185,
  };
  E._EvaluateVisitor__visitDynamicImport__closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t7,
        t8,
        t1,
        oldImporter,
        t2,
        t3,
        t4,
        t5,
        oldOutOfOrderImports,
        oldConfiguration,
        oldInDependency,
        t6;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate0$_importer;
              t2 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__stylesheet,
                '_stylesheet'
              );
              t3 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__root,
                '_root'
              );
              t4 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__parent,
                '__parent'
              );
              t5 = t1._async_evaluate0$_assertInModule$2(
                t1._async_evaluate0$__endOfImports,
                '_endOfImports'
              );
              oldOutOfOrderImports = t1._async_evaluate0$_outOfOrderImports;
              oldConfiguration = t1._async_evaluate0$_configuration;
              oldInDependency = t1._async_evaluate0$_inDependency;
              t6 = $async$self.result;
              t1._async_evaluate0$_importer = t6.importer;
              t7 = t1._async_evaluate0$__stylesheet = $async$self.stylesheet;
              t8 = V.ModifiableCssStylesheet$0(t7.span);
              t1._async_evaluate0$__root = t8;
              t1._async_evaluate0$__parent = t1._async_evaluate0$_assertInModule$2(
                t8,
                '_root'
              );
              t1._async_evaluate0$__endOfImports = 0;
              t1._async_evaluate0$_outOfOrderImports = null;
              t1._async_evaluate0$_inDependency = t6.isDependency;
              t6 = new P.UnmodifiableListView(
                t7._stylesheet1$_forwards,
                type$.UnmodifiableListView_ForwardRule_2
              );
              if (!t6.get$isEmpty(t6))
                t1._async_evaluate0$_configuration = $async$self.environment.toImplicitConfiguration$0();
              $async$goto = 2;
              return P._asyncAwait(t1.visitStylesheet$1(t7), $async$call$0);
            case 2:
              // returning from await.
              $async$self.children._value = t1._async_evaluate0$_addOutOfOrderImports$0();
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = t2;
              t1._async_evaluate0$__root = t3;
              t1._async_evaluate0$__parent = t4;
              t1._async_evaluate0$__endOfImports = t5;
              t1._async_evaluate0$_outOfOrderImports = oldOutOfOrderImports;
              t1._async_evaluate0$_configuration = oldConfiguration;
              t1._async_evaluate0$_inDependency = oldInDependency;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor__visitStaticImport_closure1.prototype = {
    call$1(supports) {
      return this.$call$body$_EvaluateVisitor__visitStaticImport_closure0(
        supports
      );
    },
    $call$body$_EvaluateVisitor__visitStaticImport_closure0(supports) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.CssValue_String_2),
        $async$returnValue,
        $async$self = this,
        t1,
        $async$temp1,
        $async$temp2,
        $async$temp3,
        $async$temp4;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$temp1 = F;
              $async$temp2 = H;
              $async$goto = supports instanceof L.SupportsDeclaration0 ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp3 = H;
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_evaluate0$_evaluateToCss$1(supports.name),
                $async$call$1
              );
            case 6:
              // returning from await.
              $async$temp3 = $async$temp3.S($async$result) + ': ';
              $async$temp4 = H;
              $async$goto = 7;
              return P._asyncAwait(
                t1._async_evaluate0$_evaluateToCss$1(supports.value),
                $async$call$1
              );
            case 7:
              // returning from await.
              $async$result = $async$temp3 + $async$temp4.S($async$result);
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                X.NullableExtension_andThen0(
                  supports,
                  t1.get$_async_evaluate0$_visitSupportsCondition()
                ),
                $async$call$1
              );
            case 8:
            // returning from await.
            case 4:
              // join
              $async$returnValue = new $async$temp1.CssValue0(
                'supports(' + $async$temp2.S($async$result) + ')',
                supports.get$span(),
                type$.CssValue_String_2
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 323,
  };
  E._EvaluateVisitor_visitIncludeRule_closure7.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_environment.getMixin$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 84,
  };
  E._EvaluateVisitor_visitIncludeRule_closure8.prototype = {
    call$0() {
      return this.node.get$spanWithoutContent();
    },
    $signature: 33,
  };
  E._EvaluateVisitor_visitIncludeRule_closure10.prototype = {
    call$1($content) {
      return new E.UserDefinedCallable0(
        $content,
        this.$this._async_evaluate0$_environment.closure$0(),
        type$.UserDefinedCallable_AsyncEnvironment_2
      );
    },
    $signature: 324,
  };
  E._EvaluateVisitor_visitIncludeRule_closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate0$_environment.withContent$2(
                  $async$self.contentCallable,
                  new E._EvaluateVisitor_visitIncludeRule__closure1(
                    t1,
                    $async$self.mixin,
                    $async$self.nodeWithSpan
                  )
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitIncludeRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue,
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(
                t1._async_evaluate0$_environment.asMixin$1(
                  new E._EvaluateVisitor_visitIncludeRule___closure1(
                    t1,
                    $async$self.mixin,
                    $async$self.nodeWithSpan
                  )
                ),
                $async$call$0
              );
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor_visitIncludeRule___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.void),
        $async$self = this,
        t1,
        t2,
        t3,
        t4,
        t5,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.mixin.declaration.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (t4 = $async$self.nodeWithSpan),
                (t5 = type$.nullable_Value_2),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(
                t3._async_evaluate0$_addErrorSpan$1$2(
                  t4,
                  new E._EvaluateVisitor_visitIncludeRule____closure1(
                    t3,
                    t1[_i]
                  ),
                  t5
                ),
                $async$call$0
              );
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 30,
  };
  E._EvaluateVisitor_visitIncludeRule____closure1.prototype = {
    call$0() {
      return this.statement.accept$1(this.$this);
    },
    $signature: 53,
  };
  E._EvaluateVisitor_visitMediaRule_closure5.prototype = {
    call$1(mediaQueries) {
      return this.$this._async_evaluate0$_mergeMediaQueries$2(
        mediaQueries,
        this.queries
      );
    },
    $signature: 169,
  };
  E._EvaluateVisitor_visitMediaRule_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.mergedQueries;
              if (t2 == null) t2 = $async$self.queries;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_withMediaQueries$1$2(
                  t2,
                  new E._EvaluateVisitor_visitMediaRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate0$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$0(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitMediaRule___closure1(
                    t1,
                    $async$self.node
                  ),
                  false,
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitMediaRule_closure7.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule_2._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule_2._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 14,
  };
  E._EvaluateVisitor__visitMediaQueries_closure1.prototype = {
    call$0() {
      var t1 = S.SpanScanner$(this.resolved, null);
      return new F.MediaQueryParser0(
        t1,
        this.$this._async_evaluate0$_logger
      ).parse$0();
    },
    $signature: 168,
  };
  E._EvaluateVisitor_visitStyleRule_closure13.prototype = {
    call$0() {
      var t1 = this.selectorText;
      t1 = S.SpanScanner$(t1.get$value(t1), null);
      return new E.KeyframeSelectorParser0(
        t1,
        this.$this._async_evaluate0$_logger
      ).parse$0();
    },
    $signature: 42,
  };
  E._EvaluateVisitor_visitStyleRule_closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule_closure15.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitStyleRule_closure16.prototype = {
    call$0() {
      var _s11_ = '_stylesheet',
        t1 = this.selectorText,
        t2 = this.$this;
      return D.SelectorList_SelectorList$parse0(
        t1.get$value(t1),
        !t2._async_evaluate0$_assertInModule$2(
          t2._async_evaluate0$__stylesheet,
          _s11_
        ).plainCss,
        !t2._async_evaluate0$_assertInModule$2(
          t2._async_evaluate0$__stylesheet,
          _s11_
        ).plainCss,
        t2._async_evaluate0$_logger
      );
    },
    $signature: 61,
  };
  E._EvaluateVisitor_visitStyleRule_closure17.prototype = {
    call$0() {
      var t1 = this._box_0.parsedSelector,
        t2 = this.$this,
        t3 = t2._async_evaluate0$_styleRuleIgnoringAtRoot;
      t3 = t3 == null ? null : t3.originalSelector;
      return t1.resolveParentSelectors$2$implicitParent(
        t3,
        !t2._async_evaluate0$_atRootExcludingStyleRule
      );
    },
    $signature: 61,
  };
  E._EvaluateVisitor_visitStyleRule_closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_withStyleRule$1$2(
                  $async$self.rule,
                  new E._EvaluateVisitor_visitStyleRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitStyleRule_closure19.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitSupportsRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        _i,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children), (t3 = t2.length), (_i = 0);
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return P._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
            // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return P._asyncAwait(
                t1._async_evaluate0$_withParent$2$2(
                  X.ModifiableCssStyleRule$0(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitSupportsRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$call$0
              );
            case 9:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitSupportsRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3,
        _i;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t2 = t1.length),
                (t3 = $async$self.$this),
                (_i = 0);
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return P._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
            // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitSupportsRule_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure5.prototype = {
    call$0() {
      var t1 = this.override;
      this.$this._async_evaluate0$_environment.setVariable$4$global(
        this.node.name,
        t1.value,
        t1.assignmentNode,
        true
      );
    },
    $signature: 2,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure6.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 207,
  };
  E._EvaluateVisitor_visitVariableDeclaration_closure7.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1._async_evaluate0$_environment.setVariable$5$global$namespace(
        t2.name,
        this.value,
        t1._async_evaluate0$_expressionNode$1(t2.expression),
        t2.isGlobal,
        t2.namespace
      );
    },
    $signature: 2,
  };
  E._EvaluateVisitor_visitUseRule_closure1.prototype = {
    call$1(module) {
      var t1 = this.node;
      this.$this._async_evaluate0$_environment.addModule$3$namespace(
        module,
        t1,
        t1.namespace
      );
    },
    $signature: 119,
  };
  E._EvaluateVisitor_visitWarnRule_closure1.prototype = {
    call$0() {
      return this.node.expression.accept$1(this.$this);
    },
    $signature: 52,
  };
  E._EvaluateVisitor_visitWhileRule_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        result;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node),
                (t2 = t1.condition),
                (t3 = $async$self.$this),
                (t1 = t1.children);
            case 3:
              // for condition
              $async$goto = 5;
              return P._asyncAwait(t2.accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
              if (!$async$result.get$isTruthy()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(
                t3._async_evaluate0$_handleReturn$2(
                  t1,
                  new E._EvaluateVisitor_visitWhileRule__closure1(t3)
                ),
                $async$call$0
              );
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 53,
  };
  E._EvaluateVisitor_visitWhileRule__closure1.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 62,
  };
  E._EvaluateVisitor_visitBinaryOperationExpression_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        right,
        result,
        t1,
        t2,
        left,
        t3,
        $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node;
              t2 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(t1.left.accept$1(t2), $async$call$0);
            case 3:
              // returning from await.
              left = $async$result;
              t3 = t1.operator;
            case 4:
              // switch
              switch (t3) {
                case C.BinaryOperator_kjl0:
                  // goto case
                  $async$goto = 6;
                  break;
                case C.BinaryOperator_or_or_10:
                  // goto case
                  $async$goto = 7;
                  break;
                case C.BinaryOperator_and_and_20:
                  // goto case
                  $async$goto = 8;
                  break;
                case C.BinaryOperator_YlX0:
                  // goto case
                  $async$goto = 9;
                  break;
                case C.BinaryOperator_i5H0:
                  // goto case
                  $async$goto = 10;
                  break;
                case C.BinaryOperator_AcR1:
                  // goto case
                  $async$goto = 11;
                  break;
                case C.BinaryOperator_1da0:
                  // goto case
                  $async$goto = 12;
                  break;
                case C.BinaryOperator_8qt0:
                  // goto case
                  $async$goto = 13;
                  break;
                case C.BinaryOperator_33h0:
                  // goto case
                  $async$goto = 14;
                  break;
                case C.BinaryOperator_AcR2:
                  // goto case
                  $async$goto = 15;
                  break;
                case C.BinaryOperator_iyO0:
                  // goto case
                  $async$goto = 16;
                  break;
                case C.BinaryOperator_O1M0:
                  // goto case
                  $async$goto = 17;
                  break;
                case C.BinaryOperator_RTB0:
                  // goto case
                  $async$goto = 18;
                  break;
                case C.BinaryOperator_2ad0:
                  // goto case
                  $async$goto = 19;
                  break;
                default:
                  // goto default
                  $async$goto = 20;
                  break;
              }
              break;
            case 6:
              // case
              $async$goto = 21;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 21:
              // returning from await.
              right = $async$result;
              $async$returnValue = new D.SassString0(
                N.serializeValue(left, false, true) +
                  '=' +
                  N.serializeValue(right, false, true),
                false
              );
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              $async$goto = left.get$isTruthy() ? 22 : 24;
              break;
            case 22:
              // then
              $async$result = left;
              // goto join
              $async$goto = 23;
              break;
            case 24:
              // else
              $async$goto = 25;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 25:
            // returning from await.
            case 23:
              // join
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
              $async$goto = left.get$isTruthy() ? 26 : 28;
              break;
            case 26:
              // then
              $async$goto = 29;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 29:
              // returning from await.
              // goto join
              $async$goto = 27;
              break;
            case 28:
              // else
              $async$result = left;
            case 27:
              // join
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 9:
              // case
              $async$temp1 = left;
              $async$goto = 30;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 30:
              // returning from await.
              $async$returnValue = $async$temp1.$eq(0, $async$result)
                ? C.SassBoolean_true
                : C.SassBoolean_false;
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // case
              $async$temp1 = left;
              $async$goto = 31;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 31:
              // returning from await.
              $async$returnValue = !$async$temp1.$eq(0, $async$result)
                ? C.SassBoolean_true
                : C.SassBoolean_false;
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              $async$temp1 = left;
              $async$goto = 32;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 32:
              // returning from await.
              $async$returnValue = $async$temp1.greaterThan$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // case
              $async$temp1 = left;
              $async$goto = 33;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 33:
              // returning from await.
              $async$returnValue = $async$temp1.greaterThanOrEquals$1(
                $async$result
              );
              // goto return
              $async$goto = 1;
              break;
            case 13:
              // case
              $async$temp1 = left;
              $async$goto = 34;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 34:
              // returning from await.
              $async$returnValue = $async$temp1.lessThan$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 14:
              // case
              $async$temp1 = left;
              $async$goto = 35;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 35:
              // returning from await.
              $async$returnValue = $async$temp1.lessThanOrEquals$1(
                $async$result
              );
              // goto return
              $async$goto = 1;
              break;
            case 15:
              // case
              $async$temp1 = left;
              $async$goto = 36;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 36:
              // returning from await.
              $async$returnValue = $async$temp1.plus$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 16:
              // case
              $async$temp1 = left;
              $async$goto = 37;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 37:
              // returning from await.
              $async$returnValue = $async$temp1.minus$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 17:
              // case
              $async$temp1 = left;
              $async$goto = 38;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 38:
              // returning from await.
              $async$returnValue = $async$temp1.times$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 18:
              // case
              $async$goto = 39;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 39:
              // returning from await.
              right = $async$result;
              result = left.dividedBy$1(right);
              if (
                t1.allowsSlash &&
                left instanceof T.SassNumber0 &&
                right instanceof T.SassNumber0
              ) {
                $async$returnValue = type$.SassNumber_2._as(result).withSlash$2(
                  left,
                  right
                );
                // goto return
                $async$goto = 1;
                break;
              } else {
                if (
                  left instanceof T.SassNumber0 &&
                  right instanceof T.SassNumber0
                )
                  t2._async_evaluate0$_warn$3$deprecation(
                    string$.Using__ +
                      H.S(
                        new E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation1().call$1(
                          t1
                        )
                      ) +
                      string$.x0a_More,
                    t1.get$span(),
                    true
                  );
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 19:
              // case
              $async$temp1 = left;
              $async$goto = 40;
              return P._asyncAwait(t1.right.accept$1(t2), $async$call$0);
            case 40:
              // returning from await.
              $async$returnValue = $async$temp1.modulo$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 20:
              // default
              throw H.wrapException(
                P.ArgumentError$(
                  'Unknown binary operator ' + t3.toString$0(0) + '.',
                  null
                )
              );
            case 5:
            // after switch
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 52,
  };
  E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation1.prototype = {
    call$1(expression) {
      if (
        expression instanceof V.BinaryOperationExpression0 &&
        expression.operator === C.BinaryOperator_RTB0
      )
        return (
          'math.div(' +
          H.S(this.call$1(expression.left)) +
          ', ' +
          H.S(this.call$1(expression.right)) +
          ')'
        );
      else return expression.toString$0(0);
    },
    $signature: 166,
  };
  E._EvaluateVisitor_visitVariableExpression_closure1.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_environment.getVariable$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 207,
  };
  E._EvaluateVisitor_visitListExpression_closure1.prototype = {
    call$1(expression) {
      return expression.accept$1(this.$this);
    },
    $signature: 330,
  };
  E._EvaluateVisitor_visitFunctionExpression_closure3.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_getFunction$2$namespace(
        H.stringReplaceAllUnchecked(t1.originalName, '_', '-'),
        t1.namespace
      );
    },
    $signature: 84,
  };
  E._EvaluateVisitor_visitFunctionExpression_closure4.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_runFunctionCallable$3(
        t1.$arguments,
        this._box_0.$function,
        t1
      );
    },
    $signature: 52,
  };
  E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure1.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_runFunctionCallable$3(
        t1.$arguments,
        this.$function,
        t1
      );
    },
    $signature: 52,
  };
  E._EvaluateVisitor__runUserDefinedCallable_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.callable,
        t3 = _this.V;
      return t1._async_evaluate0$_withEnvironment$1$2(
        t2.environment.closure$0(),
        new E._EvaluateVisitor__runUserDefinedCallable__closure1(
          t1,
          _this.evaluated,
          t2,
          _this.nodeWithSpan,
          _this.run,
          t3
        ),
        t3
      );
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable__closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = _this.V;
      return t1._async_evaluate0$_environment.scope$1$1(
        new E._EvaluateVisitor__runUserDefinedCallable___closure1(
          t1,
          _this.evaluated,
          _this.callable,
          _this.nodeWithSpan,
          _this.run,
          t2
        ),
        t2
      );
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable___closure1.prototype = {
    call$0() {
      return this.$call$body$_EvaluateVisitor__runUserDefinedCallable___closure0(
        this.V
      );
    },
    $call$body$_EvaluateVisitor__runUserDefinedCallable___closure0(
      $async$type
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue,
        $async$self = this,
        declaredArguments,
        t7,
        minLength,
        t8,
        i,
        argument,
        t9,
        value,
        t10,
        t11,
        restArgument,
        rest,
        argumentList,
        result,
        argumentWord,
        argumentNames,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.evaluated;
              t3 = t2.positional;
              t4 = t2.named;
              t5 = $async$self.callable.declaration.$arguments;
              t6 = $async$self.nodeWithSpan;
              t1._async_evaluate0$_verifyArguments$4(t3.length, t4, t5, t6);
              declaredArguments = t5.$arguments;
              t7 = declaredArguments.length;
              minLength = Math.min(t3.length, t7);
              for (t8 = t2.positionalNodes, i = 0; i < minLength; ++i)
                t1._async_evaluate0$_environment.setLocalVariable$3(
                  declaredArguments[i].name,
                  t3[i],
                  t8[i]
                );
              (i = t3.length), (t8 = t2.namedNodes);
            case 3:
              // for condition
              if (!(i < t7)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              argument = declaredArguments[i];
              t9 = argument.name;
              value = t4.remove$1(0, t9);
              $async$goto = value == null ? 6 : 7;
              break;
            case 6:
              // then
              t10 = argument.defaultValue;
              $async$temp1 = t1;
              $async$goto = 8;
              return P._asyncAwait(t10.accept$1(t1), $async$call$0);
            case 8:
              // returning from await.
              value = $async$temp1._async_evaluate0$_withoutSlash$2(
                $async$result,
                t1._async_evaluate0$_expressionNode$1(t10)
              );
            case 7:
              // join
              t10 = t1._async_evaluate0$_environment;
              t11 = t8.$index(0, t9);
              if (t11 == null) {
                t11 = argument.defaultValue;
                t11.toString;
                t11 = t1._async_evaluate0$_expressionNode$1(t11);
              }
              t10.setLocalVariable$3(t9, value, t11);
            case 4:
              // for update
              ++i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              restArgument = t5.restArgument;
              if (restArgument != null) {
                rest =
                  t3.length > t7
                    ? C.JSArray_methods.sublist$1(t3, t7)
                    : C.List_empty14;
                t2 = t2.separator;
                argumentList = D.SassArgumentList$0(
                  rest,
                  t4,
                  t2 === C.ListSeparator_undecided_null0
                    ? C.ListSeparator_kWM0
                    : t2
                );
                t1._async_evaluate0$_environment.setLocalVariable$3(
                  restArgument,
                  argumentList,
                  t6
                );
              } else argumentList = null;
              $async$goto = 9;
              return P._asyncAwait($async$self.run.call$0(), $async$call$0);
            case 9:
              // returning from await.
              result = $async$result;
              if (argumentList == null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (t4.get$isEmpty(t4)) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (argumentList._argument_list$_wereKeywordsAccessed) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = t4.get$keys(t4);
              argumentWord = B.pluralize0('argument', t2.get$length(t2), null);
              t4 = t4.get$keys(t4);
              argumentNames = B.toSentence0(
                H.MappedIterable_MappedIterable(
                  t4,
                  new E._EvaluateVisitor__runUserDefinedCallable____closure1(),
                  H._instanceType(t4)._eval$1('Iterable.E'),
                  type$.Object
                ),
                'or'
              );
              throw H.wrapException(
                E.MultiSpanSassRuntimeException$0(
                  'No ' + argumentWord + ' named ' + argumentNames + '.',
                  t6.get$span(),
                  'invocation',
                  P.LinkedHashMap_LinkedHashMap$_literal(
                    [t5.get$spanWithName(), 'declaration'],
                    type$.FileSpan,
                    type$.String
                  ),
                  t1._async_evaluate0$_stackTrace$1(t6.get$span())
                )
              );
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature() {
      return this.V._eval$1('Future<0>()');
    },
  };
  E._EvaluateVisitor__runUserDefinedCallable____closure1.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  E._EvaluateVisitor__runFunctionCallable_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        t4,
        _i,
        $returnValue;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.callable.declaration),
                (t2 = t1.children),
                (t3 = t2.length),
                (t4 = $async$self.$this),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(t2[_i].accept$1(t4), $async$call$0);
            case 6:
              // returning from await.
              $returnValue = $async$result;
              if ($returnValue instanceof F.Value0) {
                $async$returnValue = $returnValue;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              throw H.wrapException(
                t4._async_evaluate0$_exception$2(
                  'Function finished without @return.',
                  t1.span
                )
              );
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 52,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure5.prototype = {
    call$0() {
      return this.overload.verify$2(
        this.evaluated.positional.length,
        this.namedSet
      );
    },
    $signature: 0,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure6.prototype = {
    call$0() {
      return this.callback.call$1(this.evaluated.positional);
    },
    $signature: 331,
  };
  E._EvaluateVisitor__runBuiltInCallable_closure7.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  E._EvaluateVisitor__evaluateArguments_closure7.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 41,
  };
  E._EvaluateVisitor__evaluateArguments_closure8.prototype = {
    call$1(value) {
      return this.$this._async_evaluate0$_withoutSlash$2(
        value,
        this.restNodeForSpan
      );
    },
    $signature: 41,
  };
  E._EvaluateVisitor__evaluateArguments_closure9.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.restNodeForSpan;
      _this.named.$indexSet(
        0,
        key,
        _this.$this._async_evaluate0$_withoutSlash$2(value, t1)
      );
      _this.namedNodes.$indexSet(0, key, t1);
    },
    $signature: 163,
  };
  E._EvaluateVisitor__evaluateArguments_closure10.prototype = {
    call$1(value) {
      return value;
    },
    $signature: 41,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure7.prototype = {
    call$1(value) {
      return new F.ValueExpression0(value, this.restArgs.get$span());
    },
    $signature: 111,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure8.prototype = {
    call$1(value) {
      return new F.ValueExpression0(
        this.$this._async_evaluate0$_withoutSlash$2(
          value,
          this.restNodeForSpan
        ),
        this.restArgs.get$span()
      );
    },
    $signature: 111,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure9.prototype = {
    call$2(key, value) {
      var _this = this;
      _this.named.$indexSet(
        0,
        key,
        new F.ValueExpression0(
          _this.$this._async_evaluate0$_withoutSlash$2(
            value,
            _this.restNodeForSpan
          ),
          _this.restArgs.get$span()
        )
      );
    },
    $signature: 163,
  };
  E._EvaluateVisitor__evaluateMacroArguments_closure10.prototype = {
    call$1(value) {
      return new F.ValueExpression0(
        this.$this._async_evaluate0$_withoutSlash$2(
          value,
          this.keywordRestNodeForSpan
        ),
        this.keywordRestArgs.get$span()
      );
    },
    $signature: 111,
  };
  E._EvaluateVisitor__addRestMap_closure1.prototype = {
    call$2(key, value) {
      var _this = this,
        t1 = _this.$this;
      if (key instanceof D.SassString0)
        _this.values.$indexSet(
          0,
          key.text,
          _this.convert.call$1(
            t1._async_evaluate0$_withoutSlash$2(value, _this.expressionNode)
          )
        );
      else
        throw H.wrapException(
          t1._async_evaluate0$_exception$2(
            string$.Variab_ +
              key.toString$0(0) +
              ' is not a string in ' +
              _this.map.toString$0(0) +
              '.',
            _this.nodeWithSpan.get$span()
          )
        );
    },
    $signature: 63,
  };
  E._EvaluateVisitor__verifyArguments_closure1.prototype = {
    call$0() {
      return this.$arguments.verify$2(
        this.positional,
        new M.MapKeySet(this.named, type$.MapKeySet_String)
      );
    },
    $signature: 0,
  };
  E._EvaluateVisitor_visitStringExpression_closure1.prototype = {
    call$1(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (typeof value == 'string') {
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              }
              type$.Expression_2._as(value);
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(value.accept$1(t1), $async$call$1);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue =
                result instanceof D.SassString0
                  ? result.text
                  : t1._async_evaluate0$_serialize$3$quote(
                      result,
                      value,
                      false
                    );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 74,
  };
  E._EvaluateVisitor_visitCssAtRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssAtRule_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitCssKeyframeBlock_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssKeyframeBlock_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure5.prototype = {
    call$1(mediaQueries) {
      return this.$this._async_evaluate0$_mergeMediaQueries$2(
        mediaQueries,
        this.node.queries
      );
    },
    $signature: 169,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.mergedQueries;
              if (t2 == null) t2 = $async$self.node.queries;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_withMediaQueries$1$2(
                  t2,
                  new E._EvaluateVisitor_visitCssMediaRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children),
                (t2 = new H.ListIterator(t2, t2.get$length(t2))),
                (t3 = H._instanceType(t2)._precomputed1);
            case 5:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                t3._as(t2.__internal$_current).accept$1(t1),
                $async$call$0
              );
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                t1._async_evaluate0$_withParent$2$3$scopeWhen(
                  X.ModifiableCssStyleRule$0(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitCssMediaRule___closure1(
                    t1,
                    $async$self.node
                  ),
                  false,
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$call$0
              );
            case 8:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssMediaRule_closure7.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule_2._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule_2._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitCssStyleRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return P._asyncAwait(
                t1._async_evaluate0$_withStyleRule$1$2(
                  $async$self.rule,
                  new E._EvaluateVisitor_visitCssStyleRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.Null
                ),
                $async$call$0
              );
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssStyleRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssStyleRule_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor_visitCssSupportsRule_closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t2,
        t3,
        t1,
        styleRule;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule
                ? null
                : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              (t2 = $async$self.node.children),
                (t2 = new H.ListIterator(t2, t2.get$length(t2))),
                (t3 = H._instanceType(t2)._precomputed1);
            case 5:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return P._asyncAwait(
                t3._as(t2.__internal$_current).accept$1(t1),
                $async$call$0
              );
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 8;
              return P._asyncAwait(
                t1._async_evaluate0$_withParent$2$2(
                  X.ModifiableCssStyleRule$0(
                    styleRule.selector,
                    styleRule.span,
                    styleRule.originalSelector
                  ),
                  new E._EvaluateVisitor_visitCssSupportsRule__closure1(
                    t1,
                    $async$self.node
                  ),
                  type$.ModifiableCssStyleRule_2,
                  type$.Null
                ),
                $async$call$0
              );
            case 8:
            // returning from await.
            case 3:
              // join
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssSupportsRule__closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this,
        t1,
        t2,
        t3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.node.children),
                (t1 = new H.ListIterator(t1, t1.get$length(t1))),
                (t2 = H._instanceType(t1)._precomputed1),
                (t3 = $async$self.$this);
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return P._asyncAwait(
                t2._as(t1.__internal$_current).accept$1(t3),
                $async$call$0
              );
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 1,
  };
  E._EvaluateVisitor_visitCssSupportsRule_closure4.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._EvaluateVisitor__performInterpolation_closure1.prototype = {
    call$1(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue,
        $async$self = this,
        t1,
        result,
        t2,
        t3;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (typeof value == 'string') {
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              }
              type$.Expression_2._as(value);
              t1 = $async$self.$this;
              $async$goto = 3;
              return P._asyncAwait(value.accept$1(t1), $async$call$1);
            case 3:
              // returning from await.
              result = $async$result;
              if (
                $async$self.warnForColor &&
                result instanceof K.SassColor0 &&
                $.$get$namesByColor0().containsKey$1(result)
              ) {
                t2 = X.Interpolation$0(
                  H._setArrayType([''], type$.JSArray_Object),
                  $async$self.interpolation.span
                );
                t3 = $.$get$namesByColor0();
                t1._async_evaluate0$_warn$2(
                  string$.You_pr +
                    H.S(t3.$index(0, result)) +
                    string$.x20in_in +
                    result.toString$0(0) +
                    string$.x2c_whicw +
                    H.S(t3.$index(0, result)) +
                    string$.x22x29__If +
                    new V.BinaryOperationExpression0(
                      C.BinaryOperator_AcR2,
                      new D.StringExpression0(t2, true),
                      value,
                      false
                    ).toString$0(0) +
                    "'.",
                  value.get$span()
                );
              }
              $async$returnValue = t1._async_evaluate0$_serialize$3$quote(
                result,
                value,
                false
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 74,
  };
  E._EvaluateVisitor__serialize_closure1.prototype = {
    call$0() {
      return N.serializeValue(this.value, false, this.quote);
    },
    $signature: 28,
  };
  E._EvaluateVisitor__expressionNode_closure1.prototype = {
    call$0() {
      var t1 = this.expression;
      return this.$this._async_evaluate0$_environment.getVariableNode$2$namespace(
        t1.name,
        t1.namespace
      );
    },
    $signature: 335,
  };
  E._EvaluateVisitor__withoutSlash_recommendation1.prototype = {
    call$1(number) {
      var asSlash = number.asSlash;
      if (asSlash != null)
        return (
          'math.div(' +
          H.S(this.call$1(asSlash.item1)) +
          ', ' +
          H.S(this.call$1(asSlash.item2)) +
          ')'
        );
      else return N.serializeValue(number, true, true);
    },
    $signature: 336,
  };
  E._EvaluateVisitor__stackFrame_closure1.prototype = {
    call$1(url) {
      var t1 = this.$this._async_evaluate0$_importCache;
      t1 = t1 == null ? null : t1.humanize$1(url);
      return t1 == null ? url : t1;
    },
    $signature: 105,
  };
  E._EvaluateVisitor__stackTrace_closure1.prototype = {
    call$1(tuple) {
      return this.$this._async_evaluate0$_stackFrame$2(
        tuple.item1,
        tuple.item2.get$span()
      );
    },
    $signature: 337,
  };
  E._ImportedCssVisitor1.prototype = {
    visitCssAtRule$1(node) {
      var t1 = node.isChildless
        ? null
        : new E._ImportedCssVisitor_visitCssAtRule_closure1();
      this._async_evaluate0$_visitor._async_evaluate0$_addChild$2$through(
        node,
        t1
      );
    },
    visitCssComment$1(node) {
      return this._async_evaluate0$_visitor._async_evaluate0$_addChild$1(node);
    },
    visitCssDeclaration$1(node) {},
    visitCssImport$1(node) {
      var t2,
        _s13_ = '_endOfImports',
        t1 = this._async_evaluate0$_visitor;
      if (
        t1._async_evaluate0$_assertInModule$2(
          t1._async_evaluate0$__parent,
          '__parent'
        ) !==
        t1._async_evaluate0$_assertInModule$2(
          t1._async_evaluate0$__root,
          '_root'
        )
      )
        t1._async_evaluate0$_addChild$1(node);
      else if (
        t1._async_evaluate0$_assertInModule$2(
          t1._async_evaluate0$__endOfImports,
          _s13_
        ) ===
        J.get$length$asx(
          t1._async_evaluate0$_assertInModule$2(
            t1._async_evaluate0$__root,
            '_root'
          ).children._collection$_source
        )
      ) {
        t1._async_evaluate0$_addChild$1(node);
        t1._async_evaluate0$__endOfImports =
          t1._async_evaluate0$_assertInModule$2(
            t1._async_evaluate0$__endOfImports,
            _s13_
          ) + 1;
      } else {
        t2 = t1._async_evaluate0$_outOfOrderImports;
        (t2 == null
          ? (t1._async_evaluate0$_outOfOrderImports = H._setArrayType(
              [],
              type$.JSArray_ModifiableCssImport_2
            ))
          : t2
        ).push(node);
      }
    },
    visitCssKeyframeBlock$1(node) {},
    visitCssMediaRule$1(node) {
      var t1 = this._async_evaluate0$_visitor,
        mediaQueries = t1._async_evaluate0$_mediaQueries;
      t1._async_evaluate0$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssMediaRule_closure1(
          mediaQueries == null ||
            t1._async_evaluate0$_mergeMediaQueries$2(
              mediaQueries,
              node.queries
            ) != null
        )
      );
    },
    visitCssStyleRule$1(node) {
      return this._async_evaluate0$_visitor._async_evaluate0$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssStyleRule_closure1()
      );
    },
    visitCssStylesheet$1(node) {
      var t1, t2;
      for (
        t1 = node.children,
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t2 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();

      )
        t2._as(t1.__internal$_current).accept$1(this);
    },
    visitCssSupportsRule$1(node) {
      return this._async_evaluate0$_visitor._async_evaluate0$_addChild$2$through(
        node,
        new E._ImportedCssVisitor_visitCssSupportsRule_closure1()
      );
    },
  };
  E._ImportedCssVisitor_visitCssAtRule_closure1.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._ImportedCssVisitor_visitCssMediaRule_closure1.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule_2._is(node))
        t1 = this.hasBeenMerged && type$.CssMediaRule_2._is(node);
      else t1 = true;
      return t1;
    },
    $signature: 14,
  };
  E._ImportedCssVisitor_visitCssStyleRule_closure1.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E._ImportedCssVisitor_visitCssSupportsRule_closure1.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 14,
  };
  E.EvaluateResult0.prototype = {};
  E._ArgumentResults1.prototype = {};
  E._LoadedStylesheet1.prototype = {};
  O.AsyncImportCache0.prototype = {
    canonicalize$4$baseImporter$baseUrl$forImport(
      url,
      baseImporter,
      baseUrl,
      forImport
    ) {
      return this.canonicalize$body$AsyncImportCache0(
        url,
        baseImporter,
        baseUrl,
        forImport
      );
    },
    canonicalize$body$AsyncImportCache0(url, baseImporter, baseUrl, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Tuple3_AsyncImporter_Uri_Uri_2
        ),
        $async$returnValue,
        $async$self = this,
        resolvedUrl,
        canonicalUrl,
        t1;
      var $async$canonicalize$4$baseImporter$baseUrl$forImport = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = baseImporter != null ? 3 : 4;
                break;
              case 3:
                // then
                resolvedUrl =
                  baseUrl == null ? null : baseUrl.resolveUri$1(url);
                if (resolvedUrl == null) resolvedUrl = url;
                $async$goto = 5;
                return P._asyncAwait(
                  $async$self._async_import_cache0$_canonicalize$3(
                    baseImporter,
                    resolvedUrl,
                    forImport
                  ),
                  $async$canonicalize$4$baseImporter$baseUrl$forImport
                );
              case 5:
                // returning from await.
                canonicalUrl = $async$result;
                if (canonicalUrl != null) {
                  $async$returnValue = new S.Tuple3(
                    baseImporter,
                    canonicalUrl,
                    resolvedUrl,
                    type$.Tuple3_AsyncImporter_Uri_Uri_2
                  );
                  // goto return
                  $async$goto = 1;
                  break;
                }
              case 4:
                // join
                t1 = type$.Tuple2_Uri_bool;
                $async$goto = 6;
                return P._asyncAwait(
                  B.putIfAbsentAsync0(
                    $async$self._async_import_cache0$_canonicalizeCache,
                    new S.Tuple2(url, forImport, t1),
                    new O.AsyncImportCache_canonicalize_closure0(
                      $async$self,
                      url,
                      forImport
                    ),
                    t1,
                    type$.nullable_Tuple3_AsyncImporter_Uri_Uri_2
                  ),
                  $async$canonicalize$4$baseImporter$baseUrl$forImport
                );
              case 6:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$canonicalize$4$baseImporter$baseUrl$forImport,
        $async$completer
      );
    },
    _async_import_cache0$_canonicalize$3(importer, url, forImport) {
      return this._canonicalize$body$AsyncImportCache0(
        importer,
        url,
        forImport
      );
    },
    _canonicalize$body$AsyncImportCache0(importer, url, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Uri),
        $async$returnValue,
        $async$self = this,
        t1,
        result;
      var $async$_async_import_cache0$_canonicalize$3 = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (forImport) {
                  t1 = type$.nullable_Object;
                  t1 = P.runZoned(
                    new O.AsyncImportCache__canonicalize_closure0(
                      importer,
                      url
                    ),
                    P.LinkedHashMap_LinkedHashMap$_literal(
                      [C.Symbol__inImportRule, true],
                      t1,
                      t1
                    ),
                    type$.FutureOr_nullable_Uri
                  );
                } else t1 = importer.canonicalize$1(url);
                $async$goto = 3;
                return P._asyncAwait(
                  t1,
                  $async$_async_import_cache0$_canonicalize$3
                );
              case 3:
                // returning from await.
                result = $async$result;
                if ((result == null ? null : result.get$scheme()) === '')
                  $async$self._async_import_cache0$_logger.warn$2$deprecation(
                    0,
                    'Importer ' +
                      importer.toString$0(0) +
                      ' canonicalized ' +
                      url.toString$0(0) +
                      ' to ' +
                      H.S(result) +
                      string$.x2e_Rela,
                    true
                  );
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$_async_import_cache0$_canonicalize$3,
        $async$completer
      );
    },
    importCanonical$4$originalUrl$quiet(
      importer,
      canonicalUrl,
      originalUrl,
      quiet
    ) {
      return this.importCanonical$body$AsyncImportCache0(
        importer,
        canonicalUrl,
        originalUrl,
        quiet
      );
    },
    importCanonical$body$AsyncImportCache0(
      importer,
      canonicalUrl,
      originalUrl,
      quiet
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Stylesheet_2
        ),
        $async$returnValue,
        $async$self = this;
      var $async$importCanonical$4$originalUrl$quiet = P._wrapJsFunctionForAsync(
        function ($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncAwait(
                  B.putIfAbsentAsync0(
                    $async$self._async_import_cache0$_importCache,
                    canonicalUrl,
                    new O.AsyncImportCache_importCanonical_closure0(
                      $async$self,
                      importer,
                      canonicalUrl,
                      originalUrl,
                      quiet
                    ),
                    type$.Uri,
                    type$.nullable_Stylesheet_2
                  ),
                  $async$importCanonical$4$originalUrl$quiet
                );
              case 3:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        }
      );
      return P._asyncStartSync(
        $async$importCanonical$4$originalUrl$quiet,
        $async$completer
      );
    },
    humanize$1(canonicalUrl) {
      var t2,
        url,
        t1 = this._async_import_cache0$_canonicalizeCache;
      t1 = A.IterableNullableExtension_whereNotNull(
        t1.get$values(t1),
        type$.Tuple3_AsyncImporter_Uri_Uri_2
      );
      t2 = t1.$ti;
      url = Y.minBy(
        new H.MappedIterable(
          new H.WhereIterable(
            t1,
            new O.AsyncImportCache_humanize_closure2(canonicalUrl),
            t2._eval$1('WhereIterable<Iterable.E>')
          ),
          new O.AsyncImportCache_humanize_closure3(),
          t2._eval$1('MappedIterable<Iterable.E,Uri>')
        ),
        new O.AsyncImportCache_humanize_closure4()
      );
      if (url == null) return canonicalUrl;
      t1 = $.$get$url();
      return url.resolve$1(
        X.ParsedPath_ParsedPath$parse(
          canonicalUrl.get$path(canonicalUrl),
          t1.style
        ).get$basename()
      );
    },
  };
  O.AsyncImportCache_canonicalize_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Tuple3_AsyncImporter_Uri_Uri_2
        ),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        t3,
        _i,
        importer,
        canonicalUrl;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              (t1 = $async$self.$this),
                (t2 = $async$self.url),
                (t3 = $async$self.forImport),
                (_i = 0);
            case 3:
              // for condition
              if (!false) {
                // goto after for
                $async$goto = 5;
                break;
              }
              importer = C.List_empty15[_i];
              $async$goto = 6;
              return P._asyncAwait(
                t1._async_import_cache0$_canonicalize$3(importer, t2, t3),
                $async$call$0
              );
            case 6:
              // returning from await.
              canonicalUrl = $async$result;
              if (canonicalUrl != null) {
                $async$returnValue = new S.Tuple3(
                  importer,
                  canonicalUrl,
                  t2,
                  type$.Tuple3_AsyncImporter_Uri_Uri_2
                );
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 338,
  };
  O.AsyncImportCache__canonicalize_closure0.prototype = {
    call$0() {
      return this.importer.canonicalize$1(this.url);
    },
    $signature: 196,
  };
  O.AsyncImportCache_importCanonical_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_Stylesheet_2
        ),
        $async$returnValue,
        $async$self = this,
        result,
        t1,
        path,
        t2,
        t3,
        t4;
      var $async$call$0 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.canonicalUrl;
              path = $.$get$context().style.pathFromUri$1(M._parseUri(t1));
              t2 = B.readFile0(path);
              t3 = M.Syntax_forPath0(path);
              t4 = t1.get$scheme();
              if (t4 === '')
                H.throwExpression(
                  P.ArgumentError$value(t1, 'sourceMapUrl', 'must be absolute')
                );
              $async$goto = 3;
              return P._asyncAwait(
                new E.ImporterResult0(t2, t1, t3),
                $async$call$0
              );
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self.$this;
              t2._async_import_cache0$_resultsCache.$indexSet(0, t1, result);
              t3 = result.contents;
              t4 = result.syntax;
              t1 = $async$self.originalUrl.resolveUri$1(t1);
              $async$returnValue = V.Stylesheet_Stylesheet$parse0(
                t3,
                t4,
                $async$self.quiet
                  ? $.$get$Logger_quiet0()
                  : t2._async_import_cache0$_logger,
                t1
              );
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 339,
  };
  O.AsyncImportCache_humanize_closure2.prototype = {
    call$1(tuple) {
      return tuple.item2.$eq(0, this.canonicalUrl);
    },
    $signature: 340,
  };
  O.AsyncImportCache_humanize_closure3.prototype = {
    call$1(tuple) {
      return tuple.item3;
    },
    $signature: 341,
  };
  O.AsyncImportCache_humanize_closure4.prototype = {
    call$1(url) {
      return url.get$path(url).length;
    },
    $signature: 99,
  };
  V.AtRootQueryParser0.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new V.AtRootQueryParser_parse_closure0(this)
      );
    },
  };
  V.AtRootQueryParser_parse_closure0.prototype = {
    call$0() {
      var include,
        atRules,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$1(40);
      t1.whitespace$0();
      include = t1.scanIdentifier$1('with');
      if (!include)
        t1.expectIdentifier$2$name('without', '"with" or "without"');
      t1.whitespace$0();
      t2.expectChar$1(58);
      t1.whitespace$0();
      atRules = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      do {
        atRules.add$1(0, t1.identifier$0().toLowerCase());
        t1.whitespace$0();
      } while (t1.lookingAtIdentifier$0());
      t2.expectChar$1(41);
      t2.expectDone$0();
      return new V.AtRootQuery0(
        include,
        atRules,
        atRules.contains$1(0, 'all'),
        atRules.contains$1(0, 'rule')
      );
    },
    $signature: 182,
  };
  V.AtRootQuery0.prototype = {
    excludes$1(node) {
      var t1,
        _this = this;
      if (_this._at_root_query0$_all) return !_this.include;
      if (type$.CssStyleRule_2._is(node))
        return _this._at_root_query0$_rule !== _this.include;
      if (type$.CssMediaRule_2._is(node)) return _this.excludesName$1('media');
      if (type$.CssSupportsRule_2._is(node))
        return _this.excludesName$1('supports');
      if (type$.CssAtRule_2._is(node)) {
        t1 = node.name;
        return _this.excludesName$1(t1.get$value(t1).toLowerCase());
      }
      return false;
    },
    excludesName$1($name) {
      var t1 = this._at_root_query0$_all || this.names.contains$1(0, $name);
      return t1 !== this.include;
    },
  };
  V.AtRootRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRootRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var buffer = new P.StringBuffer('@at-root '),
        t1 = this.query;
      if (t1 != null) buffer._contents = '@at-root ' + (t1.toString$0(0) + ' ');
      t1 = this.children;
      return (
        buffer.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  U.ModifiableCssAtRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssAtRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      var _this = this;
      return U.ModifiableCssAtRule$0(
        _this.name,
        _this.span,
        _this.isChildless,
        _this.value
      );
    },
    addChild$1(child) {
      this.super$ModifiableCssParentNode$addChild0(child);
    },
    $isCssAtRule0: 1,
    get$isChildless() {
      return this.isChildless;
    },
    get$span() {
      return this.span;
    },
  };
  U.AtRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitAtRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var children,
        t1 = '@' + this.name.toString$0(0),
        buffer = new P.StringBuffer(t1),
        t2 = this.value;
      if (t2 != null) buffer._contents = t1 + (' ' + t2.toString$0(0));
      children = this.children;
      return children == null
        ? buffer.toString$0(0) + ';'
        : buffer.toString$0(0) +
            ' {' +
            C.JSArray_methods.join$1(children, ' ') +
            '}';
    },
    get$span() {
      return this.span;
    },
  };
  N.AttributeSelector0.prototype = {
    accept$1$1(visitor) {
      var value,
        t2,
        _this = this,
        t1 = visitor._buffer;
      t1.writeCharCode$1(91);
      t1.write$1(0, _this.name);
      value = _this.value;
      if (value != null) {
        t1.write$1(0, _this.op);
        if (
          G.Parser_isIdentifier0(value) &&
          !C.JSString_methods.startsWith$1(value, '--')
        ) {
          t1.write$1(0, value);
          t2 = _this.modifier;
          if (t2 != null) t1.writeCharCode$1(32);
        } else {
          visitor._serialize0$_visitQuotedString$1(value);
          t2 = _this.modifier;
          if (t2 != null)
            if (visitor._serialize0$_style !== C.OutputStyle_compressed0)
              t1.writeCharCode$1(32);
        }
        if (t2 != null) t1.write$1(0, t2);
      }
      t1.writeCharCode$1(93);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof N.AttributeSelector0 &&
        other.name.$eq(0, _this.name) &&
        other.op == _this.op &&
        other.value == _this.value &&
        other.modifier == _this.modifier
      );
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.name;
      return (
        (C.JSString_methods.get$hashCode(t1.name) ^
          J.get$hashCode$(t1.namespace) ^
          J.get$hashCode$(_this.op) ^
          J.get$hashCode$(_this.value) ^
          J.get$hashCode$(_this.modifier)) >>>
        0
      );
    },
  };
  N.AttributeOperator0.prototype = {
    toString$0(_) {
      return this._attribute0$_text;
    },
  };
  V.BinaryOperationExpression0.prototype = {
    get$span() {
      var right,
        left = this.left;
      for (; left instanceof V.BinaryOperationExpression0; ) left = left.left;
      right = this.right;
      for (; right instanceof V.BinaryOperationExpression0; )
        right = right.right;
      return left.get$span().expand$1(0, right.get$span());
    },
    accept$1$1(visitor) {
      return visitor.visitBinaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        right,
        rightNeedsParens,
        _this = this,
        left = _this.left,
        leftNeedsParens =
          left instanceof V.BinaryOperationExpression0 &&
          left.operator.precedence < _this.operator.precedence,
        t1 = leftNeedsParens ? '' + H.Primitives_stringFromCharCode(40) : '';
      t1 += left.toString$0(0);
      if (leftNeedsParens) t1 += H.Primitives_stringFromCharCode(41);
      t2 = _this.operator;
      t1 =
        t1 +
        H.Primitives_stringFromCharCode(32) +
        t2.operator +
        H.Primitives_stringFromCharCode(32);
      right = _this.right;
      rightNeedsParens =
        right instanceof V.BinaryOperationExpression0 &&
        right.operator.precedence <= t2.precedence;
      if (rightNeedsParens) t1 += H.Primitives_stringFromCharCode(40);
      t1 += right.toString$0(0);
      if (rightNeedsParens) t1 += H.Primitives_stringFromCharCode(41);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression0: 1,
    $isAstNode0: 1,
  };
  V.BinaryOperator0.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  Z.BooleanExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitBooleanExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return String(this.value);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  Z.booleanConstructor_closure.prototype = {
    call$0() {
      var $constructor = P.allowInterop(new Z.booleanConstructor__closure());
      B.injectSuperclass(C.SassBoolean_true, $constructor);
      B.setClassName(C.SassBoolean_true, 'SassBoolean');
      B.forwardToString($constructor);
      type$.Object._as(
        $constructor.prototype
      ).getValue = P.allowInteropCaptureThis(
        new Z.booleanConstructor__closure0()
      );
      $constructor.TRUE = C.SassBoolean_true;
      $constructor.FALSE = C.SassBoolean_false;
      return $constructor;
    },
    $signature: 153,
  };
  Z.booleanConstructor__closure.prototype = {
    call$1(_) {
      throw H.wrapException(
        "new sass.types.Boolean() isn't allowed.\nUse sass.types.Boolean.TRUE or sass.types.Boolean.FALSE instead."
      );
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 145,
  };
  Z.booleanConstructor__closure0.prototype = {
    call$1(thisArg) {
      return thisArg === C.SassBoolean_true;
    },
    $signature: 344,
  };
  Z.SassBoolean0.prototype = {
    get$isTruthy() {
      return this.value;
    },
    accept$1$1(visitor) {
      return visitor._buffer.write$1(0, String(this.value));
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unaryNot$0() {
      return this.value ? C.SassBoolean_false : C.SassBoolean_true;
    },
  };
  Q.BuiltInCallable0.prototype = {
    callbackFor$2(positional, names) {
      var t1,
        t2,
        fuzzyMatch,
        minMismatchDistance,
        _i,
        overload,
        t3,
        mismatchDistance,
        t4;
      for (
        t1 = this._built_in$_overloads,
          t2 = t1.length,
          fuzzyMatch = null,
          minMismatchDistance = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        overload = t1[_i];
        t3 = overload.item1;
        if (t3.matches$2(positional, names)) return overload;
        mismatchDistance = t3.$arguments.length - positional;
        if (minMismatchDistance != null) {
          t3 = Math.abs(mismatchDistance);
          t4 = Math.abs(minMismatchDistance);
          if (t3 > t4) continue;
          if (t3 === t4 && mismatchDistance < 0) continue;
        }
        minMismatchDistance = mismatchDistance;
        fuzzyMatch = overload;
      }
      if (fuzzyMatch != null) return fuzzyMatch;
      throw H.wrapException(
        P.StateError$(
          'BuiltInCallable ' + this.name + ' may not have empty overloads.'
        )
      );
    },
    withName$1($name) {
      return new Q.BuiltInCallable0($name, this._built_in$_overloads);
    },
    $isAsyncCallable0: 1,
    $isAsyncBuiltInCallable0: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  Q.BuiltInModule0.prototype = {
    get$upstream() {
      return C.List_empty12;
    },
    get$variableNodes() {
      return C.Map_empty6;
    },
    get$extensionStore() {
      return C.C_EmptyExtensionStore0;
    },
    get$css(_) {
      return new V.CssStylesheet0(
        C.List_empty10,
        Y.SourceFile$decoded(C.List_empty1, this.url).span$2(0, 0)
      );
    },
    get$transitivelyContainsCss() {
      return false;
    },
    get$transitivelyContainsExtensions() {
      return false;
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw H.wrapException(E.SassScriptException$0('Undefined variable.'));
      throw H.wrapException(
        E.SassScriptException$0('Cannot modify built-in variable.')
      );
    },
    variableIdentity$1($name) {
      return this;
    },
    cloneCss$0() {
      return this;
    },
    $isModule0: 1,
    get$url() {
      return this.url;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$variables() {
      return this.variables;
    },
  };
  M.CallableDeclaration0.prototype = {
    get$span() {
      return this.span;
    },
  };
  X.ClassSelector0.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof X.ClassSelector0 && other.name === this.name;
    },
    accept$1$1(visitor) {
      var t1 = visitor._buffer;
      t1.writeCharCode$1(46);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new X.ClassSelector0(this.name + suffix);
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  V._CloneCssVisitor0.prototype = {
    visitCssAtRule$1(node) {
      var t1 = node.isChildless,
        rule = U.ModifiableCssAtRule$0(node.name, node.span, t1, node.value);
      return t1 ? rule : this._clone_css$_visitChildren$2(rule, node);
    },
    visitCssComment$1(node) {
      return new R.ModifiableCssComment0(node.text, node.span);
    },
    visitCssDeclaration$1(node) {
      return L.ModifiableCssDeclaration$0(
        node.name,
        node.value,
        node.span,
        node.parsedAsCustomProperty,
        node.valueSpanForMap
      );
    },
    visitCssImport$1(node) {
      return F.ModifiableCssImport$0(
        node.url,
        node.span,
        node.media,
        node.supports
      );
    },
    visitCssKeyframeBlock$1(node) {
      return this._clone_css$_visitChildren$2(
        U.ModifiableCssKeyframeBlock$0(node.selector, node.span),
        node
      );
    },
    visitCssMediaRule$1(node) {
      return this._clone_css$_visitChildren$2(
        G.ModifiableCssMediaRule$0(node.queries, node.span),
        node
      );
    },
    visitCssStyleRule$1(node) {
      var newSelector = this._clone_css$_oldToNewSelectors.$index(
        0,
        node.selector
      );
      if (newSelector == null)
        throw H.wrapException(P.StateError$(string$.The_Ex));
      return this._clone_css$_visitChildren$2(
        X.ModifiableCssStyleRule$0(
          newSelector,
          node.span,
          node.originalSelector
        ),
        node
      );
    },
    visitCssStylesheet$1(node) {
      return this._clone_css$_visitChildren$2(
        V.ModifiableCssStylesheet$0(node.get$span()),
        node
      );
    },
    visitCssSupportsRule$1(node) {
      return this._clone_css$_visitChildren$2(
        B.ModifiableCssSupportsRule$0(node.condition, node.span),
        node
      );
    },
    _clone_css$_visitChildren$1$2(newParent, oldParent) {
      var t1, t2, newChild;
      for (
        t1 = J.get$iterator$ax(oldParent.get$children(oldParent));
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        newChild = t2.accept$1(this);
        newChild.isGroupEnd = t2.get$isGroupEnd();
        newParent.addChild$1(newChild);
      }
      return newParent;
    },
    _clone_css$_visitChildren$2(newParent, oldParent) {
      return this._clone_css$_visitChildren$1$2(
        newParent,
        oldParent,
        type$.ModifiableCssParentNode_2
      );
    },
  };
  K.ColorExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitColorExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return N.serializeValue(this.value, true, true);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  K.global_closure30.prototype = {
    call$1($arguments) {
      return K._rgb0('rgb', $arguments);
    },
    $signature: 4,
  };
  K.global_closure31.prototype = {
    call$1($arguments) {
      return K._rgb0('rgb', $arguments);
    },
    $signature: 4,
  };
  K.global_closure32.prototype = {
    call$1($arguments) {
      return K._rgbTwoArg0('rgb', $arguments);
    },
    $signature: 4,
  };
  K.global_closure33.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels0(
        'rgb',
        H._setArrayType(['$red', '$green', '$blue'], type$.JSArray_String),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString0
        ? parsed
        : K._rgb0('rgb', type$.List_Value_2._as(parsed));
    },
    $signature: 4,
  };
  K.global_closure34.prototype = {
    call$1($arguments) {
      return K._rgb0('rgba', $arguments);
    },
    $signature: 4,
  };
  K.global_closure35.prototype = {
    call$1($arguments) {
      return K._rgb0('rgba', $arguments);
    },
    $signature: 4,
  };
  K.global_closure36.prototype = {
    call$1($arguments) {
      return K._rgbTwoArg0('rgba', $arguments);
    },
    $signature: 4,
  };
  K.global_closure37.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels0(
        'rgba',
        H._setArrayType(['$red', '$green', '$blue'], type$.JSArray_String),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString0
        ? parsed
        : K._rgb0('rgba', type$.List_Value_2._as(parsed));
    },
    $signature: 4,
  };
  K.global_closure38.prototype = {
    call$1($arguments) {
      var color,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1('weight');
      if (t1.$index($arguments, 0) instanceof T.SassNumber0) {
        if (weight.value !== 100 || !weight.hasUnit$1('%'))
          throw H.wrapException(string$.Only_oa);
        return K._functionString0('invert', t1.take$1($arguments, 1));
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      t1 = color.get$red();
      t2 = color.get$green();
      return K._mixColors0(
        color.changeRgb$3$blue$green$red(
          255 - color.get$blue(),
          255 - t2,
          255 - t1
        ),
        color,
        weight
      );
    },
    $signature: 4,
  };
  K.global_closure39.prototype = {
    call$1($arguments) {
      return K._hsl0('hsl', $arguments);
    },
    $signature: 4,
  };
  K.global_closure40.prototype = {
    call$1($arguments) {
      return K._hsl0('hsl', $arguments);
    },
    $signature: 4,
  };
  K.global_closure41.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (
        t1.$index($arguments, 0).get$isVar() ||
        t1.$index($arguments, 1).get$isVar()
      )
        return K._functionString0('hsl', $arguments);
      else
        throw H.wrapException(
          E.SassScriptException$0('Missing argument $lightness.')
        );
    },
    $signature: 12,
  };
  K.global_closure42.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels0(
        'hsl',
        H._setArrayType(
          ['$hue', '$saturation', '$lightness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString0
        ? parsed
        : K._hsl0('hsl', type$.List_Value_2._as(parsed));
    },
    $signature: 4,
  };
  K.global_closure43.prototype = {
    call$1($arguments) {
      return K._hsl0('hsla', $arguments);
    },
    $signature: 4,
  };
  K.global_closure44.prototype = {
    call$1($arguments) {
      return K._hsl0('hsla', $arguments);
    },
    $signature: 4,
  };
  K.global_closure45.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (
        t1.$index($arguments, 0).get$isVar() ||
        t1.$index($arguments, 1).get$isVar()
      )
        return K._functionString0('hsla', $arguments);
      else
        throw H.wrapException(
          E.SassScriptException$0('Missing argument $lightness.')
        );
    },
    $signature: 12,
  };
  K.global_closure46.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels0(
        'hsla',
        H._setArrayType(
          ['$hue', '$saturation', '$lightness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      return parsed instanceof D.SassString0
        ? parsed
        : K._hsl0('hsla', type$.List_Value_2._as(parsed));
    },
    $signature: 4,
  };
  K.global_closure47.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber0)
        return K._functionString0('grayscale', $arguments);
      return t1
        .$index($arguments, 0)
        .assertColor$1('color')
        .changeHsl$1$saturation(0);
    },
    $signature: 4,
  };
  K.global_closure48.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        degrees = t1.$index($arguments, 1).assertNumber$1('degrees');
      K._checkAngle0(degrees, null);
      return color.changeHsl$1$hue(color.get$hue() + degrees.value);
    },
    $signature: 22,
  };
  K.global_closure49.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$lightness(
        C.JSNumber_methods.clamp$2(
          color.get$lightness() + amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 22,
  };
  K.global_closure50.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$lightness(
        C.JSNumber_methods.clamp$2(
          color.get$lightness() - amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 22,
  };
  K.global_closure51.prototype = {
    call$1($arguments) {
      return new D.SassString0(
        'saturate(' +
          N.serializeValue(
            J.$index$asx($arguments, 0).assertNumber$1('amount'),
            false,
            true
          ) +
          ')',
        false
      );
    },
    $signature: 12,
  };
  K.global_closure52.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$saturation(
        C.JSNumber_methods.clamp$2(
          color.get$saturation() + amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 22,
  };
  K.global_closure53.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1('color'),
        amount = t1.$index($arguments, 1).assertNumber$1('amount');
      return color.changeHsl$1$saturation(
        C.JSNumber_methods.clamp$2(
          color.get$saturation() - amount.valueInRange$3(0, 100, 'amount'),
          0,
          100
        )
      );
    },
    $signature: 22,
  };
  K.global_closure54.prototype = {
    call$1($arguments) {
      var color,
        argument = J.$index$asx($arguments, 0);
      if (
        argument instanceof D.SassString0 &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart0()
        )
      )
        return K._functionString0('alpha', $arguments);
      color = argument.assertColor$1('color');
      return new N.UnitlessSassNumber0(color.alpha, null);
    },
    $signature: 4,
  };
  K.global_closure55.prototype = {
    call$1($arguments) {
      var t1,
        argList = J.$index$asx($arguments, 0).get$asList();
      if (
        argList.length !== 0 &&
        C.JSArray_methods.every$1(argList, new K.global__closure0())
      )
        return K._functionString0('alpha', $arguments);
      t1 = argList.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$0('Missing argument $color.')
        );
      else
        throw H.wrapException(
          E.SassScriptException$0(
            'Only 1 argument allowed, but ' + t1 + ' were passed.'
          )
        );
    },
    $signature: 12,
  };
  K.global__closure0.prototype = {
    call$1(argument) {
      return (
        argument instanceof D.SassString0 &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart0()
        )
      );
    },
    $signature: 49,
  };
  K.global_closure56.prototype = {
    call$1($arguments) {
      var color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber0)
        return K._functionString0('opacity', $arguments);
      color = t1.$index($arguments, 0).assertColor$1('color');
      return new N.UnitlessSassNumber0(color.alpha, null);
    },
    $signature: 4,
  };
  K.module_closure8.prototype = {
    call$1($arguments) {
      var result,
        color,
        t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1('weight');
      if (t1.$index($arguments, 0) instanceof T.SassNumber0) {
        if (weight.value !== 100 || !weight.hasUnit$1('%'))
          throw H.wrapException(string$.Only_oa);
        result = K._functionString0('invert', t1.take$1($arguments, 1));
        N.warn0(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x29x20to_ci +
            result.toString$0(0),
          true
        );
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      t1 = color.get$red();
      t2 = color.get$green();
      return K._mixColors0(
        color.changeRgb$3$blue$green$red(
          255 - color.get$blue(),
          255 - t2,
          255 - t1
        ),
        color,
        weight
      );
    },
    $signature: 4,
  };
  K.module_closure9.prototype = {
    call$1($arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber0) {
        result = K._functionString0('grayscale', t1.take$1($arguments, 1));
        N.warn0(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x29x20to_cg +
            result.toString$0(0),
          true
        );
        return result;
      }
      return t1
        .$index($arguments, 0)
        .assertColor$1('color')
        .changeHsl$1$saturation(0);
    },
    $signature: 4,
  };
  K.module_closure10.prototype = {
    call$1($arguments) {
      return K._hwb0($arguments);
    },
    $signature: 4,
  };
  K.module_closure11.prototype = {
    call$1($arguments) {
      var parsed = K._parseChannels0(
        'hwb',
        H._setArrayType(
          ['$hue', '$whiteness', '$blackness'],
          type$.JSArray_String
        ),
        J.get$first$ax($arguments)
      );
      if (parsed instanceof D.SassString0)
        throw H.wrapException(
          E.SassScriptException$0(
            'Expected numeric channels, got "' + parsed.toString$0(0) + '".'
          )
        );
      else return K._hwb0(type$.List_Value_2._as(parsed));
    },
    $signature: 4,
  };
  K.module_closure12.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$whiteness();
      return new L.SingleUnitSassNumber0('%', t1, null);
    },
    $signature: 9,
  };
  K.module_closure13.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$blackness();
      return new L.SingleUnitSassNumber0('%', t1, null);
    },
    $signature: 9,
  };
  K.module_closure14.prototype = {
    call$1($arguments) {
      var result,
        color,
        argument = J.$index$asx($arguments, 0);
      if (
        argument instanceof D.SassString0 &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart0()
        )
      ) {
        result = K._functionString0('alpha', $arguments);
        N.warn0(string$.Using_c + result.toString$0(0), true);
        return result;
      }
      color = argument.assertColor$1('color');
      return new N.UnitlessSassNumber0(color.alpha, null);
    },
    $signature: 4,
  };
  K.module_closure15.prototype = {
    call$1($arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments);
      if (
        C.JSArray_methods.every$1(
          t1.$index($arguments, 0).get$asList(),
          new K.module__closure0()
        )
      ) {
        result = K._functionString0('alpha', $arguments);
        N.warn0(string$.Using_c + result.toString$0(0), true);
        return result;
      }
      throw H.wrapException(
        E.SassScriptException$0(
          'Only 1 argument allowed, but ' +
            t1.get$length($arguments) +
            ' were passed.'
        )
      );
    },
    $signature: 12,
  };
  K.module__closure0.prototype = {
    call$1(argument) {
      return (
        argument instanceof D.SassString0 &&
        !argument.hasQuotes &&
        C.JSString_methods.contains$1(
          argument.text,
          $.$get$_microsoftFilterStart0()
        )
      );
    },
    $signature: 49,
  };
  K.module_closure16.prototype = {
    call$1($arguments) {
      var result,
        color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof T.SassNumber0) {
        result = K._functionString0('opacity', $arguments);
        N.warn0(
          'Passing a number (' +
            H.S(t1.$index($arguments, 0)) +
            string$.x20to_co +
            result.toString$0(0),
          true
        );
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1('color');
      return new N.UnitlessSassNumber0(color.alpha, null);
    },
    $signature: 4,
  };
  K._red_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$red();
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._green_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$green();
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._blue_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$blue();
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._mix_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return K._mixColors0(
        t1.$index($arguments, 0).assertColor$1('color1'),
        t1.$index($arguments, 1).assertColor$1('color2'),
        t1.$index($arguments, 2).assertNumber$1('weight')
      );
    },
    $signature: 22,
  };
  K._hue_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1('color').get$hue();
      return new L.SingleUnitSassNumber0('deg', t1, null);
    },
    $signature: 9,
  };
  K._saturation_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$saturation();
      return new L.SingleUnitSassNumber0('%', t1, null);
    },
    $signature: 9,
  };
  K._lightness_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments)
        .assertColor$1('color')
        .get$lightness();
      return new L.SingleUnitSassNumber0('%', t1, null);
    },
    $signature: 9,
  };
  K._complement_closure0.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1('color');
      return color.changeHsl$1$hue(color.get$hue() + 180);
    },
    $signature: 22,
  };
  K._adjust_closure0.prototype = {
    call$1($arguments) {
      return K._updateComponents0($arguments, true, false, false);
    },
    $signature: 22,
  };
  K._scale_closure0.prototype = {
    call$1($arguments) {
      return K._updateComponents0($arguments, false, false, true);
    },
    $signature: 22,
  };
  K._change_closure0.prototype = {
    call$1($arguments) {
      return K._updateComponents0($arguments, false, true, false);
    },
    $signature: 22,
  };
  K._ieHexStr_closure0.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1('color'),
        t1 = new K._ieHexStr_closure_hexString0();
      return new D.SassString0(
        '#' +
          H.S(t1.call$1(T.fuzzyRound0(color.alpha * 255))) +
          H.S(t1.call$1(color.get$red())) +
          H.S(t1.call$1(color.get$green())) +
          H.S(t1.call$1(color.get$blue())),
        false
      );
    },
    $signature: 12,
  };
  K._ieHexStr_closure_hexString0.prototype = {
    call$1(component) {
      return C.JSString_methods.padLeft$2(
        C.JSInt_methods.toRadixString$1(component, 16),
        2,
        '0'
      ).toUpperCase();
    },
    $signature: 68,
  };
  K._updateComponents_getParam0.prototype = {
    call$4$assertPercent$checkPercent($name, max, assertPercent, checkPercent) {
      var t2,
        t1 = this.keywords.remove$1(0, $name),
        number = t1 == null ? null : t1.assertNumber$1($name);
      if (number == null) return null;
      t1 = this.scale;
      t2 = !t1;
      if (t2 && checkPercent) K._checkPercent0(number, $name);
      if (!t2 || assertPercent) number.assertUnit$2('%', $name);
      if (t1) max = 100;
      return number.valueInRange$3(this.change ? 0 : -max, max, $name);
    },
    call$2($name, max) {
      return this.call$4$assertPercent$checkPercent($name, max, false, false);
    },
    call$3$checkPercent($name, max, checkPercent) {
      return this.call$4$assertPercent$checkPercent(
        $name,
        max,
        false,
        checkPercent
      );
    },
    call$3$assertPercent($name, max, assertPercent) {
      return this.call$4$assertPercent$checkPercent(
        $name,
        max,
        assertPercent,
        false
      );
    },
    $signature: 129,
  };
  K._updateComponents_closure0.prototype = {
    call$1($name) {
      return '$' + $name;
    },
    $signature: 5,
  };
  K._updateComponents_updateValue0.prototype = {
    call$3(current, param, max) {
      var t1;
      if (param == null) return current;
      if (this.change) return param;
      if (this.adjust)
        return C.JSNumber_methods.clamp$2(current + param, 0, max);
      t1 = param > 0 ? max - current : current;
      return current + t1 * (param / 100);
    },
    $signature: 130,
  };
  K._updateComponents_updateRgb0.prototype = {
    call$2(current, param) {
      return T.fuzzyRound0(this.updateValue.call$3(current, param, 255));
    },
    $signature: 131,
  };
  K._functionString_closure0.prototype = {
    call$1(argument) {
      return N.serializeValue(argument, false, true);
    },
    $signature: 350,
  };
  K._removedColorFunction_closure0.prototype = {
    call$1($arguments) {
      var t1 = this.name,
        t2 = J.getInterceptor$asx($arguments),
        t3 =
          'The function ' +
          t1 +
          string$.x28__isn +
          H.S(t2.$index($arguments, 0)) +
          ', $' +
          this.argument +
          ': ';
      throw H.wrapException(
        E.SassScriptException$0(
          t3 +
            (this.negative ? '-' : '') +
            H.S(t2.$index($arguments, 1)) +
            string$.x29x0a_Mor +
            t1
        )
      );
    },
    $signature: 351,
  };
  K._rgb_closure0.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless0(
        alpha.assertNumber$1('alpha'),
        1,
        'alpha'
      );
    },
    $signature: 109,
  };
  K._hsl_closure0.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless0(
        alpha.assertNumber$1('alpha'),
        1,
        'alpha'
      );
    },
    $signature: 109,
  };
  K._removeUnits_closure1.prototype = {
    call$1(unit) {
      return ' * 1' + unit;
    },
    $signature: 5,
  };
  K._removeUnits_closure2.prototype = {
    call$1(unit) {
      return ' / 1' + unit;
    },
    $signature: 5,
  };
  K._hwb_closure0.prototype = {
    call$1(alpha) {
      return K._percentageOrUnitless0(
        alpha.assertNumber$1('alpha'),
        1,
        'alpha'
      );
    },
    $signature: 109,
  };
  K._parseChannels_closure0.prototype = {
    call$1(value) {
      return value.get$isVar();
    },
    $signature: 49,
  };
  K._NodeSassColor.prototype = {};
  K.colorConstructor_closure.prototype = {
    call$6(thisArg, redOrArgb, green, blue, alpha, dartValue) {
      var red, t1, t2, t3, t4;
      if (dartValue != null) {
        J.set$dartValue$x(thisArg, dartValue);
        return;
      }
      if (green == null || blue == null) {
        H._asInt(redOrArgb);
        alpha = C.JSInt_methods._shrOtherPositive$1(redOrArgb, 24) / 255;
        red = C.JSInt_methods.$mod(
          C.JSInt_methods._shrOtherPositive$1(redOrArgb, 16),
          256
        );
        green = C.JSInt_methods.$mod(
          C.JSInt_methods._shrOtherPositive$1(redOrArgb, 8),
          256
        );
        blue = C.JSInt_methods.$mod(redOrArgb, 256);
      } else {
        redOrArgb.toString;
        red = redOrArgb;
      }
      t1 = C.JSNumber_methods.round$0(C.JSNumber_methods.clamp$2(red, 0, 255));
      t2 = C.JSNumber_methods.round$0(
        C.JSNumber_methods.clamp$2(green, 0, 255)
      );
      t3 = C.JSNumber_methods.round$0(C.JSNumber_methods.clamp$2(blue, 0, 255));
      t4 = alpha == null ? null : C.JSNumber_methods.clamp$2(alpha, 0, 1);
      J.set$dartValue$x(
        thisArg,
        K.SassColor$rgb0(t1, t2, t3, t4 == null ? 1 : t4, null)
      );
    },
    call$2(thisArg, redOrArgb) {
      return this.call$6(thisArg, redOrArgb, null, null, null, null);
    },
    call$3(thisArg, redOrArgb, green) {
      return this.call$6(thisArg, redOrArgb, green, null, null, null);
    },
    call$4(thisArg, redOrArgb, green, blue) {
      return this.call$6(thisArg, redOrArgb, green, blue, null, null);
    },
    call$5(thisArg, redOrArgb, green, blue, alpha) {
      return this.call$6(thisArg, redOrArgb, green, blue, alpha, null);
    },
    'call*': 'call$6',
    $requiredArgCount: 2,
    $defaultValues() {
      return [null, null, null, null];
    },
    $signature: 353,
  };
  K.colorConstructor_closure0.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).get$red();
    },
    $signature: 118,
  };
  K.colorConstructor_closure1.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).get$green();
    },
    $signature: 118,
  };
  K.colorConstructor_closure2.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).get$blue();
    },
    $signature: 118,
  };
  K.colorConstructor_closure3.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).alpha;
    },
    $signature: 355,
  };
  K.colorConstructor_closure4.prototype = {
    call$2(thisArg, value) {
      var t1 = J.getInterceptor$x(thisArg);
      t1.set$dartValue(
        thisArg,
        t1
          .get$dartValue(thisArg)
          .changeRgb$1$red(
            C.JSNumber_methods.round$0(
              C.JSNumber_methods.clamp$2(value, 0, 255)
            )
          )
      );
    },
    $signature: 79,
  };
  K.colorConstructor_closure5.prototype = {
    call$2(thisArg, value) {
      var t1 = J.getInterceptor$x(thisArg);
      t1.set$dartValue(
        thisArg,
        t1
          .get$dartValue(thisArg)
          .changeRgb$1$green(
            C.JSNumber_methods.round$0(
              C.JSNumber_methods.clamp$2(value, 0, 255)
            )
          )
      );
    },
    $signature: 79,
  };
  K.colorConstructor_closure6.prototype = {
    call$2(thisArg, value) {
      var t1 = J.getInterceptor$x(thisArg);
      t1.set$dartValue(
        thisArg,
        t1
          .get$dartValue(thisArg)
          .changeRgb$1$blue(
            C.JSNumber_methods.round$0(
              C.JSNumber_methods.clamp$2(value, 0, 255)
            )
          )
      );
    },
    $signature: 79,
  };
  K.colorConstructor_closure7.prototype = {
    call$2(thisArg, value) {
      var t1 = J.getInterceptor$x(thisArg);
      t1.set$dartValue(
        thisArg,
        t1
          .get$dartValue(thisArg)
          .changeRgb$1$alpha(C.JSNumber_methods.clamp$2(value, 0, 1))
      );
    },
    $signature: 79,
  };
  K.colorConstructor_closure8.prototype = {
    call$1(thisArg) {
      return N.serializeValue(J.get$dartValue$x(thisArg), true, true);
    },
    $signature: 357,
  };
  K.SassColor0.prototype = {
    get$red() {
      if (this._color1$_red == null) this._color1$_hslToRgb$0();
      var t1 = this._color1$_red;
      t1.toString;
      return t1;
    },
    get$green() {
      if (this._color1$_green == null) this._color1$_hslToRgb$0();
      var t1 = this._color1$_green;
      t1.toString;
      return t1;
    },
    get$blue() {
      if (this._color1$_blue == null) this._color1$_hslToRgb$0();
      var t1 = this._color1$_blue;
      t1.toString;
      return t1;
    },
    get$hue() {
      if (this._color1$_hue == null) this._color1$_rgbToHsl$0();
      var t1 = this._color1$_hue;
      t1.toString;
      return t1;
    },
    get$saturation() {
      if (this._color1$_saturation == null) this._color1$_rgbToHsl$0();
      var t1 = this._color1$_saturation;
      t1.toString;
      return t1;
    },
    get$lightness() {
      if (this._color1$_lightness == null) this._color1$_rgbToHsl$0();
      var t1 = this._color1$_lightness;
      t1.toString;
      return t1;
    },
    get$whiteness() {
      return (
        (Math.min(Math.min(this.get$red(), this.get$green()), this.get$blue()) /
          255) *
        100
      );
    },
    get$blackness() {
      return (
        100 -
        (Math.max(Math.max(this.get$red(), this.get$green()), this.get$blue()) /
          255) *
          100
      );
    },
    accept$1$1(visitor) {
      return visitor.visitColor$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertColor$1($name) {
      return this;
    },
    changeRgb$4$alpha$blue$green$red(alpha, blue, green, red) {
      var _this = this,
        t1 = red == null ? _this.get$red() : red,
        t2 = green == null ? _this.get$green() : green,
        t3 = blue == null ? _this.get$blue() : blue;
      return K.SassColor$rgb0(
        t1,
        t2,
        t3,
        alpha == null ? _this.alpha : alpha,
        null
      );
    },
    changeRgb$3$blue$green$red(blue, green, red) {
      return this.changeRgb$4$alpha$blue$green$red(null, blue, green, red);
    },
    changeRgb$1$alpha(alpha) {
      return this.changeRgb$4$alpha$blue$green$red(alpha, null, null, null);
    },
    changeRgb$1$blue(blue) {
      return this.changeRgb$4$alpha$blue$green$red(null, blue, null, null);
    },
    changeRgb$1$green(green) {
      return this.changeRgb$4$alpha$blue$green$red(null, null, green, null);
    },
    changeRgb$1$red(red) {
      return this.changeRgb$4$alpha$blue$green$red(null, null, null, red);
    },
    changeHsl$4$alpha$hue$lightness$saturation(
      alpha,
      hue,
      lightness,
      saturation
    ) {
      var _this = this,
        t1 = hue == null ? _this.get$hue() : hue,
        t2 = saturation == null ? _this.get$saturation() : saturation,
        t3 = lightness == null ? _this.get$lightness() : lightness;
      return K.SassColor$hsl0(t1, t2, t3, alpha == null ? _this.alpha : alpha);
    },
    changeHsl$1$saturation(saturation) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        null,
        null,
        saturation
      );
    },
    changeHsl$1$lightness(lightness) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        null,
        lightness,
        null
      );
    },
    changeHsl$1$hue(hue) {
      return this.changeHsl$4$alpha$hue$lightness$saturation(
        null,
        hue,
        null,
        null
      );
    },
    changeAlpha$1(alpha) {
      var _this = this;
      return new K.SassColor0(
        _this._color1$_red,
        _this._color1$_green,
        _this._color1$_blue,
        _this._color1$_hue,
        _this._color1$_saturation,
        _this._color1$_lightness,
        T.fuzzyAssertRange0(alpha, 0, 1, 'alpha'),
        null
      );
    },
    plus$1(other) {
      if (!(other instanceof T.SassNumber0) && !(other instanceof K.SassColor0))
        return this.super$Value$plus0(other);
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' + ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    minus$1(other) {
      if (!(other instanceof T.SassNumber0) && !(other instanceof K.SassColor0))
        return this.super$Value$minus0(other);
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' - ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    dividedBy$1(other) {
      if (!(other instanceof T.SassNumber0) && !(other instanceof K.SassColor0))
        return this.super$Value$dividedBy0(other);
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' / ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof K.SassColor0 &&
        other.get$red() === _this.get$red() &&
        other.get$green() === _this.get$green() &&
        other.get$blue() === _this.get$blue() &&
        other.alpha === _this.alpha
      );
    },
    get$hashCode(_) {
      var _this = this;
      return (
        C.JSInt_methods.get$hashCode(_this.get$red()) ^
        C.JSInt_methods.get$hashCode(_this.get$green()) ^
        C.JSInt_methods.get$hashCode(_this.get$blue()) ^
        C.JSNumber_methods.get$hashCode(_this.alpha)
      );
    },
    _color1$_rgbToHsl$0() {
      var t2,
        lightness,
        _this = this,
        scaledRed = _this.get$red() / 255,
        scaledGreen = _this.get$green() / 255,
        scaledBlue = _this.get$blue() / 255,
        max = Math.max(Math.max(scaledRed, scaledGreen), scaledBlue),
        min = Math.min(Math.min(scaledRed, scaledGreen), scaledBlue),
        delta = max - min,
        t1 = max === min;
      if (t1) _this._color1$_hue = 0;
      else if (max === scaledRed)
        _this._color1$_hue = C.JSNumber_methods.$mod(
          (60 * (scaledGreen - scaledBlue)) / delta,
          360
        );
      else if (max === scaledGreen)
        _this._color1$_hue = C.JSNumber_methods.$mod(
          120 + (60 * (scaledBlue - scaledRed)) / delta,
          360
        );
      else if (max === scaledBlue)
        _this._color1$_hue = C.JSNumber_methods.$mod(
          240 + (60 * (scaledRed - scaledGreen)) / delta,
          360
        );
      t2 = max + min;
      lightness = 50 * t2;
      _this._color1$_lightness = lightness;
      if (t1) _this._color1$_saturation = 0;
      else {
        t1 = 100 * delta;
        if (lightness < 50) _this._color1$_saturation = t1 / t2;
        else _this._color1$_saturation = t1 / (2 - max - min);
      }
    },
    _color1$_hslToRgb$0() {
      var _this = this,
        scaledHue = _this.get$hue() / 360,
        scaledSaturation = _this.get$saturation() / 100,
        scaledLightness = _this.get$lightness() / 100,
        m2 =
          scaledLightness <= 0.5
            ? scaledLightness * (scaledSaturation + 1)
            : scaledLightness +
              scaledSaturation -
              scaledLightness * scaledSaturation,
        m1 = scaledLightness * 2 - m2;
      _this._color1$_red = T.fuzzyRound0(
        K.SassColor__hueToRgb0(m1, m2, scaledHue + 0.3333333333333333) * 255
      );
      _this._color1$_green = T.fuzzyRound0(
        K.SassColor__hueToRgb0(m1, m2, scaledHue) * 255
      );
      _this._color1$_blue = T.fuzzyRound0(
        K.SassColor__hueToRgb0(m1, m2, scaledHue - 0.3333333333333333) * 255
      );
    },
  };
  K.SassColor_SassColor$hwb_toRgb0.prototype = {
    call$1(hue) {
      return T.fuzzyRound0(
        (K.SassColor__hueToRgb0(0, 1, hue) * this.factor +
          this._box_0.scaledWhiteness) *
          255
      );
    },
    $signature: 34,
  };
  R.ModifiableCssComment0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $isCssComment0: 1,
    get$span() {
      return this.span;
    },
  };
  U.CompileResult0.prototype = {};
  S.ComplexSassNumber0.prototype = {
    get$hasUnits() {
      return true;
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return false;
    },
    withValue$1(value) {
      return new S.ComplexSassNumber0(
        this.numeratorUnits,
        this.denominatorUnits,
        value,
        null
      );
    },
    withSlash$2(numerator, denominator) {
      return new S.ComplexSassNumber0(
        this.numeratorUnits,
        this.denominatorUnits,
        this.value,
        new S.Tuple2(
          numerator,
          denominator,
          type$.Tuple2_SassNumber_SassNumber_2
        )
      );
    },
    get$numeratorUnits() {
      return this.numeratorUnits;
    },
    get$denominatorUnits() {
      return this.denominatorUnits;
    },
  };
  S.ComplexSelector0.prototype = {
    get$minSpecificity() {
      if (this._complex0$_minSpecificity == null)
        this._complex0$_computeSpecificity$0();
      var t1 = this._complex0$_minSpecificity;
      t1.toString;
      return t1;
    },
    get$maxSpecificity() {
      if (this._complex0$_maxSpecificity == null)
        this._complex0$_computeSpecificity$0();
      var t1 = this._complex0$_maxSpecificity;
      t1.toString;
      return t1;
    },
    get$isInvisible() {
      var _this = this,
        t1 = _this._complex0$__ComplexSelector_isInvisible;
      if (t1 == null) {
        t1 = C.JSArray_methods.any$1(
          _this.components,
          new S.ComplexSelector_isInvisible_closure0()
        );
        if (_this._complex0$__ComplexSelector_isInvisible == null)
          _this._complex0$__ComplexSelector_isInvisible = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('isInvisible'));
      }
      return t1;
    },
    accept$1$1(visitor) {
      return visitor.visitComplexSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    _complex0$_computeSpecificity$0() {
      var t1, t2, minSpecificity, maxSpecificity, _i, component, t3;
      for (
        t1 = this.components,
          t2 = t1.length,
          minSpecificity = 0,
          maxSpecificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        component = t1[_i];
        if (component instanceof X.CompoundSelector0) {
          if (component._compound0$_minSpecificity == null)
            component._compound0$_computeSpecificity$0();
          t3 = component._compound0$_minSpecificity;
          t3.toString;
          minSpecificity += t3;
          if (component._compound0$_maxSpecificity == null)
            component._compound0$_computeSpecificity$0();
          t3 = component._compound0$_maxSpecificity;
          t3.toString;
          maxSpecificity += t3;
        }
      }
      this._complex0$_minSpecificity = minSpecificity;
      this._complex0$_maxSpecificity = maxSpecificity;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof S.ComplexSelector0 &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
  };
  S.ComplexSelector_isInvisible_closure0.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector0 && component.get$isInvisible()
      );
    },
    $signature: 102,
  };
  S.Combinator0.prototype = {
    toString$0(_) {
      return this._complex0$_text;
    },
    $isComplexSelectorComponent0: 1,
  };
  X.CompoundSelector0.prototype = {
    get$isInvisible() {
      return C.JSArray_methods.any$1(
        this.components,
        new X.CompoundSelector_isInvisible_closure0()
      );
    },
    accept$1$1(visitor) {
      return visitor.visitCompoundSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    _compound0$_computeSpecificity$0() {
      var t1, t2, minSpecificity, maxSpecificity, _i, simple;
      for (
        t1 = this.components,
          t2 = t1.length,
          minSpecificity = 0,
          maxSpecificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        simple = t1[_i];
        minSpecificity += simple.get$minSpecificity();
        maxSpecificity += simple.get$maxSpecificity();
      }
      this._compound0$_minSpecificity = minSpecificity;
      this._compound0$_maxSpecificity = maxSpecificity;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof X.CompoundSelector0 &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
    $isComplexSelectorComponent0: 1,
  };
  X.CompoundSelector_isInvisible_closure0.prototype = {
    call$1(component) {
      return component.get$isInvisible();
    },
    $signature: 19,
  };
  A.Configuration0.prototype = {
    throughForward$1($forward) {
      var prefix,
        shownVariables,
        hiddenVariables,
        t1,
        newValues = this._configuration$_values;
      if (newValues.get$isEmpty(newValues)) return C.Configuration_Map_empty0;
      prefix = $forward.prefix;
      if (prefix != null)
        newValues = new R.UnprefixedMapView0(
          newValues,
          prefix,
          type$.UnprefixedMapView_ConfiguredValue_2
        );
      shownVariables = $forward.shownVariables;
      hiddenVariables = $forward.hiddenVariables;
      if (shownVariables != null)
        newValues = new K.LimitedMapView0(
          newValues,
          shownVariables._base.intersection$1(
            new M.MapKeySet(newValues, type$.MapKeySet_nullable_Object)
          ),
          type$.LimitedMapView_String_ConfiguredValue_2
        );
      else {
        if (hiddenVariables != null) {
          t1 = hiddenVariables._base;
          t1 = t1.get$isNotEmpty(t1);
        } else t1 = false;
        if (t1)
          newValues = K.LimitedMapView$blocklist0(
            newValues,
            hiddenVariables,
            type$.String,
            type$.ConfiguredValue_2
          );
      }
      return this._configuration$_withValues$1(newValues);
    },
    _configuration$_withValues$1(values) {
      return new A.Configuration0(values);
    },
    toString$0(_) {
      var t1 = this._configuration$_values;
      return (
        '(' +
        t1
          .get$entries(t1)
          .map$1$1(0, new A.Configuration_toString_closure0(), type$.String)
          .join$1(0, ', ') +
        ')'
      );
    },
  };
  A.Configuration_toString_closure0.prototype = {
    call$1(entry) {
      return '$' + H.S(entry.key) + ': ' + H.S(entry.value);
    },
    $signature: 359,
  };
  A.ExplicitConfiguration0.prototype = {
    _configuration$_withValues$1(values) {
      return new A.ExplicitConfiguration0(this.nodeWithSpan, values);
    },
  };
  Z.ConfiguredValue0.prototype = {};
  Z.ConfiguredVariable0.prototype = {
    toString$0(_) {
      var t1 = '$' + this.name + ': ' + this.expression.toString$0(0);
      return t1 + (this.isGuarded ? ' !default' : '');
    },
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  Y.ContentBlock0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitContentBlock$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        t1 = this.$arguments;
      t1 =
        t1.$arguments.length === 0 && t1.restArgument == null
          ? ''
          : ' using (' + t1.toString$0(0) + ')';
      t2 = this.children;
      return t1 + (' {' + (t2 && C.JSArray_methods).join$1(t2, ' ') + '}');
    },
  };
  Q.ContentRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitContentRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.$arguments;
      return t1.get$isEmpty(t1)
        ? '@content;'
        : '@content(' + t1.toString$0(0) + ');';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  Q._disallowedFunctionNames_closure0.prototype = {
    call$1($function) {
      return $function.name;
    },
    $signature: 360,
  };
  Q.CssParser0.prototype = {
    get$plainCss() {
      return true;
    },
    silentComment$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      this.super$Parser$silentComment0();
      this.error$2(
        0,
        string$.Silent,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    atRule$2$root(child, root) {
      var $name,
        urlStart,
        next,
        url,
        urlSpan,
        queries,
        t2,
        t3,
        t4,
        t5,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(64);
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      switch ($name.get$asPlain()) {
        case 'at-root':
        case 'content':
        case 'debug':
        case 'each':
        case 'error':
        case 'extend':
        case 'for':
        case 'function':
        case 'if':
        case 'include':
        case 'mixin':
        case 'return':
        case 'warn':
        case 'while':
          _this.almostAnyValue$0();
          _this.error$2(
            0,
            "This at-rule isn't allowed in plain CSS.",
            t1.spanFrom$1(start)
          );
          break;
        case 'import':
          urlStart = new S._SpanScannerState(t1, t1._string_scanner$_position);
          next = t1.peekChar$0();
          url =
            next === 117 || next === 85
              ? _this.dynamicUrl$0()
              : new D.StringExpression0(
                  _this.interpolatedString$0().asInterpolation$1$static(true),
                  false
                );
          urlSpan = t1.spanFrom$1(urlStart);
          _this.whitespace$0();
          queries = _this.tryImportQueries$0();
          _this.expectStatementSeparator$1('@import rule');
          t2 = X.Interpolation$0(
            H._setArrayType([url], type$.JSArray_Object),
            urlSpan
          );
          t3 = t1.spanFrom$1(urlStart);
          t4 = queries == null;
          t5 = t4 ? null : queries.item1;
          t2 = H._setArrayType(
            [new Q.StaticImport0(t2, t5, t4 ? null : queries.item2, t3)],
            type$.JSArray_Import_2
          );
          t1 = t1.spanFrom$1(start);
          return new B.ImportRule0(
            P.List_List$unmodifiable(t2, type$.Import_2),
            t1
          );
        case 'media':
          return _this.mediaRule$1(start);
        case '-moz-document':
          return _this.mozDocumentRule$2(start, $name);
        case 'supports':
          return _this.supportsRule$1(start);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    identifierLike$0() {
      var t2,
        $arguments,
        t3,
        t4,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        specialFunction = _this.trySpecialFunction$2(
          plain.toLowerCase(),
          start
        );
      if (specialFunction != null) return specialFunction;
      t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40)) return new D.StringExpression0(identifier, false);
      $arguments = H._setArrayType([], type$.JSArray_Expression_2);
      if (!t1.scanChar$1(41)) {
        do {
          _this.whitespace$0();
          $arguments.push(_this.expression$1$singleEquals(true));
          _this.whitespace$0();
        } while (t1.scanChar$1(44));
        t1.expectChar$1(41);
      }
      if ($.$get$_disallowedFunctionNames0().contains$1(0, plain))
        _this.error$2(0, string$.This_f, t1.spanFrom$1(start));
      t3 = X.Interpolation$0(
        H._setArrayType(
          [new D.StringExpression0(identifier, false)],
          type$.JSArray_Object
        ),
        identifier.span
      );
      t2 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      t4 = type$.Expression_2;
      return new N.InterpolatedFunctionExpression0(
        t3,
        new X.ArgumentInvocation0(
          P.List_List$unmodifiable($arguments, t4),
          H.ConstantMap_ConstantMap$from(C.Map_empty8, type$.String, t4),
          null,
          null,
          t2
        ),
        t1.spanFrom$1(start)
      );
    },
  };
  Q.DebugRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDebugRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@debug ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  L.ModifiableCssDeclaration0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name.toString$0(0) + ': ' + this.value.toString$0(0) + ';';
    },
    get$span() {
      return this.span;
    },
  };
  L.Declaration0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    get$span() {
      return this.span;
    },
  };
  L.SupportsDeclaration0.prototype = {
    toString$0(_) {
      return (
        '(' + this.name.toString$0(0) + ': ' + this.value.toString$0(0) + ')'
      );
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  B.DynamicImport0.prototype = {
    toString$0(_) {
      return D.StringExpression_quoteText0(this.urlString);
    },
    $isImport0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  V.EachRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitEachRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.variables,
        t2 = this.children;
      return (
        '@each ' +
        new H.MappedListIterable(
          t1,
          new V.EachRule_toString_closure0(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ', ') +
        ' in ' +
        this.list.toString$0(0) +
        ' {' +
        (t2 && C.JSArray_methods).join$1(t2, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  V.EachRule_toString_closure0.prototype = {
    call$1(variable) {
      return '$' + variable;
    },
    $signature: 5,
  };
  F.EmptyExtensionStore0.prototype = {
    get$isEmpty(_) {
      return true;
    },
    get$simpleSelectors() {
      return C.C_EmptyUnmodifiableSet0;
    },
    extensionsWhereTarget$1(callback) {
      return C.List_empty11;
    },
    addSelector$3(selector, span, mediaContext) {
      throw H.wrapException(P.UnsupportedError$(string$.addSel));
    },
    addExtension$4(extender, target, extend, mediaContext) {
      throw H.wrapException(P.UnsupportedError$(string$.addExt_));
    },
    addExtensions$1(extenders) {
      throw H.wrapException(P.UnsupportedError$(string$.addExts));
    },
    clone$0() {
      return C.Tuple2_EmptyExtensionStore_Map_empty0;
    },
    $isExtensionStore0: 1,
  };
  D.ErrorRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitErrorRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@error ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  E.SassException0.prototype = {
    get$trace(_) {
      return Y.Trace$(
        H._setArrayType(
          [
            B.frameForSpan0(
              G.SourceSpanException.prototype.get$span.call(this),
              'root stylesheet',
              null
            ),
          ],
          type$.JSArray_Frame
        ),
        null
      );
    },
    get$span() {
      return G.SourceSpanException.prototype.get$span.call(this);
    },
    toString$0(_) {
      var t2,
        _i,
        frame,
        t3,
        _this = this,
        buffer = new P.StringBuffer(''),
        t1 = '' + ('Error: ' + _this._span_exception$_message + '\n');
      buffer._contents = t1;
      buffer._contents =
        t1 +
        G.SourceSpanException.prototype.get$span
          .call(_this)
          .highlight$1$color(null);
      for (
        t1 = _this.get$trace(_this).toString$0(0).split('\n'),
          t2 = t1.length,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        frame = t1[_i];
        if (J.get$length$asx(frame) === 0) continue;
        t3 = buffer._contents += '\n';
        buffer._contents = t3 + ('  ' + H.S(frame));
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  E.MultiSpanSassException0.prototype = {
    toString$0(_) {
      var t1,
        t2,
        _i,
        frame,
        _this = this,
        buffer = new P.StringBuffer(
          'Error: ' + _this._span_exception$_message + '\n'
        );
      X.NullableExtension_andThen0(
        U.Highlighter$multiple(
          G.SourceSpanException.prototype.get$span.call(_this),
          _this.primaryLabel,
          _this.secondarySpans,
          false,
          null,
          null
        ).highlight$0(),
        buffer.get$write(buffer)
      );
      for (
        t1 = _this.get$trace(_this).toString$0(0).split('\n'),
          t2 = t1.length,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        frame = t1[_i];
        if (J.get$length$asx(frame) === 0) continue;
        buffer._contents += '\n';
        buffer._contents += '  ' + H.S(frame);
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  E.SassRuntimeException0.prototype = {
    get$trace(receiver) {
      return this.trace;
    },
  };
  E.MultiSpanSassRuntimeException0.prototype = {
    $isSassRuntimeException0: 1,
    get$trace(receiver) {
      return this.trace;
    },
  };
  E.SassFormatException0.prototype = {
    get$source() {
      return P.String_String$fromCharCodes(
        C.NativeUint32List_methods.sublist$2(
          G.SourceSpanException.prototype.get$span.call(this).file
            ._decodedChars,
          0,
          null
        ),
        0,
        null
      );
    },
    $isFormatException: 1,
    $isSourceSpanFormatException: 1,
  };
  E.SassScriptException0.prototype = {
    toString$0(_) {
      return this.message + string$.x0a_BUG_;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  E.MultiSpanSassScriptException0.prototype = {};
  D.Exports.prototype = {};
  X.ExtendRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitExtendRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@extend ' + this.selector.toString$0(0);
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  S.Extension0.prototype = {
    toString$0(_) {
      var t1 =
        this.extender.toString$0(0) + ' {@extend ' + this.target.toString$0(0);
      return t1 + (this.isOptional ? ' !optional' : '') + '}';
    },
  };
  S.Extender0.prototype = {
    assertCompatibleMediaContext$1(mediaContext) {
      var expectedMediaContext,
        extension = this._extension$_extension;
      if (extension == null) return;
      expectedMediaContext = extension.mediaContext;
      if (expectedMediaContext == null) return;
      if (
        mediaContext != null &&
        C.C_ListEquality.equals$2(0, expectedMediaContext, mediaContext)
      )
        return;
      throw H.wrapException(E.SassException$0(string$.You_ma, extension.span));
    },
    toString$0(_) {
      return N.serializeSelector0(this.selector, true);
    },
  };
  X.ExtensionStore0.prototype = {
    get$isEmpty(_) {
      var t1 = this._extension_store$_extensions;
      return t1.get$isEmpty(t1);
    },
    get$simpleSelectors() {
      return new M.MapKeySet(
        this._extension_store$_selectors,
        type$.MapKeySet_SimpleSelector_2
      );
    },
    extensionsWhereTarget$1($async$callback) {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var callback = $async$callback;
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          t1,
          t2,
          t3;
        return function $async$extensionsWhereTarget$1(
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = $async$self._extension_store$_extensions),
                  (t1 = t1.get$entries(t1)),
                  (t1 = t1.get$iterator(t1));
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                t2 = t1.get$current();
                if (!callback.call$1(t2.key)) {
                  // goto for condition
                  $async$goto = 2;
                  break;
                }
                (t2 = J.get$values$z(t2.value)), (t2 = t2.get$iterator(t2));
              case 4:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                t3 = t2.get$current();
                $async$goto = t3 instanceof A.MergedExtension0 ? 6 : 8;
                break;
              case 6:
                // then
                t3 = t3.unmerge$0();
                $async$goto = 9;
                return P._IterationMarker_yieldStar(
                  new H.WhereIterable(
                    t3,
                    new X.ExtensionStore_extensionsWhereTarget_closure0(),
                    t3.$ti._eval$1('WhereIterable<Iterable.E>')
                  )
                );
              case 9:
                // after yield
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
                $async$goto = !t3.isOptional ? 10 : 11;
                break;
              case 10:
                // then
                $async$goto = 12;
                return t3;
              case 12:
              // after yield
              case 11:
              // join
              case 7:
                // join
                // goto for condition
                $async$goto = 4;
                break;
              case 5:
                // after for
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.Extension_2);
    },
    addSelector$3(selector, selectorSpan, mediaContext) {
      var originalSelector,
        error,
        t1,
        t2,
        t3,
        _i,
        exception,
        modifiableSelector,
        _this = this;
      selector = selector;
      originalSelector = selector;
      if (!originalSelector.get$isInvisible())
        for (
          t1 = originalSelector.components,
            t2 = t1.length,
            t3 = _this._extension_store$_originals,
            _i = 0;
          _i < t2;
          ++_i
        )
          t3.add$1(0, t1[_i]);
      t1 = _this._extension_store$_extensions;
      if (t1.get$isNotEmpty(t1))
        try {
          selector = _this._extension_store$_extendList$4(
            originalSelector,
            selectorSpan,
            t1,
            mediaContext
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException0) {
            error = t1;
            throw H.wrapException(
              E.SassException$0(
                'From ' +
                  error.get$span().message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
      modifiableSelector = new F.ModifiableCssValue0(
        selector,
        selectorSpan,
        type$.ModifiableCssValue_SelectorList_2
      );
      if (mediaContext != null)
        _this._extension_store$_mediaContexts.$indexSet(
          0,
          modifiableSelector,
          mediaContext
        );
      _this._extension_store$_registerSelector$2(selector, modifiableSelector);
      return modifiableSelector;
    },
    _extension_store$_registerSelector$2(list, selector) {
      var t1,
        t2,
        t3,
        _i,
        t4,
        t5,
        _i0,
        component,
        t6,
        t7,
        _i1,
        simple,
        selectorInPseudo;
      for (
        t1 = list.components,
          t2 = t1.length,
          t3 = this._extension_store$_selectors,
          _i = 0;
        _i < t2;
        ++_i
      )
        for (t4 = t1[_i].components, t5 = t4.length, _i0 = 0; _i0 < t5; ++_i0) {
          component = t4[_i0];
          if (!(component instanceof X.CompoundSelector0)) continue;
          for (
            t6 = component.components, t7 = t6.length, _i1 = 0;
            _i1 < t7;
            ++_i1
          ) {
            simple = t6[_i1];
            J.add$1$ax(
              t3.putIfAbsent$2(
                simple,
                new X.ExtensionStore__registerSelector_closure0()
              ),
              selector
            );
            if (!(simple instanceof D.PseudoSelector0)) continue;
            selectorInPseudo = simple.selector;
            if (selectorInPseudo != null)
              this._extension_store$_registerSelector$2(
                selectorInPseudo,
                selector
              );
          }
        }
    },
    addExtension$4(extender, target, extend, mediaContext) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        t11,
        newExtensions,
        _i,
        complex,
        t12,
        extension,
        existingExtension,
        t13,
        newExtensionsByTarget,
        additionalExtensions,
        _this = this,
        selectors = _this._extension_store$_selectors.$index(0, target),
        t1 = _this._extension_store$_extensionsByExtender,
        existingExtensions = t1.$index(0, target),
        sources = _this._extension_store$_extensions.putIfAbsent$2(
          target,
          new X.ExtensionStore_addExtension_closure2()
        );
      for (
        t2 = extender.value.components,
          t3 = t2.length,
          t4 = selectors == null,
          t5 = _this._extension_store$_sourceSpecificity,
          t6 = extender.span,
          t7 = extend.span,
          t8 = extend.isOptional,
          t9 = existingExtensions != null,
          t10 = type$.ComplexSelector_2,
          t11 = type$.Extension_2,
          newExtensions = null,
          _i = 0;
        _i < t3;
        ++_i
      ) {
        complex = t2[_i];
        if (complex._complex0$_maxSpecificity == null)
          complex._complex0$_computeSpecificity$0();
        complex._complex0$_maxSpecificity.toString;
        t12 = new S.Extender0(complex, false, t6);
        extension = t12._extension$_extension = new S.Extension0(
          t12,
          target,
          mediaContext,
          t8,
          t7
        );
        existingExtension = sources.$index(0, complex);
        if (existingExtension != null) {
          sources.$indexSet(
            0,
            complex,
            A.MergedExtension_merge0(existingExtension, extension)
          );
          continue;
        }
        sources.$indexSet(0, complex, extension);
        for (
          t12 = new P._SyncStarIterator(
            _this._extension_store$_simpleSelectors$1(complex)._outerHelper()
          );
          t12.moveNext$0();

        ) {
          t13 = t12.get$current();
          J.add$1$ax(
            t1.putIfAbsent$2(t13, new X.ExtensionStore_addExtension_closure3()),
            extension
          );
          t5.putIfAbsent$2(
            t13,
            new X.ExtensionStore_addExtension_closure4(complex)
          );
        }
        if (!t4 || t9) {
          if (newExtensions == null)
            newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(t10, t11);
          newExtensions.$indexSet(0, complex, extension);
        }
      }
      if (newExtensions == null) return;
      t1 = type$.SimpleSelector_2;
      newExtensionsByTarget = P.LinkedHashMap_LinkedHashMap$_literal(
        [target, newExtensions],
        t1,
        type$.Map_ComplexSelector_Extension_2
      );
      if (t9) {
        additionalExtensions = _this._extension_store$_extendExistingExtensions$2(
          existingExtensions,
          newExtensionsByTarget
        );
        if (additionalExtensions != null)
          B.mapAddAll20(
            newExtensionsByTarget,
            additionalExtensions,
            t1,
            t10,
            t11
          );
      }
      if (!t4)
        _this._extension_store$_extendExistingSelectors$2(
          selectors,
          newExtensionsByTarget
        );
    },
    _extension_store$_simpleSelectors$1(complex) {
      return this._simpleSelectors$body$ExtensionStore0(complex);
    },
    _simpleSelectors$body$ExtensionStore0($async$complex) {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var complex = $async$complex;
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          t1,
          t2,
          _i,
          component,
          t3,
          t4,
          _i0,
          simple,
          selector,
          t5,
          t6,
          _i1;
        return function $async$_extension_store$_simpleSelectors$1(
          $async$errorCode,
          $async$result
        ) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                (t1 = complex.components), (t2 = t1.length), (_i = 0);
              case 2:
                // for condition
                if (!(_i < t2)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                component = t1[_i];
                $async$goto = component instanceof X.CompoundSelector0 ? 5 : 6;
                break;
              case 5:
                // then
                (t3 = component.components), (t4 = t3.length), (_i0 = 0);
              case 7:
                // for condition
                if (!(_i0 < t4)) {
                  // goto after for
                  $async$goto = 9;
                  break;
                }
                simple = t3[_i0];
                $async$goto = 10;
                return simple;
              case 10:
                // after yield
                if (!(simple instanceof D.PseudoSelector0)) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                selector = simple.selector;
                if (selector == null) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                (t5 = selector.components), (t6 = t5.length), (_i1 = 0);
              case 11:
                // for condition
                if (!(_i1 < t6)) {
                  // goto after for
                  $async$goto = 13;
                  break;
                }
                $async$goto = 14;
                return P._IterationMarker_yieldStar(
                  $async$self._extension_store$_simpleSelectors$1(t5[_i1])
                );
              case 14:
              // after yield
              case 12:
                // for update
                ++_i1;
                // goto for condition
                $async$goto = 11;
                break;
              case 13:
              // after for
              case 8:
                // for update
                ++_i0;
                // goto for condition
                $async$goto = 7;
                break;
              case 9:
              // after for
              case 6:
              // join
              case 3:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.SimpleSelector_2);
    },
    _extension_store$_extendExistingExtensions$2(extensions, newExtensions) {
      var extension,
        selectors,
        error,
        t1,
        t2,
        t3,
        t4,
        t5,
        t6,
        additionalExtensions,
        _i,
        t7,
        exception,
        t8,
        t9,
        containsExtension,
        first,
        _i0,
        complex,
        t10,
        t11,
        t12,
        t13,
        t14,
        withExtender,
        existingExtension,
        _i1,
        component,
        _i2;
      for (
        t1 = J.toList$0$ax(extensions),
          t2 = t1.length,
          t3 = this._extension_store$_extensionsByExtender,
          t4 = type$.SimpleSelector_2,
          t5 = type$.Map_ComplexSelector_Extension_2,
          t6 = this._extension_store$_extensions,
          additionalExtensions = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        extension = t1[_i];
        t7 = t6.$index(0, extension.target);
        t7.toString;
        selectors = null;
        try {
          selectors = this._extension_store$_extendComplex$4(
            extension.extender.selector,
            extension.extender.span,
            newExtensions,
            extension.mediaContext
          );
          if (selectors == null) continue;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException0) {
            error = t1;
            throw H.wrapException(
              E.SassException$0(
                'From ' +
                  extension.extender.span.message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
        t8 = J.get$first$ax(selectors);
        t9 = extension.extender;
        containsExtension = C.C_ListEquality.equals$2(
          0,
          t8.components,
          t9.selector.components
        );
        for (
          t8 = selectors, t9 = t8.length, first = true, _i0 = 0;
          _i0 < t8.length;
          t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i0
        ) {
          complex = t8[_i0];
          if (containsExtension && first) {
            first = false;
            continue;
          }
          t10 = extension;
          t11 = t10.extender;
          t12 = t10.target;
          t13 = t10.span;
          t14 = t10.mediaContext;
          t10 = t10.isOptional;
          if (complex._complex0$_maxSpecificity == null)
            complex._complex0$_computeSpecificity$0();
          complex._complex0$_maxSpecificity.toString;
          t11 = new S.Extender0(complex, false, t11.span);
          withExtender = t11._extension$_extension = new S.Extension0(
            t11,
            t12,
            t14,
            t10,
            t13
          );
          existingExtension = t7.$index(0, complex);
          if (existingExtension != null)
            t7.$indexSet(
              0,
              complex,
              A.MergedExtension_merge0(existingExtension, withExtender)
            );
          else {
            t7.$indexSet(0, complex, withExtender);
            for (
              t10 = complex.components, t11 = t10.length, _i1 = 0;
              _i1 < t11;
              ++_i1
            ) {
              component = t10[_i1];
              if (component instanceof X.CompoundSelector0)
                for (
                  t12 = component.components, t13 = t12.length, _i2 = 0;
                  _i2 < t13;
                  ++_i2
                )
                  J.add$1$ax(
                    t3.putIfAbsent$2(
                      t12[_i2],
                      new X.ExtensionStore__extendExistingExtensions_closure1()
                    ),
                    withExtender
                  );
            }
            if (newExtensions.containsKey$1(extension.target)) {
              if (additionalExtensions == null)
                additionalExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                  t4,
                  t5
                );
              additionalExtensions
                .putIfAbsent$2(
                  extension.target,
                  new X.ExtensionStore__extendExistingExtensions_closure2()
                )
                .$indexSet(0, complex, withExtender);
            }
          }
        }
        if (!containsExtension) t7.remove$1(0, extension.extender);
      }
      return additionalExtensions;
    },
    _extension_store$_extendExistingSelectors$2(selectors, newExtensions) {
      var selector, error, t1, t2, oldValue, exception;
      for (
        t1 = selectors.get$iterator(selectors),
          t2 = this._extension_store$_mediaContexts;
        t1.moveNext$0();

      ) {
        selector = t1.get$current();
        oldValue = selector.value;
        try {
          selector.value = this._extension_store$_extendList$4(
            selector.value,
            selector.span,
            newExtensions,
            t2.$index(0, selector)
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.SassException0) {
            error = t1;
            throw H.wrapException(
              E.SassException$0(
                'From ' +
                  selector.span.message$1(0, '') +
                  '\n' +
                  error._span_exception$_message,
                error.get$span()
              )
            );
          } else throw exception;
        }
        if (oldValue === selector.value) continue;
        this._extension_store$_registerSelector$2(selector.value, selector);
      }
    },
    addExtensions$1(extensionStores) {
      var t1,
        t2,
        t3,
        _box_0 = {};
      _box_0.newExtensions = _box_0.selectorsToExtend = _box_0.extensionsToExtend = null;
      for (
        t1 = J.get$iterator$ax(extensionStores),
          t2 = this._extension_store$_sourceSpecificity;
        t1.moveNext$0();

      ) {
        t3 = t1.get$current();
        if (t3.get$isEmpty(t3)) continue;
        t2.addAll$1(0, t3.get$_extension_store$_sourceSpecificity());
        t3.get$_extension_store$_extensions().forEach$1(
          0,
          new X.ExtensionStore_addExtensions_closure1(_box_0, this)
        );
      }
      X.NullableExtension_andThen0(
        _box_0.newExtensions,
        new X.ExtensionStore_addExtensions_closure2(_box_0, this)
      );
    },
    _extension_store$_extendList$4(
      list,
      listSpan,
      extensions,
      mediaQueryContext
    ) {
      var t1, t2, t3, extended, i, complex, result, t4;
      for (
        t1 = list.components,
          t2 = t1.length,
          t3 = type$.JSArray_ComplexSelector_2,
          extended = null,
          i = 0;
        i < t2;
        ++i
      ) {
        complex = t1[i];
        result = this._extension_store$_extendComplex$4(
          complex,
          listSpan,
          extensions,
          mediaQueryContext
        );
        if (result == null) {
          if (extended != null) extended.push(complex);
        } else {
          if (extended == null)
            if (i === 0) extended = H._setArrayType([], t3);
            else {
              t4 = C.JSArray_methods.sublist$2(t1, 0, i);
              extended = H._setArrayType(t4.slice(0), H._arrayInstanceType(t4));
            }
          C.JSArray_methods.addAll$1(extended, result);
        }
      }
      if (extended == null) return list;
      t1 = this._extension_store$_originals;
      return D.SelectorList$0(
        this._extension_store$_trim$2(extended, t1.get$contains(t1))
      );
    },
    _extension_store$_extendList$3(list, listSpan, extensions) {
      return this._extension_store$_extendList$4(
        list,
        listSpan,
        extensions,
        null
      );
    },
    _extension_store$_extendComplex$4(
      complex,
      complexSpan,
      extensions,
      mediaQueryContext
    ) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        extendedNotExpanded,
        i,
        component,
        extended,
        result,
        t6,
        t7,
        t8,
        _null = null,
        _s28_ = 'components may not be empty.',
        _box_0 = {},
        isOriginal = this._extension_store$_originals.contains$1(0, complex);
      for (
        t1 = complex.components,
          t2 = t1.length,
          t3 = type$.JSArray_ComplexSelector_2,
          t4 = type$.JSArray_ComplexSelectorComponent_2,
          t5 = type$.ComplexSelectorComponent_2,
          extendedNotExpanded = _null,
          i = 0;
        i < t2;
        ++i
      ) {
        component = t1[i];
        if (component instanceof X.CompoundSelector0) {
          extended = this._extension_store$_extendCompound$5$inOriginal(
            component,
            complexSpan,
            extensions,
            mediaQueryContext,
            isOriginal
          );
          if (extended == null) {
            if (extendedNotExpanded != null) {
              result = P.List_List$from(
                H._setArrayType([component], t4),
                false,
                t5
              );
              result.fixed$length = Array;
              result.immutable$list = Array;
              t6 = result;
              if (t6.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              C.JSArray_methods.add$1(
                extendedNotExpanded,
                H._setArrayType([new S.ComplexSelector0(t6, false)], t3)
              );
            }
          } else {
            if (extendedNotExpanded == null) {
              t6 = H._arrayInstanceType(t1);
              t7 = t6._eval$1('SubListIterable<1>');
              t8 = new H.SubListIterable(t1, 0, i, t7);
              t8.SubListIterable$3(t1, 0, i, t6._precomputed1);
              t7 = t7._eval$1(
                'MappedListIterable<ListIterable.E,List<ComplexSelector0>>'
              );
              extendedNotExpanded = P.List_List$of(
                new H.MappedListIterable(
                  t8,
                  new X.ExtensionStore__extendComplex_closure1(complex),
                  t7
                ),
                true,
                t7._eval$1('ListIterable.E')
              );
            }
            C.JSArray_methods.add$1(extendedNotExpanded, extended);
          }
        } else if (extendedNotExpanded != null) {
          result = P.List_List$from(
            H._setArrayType([component], t4),
            false,
            t5
          );
          result.fixed$length = Array;
          result.immutable$list = Array;
          t6 = result;
          if (t6.length === 0)
            H.throwExpression(P.ArgumentError$(_s28_, _null));
          C.JSArray_methods.add$1(
            extendedNotExpanded,
            H._setArrayType([new S.ComplexSelector0(t6, false)], t3)
          );
        }
      }
      if (extendedNotExpanded == null) return _null;
      _box_0.first = true;
      t1 = type$.ComplexSelector_2;
      t1 = J.expand$1$1$ax(
        Y.paths0(extendedNotExpanded, t1),
        new X.ExtensionStore__extendComplex_closure2(_box_0, this, complex),
        t1
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    _extension_store$_extendCompound$5$inOriginal(
      compound,
      compoundSpan,
      extensions,
      mediaQueryContext,
      inOriginal
    ) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        t7,
        t8,
        t9,
        t10,
        options,
        i,
        simple,
        extended,
        result,
        t11,
        t12,
        isOriginal,
        _this = this,
        _null = null,
        _s28_ = 'components may not be empty.',
        _box_1 = {},
        t1 = _this._extension_store$_mode,
        targetsUsed =
          t1 === C.ExtendMode_normal0 || extensions.get$length(extensions) < 2
            ? _null
            : P.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector_2);
      for (
        t2 = compound.components,
          t3 = t2.length,
          t4 = type$.JSArray_List_Extender_2,
          t5 = type$.JSArray_Extender_2,
          t6 = type$.JSArray_ComplexSelectorComponent_2,
          t7 = type$.ComplexSelectorComponent_2,
          t8 = type$.SimpleSelector_2,
          t9 = _this._extension_store$_sourceSpecificity,
          t10 = type$.JSArray_SimpleSelector_2,
          options = _null,
          i = 0;
        i < t3;
        ++i
      ) {
        simple = t2[i];
        extended = _this._extension_store$_extendSimple$5(
          simple,
          compoundSpan,
          extensions,
          mediaQueryContext,
          targetsUsed
        );
        if (extended == null) {
          if (options != null) {
            result = P.List_List$from(
              H._setArrayType([simple], t10),
              false,
              t8
            );
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              H.throwExpression(P.ArgumentError$(_s28_, _null));
            result = P.List_List$from(
              H._setArrayType([new X.CompoundSelector0(t11)], t6),
              false,
              t7
            );
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              H.throwExpression(P.ArgumentError$(_s28_, _null));
            t9.$index(0, simple);
            options.push(
              H._setArrayType(
                [
                  new S.Extender0(
                    new S.ComplexSelector0(t11, false),
                    true,
                    compoundSpan
                  ),
                ],
                t5
              )
            );
          }
        } else {
          if (options == null) {
            options = H._setArrayType([], t4);
            if (i !== 0) {
              t11 = H._arrayInstanceType(t2);
              t12 = new H.SubListIterable(
                t2,
                0,
                i,
                t11._eval$1('SubListIterable<1>')
              );
              t12.SubListIterable$3(t2, 0, i, t11._precomputed1);
              result = P.List_List$from(t12, false, t8);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t12 = result;
              compound = new X.CompoundSelector0(t12);
              if (t12.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              result = P.List_List$from(
                H._setArrayType([compound], t6),
                false,
                t7
              );
              result.fixed$length = Array;
              result.immutable$list = Array;
              t11 = result;
              if (t11.length === 0)
                H.throwExpression(P.ArgumentError$(_s28_, _null));
              _this._extension_store$_sourceSpecificityFor$1(compound);
              options.push(
                H._setArrayType(
                  [
                    new S.Extender0(
                      new S.ComplexSelector0(t11, false),
                      true,
                      compoundSpan
                    ),
                  ],
                  t5
                )
              );
            }
          }
          C.JSArray_methods.addAll$1(options, extended);
        }
      }
      if (options == null) return _null;
      if (
        targetsUsed != null &&
        targetsUsed._collection$_length !== extensions.get$length(extensions)
      )
        return _null;
      if (options.length === 1)
        return J.map$1$1$ax(
          C.JSArray_methods.get$first(options),
          new X.ExtensionStore__extendCompound_closure4(mediaQueryContext),
          type$.ComplexSelector_2
        ).toList$0(0);
      t1 = _box_1.first = t1 !== C.ExtendMode_replace0;
      t2 = A.IterableNullableExtension_whereNotNull(
        J.map$1$1$ax(
          Y.paths0(options, type$.Extender_2),
          new X.ExtensionStore__extendCompound_closure5(
            _box_1,
            mediaQueryContext
          ),
          type$.nullable_List_ComplexSelector_2
        ),
        type$.List_ComplexSelector_2
      );
      t3 = t2.$ti._eval$1('ExpandIterable<Iterable.E,ComplexSelector0>');
      result = P.List_List$of(
        new H.ExpandIterable(
          t2,
          new X.ExtensionStore__extendCompound_closure6(),
          t3
        ),
        true,
        t3._eval$1('Iterable.E')
      );
      isOriginal = new X.ExtensionStore__extendCompound_closure7();
      return _this._extension_store$_trim$2(
        result,
        inOriginal && t1
          ? new X.ExtensionStore__extendCompound_closure8(
              C.JSArray_methods.get$first(result)
            )
          : isOriginal
      );
    },
    _extension_store$_extendSimple$5(
      simple,
      simpleSpan,
      extensions,
      mediaQueryContext,
      targetsUsed
    ) {
      var extended,
        t1 = new X.ExtensionStore__extendSimple_withoutPseudo0(
          this,
          extensions,
          targetsUsed,
          simpleSpan
        );
      if (simple instanceof D.PseudoSelector0 && simple.selector != null) {
        extended = this._extension_store$_extendPseudo$4(
          simple,
          simpleSpan,
          extensions,
          mediaQueryContext
        );
        if (extended != null)
          return new H.MappedListIterable(
            extended,
            new X.ExtensionStore__extendSimple_closure1(this, t1, simpleSpan),
            H._arrayInstanceType(extended)._eval$1(
              'MappedListIterable<1,List<Extender0>>'
            )
          );
      }
      return X.NullableExtension_andThen0(
        t1.call$1(simple),
        new X.ExtensionStore__extendSimple_closure2()
      );
    },
    _extension_store$_extenderForSimple$2(simple, span) {
      var t1 = S.ComplexSelector$0(
        H._setArrayType(
          [
            X.CompoundSelector$0(
              H._setArrayType([simple], type$.JSArray_SimpleSelector_2)
            ),
          ],
          type$.JSArray_ComplexSelectorComponent_2
        ),
        false
      );
      this._extension_store$_sourceSpecificity.$index(0, simple);
      return new S.Extender0(t1, true, span);
    },
    _extension_store$_extendPseudo$4(
      pseudo,
      pseudoSpan,
      extensions,
      mediaQueryContext
    ) {
      var extended,
        complexes,
        t1,
        result,
        selector = pseudo.selector;
      if (selector == null)
        throw H.wrapException(
          P.ArgumentError$(
            'Selector ' +
              pseudo.toString$0(0) +
              ' must have a selector argument.',
            null
          )
        );
      extended = this._extension_store$_extendList$4(
        selector,
        pseudoSpan,
        extensions,
        mediaQueryContext
      );
      if (extended === selector) return null;
      complexes = extended.components;
      t1 = pseudo.normalizedName === 'not';
      if (
        t1 &&
        !C.JSArray_methods.any$1(
          selector.components,
          new X.ExtensionStore__extendPseudo_closure4()
        ) &&
        C.JSArray_methods.any$1(
          complexes,
          new X.ExtensionStore__extendPseudo_closure5()
        )
      )
        complexes = new H.WhereIterable(
          complexes,
          new X.ExtensionStore__extendPseudo_closure6(),
          H._arrayInstanceType(complexes)._eval$1('WhereIterable<1>')
        );
      complexes = J.expand$1$1$ax(
        complexes,
        new X.ExtensionStore__extendPseudo_closure7(pseudo),
        type$.ComplexSelector_2
      );
      if (t1 && selector.components.length === 1) {
        t1 = H.MappedIterable_MappedIterable(
          complexes,
          new X.ExtensionStore__extendPseudo_closure8(pseudo),
          complexes.$ti._eval$1('Iterable.E'),
          type$.PseudoSelector_2
        );
        result = P.List_List$of(
          t1,
          true,
          H._instanceType(t1)._eval$1('Iterable.E')
        );
        return result.length === 0 ? null : result;
      } else
        return H._setArrayType(
          [
            D.PseudoSelector$0(
              pseudo.name,
              pseudo.argument,
              !pseudo.isClass,
              D.SelectorList$0(complexes)
            ),
          ],
          type$.JSArray_PseudoSelector_2
        );
    },
    _extension_store$_trim$2(selectors, isOriginal) {
      var result,
        i,
        t1,
        t2,
        numOriginals,
        _box_0,
        complex1,
        j,
        t3,
        t4,
        _i,
        component;
      if (selectors.length > 100) return selectors;
      result = Q.QueueList$(null, type$.ComplexSelector_2);
      $label0$0: for (
        i = selectors.length - 1,
          t1 = H._arrayInstanceType(selectors),
          t2 = t1._precomputed1,
          t1 = t1._eval$1('SubListIterable<1>'),
          numOriginals = 0;
        i >= 0;
        --i
      ) {
        _box_0 = {};
        complex1 = selectors[i];
        if (isOriginal.call$1(complex1)) {
          for (j = 0; j < numOriginals; ++j)
            if (J.$eq$(result.$index(0, j), complex1)) {
              B.rotateSlice0(result, 0, j + 1);
              continue $label0$0;
            }
          ++numOriginals;
          result.addFirst$1(complex1);
          continue $label0$0;
        }
        _box_0.maxSpecificity = 0;
        for (t3 = complex1.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
          component = t3[_i];
          if (component instanceof X.CompoundSelector0)
            _box_0.maxSpecificity = Math.max(
              _box_0.maxSpecificity,
              this._extension_store$_sourceSpecificityFor$1(component)
            );
        }
        if (
          result.any$1(
            result,
            new X.ExtensionStore__trim_closure1(_box_0, complex1)
          )
        )
          continue $label0$0;
        t3 = new H.SubListIterable(selectors, 0, i, t1);
        t3.SubListIterable$3(selectors, 0, i, t2);
        if (t3.any$1(0, new X.ExtensionStore__trim_closure2(_box_0, complex1)))
          continue $label0$0;
        result.addFirst$1(complex1);
      }
      return result;
    },
    _extension_store$_sourceSpecificityFor$1(compound) {
      var t1, t2, t3, specificity, _i, t4;
      for (
        t1 = compound.components,
          t2 = t1.length,
          t3 = this._extension_store$_sourceSpecificity,
          specificity = 0,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        t4 = t3.$index(0, t1[_i]);
        specificity = Math.max(specificity, H.checkNum(t4 == null ? 0 : t4));
      }
      return specificity;
    },
    clone$0() {
      var t3,
        t4,
        _this = this,
        t1 = type$.SimpleSelector_2,
        newSelectors = P.LinkedHashMap_LinkedHashMap$_empty(
          t1,
          type$.Set_ModifiableCssValue_SelectorList_2
        ),
        t2 = type$.ModifiableCssValue_SelectorList_2,
        newMediaContexts = P.LinkedHashMap_LinkedHashMap$_empty(
          t2,
          type$.List_CssMediaQuery_2
        ),
        oldToNewSelectors = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.CssValue_SelectorList_2,
          t2
        );
      _this._extension_store$_selectors.forEach$1(
        0,
        new X.ExtensionStore_clone_closure0(
          _this,
          newSelectors,
          oldToNewSelectors,
          newMediaContexts
        )
      );
      t2 = type$.Extension_2;
      t3 = B.copyMapOfMap0(
        _this._extension_store$_extensions,
        t1,
        type$.ComplexSelector_2,
        t2
      );
      t2 = B.copyMapOfList0(
        _this._extension_store$_extensionsByExtender,
        t1,
        t2
      );
      t1 = P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(t1, type$.int);
      t1.addAll$1(0, _this._extension_store$_sourceSpecificity);
      t4 = new P._LinkedIdentityHashSet(
        type$._LinkedIdentityHashSet_ComplexSelector_2
      );
      t4.addAll$1(0, _this._extension_store$_originals);
      return new S.Tuple2(
        new X.ExtensionStore0(
          newSelectors,
          t3,
          t2,
          newMediaContexts,
          t1,
          t4,
          C.ExtendMode_normal0
        ),
        oldToNewSelectors,
        type$.Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList_2
      );
    },
    get$_extension_store$_extensions() {
      return this._extension_store$_extensions;
    },
    get$_extension_store$_sourceSpecificity() {
      return this._extension_store$_sourceSpecificity;
    },
  };
  X.ExtensionStore_extensionsWhereTarget_closure0.prototype = {
    call$1(extension) {
      return !extension.isOptional;
    },
    $signature: 362,
  };
  X.ExtensionStore__registerSelector_closure0.prototype = {
    call$0() {
      return P.LinkedHashSet_LinkedHashSet$_empty(
        type$.ModifiableCssValue_SelectorList_2
      );
    },
    $signature: 363,
  };
  X.ExtensionStore_addExtension_closure2.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector_2,
        type$.Extension_2
      );
    },
    $signature: 86,
  };
  X.ExtensionStore_addExtension_closure3.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_Extension_2);
    },
    $signature: 183,
  };
  X.ExtensionStore_addExtension_closure4.prototype = {
    call$0() {
      return this.complex.get$maxSpecificity();
    },
    $signature: 18,
  };
  X.ExtensionStore__extendExistingExtensions_closure1.prototype = {
    call$0() {
      return H._setArrayType([], type$.JSArray_Extension_2);
    },
    $signature: 183,
  };
  X.ExtensionStore__extendExistingExtensions_closure2.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector_2,
        type$.Extension_2
      );
    },
    $signature: 86,
  };
  X.ExtensionStore_addExtensions_closure1.prototype = {
    call$2(target, newSources) {
      var first,
        t1,
        extensionsForTarget,
        t2,
        t3,
        t4,
        selectorsForTarget,
        t5,
        existingSources,
        _this = this;
      if (target instanceof N.PlaceholderSelector0) {
        first = C.JSString_methods._codeUnitAt$1(target.name, 0);
        t1 = first === 45 || first === 95;
      } else t1 = false;
      if (t1) return;
      t1 = _this.$this;
      extensionsForTarget = t1._extension_store$_extensionsByExtender.$index(
        0,
        target
      );
      t2 = extensionsForTarget == null;
      if (!t2) {
        t3 = _this._box_0;
        t4 = t3.extensionsToExtend;
        C.JSArray_methods.addAll$1(
          t4 == null
            ? (t3.extensionsToExtend = H._setArrayType(
                [],
                type$.JSArray_Extension_2
              ))
            : t4,
          extensionsForTarget
        );
      }
      selectorsForTarget = t1._extension_store$_selectors.$index(0, target);
      t3 = selectorsForTarget != null;
      if (t3) {
        t4 = _this._box_0;
        t5 = t4.selectorsToExtend;
        (t5 == null
          ? (t4.selectorsToExtend = P.LinkedHashSet_LinkedHashSet$_empty(
              type$.ModifiableCssValue_SelectorList_2
            ))
          : t5
        ).addAll$1(0, selectorsForTarget);
      }
      t1 = t1._extension_store$_extensions;
      existingSources = t1.$index(0, target);
      if (existingSources == null) {
        t4 = type$.ComplexSelector_2;
        t5 = type$.Extension_2;
        t1.$indexSet(
          0,
          target,
          P.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5)
        );
        if (!t2 || t3) {
          t1 = _this._box_0;
          t2 = t1.newExtensions;
          t1 =
            t2 == null
              ? (t1.newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                  type$.SimpleSelector_2,
                  type$.Map_ComplexSelector_Extension_2
                ))
              : t2;
          t1.$indexSet(
            0,
            target,
            P.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5)
          );
        }
      } else
        newSources.forEach$1(
          0,
          new X.ExtensionStore_addExtensions__closure4(
            _this._box_0,
            existingSources,
            extensionsForTarget,
            selectorsForTarget,
            target
          )
        );
    },
    $signature: 366,
  };
  X.ExtensionStore_addExtensions__closure4.prototype = {
    call$2(extender, extension) {
      var t2,
        _this = this,
        t1 = _this.existingSources;
      if (t1.containsKey$1(extender)) {
        t2 = t1.$index(0, extender);
        t2.toString;
        extension = A.MergedExtension_merge0(t2, extension);
        t1.$indexSet(0, extender, extension);
      } else t1.$indexSet(0, extender, extension);
      if (
        _this.extensionsForTarget != null ||
        _this.selectorsForTarget != null
      ) {
        t1 = _this._box_0;
        t2 = t1.newExtensions;
        t1 =
          t2 == null
            ? (t1.newExtensions = P.LinkedHashMap_LinkedHashMap$_empty(
                type$.SimpleSelector_2,
                type$.Map_ComplexSelector_Extension_2
              ))
            : t2;
        J.$indexSet$ax(
          t1.putIfAbsent$2(
            _this.target,
            new X.ExtensionStore_addExtensions___closure0()
          ),
          extender,
          extension
        );
      }
    },
    $signature: 367,
  };
  X.ExtensionStore_addExtensions___closure0.prototype = {
    call$0() {
      return P.LinkedHashMap_LinkedHashMap$_empty(
        type$.ComplexSelector_2,
        type$.Extension_2
      );
    },
    $signature: 86,
  };
  X.ExtensionStore_addExtensions_closure2.prototype = {
    call$1(newExtensions) {
      var t1 = this._box_0,
        t2 = this.$this;
      X.NullableExtension_andThen0(
        t1.extensionsToExtend,
        new X.ExtensionStore_addExtensions__closure2(t2, newExtensions)
      );
      X.NullableExtension_andThen0(
        t1.selectorsToExtend,
        new X.ExtensionStore_addExtensions__closure3(t2, newExtensions)
      );
    },
    $signature: 368,
  };
  X.ExtensionStore_addExtensions__closure2.prototype = {
    call$1(extensionsToExtend) {
      return this.$this._extension_store$_extendExistingExtensions$2(
        extensionsToExtend,
        this.newExtensions
      );
    },
    $signature: 369,
  };
  X.ExtensionStore_addExtensions__closure3.prototype = {
    call$1(selectorsToExtend) {
      return this.$this._extension_store$_extendExistingSelectors$2(
        selectorsToExtend,
        this.newExtensions
      );
    },
    $signature: 370,
  };
  X.ExtensionStore__extendComplex_closure1.prototype = {
    call$1(component) {
      return H._setArrayType(
        [
          S.ComplexSelector$0(
            H._setArrayType(
              [component],
              type$.JSArray_ComplexSelectorComponent_2
            ),
            this.complex.lineBreak
          ),
        ],
        type$.JSArray_ComplexSelector_2
      );
    },
    $signature: 371,
  };
  X.ExtensionStore__extendComplex_closure2.prototype = {
    call$1(path) {
      var t1 = Y.weave0(
        J.map$1$1$ax(
          path,
          new X.ExtensionStore__extendComplex__closure1(),
          type$.List_ComplexSelectorComponent_2
        ).toList$0(0)
      );
      return new H.MappedListIterable(
        t1,
        new X.ExtensionStore__extendComplex__closure2(
          this._box_0,
          this.$this,
          this.complex,
          path
        ),
        H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,ComplexSelector0>'
        )
      );
    },
    $signature: 372,
  };
  X.ExtensionStore__extendComplex__closure1.prototype = {
    call$1(complex) {
      return complex.components;
    },
    $signature: 373,
  };
  X.ExtensionStore__extendComplex__closure2.prototype = {
    call$1(components) {
      var _this = this,
        t1 = _this.complex,
        outputComplex = S.ComplexSelector$0(
          components,
          t1.lineBreak ||
            J.any$1$ax(
              _this.path,
              new X.ExtensionStore__extendComplex___closure0()
            )
        ),
        t2 = _this._box_0;
      if (t2.first && _this.$this._extension_store$_originals.contains$1(0, t1))
        _this.$this._extension_store$_originals.add$1(0, outputComplex);
      t2.first = false;
      return outputComplex;
    },
    $signature: 67,
  };
  X.ExtensionStore__extendComplex___closure0.prototype = {
    call$1(inputComplex) {
      return inputComplex.lineBreak;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendCompound_closure4.prototype = {
    call$1(extender) {
      extender.assertCompatibleMediaContext$1(this.mediaQueryContext);
      return extender.selector;
    },
    $signature: 376,
  };
  X.ExtensionStore__extendCompound_closure5.prototype = {
    call$1(path) {
      var complexes,
        toUnify,
        t2,
        t3,
        originals,
        t4,
        _box_0 = {},
        t1 = this._box_1;
      if (t1.first) {
        t1.first = false;
        complexes = H._setArrayType(
          [
            H._setArrayType(
              [
                X.CompoundSelector$0(
                  J.expand$1$1$ax(
                    path,
                    new X.ExtensionStore__extendCompound__closure1(),
                    type$.SimpleSelector_2
                  )
                ),
              ],
              type$.JSArray_ComplexSelectorComponent_2
            ),
          ],
          type$.JSArray_List_ComplexSelectorComponent_2
        );
      } else {
        toUnify = Q.QueueList$(null, type$.List_ComplexSelectorComponent_2);
        for (
          t1 = J.get$iterator$ax(path),
            t2 = type$.CompoundSelector_2,
            t3 = type$.JSArray_SimpleSelector_2,
            originals = null;
          t1.moveNext$0();

        ) {
          t4 = t1.get$current();
          if (t4.isOriginal) {
            if (originals == null) originals = H._setArrayType([], t3);
            C.JSArray_methods.addAll$1(
              originals,
              t2._as(C.JSArray_methods.get$last(t4.selector.components))
                .components
            );
          } else toUnify._queue_list$_add$1(t4.selector.components);
        }
        if (originals != null)
          toUnify.addFirst$1(
            H._setArrayType(
              [X.CompoundSelector$0(originals)],
              type$.JSArray_ComplexSelectorComponent_2
            )
          );
        complexes = Y.unifyComplex0(toUnify);
        if (complexes == null) return null;
      }
      _box_0.lineBreak = false;
      for (
        t1 = J.get$iterator$ax(path), t2 = this.mediaQueryContext;
        t1.moveNext$0();

      ) {
        t3 = t1.get$current();
        t3.assertCompatibleMediaContext$1(t2);
        _box_0.lineBreak = _box_0.lineBreak || t3.selector.lineBreak;
      }
      t1 = J.map$1$1$ax(
        complexes,
        new X.ExtensionStore__extendCompound__closure2(_box_0),
        type$.ComplexSelector_2
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('ListIterable.E'));
    },
    $signature: 377,
  };
  X.ExtensionStore__extendCompound__closure1.prototype = {
    call$1(extender) {
      return type$.CompoundSelector_2._as(
        C.JSArray_methods.get$last(extender.selector.components)
      ).components;
    },
    $signature: 378,
  };
  X.ExtensionStore__extendCompound__closure2.prototype = {
    call$1(components) {
      return S.ComplexSelector$0(components, this._box_0.lineBreak);
    },
    $signature: 67,
  };
  X.ExtensionStore__extendCompound_closure6.prototype = {
    call$1(l) {
      return l;
    },
    $signature: 379,
  };
  X.ExtensionStore__extendCompound_closure7.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendCompound_closure8.prototype = {
    call$1(complex) {
      var t1 = C.C_ListEquality.equals$2(
        0,
        complex.components,
        this.original.components
      );
      return t1;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendSimple_withoutPseudo0.prototype = {
    call$1(simple) {
      var t1,
        t2,
        _this = this,
        extensionsForSimple = _this.extensions.$index(0, simple);
      if (extensionsForSimple == null) return null;
      t1 = _this.targetsUsed;
      if (t1 != null) t1.add$1(0, simple);
      t1 = H._setArrayType([], type$.JSArray_Extender_2);
      t2 = _this.$this;
      if (t2._extension_store$_mode !== C.ExtendMode_replace0)
        t1.push(
          t2._extension_store$_extenderForSimple$2(simple, _this.simpleSpan)
        );
      for (
        t2 = extensionsForSimple.get$values(extensionsForSimple),
          t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      )
        t1.push(t2.get$current().extender);
      return t1;
    },
    $signature: 380,
  };
  X.ExtensionStore__extendSimple_closure1.prototype = {
    call$1(pseudo) {
      var t1 = this.withoutPseudo.call$1(pseudo);
      return t1 == null
        ? H._setArrayType(
            [
              this.$this._extension_store$_extenderForSimple$2(
                pseudo,
                this.simpleSpan
              ),
            ],
            type$.JSArray_Extender_2
          )
        : t1;
    },
    $signature: 381,
  };
  X.ExtensionStore__extendSimple_closure2.prototype = {
    call$1(result) {
      return H._setArrayType([result], type$.JSArray_List_Extender_2);
    },
    $signature: 382,
  };
  X.ExtensionStore__extendPseudo_closure4.prototype = {
    call$1(complex) {
      return complex.components.length > 1;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendPseudo_closure5.prototype = {
    call$1(complex) {
      return complex.components.length === 1;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendPseudo_closure6.prototype = {
    call$1(complex) {
      return complex.components.length <= 1;
    },
    $signature: 17,
  };
  X.ExtensionStore__extendPseudo_closure7.prototype = {
    call$1(complex) {
      var innerPseudo,
        innerSelector,
        t1 = complex.components;
      if (t1.length !== 1)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
      if (!(C.JSArray_methods.get$first(t1) instanceof X.CompoundSelector0))
        return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
      t1 = type$.CompoundSelector_2._as(C.JSArray_methods.get$first(t1))
        .components;
      if (t1.length !== 1)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
      if (!(C.JSArray_methods.get$first(t1) instanceof D.PseudoSelector0))
        return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
      innerPseudo = type$.PseudoSelector_2._as(C.JSArray_methods.get$first(t1));
      innerSelector = innerPseudo.selector;
      if (innerSelector == null)
        return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
      t1 = this.pseudo;
      switch (t1.normalizedName) {
        case 'not':
          t1 = innerPseudo.normalizedName;
          if (t1 !== 'is' && t1 !== 'matches')
            return H._setArrayType([], type$.JSArray_ComplexSelector_2);
          return innerSelector.components;
        case 'is':
        case 'matches':
        case 'any':
        case 'current':
        case 'nth-child':
        case 'nth-last-child':
          if (innerPseudo.name !== t1.name)
            return H._setArrayType([], type$.JSArray_ComplexSelector_2);
          if (innerPseudo.argument != t1.argument)
            return H._setArrayType([], type$.JSArray_ComplexSelector_2);
          return innerSelector.components;
        case 'has':
        case 'host':
        case 'host-context':
        case 'slotted':
          return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
        default:
          return H._setArrayType([], type$.JSArray_ComplexSelector_2);
      }
    },
    $signature: 383,
  };
  X.ExtensionStore__extendPseudo_closure8.prototype = {
    call$1(complex) {
      var t1 = this.pseudo;
      return D.PseudoSelector$0(
        t1.name,
        t1.argument,
        !t1.isClass,
        D.SelectorList$0(
          H._setArrayType([complex], type$.JSArray_ComplexSelector_2)
        )
      );
    },
    $signature: 384,
  };
  X.ExtensionStore__trim_closure1.prototype = {
    call$1(complex2) {
      return (
        complex2.get$minSpecificity() >= this._box_0.maxSpecificity &&
        Y.complexIsSuperselector0(complex2.components, this.complex1.components)
      );
    },
    $signature: 17,
  };
  X.ExtensionStore__trim_closure2.prototype = {
    call$1(complex2) {
      return (
        complex2.get$minSpecificity() >= this._box_0.maxSpecificity &&
        Y.complexIsSuperselector0(complex2.components, this.complex1.components)
      );
    },
    $signature: 17,
  };
  X.ExtensionStore_clone_closure0.prototype = {
    call$2(simple, selectors) {
      var t2,
        t3,
        t4,
        t5,
        t6,
        newSelector,
        mediaContext,
        _this = this,
        t1 = type$.ModifiableCssValue_SelectorList_2,
        newSelectorSet = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.newSelectors.$indexSet(0, simple, newSelectorSet);
      for (
        t2 = selectors.get$iterator(selectors),
          t3 = _this.oldToNewSelectors,
          t4 = _this.$this._extension_store$_mediaContexts,
          t5 = _this.newMediaContexts;
        t2.moveNext$0();

      ) {
        t6 = t2.get$current();
        newSelector = new F.ModifiableCssValue0(t6.value, t6.span, t1);
        newSelectorSet.add$1(0, newSelector);
        t3.$indexSet(0, t6, newSelector);
        mediaContext = t4.$index(0, t6);
        if (mediaContext != null) t5.$indexSet(0, newSelector, mediaContext);
      }
    },
    $signature: 385,
  };
  F.FilesystemImporter0.prototype = {
    canonicalize$1(url) {
      if (url.get$scheme() !== 'file' && url.get$scheme() !== '') return null;
      return X.NullableExtension_andThen0(
        B.resolveImportPath0(
          D.join(
            this._filesystem$_loadPath,
            $.$get$context().style.pathFromUri$1(M._parseUri(url)),
            null
          )
        ),
        new F.FilesystemImporter_canonicalize_closure0()
      );
    },
    toString$0(_) {
      return this._filesystem$_loadPath;
    },
  };
  F.FilesystemImporter_canonicalize_closure0.prototype = {
    call$1(resolved) {
      var t1,
        t2,
        t0,
        _null = null;
      if (
        J.$eq$(J.get$platform$x(self.process), 'win32') ||
        J.$eq$(J.get$platform$x(self.process), 'darwin')
      ) {
        t1 = $.$get$context();
        t2 = F._realCasePath0(
          t1.absolute$7(
            t1.normalize$1(resolved),
            _null,
            _null,
            _null,
            _null,
            _null,
            _null
          )
        );
        t0 = t2;
        t2 = t1;
        t1 = t0;
      } else {
        t1 = $.$get$context();
        t2 = t1.canonicalize$1(resolved);
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      return t2.toUri$1(t1);
    },
    $signature: 155,
  };
  B.ForRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 =
          '@for $' + _this.variable + ' from ' + _this.from.toString$0(0) + ' ',
        t2 = _this.children;
      return (
        t1 +
        (_this.isExclusive ? 'to' : 'through') +
        ' ' +
        _this.to.toString$0(0) +
        ' {' +
        (t2 && C.JSArray_methods).join$1(t2, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  L.ForwardRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitForwardRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        prefix,
        _this = this,
        t1 =
          '@forward ' + D.StringExpression_quoteText0(_this.url.toString$0(0)),
        shownMixinsAndFunctions = _this.shownMixinsAndFunctions,
        hiddenMixinsAndFunctions = _this.hiddenMixinsAndFunctions;
      if (shownMixinsAndFunctions != null) {
        t1 += ' show ';
        t2 = _this.shownVariables;
        t2.toString;
        t2 =
          t1 + _this._forward_rule0$_memberList$2(shownMixinsAndFunctions, t2);
        t1 = t2;
      } else {
        if (hiddenMixinsAndFunctions != null) {
          t2 = hiddenMixinsAndFunctions._base;
          t2 = t2.get$isNotEmpty(t2);
        } else t2 = false;
        if (t2) {
          t1 += ' hide ';
          t2 = _this.hiddenVariables;
          t2.toString;
          t2 =
            t1 +
            _this._forward_rule0$_memberList$2(hiddenMixinsAndFunctions, t2);
          t1 = t2;
        }
      }
      prefix = _this.prefix;
      if (prefix != null) t1 += ' as ' + prefix + '*';
      t2 = _this.configuration;
      t1 =
        (t2.length !== 0
          ? t1 + (' with (' + C.JSArray_methods.join$1(t2, ', ') + ')')
          : t1) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _forward_rule0$_memberList$2(mixinsAndFunctions, variables) {
      var t2,
        t1 = P.List_List$of(mixinsAndFunctions, true, type$.String);
      for (t2 = variables._base, t2 = t2.get$iterator(t2); t2.moveNext$0(); )
        t1.push('$' + t2.get$current());
      return C.JSArray_methods.join$1(t1, ', ');
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  R.ForwardedModuleView0.prototype = {
    get$url() {
      return this._forwarded_view0$_inner.get$url();
    },
    get$upstream() {
      return this._forwarded_view0$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._forwarded_view0$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._forwarded_view0$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._forwarded_view0$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._forwarded_view0$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      var prefix,
        _s19_ = 'Undefined variable.',
        t1 = this._forwarded_view0$_rule,
        shownVariables = t1.shownVariables,
        hiddenVariables = t1.hiddenVariables;
      if (shownVariables != null && !shownVariables._base.contains$1(0, $name))
        throw H.wrapException(E.SassScriptException$0(_s19_));
      else if (
        hiddenVariables != null &&
        hiddenVariables._base.contains$1(0, $name)
      )
        throw H.wrapException(E.SassScriptException$0(_s19_));
      prefix = t1.prefix;
      if (prefix != null) {
        if (!C.JSString_methods.startsWith$1($name, prefix))
          throw H.wrapException(E.SassScriptException$0(_s19_));
        $name = C.JSString_methods.substring$1($name, prefix.length);
      }
      return this._forwarded_view0$_inner.setVariable$3(
        $name,
        value,
        nodeWithSpan
      );
    },
    variableIdentity$1($name) {
      var prefix = this._forwarded_view0$_rule.prefix;
      if (prefix != null)
        $name = C.JSString_methods.substring$1($name, prefix.length);
      return this._forwarded_view0$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof R.ForwardedModuleView0 &&
        this._forwarded_view0$_inner.$eq(0, other._forwarded_view0$_inner) &&
        this._forwarded_view0$_rule === other._forwarded_view0$_rule
      );
    },
    get$hashCode(_) {
      var t1 = this._forwarded_view0$_inner;
      return (
        (t1.get$hashCode(t1) ^
          H.Primitives_objectHashCode(this._forwarded_view0$_rule)) >>>
        0
      );
    },
    cloneCss$0() {
      return R.ForwardedModuleView$0(
        this._forwarded_view0$_inner.cloneCss$0(),
        this._forwarded_view0$_rule,
        this.$ti._precomputed1
      );
    },
    toString$0(_) {
      return 'forwarded ' + this._forwarded_view0$_inner.toString$0(0);
    },
    $isModule0: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
  };
  F.FunctionExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitFunctionExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? '' + (t1 + '.') : '';
      t1 += this.originalName + this.$arguments.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  F.JSFunction0.prototype = {};
  F.SupportsFunction0.prototype = {
    toString$0(_) {
      return (
        this.name.toString$0(0) + '(' + this.$arguments.toString$0(0) + ')'
      );
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  F.SassFunction0.prototype = {
    accept$1$1(visitor) {
      var t1, t2;
      if (!visitor._inspect)
        H.throwExpression(
          E.SassScriptException$0(
            this.toString$0(0) + " isn't a valid CSS value."
          )
        );
      t1 = visitor._buffer;
      t1.write$1(0, 'get-function(');
      t2 = this.callable;
      visitor._serialize0$_visitQuotedString$1(t2.get$name(t2));
      t1.writeCharCode$1(41);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertFunction$1($name) {
      return this;
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof F.SassFunction0 && this.callable.$eq(0, other.callable)
      );
    },
    get$hashCode(_) {
      var t1 = this.callable;
      return t1.get$hashCode(t1);
    },
  };
  M.FunctionRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitFunctionRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@function ' +
        this.name +
        '(' +
        this.$arguments.toString$0(0) +
        ') {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
  };
  Y.unifyComplex_closure0.prototype = {
    call$1(complex) {
      var t1 = J.getInterceptor$asx(complex);
      return t1.sublist$2(complex, 0, t1.get$length(complex) - 1);
    },
    $signature: 93,
  };
  Y._weaveParents_closure6.prototype = {
    call$2(group1, group2) {
      var unified,
        t1,
        _null = null;
      if (C.C_ListEquality.equals$2(0, group1, group2)) return group1;
      if (
        !(J.get$first$ax(group1) instanceof X.CompoundSelector0) ||
        !(J.get$first$ax(group2) instanceof X.CompoundSelector0)
      )
        return _null;
      if (Y.complexIsParentSuperselector0(group1, group2)) return group2;
      if (Y.complexIsParentSuperselector0(group2, group1)) return group1;
      if (!Y._mustUnify0(group1, group2)) return _null;
      unified = Y.unifyComplex0(
        H._setArrayType(
          [group1, group2],
          type$.JSArray_List_ComplexSelectorComponent_2
        )
      );
      if (unified == null) return _null;
      t1 = J.getInterceptor$asx(unified);
      if (t1.get$length(unified) > 1) return _null;
      return t1.get$first(unified);
    },
    $signature: 387,
  };
  Y._weaveParents_closure7.prototype = {
    call$1(sequence) {
      return Y.complexIsParentSuperselector0(
        sequence.get$first(sequence),
        this.group
      );
    },
    $signature: 388,
  };
  Y._weaveParents_closure8.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(
        chunk,
        new Y._weaveParents__closure4(),
        type$.ComplexSelectorComponent_2
      );
    },
    $signature: 164,
  };
  Y._weaveParents__closure4.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 93,
  };
  Y._weaveParents_closure9.prototype = {
    call$1(sequence) {
      return sequence.get$length(sequence) === 0;
    },
    $signature: 195,
  };
  Y._weaveParents_closure10.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(
        chunk,
        new Y._weaveParents__closure3(),
        type$.ComplexSelectorComponent_2
      );
    },
    $signature: 164,
  };
  Y._weaveParents__closure3.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 93,
  };
  Y._weaveParents_closure11.prototype = {
    call$1(choice) {
      return J.get$isNotEmpty$asx(choice);
    },
    $signature: 390,
  };
  Y._weaveParents_closure12.prototype = {
    call$1(path) {
      var t1 = J.expand$1$1$ax(
        path,
        new Y._weaveParents__closure2(),
        type$.ComplexSelectorComponent_2
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    $signature: 391,
  };
  Y._weaveParents__closure2.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 392,
  };
  Y._mustUnify_closure0.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector0 &&
        C.JSArray_methods.any$1(
          component.components,
          new Y._mustUnify__closure0(this.uniqueSelectors)
        )
      );
    },
    $signature: 102,
  };
  Y._mustUnify__closure0.prototype = {
    call$1(simple) {
      var t1;
      if (!(simple instanceof N.IDSelector0))
        t1 = simple instanceof D.PseudoSelector0 && !simple.isClass;
      else t1 = true;
      return t1 && this.uniqueSelectors.contains$1(0, simple);
    },
    $signature: 19,
  };
  Y.paths_closure0.prototype = {
    call$2(paths, choice) {
      var t1 = this.T;
      t1 = J.expand$1$1$ax(
        choice,
        new Y.paths__closure0(paths, t1),
        t1._eval$1('List<0>')
      );
      return P.List_List$of(t1, true, t1.$ti._eval$1('Iterable.E'));
    },
    $signature() {
      return this.T._eval$1('List<List<0>>(List<List<0>>,List<0>)');
    },
  };
  Y.paths__closure0.prototype = {
    call$1(option) {
      var t1 = this.T;
      return J.map$1$1$ax(
        this.paths,
        new Y.paths___closure0(option, t1),
        t1._eval$1('List<0>')
      );
    },
    $signature() {
      return this.T._eval$1('Iterable<List<0>>(0)');
    },
  };
  Y.paths___closure0.prototype = {
    call$1(path) {
      var t1 = P.List_List$of(path, true, this.T);
      t1.push(this.option);
      return t1;
    },
    $signature() {
      return this.T._eval$1('List<0>(List<0>)');
    },
  };
  Y._hasRoot_closure0.prototype = {
    call$1(simple) {
      return (
        simple instanceof D.PseudoSelector0 &&
        simple.isClass &&
        simple.normalizedName === 'root'
      );
    },
    $signature: 19,
  };
  Y.listIsSuperselector_closure0.prototype = {
    call$1(complex1) {
      return C.JSArray_methods.any$1(
        this.list1,
        new Y.listIsSuperselector__closure0(complex1)
      );
    },
    $signature: 17,
  };
  Y.listIsSuperselector__closure0.prototype = {
    call$1(complex2) {
      return Y.complexIsSuperselector0(
        complex2.components,
        this.complex1.components
      );
    },
    $signature: 17,
  };
  Y._simpleIsSuperselectorOfCompound_closure0.prototype = {
    call$1(theirSimple) {
      var selector,
        t1 = this.simple;
      if (t1.$eq(0, theirSimple)) return true;
      if (!(theirSimple instanceof D.PseudoSelector0)) return false;
      selector = theirSimple.selector;
      if (selector == null) return false;
      if (!$._subselectorPseudos0.contains$1(0, theirSimple.normalizedName))
        return false;
      return C.JSArray_methods.every$1(
        selector.components,
        new Y._simpleIsSuperselectorOfCompound__closure0(t1)
      );
    },
    $signature: 19,
  };
  Y._simpleIsSuperselectorOfCompound__closure0.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      if (t1.length !== 1) return false;
      return C.JSArray_methods.contains$1(
        type$.CompoundSelector_2._as(C.JSArray_methods.get$single(t1))
          .components,
        this.simple
      );
    },
    $signature: 17,
  };
  Y._selectorPseudoIsSuperselector_closure6.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector0(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 72,
  };
  Y._selectorPseudoIsSuperselector_closure7.prototype = {
    call$1(complex1) {
      var t1 = complex1.components,
        t2 = H._setArrayType([], type$.JSArray_ComplexSelectorComponent_2),
        t3 = this.parents;
      if (t3 != null) C.JSArray_methods.addAll$1(t2, t3);
      t2.push(this.compound2);
      return Y.complexIsSuperselector0(t1, t2);
    },
    $signature: 17,
  };
  Y._selectorPseudoIsSuperselector_closure8.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector0(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 72,
  };
  Y._selectorPseudoIsSuperselector_closure9.prototype = {
    call$1(selector2) {
      return Y.listIsSuperselector0(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 72,
  };
  Y._selectorPseudoIsSuperselector_closure10.prototype = {
    call$1(complex) {
      return C.JSArray_methods.any$1(
        this.compound2.components,
        new Y._selectorPseudoIsSuperselector__closure0(complex, this.pseudo1)
      );
    },
    $signature: 17,
  };
  Y._selectorPseudoIsSuperselector__closure0.prototype = {
    call$1(simple2) {
      var compound1,
        selector2,
        _this = this;
      if (simple2 instanceof F.TypeSelector0) {
        compound1 = C.JSArray_methods.get$last(_this.complex.components);
        return (
          compound1 instanceof X.CompoundSelector0 &&
          C.JSArray_methods.any$1(
            compound1.components,
            new Y._selectorPseudoIsSuperselector___closure1(simple2)
          )
        );
      } else if (simple2 instanceof N.IDSelector0) {
        compound1 = C.JSArray_methods.get$last(_this.complex.components);
        return (
          compound1 instanceof X.CompoundSelector0 &&
          C.JSArray_methods.any$1(
            compound1.components,
            new Y._selectorPseudoIsSuperselector___closure2(simple2)
          )
        );
      } else if (
        simple2 instanceof D.PseudoSelector0 &&
        simple2.name === _this.pseudo1.name
      ) {
        selector2 = simple2.selector;
        if (selector2 == null) return false;
        return Y.listIsSuperselector0(
          selector2.components,
          H._setArrayType([_this.complex], type$.JSArray_ComplexSelector_2)
        );
      } else return false;
    },
    $signature: 19,
  };
  Y._selectorPseudoIsSuperselector___closure1.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof F.TypeSelector0) {
        t1 = this.simple2.name.$eq(0, simple1.name);
        t1 = !t1;
      } else t1 = false;
      return t1;
    },
    $signature: 19,
  };
  Y._selectorPseudoIsSuperselector___closure2.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof N.IDSelector0) {
        t1 = simple1.name;
        t1 = this.simple2.name !== t1;
      } else t1 = false;
      return t1;
    },
    $signature: 19,
  };
  Y._selectorPseudoIsSuperselector_closure11.prototype = {
    call$1(selector2) {
      var t1 = C.C_ListEquality.equals$2(
        0,
        this.selector1.components,
        selector2.components
      );
      return t1;
    },
    $signature: 72,
  };
  Y._selectorPseudoIsSuperselector_closure12.prototype = {
    call$1(pseudo2) {
      var t1, selector2;
      if (!(pseudo2 instanceof D.PseudoSelector0)) return false;
      t1 = this.pseudo1;
      if (pseudo2.name !== t1.name) return false;
      if (pseudo2.argument != t1.argument) return false;
      selector2 = pseudo2.selector;
      if (selector2 == null) return false;
      return Y.listIsSuperselector0(
        this.selector1.components,
        selector2.components
      );
    },
    $signature: 19,
  };
  Y._selectorPseudoArgs_closure1.prototype = {
    call$1(pseudo) {
      return pseudo.isClass === this.isClass && pseudo.name === this.name;
    },
    $signature: 394,
  };
  Y._selectorPseudoArgs_closure2.prototype = {
    call$1(pseudo) {
      return pseudo.selector;
    },
    $signature: 395,
  };
  Y.globalFunctions_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).get$isTruthy()
        ? t1.$index($arguments, 1)
        : t1.$index($arguments, 2);
    },
    $signature: 4,
  };
  N.IDSelector0.prototype = {
    get$minSpecificity() {
      return H._asInt(
        Math.pow(M.SimpleSelector0.prototype.get$minSpecificity.call(this), 2)
      );
    },
    accept$1$1(visitor) {
      var t1 = visitor._buffer;
      t1.writeCharCode$1(35);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new N.IDSelector0(this.name + suffix);
    },
    unify$1(compound) {
      if (
        C.JSArray_methods.any$1(compound, new N.IDSelector_unify_closure0(this))
      )
        return null;
      return this.super$SimpleSelector$unify0(compound);
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof N.IDSelector0 && other.name === this.name;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  N.IDSelector_unify_closure0.prototype = {
    call$1(simple) {
      var t1;
      if (simple instanceof N.IDSelector0) {
        t1 = simple.name;
        t1 = this.$this.name !== t1;
      } else t1 = false;
      return t1;
    },
    $signature: 19,
  };
  L.IfExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIfExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return 'if' + this.$arguments.toString$0(0);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  V.IfRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitIfRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.clauses,
        result = new H.MappedListIterable(
          t1,
          new V.IfRule_toString_closure0(true),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ' '),
        lastClause = this.lastClause;
      return lastClause != null
        ? result + (' ' + lastClause.toString$0(0))
        : result;
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  V.IfRule_toString_closure0.prototype = {
    call$1(clause) {
      return '@if {' + C.JSArray_methods.join$1(clause.children, ' ') + '}';
    },
    $signature: 491,
  };
  V.IfRuleClause0.prototype = {};
  V.IfRuleClause$__closure0.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof Z.VariableDeclaration0))
        if (!(child instanceof M.FunctionRule0))
          if (!(child instanceof T.MixinRule0))
            t1 =
              child instanceof B.ImportRule0 &&
              C.JSArray_methods.any$1(
                child.imports,
                new V.IfRuleClause$___closure0()
              );
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    $signature: 142,
  };
  V.IfRuleClause$___closure0.prototype = {
    call$1($import) {
      return $import instanceof B.DynamicImport0;
    },
    $signature: 133,
  };
  V.IfClause0.prototype = {
    toString$0(_) {
      return (
        '@if ' +
        this.expression.toString$0(0) +
        ' {' +
        C.JSArray_methods.join$1(this.children, ' ') +
        '}'
      );
    },
  };
  V.ElseClause0.prototype = {
    toString$0(_) {
      return '@else {' + C.JSArray_methods.join$1(this.children, ' ') + '}';
    },
  };
  F.NodeImporter.prototype = {
    loadAsync$3(url, previous, forImport) {
      return this.loadAsync$body$NodeImporter(url, previous, forImport);
    },
    loadAsync$body$NodeImporter(url, previous, forImport) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(
          type$.nullable_NodeImporterResult
        ),
        $async$returnValue,
        $async$self = this,
        t1,
        t2,
        _i,
        value,
        previousString;
      var $async$loadAsync$3 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              previousString = $async$self._previousToString$1(previous);
              (t1 = $async$self._implementation$_importers),
                (t2 = t1.length),
                (_i = 0);
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return P._asyncAwait(
                $async$self._callImporterAsync$4(
                  t1[_i],
                  url,
                  previousString,
                  forImport
                ),
                $async$loadAsync$3
              );
            case 6:
              // returning from await.
              value = $async$result;
              if (value != null) {
                $async$returnValue = $async$self._handleImportResult$4(
                  url,
                  previous,
                  value,
                  forImport
                );
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
            // after for
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadAsync$3, $async$completer);
    },
    _previousToString$1(previous) {
      if (previous == null) return 'stdin';
      if (previous.get$scheme() === 'file')
        return $.$get$context().style.pathFromUri$1(M._parseUri(previous));
      return previous.toString$0(0);
    },
    _handleImportResult$4(url, previous, value, forImport) {
      var t1 = self.Error;
      if (H._asBool($.$get$_jsInstanceOf().call$2(value, t1)))
        throw H.wrapException(value);
      if (!type$.NodeImporterResult._is(value)) return null;
      return value;
    },
    _callImporterAsync$4(importer, url, previousString, forImport) {
      return this._callImporterAsync$body$NodeImporter(
        importer,
        url,
        previousString,
        forImport
      );
    },
    _callImporterAsync$body$NodeImporter(
      importer,
      url,
      previousString,
      forImport
    ) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue,
        $async$self = this,
        result,
        t1,
        context;
      var $async$_callImporterAsync$4 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new P._Future($.Zone__current, type$._Future_Object);
              context = {
                options: type$.RenderContextOptions._as(
                  $async$self._implementation$_options
                ),
                fromImport: forImport,
              };
              J.set$context$x(J.get$options$x(context), context);
              result = J.apply$2$x(
                importer,
                context,
                H._setArrayType(
                  [
                    url,
                    previousString,
                    P.allowInterop(
                      new P._AsyncCompleter(
                        t1,
                        type$._AsyncCompleter_Object
                      ).get$complete()
                    ),
                  ],
                  type$.JSArray_Object
                )
              );
              $async$goto = H._asBool($.$get$_isUndefined().call$1(result))
                ? 3
                : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait(t1, $async$_callImporterAsync$4);
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_callImporterAsync$4, $async$completer);
    },
  };
  F.ModifiableCssImport0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssImport$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $isCssImport0: 1,
    get$span() {
      return this.span;
    },
  };
  B.ImportRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitImportRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@import ' + C.JSArray_methods.join$1(this.imports, ', ') + ';';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  M.Importer0.prototype = {};
  F.NodeImporterResult0.prototype = {};
  A.IncludeRule0.prototype = {
    get$spanWithoutContent() {
      var t2,
        t3,
        t1 = this.span;
      if (!(this.content == null)) {
        t2 = t1.file;
        t3 = this.$arguments.span;
        t3 = V.SpanExtensions_trimRight0(
          V.SpanExtensions_trimLeft0(
            t2.span$2(
              Y.FileLocation$_(t2, t1._file$_start).offset,
              Y.FileLocation$_(t3.file, t3._end).offset
            )
          )
        );
        t1 = t3;
      }
      return t1;
    },
    accept$1$1(visitor) {
      return visitor.visitIncludeRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t2,
        _this = this,
        t1 = _this.namespace;
      t1 = t1 != null ? '@include ' + (t1 + '.') : '@include ';
      t1 += _this.name;
      t2 = _this.$arguments;
      if (!t2.get$isEmpty(t2)) t1 += '(' + t2.toString$0(0) + ')';
      t2 = _this.content;
      t1 += t2 == null ? ';' : ' ' + t2.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  N.InterpolatedFunctionExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitInterpolatedFunctionExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.name.toString$0(0) + this.$arguments.toString$0(0);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  X.Interpolation0.prototype = {
    get$asPlain() {
      var first,
        t1 = this.contents,
        t2 = t1.length;
      if (t2 === 0) return '';
      if (t2 > 1) return null;
      first = C.JSArray_methods.get$first(t1);
      return typeof first == 'string' ? first : null;
    },
    get$initialPlain() {
      var first = C.JSArray_methods.get$first(this.contents);
      return typeof first == 'string' ? first : '';
    },
    Interpolation$20(contents, span) {
      var t1,
        t2,
        t3,
        i,
        t4,
        t5,
        _s8_ = 'contents';
      for (
        t1 = this.contents, t2 = t1.length, t3 = type$.Expression_2, i = 0;
        i < t2;
        ++i
      ) {
        t4 = t1[i];
        t5 = typeof t4 == 'string';
        if (!t5 && !t3._is(t4))
          throw H.wrapException(
            P.ArgumentError$value(t1, _s8_, string$.May_on)
          );
        if (i !== 0 && typeof t1[i - 1] == 'string' && t5)
          throw H.wrapException(
            P.ArgumentError$value(t1, _s8_, 'May not contain adjacent Strings.')
          );
      }
    },
    toString$0(_) {
      var t1 = this.contents;
      return new H.MappedListIterable(
        t1,
        new X.Interpolation_toString_closure0(),
        H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
      ).join$0(0);
    },
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  X.Interpolation_toString_closure0.prototype = {
    call$1(value) {
      return typeof value == 'string' ? value : '#{' + H.S(value) + '}';
    },
    $signature: 51,
  };
  X.SupportsInterpolation0.prototype = {
    toString$0(_) {
      return '#{' + this.expression.toString$0(0) + '}';
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  Z.InterpolationBuffer0.prototype = {
    writeCharCode$1(character) {
      this._interpolation_buffer0$_text._contents += H.Primitives_stringFromCharCode(
        character
      );
      return null;
    },
    add$1(_, expression) {
      this._interpolation_buffer0$_flushText$0();
      this._interpolation_buffer0$_contents.push(expression);
    },
    addInterpolation$1(interpolation) {
      var first,
        t1,
        _this = this,
        toAdd = interpolation.contents;
      if (toAdd.length === 0) return;
      first = C.JSArray_methods.get$first(toAdd);
      if (typeof first == 'string') {
        _this._interpolation_buffer0$_text._contents += first;
        toAdd = H.SubListIterable$(
          toAdd,
          1,
          null,
          H._arrayInstanceType(toAdd)._precomputed1
        );
      }
      _this._interpolation_buffer0$_flushText$0();
      t1 = _this._interpolation_buffer0$_contents;
      C.JSArray_methods.addAll$1(t1, toAdd);
      if (typeof C.JSArray_methods.get$last(t1) == 'string')
        _this._interpolation_buffer0$_text._contents += H.S(t1.pop());
    },
    _interpolation_buffer0$_flushText$0() {
      var t1 = this._interpolation_buffer0$_text,
        t2 = t1._contents;
      if (t2.length === 0) return;
      this._interpolation_buffer0$_contents.push(
        t2.charCodeAt(0) == 0 ? t2 : t2
      );
      t1._contents = '';
    },
    interpolation$1(span) {
      var t1 = P.List_List$of(
          this._interpolation_buffer0$_contents,
          true,
          type$.Object
        ),
        t2 = this._interpolation_buffer0$_text._contents;
      if (t2.length !== 0) t1.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      return X.Interpolation$0(t1, span);
    },
    toString$0(_) {
      var t1, t2, _i, t3, element;
      for (
        t1 = this._interpolation_buffer0$_contents,
          t2 = t1.length,
          _i = 0,
          t3 = '';
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        element = t1[_i];
        t3 =
          typeof element == 'string'
            ? t3 + element
            : t3 + '#{' + H.S(element) + H.Primitives_stringFromCharCode(125);
      }
      t1 = t3 + this._interpolation_buffer0$_text.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  F._realCasePath_helper0.prototype = {
    call$1(path) {
      var dirname = $.$get$context().dirname$1(path);
      if (dirname === path) return path;
      return $._realCaseCache0.putIfAbsent$2(
        path,
        new F._realCasePath_helper_closure0(this, dirname, path)
      );
    },
    $signature: 5,
  };
  F._realCasePath_helper_closure0.prototype = {
    call$0() {
      var matches,
        t2,
        exception,
        realDirname = this.helper.call$1(this.dirname),
        t1 = this.path,
        basename = X.ParsedPath_ParsedPath$parse(
          t1,
          $.$get$context().style
        ).get$basename();
      try {
        matches = J.where$1$ax(
          B.listDir0(realDirname),
          new F._realCasePath_helper__closure0(basename)
        ).toList$0(0);
        t2 =
          J.get$length$asx(matches) !== 1
            ? D.join(realDirname, basename, null)
            : J.$index$asx(matches, 0);
        return t2;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof B.FileSystemException0)
          return t1;
        else throw exception;
      }
    },
    $signature: 28,
  };
  F._realCasePath_helper__closure0.prototype = {
    call$1(realPath) {
      return B.equalsIgnoreCase0(
        X.ParsedPath_ParsedPath$parse(
          realPath,
          $.$get$context().style
        ).get$basename(),
        this.basename
      );
    },
    $signature: 6,
  };
  U.ModifiableCssKeyframeBlock0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssKeyframeBlock$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return U.ModifiableCssKeyframeBlock$0(this.selector, this.span);
    },
    get$span() {
      return this.span;
    },
  };
  E.KeyframeSelectorParser0.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new E.KeyframeSelectorParser_parse_closure0(this)
      );
    },
    _keyframe_selector$_percentage$0() {
      var t3,
        next,
        t1 = this.scanner,
        t2 = t1.scanChar$1(43) ? '' + H.Primitives_stringFromCharCode(43) : '',
        second = t1.peekChar$0();
      if (!T.isDigit0(second) && second !== 46)
        t1.error$1(0, 'Expected number.');
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      if (t1.peekChar$0() === 46) {
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      if (this.scanIdentifier$1('e')) {
        t2 += t1.readChar$0();
        next = t1.peekChar$0();
        if (next === 43 || next === 45) t2 += t1.readChar$0();
        if (!T.isDigit0(t1.peekChar$0())) t1.error$1(0, 'Expected digit.');
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      t1.expectChar$1(37);
      t2 += H.Primitives_stringFromCharCode(37);
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
  };
  E.KeyframeSelectorParser_parse_closure0.prototype = {
    call$0() {
      var selectors = H._setArrayType([], type$.JSArray_String),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        if (t1.lookingAtIdentifier$0())
          if (t1.scanIdentifier$1('from')) selectors.push('from');
          else {
            t1.expectIdentifier$2$name('to', '"to" or "from"');
            selectors.push('to');
          }
        else selectors.push(t1._keyframe_selector$_percentage$0());
        t1.whitespace$0();
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return selectors;
    },
    $signature: 42,
  };
  K.LimitedMapView0.prototype = {
    get$keys(_) {
      return this._limited_map_view0$_keys;
    },
    get$length(_) {
      return this._limited_map_view0$_keys._collection$_length;
    },
    get$isEmpty(_) {
      return this._limited_map_view0$_keys._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._limited_map_view0$_keys._collection$_length !== 0;
    },
    $index(_, key) {
      return this._limited_map_view0$_keys.contains$1(0, key)
        ? this._limited_map_view0$_map.$index(0, key)
        : null;
    },
    containsKey$1(key) {
      return this._limited_map_view0$_keys.contains$1(0, key);
    },
    remove$1(_, key) {
      return this._limited_map_view0$_keys.contains$1(0, key)
        ? this._limited_map_view0$_map.remove$1(0, key)
        : null;
    },
  };
  D.ListExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitListExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.hasBrackets,
        t2 = t1 ? '' + H.Primitives_stringFromCharCode(91) : '',
        t3 = _this.contents,
        t4 = _this.separator === C.ListSeparator_kWM0 ? ', ' : ' ';
      t4 =
        t2 +
        new H.MappedListIterable(
          t3,
          new D.ListExpression_toString_closure0(_this),
          H._arrayInstanceType(t3)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, t4);
      t1 = t1 ? t4 + H.Primitives_stringFromCharCode(93) : t4;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _list3$_elementNeedsParens$1(expression) {
      var t1, t2;
      if (expression instanceof D.ListExpression0) {
        if (expression.contents.length < 2) return false;
        if (expression.hasBrackets) return false;
        t1 = this.separator;
        t2 = t1 === C.ListSeparator_kWM0;
        return t2 ? t2 : t1 !== C.ListSeparator_undecided_null0;
      }
      if (this.separator !== C.ListSeparator_woc0) return false;
      if (expression instanceof X.UnaryOperationExpression0) {
        t1 = expression.operator;
        return t1 === C.UnaryOperator_j2w0 || t1 === C.UnaryOperator_U4G0;
      }
      return false;
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  D.ListExpression_toString_closure0.prototype = {
    call$1(element) {
      return this.$this._list3$_elementNeedsParens$1(element)
        ? '(' + element.toString$0(0) + ')'
        : element.toString$0(0);
    },
    $signature: 166,
  };
  D._length_closure2.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).get$asList().length;
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  D._nth_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1);
      return list.get$asList()[list.sassIndexToListIndex$2(index, 'n')];
    },
    $signature: 4,
  };
  D._setNth_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1),
        value = t1.$index($arguments, 2),
        t2 = list.get$asList(),
        newList = H._setArrayType(t2.slice(0), H._arrayInstanceType(t2));
      newList[list.sassIndexToListIndex$2(index, 'n')] = value;
      return t1.$index($arguments, 0).withListContents$1(newList);
    },
    $signature: 21,
  };
  D._join_closure0.prototype = {
    call$1($arguments) {
      var separator,
        bracketed,
        t1 = J.getInterceptor$asx($arguments),
        list1 = t1.$index($arguments, 0),
        list2 = t1.$index($arguments, 1),
        separatorParam = t1.$index($arguments, 2).assertString$1('separator'),
        bracketedParam = t1.$index($arguments, 3);
      t1 = separatorParam.text;
      if (t1 === 'auto')
        if (list1.get$separator() !== C.ListSeparator_undecided_null0)
          separator = list1.get$separator();
        else
          separator =
            list2.get$separator() !== C.ListSeparator_undecided_null0
              ? list2.get$separator()
              : C.ListSeparator_woc0;
      else if (t1 === 'space') separator = C.ListSeparator_woc0;
      else if (t1 === 'comma') separator = C.ListSeparator_kWM0;
      else {
        if (t1 !== 'slash')
          throw H.wrapException(E.SassScriptException$0(string$.x24separ));
        separator = C.ListSeparator_1gm0;
      }
      bracketed =
        bracketedParam instanceof D.SassString0 &&
        bracketedParam.text === 'auto'
          ? list1.get$hasBrackets()
          : bracketedParam.get$isTruthy();
      t1 = P.List_List$of(list1.get$asList(), true, type$.Value_2);
      C.JSArray_methods.addAll$1(t1, list2.get$asList());
      return D.SassList$0(t1, separator, bracketed);
    },
    $signature: 21,
  };
  D._append_closure2.prototype = {
    call$1($arguments) {
      var separator,
        t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        value = t1.$index($arguments, 1);
      t1 = t1.$index($arguments, 2).assertString$1('separator').text;
      if (t1 === 'auto')
        separator =
          list.get$separator() === C.ListSeparator_undecided_null0
            ? C.ListSeparator_woc0
            : list.get$separator();
      else if (t1 === 'space') separator = C.ListSeparator_woc0;
      else if (t1 === 'comma') separator = C.ListSeparator_kWM0;
      else {
        if (t1 !== 'slash')
          throw H.wrapException(E.SassScriptException$0(string$.x24separ));
        separator = C.ListSeparator_1gm0;
      }
      t1 = P.List_List$of(list.get$asList(), true, type$.Value_2);
      t1.push(value);
      return list.withListContents$2$separator(t1, separator);
    },
    $signature: 21,
  };
  D._zip_closure0.prototype = {
    call$1($arguments) {
      var results,
        result,
        _box_0 = {},
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,List<Value0>>'
        ),
        lists = P.List_List$of(
          new H.MappedListIterable(t1, new D._zip__closure2(), t2),
          true,
          t2._eval$1('ListIterable.E')
        );
      if (lists.length === 0) return C.SassList_yfz0;
      _box_0.i = 0;
      results = H._setArrayType([], type$.JSArray_SassList_2);
      for (
        t1 = H._arrayInstanceType(lists)._eval$1(
          'MappedListIterable<1,Value0>'
        ),
          t2 = type$.Value_2;
        C.JSArray_methods.every$1(lists, new D._zip__closure3(_box_0));

      ) {
        result = P.List_List$from(
          new H.MappedListIterable(lists, new D._zip__closure4(_box_0), t1),
          false,
          t2
        );
        result.fixed$length = Array;
        result.immutable$list = Array;
        results.push(new D.SassList0(result, C.ListSeparator_woc0, false));
        ++_box_0.i;
      }
      return D.SassList$0(results, C.ListSeparator_kWM0, false);
    },
    $signature: 21,
  };
  D._zip__closure2.prototype = {
    call$1(list) {
      return list.get$asList();
    },
    $signature: 400,
  };
  D._zip__closure3.prototype = {
    call$1(list) {
      return this._box_0.i !== J.get$length$asx(list);
    },
    $signature: 401,
  };
  D._zip__closure4.prototype = {
    call$1(list) {
      return J.$index$asx(list, this._box_0.i);
    },
    $signature: 4,
  };
  D._index_closure2.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        index = C.JSArray_methods.indexOf$1(
          t1.$index($arguments, 0).get$asList(),
          t1.$index($arguments, 1)
        );
      if (index === -1) t1 = C.C__SassNull;
      else t1 = new N.UnitlessSassNumber0(index + 1, null);
      return t1;
    },
    $signature: 4,
  };
  D._separator_closure0.prototype = {
    call$1($arguments) {
      switch (J.$index$asx($arguments, 0).get$separator()) {
        case C.ListSeparator_kWM0:
          return new D.SassString0('comma', false);
        case C.ListSeparator_1gm0:
          return new D.SassString0('slash', false);
        default:
          return new D.SassString0('space', false);
      }
    },
    $signature: 12,
  };
  D._isBracketed_closure0.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).get$hasBrackets()
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  D._slash_closure0.prototype = {
    call$1($arguments) {
      var list = J.$index$asx($arguments, 0).get$asList();
      if (list.length < 2)
        throw H.wrapException(
          E.SassScriptException$0('At least two elements are required.')
        );
      return D.SassList$0(list, C.ListSeparator_1gm0, false);
    },
    $signature: 21,
  };
  D.SelectorList0.prototype = {
    get$isInvisible() {
      return C.JSArray_methods.every$1(
        this.components,
        new D.SelectorList_isInvisible_closure0()
      );
    },
    get$asSassList() {
      var t1 = this.components;
      return D.SassList$0(
        new H.MappedListIterable(
          t1,
          new D.SelectorList_asSassList_closure0(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value0>')
        ),
        C.ListSeparator_kWM0,
        false
      );
    },
    accept$1$1(visitor) {
      return visitor.visitSelectorList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(other) {
      var t1 = this.components,
        t2 = H._arrayInstanceType(t1)._eval$1(
          'ExpandIterable<1,ComplexSelector0>'
        ),
        contents = P.List_List$of(
          new H.ExpandIterable(
            t1,
            new D.SelectorList_unify_closure0(other),
            t2
          ),
          true,
          t2._eval$1('Iterable.E')
        );
      return contents.length === 0 ? null : D.SelectorList$0(contents);
    },
    resolveParentSelectors$2$implicitParent($parent, implicitParent) {
      var t1,
        _this = this;
      if ($parent == null) {
        if (
          !C.JSArray_methods.any$1(
            _this.components,
            _this.get$_list2$_complexContainsParentSelector()
          )
        )
          return _this;
        throw H.wrapException(E.SassScriptException$0(string$.Top_le));
      }
      t1 = _this.components;
      return D.SelectorList$0(
        B.flattenVertically0(
          new H.MappedListIterable(
            t1,
            new D.SelectorList_resolveParentSelectors_closure0(
              _this,
              implicitParent,
              $parent
            ),
            H._arrayInstanceType(t1)._eval$1(
              'MappedListIterable<1,Iterable<ComplexSelector0>>'
            )
          ),
          type$.ComplexSelector_2
        )
      );
    },
    resolveParentSelectors$1($parent) {
      return this.resolveParentSelectors$2$implicitParent($parent, true);
    },
    _list2$_complexContainsParentSelector$1(complex) {
      return C.JSArray_methods.any$1(
        complex.components,
        new D.SelectorList__complexContainsParentSelector_closure0()
      );
    },
    _list2$_resolveParentSelectorsCompound$2(compound, $parent) {
      var resolvedMembers0,
        parentSelector,
        t1,
        resolvedMembers = compound.components,
        containsSelectorPseudo = C.JSArray_methods.any$1(
          resolvedMembers,
          new D.SelectorList__resolveParentSelectorsCompound_closure2()
        );
      if (
        !containsSelectorPseudo &&
        !(
          C.JSArray_methods.get$first(resolvedMembers) instanceof
          M.ParentSelector0
        )
      )
        return null;
      resolvedMembers0 = containsSelectorPseudo
        ? new H.MappedListIterable(
            resolvedMembers,
            new D.SelectorList__resolveParentSelectorsCompound_closure3(
              $parent
            ),
            H._arrayInstanceType(resolvedMembers)._eval$1(
              'MappedListIterable<1,SimpleSelector0>'
            )
          )
        : resolvedMembers;
      parentSelector = C.JSArray_methods.get$first(resolvedMembers);
      if (parentSelector instanceof M.ParentSelector0) {
        if (resolvedMembers.length === 1 && parentSelector.suffix == null)
          return $parent.components;
      } else
        return H._setArrayType(
          [
            S.ComplexSelector$0(
              H._setArrayType(
                [X.CompoundSelector$0(resolvedMembers0)],
                type$.JSArray_ComplexSelectorComponent_2
              ),
              false
            ),
          ],
          type$.JSArray_ComplexSelector_2
        );
      t1 = $parent.components;
      return new H.MappedListIterable(
        t1,
        new D.SelectorList__resolveParentSelectorsCompound_closure4(
          compound,
          resolvedMembers0
        ),
        H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,ComplexSelector0>'
        )
      );
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this.components);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof D.SelectorList0 &&
        C.C_ListEquality.equals$2(0, this.components, other.components)
      );
    },
  };
  D.SelectorList_isInvisible_closure0.prototype = {
    call$1(complex) {
      return complex.get$isInvisible();
    },
    $signature: 17,
  };
  D.SelectorList_asSassList_closure0.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      return D.SassList$0(
        new H.MappedListIterable(
          t1,
          new D.SelectorList_asSassList__closure0(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value0>')
        ),
        C.ListSeparator_woc0,
        false
      );
    },
    $signature: 402,
  };
  D.SelectorList_asSassList__closure0.prototype = {
    call$1(component) {
      return new D.SassString0(component.toString$0(0), false);
    },
    $signature: 403,
  };
  D.SelectorList_unify_closure0.prototype = {
    call$1(complex1) {
      var t1 = this.other.components;
      return new H.ExpandIterable(
        t1,
        new D.SelectorList_unify__closure0(complex1),
        H._arrayInstanceType(t1)._eval$1('ExpandIterable<1,ComplexSelector0>')
      );
    },
    $signature: 120,
  };
  D.SelectorList_unify__closure0.prototype = {
    call$1(complex2) {
      var unified = Y.unifyComplex0(
        H._setArrayType(
          [this.complex1.components, complex2.components],
          type$.JSArray_List_ComplexSelectorComponent_2
        )
      );
      if (unified == null) return C.List_empty13;
      return J.map$1$1$ax(
        unified,
        new D.SelectorList_unify___closure0(),
        type$.ComplexSelector_2
      );
    },
    $signature: 120,
  };
  D.SelectorList_unify___closure0.prototype = {
    call$1(complex) {
      return S.ComplexSelector$0(complex, false);
    },
    $signature: 67,
  };
  D.SelectorList_resolveParentSelectors_closure0.prototype = {
    call$1(complex) {
      var t2,
        newComplexes,
        t3,
        t4,
        t5,
        t6,
        t7,
        _i,
        component,
        resolved,
        t8,
        _i0,
        previousLineBreaks,
        newComplexes0,
        t9,
        i,
        newComplex,
        i0,
        lineBreak,
        t10,
        t11,
        t12,
        t13,
        _this = this,
        _box_0 = {},
        t1 = _this.$this;
      if (!t1._list2$_complexContainsParentSelector$1(complex)) {
        if (!_this.implicitParent)
          return H._setArrayType([complex], type$.JSArray_ComplexSelector_2);
        t1 = _this.parent.components;
        return new H.MappedListIterable(
          t1,
          new D.SelectorList_resolveParentSelectors__closure1(complex),
          H._arrayInstanceType(t1)._eval$1(
            'MappedListIterable<1,ComplexSelector0>'
          )
        );
      }
      t2 = type$.JSArray_List_ComplexSelectorComponent_2;
      newComplexes = H._setArrayType(
        [H._setArrayType([], type$.JSArray_ComplexSelectorComponent_2)],
        t2
      );
      t3 = type$.JSArray_bool;
      _box_0.lineBreaks = H._setArrayType([false], t3);
      for (
        t4 = complex.components,
          t5 = t4.length,
          t6 = type$.ComplexSelectorComponent_2,
          t7 = _this.parent,
          _i = 0;
        _i < t5;
        ++_i
      ) {
        component = t4[_i];
        if (component instanceof X.CompoundSelector0) {
          resolved = t1._list2$_resolveParentSelectorsCompound$2(component, t7);
          if (resolved == null) {
            for (
              t8 = newComplexes.length, _i0 = 0;
              _i0 < newComplexes.length;
              newComplexes.length === t8 ||
                (0, H.throwConcurrentModificationError)(newComplexes),
                ++_i0
            )
              newComplexes[_i0].push(component);
            continue;
          }
          previousLineBreaks = _box_0.lineBreaks;
          newComplexes0 = H._setArrayType([], t2);
          _box_0.lineBreaks = H._setArrayType([], t3);
          for (
            t8 = newComplexes.length,
              t9 = J.getInterceptor$ax(resolved),
              i = 0,
              _i0 = 0;
            _i0 < newComplexes.length;
            newComplexes.length === t8 ||
              (0, H.throwConcurrentModificationError)(newComplexes),
              ++_i0,
              i = i0
          ) {
            newComplex = newComplexes[_i0];
            i0 = i + 1;
            lineBreak = previousLineBreaks[i];
            for (
              t10 = t9.get$iterator(resolved), t11 = !lineBreak;
              t10.moveNext$0();

            ) {
              t12 = t10.get$current();
              t13 = P.List_List$of(newComplex, true, t6);
              C.JSArray_methods.addAll$1(t13, t12.components);
              newComplexes0.push(t13);
              t13 = _box_0.lineBreaks;
              t13.push(!t11 || t12.lineBreak);
            }
          }
          newComplexes = newComplexes0;
        } else
          for (
            t8 = newComplexes.length, _i0 = 0;
            _i0 < newComplexes.length;
            newComplexes.length === t8 ||
              (0, H.throwConcurrentModificationError)(newComplexes),
              ++_i0
          )
            newComplexes[_i0].push(component);
      }
      _box_0.i = 0;
      return new H.MappedListIterable(
        newComplexes,
        new D.SelectorList_resolveParentSelectors__closure2(_box_0),
        H._arrayInstanceType(newComplexes)._eval$1(
          'MappedListIterable<1,ComplexSelector0>'
        )
      );
    },
    $signature: 120,
  };
  D.SelectorList_resolveParentSelectors__closure1.prototype = {
    call$1(parentComplex) {
      var t1 = P.List_List$of(
          parentComplex.components,
          true,
          type$.ComplexSelectorComponent_2
        ),
        t2 = this.complex;
      C.JSArray_methods.addAll$1(t1, t2.components);
      return S.ComplexSelector$0(t1, t2.lineBreak || parentComplex.lineBreak);
    },
    $signature: 89,
  };
  D.SelectorList_resolveParentSelectors__closure2.prototype = {
    call$1(newComplex) {
      var t1 = this._box_0;
      return S.ComplexSelector$0(newComplex, t1.lineBreaks[t1.i++]);
    },
    $signature: 67,
  };
  D.SelectorList__complexContainsParentSelector_closure0.prototype = {
    call$1(component) {
      return (
        component instanceof X.CompoundSelector0 &&
        C.JSArray_methods.any$1(
          component.components,
          new D.SelectorList__complexContainsParentSelector__closure0()
        )
      );
    },
    $signature: 102,
  };
  D.SelectorList__complexContainsParentSelector__closure0.prototype = {
    call$1(simple) {
      var selector;
      if (simple instanceof M.ParentSelector0) return true;
      if (!(simple instanceof D.PseudoSelector0)) return false;
      selector = simple.selector;
      return (
        selector != null &&
        C.JSArray_methods.any$1(
          selector.components,
          selector.get$_list2$_complexContainsParentSelector()
        )
      );
    },
    $signature: 19,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure2.prototype = {
    call$1(simple) {
      var selector;
      if (!(simple instanceof D.PseudoSelector0)) return false;
      selector = simple.selector;
      return (
        selector != null &&
        C.JSArray_methods.any$1(
          selector.components,
          selector.get$_list2$_complexContainsParentSelector()
        )
      );
    },
    $signature: 19,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure3.prototype = {
    call$1(simple) {
      var selector, t1, t2, t3;
      if (!(simple instanceof D.PseudoSelector0)) return simple;
      selector = simple.selector;
      if (selector == null) return simple;
      if (
        !C.JSArray_methods.any$1(
          selector.components,
          selector.get$_list2$_complexContainsParentSelector()
        )
      )
        return simple;
      t1 = selector.resolveParentSelectors$2$implicitParent(this.parent, false);
      t2 = simple.name;
      t3 = simple.isClass;
      return D.PseudoSelector$0(t2, simple.argument, !t3, t1);
    },
    $signature: 406,
  };
  D.SelectorList__resolveParentSelectorsCompound_closure4.prototype = {
    call$1(complex) {
      var suffix,
        t2,
        t3,
        t4,
        t5,
        last,
        t1 = complex.components,
        lastComponent = C.JSArray_methods.get$last(t1);
      if (!(lastComponent instanceof X.CompoundSelector0))
        throw H.wrapException(
          E.SassScriptException$0(
            'Parent "' +
              complex.toString$0(0) +
              '" is incompatible with this selector.'
          )
        );
      suffix = type$.ParentSelector_2._as(
        C.JSArray_methods.get$first(this.compound.components)
      ).suffix;
      t2 = type$.SimpleSelector_2;
      t3 = this.resolvedMembers;
      t4 = lastComponent.components;
      t5 = J.getInterceptor$ax(t3);
      if (suffix != null) {
        t2 = P.List_List$of(
          H.SubListIterable$(
            t4,
            0,
            H.checkNotNullable(t4.length - 1, 'count', type$.int),
            H._arrayInstanceType(t4)._precomputed1
          ),
          true,
          t2
        );
        t2.push(C.JSArray_methods.get$last(t4).addSuffix$1(suffix));
        C.JSArray_methods.addAll$1(t2, t5.skip$1(t3, 1));
        last = X.CompoundSelector$0(t2);
      } else {
        t2 = P.List_List$of(t4, true, t2);
        C.JSArray_methods.addAll$1(t2, t5.skip$1(t3, 1));
        last = X.CompoundSelector$0(t2);
      }
      t1 = P.List_List$of(
        H.SubListIterable$(
          t1,
          0,
          H.checkNotNullable(t1.length - 1, 'count', type$.int),
          H._arrayInstanceType(t1)._precomputed1
        ),
        true,
        type$.ComplexSelectorComponent_2
      );
      t1.push(last);
      return S.ComplexSelector$0(t1, complex.lineBreak);
    },
    $signature: 89,
  };
  D._NodeSassList.prototype = {};
  D.listConstructor_closure.prototype = {
    call$4(thisArg, $length, commaSeparator, dartValue) {
      var t1;
      if (dartValue == null) {
        $length.toString;
        t1 = P.Iterable_Iterable$generate(
          $length,
          new D.listConstructor__closure(),
          type$.Value_2
        );
        t1 = D.SassList$0(
          t1,
          commaSeparator !== false
            ? C.ListSeparator_kWM0
            : C.ListSeparator_woc0,
          false
        );
      } else t1 = dartValue;
      J.set$dartValue$x(thisArg, t1);
    },
    call$2(thisArg, $length) {
      return this.call$4(thisArg, $length, null, null);
    },
    call$3(thisArg, $length, commaSeparator) {
      return this.call$4(thisArg, $length, commaSeparator, null);
    },
    'call*': 'call$4',
    $requiredArgCount: 2,
    $defaultValues() {
      return [null, null];
    },
    $signature: 407,
  };
  D.listConstructor__closure.prototype = {
    call$1(_) {
      return C.C__SassNull;
    },
    $signature: 190,
  };
  D.listConstructor_closure0.prototype = {
    call$2(thisArg, index) {
      return F.wrapValue(J.get$dartValue$x(thisArg)._list1$_contents[index]);
    },
    $signature: 409,
  };
  D.listConstructor_closure1.prototype = {
    call$3(thisArg, index, value) {
      var t1 = J.getInterceptor$x(thisArg),
        t2 = t1.get$dartValue(thisArg)._list1$_contents,
        mutable = H._setArrayType(t2.slice(0), H._arrayInstanceType(t2));
      mutable[index] = F.unwrapValue(value);
      t1.set$dartValue(
        thisArg,
        t1.get$dartValue(thisArg).withListContents$1(mutable)
      );
    },
    'call*': 'call$3',
    $requiredArgCount: 3,
    $signature: 410,
  };
  D.listConstructor_closure2.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).separator === C.ListSeparator_kWM0;
    },
    $signature: 411,
  };
  D.listConstructor_closure3.prototype = {
    call$2(thisArg, isComma) {
      var t1 = J.getInterceptor$x(thisArg),
        t2 = t1.get$dartValue(thisArg)._list1$_contents,
        t3 = isComma ? C.ListSeparator_kWM0 : C.ListSeparator_woc0;
      t1.set$dartValue(
        thisArg,
        D.SassList$0(t2, t3, t1.get$dartValue(thisArg).hasBrackets)
      );
    },
    $signature: 412,
  };
  D.listConstructor_closure4.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg)._list1$_contents.length;
    },
    $signature: 413,
  };
  D.listConstructor_closure5.prototype = {
    call$1(thisArg) {
      return N.serializeValue(J.get$dartValue$x(thisArg), true, true);
    },
    $signature: 414,
  };
  D.SassList0.prototype = {
    get$isBlank() {
      return C.JSArray_methods.every$1(
        this._list1$_contents,
        new D.SassList_isBlank_closure0()
      );
    },
    get$asList() {
      return this._list1$_contents;
    },
    get$lengthAsList() {
      return this._list1$_contents.length;
    },
    SassList$3$brackets0(contents, separator, brackets) {
      if (
        this.separator === C.ListSeparator_undecided_null0 &&
        this._list1$_contents.length > 1
      )
        throw H.wrapException(P.ArgumentError$(string$.A_list, null));
    },
    accept$1$1(visitor) {
      return visitor.visitList$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this._list1$_contents.length === 0
        ? C.SassMap_Map_empty0
        : this.super$Value$assertMap0($name);
    },
    tryMap$0() {
      return this._list1$_contents.length === 0 ? C.SassMap_Map_empty0 : null;
    },
    $eq(_, other) {
      var t1,
        _this = this;
      if (other == null) return false;
      if (
        !(
          other instanceof D.SassList0 &&
          other.separator === _this.separator &&
          other.hasBrackets === _this.hasBrackets &&
          C.C_ListEquality.equals$2(
            0,
            other._list1$_contents,
            _this._list1$_contents
          )
        )
      )
        t1 =
          _this._list1$_contents.length === 0 &&
          other instanceof A.SassMap0 &&
          other.get$asList().length === 0;
      else t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return C.C_ListEquality0.hash$1(this._list1$_contents);
    },
    get$separator() {
      return this.separator;
    },
    get$hasBrackets() {
      return this.hasBrackets;
    },
  };
  D.SassList_isBlank_closure0.prototype = {
    call$1(element) {
      return element.get$isBlank();
    },
    $signature: 49,
  };
  D.ListSeparator0.prototype = {
    toString$0(_) {
      return this._list1$_name;
    },
  };
  F._QuietLogger0.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {},
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
  };
  L.LoudComment0.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      return visitor.visitLoudComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text.toString$0(0);
    },
    $isAstNode0: 1,
    $isStatement0: 1,
  };
  A.MapExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMapExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.pairs;
      return (
        '(' +
        new H.MappedListIterable(
          t1,
          new A.MapExpression_toString_closure0(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,String>')
        ).join$1(0, ', ') +
        ')'
      );
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  A.MapExpression_toString_closure0.prototype = {
    call$1(pair) {
      return H.S(pair.item1) + ': ' + H.S(pair.item2);
    },
    $signature: 415,
  };
  A._get_closure0.prototype = {
    call$1($arguments) {
      var t3,
        value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value_2);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (
        t1 = H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value_2
        ),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t3 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();
        map = value
      ) {
        value = map.contents.$index(0, t3._as(t1.__internal$_current));
        if (!(value instanceof A.SassMap0)) return C.C__SassNull;
      }
      t1 = map.contents.$index(0, C.JSArray_methods.get$last(t2));
      return t1 == null ? C.C__SassNull : t1;
    },
    $signature: 4,
  };
  A._set_closure1.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._modify0(
        t1.$index($arguments, 0).assertMap$1('map'),
        H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value_2),
        new A._set__closure2($arguments),
        true
      );
    },
    $signature: 4,
  };
  A._set__closure2.prototype = {
    call$1(_) {
      return J.$index$asx(this.$arguments, 2);
    },
    $signature: 41,
  };
  A._set_closure2.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$0('Expected $args to contain a key.')
        );
      else if (t1 === 1)
        throw H.wrapException(
          E.SassScriptException$0('Expected $args to contain a value.')
        );
      return A._modify0(
        map,
        C.JSArray_methods.sublist$2(args, 0, t1 - 1),
        new A._set__closure1(args),
        true
      );
    },
    $signature: 4,
  };
  A._set__closure1.prototype = {
    call$1(_) {
      return C.JSArray_methods.get$last(this.args);
    },
    $signature: 41,
  };
  A._merge_closure1.prototype = {
    call$1($arguments) {
      var t2,
        t3,
        t4,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1('map1'),
        map2 = t1.$index($arguments, 1).assertMap$1('map2');
      t1 = type$.Value_2;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = map1.contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (
        t3 = map2.contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 38,
  };
  A._merge_closure2.prototype = {
    call$1($arguments) {
      var map2,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1('map1'),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$0('Expected $args to contain a key.')
        );
      else if (t1 === 1)
        throw H.wrapException(
          E.SassScriptException$0('Expected $args to contain a map.')
        );
      map2 = C.JSArray_methods.get$last(args).assertMap$1('map2');
      return A._modify0(
        map1,
        H.SubListIterable$(
          args,
          0,
          H.checkNotNullable(args.length - 1, 'count', type$.int),
          H._arrayInstanceType(args)._precomputed1
        ),
        new A._merge__closure0(map2),
        true
      );
    },
    $signature: 4,
  };
  A._merge__closure0.prototype = {
    call$1(oldValue) {
      var t1,
        t2,
        t3,
        t4,
        nestedMap = oldValue.tryMap$0();
      if (nestedMap == null) return this.map2;
      t1 = type$.Value_2;
      t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t3 = nestedMap.contents,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (
        t3 = this.map2.contents,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3);
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 416,
  };
  A._deepMerge_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._deepMergeImpl0(
        t1.$index($arguments, 0).assertMap$1('map1'),
        t1.$index($arguments, 1).assertMap$1('map2')
      );
    },
    $signature: 38,
  };
  A._deepRemove_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value_2);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      return A._modify0(
        map,
        H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value_2
        ),
        new A._deepRemove__closure0(t2),
        false
      );
    },
    $signature: 4,
  };
  A._deepRemove__closure0.prototype = {
    call$1(value) {
      var t1,
        t2,
        nestedMap = value.tryMap$0();
      if (
        nestedMap != null &&
        nestedMap.contents.containsKey$1(C.JSArray_methods.get$last(this.keys))
      ) {
        t1 = type$.Value_2;
        t2 = P.LinkedHashMap_LinkedHashMap$of(nestedMap.contents, t1, t1);
        t2.remove$1(0, C.JSArray_methods.get$last(this.keys));
        return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
      }
      return value;
    },
    $signature: 41,
  };
  A._remove_closure1.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).assertMap$1('map');
    },
    $signature: 38,
  };
  A._remove_closure2.prototype = {
    call$1($arguments) {
      var mutableMap,
        t3,
        _i,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value_2);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      t1 = type$.Value_2;
      mutableMap = P.LinkedHashMap_LinkedHashMap$of(map.contents, t1, t1);
      for (
        t3 = t2.length, _i = 0;
        _i < t2.length;
        t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i
      )
        mutableMap.remove$1(0, t2[_i]);
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 38,
  };
  A._keys_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1('map').contents;
      return D.SassList$0(t1.get$keys(t1), C.ListSeparator_kWM0, false);
    },
    $signature: 21,
  };
  A._values_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1('map').contents;
      return D.SassList$0(t1.get$values(t1), C.ListSeparator_kWM0, false);
    },
    $signature: 21,
  };
  A._hasKey_closure0.prototype = {
    call$1($arguments) {
      var t3,
        value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1('map'),
        t2 = H._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value_2);
      C.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (
        t1 = H.SubListIterable$(
          t2,
          0,
          H.checkNotNullable(t2.length - 1, 'count', type$.int),
          type$.Value_2
        ),
          t1 = new H.ListIterator(t1, t1.get$length(t1)),
          t3 = H._instanceType(t1)._precomputed1;
        t1.moveNext$0();
        map = value
      ) {
        value = map.contents.$index(0, t3._as(t1.__internal$_current));
        if (!(value instanceof A.SassMap0)) return C.SassBoolean_false;
      }
      return map.contents.containsKey$1(C.JSArray_methods.get$last(t2))
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  A._modify__modifyNestedMap0.prototype = {
    call$1(map) {
      var nestedMap,
        _this = this,
        t1 = type$.Value_2,
        mutableMap = P.LinkedHashMap_LinkedHashMap$of(map.contents, t1, t1),
        t2 = _this.keyIterator,
        key = t2.get$current();
      if (!t2.moveNext$0()) {
        t2 = mutableMap.$index(0, key);
        if (t2 == null) t2 = C.C__SassNull;
        mutableMap.$indexSet(0, key, _this.modify.call$1(t2));
        return new A.SassMap0(
          H.ConstantMap_ConstantMap$from(mutableMap, t1, t1)
        );
      }
      t2 = mutableMap.$index(0, key);
      nestedMap = t2 == null ? null : t2.tryMap$0();
      t2 = nestedMap == null;
      if (t2 && !_this.addNesting)
        return new A.SassMap0(
          H.ConstantMap_ConstantMap$from(mutableMap, t1, t1)
        );
      mutableMap.$indexSet(
        0,
        key,
        _this.call$1(t2 ? C.SassMap_Map_empty0 : nestedMap)
      );
      return new A.SassMap0(H.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 417,
  };
  A._deepMergeImpl__ensureMutable0.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      if (t1.mutable) return;
      t1.mutable = true;
      t2 = type$.Value_2;
      t1.result = P.LinkedHashMap_LinkedHashMap$of(t1.result, t2, t2);
    },
    $signature: 0,
  };
  A._deepMergeImpl_closure0.prototype = {
    call$2(key, value) {
      var resultMap,
        valueMap,
        merged,
        t1 = this._box_0,
        resultValue = t1.result.$index(0, key);
      if (resultValue == null) {
        this._ensureMutable.call$0();
        t1.result.$indexSet(0, key, value);
      } else {
        resultMap = resultValue.tryMap$0();
        valueMap = value.tryMap$0();
        if (resultMap != null && valueMap != null) {
          merged = A._deepMergeImpl0(valueMap, resultMap);
          if (merged === resultMap) return;
          this._ensureMutable.call$0();
          t1.result.$indexSet(0, key, merged);
        }
      }
    },
    $signature: 63,
  };
  A._NodeSassMap.prototype = {};
  A.mapConstructor_closure.prototype = {
    call$3(thisArg, $length, dartValue) {
      var t1, t2, t3, map;
      if (dartValue == null) {
        $length.toString;
        t1 = type$.Value_2;
        t2 = P.Iterable_Iterable$generate(
          $length,
          new A.mapConstructor__closure(),
          t1
        );
        t3 = P.Iterable_Iterable$generate(
          $length,
          new A.mapConstructor__closure0(),
          t1
        );
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, t1, t1);
        P.MapBase__fillMapWithIterables(map, t2, t3);
        t1 = new A.SassMap0(H.ConstantMap_ConstantMap$from(map, t1, t1));
      } else t1 = dartValue;
      J.set$dartValue$x(thisArg, t1);
    },
    call$2(thisArg, $length) {
      return this.call$3(thisArg, $length, null);
    },
    'call*': 'call$3',
    $requiredArgCount: 2,
    $defaultValues() {
      return [null];
    },
    $signature: 418,
  };
  A.mapConstructor__closure.prototype = {
    call$1(i) {
      return new N.UnitlessSassNumber0(i, null);
    },
    $signature: 419,
  };
  A.mapConstructor__closure0.prototype = {
    call$1(_) {
      return C.C__SassNull;
    },
    $signature: 190,
  };
  A.mapConstructor_closure0.prototype = {
    call$2(thisArg, index) {
      var t1 = J.get$dartValue$x(thisArg).contents;
      return F.wrapValue(J.elementAt$1$ax(t1.get$keys(t1), index));
    },
    $signature: 181,
  };
  A.mapConstructor_closure1.prototype = {
    call$2(thisArg, index) {
      var t1 = J.get$dartValue$x(thisArg).contents;
      return F.wrapValue(t1.get$values(t1).elementAt$1(0, index));
    },
    $signature: 181,
  };
  A.mapConstructor_closure2.prototype = {
    call$1(thisArg) {
      var t1 = J.get$dartValue$x(thisArg).contents;
      return t1.get$length(t1);
    },
    $signature: 421,
  };
  A.mapConstructor_closure3.prototype = {
    call$3(thisArg, index, key) {
      var newKey,
        t2,
        newMap,
        t3,
        i,
        t4,
        t5,
        t1 = J.getInterceptor$x(thisArg);
      P.RangeError_checkValidIndex(
        index,
        t1.get$dartValue(thisArg).contents,
        'index'
      );
      newKey = F.unwrapValue(key);
      t2 = type$.Value_2;
      newMap = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      for (
        t3 = t1.get$dartValue(thisArg).contents,
          t3 = t3.get$entries(t3),
          t3 = t3.get$iterator(t3),
          i = 0;
        t3.moveNext$0();

      ) {
        t4 = t3.get$current();
        if (i === index) newMap.$indexSet(0, newKey, t4.value);
        else {
          t5 = t4.key;
          if (newKey.$eq(0, t5))
            throw H.wrapException(
              P.ArgumentError$value(key, 'key', 'is already in the map')
            );
          newMap.$indexSet(0, t5, t4.value);
        }
        ++i;
      }
      t1.set$dartValue(
        thisArg,
        new A.SassMap0(H.ConstantMap_ConstantMap$from(newMap, t2, t2))
      );
    },
    'call*': 'call$3',
    $requiredArgCount: 3,
    $signature: 175,
  };
  A.mapConstructor_closure4.prototype = {
    call$3(thisArg, index, value) {
      var t3,
        t4,
        t5,
        t1 = J.getInterceptor$x(thisArg),
        t2 = t1.get$dartValue(thisArg).contents,
        key = J.elementAt$1$ax(t2.get$keys(t2), index);
      t2 = type$.Value_2;
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      for (
        t4 = t1.get$dartValue(thisArg).contents,
          t4 = t4.get$entries(t4),
          t4 = t4.get$iterator(t4);
        t4.moveNext$0();

      ) {
        t5 = t4.get$current();
        t3.$indexSet(0, t5.key, t5.value);
      }
      t3.$indexSet(0, key, F.unwrapValue(value));
      t1.set$dartValue(
        thisArg,
        new A.SassMap0(H.ConstantMap_ConstantMap$from(t3, t2, t2))
      );
    },
    'call*': 'call$3',
    $requiredArgCount: 3,
    $signature: 175,
  };
  A.mapConstructor_closure5.prototype = {
    call$1(thisArg) {
      return N.serializeValue(J.get$dartValue$x(thisArg), true, true);
    },
    $signature: 423,
  };
  A.SassMap0.prototype = {
    get$separator() {
      var t1 = this.contents;
      return t1.get$isEmpty(t1)
        ? C.ListSeparator_undecided_null0
        : C.ListSeparator_kWM0;
    },
    get$asList() {
      var result = H._setArrayType([], type$.JSArray_Value_2);
      this.contents.forEach$1(0, new A.SassMap_asList_closure0(result));
      return result;
    },
    get$lengthAsList() {
      var t1 = this.contents;
      return t1.get$length(t1);
    },
    accept$1$1(visitor) {
      return visitor.visitMap$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertMap$1($name) {
      return this;
    },
    tryMap$0() {
      return this;
    },
    $eq(_, other) {
      var t1;
      if (other == null) return false;
      if (
        !(
          other instanceof A.SassMap0 &&
          C.C_MapEquality.equals$2(0, other.contents, this.contents)
        )
      ) {
        t1 = this.contents;
        t1 =
          t1.get$isEmpty(t1) &&
          other instanceof D.SassList0 &&
          other._list1$_contents.length === 0;
      } else t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.contents;
      return t1.get$isEmpty(t1)
        ? C.C_ListEquality0.hash$1(C.List_empty14)
        : C.C_MapEquality.hash$1(t1);
    },
  };
  A.SassMap_asList_closure0.prototype = {
    call$2(key, value) {
      this.result.push(
        D.SassList$0(
          H._setArrayType([key, value], type$.JSArray_Value_2),
          C.ListSeparator_woc0,
          false
        )
      );
    },
    $signature: 63,
  };
  K._ceil_closure0.prototype = {
    call$1(value) {
      return C.JSNumber_methods.ceil$0(value);
    },
    $signature: 34,
  };
  K._clamp_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        min = t1.$index($arguments, 0).assertNumber$1('min'),
        number = t1.$index($arguments, 1).assertNumber$1('number'),
        max = t1.$index($arguments, 2).assertNumber$1('max');
      number.convertValueToMatch$3(min, 'number', 'min');
      max.convertValueToMatch$3(min, 'max', 'min');
      if (min.greaterThanOrEquals$1(max).value) return min;
      if (min.greaterThanOrEquals$1(number).value) return min;
      if (number.greaterThanOrEquals$1(max).value) return max;
      return number;
    },
    $signature: 9,
  };
  K._floor_closure0.prototype = {
    call$1(value) {
      return C.JSNumber_methods.floor$0(value);
    },
    $signature: 34,
  };
  K._max_closure0.prototype = {
    call$1($arguments) {
      var t1, t2, max, _i, number;
      for (
        t1 = J.$index$asx($arguments, 0).get$asList(),
          t2 = t1.length,
          max = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        number = t1[_i].assertNumber$0();
        if (max == null || max.lessThan$1(number).value) max = number;
      }
      if (max != null) return max;
      throw H.wrapException(
        E.SassScriptException$0('At least one argument must be passed.')
      );
    },
    $signature: 9,
  };
  K._min_closure0.prototype = {
    call$1($arguments) {
      var t1, t2, min, _i, number;
      for (
        t1 = J.$index$asx($arguments, 0).get$asList(),
          t2 = t1.length,
          min = null,
          _i = 0;
        _i < t1.length;
        t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i
      ) {
        number = t1[_i].assertNumber$0();
        if (min == null || min.greaterThan$1(number).value) min = number;
      }
      if (min != null) return min;
      throw H.wrapException(
        E.SassScriptException$0('At least one argument must be passed.')
      );
    },
    $signature: 9,
  };
  K._abs_closure0.prototype = {
    call$1(value) {
      return Math.abs(value);
    },
    $signature: 71,
  };
  K._hypot_closure0.prototype = {
    call$1($arguments) {
      var subtotal,
        i,
        i0,
        t3,
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = H._arrayInstanceType(t1)._eval$1(
          'MappedListIterable<1,SassNumber0>'
        ),
        numbers = P.List_List$of(
          new H.MappedListIterable(t1, new K._hypot__closure0(), t2),
          true,
          t2._eval$1('ListIterable.E')
        );
      t1 = numbers.length;
      if (t1 === 0)
        throw H.wrapException(
          E.SassScriptException$0('At least one argument must be passed.')
        );
      for (subtotal = 0, i = 0; i < t1; i = i0) {
        i0 = i + 1;
        subtotal += Math.pow(
          numbers[i].convertValueToMatch$3(
            numbers[0],
            'numbers[' + i0 + ']',
            'numbers[1]'
          ),
          2
        );
      }
      t1 = Math.sqrt(subtotal);
      t2 = numbers[0];
      t3 = t2.get$numeratorUnits();
      return T.SassNumber_SassNumber$withUnits0(
        t1,
        t2.get$denominatorUnits(),
        t3
      );
    },
    $signature: 9,
  };
  K._hypot__closure0.prototype = {
    call$1(argument) {
      return argument.assertNumber$0();
    },
    $signature: 424,
  };
  K._log_closure0.prototype = {
    call$1($arguments) {
      var numberValue,
        base,
        baseValue,
        t2,
        _s18_ = ' to have no units.',
        t1 = J.getInterceptor$asx($arguments),
        number = t1.$index($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$number: Expected ' + number.toString$0(0) + _s18_
          )
        );
      numberValue = K._fuzzyRoundIfZero0(number.value);
      if (J.$eq$(t1.$index($arguments, 1), C.C__SassNull)) {
        t1 = Math.log(numberValue);
        return new N.UnitlessSassNumber0(t1, null);
      }
      base = t1.$index($arguments, 1).assertNumber$1('base');
      if (base.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$base: Expected ' + base.toString$0(0) + _s18_
          )
        );
      t1 = base.value;
      baseValue =
        Math.abs(t1 - 1) < $.$get$epsilon0()
          ? T.fuzzyRound0(t1)
          : K._fuzzyRoundIfZero0(t1);
      t1 = Math.log(numberValue);
      t2 = Math.log(baseValue);
      return new N.UnitlessSassNumber0(t1 / t2, null);
    },
    $signature: 9,
  };
  K._pow_closure0.prototype = {
    call$1($arguments) {
      var baseValue,
        exponentValue,
        t2,
        intExponent,
        t3,
        _s18_ = ' to have no units.',
        _null = null,
        t1 = J.getInterceptor$asx($arguments),
        base = t1.$index($arguments, 0).assertNumber$1('base'),
        exponent = t1.$index($arguments, 1).assertNumber$1('exponent');
      if (base.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$base: Expected ' + base.toString$0(0) + _s18_
          )
        );
      else if (exponent.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$exponent: Expected ' + exponent.toString$0(0) + _s18_
          )
        );
      baseValue = K._fuzzyRoundIfZero0(base.value);
      exponentValue = K._fuzzyRoundIfZero0(exponent.value);
      t1 = $.$get$epsilon0();
      if (Math.abs(Math.abs(baseValue) - 1) < t1)
        t2 = exponentValue == 1 / 0 || exponentValue == -1 / 0;
      else t2 = false;
      if (t2) return new N.UnitlessSassNumber0(0 / 0, _null);
      else {
        t2 = Math.abs(baseValue - 0);
        if (t2 < t1) {
          if (isFinite(exponentValue)) {
            intExponent = T.fuzzyIsInt0(exponentValue)
              ? C.JSNumber_methods.round$0(exponentValue)
              : _null;
            if (
              intExponent != null &&
              C.JSInt_methods.$mod(intExponent, 2) === 1
            )
              exponentValue = T.fuzzyRound0(exponentValue);
          }
        } else {
          if (isFinite(baseValue))
            t3 =
              baseValue < 0 &&
              !(t2 < t1) &&
              isFinite(exponentValue) &&
              T.fuzzyIsInt0(exponentValue);
          else t3 = false;
          if (t3) exponentValue = T.fuzzyRound0(exponentValue);
          else {
            if (baseValue == 1 / 0 || baseValue == -1 / 0)
              t1 = baseValue < 0 && !(t2 < t1) && isFinite(exponentValue);
            else t1 = false;
            if (t1) {
              intExponent = T.fuzzyIsInt0(exponentValue)
                ? C.JSNumber_methods.round$0(exponentValue)
                : _null;
              if (
                intExponent != null &&
                C.JSInt_methods.$mod(intExponent, 2) === 1
              )
                exponentValue = T.fuzzyRound0(exponentValue);
            }
          }
        }
      }
      t1 = Math.pow(baseValue, exponentValue);
      return new N.UnitlessSassNumber0(t1, _null);
    },
    $signature: 9,
  };
  K._sqrt_closure0.prototype = {
    call$1($arguments) {
      var t1,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      t1 = Math.sqrt(K._fuzzyRoundIfZero0(number.value));
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._acos_closure0.prototype = {
    call$1($arguments) {
      var numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      numberValue = number.value;
      if (Math.abs(Math.abs(numberValue) - 1) < $.$get$epsilon0())
        numberValue = T.fuzzyRound0(numberValue);
      return T.SassNumber_SassNumber$withUnits0(
        (Math.acos(numberValue) * 180) / 3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 9,
  };
  K._asin_closure0.prototype = {
    call$1($arguments) {
      var t1,
        numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      t1 = number.value;
      numberValue =
        Math.abs(Math.abs(t1) - 1) < $.$get$epsilon0()
          ? T.fuzzyRound0(t1)
          : K._fuzzyRoundIfZero0(t1);
      return T.SassNumber_SassNumber$withUnits0(
        (Math.asin(numberValue) * 180) / 3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 9,
  };
  K._atan_closure0.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number');
      if (number.get$hasUnits())
        throw H.wrapException(
          E.SassScriptException$0(
            '$number: Expected ' + number.toString$0(0) + ' to have no units.'
          )
        );
      return T.SassNumber_SassNumber$withUnits0(
        (Math.atan(K._fuzzyRoundIfZero0(number.value)) * 180) /
          3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 9,
  };
  K._atan2_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        y = t1.$index($arguments, 0).assertNumber$1('y'),
        xValue = K._fuzzyRoundIfZero0(
          t1
            .$index($arguments, 1)
            .assertNumber$1('x')
            .convertValueToMatch$3(y, 'x', 'y')
        );
      return T.SassNumber_SassNumber$withUnits0(
        (Math.atan2(K._fuzzyRoundIfZero0(y.value), xValue) * 180) /
          3.141592653589793,
        null,
        H._setArrayType(['deg'], type$.JSArray_String)
      );
    },
    $signature: 9,
  };
  K._cos_closure0.prototype = {
    call$1($arguments) {
      var t1 = Math.cos(
        J.$index$asx($arguments, 0)
          .assertNumber$1('number')
          .coerceValueToUnit$2('rad', 'number')
      );
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._sin_closure0.prototype = {
    call$1($arguments) {
      var t1 = Math.sin(
        K._fuzzyRoundIfZero0(
          J.$index$asx($arguments, 0)
            .assertNumber$1('number')
            .coerceValueToUnit$2('rad', 'number')
        )
      );
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  K._tan_closure0.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0)
          .assertNumber$1('number')
          .coerceValueToUnit$2('rad', 'number'),
        t1 = C.JSNumber_methods.$mod(
          value - 1.5707963267948966,
          6.283185307179586
        ),
        t2 = $.$get$epsilon0();
      if (Math.abs(t1 - 0) < t2) return new N.UnitlessSassNumber0(1 / 0, null);
      else if (
        Math.abs(
          C.JSNumber_methods.$mod(
            value + 1.5707963267948966,
            6.283185307179586
          ) - 0
        ) < t2
      )
        return new N.UnitlessSassNumber0(-1 / 0, null);
      else {
        t1 = Math.tan(K._fuzzyRoundIfZero0(value));
        return new N.UnitlessSassNumber0(t1, null);
      }
    },
    $signature: 9,
  };
  K._compatible_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1
        .$index($arguments, 0)
        .assertNumber$1('number1')
        .isComparableTo$1(t1.$index($arguments, 1).assertNumber$1('number2'))
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  K._isUnitless_closure0.prototype = {
    call$1($arguments) {
      return !J.$index$asx($arguments, 0)
        .assertNumber$1('number')
        .get$hasUnits()
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  K._unit_closure0.prototype = {
    call$1($arguments) {
      return new D.SassString0(
        J.$index$asx($arguments, 0).assertNumber$1('number').get$unitString(),
        true
      );
    },
    $signature: 12,
  };
  K._percentage_closure0.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number');
      number.assertNoUnits$1('number');
      return new L.SingleUnitSassNumber0('%', number.value * 100, null);
    },
    $signature: 9,
  };
  K._randomFunction_closure0.prototype = {
    call$1($arguments) {
      var limit,
        t1 = J.getInterceptor$asx($arguments);
      if (J.$eq$(t1.$index($arguments, 0), C.C__SassNull)) {
        t1 = $.$get$_random2().nextDouble$0();
        return new N.UnitlessSassNumber0(t1, null);
      }
      limit = t1
        .$index($arguments, 0)
        .assertNumber$1('limit')
        .assertInt$1('limit');
      if (limit < 1)
        throw H.wrapException(
          E.SassScriptException$0(
            '$limit: Must be greater than 0, was ' + limit + '.'
          )
        );
      t1 = $.$get$_random2().nextInt$1(limit);
      return new N.UnitlessSassNumber0(t1 + 1, null);
    },
    $signature: 9,
  };
  K._div_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        number1 = t1.$index($arguments, 0),
        number2 = t1.$index($arguments, 1);
      if (
        !(number1 instanceof T.SassNumber0) ||
        !(number2 instanceof T.SassNumber0)
      )
        N.warn0(string$.math_d, false);
      return number1.dividedBy$1(number2);
    },
    $signature: 4,
  };
  K._numberFunction_closure0.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1('number'),
        t1 = this.transform.call$1(number.value),
        t2 = number.get$numeratorUnits();
      return T.SassNumber_SassNumber$withUnits0(
        t1,
        number.get$denominatorUnits(),
        t2
      );
    },
    $signature: 9,
  };
  F.CssMediaQuery0.prototype = {
    merge$1(other) {
      var t8,
        negativeFeatures,
        features,
        type,
        modifier,
        fewerFeatures,
        fewerFeatures0,
        moreFeatures,
        _this = this,
        _null = null,
        _s3_ = 'all',
        t1 = _this.modifier,
        ourModifier = t1 == null ? _null : t1.toLowerCase(),
        t2 = _this.type,
        t3 = t2 == null,
        ourType = t3 ? _null : t2.toLowerCase(),
        t4 = other.modifier,
        theirModifier = t4 == null ? _null : t4.toLowerCase(),
        t5 = other.type,
        t6 = t5 == null,
        theirType = t6 ? _null : t5.toLowerCase(),
        t7 = ourType == null;
      if (t7 && theirType == null) {
        t1 = type$.String;
        t2 = P.List_List$of(_this.features, true, t1);
        C.JSArray_methods.addAll$1(t2, other.features);
        return new F.MediaQuerySuccessfulMergeResult0(
          new F.CssMediaQuery0(_null, _null, P.List_List$unmodifiable(t2, t1))
        );
      }
      t8 = ourModifier === 'not';
      if (t8 !== (theirModifier === 'not')) {
        if (ourType == theirType) {
          negativeFeatures = t8 ? _this.features : other.features;
          if (
            C.JSArray_methods.every$1(
              negativeFeatures,
              C.JSArray_methods.get$contains(
                t8 ? other.features : _this.features
              )
            )
          )
            return C._SingletonCssMediaQueryMergeResult_empty0;
          else return C._SingletonCssMediaQueryMergeResult_unrepresentable0;
        } else if (
          t3 ||
          B.equalsIgnoreCase0(t2, _s3_) ||
          t6 ||
          B.equalsIgnoreCase0(t5, _s3_)
        )
          return C._SingletonCssMediaQueryMergeResult_unrepresentable0;
        if (t8) {
          features = other.features;
          type = theirType;
          modifier = theirModifier;
        } else {
          features = _this.features;
          type = ourType;
          modifier = ourModifier;
        }
      } else if (t8) {
        if (ourType != theirType)
          return C._SingletonCssMediaQueryMergeResult_unrepresentable0;
        fewerFeatures = _this.features;
        fewerFeatures0 = other.features;
        t3 = fewerFeatures.length > fewerFeatures0.length;
        moreFeatures = t3 ? fewerFeatures : fewerFeatures0;
        if (t3) fewerFeatures = fewerFeatures0;
        if (
          !C.JSArray_methods.every$1(
            fewerFeatures,
            C.JSArray_methods.get$contains(moreFeatures)
          )
        )
          return C._SingletonCssMediaQueryMergeResult_unrepresentable0;
        features = moreFeatures;
        type = ourType;
        modifier = ourModifier;
      } else if (t3 || B.equalsIgnoreCase0(t2, _s3_)) {
        type = (t6 || B.equalsIgnoreCase0(t5, _s3_)) && t7 ? _null : theirType;
        t3 = P.List_List$of(_this.features, true, type$.String);
        C.JSArray_methods.addAll$1(t3, other.features);
        features = t3;
        modifier = theirModifier;
      } else {
        if (t6 || B.equalsIgnoreCase0(t5, _s3_)) {
          t3 = P.List_List$of(_this.features, true, type$.String);
          C.JSArray_methods.addAll$1(t3, other.features);
          features = t3;
          modifier = ourModifier;
        } else {
          if (ourType != theirType)
            return C._SingletonCssMediaQueryMergeResult_empty0;
          else {
            modifier = ourModifier == null ? theirModifier : ourModifier;
            t3 = P.List_List$of(_this.features, true, type$.String);
            C.JSArray_methods.addAll$1(t3, other.features);
          }
          features = t3;
        }
        type = ourType;
      }
      t2 = type == ourType ? t2 : t5;
      t1 = modifier == ourModifier ? t1 : t4;
      t3 = P.List_List$unmodifiable(features, type$.String);
      return new F.MediaQuerySuccessfulMergeResult0(
        new F.CssMediaQuery0(t1, t2, t3)
      );
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof F.CssMediaQuery0 &&
        other.modifier == this.modifier &&
        other.type == this.type &&
        C.C_ListEquality.equals$2(0, other.features, this.features)
      );
    },
    get$hashCode(_) {
      return (
        J.get$hashCode$(this.modifier) ^
        J.get$hashCode$(this.type) ^
        C.C_ListEquality0.hash$1(this.features)
      );
    },
    toString$0(_) {
      var t2,
        _this = this,
        t1 = _this.modifier;
      t1 = t1 != null ? '' + (t1 + ' ') : '';
      t2 = _this.type;
      if (t2 != null) {
        t1 += t2;
        if (_this.features.length !== 0) t1 += ' and ';
      }
      t1 += C.JSArray_methods.join$1(_this.features, ' and ');
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
  };
  F._SingletonCssMediaQueryMergeResult0.prototype = {
    toString$0(_) {
      return this._media_query1$_name;
    },
  };
  F.MediaQuerySuccessfulMergeResult0.prototype = {};
  F.MediaQueryParser0.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new F.MediaQueryParser_parse_closure0(this)
      );
    },
    _media_query0$_mediaQuery$0() {
      var identifier1,
        identifier2,
        type,
        modifier,
        features,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 40) {
        identifier1 = _this.identifier$0();
        _this.whitespace$0();
        if (!_this.lookingAtIdentifier$0())
          return new F.CssMediaQuery0(_null, identifier1, C.List_empty);
        identifier2 = _this.identifier$0();
        _this.whitespace$0();
        if (B.equalsIgnoreCase0(identifier2, 'and')) {
          type = identifier1;
          modifier = _null;
        } else {
          if (_this.scanIdentifier$1('and')) _this.whitespace$0();
          else
            return new F.CssMediaQuery0(identifier1, identifier2, C.List_empty);
          type = identifier2;
          modifier = identifier1;
        }
      } else {
        type = _null;
        modifier = type;
      }
      features = H._setArrayType([], type$.JSArray_String);
      do {
        _this.whitespace$0();
        t1.expectChar$1(40);
        features.push('(' + _this.declarationValue$0() + ')');
        t1.expectChar$1(41);
        _this.whitespace$0();
      } while (_this.scanIdentifier$1('and'));
      if (type == null)
        return new F.CssMediaQuery0(
          _null,
          _null,
          P.List_List$unmodifiable(features, type$.String)
        );
      else {
        t1 = P.List_List$unmodifiable(features, type$.String);
        return new F.CssMediaQuery0(modifier, type, t1);
      }
    },
  };
  F.MediaQueryParser_parse_closure0.prototype = {
    call$0() {
      var queries = H._setArrayType([], type$.JSArray_CssMediaQuery_2),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        queries.push(t1._media_query0$_mediaQuery$0());
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return queries;
    },
    $signature: 168,
  };
  G.ModifiableCssMediaRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssMediaRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return G.ModifiableCssMediaRule$0(this.queries, this.span);
    },
    $isCssMediaRule0: 1,
    get$span() {
      return this.span;
    },
  };
  G.MediaRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMediaRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@media ' +
        this.query.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  A.MergedExtension0.prototype = {
    unmerge$0() {
      var $async$self = this;
      return P._makeSyncStarIterable(function () {
        var $async$goto = 0,
          $async$handler = 1,
          $async$currentError,
          right,
          left;
        return function $async$unmerge$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                left = $async$self.left;
                $async$goto = left instanceof A.MergedExtension0 ? 2 : 4;
                break;
              case 2:
                // then
                $async$goto = 5;
                return P._IterationMarker_yieldStar(left.unmerge$0());
              case 5:
                // after yield
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$goto = 6;
                return left;
              case 6:
              // after yield
              case 3:
                // join
                right = $async$self.right;
                $async$goto = right instanceof A.MergedExtension0 ? 7 : 9;
                break;
              case 7:
                // then
                $async$goto = 10;
                return P._IterationMarker_yieldStar(right.unmerge$0());
              case 10:
                // after yield
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = 11;
                return right;
              case 11:
              // after yield
              case 8:
                // join
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.Extension_2);
    },
  };
  Z.MergedMapView0.prototype = {
    get$keys(_) {
      var t1 = this._merged_map_view$_mapsByKey;
      return t1.get$keys(t1);
    },
    get$length(_) {
      var t1 = this._merged_map_view$_mapsByKey;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._merged_map_view$_mapsByKey;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._merged_map_view$_mapsByKey;
      return t1.get$isNotEmpty(t1);
    },
    MergedMapView$10(maps, $K, $V) {
      var t1, t2, t3, _i, map, t4, t5;
      for (
        t1 = maps.length,
          t2 = this._merged_map_view$_mapsByKey,
          t3 = $K._eval$1('@<0>')._bind$1($V)._eval$1('MergedMapView0<1,2>'),
          _i = 0;
        _i < maps.length;
        maps.length === t1 || (0, H.throwConcurrentModificationError)(maps),
          ++_i
      ) {
        map = maps[_i];
        if (t3._is(map))
          for (
            t4 = map._merged_map_view$_mapsByKey,
              t4 = t4.get$values(t4),
              t4 = t4.get$iterator(t4);
            t4.moveNext$0();

          ) {
            t5 = t4.get$current();
            B.setAll0(t2, t5.get$keys(t5), t5);
          }
        else B.setAll0(t2, map.get$keys(map), map);
      }
    },
    $index(_, key) {
      var t1 = this._merged_map_view$_mapsByKey.$index(
        0,
        this.$ti._precomputed1._as(key)
      );
      return t1 == null ? null : t1.$index(0, key);
    },
    $indexSet(_, key, value) {
      var child = this._merged_map_view$_mapsByKey.$index(0, key);
      if (child == null)
        throw H.wrapException(P.UnsupportedError$(string$.New_en));
      child.$indexSet(0, key, value);
    },
    remove$1(_, key) {
      throw H.wrapException(P.UnsupportedError$(string$.Entrie));
    },
    containsKey$1(key) {
      return this._merged_map_view$_mapsByKey.containsKey$1(key);
    },
  };
  Q.global_closure57.prototype = {
    call$1($arguments) {
      return $._features0.contains$1(
        0,
        J.$index$asx($arguments, 0).assertString$1('feature').text
      )
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  Q.global_closure58.prototype = {
    call$1($arguments) {
      return new D.SassString0(
        N.serializeValue(J.get$first$ax($arguments), true, true),
        false
      );
    },
    $signature: 12,
  };
  Q.global_closure59.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0);
      if (value instanceof D.SassArgumentList0)
        return new D.SassString0('arglist', false);
      if (value instanceof Z.SassBoolean0)
        return new D.SassString0('bool', false);
      if (value instanceof K.SassColor0)
        return new D.SassString0('color', false);
      if (value instanceof D.SassList0) return new D.SassString0('list', false);
      if (value instanceof A.SassMap0) return new D.SassString0('map', false);
      if (value.$eq(0, C.C__SassNull)) return new D.SassString0('null', false);
      if (value instanceof T.SassNumber0)
        return new D.SassString0('number', false);
      if (value instanceof F.SassFunction0)
        return new D.SassString0('function', false);
      return new D.SassString0('string', false);
    },
    $signature: 12,
  };
  Q.global_closure60.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        t3,
        t4,
        argumentList = J.$index$asx($arguments, 0);
      if (argumentList instanceof D.SassArgumentList0) {
        t1 = type$.Value_2;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (
          argumentList._argument_list$_wereKeywordsAccessed = true,
            t3 = argumentList._argument_list$_keywords,
            t3 = t3.get$entries(t3),
            t3 = t3.get$iterator(t3);
          t3.moveNext$0();

        ) {
          t4 = t3.get$current();
          t2.$indexSet(0, new D.SassString0(t4.key, false), t4.value);
        }
        return new A.SassMap0(H.ConstantMap_ConstantMap$from(t2, t1, t1));
      } else
        throw H.wrapException(
          '$args: ' + argumentList.toString$0(0) + ' is not an argument list.'
        );
    },
    $signature: 38,
  };
  T.MixinRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitMixinRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = '@mixin ' + this.name,
        t2 = this.$arguments;
      if (!(t2.$arguments.length === 0 && t2.restArgument == null))
        t1 += '(' + t2.toString$0(0) + ')';
      t2 = this.children;
      t2 = t1 + (' {' + (t2 && C.JSArray_methods).join$1(t2, ' ') + '}');
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
  };
  T._HasContentVisitor0.prototype = {
    visitContentRule$1(_) {
      return true;
    },
  };
  L.ExtendMode0.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  M.SupportsNegation0.prototype = {
    toString$0(_) {
      var t1 = this.condition;
      if (
        t1 instanceof M.SupportsNegation0 ||
        t1 instanceof U.SupportsOperation0
      )
        return 'not (' + t1.toString$0(0) + ')';
      else return 'not ' + t1.toString$0(0);
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  N.NoSourceMapBuffer.prototype = {
    get$length(_) {
      return this._no_source_map_buffer$_buffer._contents.length;
    },
    forSpan$1$2(span, callback) {
      return callback.call$0();
    },
    forSpan$2(span, callback) {
      return this.forSpan$1$2(span, callback, type$.dynamic);
    },
    write$1(_, object) {
      this._no_source_map_buffer$_buffer._contents += H.S(object);
      return null;
    },
    writeCharCode$1(charCode) {
      this._no_source_map_buffer$_buffer._contents += H.Primitives_stringFromCharCode(
        charCode
      );
      return null;
    },
    toString$0(_) {
      var t1 = this._no_source_map_buffer$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    buildSourceMap$1$prefix(prefix) {
      return H.throwExpression(P.UnsupportedError$(string$.NoSour));
    },
  };
  B.AstNode0.prototype = {};
  B._FakeAstNode0.prototype = {
    get$span() {
      return this._node3$_callback.call$0();
    },
    $isAstNode0: 1,
  };
  B.CssNode0.prototype = {
    toString$0(_) {
      return N.serialize0(this, true, null, true, null, false, null, true).css;
    },
  };
  B.CssParentNode0.prototype = {};
  B.FileSystemException0.prototype = {
    toString$0(_) {
      var t1 = $.$get$context();
      return t1.prettyUri$1(t1.toUri$1(this.path)) + ': ' + this.message;
    },
    get$message(receiver) {
      return this.message;
    },
  };
  B.Stderr0.prototype = {
    writeln$1(object) {
      J.write$1$x(this._node1$_stderr, (object == null ? '' : object) + '\n');
    },
    writeln$0() {
      return this.writeln$1(null);
    },
  };
  B._readFile_closure0.prototype = {
    call$0() {
      return J.readFileSync$2$x(D.fs(), this.path, this.encoding);
    },
    $signature: 70,
  };
  B.fileExists_closure0.prototype = {
    call$0() {
      var error,
        systemError,
        exception,
        t1 = this.path;
      if (!J.existsSync$1$x(D.fs(), t1)) return false;
      try {
        t1 = J.isFile$0$x(J.statSync$1$x(D.fs(), t1));
        return t1;
      } catch (exception) {
        error = H.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), 'ENOENT')) return false;
        throw exception;
      }
    },
    $signature: 25,
  };
  B.dirExists_closure0.prototype = {
    call$0() {
      var error,
        systemError,
        exception,
        t1 = this.path;
      if (!J.existsSync$1$x(D.fs(), t1)) return false;
      try {
        t1 = J.isDirectory$0$x(J.statSync$1$x(D.fs(), t1));
        return t1;
      } catch (exception) {
        error = H.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), 'ENOENT')) return false;
        throw exception;
      }
    },
    $signature: 25,
  };
  B.listDir_closure0.prototype = {
    call$0() {
      var t1 = this.path;
      if (!this.recursive)
        return J.map$1$1$ax(
          J.readdirSync$1$x(D.fs(), t1),
          new B.listDir__closure1(t1),
          type$.String
        ).where$1(0, new B.listDir__closure2());
      else return new B.listDir_closure_list0().call$1(t1);
    },
    $signature: 160,
  };
  B.listDir__closure1.prototype = {
    call$1(child) {
      return D.join(this.path, H._asString(child), null);
    },
    $signature: 65,
  };
  B.listDir__closure2.prototype = {
    call$1(child) {
      return !B.dirExists0(child);
    },
    $signature: 6,
  };
  B.listDir_closure_list0.prototype = {
    call$1($parent) {
      return J.expand$1$1$ax(
        J.readdirSync$1$x(D.fs(), $parent),
        new B.listDir__list_closure0($parent, this),
        type$.String
      );
    },
    $signature: 161,
  };
  B.listDir__list_closure0.prototype = {
    call$1(child) {
      var path = D.join(this.parent, H._asString(child), null);
      return B.dirExists0(path)
        ? this.list.call$1(path)
        : H._setArrayType([path], type$.JSArray_String);
    },
    $signature: 162,
  };
  B.ModifiableCssNode0.prototype = {
    get$hasFollowingSibling() {
      var siblings,
        t1,
        i,
        t2,
        $parent = this._node2$_parent;
      if ($parent == null) return false;
      siblings = $parent.children;
      t1 = this._node2$_indexInParent;
      t1.toString;
      i = t1 + 1;
      t1 = siblings._collection$_source;
      t2 = J.getInterceptor$asx(t1);
      for (; i < t2.get$length(t1); ++i)
        if (!this._node2$_isInvisible$1(t2.elementAt$1(t1, i))) return true;
      return false;
    },
    _node2$_isInvisible$1(node) {
      if (type$.CssParentNode_2._is(node)) {
        if (type$.CssAtRule_2._is(node)) return false;
        if (
          type$.CssStyleRule_2._is(node) &&
          node.selector.value.get$isInvisible()
        )
          return true;
        return J.every$1$ax(
          node.get$children(node),
          this.get$_node2$_isInvisible()
        );
      } else return false;
    },
    get$isGroupEnd() {
      return this.isGroupEnd;
    },
  };
  B.ModifiableCssParentNode0.prototype = {
    get$isChildless() {
      return false;
    },
    addChild$1(child) {
      var t1;
      child._node2$_parent = this;
      t1 = this._node2$_children;
      child._node2$_indexInParent = t1.length;
      t1.push(child);
    },
    $isCssParentNode0: 1,
    get$children(receiver) {
      return this.children;
    },
  };
  B._render_closure.prototype = {
    call$1(result) {
      this.callback.call$2(null, result);
    },
    $signature: 425,
  };
  B._render_closure0.prototype = {
    call$2(error, stackTrace) {
      var _null = null,
        t1 = this.callback;
      if (error instanceof E.SassException0)
        t1.call$2(B._wrapException(error), _null);
      else
        t1.call$2(
          B._newRenderError(J.toString$0$(error), _null, _null, _null, 3),
          _null
        );
    },
    $signature: 96,
  };
  B._parseFunctions_closure.prototype = {
    call$2(signature, callback) {
      var error,
        exception,
        t1,
        context,
        _this = this,
        tuple = null;
      try {
        tuple = L.ScssParser$0(signature, null, null).parseSignature$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException0) {
          error = t1;
          throw H.wrapException(
            E.SassFormatException$0(
              'Invalid signature "' +
                signature +
                '": ' +
                error._span_exception$_message,
              error.get$span()
            )
          );
        } else throw exception;
      }
      context = { options: B._contextOptions(_this.options, _this.start) };
      J.set$context$x(J.get$options$x(context), context);
      t1 = _this.result;
      if (!_this.asynch)
        t1.push(
          Q.BuiltInCallable$parsed(
            tuple.item1,
            tuple.item2,
            new B._parseFunctions__closure(callback, context)
          )
        );
      else
        t1.push(
          new S.AsyncBuiltInCallable0(
            tuple.item1,
            tuple.item2,
            new B._parseFunctions__closure0(callback, context)
          )
        );
    },
    $signature: 426,
  };
  B._parseFunctions__closure.prototype = {
    call$1($arguments) {
      return F.unwrapValue(
        J.apply$2$x(
          type$.JSFunction._as(this.callback),
          this.context,
          J.map$1$1$ax(
            $arguments,
            F.value1__wrapValue$closure(),
            type$.Object
          ).toList$0(0)
        )
      );
    },
    $signature: 4,
  };
  B._parseFunctions__closure0.prototype = {
    call$1($arguments) {
      return this.$call$body$_parseFunctions__closure($arguments);
    },
    $call$body$_parseFunctions__closure($arguments) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue,
        $async$self = this,
        result,
        t1,
        t2,
        $async$temp1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function (
        $async$errorCode,
        $async$result
      ) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new P._Future(
                $.Zone__current,
                type$._Future_nullable_Object
              );
              t2 = type$.Object;
              t2 = P.List_List$of(
                J.map$1$1$ax($arguments, F.value1__wrapValue$closure(), t2),
                true,
                t2
              );
              t2.push(
                P.allowInterop(
                  new B._parseFunctions___closure(
                    new P._AsyncCompleter(
                      t1,
                      type$._AsyncCompleter_nullable_Object
                    )
                  )
                )
              );
              result = J.apply$2$x(
                type$.JSFunction._as($async$self.callback),
                $async$self.context,
                t2
              );
              $async$temp1 = F;
              $async$goto = H._asBool($.$get$_isUndefined().call$1(result))
                ? 3
                : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return P._asyncAwait(t1, $async$call$1);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$result = result;
            case 4:
              // join
              $async$returnValue = $async$temp1.unwrapValue($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 122,
  };
  B._parseFunctions___closure.prototype = {
    call$1(result) {
      return this.completer.complete$1(result);
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 126,
  };
  O.NullExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitNullExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return 'null';
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  O.nullConstructor_closure.prototype = {
    call$0() {
      var $constructor = P.allowInterop(new O.nullConstructor__closure());
      B.injectSuperclass(C.C__SassNull, $constructor);
      B.setClassName(C.C__SassNull, 'SassNull');
      B.forwardToString($constructor);
      $constructor.NULL = C.C__SassNull;
      C.C__SassNull.toString = P.allowInterop(
        new O.nullConstructor__closure0()
      );
      return $constructor;
    },
    $signature: 153,
  };
  O.nullConstructor__closure.prototype = {
    call$1(_) {
      throw H.wrapException(
        "new sass.types.Null() isn't allowed. Use sass.types.Null.NULL instead."
      );
    },
    call$0() {
      return this.call$1(null);
    },
    'call*': 'call$1',
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 145,
  };
  O.nullConstructor__closure0.prototype = {
    call$0() {
      return 'null';
    },
    $signature: 28,
  };
  O._SassNull0.prototype = {
    get$isTruthy() {
      return false;
    },
    get$isBlank() {
      return true;
    },
    get$realNull() {
      return null;
    },
    accept$1$1(visitor) {
      if (visitor._inspect) visitor._buffer.write$1(0, 'null');
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unaryNot$0() {
      return C.SassBoolean_true;
    },
  };
  T.NumberExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitNumberExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = H.S(this.value),
        t2 = this.unit;
      return t1 + (t2 == null ? '' : t2);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  T._NodeSassNumber.prototype = {};
  T.numberConstructor_closure.prototype = {
    call$4(thisArg, value, unit, dartValue) {
      var t1;
      if (dartValue == null) {
        value.toString;
        t1 = T._parseNumber(value, unit);
      } else t1 = dartValue;
      J.set$dartValue$x(thisArg, t1);
    },
    call$2(thisArg, value) {
      return this.call$4(thisArg, value, null, null);
    },
    call$3(thisArg, value, unit) {
      return this.call$4(thisArg, value, unit, null);
    },
    'call*': 'call$4',
    $requiredArgCount: 2,
    $defaultValues() {
      return [null, null];
    },
    $signature: 427,
  };
  T.numberConstructor_closure0.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).value;
    },
    $signature: 428,
  };
  T.numberConstructor_closure1.prototype = {
    call$2(thisArg, value) {
      var t1 = J.getInterceptor$x(thisArg),
        t2 = t1.get$dartValue(thisArg).get$numeratorUnits();
      t1.set$dartValue(
        thisArg,
        T.SassNumber_SassNumber$withUnits0(
          value,
          t1.get$dartValue(thisArg).get$denominatorUnits(),
          t2
        )
      );
    },
    $signature: 429,
  };
  T.numberConstructor_closure2.prototype = {
    call$1(thisArg) {
      var t1 = J.getInterceptor$x(thisArg),
        t2 = J.join$1$ax(t1.get$dartValue(thisArg).get$numeratorUnits(), '*');
      return (
        t2 +
        (t1.get$dartValue(thisArg).get$denominatorUnits().length === 0
          ? ''
          : '/') +
        C.JSArray_methods.join$1(
          t1.get$dartValue(thisArg).get$denominatorUnits(),
          '*'
        )
      );
    },
    $signature: 157,
  };
  T.numberConstructor_closure3.prototype = {
    call$2(thisArg, unit) {
      var t1 = J.getInterceptor$x(thisArg);
      t1.set$dartValue(
        thisArg,
        T._parseNumber(t1.get$dartValue(thisArg).value, unit)
      );
    },
    $signature: 431,
  };
  T.numberConstructor_closure4.prototype = {
    call$1(thisArg) {
      return N.serializeValue(J.get$dartValue$x(thisArg), true, true);
    },
    $signature: 157,
  };
  T._parseNumber_closure.prototype = {
    call$1(unit) {
      return unit.length === 0;
    },
    $signature: 6,
  };
  T._parseNumber_closure0.prototype = {
    call$1(unit) {
      return unit.length === 0;
    },
    $signature: 6,
  };
  T.SassNumber0.prototype = {
    get$unitString() {
      var _this = this;
      return _this.get$hasUnits()
        ? _this._number1$_unitString$2(
            _this.get$numeratorUnits(),
            _this.get$denominatorUnits()
          )
        : '';
    },
    accept$1$1(visitor) {
      return visitor.visitNumber$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    withoutSlash$0() {
      var _this = this;
      return _this.asSlash == null ? _this : _this.withValue$1(_this.value);
    },
    assertNumber$1($name) {
      return this;
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertInt$1($name) {
      var t1 = this.value,
        integer = T.fuzzyIsInt0(t1) ? C.JSNumber_methods.round$0(t1) : null;
      if (integer != null) return integer;
      throw H.wrapException(
        this._number1$_exception$2(
          this.toString$0(0) + ' is not an int.',
          $name
        )
      );
    },
    assertInt$0() {
      return this.assertInt$1(null);
    },
    valueInRange$3(min, max, $name) {
      var _this = this,
        result = T.fuzzyCheckRange0(_this.value, min, max);
      if (result != null) return result;
      throw H.wrapException(
        _this._number1$_exception$2(
          'Expected ' +
            _this.toString$0(0) +
            ' to be within ' +
            min +
            _this.get$unitString() +
            ' and ' +
            max +
            _this.get$unitString() +
            '.',
          $name
        )
      );
    },
    assertUnit$2(unit, $name) {
      if (this.hasUnit$1(unit)) return;
      throw H.wrapException(
        this._number1$_exception$2(
          'Expected ' + this.toString$0(0) + ' to have unit "' + unit + '".',
          $name
        )
      );
    },
    assertNoUnits$1($name) {
      if (!this.get$hasUnits()) return;
      throw H.wrapException(
        this._number1$_exception$2(
          'Expected ' + this.toString$0(0) + ' to have no units.',
          $name
        )
      );
    },
    coerceValueToMatch$1(other) {
      return this._number1$_coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        other.get$numeratorUnits(),
        other.get$denominatorUnits(),
        true,
        null,
        other,
        null
      );
    },
    convertValueToMatch$3(other, $name, otherName) {
      return this._number1$_coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        other.get$numeratorUnits(),
        other.get$denominatorUnits(),
        false,
        $name,
        other,
        otherName
      );
    },
    coerce$3(newNumerators, newDenominators, $name) {
      return T.SassNumber_SassNumber$withUnits0(
        this.coerceValue$3(newNumerators, newDenominators, $name),
        newDenominators,
        newNumerators
      );
    },
    coerce$2(newNumerators, newDenominators) {
      return this.coerce$3(newNumerators, newDenominators, null);
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this._number1$_coerceOrConvertValue$4$coerceUnitless$name(
        newNumerators,
        newDenominators,
        true,
        $name
      );
    },
    coerceValueToUnit$2(unit, $name) {
      var t1 = type$.JSArray_String;
      return this.coerceValue$3(
        H._setArrayType([unit], t1),
        H._setArrayType([], t1),
        $name
      );
    },
    _number1$_coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
      newNumerators,
      newDenominators,
      coerceUnitless,
      $name,
      other,
      otherName
    ) {
      var t1,
        otherHasUnits,
        t2,
        _compatibilityException,
        oldNumerators,
        oldDenominators,
        _i,
        _this = this,
        _box_0 = {};
      if (
        C.C_ListEquality.equals$2(
          0,
          _this.get$numeratorUnits(),
          newNumerators
        ) &&
        C.C_ListEquality.equals$2(
          0,
          _this.get$denominatorUnits(),
          newDenominators
        )
      )
        return _this.value;
      t1 = J.getInterceptor$asx(newNumerators);
      otherHasUnits =
        t1.get$isNotEmpty(newNumerators) || newDenominators.length !== 0;
      if (coerceUnitless) t2 = !_this.get$hasUnits() || !otherHasUnits;
      else t2 = false;
      if (t2) return _this.value;
      _compatibilityException = new T.SassNumber__coerceOrConvertValue__compatibilityException0(
        _this,
        other,
        otherName,
        otherHasUnits,
        $name,
        newNumerators,
        newDenominators
      );
      _box_0.value = _this.value;
      oldNumerators = J.toList$0$ax(_this.get$numeratorUnits());
      for (t1 = t1.get$iterator(newNumerators); t1.moveNext$0(); )
        B.removeFirstWhere0(
          oldNumerators,
          new T.SassNumber__coerceOrConvertValue_closure3(
            _box_0,
            _this,
            t1.get$current()
          ),
          new T.SassNumber__coerceOrConvertValue_closure4(
            _compatibilityException
          )
        );
      t1 = _this.get$denominatorUnits();
      oldDenominators = H._setArrayType(t1.slice(0), H._arrayInstanceType(t1));
      for (
        t1 = newDenominators.length, _i = 0;
        _i < newDenominators.length;
        newDenominators.length === t1 ||
          (0, H.throwConcurrentModificationError)(newDenominators),
          ++_i
      )
        B.removeFirstWhere0(
          oldDenominators,
          new T.SassNumber__coerceOrConvertValue_closure5(
            _box_0,
            _this,
            newDenominators[_i]
          ),
          new T.SassNumber__coerceOrConvertValue_closure6(
            _compatibilityException
          )
        );
      if (oldNumerators.length !== 0 || oldDenominators.length !== 0)
        throw H.wrapException(_compatibilityException.call$0());
      return _box_0.value;
    },
    _number1$_coerceOrConvertValue$4$coerceUnitless$name(
      newNumerators,
      newDenominators,
      coerceUnitless,
      $name
    ) {
      return this._number1$_coerceOrConvertValue$6$coerceUnitless$name$other$otherName(
        newNumerators,
        newDenominators,
        coerceUnitless,
        $name,
        null,
        null
      );
    },
    isComparableTo$1(other) {
      var exception;
      if (!this.get$hasUnits() || !other.get$hasUnits()) return true;
      try {
        this.greaterThan$1(other);
        return true;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassScriptException0)
          return false;
        else throw exception;
      }
    },
    greaterThan$1(other) {
      if (other instanceof T.SassNumber0)
        return this._number1$_coerceUnits$2(
          other,
          T.number2__fuzzyGreaterThan$closure()
        )
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' > ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    greaterThanOrEquals$1(other) {
      if (other instanceof T.SassNumber0)
        return this._number1$_coerceUnits$2(
          other,
          T.number2__fuzzyGreaterThanOrEquals$closure()
        )
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' >= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThan$1(other) {
      if (other instanceof T.SassNumber0)
        return this._number1$_coerceUnits$2(
          other,
          T.number2__fuzzyLessThan$closure()
        )
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' < ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThanOrEquals$1(other) {
      if (other instanceof T.SassNumber0)
        return this._number1$_coerceUnits$2(
          other,
          T.number2__fuzzyLessThanOrEquals$closure()
        )
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' <= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    modulo$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber0)
        return _this.withValue$1(
          _this._number1$_coerceUnits$2(other, _this.get$moduloLikeSass())
        );
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' % ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    moduloLikeSass$2(num1, num2) {
      var result;
      if (num2 > 0) return C.JSNumber_methods.$mod(num1, num2);
      if (num2 === 0) return 0 / 0;
      result = C.JSNumber_methods.$mod(num1, num2);
      return result === 0 ? 0 : result + num2;
    },
    plus$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber0)
        return _this.withValue$1(
          _this._number1$_coerceUnits$2(other, new T.SassNumber_plus_closure0())
        );
      if (!(other instanceof K.SassColor0))
        return _this.super$Value$plus0(other);
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' + ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    minus$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber0)
        return _this.withValue$1(
          _this._number1$_coerceUnits$2(
            other,
            new T.SassNumber_minus_closure0()
          )
        );
      if (!(other instanceof K.SassColor0))
        return _this.super$Value$minus0(other);
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' - ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    times$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber0) {
        if (!other.get$hasUnits())
          return _this.withValue$1(_this.value * other.value);
        return _this.multiplyUnits$3(
          _this.value * other.value,
          other.get$numeratorUnits(),
          other.get$denominatorUnits()
        );
      }
      throw H.wrapException(
        E.SassScriptException$0(
          'Undefined operation "' +
            _this.toString$0(0) +
            ' * ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    dividedBy$1(other) {
      var _this = this;
      if (other instanceof T.SassNumber0) {
        if (!other.get$hasUnits())
          return _this.withValue$1(_this.value / other.value);
        return _this.multiplyUnits$3(
          _this.value / other.value,
          other.get$denominatorUnits(),
          other.get$numeratorUnits()
        );
      }
      return _this.super$Value$dividedBy0(other);
    },
    unaryPlus$0() {
      return this;
    },
    _number1$_coerceUnits$1$2(other, operation) {
      var t1, exception;
      try {
        t1 = operation.call$2(this.value, other.coerceValueToMatch$1(this));
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassScriptException0) {
          this.coerceValueToMatch$1(other);
          throw exception;
        } else throw exception;
      }
    },
    _number1$_coerceUnits$2(other, operation) {
      return this._number1$_coerceUnits$1$2(other, operation, type$.dynamic);
    },
    multiplyUnits$3(value, otherNumerators, otherDenominators) {
      var newNumerators,
        mutableOtherDenominators,
        t1,
        t2,
        mutableDenominatorUnits,
        _this = this,
        _box_0 = {};
      _box_0.value = value;
      if (J.get$isEmpty$asx(_this.get$numeratorUnits())) {
        if (
          J.get$isEmpty$asx(otherDenominators) &&
          !_this._number1$_areAnyConvertible$2(
            _this.get$denominatorUnits(),
            otherNumerators
          )
        )
          return T.SassNumber_SassNumber$withUnits0(
            value,
            _this.get$denominatorUnits(),
            otherNumerators
          );
        else if (_this.get$denominatorUnits().length === 0)
          return T.SassNumber_SassNumber$withUnits0(
            value,
            otherDenominators,
            otherNumerators
          );
      } else if (J.get$isEmpty$asx(otherNumerators))
        if (J.get$isEmpty$asx(otherDenominators))
          return T.SassNumber_SassNumber$withUnits0(
            value,
            otherDenominators,
            _this.get$numeratorUnits()
          );
        else if (
          _this.get$denominatorUnits().length === 0 &&
          !_this._number1$_areAnyConvertible$2(
            _this.get$numeratorUnits(),
            otherDenominators
          )
        )
          return T.SassNumber_SassNumber$withUnits0(
            value,
            otherDenominators,
            _this.get$numeratorUnits()
          );
      newNumerators = H._setArrayType([], type$.JSArray_String);
      mutableOtherDenominators = J.toList$0$ax(otherDenominators);
      for (
        t1 = J.get$iterator$ax(_this.get$numeratorUnits());
        t1.moveNext$0();

      ) {
        t2 = t1.get$current();
        B.removeFirstWhere0(
          mutableOtherDenominators,
          new T.SassNumber_multiplyUnits_closure3(_box_0, _this, t2),
          new T.SassNumber_multiplyUnits_closure4(newNumerators, t2)
        );
      }
      t1 = _this.get$denominatorUnits();
      mutableDenominatorUnits = H._setArrayType(
        t1.slice(0),
        H._arrayInstanceType(t1)
      );
      for (t1 = J.get$iterator$ax(otherNumerators); t1.moveNext$0(); ) {
        t2 = t1.get$current();
        B.removeFirstWhere0(
          mutableDenominatorUnits,
          new T.SassNumber_multiplyUnits_closure5(_box_0, _this, t2),
          new T.SassNumber_multiplyUnits_closure6(newNumerators, t2)
        );
      }
      t1 = _box_0.value;
      C.JSArray_methods.addAll$1(
        mutableDenominatorUnits,
        mutableOtherDenominators
      );
      return T.SassNumber_SassNumber$withUnits0(
        t1,
        mutableDenominatorUnits,
        newNumerators
      );
    },
    _number1$_areAnyConvertible$2(units1, units2) {
      return J.any$1$ax(
        units1,
        new T.SassNumber__areAnyConvertible_closure0(units2)
      );
    },
    conversionFactor$2(unit1, unit2) {
      var innerMap;
      if (unit1 === unit2) return 1;
      innerMap = C.Map_K2BWj.$index(0, unit1);
      if (innerMap == null) return null;
      return innerMap.$index(0, unit2);
    },
    _number1$_unitString$2(numerators, denominators) {
      var t1 = J.getInterceptor$asx(numerators);
      if (t1.get$isEmpty(numerators)) {
        t1 = denominators.length;
        if (t1 === 0) return 'no units';
        if (t1 === 1)
          return J.$add$ansx(C.JSArray_methods.get$single(denominators), '^-1');
        return '(' + C.JSArray_methods.join$1(denominators, '*') + ')^-1';
      }
      if (denominators.length === 0) return t1.join$1(numerators, '*');
      return (
        t1.join$1(numerators, '*') +
        '/' +
        C.JSArray_methods.join$1(denominators, '*')
      );
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      if (other instanceof T.SassNumber0) {
        if (
          J.get$length$asx(_this.get$numeratorUnits()) !==
            J.get$length$asx(other.get$numeratorUnits()) ||
          _this.get$denominatorUnits().length !==
            other.get$denominatorUnits().length
        )
          return false;
        if (!_this.get$hasUnits())
          return Math.abs(_this.value - other.value) < $.$get$epsilon0();
        if (
          !C.C_ListEquality.equals$2(
            0,
            _this._number1$_canonicalizeUnitList$1(_this.get$numeratorUnits()),
            _this._number1$_canonicalizeUnitList$1(other.get$numeratorUnits())
          ) ||
          !C.C_ListEquality.equals$2(
            0,
            _this._number1$_canonicalizeUnitList$1(
              _this.get$denominatorUnits()
            ),
            _this._number1$_canonicalizeUnitList$1(other.get$denominatorUnits())
          )
        )
          return false;
        return (
          Math.abs(
            (_this.value *
              _this._number1$_canonicalMultiplier$1(
                _this.get$numeratorUnits()
              )) /
              _this._number1$_canonicalMultiplier$1(
                _this.get$denominatorUnits()
              ) -
              (other.value *
                _this._number1$_canonicalMultiplier$1(
                  other.get$numeratorUnits()
                )) /
                _this._number1$_canonicalMultiplier$1(
                  other.get$denominatorUnits()
                )
          ) < $.$get$epsilon0()
        );
      } else return false;
    },
    get$hashCode(_) {
      var _this = this;
      return T.fuzzyHashCode0(
        (_this.value *
          _this._number1$_canonicalMultiplier$1(_this.get$numeratorUnits())) /
          _this._number1$_canonicalMultiplier$1(_this.get$denominatorUnits())
      );
    },
    _number1$_canonicalizeUnitList$1(units) {
      var type,
        t1 = J.getInterceptor$asx(units);
      if (t1.get$isEmpty(units)) return units;
      if (t1.get$length(units) === 1) {
        type = $.$get$_typesByUnit0().$index(0, t1.get$first(units));
        if (type == null) t1 = units;
        else {
          t1 = C.Map_U8AHF.$index(0, type);
          t1.toString;
          t1 = H._setArrayType(
            [C.JSArray_methods.get$first(t1)],
            type$.JSArray_String
          );
        }
        return t1;
      }
      t1 = t1.map$1$1(
        units,
        new T.SassNumber__canonicalizeUnitList_closure0(),
        type$.String
      );
      t1 = P.List_List$of(t1, true, t1.$ti._eval$1('ListIterable.E'));
      C.JSArray_methods.sort$0(t1);
      return t1;
    },
    _number1$_canonicalMultiplier$1(units) {
      return J.fold$2$ax(
        units,
        1,
        new T.SassNumber__canonicalMultiplier_closure0(this)
      );
    },
    canonicalMultiplierForUnit$1(unit) {
      var t1,
        innerMap = C.Map_K2BWj.$index(0, unit);
      if (innerMap == null) t1 = 1;
      else {
        t1 = innerMap.get$values(innerMap);
        t1 = 1 / t1.get$first(t1);
      }
      return t1;
    },
    _number1$_exception$2(message, $name) {
      return new E.SassScriptException0(
        $name == null ? message : '$' + $name + ': ' + message
      );
    },
  };
  T.SassNumber__coerceOrConvertValue__compatibilityException0.prototype = {
    call$0() {
      var t2,
        t3,
        message,
        t4,
        type,
        unit,
        _this = this,
        t1 = _this.other;
      if (t1 != null) {
        t2 = _this.$this;
        t3 = t2.toString$0(0) + ' and';
        message = new P.StringBuffer(t3);
        t4 = _this.otherName;
        if (t4 != null) t3 = message._contents = t3 + (' $' + t4 + ':');
        t1 = t3 + (' ' + t1.toString$0(0) + ' have incompatible units');
        message._contents = t1;
        if (!t2.get$hasUnits() || !_this.otherHasUnits)
          message._contents = t1 + " (one has units and the other doesn't)";
        t1 = message.toString$0(0) + '.';
        t2 = _this.name;
        return new E.SassScriptException0(
          t2 == null ? t1 : '$' + t2 + ': ' + t1
        );
      } else if (!_this.otherHasUnits) {
        t1 = 'Expected ' + _this.$this.toString$0(0) + ' to have no units.';
        t2 = _this.name;
        return new E.SassScriptException0(
          t2 == null ? t1 : '$' + t2 + ': ' + t1
        );
      } else {
        t1 = _this.newNumerators;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) === 1 && _this.newDenominators.length === 0) {
          type = $.$get$_typesByUnit0().$index(0, t2.get$first(t1));
          if (type != null) {
            t1 = 'Expected ' + _this.$this.toString$0(0) + ' to have ';
            t1 =
              t1 +
              (C.JSArray_methods.contains$1(
                H._setArrayType([97, 101, 105, 111, 117], type$.JSArray_int),
                C.JSString_methods._codeUnitAt$1(type, 0)
              )
                ? 'an ' + type
                : 'a ' + type) +
              ' unit (';
            t2 = C.Map_U8AHF.$index(0, type);
            t2.toString;
            t2 = t1 + C.JSArray_methods.join$1(t2, ', ') + ').';
            t1 = _this.name;
            return new E.SassScriptException0(
              t1 == null ? t2 : '$' + t1 + ': ' + t2
            );
          }
        }
        t3 = _this.newDenominators;
        unit = B.pluralize0('unit', t2.get$length(t1) + t3.length, null);
        t2 = _this.$this;
        t3 =
          'Expected ' +
          t2.toString$0(0) +
          ' to have ' +
          unit +
          ' ' +
          t2._number1$_unitString$2(t1, t3) +
          '.';
        t1 = _this.name;
        return new E.SassScriptException0(
          t1 == null ? t3 : '$' + t1 + ': ' + t3
        );
      }
    },
    $signature: 432,
  };
  T.SassNumber__coerceOrConvertValue_closure3.prototype = {
    call$1(oldNumerator) {
      var factor = this.$this.conversionFactor$2(
        this.newNumerator,
        oldNumerator
      );
      if (factor == null) return false;
      this._box_0.value *= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber__coerceOrConvertValue_closure4.prototype = {
    call$0() {
      return H.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0,
  };
  T.SassNumber__coerceOrConvertValue_closure5.prototype = {
    call$1(oldDenominator) {
      var factor = this.$this.conversionFactor$2(
        this.newDenominator,
        oldDenominator
      );
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber__coerceOrConvertValue_closure6.prototype = {
    call$0() {
      return H.throwExpression(this._compatibilityException.call$0());
    },
    $signature: 0,
  };
  T.SassNumber_plus_closure0.prototype = {
    call$2(num1, num2) {
      return num1 + num2;
    },
    $signature: 43,
  };
  T.SassNumber_minus_closure0.prototype = {
    call$2(num1, num2) {
      return num1 - num2;
    },
    $signature: 43,
  };
  T.SassNumber_multiplyUnits_closure3.prototype = {
    call$1(denominator) {
      var factor = this.$this.conversionFactor$2(this.numerator, denominator);
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber_multiplyUnits_closure4.prototype = {
    call$0() {
      return this.newNumerators.push(this.numerator);
    },
    $signature: 0,
  };
  T.SassNumber_multiplyUnits_closure5.prototype = {
    call$1(denominator) {
      var factor = this.$this.conversionFactor$2(this.numerator, denominator);
      if (factor == null) return false;
      this._box_0.value /= factor;
      return true;
    },
    $signature: 6,
  };
  T.SassNumber_multiplyUnits_closure6.prototype = {
    call$0() {
      return this.newNumerators.push(this.numerator);
    },
    $signature: 0,
  };
  T.SassNumber__areAnyConvertible_closure0.prototype = {
    call$1(unit1) {
      var innerMap = C.Map_K2BWj.$index(0, unit1);
      if (innerMap == null) return J.contains$1$asx(this.units2, unit1);
      return J.any$1$ax(this.units2, innerMap.get$containsKey());
    },
    $signature: 6,
  };
  T.SassNumber__canonicalizeUnitList_closure0.prototype = {
    call$1(unit) {
      var t1,
        type = $.$get$_typesByUnit0().$index(0, unit);
      if (type == null) t1 = unit;
      else {
        t1 = C.Map_U8AHF.$index(0, type);
        t1.toString;
        t1 = C.JSArray_methods.get$first(t1);
      }
      return t1;
    },
    $signature: 5,
  };
  T.SassNumber__canonicalMultiplier_closure0.prototype = {
    call$2(multiplier, unit) {
      return multiplier * this.$this.canonicalMultiplierForUnit$1(unit);
    },
    $signature: 203,
  };
  U.SupportsOperation0.prototype = {
    toString$0(_) {
      var _this = this;
      return (
        _this._operation0$_parenthesize$1(_this.left) +
        ' ' +
        _this.operator +
        ' ' +
        _this._operation0$_parenthesize$1(_this.right)
      );
    },
    _operation0$_parenthesize$1(condition) {
      var t1;
      if (!(condition instanceof M.SupportsNegation0))
        t1 =
          condition instanceof U.SupportsOperation0 &&
          condition.operator === this.operator;
      else t1 = true;
      return t1 ? '(' + condition.toString$0(0) + ')' : condition.toString$0(0);
    },
    $isAstNode0: 1,
    $isSupportsCondition0: 1,
    get$span() {
      return this.span;
    },
  };
  M.ParentSelector0.prototype = {
    accept$1$1(visitor) {
      var t2,
        t1 = visitor._buffer;
      t1.writeCharCode$1(38);
      t2 = this.suffix;
      if (t2 != null) t1.write$1(0, t2);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      return H.throwExpression(
        P.UnsupportedError$("& doesn't support unification.")
      );
    },
  };
  M.ParentStatement0.prototype = { $isAstNode0: 1, $isStatement0: 1 };
  M.ParentStatement_closure0.prototype = {
    call$1(child) {
      var t1;
      if (!(child instanceof Z.VariableDeclaration0))
        if (!(child instanceof M.FunctionRule0))
          if (!(child instanceof T.MixinRule0))
            t1 =
              child instanceof B.ImportRule0 &&
              C.JSArray_methods.any$1(
                child.imports,
                new M.ParentStatement__closure0()
              );
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    $signature: 142,
  };
  M.ParentStatement__closure0.prototype = {
    call$1($import) {
      return $import instanceof B.DynamicImport0;
    },
    $signature: 133,
  };
  T.ParenthesizedExpression0.prototype = {
    accept$1$1(visitor) {
      return this.expression.accept$1(visitor);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.expression.toString$0(0);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  G.Parser1.prototype = {
    _parser0$_parseIdentifier$0() {
      return this.wrapSpanFormatException$1(
        new G.Parser__parseIdentifier_closure0(this)
      );
    },
    whitespace$0() {
      do this.whitespaceWithoutComments$0();
      while (this.scanComment$0());
    },
    whitespaceWithoutComments$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    spaces$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9;
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    scanComment$0() {
      var next,
        t1 = this.scanner;
      if (t1.peekChar$0() !== 47) return false;
      next = t1.peekChar$1(1);
      if (next === 47) {
        this.silentComment$0();
        return true;
      } else if (next === 42) {
        this.loudComment$0();
        return true;
      } else return false;
    },
    silentComment$0() {
      var t2,
        t3,
        t1 = this.scanner;
      t1.expect$1('//');
      t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
        } else t3 = false;
        if (!t3) break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1('/*');
      for (; true; ) {
        if (t1.readChar$0() !== 42) continue;
        do next = t1.readChar$0();
        while (next === 42);
        if (next === 47) break;
      }
    },
    identifier$2$normalize$unit(normalize, unit) {
      var t2,
        first,
        _this = this,
        _s20_ = 'Expected identifier.',
        text = new P.StringBuffer(''),
        t1 = _this.scanner;
      if (t1.scanChar$1(45)) {
        t2 = text._contents = '' + H.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          text._contents = t2 + H.Primitives_stringFromCharCode(45);
          _this._parser0$_identifierBody$3$normalize$unit(
            text,
            normalize,
            unit
          );
          t1 = text._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      } else t2 = '';
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s20_);
      else if (normalize && first === 95) {
        t1.readChar$0();
        text._contents = t2 + H.Primitives_stringFromCharCode(45);
      } else if (first === 95 || T.isAlphabetic1(first) || first >= 128)
        text._contents = t2 + H.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        text._contents = t2 + H.S(_this.escape$1$identifierStart(true));
      else t1.error$1(0, _s20_);
      _this._parser0$_identifierBody$3$normalize$unit(text, normalize, unit);
      t1 = text._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    identifier$0() {
      return this.identifier$2$normalize$unit(false, false);
    },
    identifier$1$normalize(normalize) {
      return this.identifier$2$normalize$unit(normalize, false);
    },
    identifier$1$unit(unit) {
      return this.identifier$2$normalize$unit(false, unit);
    },
    _parser0$_identifierBody$3$normalize$unit(text, normalize, unit) {
      var t1, next, second, t2;
      for (t1 = this.scanner; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (unit && next === 45) {
          second = t1.peekChar$1(1);
          if (second != null)
            if (second !== 46) t2 = second >= 48 && second <= 57;
            else t2 = true;
          else t2 = false;
          if (t2) break;
          text._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
        } else if (normalize && next === 95) {
          t1.readChar$0();
          text._contents += H.Primitives_stringFromCharCode(45);
        } else {
          if (next !== 95) {
            if (!(next >= 97 && next <= 122)) t2 = next >= 65 && next <= 90;
            else t2 = true;
            t2 = t2 || next >= 128;
          } else t2 = true;
          if (!t2) {
            t2 = next >= 48 && next <= 57;
            t2 = t2 || next === 45;
          } else t2 = true;
          if (t2)
            text._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 92) text._contents += H.S(this.escape$0());
          else break;
        }
      }
    },
    _parser0$_identifierBody$1(text) {
      return this._parser0$_identifierBody$3$normalize$unit(text, false, false);
    },
    string$0() {
      var buffer,
        next,
        t2,
        t1 = this.scanner,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(
          0,
          'Expected string.',
          t1._string_scanner$_position - 1
        );
      buffer = new P.StringBuffer('');
      for (; true; ) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(
            0,
            'Expected ' + H.Primitives_stringFromCharCode(quote) + '.'
          );
        else if (next === 92) {
          t2 = t1.peekChar$1(1);
          if (t2 === 10 || t2 === 13 || t2 === 12) {
            t1.readChar$0();
            t1.readChar$0();
          } else
            buffer._contents += H.Primitives_stringFromCharCode(
              B.consumeEscapedCharacter0(t1)
            );
        } else
          buffer._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    naturalNumber$0() {
      var number,
        t2,
        t1 = this.scanner,
        first = t1.readChar$0();
      if (!T.isDigit0(first))
        t1.error$2$position(
          0,
          'Expected digit.',
          t1._string_scanner$_position - 1
        );
      number = first - 48;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        number = number * 10 + (t1.readChar$0() - 48);
      }
      return number;
    },
    declarationValue$1$allowEmpty(allowEmpty) {
      var t1,
        t2,
        wroteNewline,
        next,
        start,
        end,
        t3,
        url,
        _this = this,
        buffer = new P.StringBuffer(''),
        brackets = H._setArrayType([], type$.JSArray_int);
      $label0$1: for (
        t1 = _this.scanner, t2 = _this.get$string(), wroteNewline = false;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            buffer._contents += H.S(_this.escape$1$identifierStart(true));
            wroteNewline = false;
            break;
          case 34:
          case 39:
            start = t1._string_scanner$_position;
            t2.call$0();
            end = t1._string_scanner$_position;
            buffer._contents += C.JSString_methods.substring$2(
              t1.string,
              start,
              end
            );
            wroteNewline = false;
            break;
          case 47:
            if (t1.peekChar$1(1) === 42) {
              t3 = _this.get$loudComment();
              start = t1._string_scanner$_position;
              t3.call$0();
              end = t1._string_scanner$_position;
              buffer._contents += C.JSString_methods.substring$2(
                t1.string,
                start,
                end
              );
            } else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
          case 32:
          case 9:
            if (!wroteNewline) {
              t3 = t1.peekChar$1(1);
              t3 = !(
                t3 === 32 ||
                t3 === 9 ||
                t3 === 10 ||
                t3 === 13 ||
                t3 === 12
              );
            } else t3 = true;
            if (t3) buffer._contents += H.Primitives_stringFromCharCode(32);
            t1.readChar$0();
            break;
          case 10:
          case 13:
          case 12:
            t3 = t1.peekChar$1(-1);
            if (!(t3 === 10 || t3 === 13 || t3 === 12))
              buffer._contents += '\n';
            t1.readChar$0();
            wroteNewline = true;
            break;
          case 40:
          case 123:
          case 91:
            next.toString;
            buffer._contents += H.Primitives_stringFromCharCode(next);
            brackets.push(T.opposite0(t1.readChar$0()));
            wroteNewline = false;
            break;
          case 41:
          case 125:
          case 93:
            if (brackets.length === 0) break $label0$1;
            next.toString;
            buffer._contents += H.Primitives_stringFromCharCode(next);
            t1.expectChar$1(brackets.pop());
            wroteNewline = false;
            break;
          case 59:
            if (brackets.length === 0) break $label0$1;
            buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            break;
          case 117:
          case 85:
            url = _this.tryUrl$0();
            if (url != null) buffer._contents += url;
            else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              buffer._contents += _this.identifier$0();
            else
              buffer._contents += H.Primitives_stringFromCharCode(
                t1.readChar$0()
              );
            wroteNewline = false;
            break;
        }
      }
      if (brackets.length !== 0)
        t1.expectChar$1(C.JSArray_methods.get$last(brackets));
      if (!allowEmpty && buffer._contents.length === 0)
        t1.error$1(0, 'Expected token.');
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    declarationValue$0() {
      return this.declarationValue$1$allowEmpty(false);
    },
    tryUrl$0() {
      var buffer,
        next,
        t2,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (!_this.scanIdentifier$1('url')) return null;
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      _this.whitespace$0();
      buffer = new P.StringBuffer('');
      buffer._contents = '' + 'url(';
      for (; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (next === 92) buffer._contents += H.S(_this.escape$0());
        else {
          if (next !== 37)
            if (next !== 38)
              if (next !== 35) t2 = (next >= 42 && next <= 126) || next >= 128;
              else t2 = true;
            else t2 = true;
          else t2 = true;
          if (t2)
            buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
          else if (
            next === 32 ||
            next === 9 ||
            next === 10 ||
            next === 13 ||
            next === 12
          ) {
            _this.whitespace$0();
            if (t1.peekChar$0() !== 41) break;
          } else if (next === 41) {
            t2 = buffer._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            return t2.charCodeAt(0) == 0 ? t2 : t2;
          } else break;
        }
      }
      t1.set$state(start);
      return null;
    },
    variableName$0() {
      this.scanner.expectChar$1(36);
      return this.identifier$1$normalize(true);
    },
    escape$1$identifierStart(identifierStart) {
      var value,
        first,
        i,
        next,
        t2,
        exception,
        _s25_ = 'Expected escape sequence.',
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      t1.expectChar$1(92);
      value = 0;
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s25_);
      else if (first === 10 || first === 13 || first === 12)
        t1.error$1(0, _s25_);
      else if (T.isHex0(first)) {
        for (i = 0; i < 6; ++i) {
          next = t1.peekChar$0();
          if (next == null || !T.isHex0(next)) break;
          value *= 16;
          value += T.asHex0(t1.readChar$0());
        }
        this.scanCharIf$1(T.character0__isWhitespace$closure());
      } else value = t1.readChar$0();
      if (identifierStart) {
        t2 = value;
        t2 = t2 === 95 || T.isAlphabetic1(t2) || t2 >= 128;
      } else {
        t2 = value;
        t2 =
          t2 === 95 ||
          T.isAlphabetic1(t2) ||
          t2 >= 128 ||
          T.isDigit0(t2) ||
          t2 === 45;
      }
      if (t2)
        try {
          t2 = H.Primitives_stringFromCharCode(value);
          return t2;
        } catch (exception) {
          if (type$.RangeError._is(H.unwrapException(exception)))
            t1.error$3$length$position(
              0,
              'Invalid Unicode code point.',
              t1._string_scanner$_position - start,
              start
            );
          else throw exception;
        }
      else {
        if (!(value <= 31))
          if (!J.$eq$(value, 127)) t1 = identifierStart && T.isDigit0(value);
          else t1 = true;
        else t1 = true;
        if (t1) {
          t1 = '' + H.Primitives_stringFromCharCode(92);
          if (value > 15)
            t1 += H.Primitives_stringFromCharCode(
              T.hexCharFor0(C.JSNumber_methods._shrOtherPositive$1(value, 4))
            );
          t1 =
            t1 +
            H.Primitives_stringFromCharCode(T.hexCharFor0(value & 15)) +
            H.Primitives_stringFromCharCode(32);
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          return P.String_String$fromCharCodes(
            H._setArrayType([92, value], type$.JSArray_int),
            0,
            null
          );
      }
    },
    escape$0() {
      return this.escape$1$identifierStart(false);
    },
    scanCharIf$1(condition) {
      var t1 = this.scanner;
      if (!condition.call$1(t1.peekChar$0())) return false;
      t1.readChar$0();
      return true;
    },
    scanIdentChar$2$caseSensitive(char, caseSensitive) {
      var t3,
        t1 = new G.Parser_scanIdentChar_matches0(caseSensitive, char),
        t2 = this.scanner,
        next = t2.peekChar$0();
      if (next != null && t1.call$1(next)) {
        t2.readChar$0();
        return true;
      } else if (next === 92) {
        t3 = t2._string_scanner$_position;
        if (t1.call$1(B.consumeEscapedCharacter0(t2))) return true;
        t2.set$state(new S._SpanScannerState(t2, t3));
      }
      return false;
    },
    scanIdentChar$1(char) {
      return this.scanIdentChar$2$caseSensitive(char, false);
    },
    expectIdentChar$1(letter) {
      var t1;
      if (this.scanIdentChar$2$caseSensitive(letter, false)) return;
      t1 = this.scanner;
      t1.error$2$position(
        0,
        'Expected "' + H.Primitives_stringFromCharCode(letter) + '".',
        t1._string_scanner$_position
      );
    },
    lookingAtNumber$0() {
      var second,
        third,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (T.isDigit0(first)) return true;
      if (first === 46) {
        second = t1.peekChar$1(1);
        return second != null && T.isDigit0(second);
      } else if (first === 43 || first === 45) {
        second = t1.peekChar$1(1);
        if (second == null) return false;
        if (T.isDigit0(second)) return true;
        if (second !== 46) return false;
        third = t1.peekChar$1(2);
        return third != null && T.isDigit0(third);
      } else return false;
    },
    lookingAtIdentifier$1($forward) {
      var t1, first, second;
      if ($forward == null) $forward = 0;
      t1 = this.scanner;
      first = t1.peekChar$1($forward);
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic1(first) ||
        first >= 128 ||
        first === 92
      )
        return true;
      if (first !== 45) return false;
      second = t1.peekChar$1($forward + 1);
      if (second == null) return false;
      return (
        second === 95 ||
        T.isAlphabetic1(second) ||
        second >= 128 ||
        second === 92 ||
        second === 45
      );
    },
    lookingAtIdentifier$0() {
      return this.lookingAtIdentifier$1(null);
    },
    lookingAtIdentifierBody$0() {
      var t1,
        next = this.scanner.peekChar$0();
      if (next != null)
        t1 =
          next === 95 ||
          T.isAlphabetic1(next) ||
          next >= 128 ||
          T.isDigit0(next) ||
          next === 45 ||
          next === 92;
      else t1 = false;
      return t1;
    },
    scanIdentifier$2$caseSensitive(text, caseSensitive) {
      var t1,
        start,
        t2,
        t3,
        _this = this;
      if (!_this.lookingAtIdentifier$0()) return false;
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      for (
        t2 = new H.CodeUnits(text),
          t2 = new H.ListIterator(t2, t2.get$length(t2)),
          t3 = H._instanceType(t2)._precomputed1;
        t2.moveNext$0();

      ) {
        if (
          _this.scanIdentChar$2$caseSensitive(
            t3._as(t2.__internal$_current),
            caseSensitive
          )
        )
          continue;
        if (start._scanner !== t1)
          H.throwExpression(P.ArgumentError$(string$.The_gi, null));
        t2 = start.position;
        if (t2 < 0 || t2 > t1.string.length)
          H.throwExpression(P.ArgumentError$('Invalid position ' + t2, null));
        t1._string_scanner$_position = t2;
        t1._lastMatch = null;
        return false;
      }
      if (!_this.lookingAtIdentifierBody$0()) return true;
      t1.set$state(start);
      return false;
    },
    scanIdentifier$1(text) {
      return this.scanIdentifier$2$caseSensitive(text, false);
    },
    expectIdentifier$2$name(text, $name) {
      var t1, start, t2, t3;
      if ($name == null) $name = '"' + text + '"';
      t1 = this.scanner;
      start = t1._string_scanner$_position;
      for (
        t2 = new H.CodeUnits(text),
          t2 = new H.ListIterator(t2, t2.get$length(t2)),
          t3 = H._instanceType(t2)._precomputed1;
        t2.moveNext$0();

      ) {
        if (
          this.scanIdentChar$2$caseSensitive(
            t3._as(t2.__internal$_current),
            false
          )
        )
          continue;
        t1.error$2$position(0, 'Expected ' + $name + '.', start);
      }
      if (!this.lookingAtIdentifierBody$0()) return;
      t1.error$2$position(0, 'Expected ' + $name, start);
    },
    expectIdentifier$1(text) {
      return this.expectIdentifier$2$name(text, null);
    },
    rawText$1(consumer) {
      var t1 = this.scanner,
        start = t1._string_scanner$_position;
      consumer.call$0();
      return t1.substring$1(0, start);
    },
    error$2(_, message, span) {
      return H.throwExpression(
        E.StringScannerException$(message, span, this.scanner.string)
      );
    },
    withErrorMessage$1$2(message, callback) {
      var error, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          throw H.wrapException(
            G.SourceSpanFormatException$(
              message,
              error.get$span(),
              error.get$source()
            )
          );
        } else throw exception;
      }
    },
    withErrorMessage$2(message, callback) {
      return this.withErrorMessage$1$2(message, callback, type$.dynamic);
    },
    wrapSpanFormatException$1$1(callback) {
      var error, span, startPosition, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          span = error.get$span();
          if (
            B.startsWithIgnoreCase0(error._span_exception$_message, 'expected')
          ) {
            t1 = span;
            t1 = t1._end - t1._file$_start === 0;
          } else t1 = false;
          if (t1) {
            t1 = span;
            startPosition = this._parser0$_firstNewlineBefore$1(
              Y.FileLocation$_(t1.file, t1._file$_start).offset
            );
            t1 = span;
            if (
              !J.$eq$(
                startPosition,
                Y.FileLocation$_(t1.file, t1._file$_start).offset
              )
            )
              span = span.file.span$2(startPosition, startPosition);
          }
          throw H.wrapException(
            E.SassFormatException$0(error._span_exception$_message, span)
          );
        } else throw exception;
      }
    },
    wrapSpanFormatException$1(callback) {
      return this.wrapSpanFormatException$1$1(callback, type$.dynamic);
    },
    _parser0$_firstNewlineBefore$1(position) {
      var t1,
        lastNewline,
        codeUnit,
        index = position - 1;
      for (t1 = this.scanner.string, lastNewline = null; index >= 0; ) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
        if (
          !(
            codeUnit === 32 ||
            codeUnit === 9 ||
            codeUnit === 10 ||
            codeUnit === 13 ||
            codeUnit === 12
          )
        )
          return lastNewline == null ? position : lastNewline;
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12)
          lastNewline = index;
        --index;
      }
      return position;
    },
  };
  G.Parser__parseIdentifier_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        result = t1.identifier$0();
      t1.scanner.expectDone$0();
      return result;
    },
    $signature: 28,
  };
  G.Parser_scanIdentChar_matches0.prototype = {
    call$1(actual) {
      var t1 = this.char;
      return this.caseSensitive
        ? actual === t1
        : T.characterEqualsIgnoreCase0(t1, actual);
    },
    $signature: 46,
  };
  N.PlaceholderSelector0.prototype = {
    get$isInvisible() {
      return true;
    },
    accept$1$1(visitor) {
      var t1 = visitor._buffer;
      t1.writeCharCode$1(37);
      t1.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      return new N.PlaceholderSelector0(this.name + suffix);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof N.PlaceholderSelector0 && other.name === this.name
      );
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
  };
  L.PlainCssCallable0.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof L.PlainCssCallable0 && this.name === other.name;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.name);
    },
    $isAsyncCallable0: 1,
    get$name(receiver) {
      return this.name;
    },
  };
  F.PrefixedMapView0.prototype = {
    get$keys(_) {
      return new F._PrefixedKeys0(this);
    },
    get$length(_) {
      var t1 = this._prefixed_map_view0$_map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._prefixed_map_view0$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._prefixed_map_view0$_map;
      return t1.get$isNotEmpty(t1);
    },
    $index(_, key) {
      return typeof key == 'string' &&
        C.JSString_methods.startsWith$1(key, this._prefixed_map_view0$_prefix)
        ? this._prefixed_map_view0$_map.$index(
            0,
            J.substring$1$s(key, this._prefixed_map_view0$_prefix.length)
          )
        : null;
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        C.JSString_methods.startsWith$1(
          key,
          this._prefixed_map_view0$_prefix
        ) &&
        this._prefixed_map_view0$_map.containsKey$1(
          J.substring$1$s(key, this._prefixed_map_view0$_prefix.length)
        )
      );
    },
  };
  F._PrefixedKeys0.prototype = {
    get$length(_) {
      var t1 = this._prefixed_map_view0$_view._prefixed_map_view0$_map;
      return t1.get$length(t1);
    },
    get$iterator(_) {
      var t1 = this._prefixed_map_view0$_view._prefixed_map_view0$_map;
      t1 = J.map$1$1$ax(
        t1.get$keys(t1),
        new F._PrefixedKeys_iterator_closure0(this),
        type$.String
      );
      return t1.get$iterator(t1);
    },
    contains$1(_, key) {
      return this._prefixed_map_view0$_view.containsKey$1(key);
    },
  };
  F._PrefixedKeys_iterator_closure0.prototype = {
    call$1(key) {
      return (
        this.$this._prefixed_map_view0$_view._prefixed_map_view0$_prefix + key
      );
    },
    $signature: 5,
  };
  D.PseudoSelector0.prototype = {
    get$minSpecificity() {
      if (this._pseudo0$_minSpecificity == null)
        this._pseudo0$_computeSpecificity$0();
      var t1 = this._pseudo0$_minSpecificity;
      t1.toString;
      return t1;
    },
    get$maxSpecificity() {
      if (this._pseudo0$_maxSpecificity == null)
        this._pseudo0$_computeSpecificity$0();
      var t1 = this._pseudo0$_maxSpecificity;
      t1.toString;
      return t1;
    },
    get$isInvisible() {
      var selector = this.selector;
      if (selector == null) return false;
      return this.name !== 'not' && selector.get$isInvisible();
    },
    addSuffix$1(suffix) {
      var _this = this;
      if (_this.argument != null || _this.selector != null)
        _this.super$SimpleSelector$addSuffix0(suffix);
      return D.PseudoSelector$0(
        _this.name + suffix,
        null,
        !_this.isClass,
        null
      );
    },
    unify$1(compound) {
      var result,
        t1,
        t2,
        addedThis,
        _i,
        simple,
        _this = this;
      if (
        compound.length === 1 &&
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector0
      )
        return C.JSArray_methods.get$first(compound).unify$1(
          H._setArrayType([_this], type$.JSArray_SimpleSelector_2)
        );
      if (C.JSArray_methods.contains$1(compound, _this)) return compound;
      result = H._setArrayType([], type$.JSArray_SimpleSelector_2);
      for (
        t1 = compound.length, t2 = !_this.isClass, addedThis = false, _i = 0;
        _i < compound.length;
        compound.length === t1 ||
          (0, H.throwConcurrentModificationError)(compound),
          ++_i
      ) {
        simple = compound[_i];
        if (simple instanceof D.PseudoSelector0 && !simple.isClass) {
          if (t2) return null;
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis) result.push(_this);
      return result;
    },
    _pseudo0$_computeSpecificity$0() {
      var selector,
        t1,
        t2,
        minSpecificity,
        maxSpecificity,
        _i,
        complex,
        t3,
        _this = this;
      if (!_this.isClass) {
        _this._pseudo0$_maxSpecificity = _this._pseudo0$_minSpecificity = 1;
        return;
      }
      selector = _this.selector;
      if (selector == null) {
        _this._pseudo0$_minSpecificity = M.SimpleSelector0.prototype.get$minSpecificity.call(
          _this
        );
        _this._pseudo0$_maxSpecificity = M.SimpleSelector0.prototype.get$maxSpecificity.call(
          _this
        );
        return;
      }
      if (_this.name === 'not') {
        for (
          t1 = selector.components,
            t2 = t1.length,
            minSpecificity = 0,
            maxSpecificity = 0,
            _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          if (complex._complex0$_minSpecificity == null)
            complex._complex0$_computeSpecificity$0();
          t3 = complex._complex0$_minSpecificity;
          t3.toString;
          minSpecificity = Math.max(minSpecificity, t3);
          if (complex._complex0$_maxSpecificity == null)
            complex._complex0$_computeSpecificity$0();
          t3 = complex._complex0$_maxSpecificity;
          t3.toString;
          maxSpecificity = Math.max(maxSpecificity, t3);
        }
        _this._pseudo0$_minSpecificity = minSpecificity;
        _this._pseudo0$_maxSpecificity = maxSpecificity;
      } else {
        minSpecificity = H._asInt(
          Math.pow(
            M.SimpleSelector0.prototype.get$minSpecificity.call(_this),
            3
          )
        );
        for (
          t1 = selector.components, t2 = t1.length, maxSpecificity = 0, _i = 0;
          _i < t2;
          ++_i
        ) {
          complex = t1[_i];
          if (complex._complex0$_minSpecificity == null)
            complex._complex0$_computeSpecificity$0();
          t3 = complex._complex0$_minSpecificity;
          t3.toString;
          minSpecificity = Math.min(minSpecificity, t3);
          if (complex._complex0$_maxSpecificity == null)
            complex._complex0$_computeSpecificity$0();
          t3 = complex._complex0$_maxSpecificity;
          t3.toString;
          maxSpecificity = Math.max(maxSpecificity, t3);
        }
        _this._pseudo0$_minSpecificity = minSpecificity;
        _this._pseudo0$_maxSpecificity = maxSpecificity;
      }
    },
    accept$1$1(visitor) {
      return visitor.visitPseudoSelector$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null) return false;
      return (
        other instanceof D.PseudoSelector0 &&
        other.name === _this.name &&
        other.isClass === _this.isClass &&
        other.argument == _this.argument &&
        J.$eq$(other.selector, _this.selector)
      );
    },
    get$hashCode(_) {
      var _this = this,
        t1 = C.JSString_methods.get$hashCode(_this.name),
        t2 = !_this.isClass ? 519018 : 218159;
      return (
        (t1 ^
          t2 ^
          J.get$hashCode$(_this.argument) ^
          J.get$hashCode$(_this.selector)) >>>
        0
      );
    },
  };
  U.PublicMemberMapView0.prototype = {
    get$keys(_) {
      var t1 = this._public_member_map_view0$_inner;
      return J.where$1$ax(t1.get$keys(t1), B.utils0__isPublic$closure());
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        B.isPublic0(key) &&
        this._public_member_map_view0$_inner.containsKey$1(key)
      );
    },
    $index(_, key) {
      if (typeof key == 'string' && B.isPublic0(key))
        return this._public_member_map_view0$_inner.$index(0, key);
      return null;
    },
  };
  D.QualifiedName0.prototype = {
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof D.QualifiedName0 &&
        other.name === this.name &&
        other.namespace == this.namespace
      );
    },
    get$hashCode(_) {
      return (
        C.JSString_methods.get$hashCode(this.name) ^
        J.get$hashCode$(this.namespace)
      );
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? t2 : t1 + '|' + t2;
    },
  };
  Z.RenderContext0.prototype = {};
  Z.RenderContextOptions0.prototype = {};
  Z.RenderContextResult0.prototype = {};
  Z.RenderContextResultStats0.prototype = {};
  R.RenderOptions.prototype = {};
  U.RenderResult.prototype = {};
  U.RenderResultStats.prototype = {};
  E.ImporterResult0.prototype = {};
  B.ReturnRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitReturnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@return ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  U.main_printError.prototype = {
    call$2(error, stackTrace) {
      var t1 = this._box_0;
      if (t1.printedError) $.$get$stderr().writeln$0();
      t1.printedError = true;
      t1 = $.$get$stderr();
      t1.writeln$1(error);
      if (stackTrace != null) {
        t1.writeln$0();
        t1.writeln$1(
          C.JSString_methods.trimRight$0(
            Y.Trace_Trace$from(stackTrace).get$terse().toString$0(0)
          )
        );
      }
    },
    $signature: 433,
  };
  U.main_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = this.destination;
        if (t1 != null && !this._box_0.options.get$emitErrorCss())
          B.deleteFile(t1);
      } catch (exception) {
        if (!(H.unwrapException(exception) instanceof B.FileSystemException))
          throw exception;
      }
    },
    $signature: 2,
  };
  U.SassParser0.prototype = {
    get$currentIndentation() {
      return this._sass0$_currentIndentation;
    },
    get$indented() {
      return true;
    },
    styleRuleSelector$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer0(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      do {
        buffer.addInterpolation$1(this.almostAnyValue$1$omitComments(true));
        t4 = t3._contents += H.Primitives_stringFromCharCode(10);
      } while (
        C.JSString_methods.endsWith$1(
          C.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4),
          ','
        ) &&
        this.scanCharIf$1(T.character0__isNewline$closure())
      );
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    expectStatementSeparator$1($name) {
      var _this = this;
      if (!_this.atEndOfStatement$0()) _this._sass0$_expectNewline$0();
      if (_this._sass0$_peekIndentation$0() <= _this._sass0$_currentIndentation)
        return;
      _this.scanner.error$2$position(
        0,
        'Nothing may be indented ' +
          ($name == null ? 'here' : 'beneath a ' + $name) +
          '.',
        _this._sass0$_nextIndentationEnd.position
      );
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 10 || next === 13 || next === 12;
    },
    lookingAtChildren$0() {
      return (
        this.atEndOfStatement$0() &&
        this._sass0$_peekIndentation$0() > this._sass0$_currentIndentation
      );
    },
    importArgument$0() {
      var url,
        span,
        innerError,
        start,
        next,
        t2,
        exception,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 117:
        case 85:
          start = new S._SpanScannerState(t1, t1._string_scanner$_position);
          if (_this.scanIdentifier$1('url'))
            if (t1.scanChar$1(40)) {
              t1.set$state(start);
              return _this.super$StylesheetParser$importArgument0();
            } else t1.set$state(start);
          break;
        case 39:
        case 34:
          return _this.super$StylesheetParser$importArgument0();
      }
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      next = t1.peekChar$0();
      while (true) {
        if (next != null)
          if (next !== 44)
            if (next !== 59) t2 = !(next === 10 || next === 13 || next === 12);
            else t2 = false;
          else t2 = false;
        else t2 = false;
        if (!t2) break;
        t1.readChar$0();
        next = t1.peekChar$0();
      }
      url = t1.substring$1(0, start.position);
      span = t1.spanFrom$1(start);
      if (_this.isPlainImportUrl$1(url))
        return new Q.StaticImport0(
          X.Interpolation$0(
            H._setArrayType(
              [N.serializeValue(new D.SassString0(url, true), true, true)],
              type$.JSArray_Object
            ),
            span
          ),
          null,
          null,
          span
        );
      else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new B.DynamicImport0(t1, span);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            _this.error$2(
              0,
              'Invalid URL: ' + J.get$message$x(innerError),
              span
            );
          } else throw exception;
        }
    },
    scanElse$1(ifIndentation) {
      var t1,
        t2,
        startIndentation,
        startNextIndentation,
        startNextIndentationEnd,
        _this = this;
      if (_this._sass0$_peekIndentation$0() !== ifIndentation) return false;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      startIndentation = _this._sass0$_currentIndentation;
      startNextIndentation = _this._sass0$_nextIndentation;
      startNextIndentationEnd = _this._sass0$_nextIndentationEnd;
      _this._sass0$_readIndentation$0();
      if (t1.scanChar$1(64) && _this.scanIdentifier$1('else')) return true;
      t1.set$state(new S._SpanScannerState(t1, t2));
      _this._sass0$_currentIndentation = startIndentation;
      _this._sass0$_nextIndentation = startNextIndentation;
      _this._sass0$_nextIndentationEnd = startNextIndentationEnd;
      return false;
    },
    children$1(_, child) {
      var children = H._setArrayType([], type$.JSArray_Statement_2);
      this._sass0$_whileIndentedLower$1(
        new U.SassParser_children_closure0(this, child, children)
      );
      return children;
    },
    statements$1(statement) {
      var statements,
        t2,
        child,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first === 9 || first === 32)
        t1.error$3$length$position(
          0,
          string$.Indent,
          t1._string_scanner$_position,
          0
        );
      statements = H._setArrayType([], type$.JSArray_Statement_2);
      for (t2 = t1.string.length; t1._string_scanner$_position !== t2; ) {
        child = this._sass0$_child$1(statement);
        if (child != null) statements.push(child);
        this._sass0$_readIndentation$0();
      }
      return statements;
    },
    _sass0$_child$1(child) {
      var _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
        case 10:
        case 12:
          return null;
        case 36:
          return _this.variableDeclarationWithoutNamespace$0();
        case 47:
          switch (t1.peekChar$1(1)) {
            case 47:
              return _this._sass0$_silentComment$0();
            case 42:
              return _this._sass0$_loudComment$0();
            default:
              return child.call$0();
          }
        default:
          return child.call$0();
      }
    },
    _sass0$_silentComment$0() {
      var buffer,
        parentIndentation,
        t3,
        t4,
        t5,
        commentPrefix,
        i,
        t6,
        i0,
        t7,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('//');
      buffer = new P.StringBuffer('');
      parentIndentation = _this._sass0$_currentIndentation;
      t3 = t1.string.length;
      t4 = 1 + parentIndentation;
      t5 = 2 + parentIndentation;
      $label0$0: do {
        commentPrefix = t1.scanChar$1(47) ? '///' : '//';
        for (i = commentPrefix.length; true; ) {
          t6 = buffer._contents += commentPrefix;
          for (
            i0 = i;
            i0 < _this._sass0$_currentIndentation - parentIndentation;
            ++i0
          ) {
            t6 += H.Primitives_stringFromCharCode(32);
            buffer._contents = t6;
          }
          while (true) {
            if (t1._string_scanner$_position !== t3) {
              t7 = t1.peekChar$0();
              t7 = !(t7 === 10 || t7 === 13 || t7 === 12);
            } else t7 = false;
            if (!t7) break;
            t6 += H.Primitives_stringFromCharCode(t1.readChar$0());
            buffer._contents = t6;
          }
          buffer._contents = t6 + '\n';
          if (_this._sass0$_peekIndentation$0() < parentIndentation)
            break $label0$0;
          if (_this._sass0$_peekIndentation$0() === parentIndentation) {
            if (t1.peekChar$1(t4) === 47 && t1.peekChar$1(t5) === 47)
              _this._sass0$_readIndentation$0();
            break;
          }
          _this._sass0$_readIndentation$0();
        }
      } while (t1.scan$1('//'));
      t3 = buffer._contents;
      return (_this.lastSilentComment = new B.SilentComment0(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      ));
    },
    _sass0$_loudComment$0() {
      var t3,
        t4,
        buffer,
        parentIndentation,
        t5,
        t6,
        first,
        beginningOfComment,
        t7,
        end,
        i,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('/*');
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t3._contents = '' + '/*';
      parentIndentation = _this._sass0$_currentIndentation;
      for (t5 = t1.string, t6 = t5.length, first = true; true; first = false) {
        if (first) {
          beginningOfComment = t1._string_scanner$_position;
          _this.spaces$0();
          t7 = t1.peekChar$0();
          if (t7 === 10 || t7 === 13 || t7 === 12) {
            _this._sass0$_readIndentation$0();
            t7 = t3._contents += H.Primitives_stringFromCharCode(32);
          } else {
            end = t1._string_scanner$_position;
            t7 = t3._contents += C.JSString_methods.substring$2(
              t5,
              beginningOfComment,
              end
            );
          }
        } else {
          t7 = t3._contents += '\n';
          t7 += ' * ';
          t3._contents = t7;
        }
        for (
          i = 3;
          i < _this._sass0$_currentIndentation - parentIndentation;
          ++i
        ) {
          t7 += H.Primitives_stringFromCharCode(32);
          t3._contents = t7;
        }
        $label0$1: for (; t1._string_scanner$_position !== t6; )
          switch (t1.peekChar$0()) {
            case 10:
            case 13:
            case 12:
              break $label0$1;
            case 35:
              if (t1.peekChar$1(1) === 123) {
                t7 = _this.singleInterpolation$0();
                buffer._interpolation_buffer0$_flushText$0();
                t4.push(t7);
              } else
                t3._contents += H.Primitives_stringFromCharCode(
                  t1.readChar$0()
                );
              break;
            default:
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              break;
          }
        if (_this._sass0$_peekIndentation$0() <= parentIndentation) break;
        for (; _this._sass0$_lookingAtDoubleNewline$0(); ) {
          _this._sass0$_expectNewline$0();
          t7 = t3._contents += '\n';
          t3._contents = t7 + ' *';
        }
        _this._sass0$_readIndentation$0();
      }
      t4 = t3._contents;
      if (
        !C.JSString_methods.endsWith$1(
          C.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4),
          '*/'
        )
      )
        t3._contents += ' */';
      return new L.LoudComment0(
        buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2)))
      );
    },
    whitespaceWithoutComments$0() {
      var t1, t2, next;
      for (
        t1 = this.scanner, t2 = t1.string.length;
        t1._string_scanner$_position !== t2;

      ) {
        next = t1.peekChar$0();
        if (next !== 9 && next !== 32) break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1('/*');
      for (; true; ) {
        next = t1.readChar$0();
        if (next === 10 || next === 13 || next === 12)
          t1.error$1(0, 'expected */.');
        if (next !== 42) continue;
        do next = t1.readChar$0();
        while (next === 42);
        if (next === 47) break;
      }
    },
    _sass0$_expectNewline$0() {
      var t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 59:
          t1.error$1(0, string$.semico);
          break;
        case 13:
          t1.readChar$0();
          if (t1.peekChar$0() === 10) t1.readChar$0();
          return;
        case 10:
        case 12:
          t1.readChar$0();
          return;
        default:
          t1.error$1(0, 'expected newline.');
      }
    },
    _sass0$_lookingAtDoubleNewline$0() {
      var nextChar,
        t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
          nextChar = t1.peekChar$1(1);
          if (nextChar === 10) {
            t1 = t1.peekChar$1(2);
            return t1 === 10 || t1 === 13 || t1 === 12;
          }
          return nextChar === 13 || nextChar === 12;
        case 10:
        case 12:
          t1 = t1.peekChar$1(1);
          return t1 === 10 || t1 === 13 || t1 === 12;
        default:
          return false;
      }
    },
    _sass0$_whileIndentedLower$1(body) {
      var t1,
        t2,
        childIndentation,
        indentation,
        t3,
        t4,
        t5,
        _this = this,
        parentIndentation = _this._sass0$_currentIndentation;
      for (
        t1 = _this.scanner, t2 = t1._sourceFile, childIndentation = null;
        _this._sass0$_peekIndentation$0() > parentIndentation;

      ) {
        indentation = _this._sass0$_readIndentation$0();
        if (childIndentation == null) childIndentation = indentation;
        if (childIndentation !== indentation) {
          t3 =
            'Inconsistent indentation, expected ' +
            childIndentation +
            ' spaces.';
          t4 = t1._string_scanner$_position;
          t5 = t2.getColumn$1(t4);
          t1.error$3$length$position(
            0,
            t3,
            t2.getColumn$1(t1._string_scanner$_position),
            t4 - t5
          );
        }
        body.call$0();
      }
    },
    _sass0$_readIndentation$0() {
      var t1,
        _this = this,
        currentIndentation = _this._sass0$_nextIndentation;
      if (currentIndentation == null)
        currentIndentation = _this._sass0$_nextIndentation = _this._sass0$_peekIndentation$0();
      _this._sass0$_currentIndentation = currentIndentation;
      t1 = _this._sass0$_nextIndentationEnd;
      t1.toString;
      _this.scanner.set$state(t1);
      _this._sass0$_nextIndentationEnd = _this._sass0$_nextIndentation = null;
      return currentIndentation;
    },
    _sass0$_peekIndentation$0() {
      var t1,
        t2,
        t3,
        start,
        containsTab,
        containsSpace,
        nextIndentation,
        next,
        t4,
        _this = this,
        cached = _this._sass0$_nextIndentation;
      if (cached != null) return cached;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      t3 = t1.string.length;
      if (t2 === t3) {
        _this._sass0$_nextIndentation = 0;
        _this._sass0$_nextIndentationEnd = new S._SpanScannerState(t1, t2);
        return 0;
      }
      start = new S._SpanScannerState(t1, t2);
      if (!_this.scanCharIf$1(T.character0__isNewline$closure()))
        t1.error$2$position(
          0,
          'Expected newline.',
          t1._string_scanner$_position
        );
      containsTab = H._Cell$();
      containsSpace = H._Cell$();
      nextIndentation = H._Cell$();
      t2 = nextIndentation.__late_helper$_name;
      do {
        containsSpace._value = containsTab._value = false;
        nextIndentation._value = 0;
        for (; true; ) {
          next = t1.peekChar$0();
          if (next === 32) containsSpace._value = true;
          else if (next === 9) containsTab._value = true;
          else break;
          t4 = nextIndentation._value;
          if (t4 === nextIndentation)
            H.throwExpression(H.LateError$localNI(t2));
          nextIndentation._value = t4 + 1;
          t1.readChar$0();
        }
        t4 = t1._string_scanner$_position;
        if (t4 === t3) {
          _this._sass0$_nextIndentation = 0;
          _this._sass0$_nextIndentationEnd = new S._SpanScannerState(t1, t4);
          t1.set$state(start);
          return 0;
        }
      } while (_this.scanCharIf$1(T.character0__isNewline$closure()));
      t2 = containsTab._readLocal$0();
      t3 = containsSpace._readLocal$0();
      if (t2) {
        if (t3) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(
            0,
            'Tabs and spaces may not be mixed.',
            t3.getColumn$1(t1._string_scanner$_position),
            t2 - t4
          );
        } else if (_this._sass0$_spaces === true) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(
            0,
            'Expected spaces, was tabs.',
            t3.getColumn$1(t1._string_scanner$_position),
            t2 - t4
          );
        }
      } else if (t3 && _this._sass0$_spaces === false) {
        t2 = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        t4 = t3.getColumn$1(t2);
        t1.error$3$length$position(
          0,
          'Expected tabs, was spaces.',
          t3.getColumn$1(t1._string_scanner$_position),
          t2 - t4
        );
      }
      _this._sass0$_nextIndentation = nextIndentation._readLocal$0();
      if (nextIndentation._readLocal$0() > 0)
        if (_this._sass0$_spaces == null)
          _this._sass0$_spaces = containsSpace._readLocal$0();
      _this._sass0$_nextIndentationEnd = new S._SpanScannerState(
        t1,
        t1._string_scanner$_position
      );
      t1.set$state(start);
      return nextIndentation._readLocal$0();
    },
  };
  U.SassParser_children_closure0.prototype = {
    call$0() {
      var parsedChild = this.$this._sass0$_child$1(this.child);
      if (parsedChild != null) this.children.push(parsedChild);
    },
    $signature: 0,
  };
  R._Exports.prototype = {};
  R._wrapMain_closure.prototype = {
    call$1(_) {
      return R._translateReturnValue(this.main.call$0());
    },
    $signature: 80,
  };
  R._wrapMain_closure0.prototype = {
    call$1(args) {
      return R._translateReturnValue(
        this.main.call$1(
          P.List_List$from(type$.List_dynamic._as(args), true, type$.String)
        )
      );
    },
    $signature: 80,
  };
  L.ScssParser0.prototype = {
    get$indented() {
      return false;
    },
    get$currentIndentation() {
      return 0;
    },
    styleRuleSelector$0() {
      return this.almostAnyValue$0();
    },
    expectStatementSeparator$1($name) {
      var t1, next;
      this.whitespaceWithoutComments$0();
      t1 = this.scanner;
      if (t1._string_scanner$_position === t1.string.length) return;
      next = t1.peekChar$0();
      if (next === 59 || next === 125) return;
      t1.expectChar$1(59);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 59 || next === 125 || next === 123;
    },
    lookingAtChildren$0() {
      return this.scanner.peekChar$0() === 123;
    },
    scanElse$1(_) {
      var t3,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      _this.whitespace$0();
      t3 = t1._string_scanner$_position;
      if (t1.scanChar$1(64)) {
        if (_this.scanIdentifier$2$caseSensitive('else', true)) return true;
        if (_this.scanIdentifier$2$caseSensitive('elseif', true)) {
          _this.logger.warn$3$deprecation$span(
            0,
            string$.x40elsei,
            true,
            t1.spanFrom$1(new S._SpanScannerState(t1, t3))
          );
          t1.set$position(t1._string_scanner$_position - 2);
          return true;
        }
      }
      t1.set$state(new S._SpanScannerState(t1, t2));
      return false;
    },
    children$1(_, child) {
      var children,
        _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(123);
      _this.whitespaceWithoutComments$0();
      children = H._setArrayType([], type$.JSArray_Statement_2);
      for (; true; )
        switch (t1.peekChar$0()) {
          case 36:
            children.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                children.push(_this._scss0$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                children.push(_this._scss0$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                children.push(child.call$0());
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          case 125:
            t1.expectChar$1(125);
            return children;
          default:
            children.push(child.call$0());
            break;
        }
    },
    statements$1(statement) {
      var t1,
        t2,
        child,
        _this = this,
        statements = H._setArrayType([], type$.JSArray_Statement_2);
      _this.whitespaceWithoutComments$0();
      for (
        t1 = _this.scanner, t2 = t1.string.length;
        t1._string_scanner$_position !== t2;

      )
        switch (t1.peekChar$0()) {
          case 36:
            statements.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                statements.push(_this._scss0$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                statements.push(_this._scss0$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                child = statement.call$0();
                if (child != null) statements.push(child);
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          default:
            child = statement.call$0();
            if (child != null) statements.push(child);
            break;
        }
      return statements;
    },
    _scss0$_silentComment$0() {
      var t2,
        t3,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expect$1('//');
      t2 = t1.string.length;
      do {
        while (true) {
          if (t1._string_scanner$_position !== t2) {
            t3 = t1.readChar$0();
            t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
          } else t3 = false;
          if (!t3) break;
        }
        if (t1._string_scanner$_position === t2) break;
        _this.whitespaceWithoutComments$0();
      } while (t1.scan$1('//'));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Silent, t1.spanFrom$1(start));
      return (_this.lastSilentComment = new B.SilentComment0(
        t1.substring$1(0, start.position),
        t1.spanFrom$1(start)
      ));
    },
    _scss0$_loudComment$0() {
      var t3,
        t4,
        buffer,
        t5,
        endPosition,
        t6,
        result,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('/*');
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t3._contents = '' + '/*';
      for (; true; )
        switch (t1.peekChar$0()) {
          case 35:
            if (t1.peekChar$1(1) === 123) {
              t5 = this.singleInterpolation$0();
              buffer._interpolation_buffer0$_flushText$0();
              t4.push(t5);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 42:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            if (t1.peekChar$0() !== 47) break;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t5 = t1._sourceFile;
            t6 = new S._SpanScannerState(t1, t2).position;
            t1 = new Y._FileSpan(t5, t6, endPosition);
            t1._FileSpan$3(t5, t6, endPosition);
            t6 = type$.Object;
            t5 = P.List_List$of(t4, true, t6);
            t2 = t3._contents;
            if (t2.length !== 0) t5.push(t2.charCodeAt(0) == 0 ? t2 : t2);
            result = P.List_List$from(t5, false, t6);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t2 = new X.Interpolation0(result, t1);
            t2.Interpolation$20(t5, t1);
            return new L.LoudComment0(t2);
          case 13:
            t1.readChar$0();
            if (t1.peekChar$0() !== 10)
              t3._contents += H.Primitives_stringFromCharCode(10);
            break;
          case 12:
            t1.readChar$0();
            t3._contents += H.Primitives_stringFromCharCode(10);
            break;
          default:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
    },
  };
  T.Selector0.prototype = {
    get$isInvisible() {
      return false;
    },
    toString$0(_) {
      var visitor = N._SerializeVisitor$(
        null,
        true,
        null,
        true,
        false,
        null,
        true
      );
      this.accept$1(visitor);
      return visitor._buffer.toString$0(0);
    },
  };
  T.SelectorExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSelectorExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '&';
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  T._nest_closure0.prototype = {
    call$1($arguments) {
      var t1 = {},
        selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw H.wrapException(E.SassScriptException$0(string$.x24selec));
      t1.first = true;
      return new H.MappedListIterable(
        selectors,
        new T._nest__closure1(t1),
        H._arrayInstanceType(selectors)._eval$1(
          'MappedListIterable<1,SelectorList0>'
        )
      )
        .reduce$1(0, new T._nest__closure2())
        .get$asSassList();
    },
    $signature: 21,
  };
  T._nest__closure1.prototype = {
    call$1(selector) {
      var t1 = this._box_0,
        result = selector.assertSelector$1$allowParent(!t1.first);
      t1.first = false;
      return result;
    },
    $signature: 144,
  };
  T._nest__closure2.prototype = {
    call$2($parent, child) {
      return child.resolveParentSelectors$1($parent);
    },
    $signature: 139,
  };
  T._append_closure1.prototype = {
    call$1($arguments) {
      var selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw H.wrapException(E.SassScriptException$0(string$.x24selec));
      return new H.MappedListIterable(
        selectors,
        new T._append__closure1(),
        H._arrayInstanceType(selectors)._eval$1(
          'MappedListIterable<1,SelectorList0>'
        )
      )
        .reduce$1(0, new T._append__closure2())
        .get$asSassList();
    },
    $signature: 21,
  };
  T._append__closure1.prototype = {
    call$1(selector) {
      return selector.assertSelector$0();
    },
    $signature: 144,
  };
  T._append__closure2.prototype = {
    call$2($parent, child) {
      var t1 = child.components;
      return D.SelectorList$0(
        new H.MappedListIterable(
          t1,
          new T._append___closure0($parent),
          H._arrayInstanceType(t1)._eval$1(
            'MappedListIterable<1,ComplexSelector0>'
          )
        )
      ).resolveParentSelectors$1($parent);
    },
    $signature: 139,
  };
  T._append___closure0.prototype = {
    call$1(complex) {
      var newCompound,
        t2,
        t1 = complex.components,
        compound = C.JSArray_methods.get$first(t1);
      if (compound instanceof X.CompoundSelector0) {
        newCompound = T._prependParent0(compound);
        if (newCompound == null)
          throw H.wrapException(
            E.SassScriptException$0(
              "Can't append " +
                complex.toString$0(0) +
                ' to ' +
                this.parent.toString$0(0) +
                '.'
            )
          );
        t2 = H._setArrayType(
          [newCompound],
          type$.JSArray_ComplexSelectorComponent_2
        );
        C.JSArray_methods.addAll$1(
          t2,
          H.SubListIterable$(
            t1,
            1,
            null,
            H._arrayInstanceType(t1)._precomputed1
          )
        );
        return S.ComplexSelector$0(t2, false);
      } else
        throw H.wrapException(
          E.SassScriptException$0(
            "Can't append " +
              complex.toString$0(0) +
              ' to ' +
              this.parent.toString$0(0) +
              '.'
          )
        );
    },
    $signature: 89,
  };
  T._extend_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name('selector'),
        target = t1.$index($arguments, 1).assertSelector$1$name('extendee');
      return X.ExtensionStore__extendOrReplace0(
        selector,
        t1.$index($arguments, 2).assertSelector$1$name('extender'),
        target,
        C.ExtendMode_allTargets0,
        Y.currentCallableSpan0()
      ).get$asSassList();
    },
    $signature: 21,
  };
  T._replace_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name('selector'),
        target = t1.$index($arguments, 1).assertSelector$1$name('original');
      return X.ExtensionStore__extendOrReplace0(
        selector,
        t1.$index($arguments, 2).assertSelector$1$name('replacement'),
        target,
        C.ExtendMode_replace0,
        Y.currentCallableSpan0()
      ).get$asSassList();
    },
    $signature: 21,
  };
  T._unify_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        result = t1
          .$index($arguments, 0)
          .assertSelector$1$name('selector1')
          .unify$1(t1.$index($arguments, 1).assertSelector$1$name('selector2'));
      return result == null ? C.C__SassNull : result.get$asSassList();
    },
    $signature: 4,
  };
  T._isSuperselector_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector1 = t1.$index($arguments, 0).assertSelector$1$name('super'),
        selector2 = t1.$index($arguments, 1).assertSelector$1$name('sub');
      return Y.listIsSuperselector0(selector1.components, selector2.components)
        ? C.SassBoolean_true
        : C.SassBoolean_false;
    },
    $signature: 24,
  };
  T._simpleSelectors_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertCompoundSelector$1$name(
        'selector'
      ).components;
      return D.SassList$0(
        new H.MappedListIterable(
          t1,
          new T._simpleSelectors__closure0(),
          H._arrayInstanceType(t1)._eval$1('MappedListIterable<1,Value0>')
        ),
        C.ListSeparator_kWM0,
        false
      );
    },
    $signature: 21,
  };
  T._simpleSelectors__closure0.prototype = {
    call$1(simple) {
      return new D.SassString0(N.serializeSelector0(simple, true), false);
    },
    $signature: 436,
  };
  T._parse_closure0.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0)
        .assertSelector$1$name('selector')
        .get$asSassList();
    },
    $signature: 21,
  };
  T.SelectorParser0.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new T.SelectorParser_parse_closure0(this)
      );
    },
    parseCompoundSelector$0() {
      return this.wrapSpanFormatException$1(
        new T.SelectorParser_parseCompoundSelector_closure0(this)
      );
    },
    _selector$_selectorList$0() {
      var t3,
        t4,
        lineBreak,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._sourceFile,
        previousLine = t2.getLine$1(t1._string_scanner$_position),
        components = H._setArrayType(
          [_this._selector$_complexSelector$0()],
          type$.JSArray_ComplexSelector_2
        );
      _this.whitespace$0();
      for (t3 = t1.string.length; t1.scanChar$1(44); ) {
        _this.whitespace$0();
        if (t1.peekChar$0() === 44) continue;
        t4 = t1._string_scanner$_position;
        if (t4 === t3) break;
        lineBreak = t2.getLine$1(t4) !== previousLine;
        if (lineBreak)
          previousLine = t2.getLine$1(t1._string_scanner$_position);
        components.push(
          _this._selector$_complexSelector$1$lineBreak(lineBreak)
        );
      }
      return D.SelectorList$0(components);
    },
    _selector$_complexSelector$1$lineBreak(lineBreak) {
      var t1,
        next,
        _this = this,
        _s58_ = string$.x22x26__ma,
        components = H._setArrayType(
          [],
          type$.JSArray_ComplexSelectorComponent_2
        );
      $label0$1: for (t1 = _this.scanner; true; ) {
        _this.whitespace$0();
        next = t1.peekChar$0();
        switch (next) {
          case 43:
            t1.readChar$0();
            components.push(C.Combinator_uzg0);
            break;
          case 62:
            t1.readChar$0();
            components.push(C.Combinator_sgq0);
            break;
          case 126:
            t1.readChar$0();
            components.push(C.Combinator_CzM0);
            break;
          case 91:
          case 46:
          case 35:
          case 37:
          case 58:
          case 38:
          case 42:
          case 124:
            components.push(_this._selector$_compoundSelector$0());
            if (t1.peekChar$0() === 38) t1.error$1(0, _s58_);
            break;
          default:
            if (next == null || !_this.lookingAtIdentifier$0()) break $label0$1;
            components.push(_this._selector$_compoundSelector$0());
            if (t1.peekChar$0() === 38) t1.error$1(0, _s58_);
            break;
        }
      }
      if (components.length === 0) t1.error$1(0, 'expected selector.');
      return S.ComplexSelector$0(components, lineBreak);
    },
    _selector$_complexSelector$0() {
      return this._selector$_complexSelector$1$lineBreak(false);
    },
    _selector$_compoundSelector$0() {
      var t2,
        components = H._setArrayType(
          [this._selector$_simpleSelector$0()],
          type$.JSArray_SimpleSelector_2
        ),
        t1 = this.scanner;
      while (true) {
        t2 = t1.peekChar$0();
        if (
          !(
            t2 === 42 ||
            t2 === 91 ||
            t2 === 46 ||
            t2 === 35 ||
            t2 === 37 ||
            t2 === 58
          )
        )
          break;
        components.push(this._selector$_simpleSelector$1$allowParent(false));
      }
      return X.CompoundSelector$0(components);
    },
    _selector$_simpleSelector$1$allowParent(allowParent) {
      var $name,
        text,
        t2,
        suffix,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (allowParent == null) allowParent = _this._selector$_allowParent;
      switch (t1.peekChar$0()) {
        case 91:
          return _this._selector$_attributeSelector$0();
        case 46:
          t1.expectChar$1(46);
          return new X.ClassSelector0(_this.identifier$0());
        case 35:
          t1.expectChar$1(35);
          return new N.IDSelector0(_this.identifier$0());
        case 37:
          t1.expectChar$1(37);
          $name = _this.identifier$0();
          if (!_this._selector$_allowPlaceholder)
            _this.error$2(0, string$.Placeh, t1.spanFrom$1(start));
          return new N.PlaceholderSelector0($name);
        case 58:
          return _this._selector$_pseudoSelector$0();
        case 38:
          t1.expectChar$1(38);
          if (_this.lookingAtIdentifierBody$0()) {
            text = new P.StringBuffer('');
            _this._parser0$_identifierBody$1(text);
            if (text._contents.length === 0)
              t1.error$1(0, 'Expected identifier body.');
            t2 = text._contents;
            suffix = t2.charCodeAt(0) == 0 ? t2 : t2;
          } else suffix = null;
          if (!allowParent)
            _this.error$2(
              0,
              "Parent selectors aren't allowed here.",
              t1.spanFrom$1(start)
            );
          return new M.ParentSelector0(suffix);
        default:
          return _this._selector$_typeOrUniversalSelector$0();
      }
    },
    _selector$_simpleSelector$0() {
      return this._selector$_simpleSelector$1$allowParent(null);
    },
    _selector$_attributeSelector$0() {
      var $name,
        operator,
        next,
        value,
        modifier,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(91);
      _this.whitespace$0();
      $name = _this._selector$_attributeName$0();
      _this.whitespace$0();
      if (t1.scanChar$1(93))
        return new N.AttributeSelector0($name, _null, _null, _null);
      operator = _this._selector$_attributeOperator$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      value =
        next === 39 || next === 34 ? _this.string$0() : _this.identifier$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      modifier =
        next != null && T.isAlphabetic1(next)
          ? H.Primitives_stringFromCharCode(t1.readChar$0())
          : _null;
      t1.expectChar$1(93);
      return new N.AttributeSelector0($name, operator, value, modifier);
    },
    _selector$_attributeName$0() {
      var nameOrNamespace,
        _this = this,
        t1 = _this.scanner;
      if (t1.scanChar$1(42)) {
        t1.expectChar$1(124);
        return new D.QualifiedName0(_this.identifier$0(), '*');
      }
      nameOrNamespace = _this.identifier$0();
      if (t1.peekChar$0() !== 124 || t1.peekChar$1(1) === 61)
        return new D.QualifiedName0(nameOrNamespace, null);
      t1.readChar$0();
      return new D.QualifiedName0(_this.identifier$0(), nameOrNamespace);
    },
    _selector$_attributeOperator$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      switch (t1.readChar$0()) {
        case 61:
          return C.AttributeOperator_sEs0;
        case 126:
          t1.expectChar$1(61);
          return C.AttributeOperator_fz10;
        case 124:
          t1.expectChar$1(61);
          return C.AttributeOperator_AuK0;
        case 94:
          t1.expectChar$1(61);
          return C.AttributeOperator_4L50;
        case 36:
          t1.expectChar$1(61);
          return C.AttributeOperator_mOX0;
        case 42:
          t1.expectChar$1(61);
          return C.AttributeOperator_gqZ0;
        default:
          t1.error$2$position(0, 'Expected "]".', t2);
      }
    },
    _selector$_pseudoSelector$0() {
      var element,
        $name,
        unvendored,
        selector,
        argument,
        t2,
        _this = this,
        _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(58);
      element = t1.scanChar$1(58);
      $name = _this.identifier$0();
      if (!t1.scanChar$1(40))
        return D.PseudoSelector$0($name, _null, element, _null);
      _this.whitespace$0();
      unvendored = B.unvendor0($name);
      if (element)
        if ($._selectorPseudoElements0.contains$1(0, unvendored)) {
          selector = _this._selector$_selectorList$0();
          argument = _null;
        } else {
          argument = _this.declarationValue$1$allowEmpty(true);
          selector = _null;
        }
      else if ($._selectorPseudoClasses0.contains$1(0, unvendored)) {
        selector = _this._selector$_selectorList$0();
        argument = _null;
      } else if (
        unvendored === 'nth-child' ||
        unvendored === 'nth-last-child'
      ) {
        argument = _this._selector$_aNPlusB$0();
        _this.whitespace$0();
        t2 = t1.peekChar$1(-1);
        if (
          (t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12) &&
          t1.peekChar$0() !== 41
        ) {
          _this.expectIdentifier$1('of');
          argument += ' of';
          _this.whitespace$0();
          selector = _this._selector$_selectorList$0();
        } else selector = _null;
      } else {
        argument = C.JSString_methods.trimRight$0(
          _this.declarationValue$1$allowEmpty(true)
        );
        selector = _null;
      }
      t1.expectChar$1(41);
      return D.PseudoSelector$0($name, argument, element, selector);
    },
    _selector$_aNPlusB$0() {
      var t2,
        first,
        t3,
        next,
        last,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 101:
        case 69:
          _this.expectIdentifier$1('even');
          return 'even';
        case 111:
        case 79:
          _this.expectIdentifier$1('odd');
          return 'odd';
        case 43:
        case 45:
          t2 = '' + H.Primitives_stringFromCharCode(t1.readChar$0());
          break;
        default:
          t2 = '';
      }
      first = t1.peekChar$0();
      if (first != null && T.isDigit0(first)) {
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
          t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
        }
        _this.whitespace$0();
        if (!_this.scanIdentChar$1(110)) return t2.charCodeAt(0) == 0 ? t2 : t2;
      } else _this.expectIdentChar$1(110);
      t2 += H.Primitives_stringFromCharCode(110);
      _this.whitespace$0();
      next = t1.peekChar$0();
      if (next !== 43 && next !== 45) return t2.charCodeAt(0) == 0 ? t2 : t2;
      t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      _this.whitespace$0();
      last = t1.peekChar$0();
      if (last == null || !T.isDigit0(last))
        t1.error$1(0, 'Expected a number.');
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57)) break;
        t2 += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _selector$_typeOrUniversalSelector$0() {
      var nameOrNamespace,
        _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      if (first === 42) {
        t1.readChar$0();
        if (!t1.scanChar$1(124)) return new N.UniversalSelector0(null);
        if (t1.scanChar$1(42)) return new N.UniversalSelector0('*');
        else
          return new F.TypeSelector0(
            new D.QualifiedName0(_this.identifier$0(), '*')
          );
      } else if (first === 124) {
        t1.readChar$0();
        if (t1.scanChar$1(42)) return new N.UniversalSelector0('');
        else
          return new F.TypeSelector0(
            new D.QualifiedName0(_this.identifier$0(), '')
          );
      }
      nameOrNamespace = _this.identifier$0();
      if (!t1.scanChar$1(124))
        return new F.TypeSelector0(new D.QualifiedName0(nameOrNamespace, null));
      else if (t1.scanChar$1(42))
        return new N.UniversalSelector0(nameOrNamespace);
      else
        return new F.TypeSelector0(
          new D.QualifiedName0(_this.identifier$0(), nameOrNamespace)
        );
    },
  };
  T.SelectorParser_parse_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        selector = t1._selector$_selectorList$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, 'expected selector.');
      return selector;
    },
    $signature: 61,
  };
  T.SelectorParser_parseCompoundSelector_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        compound = t1._selector$_compoundSelector$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, 'expected selector.');
      return compound;
    },
    $signature: 437,
  };
  N.serialize_closure0.prototype = {
    call$1(codeUnit) {
      return codeUnit > 127;
    },
    $signature: 46,
  };
  N._SerializeVisitor.prototype = {
    visitCssStylesheet$1(node) {
      var t1,
        t2,
        t3,
        t4,
        t5,
        previous,
        i,
        child,
        _this = this;
      for (
        t1 = _this._serialize0$_style !== C.OutputStyle_compressed0,
          t2 = type$.CssComment_2,
          t3 = type$.CssParentNode_2,
          t4 = _this._buffer,
          t5 = _this._lineFeed.text,
          previous = null,
          i = 0;
        i < J.get$length$asx(node.get$children(node));
        ++i
      ) {
        child = J.$index$asx(node.get$children(node), i);
        if (_this._serialize0$_isInvisible$1(child)) continue;
        if (previous != null) {
          if (t3._is(previous) ? previous.get$isChildless() : !t2._is(previous))
            t4.writeCharCode$1(59);
          if (t1) t4.write$1(0, t5);
          if (previous.get$isGroupEnd()) if (t1) t4.write$1(0, t5);
        }
        child.accept$1(_this);
        previous = child;
      }
      if (previous != null)
        t1 =
          (t3._is(previous) ? previous.get$isChildless() : !t2._is(previous)) &&
          t1;
      else t1 = false;
      if (t1) t4.writeCharCode$1(59);
    },
    visitCssComment$1(node) {
      this._buffer.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssComment_closure0(this, node)
      );
    },
    visitCssAtRule$1(node) {
      var t1,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = _this._buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssAtRule_closure0(_this, node)
      );
      if (!node.isChildless) {
        if (_this._serialize0$_style !== C.OutputStyle_compressed0)
          t1.writeCharCode$1(32);
        _this._serialize0$_visitChildren$1(node.children);
      }
    },
    visitCssMediaRule$1(node) {
      var t1,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = _this._buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssMediaRule_closure0(_this, node)
      );
      if (_this._serialize0$_style !== C.OutputStyle_compressed0)
        t1.writeCharCode$1(32);
      _this._serialize0$_visitChildren$1(node.children);
    },
    visitCssImport$1(node) {
      this._serialize0$_writeIndentation$0();
      this._buffer.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssImport_closure0(this, node)
      );
    },
    _serialize0$_writeImportUrl$1(url) {
      var urlContents,
        maybeQuote,
        _this = this;
      if (
        _this._serialize0$_style !== C.OutputStyle_compressed0 ||
        C.JSString_methods._codeUnitAt$1(url, 0) !== 117
      ) {
        _this._buffer.write$1(0, url);
        return;
      }
      urlContents = C.JSString_methods.substring$2(url, 4, url.length - 1);
      maybeQuote = C.JSString_methods._codeUnitAt$1(urlContents, 0);
      if (maybeQuote === 39 || maybeQuote === 34)
        _this._buffer.write$1(0, urlContents);
      else _this._serialize0$_visitQuotedString$1(urlContents);
    },
    visitCssKeyframeBlock$1(node) {
      var t1,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = _this._buffer;
      t1.forSpan$2(
        node.selector.span,
        new N._SerializeVisitor_visitCssKeyframeBlock_closure0(_this, node)
      );
      if (_this._serialize0$_style !== C.OutputStyle_compressed0)
        t1.writeCharCode$1(32);
      _this._serialize0$_visitChildren$1(node.children);
    },
    _serialize0$_visitMediaQuery$1(query) {
      var t2,
        t3,
        _this = this,
        t1 = query.modifier;
      if (t1 != null) {
        t2 = _this._buffer;
        t2.write$1(0, t1);
        t2.writeCharCode$1(32);
      }
      t1 = query.type;
      if (t1 != null) {
        t2 = _this._buffer;
        t2.write$1(0, t1);
        if (query.features.length !== 0) t2.write$1(0, ' and ');
      }
      t1 = query.features;
      t2 =
        _this._serialize0$_style === C.OutputStyle_compressed0
          ? 'and '
          : ' and ';
      t3 = _this._buffer;
      _this._serialize0$_writeBetween$3(t1, t2, t3.get$write(t3));
    },
    visitCssStyleRule$1(node) {
      var t1,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = _this._buffer;
      t1.forSpan$2(
        node.selector.span,
        new N._SerializeVisitor_visitCssStyleRule_closure0(_this, node)
      );
      if (_this._serialize0$_style !== C.OutputStyle_compressed0)
        t1.writeCharCode$1(32);
      _this._serialize0$_visitChildren$1(node.children);
    },
    visitCssSupportsRule$1(node) {
      var t1,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = _this._buffer;
      t1.forSpan$2(
        node.span,
        new N._SerializeVisitor_visitCssSupportsRule_closure0(_this, node)
      );
      if (_this._serialize0$_style !== C.OutputStyle_compressed0)
        t1.writeCharCode$1(32);
      _this._serialize0$_visitChildren$1(node.children);
    },
    visitCssDeclaration$1(node) {
      var error,
        error0,
        t1,
        t2,
        exception,
        _this = this;
      _this._serialize0$_writeIndentation$0();
      t1 = node.name;
      _this._serialize0$_write$1(t1);
      t2 = _this._buffer;
      t2.writeCharCode$1(58);
      if (
        J.startsWith$1$s(t1.get$value(t1), '--') &&
        node.parsedAsCustomProperty
      )
        t2.forSpan$2(
          node.value.get$span(),
          new N._SerializeVisitor_visitCssDeclaration_closure1(_this, node)
        );
      else {
        if (_this._serialize0$_style !== C.OutputStyle_compressed0)
          t2.writeCharCode$1(32);
        try {
          t2.forSpan$2(
            node.valueSpanForMap,
            new N._SerializeVisitor_visitCssDeclaration_closure2(_this, node)
          );
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (t1 instanceof E.MultiSpanSassScriptException0) {
            error = t1;
            throw H.wrapException(
              E.MultiSpanSassException$0(
                error.message,
                node.value.get$span(),
                error.primaryLabel,
                error.secondarySpans
              )
            );
          } else if (t1 instanceof E.SassScriptException0) {
            error0 = t1;
            throw H.wrapException(
              E.SassException$0(error0.message, node.value.get$span())
            );
          } else throw exception;
        }
      }
    },
    _serialize0$_writeFoldedValue$1(node) {
      var t2,
        next,
        t3,
        t1 = node.value,
        scanner = X.StringScanner$(
          type$.SassString_2._as(t1.get$value(t1)).text,
          null,
          null
        );
      for (
        t1 = scanner.string.length, t2 = this._buffer;
        scanner._string_scanner$_position !== t1;

      ) {
        next = scanner.readChar$0();
        if (next !== 10) {
          t2.writeCharCode$1(next);
          continue;
        }
        t2.writeCharCode$1(32);
        while (true) {
          t3 = scanner.peekChar$0();
          if (!(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12))
            break;
          scanner.readChar$0();
        }
      }
    },
    _serialize0$_writeReindentedValue$1(node) {
      var _this = this,
        t1 = node.value,
        value = type$.SassString_2._as(t1.get$value(t1)).text,
        minimumIndentation = _this._serialize0$_minimumIndentation$1(value);
      if (minimumIndentation == null) {
        _this._buffer.write$1(0, value);
        return;
      } else if (minimumIndentation === -1) {
        t1 = _this._buffer;
        t1.write$1(0, B.trimAsciiRight0(value, true));
        t1.writeCharCode$1(32);
        return;
      }
      t1 = node.name.get$span();
      t1 = Y.FileLocation$_(t1.file, t1._file$_start);
      _this._serialize0$_writeWithIndent$2(
        value,
        Math.min(minimumIndentation, t1.file.getColumn$1(t1.offset))
      );
    },
    _serialize0$_minimumIndentation$1(text) {
      var character,
        t2,
        min,
        next,
        min0,
        scanner = Z.LineScanner$(text),
        t1 = scanner.string.length;
      while (true) {
        if (scanner._string_scanner$_position !== t1) {
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          t2 = character !== 10;
        } else t2 = false;
        if (!t2) break;
      }
      if (scanner._string_scanner$_position === t1)
        return scanner.peekChar$1(-1) === 10 ? -1 : null;
      for (min = null; scanner._string_scanner$_position !== t1; ) {
        for (; scanner._string_scanner$_position !== t1; ) {
          next = scanner.peekChar$0();
          if (next !== 32 && next !== 9) break;
          scanner._adjustLineAndColumn$1(
            scanner.super$StringScanner$readChar()
          );
        }
        if (scanner._string_scanner$_position === t1 || scanner.scanChar$1(10))
          continue;
        min0 = scanner._line_scanner$_column;
        min = min == null ? min0 : Math.min(min, min0);
        while (true) {
          if (scanner._string_scanner$_position !== t1) {
            character = scanner.super$StringScanner$readChar();
            scanner._adjustLineAndColumn$1(character);
            t2 = character !== 10;
          } else t2 = false;
          if (!t2) break;
        }
      }
      return min == null ? -1 : min;
    },
    _serialize0$_writeWithIndent$2(text, minimumIndentation) {
      var t1,
        t2,
        t3,
        character,
        lineStart,
        newlines,
        end,
        scanner = Z.LineScanner$(text);
      for (
        t1 = scanner.string, t2 = t1.length, t3 = this._buffer;
        scanner._string_scanner$_position !== t2;

      ) {
        character = scanner.super$StringScanner$readChar();
        scanner._adjustLineAndColumn$1(character);
        if (character === 10) break;
        t3.writeCharCode$1(character);
      }
      for (; true; ) {
        lineStart = scanner._string_scanner$_position;
        for (newlines = 1; true; ) {
          if (scanner._string_scanner$_position === t2) {
            t3.writeCharCode$1(32);
            return;
          }
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          if (character === 32 || character === 9) continue;
          if (character !== 10) break;
          lineStart = scanner._string_scanner$_position;
          ++newlines;
        }
        this._serialize0$_writeTimes$2(10, newlines);
        this._serialize0$_writeIndentation$0();
        end = scanner._string_scanner$_position;
        t3.write$1(
          0,
          C.JSString_methods.substring$2(
            t1,
            lineStart + minimumIndentation,
            end
          )
        );
        for (; true; ) {
          if (scanner._string_scanner$_position === t2) return;
          character = scanner.super$StringScanner$readChar();
          scanner._adjustLineAndColumn$1(character);
          if (character === 10) break;
          t3.writeCharCode$1(character);
        }
      }
    },
    visitColor$1(value) {
      var $name,
        hexLength,
        t2,
        t3,
        _this = this,
        _null = null,
        t1 = _this._serialize0$_style === C.OutputStyle_compressed0;
      if (t1 && Math.abs(value.alpha - 1) < $.$get$epsilon0()) {
        $name = $.$get$namesByColor0().$index(0, value);
        hexLength = _this._serialize0$_canUseShortHex$1(value) ? 4 : 7;
        if ($name != null && $name.length <= hexLength)
          _this._buffer.write$1(0, $name);
        else {
          t1 = _this._buffer;
          if (_this._serialize0$_canUseShortHex$1(value)) {
            t1.writeCharCode$1(35);
            t1.writeCharCode$1(T.hexCharFor0(value.get$red() & 15));
            t1.writeCharCode$1(T.hexCharFor0(value.get$green() & 15));
            t1.writeCharCode$1(T.hexCharFor0(value.get$blue() & 15));
          } else {
            t1.writeCharCode$1(35);
            _this._serialize0$_writeHexComponent$1(value.get$red());
            _this._serialize0$_writeHexComponent$1(value.get$green());
            _this._serialize0$_writeHexComponent$1(value.get$blue());
          }
        }
        return;
      }
      t2 = value.originalSpan;
      t3 = t2 == null;
      if (
        (t3
          ? _null
          : P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                t2.file._decodedChars,
                t2._file$_start,
                t2._end
              ),
              0,
              _null
            )) != null
      ) {
        t1 = t3
          ? _null
          : P.String_String$fromCharCodes(
              C.NativeUint32List_methods.sublist$2(
                t2.file._decodedChars,
                t2._file$_start,
                t2._end
              ),
              0,
              _null
            );
        _this._buffer.write$1(0, t1);
      } else {
        t2 = $.$get$namesByColor0();
        if (
          t2.containsKey$1(value) &&
          !(Math.abs(value.alpha - 0) < $.$get$epsilon0())
        )
          _this._buffer.write$1(0, t2.$index(0, value));
        else {
          t2 = value.alpha;
          t3 = _this._buffer;
          if (Math.abs(t2 - 1) < $.$get$epsilon0()) {
            t3.writeCharCode$1(35);
            _this._serialize0$_writeHexComponent$1(value.get$red());
            _this._serialize0$_writeHexComponent$1(value.get$green());
            _this._serialize0$_writeHexComponent$1(value.get$blue());
          } else {
            t3.write$1(0, 'rgba(' + value.get$red());
            t3.write$1(0, t1 ? ',' : ', ');
            t3.write$1(0, value.get$green());
            t3.write$1(0, t1 ? ',' : ', ');
            t3.write$1(0, value.get$blue());
            t3.write$1(0, t1 ? ',' : ', ');
            _this._serialize0$_writeNumber$1(t2);
            t3.writeCharCode$1(41);
          }
        }
      }
    },
    _serialize0$_canUseShortHex$1(color) {
      var t1 = color.get$red();
      if ((t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4)) {
        t1 = color.get$green();
        if ((t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4)) {
          t1 = color.get$blue();
          t1 = (t1 & 15) === C.JSInt_methods._shrOtherPositive$1(t1, 4);
        } else t1 = false;
      } else t1 = false;
      return t1;
    },
    _serialize0$_writeHexComponent$1(color) {
      var t1 = this._buffer;
      t1.writeCharCode$1(
        T.hexCharFor0(C.JSInt_methods._shrOtherPositive$1(color, 4))
      );
      t1.writeCharCode$1(T.hexCharFor0(color & 15));
    },
    visitList$1(value) {
      var t2,
        t3,
        singleton,
        t4,
        t5,
        _this = this,
        t1 = value.hasBrackets;
      if (t1) _this._buffer.writeCharCode$1(91);
      else if (value._list1$_contents.length === 0) {
        if (!_this._inspect)
          throw H.wrapException(
            E.SassScriptException$0("() isn't a valid CSS value.")
          );
        _this._buffer.write$1(0, '()');
        return;
      }
      t2 = _this._inspect;
      if (t2)
        if (value._list1$_contents.length === 1) {
          t3 = value.separator;
          t3 = t3 === C.ListSeparator_kWM0 || t3 === C.ListSeparator_1gm0;
          singleton = t3;
        } else singleton = false;
      else singleton = false;
      if (singleton && !t1) _this._buffer.writeCharCode$1(40);
      t3 = value._list1$_contents;
      t3 = t2
        ? t3
        : new H.WhereIterable(
            t3,
            new N._SerializeVisitor_visitList_closure2(),
            H._arrayInstanceType(t3)._eval$1('WhereIterable<1>')
          );
      t4 = value.separator;
      t5 = _this._serialize0$_separatorString$1(t4);
      _this._serialize0$_writeBetween$3(
        t3,
        t5,
        t2
          ? new N._SerializeVisitor_visitList_closure3(_this, value)
          : new N._SerializeVisitor_visitList_closure4(_this)
      );
      if (singleton) {
        t2 = _this._buffer;
        t2.write$1(0, t4.separator);
        if (!t1) t2.writeCharCode$1(41);
      }
      if (t1) _this._buffer.writeCharCode$1(93);
    },
    _serialize0$_separatorString$1(separator) {
      switch (separator) {
        case C.ListSeparator_kWM0:
          return this._serialize0$_style === C.OutputStyle_compressed0
            ? ','
            : ', ';
        case C.ListSeparator_1gm0:
          return this._serialize0$_style === C.OutputStyle_compressed0
            ? '/'
            : ' / ';
        case C.ListSeparator_woc0:
          return ' ';
        default:
          return '';
      }
    },
    _serialize0$_elementNeedsParens$2(separator, value) {
      var t1;
      if (value instanceof D.SassList0) {
        if (value._list1$_contents.length < 2) return false;
        if (value.hasBrackets) return false;
        switch (separator) {
          case C.ListSeparator_kWM0:
            return value.separator === C.ListSeparator_kWM0;
          case C.ListSeparator_1gm0:
            t1 = value.separator;
            return t1 === C.ListSeparator_kWM0 || t1 === C.ListSeparator_1gm0;
          default:
            return value.separator !== C.ListSeparator_undecided_null0;
        }
      }
      return false;
    },
    visitMap$1(map) {
      var t1,
        t2,
        _this = this;
      if (!_this._inspect)
        throw H.wrapException(
          E.SassScriptException$0(
            map.toString$0(0) + " isn't a valid CSS value."
          )
        );
      t1 = _this._buffer;
      t1.writeCharCode$1(40);
      t2 = map.contents;
      _this._serialize0$_writeBetween$3(
        t2.get$entries(t2),
        ', ',
        new N._SerializeVisitor_visitMap_closure0(_this)
      );
      t1.writeCharCode$1(41);
    },
    _serialize0$_writeMapElement$1(value) {
      var needsParens =
        value instanceof D.SassList0 &&
        value.separator === C.ListSeparator_kWM0 &&
        !value.hasBrackets;
      if (needsParens) this._buffer.writeCharCode$1(40);
      value.accept$1(this);
      if (needsParens) this._buffer.writeCharCode$1(41);
    },
    visitNumber$1(value) {
      var _this = this,
        asSlash = value.asSlash;
      if (asSlash != null) {
        _this.visitNumber$1(asSlash.item1);
        _this._buffer.writeCharCode$1(47);
        _this.visitNumber$1(asSlash.item2);
        return;
      }
      _this._serialize0$_writeNumber$1(value.value);
      if (!_this._inspect) {
        if (
          J.get$length$asx(value.get$numeratorUnits()) > 1 ||
          value.get$denominatorUnits().length !== 0
        )
          throw H.wrapException(
            E.SassScriptException$0(
              value.toString$0(0) + " isn't a valid CSS value."
            )
          );
        if (J.get$isNotEmpty$asx(value.get$numeratorUnits()))
          _this._buffer.write$1(0, J.get$first$ax(value.get$numeratorUnits()));
      } else _this._buffer.write$1(0, value.get$unitString());
    },
    _serialize0$_writeNumber$1(number) {
      var text,
        _this = this,
        integer = T.fuzzyIsInt0(number)
          ? C.JSNumber_methods.round$0(number)
          : null;
      if (integer != null) {
        _this._buffer.write$1(
          0,
          _this._serialize0$_removeExponent$1(
            C.JSInt_methods.toString$0(integer)
          )
        );
        return;
      }
      text = _this._serialize0$_removeExponent$1(
        C.JSNumber_methods.toString$0(number)
      );
      if (text.length < 12) {
        if (
          _this._serialize0$_style === C.OutputStyle_compressed0 &&
          C.JSString_methods._codeUnitAt$1(text, 0) === 48
        )
          text = C.JSString_methods.substring$1(text, 1);
        _this._buffer.write$1(0, text);
        return;
      }
      _this._serialize0$_writeRounded$1(text);
    },
    _serialize0$_removeExponent$1(text) {
      var buffer,
        t3,
        additionalZeroes,
        t1 = C.JSString_methods._codeUnitAt$1(text, 0),
        negative = t1 === 45,
        exponent = H._Cell$(),
        t2 = text.length,
        i = 0;
      while (true) {
        if (!(i < t2)) {
          buffer = null;
          break;
        }
        c$0: {
          if (C.JSString_methods._codeUnitAt$1(text, i) !== 101) break c$0;
          buffer = new P.StringBuffer('');
          t1 = buffer._contents = '' + H.Primitives_stringFromCharCode(t1);
          if (negative) {
            t1 += H.Primitives_stringFromCharCode(
              C.JSString_methods._codeUnitAt$1(text, 1)
            );
            buffer._contents = t1;
            if (i > 3)
              buffer._contents =
                t1 + C.JSString_methods.substring$2(text, 3, i);
          } else if (i > 2)
            buffer._contents = t1 + C.JSString_methods.substring$2(text, 2, i);
          exponent._value = P.int_parse(
            C.JSString_methods.substring$2(text, i + 1, t2),
            null
          );
          break;
        }
        ++i;
      }
      if (buffer == null) return text;
      if (exponent._readLocal$0() > 0) {
        t1 = exponent._readLocal$0();
        t2 = buffer._contents;
        t3 = negative ? 1 : 0;
        additionalZeroes = t1 - (t2.length - 1 - t3);
        for (t1 = t2, i = 0; i < additionalZeroes; ++i) {
          t1 += H.Primitives_stringFromCharCode(48);
          buffer._contents = t1;
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        t1 = (negative ? '' + H.Primitives_stringFromCharCode(45) : '') + '0.';
        t2 = exponent.__late_helper$_name;
        i = -1;
        while (true) {
          t3 = exponent._value;
          if (t3 === exponent) H.throwExpression(H.LateError$localNI(t2));
          if (!(i > t3)) break;
          t1 += H.Primitives_stringFromCharCode(48);
          --i;
        }
        if (negative) {
          t2 = buffer._contents;
          t2 = C.JSString_methods.substring$1(
            t2.charCodeAt(0) == 0 ? t2 : t2,
            1
          );
        } else t2 = buffer;
        t2 = t1 + H.S(t2);
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      }
    },
    _serialize0$_writeRounded$1(text) {
      var t1,
        digits,
        negative,
        textIndex,
        digitsIndex,
        textIndex0,
        codeUnit,
        digitsIndex0,
        indexAfterPrecision,
        digitsIndex1,
        newDigit,
        writtenIndex,
        t2,
        _this = this;
      if (C.JSString_methods.endsWith$1(text, '.0')) {
        _this._buffer.write$1(
          0,
          C.JSString_methods.substring$2(text, 0, text.length - 2)
        );
        return;
      }
      t1 = text.length;
      digits = new Uint8Array(t1 + 1);
      negative = C.JSString_methods._codeUnitAt$1(text, 0) === 45;
      textIndex = negative ? 1 : 0;
      for (
        digitsIndex = 1;
        true;
        textIndex = textIndex0, digitsIndex = digitsIndex0
      ) {
        if (textIndex === t1) {
          _this._buffer.write$1(0, text);
          return;
        }
        textIndex0 = textIndex + 1;
        codeUnit = C.JSString_methods._codeUnitAt$1(text, textIndex);
        if (codeUnit === 46) {
          textIndex = textIndex0;
          break;
        }
        digitsIndex0 = digitsIndex + 1;
        digits[digitsIndex] = codeUnit - 48;
      }
      indexAfterPrecision = textIndex + 10;
      if (indexAfterPrecision >= t1) {
        _this._buffer.write$1(0, text);
        return;
      }
      for (
        digitsIndex0 = digitsIndex;
        textIndex < indexAfterPrecision;
        textIndex = textIndex0, digitsIndex0 = digitsIndex1
      ) {
        digitsIndex1 = digitsIndex0 + 1;
        textIndex0 = textIndex + 1;
        digits[digitsIndex0] =
          C.JSString_methods._codeUnitAt$1(text, textIndex) - 48;
      }
      if (C.JSString_methods._codeUnitAt$1(text, textIndex) - 48 >= 5)
        for (; true; digitsIndex0 = digitsIndex1) {
          digitsIndex1 = digitsIndex0 - 1;
          newDigit = digits[digitsIndex1] + 1;
          digits[digitsIndex1] = newDigit;
          if (newDigit !== 10) break;
        }
      for (; digitsIndex0 < digitsIndex; ++digitsIndex0)
        digits[digitsIndex0] = 0;
      while (true) {
        t1 = digitsIndex0 > digitsIndex;
        if (!(t1 && digits[digitsIndex0 - 1] === 0)) break;
        --digitsIndex0;
      }
      if (digitsIndex0 === 2 && digits[0] === 0 && digits[1] === 0) {
        _this._buffer.writeCharCode$1(48);
        return;
      }
      if (negative) _this._buffer.writeCharCode$1(45);
      if (digits[0] === 0)
        writtenIndex =
          _this._serialize0$_style === C.OutputStyle_compressed0 &&
          digits[1] === 0
            ? 2
            : 1;
      else writtenIndex = 0;
      for (t2 = _this._buffer; writtenIndex < digitsIndex; ++writtenIndex)
        t2.writeCharCode$1(48 + digits[writtenIndex]);
      if (t1) {
        t2.writeCharCode$1(46);
        for (; writtenIndex < digitsIndex0; ++writtenIndex)
          t2.writeCharCode$1(48 + digits[writtenIndex]);
      }
    },
    _serialize0$_visitQuotedString$2$forceDoubleQuote(
      string,
      forceDoubleQuote
    ) {
      var t1,
        includesSingleQuote,
        includesDoubleQuote,
        i,
        char,
        newIndex,
        quote,
        _this = this,
        buffer = forceDoubleQuote ? _this._buffer : new P.StringBuffer('');
      if (forceDoubleQuote) buffer.writeCharCode$1(34);
      for (
        t1 = string.length,
          includesSingleQuote = false,
          includesDoubleQuote = false,
          i = 0;
        i < t1;
        ++i
      ) {
        char = C.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 39:
            if (forceDoubleQuote) buffer.writeCharCode$1(39);
            else {
              if (includesDoubleQuote) {
                _this._serialize0$_visitQuotedString$2$forceDoubleQuote(
                  string,
                  true
                );
                return;
              } else buffer.writeCharCode$1(39);
              includesSingleQuote = true;
            }
            break;
          case 34:
            if (forceDoubleQuote) {
              buffer.writeCharCode$1(92);
              buffer.writeCharCode$1(34);
            } else {
              if (includesSingleQuote) {
                _this._serialize0$_visitQuotedString$2$forceDoubleQuote(
                  string,
                  true
                );
                return;
              } else buffer.writeCharCode$1(34);
              includesDoubleQuote = true;
            }
            break;
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            _this._serialize0$_writeEscape$4(buffer, char, string, i);
            break;
          case 92:
            buffer.writeCharCode$1(92);
            buffer.writeCharCode$1(92);
            break;
          default:
            newIndex = _this._serialize0$_tryPrivateUseCharacter$4(
              buffer,
              char,
              string,
              i
            );
            if (newIndex != null) {
              i = newIndex;
              break;
            }
            buffer.writeCharCode$1(char);
            break;
        }
      }
      if (forceDoubleQuote) buffer.writeCharCode$1(34);
      else {
        quote = includesDoubleQuote ? 39 : 34;
        t1 = _this._buffer;
        t1.writeCharCode$1(quote);
        t1.write$1(0, buffer);
        t1.writeCharCode$1(quote);
      }
    },
    _serialize0$_visitQuotedString$1(string) {
      return this._serialize0$_visitQuotedString$2$forceDoubleQuote(
        string,
        false
      );
    },
    _serialize0$_visitUnquotedString$1(string) {
      var t1, t2, afterNewline, i, char, newIndex;
      for (
        t1 = string.length, t2 = this._buffer, afterNewline = false, i = 0;
        i < t1;
        ++i
      ) {
        char = C.JSString_methods._codeUnitAt$1(string, i);
        switch (char) {
          case 10:
            t2.writeCharCode$1(32);
            afterNewline = true;
            break;
          case 32:
            if (!afterNewline) t2.writeCharCode$1(32);
            break;
          default:
            newIndex = this._serialize0$_tryPrivateUseCharacter$4(
              t2,
              char,
              string,
              i
            );
            if (newIndex != null) {
              i = newIndex;
              afterNewline = false;
              break;
            }
            t2.writeCharCode$1(char);
            afterNewline = false;
            break;
        }
      }
    },
    _serialize0$_tryPrivateUseCharacter$4(buffer, codeUnit, string, i) {
      var t1;
      if (this._serialize0$_style === C.OutputStyle_compressed0) return null;
      if (codeUnit >= 57344 && codeUnit <= 63743) {
        this._serialize0$_writeEscape$4(buffer, codeUnit, string, i);
        return i;
      }
      if (codeUnit >>> 7 === 439 && string.length > i + 1) {
        t1 = i + 1;
        this._serialize0$_writeEscape$4(
          buffer,
          65536 +
            ((codeUnit & 1023) << 10) +
            (C.JSString_methods._codeUnitAt$1(string, t1) & 1023),
          string,
          t1
        );
        return t1;
      }
      return null;
    },
    _serialize0$_writeEscape$4(buffer, character, string, i) {
      var t1, next;
      buffer.writeCharCode$1(92);
      buffer.write$1(0, C.JSInt_methods.toRadixString$1(character, 16));
      t1 = i + 1;
      if (string.length === t1) return;
      next = C.JSString_methods._codeUnitAt$1(string, t1);
      if (T.isHex0(next) || next === 32 || next === 9)
        buffer.writeCharCode$1(32);
    },
    visitComplexSelector$1(complex) {
      var t1, t2, t3, t4, lastComponent, _i, component, t5;
      for (
        t1 = complex.components,
          t2 = t1.length,
          t3 = this._buffer,
          t4 = this._serialize0$_style === C.OutputStyle_compressed0,
          lastComponent = null,
          _i = 0;
        _i < t2;
        ++_i, lastComponent = component
      ) {
        component = t1[_i];
        if (lastComponent != null)
          if (!(t4 && lastComponent instanceof S.Combinator0))
            t5 = !(t4 && component instanceof S.Combinator0);
          else t5 = false;
        else t5 = false;
        if (t5) t3.write$1(0, ' ');
        if (component instanceof X.CompoundSelector0)
          this.visitCompoundSelector$1(component);
        else t3.write$1(0, component);
      }
    },
    visitCompoundSelector$1(compound) {
      var t2,
        t3,
        _i,
        t1 = this._buffer,
        start = t1.get$length(t1);
      for (t2 = compound.components, t3 = t2.length, _i = 0; _i < t3; ++_i)
        t2[_i].accept$1(this);
      if (t1.get$length(t1) === start) t1.writeCharCode$1(42);
    },
    visitSelectorList$1(list) {
      var t1,
        t2,
        t3,
        t4,
        first,
        t5,
        _this = this,
        complexes = list.components;
      for (
        t1 = J.get$iterator$ax(
          _this._inspect
            ? complexes
            : new H.WhereIterable(
                complexes,
                new N._SerializeVisitor_visitSelectorList_closure0(),
                H._arrayInstanceType(complexes)._eval$1('WhereIterable<1>')
              )
        ),
          t2 = _this._serialize0$_style !== C.OutputStyle_compressed0,
          t3 = _this._buffer,
          t4 = _this._lineFeed.text,
          first = true;
        t1.moveNext$0();

      ) {
        t5 = t1.get$current();
        if (first) first = false;
        else {
          t3.writeCharCode$1(44);
          if (t5.lineBreak) {
            if (t2) t3.write$1(0, t4);
          } else if (t2) t3.writeCharCode$1(32);
        }
        _this.visitComplexSelector$1(t5);
      }
    },
    visitPseudoSelector$1(pseudo) {
      var t3,
        t4,
        t5,
        innerSelector = pseudo.selector,
        t1 = innerSelector == null,
        t2 = !t1;
      if (t2 && pseudo.name === 'not' && innerSelector.get$isInvisible())
        return;
      t3 = this._buffer;
      t3.writeCharCode$1(58);
      if (!pseudo.isSyntacticClass) t3.writeCharCode$1(58);
      t3.write$1(0, pseudo.name);
      t4 = pseudo.argument;
      t5 = t4 == null;
      if (t5 && t1) return;
      t3.writeCharCode$1(40);
      if (!t5) {
        t3.write$1(0, t4);
        if (t2) t3.writeCharCode$1(32);
      }
      if (t2) this.visitSelectorList$1(innerSelector);
      t3.writeCharCode$1(41);
    },
    _serialize0$_write$1(value) {
      return this._buffer.forSpan$2(
        value.get$span(),
        new N._SerializeVisitor__write_closure0(this, value)
      );
    },
    _serialize0$_visitChildren$1(children) {
      var _this = this,
        t1 = {},
        t2 = _this._buffer;
      t2.writeCharCode$1(123);
      if (children.every$1(children, _this.get$_serialize0$_isInvisible())) {
        t2.writeCharCode$1(125);
        return;
      }
      _this._serialize0$_writeLineFeed$0();
      t1.previous_ = null;
      ++_this._serialize0$_indentation;
      new N._SerializeVisitor__visitChildren_closure0(
        t1,
        _this,
        children
      ).call$0();
      --_this._serialize0$_indentation;
      t1 = t1.previous_;
      t1.toString;
      if (
        (type$.CssParentNode_2._is(t1)
          ? t1.get$isChildless()
          : !type$.CssComment_2._is(t1)) &&
        _this._serialize0$_style !== C.OutputStyle_compressed0
      )
        t2.writeCharCode$1(59);
      _this._serialize0$_writeLineFeed$0();
      _this._serialize0$_writeIndentation$0();
      t2.writeCharCode$1(125);
    },
    _serialize0$_writeLineFeed$0() {
      if (this._serialize0$_style !== C.OutputStyle_compressed0)
        this._buffer.write$1(0, this._lineFeed.text);
    },
    _serialize0$_writeIndentation$0() {
      var _this = this;
      if (_this._serialize0$_style === C.OutputStyle_compressed0) return;
      _this._serialize0$_writeTimes$2(
        _this._serialize0$_indentCharacter,
        _this._serialize0$_indentation * _this._serialize0$_indentWidth
      );
    },
    _serialize0$_writeTimes$2(char, times) {
      var t1, i;
      for (t1 = this._buffer, i = 0; i < times; ++i) t1.writeCharCode$1(char);
    },
    _serialize0$_writeBetween$1$3(iterable, text, callback) {
      var t1, t2, first, value;
      for (
        t1 = J.get$iterator$ax(iterable), t2 = this._buffer, first = true;
        t1.moveNext$0();

      ) {
        value = t1.get$current();
        if (first) first = false;
        else t2.write$1(0, text);
        callback.call$1(value);
      }
    },
    _serialize0$_writeBetween$3(iterable, text, callback) {
      return this._serialize0$_writeBetween$1$3(
        iterable,
        text,
        callback,
        type$.dynamic
      );
    },
    _serialize0$_isInvisible$1(node) {
      if (this._inspect) return false;
      if (
        this._serialize0$_style === C.OutputStyle_compressed0 &&
        type$.CssComment_2._is(node) &&
        C.JSString_methods._codeUnitAt$1(node.text, 2) !== 33
      )
        return true;
      if (type$.CssParentNode_2._is(node)) {
        if (type$.CssAtRule_2._is(node)) return false;
        if (
          type$.CssStyleRule_2._is(node) &&
          node.selector.value.get$isInvisible()
        )
          return true;
        return J.every$1$ax(
          node.get$children(node),
          this.get$_serialize0$_isInvisible()
        );
      } else return false;
    },
  };
  N._SerializeVisitor_visitCssComment_closure0.prototype = {
    call$0() {
      var t2,
        t3,
        minimumIndentation,
        t1 = this.$this;
      if (
        t1._serialize0$_style === C.OutputStyle_compressed0 &&
        C.JSString_methods._codeUnitAt$1(this.node.text, 2) !== 33
      )
        return;
      t2 = this.node;
      t3 = t2.text;
      minimumIndentation = t1._serialize0$_minimumIndentation$1(t3);
      if (minimumIndentation == null) {
        t1._serialize0$_writeIndentation$0();
        t1._buffer.write$1(0, t3);
        return;
      }
      t2 = t2.span;
      t2 = Y.FileLocation$_(t2.file, t2._file$_start);
      minimumIndentation = Math.min(
        minimumIndentation,
        t2.file.getColumn$1(t2.offset)
      );
      t1._serialize0$_writeIndentation$0();
      t1._serialize0$_writeWithIndent$2(t3, minimumIndentation);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssAtRule_closure0.prototype = {
    call$0() {
      var t3,
        value,
        t1 = this.$this,
        t2 = t1._buffer;
      t2.writeCharCode$1(64);
      t3 = this.node;
      t1._serialize0$_write$1(t3.name);
      value = t3.value;
      if (value != null) {
        t2.writeCharCode$1(32);
        t1._serialize0$_write$1(value);
      }
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssMediaRule_closure0.prototype = {
    call$0() {
      var t3,
        t4,
        t1 = this.$this,
        t2 = t1._buffer;
      t2.write$1(0, '@media');
      t3 = t1._serialize0$_style === C.OutputStyle_compressed0;
      if (t3) {
        t4 = C.JSArray_methods.get$first(this.node.queries);
        t4 = !(t4.modifier == null && t4.type == null);
      } else t4 = true;
      if (t4) t2.writeCharCode$1(32);
      t2 = t3 ? ',' : ', ';
      t1._serialize0$_writeBetween$3(
        this.node.queries,
        t2,
        t1.get$_serialize0$_visitMediaQuery()
      );
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssImport_closure0.prototype = {
    call$0() {
      var t3,
        t4,
        t5,
        supports,
        media,
        t1 = this.$this,
        t2 = t1._buffer;
      t2.write$1(0, '@import');
      t3 = t1._serialize0$_style === C.OutputStyle_compressed0;
      t4 = !t3;
      if (t4) t2.writeCharCode$1(32);
      t5 = this.node;
      t2.forSpan$2(
        t5.url.get$span(),
        new N._SerializeVisitor_visitCssImport__closure0(t1, t5)
      );
      supports = t5.supports;
      if (supports != null) {
        if (t4) t2.writeCharCode$1(32);
        t1._serialize0$_write$1(supports);
      }
      media = t5.media;
      if (media != null) {
        if (t4) t2.writeCharCode$1(32);
        t2 = t3 ? ',' : ', ';
        t1._serialize0$_writeBetween$3(
          media,
          t2,
          t1.get$_serialize0$_visitMediaQuery()
        );
      }
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssImport__closure0.prototype = {
    call$0() {
      var t1 = this.node.url;
      return this.$this._serialize0$_writeImportUrl$1(t1.get$value(t1));
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssKeyframeBlock_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._serialize0$_style === C.OutputStyle_compressed0 ? ',' : ', ',
        t3 = t1._buffer;
      return t1._serialize0$_writeBetween$3(
        this.node.selector.value,
        t2,
        t3.get$write(t3)
      );
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssStyleRule_closure0.prototype = {
    call$0() {
      return this.$this.visitSelectorList$1(this.node.selector.value);
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitCssSupportsRule_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._buffer;
      t2.write$1(0, '@supports');
      if (
        !(
          t1._serialize0$_style === C.OutputStyle_compressed0 &&
          J.codeUnitAt$1$s(this.node.condition.value, 0) === 40
        )
      )
        t2.writeCharCode$1(32);
      t1._serialize0$_write$1(this.node.condition);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssDeclaration_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      if (t1._serialize0$_style === C.OutputStyle_compressed0)
        t1._serialize0$_writeFoldedValue$1(t2);
      else t1._serialize0$_writeReindentedValue$1(t2);
    },
    $signature: 2,
  };
  N._SerializeVisitor_visitCssDeclaration_closure2.prototype = {
    call$0() {
      var t1 = this.node.value;
      return t1.get$value(t1).accept$1(this.$this);
    },
    $signature: 0,
  };
  N._SerializeVisitor_visitList_closure2.prototype = {
    call$1(element) {
      return !element.get$isBlank();
    },
    $signature: 49,
  };
  N._SerializeVisitor_visitList_closure3.prototype = {
    call$1(element) {
      var t1 = this.$this,
        needsParens = t1._serialize0$_elementNeedsParens$2(
          this.value.separator,
          element
        );
      if (needsParens) t1._buffer.writeCharCode$1(40);
      element.accept$1(t1);
      if (needsParens) t1._buffer.writeCharCode$1(41);
    },
    $signature: 59,
  };
  N._SerializeVisitor_visitList_closure4.prototype = {
    call$1(element) {
      element.accept$1(this.$this);
    },
    $signature: 59,
  };
  N._SerializeVisitor_visitMap_closure0.prototype = {
    call$1(entry) {
      var t1 = this.$this;
      t1._serialize0$_writeMapElement$1(entry.key);
      t1._buffer.write$1(0, ': ');
      t1._serialize0$_writeMapElement$1(entry.value);
    },
    $signature: 439,
  };
  N._SerializeVisitor_visitSelectorList_closure0.prototype = {
    call$1(complex) {
      return !complex.get$isInvisible();
    },
    $signature: 17,
  };
  N._SerializeVisitor__write_closure0.prototype = {
    call$0() {
      var t1 = this.value;
      return this.$this._buffer.write$1(0, t1.get$value(t1));
    },
    $signature: 0,
  };
  N._SerializeVisitor__visitChildren_closure0.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, t6, t7, t8, i, child, previous, t9;
      for (
        t1 = this.children._collection$_source,
          t2 = J.getInterceptor$asx(t1),
          t3 = this._box_0,
          t4 = this.$this,
          t5 = type$.CssComment_2,
          t6 = type$.CssParentNode_2,
          t7 = t4._buffer,
          t8 = t4._lineFeed.text,
          i = 0;
        i < t2.get$length(t1);
        ++i
      ) {
        child = t2.elementAt$1(t1, i);
        if (t4._serialize0$_isInvisible$1(child)) continue;
        previous = t3.previous_;
        if (previous != null) {
          if (t6._is(previous) ? previous.get$isChildless() : !t5._is(previous))
            t7.writeCharCode$1(59);
          t9 = t4._serialize0$_style !== C.OutputStyle_compressed0;
          if (t9) t7.write$1(0, t8);
          if (previous.get$isGroupEnd()) if (t9) t7.write$1(0, t8);
        }
        t3.previous_ = child;
        child.accept$1(t4);
      }
    },
    $signature: 0,
  };
  N.OutputStyle0.prototype = {
    toString$0(_) {
      return this._name;
    },
  };
  N.LineFeed0.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  N.SerializeResult0.prototype = {};
  B.ShadowedModuleView0.prototype = {
    get$url() {
      return this._shadowed_view0$_inner.get$url();
    },
    get$upstream() {
      return this._shadowed_view0$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._shadowed_view0$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._shadowed_view0$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._shadowed_view0$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._shadowed_view0$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw H.wrapException(E.SassScriptException$0('Undefined variable.'));
      else
        return this._shadowed_view0$_inner.setVariable$3(
          $name,
          value,
          nodeWithSpan
        );
    },
    variableIdentity$1($name) {
      return this._shadowed_view0$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      var t1,
        t2,
        _this = this;
      if (other == null) return false;
      if (other instanceof B.ShadowedModuleView0)
        if (_this._shadowed_view0$_inner.$eq(0, other._shadowed_view0$_inner)) {
          t1 = _this.variables;
          t1 = t1.get$keys(t1);
          t2 = other.variables;
          if (C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
            t1 = _this.functions;
            t1 = t1.get$keys(t1);
            t2 = other.functions;
            if (C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
              t1 = _this.mixins;
              t1 = t1.get$keys(t1);
              t2 = other.mixins;
              t2 = C.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2));
              t1 = t2;
            } else t1 = false;
          } else t1 = false;
        } else t1 = false;
      else t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._shadowed_view0$_inner;
      return t1.get$hashCode(t1);
    },
    cloneCss$0() {
      var _this = this;
      return new B.ShadowedModuleView0(
        _this._shadowed_view0$_inner.cloneCss$0(),
        _this.variables,
        _this.variableNodes,
        _this.functions,
        _this.mixins,
        _this.$ti
      );
    },
    toString$0(_) {
      return 'shadowed ' + this._shadowed_view0$_inner.toString$0(0);
    },
    $isModule0: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
  };
  B.SilentComment0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSilentComment$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return this.text;
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  M.SimpleSelector0.prototype = {
    get$minSpecificity() {
      return 1000;
    },
    get$maxSpecificity() {
      return this.get$minSpecificity();
    },
    addSuffix$1(suffix) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Invalid parent selector "' + this.toString$0(0) + '"'
        )
      );
    },
    unify$1(compound) {
      var result,
        t1,
        addedThis,
        _i,
        simple,
        _this = this;
      if (
        compound.length === 1 &&
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector0
      )
        return C.JSArray_methods.get$first(compound).unify$1(
          H._setArrayType([_this], type$.JSArray_SimpleSelector_2)
        );
      if (C.JSArray_methods.contains$1(compound, _this)) return compound;
      result = H._setArrayType([], type$.JSArray_SimpleSelector_2);
      for (
        t1 = compound.length, addedThis = false, _i = 0;
        _i < compound.length;
        compound.length === t1 ||
          (0, H.throwConcurrentModificationError)(compound),
          ++_i
      ) {
        simple = compound[_i];
        if (!addedThis && simple instanceof D.PseudoSelector0) {
          result.push(_this);
          addedThis = true;
        }
        result.push(simple);
      }
      if (!addedThis) result.push(_this);
      return result;
    },
  };
  L.SingleUnitSassNumber0.prototype = {
    get$numeratorUnits() {
      return new P.UnmodifiableListView(
        H._setArrayType([this._single_unit$_unit], type$.JSArray_String),
        type$.UnmodifiableListView_String
      );
    },
    get$denominatorUnits() {
      return C.List_empty;
    },
    get$hasUnits() {
      return true;
    },
    withValue$1(value) {
      return new L.SingleUnitSassNumber0(this._single_unit$_unit, value, null);
    },
    withSlash$2(numerator, denominator) {
      return new L.SingleUnitSassNumber0(
        this._single_unit$_unit,
        this.value,
        new S.Tuple2(
          numerator,
          denominator,
          type$.Tuple2_SassNumber_SassNumber_2
        )
      );
    },
    hasUnit$1(unit) {
      return unit === this._single_unit$_unit;
    },
    compatibleWithUnit$1(unit) {
      return this.conversionFactor$2(this._single_unit$_unit, unit) != null;
    },
    coerceValueToMatch$1(other) {
      return this.convertValueToMatch$3(other, null, null);
    },
    convertValueToMatch$3(other, $name, otherName) {
      var t1 =
        other instanceof L.SingleUnitSassNumber0
          ? this._single_unit$_coerceValueToUnit$1(other._single_unit$_unit)
          : null;
      return t1 == null
        ? this.super$SassNumber$convertValueToMatch0(other, $name, otherName)
        : t1;
    },
    coerce$2(newNumerators, newDenominators) {
      var t1 = J.getInterceptor$asx(newNumerators);
      t1 =
        t1.get$length(newNumerators) === 1 && newDenominators.length === 0
          ? this._single_unit$_coerceToUnit$1(t1.$index(newNumerators, 0))
          : null;
      return t1 == null
        ? this.super$SassNumber$coerce0(newNumerators, newDenominators, null)
        : t1;
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      var t1 = J.getInterceptor$asx(newNumerators);
      t1 =
        t1.get$length(newNumerators) === 1 && newDenominators.length === 0
          ? this._single_unit$_coerceValueToUnit$1(t1.$index(newNumerators, 0))
          : null;
      return t1 == null
        ? this.super$SassNumber$coerceValue0(
            newNumerators,
            newDenominators,
            $name
          )
        : t1;
    },
    coerceValueToUnit$2(unit, $name) {
      var t1 = this._single_unit$_coerceValueToUnit$1(unit);
      return t1 == null
        ? this.super$SassNumber$coerceValueToUnit0(unit, $name)
        : t1;
    },
    _single_unit$_coerceToUnit$1(unit) {
      var _this = this,
        t1 = _this._single_unit$_unit;
      if (t1 === unit) return _this;
      return X.NullableExtension_andThen0(
        _this.conversionFactor$2(unit, t1),
        new L.SingleUnitSassNumber__coerceToUnit_closure0(_this, unit)
      );
    },
    _single_unit$_coerceValueToUnit$1(unit) {
      return X.NullableExtension_andThen0(
        this.conversionFactor$2(unit, this._single_unit$_unit),
        new L.SingleUnitSassNumber__coerceValueToUnit_closure0(this)
      );
    },
    multiplyUnits$3(value, otherNumerators, otherDenominators) {
      var mutableOtherDenominators,
        t1 = {};
      t1.value = value;
      t1.newNumerators = otherNumerators;
      mutableOtherDenominators = J.toList$0$ax(otherDenominators);
      B.removeFirstWhere0(
        mutableOtherDenominators,
        new L.SingleUnitSassNumber_multiplyUnits_closure1(t1, this),
        new L.SingleUnitSassNumber_multiplyUnits_closure2(t1, this)
      );
      return T.SassNumber_SassNumber$withUnits0(
        t1.value,
        mutableOtherDenominators,
        t1.newNumerators
      );
    },
    unaryMinus$0() {
      return new L.SingleUnitSassNumber0(
        this._single_unit$_unit,
        -this.value,
        null
      );
    },
    $eq(_, other) {
      var factor;
      if (other == null) return false;
      if (other instanceof L.SingleUnitSassNumber0) {
        factor = this.conversionFactor$2(
          other._single_unit$_unit,
          this._single_unit$_unit
        );
        return (
          factor != null &&
          Math.abs(this.value * factor - other.value) < $.$get$epsilon0()
        );
      } else return false;
    },
    get$hashCode(_) {
      return T.fuzzyHashCode0(
        this.value * this.canonicalMultiplierForUnit$1(this._single_unit$_unit)
      );
    },
  };
  L.SingleUnitSassNumber__coerceToUnit_closure0.prototype = {
    call$1(factor) {
      return new L.SingleUnitSassNumber0(
        this.unit,
        this.$this.value * factor,
        null
      );
    },
    $signature: 440,
  };
  L.SingleUnitSassNumber__coerceValueToUnit_closure0.prototype = {
    call$1(factor) {
      return this.$this.value * factor;
    },
    $signature: 71,
  };
  L.SingleUnitSassNumber_multiplyUnits_closure1.prototype = {
    call$1(denominator) {
      var t1 = this.$this,
        factor = t1.conversionFactor$2(denominator, t1._single_unit$_unit);
      if (factor == null) return false;
      this._box_0.value *= factor;
      return true;
    },
    $signature: 6,
  };
  L.SingleUnitSassNumber_multiplyUnits_closure2.prototype = {
    call$0() {
      var t1 = H._setArrayType(
          [this.$this._single_unit$_unit],
          type$.JSArray_String
        ),
        t2 = this._box_0;
      C.JSArray_methods.addAll$1(t1, t2.newNumerators);
      t2.newNumerators = t1;
    },
    $signature: 0,
  };
  D.SourceMapBuffer.prototype = {
    get$_targetLocation() {
      var t1 = this._source_map_buffer$_buffer._contents,
        t2 = this._line;
      return V.SourceLocation$(t1.length, this._column, t2, null);
    },
    get$length(_) {
      return this._source_map_buffer$_buffer._contents.length;
    },
    forSpan$1$2(span, callback) {
      var t1,
        _this = this,
        wasInSpan = _this._inSpan;
      _this._inSpan = true;
      _this._source_map_buffer$_addEntry$2(
        Y.FileLocation$_(span.file, span._file$_start),
        _this.get$_targetLocation()
      );
      try {
        t1 = callback.call$0();
        return t1;
      } finally {
        _this._inSpan = wasInSpan;
      }
    },
    forSpan$2(span, callback) {
      return this.forSpan$1$2(span, callback, type$.dynamic);
    },
    _source_map_buffer$_addEntry$2(source, target) {
      var entry,
        t2,
        t1 = this._entries;
      if (t1.length !== 0) {
        entry = C.JSArray_methods.get$last(t1);
        t2 = entry.source;
        if (
          t2.file.getLine$1(t2.offset) ===
            source.file.getLine$1(source.offset) &&
          entry.target.line === target.line
        )
          return;
        if (entry.target.offset === target.offset) return;
      }
      t1.push(new L.Entry(source, target, null));
    },
    write$1(_, object) {
      var t1,
        i,
        string = J.toString$0$(object);
      this._source_map_buffer$_buffer._contents += string;
      for (t1 = string.length, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(string, i) === 10)
          this._writeLine$0();
        else ++this._column;
    },
    writeCharCode$1(charCode) {
      this._source_map_buffer$_buffer._contents += H.Primitives_stringFromCharCode(
        charCode
      );
      if (charCode === 10) this._writeLine$0();
      else ++this._column;
    },
    _writeLine$0() {
      var _this = this,
        t1 = _this._entries;
      if (
        C.JSArray_methods.get$last(t1).target.line === _this._line &&
        C.JSArray_methods.get$last(t1).target.column === _this._column
      )
        t1.pop();
      ++_this._line;
      _this._column = 0;
      if (_this._inSpan)
        t1.push(
          new L.Entry(
            C.JSArray_methods.get$last(t1).source,
            _this.get$_targetLocation(),
            null
          )
        );
    },
    toString$0(_) {
      var t1 = this._source_map_buffer$_buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    buildSourceMap$1$prefix(prefix) {
      var i,
        t2,
        prefixColumn,
        _box_0 = {},
        t1 = prefix.length;
      if (t1 === 0)
        return T.SingleMapping_SingleMapping$fromEntries(this._entries);
      _box_0.prefixColumn = _box_0.prefixLines = 0;
      for (i = 0, t2 = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(prefix, i) === 10) {
          ++_box_0.prefixLines;
          _box_0.prefixColumn = 0;
          t2 = 0;
        } else {
          prefixColumn = t2 + 1;
          _box_0.prefixColumn = prefixColumn;
          t2 = prefixColumn;
        }
      t2 = this._entries;
      return T.SingleMapping_SingleMapping$fromEntries(
        new H.MappedListIterable(
          t2,
          new D.SourceMapBuffer_buildSourceMap_closure0(_box_0, t1),
          H._arrayInstanceType(t2)._eval$1('MappedListIterable<1,Entry>')
        )
      );
    },
  };
  D.SourceMapBuffer_buildSourceMap_closure0.prototype = {
    call$1(entry) {
      var t1 = entry.source,
        t2 = entry.target,
        t3 = t2.line,
        t4 = this._box_0,
        t5 = t4.prefixLines;
      t4 = t3 === 0 ? t4.prefixColumn : 0;
      return new L.Entry(
        t1,
        V.SourceLocation$(
          t2.offset + this.prefixLength,
          t2.column + t4,
          t3 + t5,
          null
        ),
        entry.identifierName
      );
    },
    $signature: 200,
  };
  A.StatementSearchVisitor0.prototype = {
    visitAtRootRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitAtRule$1(node) {
      return X.NullableExtension_andThen0(
        node.children,
        this.get$visitChildren()
      );
    },
    visitContentBlock$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitDebugRule$1(node) {
      return null;
    },
    visitDeclaration$1(node) {
      return X.NullableExtension_andThen0(
        node.children,
        this.get$visitChildren()
      );
    },
    visitEachRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitErrorRule$1(node) {
      return null;
    },
    visitExtendRule$1(node) {
      return null;
    },
    visitForRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitForwardRule$1(node) {
      return null;
    },
    visitFunctionRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitIfRule$1(node) {
      var t1 = A._IterableExtension__search0(
        node.clauses,
        new A.StatementSearchVisitor_visitIfRule_closure1(this)
      );
      return t1 == null
        ? X.NullableExtension_andThen0(
            node.lastClause,
            new A.StatementSearchVisitor_visitIfRule_closure2(this)
          )
        : t1;
    },
    visitImportRule$1(node) {
      return null;
    },
    visitIncludeRule$1(node) {
      return X.NullableExtension_andThen0(
        node.content,
        this.get$visitContentBlock()
      );
    },
    visitLoudComment$1(node) {
      return null;
    },
    visitMediaRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitMixinRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitReturnRule$1(node) {
      return null;
    },
    visitSilentComment$1(node) {
      return null;
    },
    visitStyleRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitStylesheet$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitSupportsRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitUseRule$1(node) {
      return null;
    },
    visitVariableDeclaration$1(node) {
      return null;
    },
    visitWarnRule$1(node) {
      return null;
    },
    visitWhileRule$1(node) {
      return this.visitChildren$1(node.children);
    },
    visitChildren$1(children) {
      return A._IterableExtension__search0(
        children,
        new A.StatementSearchVisitor_visitChildren_closure0(this)
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule_closure1.prototype = {
    call$1(clause) {
      return A._IterableExtension__search0(
        clause.children,
        new A.StatementSearchVisitor_visitIfRule__closure2(this.$this)
      );
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor0.T?(IfClause0)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule__closure2.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor0.T?(Statement0)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule_closure2.prototype = {
    call$1(lastClause) {
      return A._IterableExtension__search0(
        lastClause.children,
        new A.StatementSearchVisitor_visitIfRule__closure1(this.$this)
      );
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor0.T?(ElseClause0)'
      );
    },
  };
  A.StatementSearchVisitor_visitIfRule__closure1.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor0.T?(Statement0)'
      );
    },
  };
  A.StatementSearchVisitor_visitChildren_closure0.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1(
        'StatementSearchVisitor0.T?(Statement0)'
      );
    },
  };
  Q.StaticImport0.prototype = {
    toString$0(_) {
      var t1 = this.url.toString$0(0),
        t2 = this.supports;
      if (t2 != null) t1 += ' supports(' + t2.toString$0(0) + ')';
      t2 = this.media;
      if (t2 != null) t1 += ' ' + t2.toString$0(0);
      t1 += H.Primitives_stringFromCharCode(59);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isImport0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  S.StderrLogger0.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var t1;
      if (deprecation)
        J.write$1$x($.$get$stderr0()._node1$_stderr, 'DEPRECATION ');
      J.write$1$x($.$get$stderr0()._node1$_stderr, 'WARNING');
      if (span == null) {
        t1 = $.$get$stderr0();
        t1.writeln$1(': ' + message);
      } else if (trace != null) {
        t1 = $.$get$stderr0();
        t1.writeln$1(': ' + message + '\n\n' + span.highlight$1$color(false));
      } else {
        t1 = $.$get$stderr0();
        t1.writeln$1(' on ' + span.message$2$color(0, '\n' + message, false));
      }
      if (trace != null)
        t1.writeln$1(
          B.indent0(C.JSString_methods.trimRight$0(trace.toString$0(0)), 4)
        );
      t1.writeln$0();
    },
    warn$1($receiver, message) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        null
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {
      var url,
        t3,
        t4,
        t1 = span.file,
        t2 = span._file$_start;
      if (Y.FileLocation$_(t1, t2).file.url == null) url = '-';
      else {
        t3 = Y.FileLocation$_(t1, t2);
        url = $.$get$context().prettyUri$1(t3.file.url);
      }
      t3 = $.$get$stderr0();
      t4 = url + ':';
      t2 = Y.FileLocation$_(t1, t2);
      t2 = t4 + (t2.file.getLine$1(t2.offset) + 1) + ' ';
      t4 = t3._node1$_stderr;
      t1 = J.getInterceptor$x(t4);
      t1.write$1(t4, t2);
      t1.write$1(t4, 'DEBUG');
      t3.writeln$1(': ' + message);
    },
  };
  D.StringExpression0.prototype = {
    get$span() {
      return this.text.span;
    },
    accept$1$1(visitor) {
      return visitor.visitStringExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    asInterpolation$1$static($static) {
      var t1, t2, quote, t3, t4, buffer, t5, t6, _i, value;
      if (!this.hasQuotes) return this.text;
      t1 = this.text;
      t2 = t1.contents;
      quote = D.StringExpression__bestQuote0(
        new H.WhereTypeIterable(t2, type$.WhereTypeIterable_String)
      );
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t3._contents = '' + H.Primitives_stringFromCharCode(quote);
      for (t5 = t2.length, t6 = type$.Expression_2, _i = 0; _i < t5; ++_i) {
        value = t2[_i];
        if (t6._is(value)) {
          buffer._interpolation_buffer0$_flushText$0();
          t4.push(value);
        } else if (typeof value == 'string')
          D.StringExpression__quoteInnerText0(value, quote, buffer, $static);
      }
      t3._contents += H.Primitives_stringFromCharCode(quote);
      return buffer.interpolation$1(t1.span);
    },
    asInterpolation$0() {
      return this.asInterpolation$1$static(false);
    },
    toString$0(_) {
      return this.asInterpolation$0().toString$0(0);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
  };
  D._unquote_closure0.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1('string');
      if (!string.hasQuotes) return string;
      return new D.SassString0(string.text, false);
    },
    $signature: 12,
  };
  D._quote_closure0.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1('string');
      if (string.hasQuotes) return string;
      return new D.SassString0(string.text, true);
    },
    $signature: 12,
  };
  D._length_closure1.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0)
        .assertString$1('string')
        .get$sassLength();
      return new N.UnitlessSassNumber0(t1, null);
    },
    $signature: 9,
  };
  D._insert_closure0.prototype = {
    call$1($arguments) {
      var indexInt,
        codeUnitIndex,
        _s5_ = 'index',
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1('string'),
        insert = t1.$index($arguments, 1).assertString$1('insert'),
        index = t1.$index($arguments, 2).assertNumber$1(_s5_);
      index.assertNoUnits$1(_s5_);
      indexInt = index.assertInt$1(_s5_);
      if (indexInt < 0) indexInt = string.get$sassLength() + indexInt + 2;
      t1 = string.text;
      codeUnitIndex = B.codepointIndexToCodeUnitIndex0(
        t1,
        D._codepointForIndex0(indexInt, string.get$sassLength(), false)
      );
      return new D.SassString0(
        C.JSString_methods.replaceRange$3(
          t1,
          codeUnitIndex,
          codeUnitIndex,
          insert.text
        ),
        string.hasQuotes
      );
    },
    $signature: 12,
  };
  D._index_closure1.prototype = {
    call$1($arguments) {
      var codepointIndex,
        t1 = J.getInterceptor$asx($arguments),
        t2 = t1.$index($arguments, 0).assertString$1('string').text,
        codeUnitIndex = C.JSString_methods.indexOf$1(
          t2,
          t1.$index($arguments, 1).assertString$1('substring').text
        );
      if (codeUnitIndex === -1) return C.C__SassNull;
      codepointIndex = B.codeUnitIndexToCodepointIndex0(t2, codeUnitIndex);
      return new N.UnitlessSassNumber0(codepointIndex + 1, null);
    },
    $signature: 4,
  };
  D._slice_closure0.prototype = {
    call$1($arguments) {
      var lengthInCodepoints,
        endInt,
        startCodepoint,
        endCodepoint,
        _s8_ = 'start-at',
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1('string'),
        start = t1.$index($arguments, 1).assertNumber$1(_s8_),
        end = t1.$index($arguments, 2).assertNumber$1('end-at');
      start.assertNoUnits$1(_s8_);
      end.assertNoUnits$1('end-at');
      lengthInCodepoints = string.get$sassLength();
      endInt = end.assertInt$0();
      if (endInt === 0)
        return string.hasQuotes
          ? $.$get$_emptyQuoted0()
          : $.$get$_emptyUnquoted0();
      startCodepoint = D._codepointForIndex0(
        start.assertInt$0(),
        lengthInCodepoints,
        false
      );
      endCodepoint = D._codepointForIndex0(endInt, lengthInCodepoints, true);
      if (endCodepoint === lengthInCodepoints) --endCodepoint;
      if (endCodepoint < startCodepoint)
        return string.hasQuotes
          ? $.$get$_emptyQuoted0()
          : $.$get$_emptyUnquoted0();
      t1 = string.text;
      return new D.SassString0(
        C.JSString_methods.substring$2(
          t1,
          B.codepointIndexToCodeUnitIndex0(t1, startCodepoint),
          B.codepointIndexToCodeUnitIndex0(t1, endCodepoint + 1)
        ),
        string.hasQuotes
      );
    },
    $signature: 12,
  };
  D._toUpperCase_closure0.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        i,
        t3,
        t4,
        string = J.$index$asx($arguments, 0).assertString$1('string');
      for (t1 = string.text, t2 = t1.length, i = 0, t3 = ''; i < t2; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1(t1, i);
        t3 += H.Primitives_stringFromCharCode(
          t4 >= 97 && t4 <= 122 ? t4 & 4294967263 : t4
        );
      }
      return new D.SassString0(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        string.hasQuotes
      );
    },
    $signature: 12,
  };
  D._toLowerCase_closure0.prototype = {
    call$1($arguments) {
      var t1,
        t2,
        i,
        t3,
        t4,
        string = J.$index$asx($arguments, 0).assertString$1('string');
      for (t1 = string.text, t2 = t1.length, i = 0, t3 = ''; i < t2; ++i) {
        t4 = C.JSString_methods._codeUnitAt$1(t1, i);
        t3 += H.Primitives_stringFromCharCode(
          t4 >= 65 && t4 <= 90 ? t4 | 32 : t4
        );
      }
      return new D.SassString0(
        t3.charCodeAt(0) == 0 ? t3 : t3,
        string.hasQuotes
      );
    },
    $signature: 12,
  };
  D._uniqueId_closure0.prototype = {
    call$1($arguments) {
      var t1 =
        $.$get$_previousUniqueId0() + ($.$get$_random1().nextInt$1(36) + 1);
      $._previousUniqueId0 = t1;
      if (t1 > Math.pow(36, 6))
        $._previousUniqueId0 = C.JSInt_methods.$mod(
          $.$get$_previousUniqueId0(),
          H._asInt(Math.pow(36, 6))
        );
      return new D.SassString0(
        'u' +
          C.JSString_methods.padLeft$2(
            J.toRadixString$1$n($.$get$_previousUniqueId0(), 36),
            6,
            '0'
          ),
        false
      );
    },
    $signature: 12,
  };
  D._NodeSassString.prototype = {};
  D.stringConstructor_closure.prototype = {
    call$3(thisArg, value, dartValue) {
      var t1;
      if (dartValue == null) {
        value.toString;
        t1 = new D.SassString0(value, false);
      } else t1 = dartValue;
      J.set$dartValue$x(thisArg, t1);
    },
    call$2(thisArg, value) {
      return this.call$3(thisArg, value, null);
    },
    'call*': 'call$3',
    $requiredArgCount: 2,
    $defaultValues() {
      return [null];
    },
    $signature: 441,
  };
  D.stringConstructor_closure0.prototype = {
    call$1(thisArg) {
      return J.get$dartValue$x(thisArg).text;
    },
    $signature: 137,
  };
  D.stringConstructor_closure1.prototype = {
    call$2(thisArg, value) {
      J.set$dartValue$x(thisArg, new D.SassString0(value, false));
    },
    $signature: 443,
  };
  D.stringConstructor_closure2.prototype = {
    call$1(thisArg) {
      return N.serializeValue(J.get$dartValue$x(thisArg), true, true);
    },
    $signature: 137,
  };
  D.SassString0.prototype = {
    get$sassLength() {
      var _this = this,
        t1 = _this._string$__SassString_sassLength;
      if (t1 == null) {
        t1 = new P.Runes(_this.text);
        t1 = t1.get$length(t1);
        if (_this._string$__SassString_sassLength == null)
          _this._string$__SassString_sassLength = t1;
        else t1 = H.throwExpression(H.LateError$fieldADI('sassLength'));
      }
      return t1;
    },
    get$isSpecialNumber() {
      var t1, t2;
      if (this.hasQuotes) return false;
      t1 = this.text;
      if (t1.length < 6) return false;
      t2 = C.JSString_methods._codeUnitAt$1(t1, 0) | 32;
      if (t2 === 99) {
        t2 = C.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 108) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 97)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 109)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 4) | 32) !== 112)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 5) === 40;
        } else if (t2 === 97) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 108)
            return false;
          if ((C.JSString_methods._codeUnitAt$1(t1, 3) | 32) !== 99)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 4) === 40;
        } else return false;
      } else if (t2 === 118) {
        if ((C.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 97) return false;
        if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 114)
          return false;
        return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 101) {
        if ((C.JSString_methods._codeUnitAt$1(t1, 1) | 32) !== 110)
          return false;
        if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 118)
          return false;
        return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
      } else if (t2 === 109) {
        t2 = C.JSString_methods._codeUnitAt$1(t1, 1) | 32;
        if (t2 === 97) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 120)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else if (t2 === 105) {
          if ((C.JSString_methods._codeUnitAt$1(t1, 2) | 32) !== 110)
            return false;
          return C.JSString_methods._codeUnitAt$1(t1, 3) === 40;
        } else return false;
      } else return false;
    },
    get$isVar() {
      if (this.hasQuotes) return false;
      var t1 = this.text;
      if (t1.length < 8) return false;
      return (
        (C.JSString_methods._codeUnitAt$1(t1, 0) | 32) === 118 &&
        (C.JSString_methods._codeUnitAt$1(t1, 1) | 32) === 97 &&
        (C.JSString_methods._codeUnitAt$1(t1, 2) | 32) === 114 &&
        C.JSString_methods._codeUnitAt$1(t1, 3) === 40
      );
    },
    get$isBlank() {
      return !this.hasQuotes && this.text.length === 0;
    },
    accept$1$1(visitor) {
      var t1 = visitor._serialize0$_quote && this.hasQuotes,
        t2 = this.text;
      if (t1) visitor._serialize0$_visitQuotedString$1(t2);
      else visitor._serialize0$_visitUnquotedString$1(t2);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    assertString$1($name) {
      return this;
    },
    plus$1(other) {
      var t1 = this.text,
        t2 = this.hasQuotes;
      if (other instanceof D.SassString0)
        return new D.SassString0(t1 + other.text, t2);
      else
        return new D.SassString0(t1 + N.serializeValue(other, false, true), t2);
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof D.SassString0 && this.text === other.text;
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this.text);
    },
  };
  X.ModifiableCssStyleRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssStyleRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return X.ModifiableCssStyleRule$0(
        this.selector,
        this.span,
        this.originalSelector
      );
    },
    $isCssStyleRule0: 1,
    get$span() {
      return this.span;
    },
  };
  X.StyleRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitStyleRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        this.selector.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  V.CssStylesheet0.prototype = {
    get$isGroupEnd() {
      return false;
    },
    get$isChildless() {
      return false;
    },
    accept$1$1(visitor) {
      return visitor.visitCssStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    get$children(receiver) {
      return this.children;
    },
    get$span() {
      return this.span;
    },
  };
  V.ModifiableCssStylesheet0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return V.ModifiableCssStylesheet$0(this.span);
    },
    $isCssStylesheet0: 1,
    get$span() {
      return this.span;
    },
  };
  V.StylesheetParser0.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(
        new V.StylesheetParser_parse_closure0(this)
      );
    },
    parseArgumentDeclaration$0() {
      return this._stylesheet0$_parseSingleProduction$1$1(
        new V.StylesheetParser_parseArgumentDeclaration_closure0(this),
        type$.ArgumentDeclaration_2
      );
    },
    _stylesheet0$_parseSingleProduction$1$1(production, $T) {
      return this.wrapSpanFormatException$1(
        new V.StylesheetParser__parseSingleProduction_closure0(
          this,
          production,
          $T
        )
      );
    },
    parseSignature$0() {
      return this.wrapSpanFormatException$1(
        new V.StylesheetParser_parseSignature_closure(this)
      );
    },
    _stylesheet0$_statement$1$root(root) {
      var t2,
        _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 64:
          return _this.atRule$2$root(
            new V.StylesheetParser__statement_closure0(_this),
            root
          );
        case 43:
          if (!_this.get$indented() || !_this.lookingAtIdentifier$1(1))
            return _this._stylesheet0$_styleRule$0();
          _this._stylesheet0$_isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          return _this._stylesheet0$_includeRule$1(
            new S._SpanScannerState(t1, t2)
          );
        case 61:
          if (!_this.get$indented()) return _this._stylesheet0$_styleRule$0();
          _this._stylesheet0$_isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          _this.whitespace$0();
          return _this._stylesheet0$_mixinRule$1(
            new S._SpanScannerState(t1, t2)
          );
        case 125:
          t1.error$2$length(0, 'unmatched "}".', 1);
          break;
        default:
          return _this._stylesheet0$_inStyleRule ||
            _this._stylesheet0$_inUnknownAtRule ||
            _this._stylesheet0$_inMixin ||
            _this._stylesheet0$_inContentBlock
            ? _this._stylesheet0$_declarationOrStyleRule$0()
            : _this._stylesheet0$_variableDeclarationOrStyleRule$0();
      }
    },
    _stylesheet0$_statement$0() {
      return this._stylesheet0$_statement$1$root(false);
    },
    variableDeclarationWithoutNamespace$2(namespace, start_) {
      var t1,
        start,
        $name,
        t2,
        value,
        flagStart,
        guarded,
        global,
        flag,
        endPosition,
        t3,
        t4,
        t5,
        declaration,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      if (start_ == null) {
        t1 = _this.scanner;
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      } else start = start_;
      $name = _this.variableName$0();
      t1 = namespace != null;
      if (t1)
        _this._stylesheet0$_assertPublic$2(
          $name,
          new V.StylesheetParser_variableDeclarationWithoutNamespace_closure1(
            _this,
            start
          )
        );
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t2 = _this.scanner;
      t2.expectChar$1(58);
      _this.whitespace$0();
      value = _this.expression$0();
      flagStart = new S._SpanScannerState(t2, t2._string_scanner$_position);
      for (guarded = false, global = false; t2.scanChar$1(33); ) {
        flag = _this.identifier$0();
        if (flag === 'default') guarded = true;
        else if (flag === 'global') {
          if (t1) {
            endPosition = t2._string_scanner$_position;
            t3 = t2._sourceFile;
            t4 = flagStart.position;
            t5 = new Y._FileSpan(t3, t4, endPosition);
            t5._FileSpan$3(t3, t4, endPosition);
            _this.error$2(0, string$.x21globa, t5);
          }
          global = true;
        } else {
          endPosition = t2._string_scanner$_position;
          t3 = t2._sourceFile;
          t4 = flagStart.position;
          t5 = new Y._FileSpan(t3, t4, endPosition);
          t5._FileSpan$3(t3, t4, endPosition);
          _this.error$2(0, 'Invalid flag name.', t5);
        }
        _this.whitespace$0();
        flagStart = new S._SpanScannerState(t2, t2._string_scanner$_position);
      }
      _this.expectStatementSeparator$1('variable declaration');
      declaration = Z.VariableDeclaration$0(
        $name,
        value,
        t2.spanFrom$1(start),
        precedingComment,
        global,
        guarded,
        namespace
      );
      if (global)
        _this._stylesheet0$_globalVariables.putIfAbsent$2(
          $name,
          new V.StylesheetParser_variableDeclarationWithoutNamespace_closure2(
            declaration
          )
        );
      return declaration;
    },
    variableDeclarationWithoutNamespace$0() {
      return this.variableDeclarationWithoutNamespace$2(null, null);
    },
    _stylesheet0$_variableDeclarationOrStyleRule$0() {
      var t1,
        t2,
        variableOrInterpolation,
        t3,
        _this = this;
      if (_this.get$plainCss()) return _this._stylesheet0$_styleRule$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._stylesheet0$_styleRule$0();
      if (!_this.lookingAtIdentifier$0())
        return _this._stylesheet0$_styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      variableOrInterpolation = _this._stylesheet0$_variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof Z.VariableDeclaration0)
        return variableOrInterpolation;
      else {
        t3 = new Z.InterpolationBuffer0(
          new P.StringBuffer(''),
          H._setArrayType([], type$.JSArray_Object)
        );
        t3.addInterpolation$1(
          type$.Interpolation_2._as(variableOrInterpolation)
        );
        return _this._stylesheet0$_styleRule$2(
          t3,
          new S._SpanScannerState(t1, t2)
        );
      }
    },
    _stylesheet0$_declarationOrStyleRule$0() {
      var t1,
        t2,
        declarationOrBuffer,
        _this = this;
      if (
        _this.get$plainCss() &&
        _this._stylesheet0$_inStyleRule &&
        !_this._stylesheet0$_inUnknownAtRule
      )
        return _this._stylesheet0$_propertyOrVariableDeclaration$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._stylesheet0$_styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      declarationOrBuffer = _this._stylesheet0$_declarationOrBuffer$0();
      return type$.Statement_2._is(declarationOrBuffer)
        ? declarationOrBuffer
        : _this._stylesheet0$_styleRule$2(
            type$.InterpolationBuffer_2._as(declarationOrBuffer),
            new S._SpanScannerState(t1, t2)
          );
    },
    _stylesheet0$_declarationOrBuffer$0() {
      var midBuffer,
        couldBeSelector,
        beforeDeclaration,
        additional,
        t4,
        startsWithPunctuation,
        variableOrInterpolation,
        t5,
        $name,
        postColonWhitespace,
        value,
        exception,
        _this = this,
        t1 = {},
        t2 = _this.scanner,
        start = new S._SpanScannerState(t2, t2._string_scanner$_position),
        t3 = type$.JSArray_Object,
        nameBuffer = new Z.InterpolationBuffer0(
          new P.StringBuffer(''),
          H._setArrayType([], t3)
        ),
        first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46) t4 = first === 35 && t2.peekChar$1(1) !== 123;
          else t4 = true;
        else t4 = true;
      else t4 = true;
      if (t4) {
        t4 = t2.readChar$0();
        nameBuffer._interpolation_buffer0$_text._contents += H.Primitives_stringFromCharCode(
          t4
        );
        t4 = _this.rawText$1(_this.get$whitespace());
        nameBuffer._interpolation_buffer0$_text._contents += t4;
        startsWithPunctuation = true;
      } else startsWithPunctuation = false;
      if (!_this._stylesheet0$_lookingAtInterpolatedIdentifier$0())
        return nameBuffer;
      variableOrInterpolation = startsWithPunctuation
        ? _this.interpolatedIdentifier$0()
        : _this._stylesheet0$_variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof Z.VariableDeclaration0)
        return variableOrInterpolation;
      else
        nameBuffer.addInterpolation$1(
          type$.Interpolation_2._as(variableOrInterpolation)
        );
      _this._stylesheet0$_isUseAllowed = false;
      if (t2.matches$1('/*')) {
        t4 = _this.rawText$1(_this.get$loudComment());
        nameBuffer._interpolation_buffer0$_text._contents += t4;
      }
      midBuffer = new P.StringBuffer('');
      t4 = _this.get$whitespace();
      midBuffer._contents += _this.rawText$1(t4);
      t5 = t2._string_scanner$_position;
      if (!t2.scanChar$1(58)) {
        if (midBuffer._contents.length !== 0)
          nameBuffer._interpolation_buffer0$_text._contents += H.Primitives_stringFromCharCode(
            32
          );
        return nameBuffer;
      }
      midBuffer._contents += H.Primitives_stringFromCharCode(58);
      $name = nameBuffer.interpolation$1(
        t2.spanFrom$2(start, new S._SpanScannerState(t2, t5))
      );
      if (C.JSString_methods.startsWith$1($name.get$initialPlain(), '--')) {
        t1 = _this._stylesheet0$_interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1('custom property');
        return L.Declaration$0(
          $name,
          new D.StringExpression0(t1, false),
          t2.spanFrom$1(start)
        );
      }
      if (t2.scanChar$1(58)) {
        t1 = nameBuffer;
        t2 = t1._interpolation_buffer0$_text;
        t3 = t2._contents += H.S(midBuffer);
        t2._contents = t3 + H.Primitives_stringFromCharCode(58);
        return t1;
      } else if (
        _this.get$indented() &&
        _this._stylesheet0$_lookingAtInterpolatedIdentifier$0()
      ) {
        t1 = nameBuffer;
        t1._interpolation_buffer0$_text._contents += H.S(midBuffer);
        return t1;
      }
      postColonWhitespace = _this.rawText$1(t4);
      if (_this.lookingAtChildren$0())
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_declarationChild(),
          start,
          new V.StylesheetParser__declarationOrBuffer_closure1($name)
        );
      midBuffer._contents += postColonWhitespace;
      couldBeSelector =
        postColonWhitespace.length === 0 &&
        _this._stylesheet0$_lookingAtInterpolatedIdentifier$0();
      beforeDeclaration = new S._SpanScannerState(
        t2,
        t2._string_scanner$_position
      );
      t4 = t1.value = null;
      try {
        if (_this.lookingAtChildren$0()) {
          t3 = H._setArrayType([], t3);
          t4 = Y.FileLocation$_(t2._sourceFile, t2._string_scanner$_position);
          t5 = t4.offset;
          value = new D.StringExpression0(
            X.Interpolation$0(t3, Y._FileSpan$(t4.file, t5, t5)),
            true
          );
        } else value = _this.expression$0();
        t3 = t1.value = value;
        if (_this.lookingAtChildren$0()) {
          if (couldBeSelector) _this.expectStatementSeparator$0();
        } else if (!_this.atEndOfStatement$0())
          _this.expectStatementSeparator$0();
      } catch (exception) {
        if (type$.FormatException._is(H.unwrapException(exception))) {
          if (!couldBeSelector) throw exception;
          t2.set$state(beforeDeclaration);
          additional = _this.almostAnyValue$0();
          if (!_this.get$indented() && t2.peekChar$0() === 59) throw exception;
          nameBuffer._interpolation_buffer0$_text._contents += H.S(midBuffer);
          nameBuffer.addInterpolation$1(additional);
          return nameBuffer;
        } else throw exception;
      }
      if (_this.lookingAtChildren$0())
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_declarationChild(),
          start,
          new V.StylesheetParser__declarationOrBuffer_closure2(t1, $name)
        );
      else {
        _this.expectStatementSeparator$0();
        return L.Declaration$0($name, t3, t2.spanFrom$1(start));
      }
    },
    _stylesheet0$_variableDeclarationOrInterpolation$0() {
      var t1,
        start,
        identifier,
        t2,
        buffer,
        _this = this;
      if (!_this.lookingAtIdentifier$0())
        return _this.interpolatedIdentifier$0();
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      identifier = _this.identifier$0();
      if (t1.matches$1('.$')) {
        t1.readChar$0();
        return _this.variableDeclarationWithoutNamespace$2(identifier, start);
      } else {
        t2 = new P.StringBuffer('');
        buffer = new Z.InterpolationBuffer0(
          t2,
          H._setArrayType([], type$.JSArray_Object)
        );
        t2._contents = '' + identifier;
        if (_this._stylesheet0$_lookingAtInterpolatedIdentifierBody$0())
          buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        return buffer.interpolation$1(t1.spanFrom$1(start));
      }
    },
    _stylesheet0$_styleRule$2(buffer, start_) {
      var t2,
        start,
        interpolation,
        wasInStyleRule,
        _this = this,
        t1 = {};
      _this._stylesheet0$_isUseAllowed = false;
      if (start_ == null) {
        t2 = _this.scanner;
        start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      } else start = start_;
      interpolation = t1.interpolation = _this.styleRuleSelector$0();
      if (buffer != null) {
        buffer.addInterpolation$1(interpolation);
        t2 = t1.interpolation = buffer.interpolation$1(
          _this.scanner.spanFrom$1(start)
        );
      } else t2 = interpolation;
      if (t2.contents.length === 0) _this.scanner.error$1(0, 'expected "}".');
      wasInStyleRule = _this._stylesheet0$_inStyleRule;
      _this._stylesheet0$_inStyleRule = true;
      return _this._stylesheet0$_withChildren$3(
        _this.get$_stylesheet0$_statement(),
        start,
        new V.StylesheetParser__styleRule_closure0(
          t1,
          _this,
          wasInStyleRule,
          start
        )
      );
    },
    _stylesheet0$_styleRule$0() {
      return this._stylesheet0$_styleRule$2(null, null);
    },
    _stylesheet0$_propertyOrVariableDeclaration$1$parseCustomProperties(
      parseCustomProperties
    ) {
      var first,
        t3,
        nameBuffer,
        variableOrInterpolation,
        $name,
        value,
        _this = this,
        _s48_ = string$.Nested,
        t1 = {},
        t2 = _this.scanner,
        start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      t1.name = null;
      first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46) t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else t3 = true;
        else t3 = true;
      else t3 = true;
      if (t3) {
        t3 = new P.StringBuffer('');
        nameBuffer = new Z.InterpolationBuffer0(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
        t3._contents += H.Primitives_stringFromCharCode(t2.readChar$0());
        t3._contents += _this.rawText$1(_this.get$whitespace());
        nameBuffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        t3 = t1.name = nameBuffer.interpolation$1(t2.spanFrom$1(start));
      } else if (!_this.get$plainCss()) {
        variableOrInterpolation = _this._stylesheet0$_variableDeclarationOrInterpolation$0();
        if (variableOrInterpolation instanceof Z.VariableDeclaration0)
          return variableOrInterpolation;
        else {
          type$.Interpolation_2._as(variableOrInterpolation);
          t1.name = variableOrInterpolation;
        }
        t3 = variableOrInterpolation;
      } else {
        $name = _this.interpolatedIdentifier$0();
        t1.name = $name;
        t3 = $name;
      }
      _this.whitespace$0();
      t2.expectChar$1(58);
      if (
        parseCustomProperties &&
        C.JSString_methods.startsWith$1(t3.get$initialPlain(), '--')
      ) {
        t1 = _this._stylesheet0$_interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1('custom property');
        return L.Declaration$0(
          t3,
          new D.StringExpression0(t1, false),
          t2.spanFrom$1(start)
        );
      }
      _this.whitespace$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss()) t2.error$1(0, _s48_);
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_declarationChild(),
          start,
          new V.StylesheetParser__propertyOrVariableDeclaration_closure1(t1)
        );
      }
      value = _this.expression$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss()) t2.error$1(0, _s48_);
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_declarationChild(),
          start,
          new V.StylesheetParser__propertyOrVariableDeclaration_closure2(
            t1,
            value
          )
        );
      } else {
        _this.expectStatementSeparator$0();
        return L.Declaration$0(t3, value, t2.spanFrom$1(start));
      }
    },
    _stylesheet0$_propertyOrVariableDeclaration$0() {
      return this._stylesheet0$_propertyOrVariableDeclaration$1$parseCustomProperties(
        true
      );
    },
    _stylesheet0$_declarationChild$0() {
      if (this.scanner.peekChar$0() === 64)
        return this._stylesheet0$_declarationAtRule$0();
      return this._stylesheet0$_propertyOrVariableDeclaration$1$parseCustomProperties(
        false
      );
    },
    atRule$2$root(child, root) {
      var $name,
        wasUseAllowed,
        value,
        optional,
        url,
        namespace,
        configuration,
        span,
        _this = this,
        _s9_ = '@use rule',
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$2$name(64, '@-rule');
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      wasUseAllowed = _this._stylesheet0$_isUseAllowed;
      _this._stylesheet0$_isUseAllowed = false;
      switch ($name.get$asPlain()) {
        case 'at-root':
          return _this._stylesheet0$_atRootRule$1(start);
        case 'content':
          return _this._stylesheet0$_contentRule$1(start);
        case 'debug':
          return _this._stylesheet0$_debugRule$1(start);
        case 'each':
          return _this._stylesheet0$_eachRule$2(start, child);
        case 'else':
          return _this._stylesheet0$_disallowedAtRule$1(start);
        case 'error':
          return _this._stylesheet0$_errorRule$1(start);
        case 'extend':
          if (
            !_this._stylesheet0$_inStyleRule &&
            !_this._stylesheet0$_inMixin &&
            !_this._stylesheet0$_inContentBlock
          )
            _this.error$2(0, string$.x40exten, t1.spanFrom$1(start));
          value = _this.almostAnyValue$0();
          optional = t1.scanChar$1(33);
          if (optional) _this.expectIdentifier$1('optional');
          _this.expectStatementSeparator$1('@extend rule');
          return new X.ExtendRule0(value, optional, t1.spanFrom$1(start));
        case 'for':
          return _this._stylesheet0$_forRule$2(start, child);
        case 'forward':
          _this._stylesheet0$_isUseAllowed = wasUseAllowed;
          if (!root) _this._stylesheet0$_disallowedAtRule$1(start);
          return _this._stylesheet0$_forwardRule$1(start);
        case 'function':
          return _this._stylesheet0$_functionRule$1(start);
        case 'if':
          return _this._stylesheet0$_ifRule$2(start, child);
        case 'import':
          return _this._stylesheet0$_importRule$1(start);
        case 'include':
          return _this._stylesheet0$_includeRule$1(start);
        case 'media':
          return _this.mediaRule$1(start);
        case 'mixin':
          return _this._stylesheet0$_mixinRule$1(start);
        case '-moz-document':
          return _this.mozDocumentRule$2(start, $name);
        case 'return':
          return _this._stylesheet0$_disallowedAtRule$1(start);
        case 'supports':
          return _this.supportsRule$1(start);
        case 'use':
          _this._stylesheet0$_isUseAllowed = wasUseAllowed;
          if (!root) _this._stylesheet0$_disallowedAtRule$1(start);
          url = _this._stylesheet0$_urlString$0();
          _this.whitespace$0();
          namespace = _this._stylesheet0$_useNamespace$2(url, start);
          _this.whitespace$0();
          configuration = _this._stylesheet0$_configuration$0();
          _this.expectStatementSeparator$1(_s9_);
          span = t1.spanFrom$1(start);
          if (!_this._stylesheet0$_isUseAllowed)
            _this.error$2(0, string$.x40use_r, span);
          _this.expectStatementSeparator$1(_s9_);
          t1 = new T.UseRule0(
            url,
            namespace,
            configuration == null
              ? C.List_empty16
              : P.List_List$unmodifiable(
                  configuration,
                  type$.ConfiguredVariable_2
                ),
            span
          );
          t1.UseRule$4$configuration0(url, namespace, span, configuration);
          return t1;
        case 'warn':
          return _this._stylesheet0$_warnRule$1(start);
        case 'while':
          return _this._stylesheet0$_whileRule$2(start, child);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    _stylesheet0$_declarationAtRule$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._stylesheet0$_plainAtRuleName$0()) {
        case 'content':
          return _this._stylesheet0$_contentRule$1(start);
        case 'debug':
          return _this._stylesheet0$_debugRule$1(start);
        case 'each':
          return _this._stylesheet0$_eachRule$2(
            start,
            _this.get$_stylesheet0$_declarationChild()
          );
        case 'else':
          return _this._stylesheet0$_disallowedAtRule$1(start);
        case 'error':
          return _this._stylesheet0$_errorRule$1(start);
        case 'for':
          return _this._stylesheet0$_forRule$2(
            start,
            _this.get$_stylesheet0$_declarationChild()
          );
        case 'if':
          return _this._stylesheet0$_ifRule$2(
            start,
            _this.get$_stylesheet0$_declarationChild()
          );
        case 'include':
          return _this._stylesheet0$_includeRule$1(start);
        case 'warn':
          return _this._stylesheet0$_warnRule$1(start);
        case 'while':
          return _this._stylesheet0$_whileRule$2(
            start,
            _this.get$_stylesheet0$_declarationChild()
          );
        default:
          return _this._stylesheet0$_disallowedAtRule$1(start);
      }
    },
    _stylesheet0$_functionChild$0() {
      var state,
        variableDeclarationError,
        statement,
        t2,
        namespace,
        exception,
        t3,
        start,
        value,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 64) {
        t2 = t1._string_scanner$_position;
        state = new S._SpanScannerState(t1, t2);
        try {
          namespace = _this.identifier$0();
          t1.expectChar$1(46);
          t2 = _this.variableDeclarationWithoutNamespace$2(
            namespace,
            new S._SpanScannerState(t1, t2)
          );
          return t2;
        } catch (exception) {
          t2 = H.unwrapException(exception);
          t3 = type$.SourceSpanFormatException;
          if (t3._is(t2)) {
            variableDeclarationError = t2;
            t1.set$state(state);
            statement = null;
            try {
              statement = _this._stylesheet0$_declarationOrStyleRule$0();
            } catch (exception) {
              if (t3._is(H.unwrapException(exception)))
                throw H.wrapException(variableDeclarationError);
              else throw exception;
            }
            _this.error$2(
              0,
              '@function rules may not contain ' +
                (statement instanceof X.StyleRule0
                  ? 'style rules'
                  : 'declarations') +
                '.',
              statement.get$span()
            );
          } else throw exception;
        }
      }
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._stylesheet0$_plainAtRuleName$0()) {
        case 'debug':
          return _this._stylesheet0$_debugRule$1(start);
        case 'each':
          return _this._stylesheet0$_eachRule$2(
            start,
            _this.get$_stylesheet0$_functionChild()
          );
        case 'else':
          return _this._stylesheet0$_disallowedAtRule$1(start);
        case 'error':
          return _this._stylesheet0$_errorRule$1(start);
        case 'for':
          return _this._stylesheet0$_forRule$2(
            start,
            _this.get$_stylesheet0$_functionChild()
          );
        case 'if':
          return _this._stylesheet0$_ifRule$2(
            start,
            _this.get$_stylesheet0$_functionChild()
          );
        case 'return':
          value = _this.expression$0();
          _this.expectStatementSeparator$1('@return rule');
          return new B.ReturnRule0(value, t1.spanFrom$1(start));
        case 'warn':
          return _this._stylesheet0$_warnRule$1(start);
        case 'while':
          return _this._stylesheet0$_whileRule$2(
            start,
            _this.get$_stylesheet0$_functionChild()
          );
        default:
          return _this._stylesheet0$_disallowedAtRule$1(start);
      }
    },
    _stylesheet0$_plainAtRuleName$0() {
      this.scanner.expectChar$2$name(64, '@-rule');
      var $name = this.identifier$0();
      this.whitespace$0();
      return $name;
    },
    _stylesheet0$_atRootRule$1(start) {
      var query,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 40) {
        query = _this._stylesheet0$_atRootQuery$0();
        _this.whitespace$0();
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_statement(),
          start,
          new V.StylesheetParser__atRootRule_closure1(query)
        );
      } else if (_this.lookingAtChildren$0())
        return _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_statement(),
          start,
          new V.StylesheetParser__atRootRule_closure2()
        );
      else
        return V.AtRootRule$0(
          H._setArrayType(
            [_this._stylesheet0$_styleRule$0()],
            type$.JSArray_Statement_2
          ),
          t1.spanFrom$1(start),
          null
        );
    },
    _stylesheet0$_atRootQuery$0() {
      var interpolation,
        t2,
        t3,
        t4,
        buffer,
        t5,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return X.Interpolation$0(
          H._setArrayType([interpolation], type$.JSArray_Object),
          interpolation.get$span()
        );
      }
      t2 = t1._string_scanner$_position;
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t1.expectChar$1(40);
      t3._contents += H.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this.expression$0();
      buffer._interpolation_buffer0$_flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += H.Primitives_stringFromCharCode(58);
        t3._contents = t5 + H.Primitives_stringFromCharCode(32);
        t5 = _this.expression$0();
        buffer._interpolation_buffer0$_flushText$0();
        t4.push(t5);
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += H.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_contentRule$1(start) {
      var t1,
        $arguments,
        t2,
        t3,
        _this = this;
      if (!_this._stylesheet0$_inMixin)
        _this.error$2(0, string$.x40conte, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._stylesheet0$_argumentInvocation$1$mixin(true);
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = X.ArgumentInvocation$empty0(Y._FileSpan$(t2.file, t3, t3));
      }
      _this.expectStatementSeparator$1('@content rule');
      return new Q.ContentRule0($arguments, t1.spanFrom$1(start));
    },
    _stylesheet0$_debugRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@debug rule');
      return new Q.DebugRule0(value, this.scanner.spanFrom$1(start));
    },
    _stylesheet0$_eachRule$2(start, child) {
      var variables,
        t1,
        _this = this,
        wasInControlDirective = _this._stylesheet0$_inControlDirective;
      _this._stylesheet0$_inControlDirective = true;
      variables = H._setArrayType(
        [_this.variableName$0()],
        type$.JSArray_String
      );
      _this.whitespace$0();
      for (t1 = _this.scanner; t1.scanChar$1(44); ) {
        _this.whitespace$0();
        t1.expectChar$1(36);
        variables.push(_this.identifier$1$normalize(true));
        _this.whitespace$0();
      }
      _this.expectIdentifier$1('in');
      _this.whitespace$0();
      return _this._stylesheet0$_withChildren$3(
        child,
        start,
        new V.StylesheetParser__eachRule_closure0(
          _this,
          wasInControlDirective,
          variables,
          _this.expression$0()
        )
      );
    },
    _stylesheet0$_errorRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@error rule');
      return new D.ErrorRule0(value, this.scanner.spanFrom$1(start));
    },
    _stylesheet0$_functionRule$1(start) {
      var $name,
        $arguments,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      $arguments = _this._stylesheet0$_argumentDeclaration$0();
      if (_this._stylesheet0$_inMixin || _this._stylesheet0$_inContentBlock)
        _this.error$2(0, string$.Mixinscf, _this.scanner.spanFrom$1(start));
      else if (_this._stylesheet0$_inControlDirective)
        _this.error$2(0, string$.Functi, _this.scanner.spanFrom$1(start));
      switch (B.unvendor0($name)) {
        case 'calc':
        case 'element':
        case 'expression':
        case 'url':
        case 'and':
        case 'or':
        case 'not':
        case 'clamp':
          _this.error$2(
            0,
            'Invalid function name.',
            _this.scanner.spanFrom$1(start)
          );
          break;
      }
      _this.whitespace$0();
      return _this._stylesheet0$_withChildren$3(
        _this.get$_stylesheet0$_functionChild(),
        start,
        new V.StylesheetParser__functionRule_closure0(
          $name,
          $arguments,
          precedingComment
        )
      );
    },
    _stylesheet0$_forRule$2(start, child) {
      var variable,
        from,
        _this = this,
        t1 = {},
        wasInControlDirective = _this._stylesheet0$_inControlDirective;
      _this._stylesheet0$_inControlDirective = true;
      variable = _this.variableName$0();
      _this.whitespace$0();
      _this.expectIdentifier$1('from');
      _this.whitespace$0();
      t1.exclusive = null;
      from = _this.expression$1$until(
        new V.StylesheetParser__forRule_closure1(t1, _this)
      );
      if (t1.exclusive == null)
        _this.scanner.error$1(0, 'Expected "to" or "through".');
      _this.whitespace$0();
      return _this._stylesheet0$_withChildren$3(
        child,
        start,
        new V.StylesheetParser__forRule_closure2(
          t1,
          _this,
          wasInControlDirective,
          variable,
          from,
          _this.expression$0()
        )
      );
    },
    _stylesheet0$_forwardRule$1(start) {
      var prefix,
        members,
        shownMixinsAndFunctions,
        shownVariables,
        hiddenVariables,
        hiddenMixinsAndFunctions,
        configuration,
        span,
        t1,
        t2,
        t3,
        t4,
        _this = this,
        _null = null,
        url = _this._stylesheet0$_urlString$0();
      _this.whitespace$0();
      if (_this.scanIdentifier$1('as')) {
        _this.whitespace$0();
        prefix = _this.identifier$1$normalize(true);
        _this.scanner.expectChar$1(42);
        _this.whitespace$0();
      } else prefix = _null;
      if (_this.scanIdentifier$1('show')) {
        members = _this._stylesheet0$_memberList$0();
        shownMixinsAndFunctions = members.item1;
        shownVariables = members.item2;
        hiddenVariables = _null;
        hiddenMixinsAndFunctions = hiddenVariables;
      } else {
        if (_this.scanIdentifier$1('hide')) {
          members = _this._stylesheet0$_memberList$0();
          hiddenMixinsAndFunctions = members.item1;
          hiddenVariables = members.item2;
        } else {
          hiddenVariables = _null;
          hiddenMixinsAndFunctions = hiddenVariables;
        }
        shownVariables = _null;
        shownMixinsAndFunctions = shownVariables;
      }
      configuration = _this._stylesheet0$_configuration$1$allowGuarded(true);
      _this.expectStatementSeparator$1('@forward rule');
      span = _this.scanner.spanFrom$1(start);
      if (!_this._stylesheet0$_isUseAllowed)
        _this.error$2(0, string$.x40forwa, span);
      if (shownMixinsAndFunctions != null) {
        shownVariables.toString;
        t1 = type$.String;
        t2 = P.LinkedHashSet_LinkedHashSet$of(shownMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = P.LinkedHashSet_LinkedHashSet$of(shownVariables, t1);
        t4 =
          configuration == null
            ? C.List_empty16
            : P.List_List$unmodifiable(
                configuration,
                type$.ConfiguredVariable_2
              );
        return new L.ForwardRule0(
          url,
          new L.UnmodifiableSetView(t2, t3),
          new L.UnmodifiableSetView(t1, t3),
          _null,
          _null,
          prefix,
          t4,
          span
        );
      } else if (hiddenMixinsAndFunctions != null) {
        hiddenVariables.toString;
        t1 = type$.String;
        t2 = P.LinkedHashSet_LinkedHashSet$of(hiddenMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = P.LinkedHashSet_LinkedHashSet$of(hiddenVariables, t1);
        t4 =
          configuration == null
            ? C.List_empty16
            : P.List_List$unmodifiable(
                configuration,
                type$.ConfiguredVariable_2
              );
        return new L.ForwardRule0(
          url,
          _null,
          _null,
          new L.UnmodifiableSetView(t2, t3),
          new L.UnmodifiableSetView(t1, t3),
          prefix,
          t4,
          span
        );
      } else
        return new L.ForwardRule0(
          url,
          _null,
          _null,
          _null,
          _null,
          prefix,
          configuration == null
            ? C.List_empty16
            : P.List_List$unmodifiable(
                configuration,
                type$.ConfiguredVariable_2
              ),
          span
        );
    },
    _stylesheet0$_memberList$0() {
      var _this = this,
        t1 = type$.String,
        identifiers = P.LinkedHashSet_LinkedHashSet$_empty(t1),
        variables = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      t1 = _this.scanner;
      do {
        _this.whitespace$0();
        _this.withErrorMessage$2(
          string$.Expect,
          new V.StylesheetParser__memberList_closure0(
            _this,
            variables,
            identifiers
          )
        );
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      return new S.Tuple2(
        identifiers,
        variables,
        type$.Tuple2_of_Set_String_and_Set_String
      );
    },
    _stylesheet0$_ifRule$2(start, child) {
      var condition,
        children,
        clauses,
        lastClause,
        span,
        _this = this,
        ifIndentation = _this.get$currentIndentation(),
        wasInControlDirective = _this._stylesheet0$_inControlDirective;
      _this._stylesheet0$_inControlDirective = true;
      condition = _this.expression$0();
      children = _this.children$1(0, child);
      _this.whitespaceWithoutComments$0();
      clauses = H._setArrayType(
        [V.IfClause$0(condition, children)],
        type$.JSArray_IfClause_2
      );
      while (true) {
        if (!_this.scanElse$1(ifIndentation)) {
          lastClause = null;
          break;
        }
        _this.whitespace$0();
        if (_this.scanIdentifier$1('if')) {
          _this.whitespace$0();
          clauses.push(
            V.IfClause$0(_this.expression$0(), _this.children$1(0, child))
          );
        } else {
          lastClause = V.ElseClause$0(_this.children$1(0, child));
          break;
        }
      }
      _this._stylesheet0$_inControlDirective = wasInControlDirective;
      span = _this.scanner.spanFrom$1(start);
      _this.whitespaceWithoutComments$0();
      return new V.IfRule0(
        P.List_List$unmodifiable(clauses, type$.IfClause_2),
        lastClause,
        span
      );
    },
    _stylesheet0$_importRule$1(start) {
      var argument,
        _this = this,
        imports = H._setArrayType([], type$.JSArray_Import_2),
        t1 = _this.scanner;
      do {
        _this.whitespace$0();
        argument = _this.importArgument$0();
        if (
          (_this._stylesheet0$_inControlDirective ||
            _this._stylesheet0$_inMixin) &&
          argument instanceof B.DynamicImport0
        )
          _this._stylesheet0$_disallowedAtRule$1(start);
        imports.push(argument);
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      _this.expectStatementSeparator$1('@import rule');
      t1 = t1.spanFrom$1(start);
      return new B.ImportRule0(
        P.List_List$unmodifiable(imports, type$.Import_2),
        t1
      );
    },
    importArgument$0() {
      var url,
        urlSpan,
        innerError,
        queries,
        t2,
        t3,
        t4,
        exception,
        _this = this,
        _null = null,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        next = t1.peekChar$0();
      if (next === 117 || next === 85) {
        url = _this.dynamicUrl$0();
        _this.whitespace$0();
        queries = _this.tryImportQueries$0();
        t2 = X.Interpolation$0(
          H._setArrayType([url], type$.JSArray_Object),
          t1.spanFrom$1(start)
        );
        t1 = t1.spanFrom$1(start);
        t3 = queries == null;
        t4 = t3 ? _null : queries.item1;
        return new Q.StaticImport0(t2, t4, t3 ? _null : queries.item2, t1);
      }
      url = _this.string$0();
      urlSpan = t1.spanFrom$1(start);
      _this.whitespace$0();
      queries = _this.tryImportQueries$0();
      if (_this.isPlainImportUrl$1(url) || queries != null) {
        t2 = urlSpan;
        t2 = X.Interpolation$0(
          H._setArrayType(
            [
              P.String_String$fromCharCodes(
                C.NativeUint32List_methods.sublist$2(
                  t2.file._decodedChars,
                  t2._file$_start,
                  t2._end
                ),
                0,
                _null
              ),
            ],
            type$.JSArray_Object
          ),
          urlSpan
        );
        t1 = t1.spanFrom$1(start);
        t3 = queries == null;
        t4 = t3 ? _null : queries.item1;
        return new Q.StaticImport0(t2, t4, t3 ? _null : queries.item2, t1);
      } else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new B.DynamicImport0(t1, urlSpan);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            _this.error$2(
              0,
              'Invalid URL: ' + J.get$message$x(innerError),
              urlSpan
            );
          } else throw exception;
        }
    },
    parseImportUrl$1(url) {
      var t1 = $.$get$windows();
      if (
        t1.style.rootLength$1(url) > 0 &&
        !$.$get$url().style.isRootRelative$1(url)
      )
        return t1.toUri$1(url).toString$0(0);
      P.Uri_parse(url);
      return url;
    },
    isPlainImportUrl$1(url) {
      var first;
      if (url.length < 5) return false;
      if (C.JSString_methods.endsWith$1(url, '.css')) return true;
      first = C.JSString_methods._codeUnitAt$1(url, 0);
      if (first === 47) return C.JSString_methods._codeUnitAt$1(url, 1) === 47;
      if (first !== 104) return false;
      return (
        C.JSString_methods.startsWith$1(url, 'http://') ||
        C.JSString_methods.startsWith$1(url, 'https://')
      );
    },
    tryImportQueries$0() {
      var t1,
        start,
        supports,
        $name,
        media,
        _this = this;
      if (_this.scanIdentifier$1('supports')) {
        t1 = _this.scanner;
        t1.expectChar$1(40);
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
        if (_this.scanIdentifier$1('not')) {
          _this.whitespace$0();
          supports = new M.SupportsNegation0(
            _this._stylesheet0$_supportsConditionInParens$0(),
            t1.spanFrom$1(start)
          );
        } else if (t1.peekChar$0() === 40)
          supports = _this._stylesheet0$_supportsCondition$0();
        else {
          $name = _this.expression$0();
          t1.expectChar$1(58);
          _this.whitespace$0();
          supports = new L.SupportsDeclaration0(
            $name,
            _this.expression$0(),
            t1.spanFrom$1(start)
          );
        }
        t1.expectChar$1(41);
        _this.whitespace$0();
      } else supports = null;
      media =
        _this._stylesheet0$_lookingAtInterpolatedIdentifier$0() ||
        _this.scanner.peekChar$0() === 40
          ? _this._stylesheet0$_mediaQueryList$0()
          : null;
      if (supports == null && media == null) return null;
      return new S.Tuple2(
        supports,
        media,
        type$.Tuple2_of_nullable_SupportsCondition_and_nullable_Interpolation_2
      );
    },
    _stylesheet0$_includeRule$1(start) {
      var name0,
        namespace,
        $arguments,
        t2,
        t3,
        contentArguments,
        contentArguments_,
        wasInContentBlock,
        $content,
        _this = this,
        _null = null,
        $name = _this.identifier$0(),
        t1 = _this.scanner;
      if (t1.scanChar$1(46)) {
        name0 = _this._stylesheet0$_publicIdentifier$0();
        namespace = $name;
        $name = name0;
      } else {
        $name = H.stringReplaceAllUnchecked($name, '_', '-');
        namespace = _null;
      }
      _this.whitespace$0();
      if (t1.peekChar$0() === 40)
        $arguments = _this._stylesheet0$_argumentInvocation$1$mixin(true);
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = X.ArgumentInvocation$empty0(Y._FileSpan$(t2.file, t3, t3));
      }
      _this.whitespace$0();
      if (_this.scanIdentifier$1('using')) {
        _this.whitespace$0();
        contentArguments = _this._stylesheet0$_argumentDeclaration$0();
        _this.whitespace$0();
      } else contentArguments = _null;
      t2 = contentArguments == null;
      if (!t2 || _this.lookingAtChildren$0()) {
        if (t2) {
          t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
          t3 = t2.offset;
          contentArguments_ = new B.ArgumentDeclaration0(
            C.List_empty18,
            _null,
            Y._FileSpan$(t2.file, t3, t3)
          );
        } else contentArguments_ = contentArguments;
        wasInContentBlock = _this._stylesheet0$_inContentBlock;
        _this._stylesheet0$_inContentBlock = true;
        $content = _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_statement(),
          start,
          new V.StylesheetParser__includeRule_closure0(contentArguments_)
        );
        _this._stylesheet0$_inContentBlock = wasInContentBlock;
      } else {
        _this.expectStatementSeparator$0();
        $content = _null;
      }
      t1 = t1.spanFrom$2(start, start);
      return new A.IncludeRule0(
        namespace,
        $name,
        $arguments,
        $content,
        t1.expand$1(0, ($content == null ? $arguments : $content).get$span())
      );
    },
    mediaRule$1(start) {
      return this._stylesheet0$_withChildren$3(
        this.get$_stylesheet0$_statement(),
        start,
        new V.StylesheetParser_mediaRule_closure0(
          this._stylesheet0$_mediaQueryList$0()
        )
      );
    },
    _stylesheet0$_mixinRule$1(start) {
      var $name,
        t1,
        $arguments,
        t2,
        t3,
        _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._stylesheet0$_argumentDeclaration$0();
      else {
        t2 = Y.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = new B.ArgumentDeclaration0(
          C.List_empty18,
          null,
          Y._FileSpan$(t2.file, t3, t3)
        );
      }
      if (_this._stylesheet0$_inMixin || _this._stylesheet0$_inContentBlock)
        _this.error$2(0, string$.Mixinscm, t1.spanFrom$1(start));
      else if (_this._stylesheet0$_inControlDirective)
        _this.error$2(0, string$.Mixinsb, t1.spanFrom$1(start));
      _this.whitespace$0();
      _this._stylesheet0$_inMixin = true;
      return _this._stylesheet0$_withChildren$3(
        _this.get$_stylesheet0$_statement(),
        start,
        new V.StylesheetParser__mixinRule_closure0(
          _this,
          $name,
          $arguments,
          precedingComment
        )
      );
    },
    mozDocumentRule$2(start, $name) {
      var t5,
        t6,
        identifier,
        contents,
        argument,
        trailing,
        endPosition,
        t7,
        t8,
        start0,
        end,
        _this = this,
        _box_0 = {},
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        t4 = H._setArrayType([], type$.JSArray_Object),
        buffer = new Z.InterpolationBuffer0(t3, t4);
      _box_0.needsDeprecationWarning = false;
      for (t5 = _this.get$whitespace(); true; ) {
        if (t1.peekChar$0() === 35) {
          t6 = _this.singleInterpolation$0();
          buffer._interpolation_buffer0$_flushText$0();
          t4.push(t6);
          _box_0.needsDeprecationWarning = true;
        } else {
          t6 = t1._string_scanner$_position;
          identifier = _this.identifier$0();
          switch (identifier) {
            case 'url':
            case 'url-prefix':
            case 'domain':
              contents = _this._stylesheet0$_tryUrlContents$2$name(
                new S._SpanScannerState(t1, t6),
                identifier
              );
              if (contents != null) buffer.addInterpolation$1(contents);
              else {
                t1.expectChar$1(40);
                _this.whitespace$0();
                argument = _this.interpolatedString$0();
                t1.expectChar$1(41);
                t6 = t3._contents += identifier;
                t3._contents = t6 + H.Primitives_stringFromCharCode(40);
                buffer.addInterpolation$1(argument.asInterpolation$0());
                t3._contents += H.Primitives_stringFromCharCode(41);
              }
              t6 = t3._contents;
              trailing = t6.charCodeAt(0) == 0 ? t6 : t6;
              if (
                !C.JSString_methods.endsWith$1(trailing, 'url-prefix()') &&
                !C.JSString_methods.endsWith$1(trailing, "url-prefix('')") &&
                !C.JSString_methods.endsWith$1(trailing, 'url-prefix("")')
              )
                _box_0.needsDeprecationWarning = true;
              break;
            case 'regexp':
              t3._contents += 'regexp(';
              t1.expectChar$1(40);
              buffer.addInterpolation$1(
                _this.interpolatedString$0().asInterpolation$0()
              );
              t1.expectChar$1(41);
              t3._contents += H.Primitives_stringFromCharCode(41);
              _box_0.needsDeprecationWarning = true;
              break;
            default:
              endPosition = t1._string_scanner$_position;
              t7 = t1._sourceFile;
              t8 = new Y._FileSpan(t7, t6, endPosition);
              t8._FileSpan$3(t7, t6, endPosition);
              _this.error$2(0, 'Invalid function name.', t8);
          }
        }
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) break;
        t3._contents += H.Primitives_stringFromCharCode(44);
        start0 = t1._string_scanner$_position;
        t5.call$0();
        end = t1._string_scanner$_position;
        t3._contents += C.JSString_methods.substring$2(t1.string, start0, end);
      }
      return _this._stylesheet0$_withChildren$3(
        _this.get$_stylesheet0$_statement(),
        start,
        new V.StylesheetParser_mozDocumentRule_closure0(
          _box_0,
          _this,
          $name,
          buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2)))
        )
      );
    },
    supportsRule$1(start) {
      var _this = this,
        condition = _this._stylesheet0$_supportsCondition$0();
      _this.whitespace$0();
      return _this._stylesheet0$_withChildren$3(
        _this.get$_stylesheet0$_statement(),
        start,
        new V.StylesheetParser_supportsRule_closure0(condition)
      );
    },
    _stylesheet0$_useNamespace$2(url, start) {
      var namespace,
        basename,
        dot,
        t1,
        exception,
        _this = this;
      if (_this.scanIdentifier$1('as')) {
        _this.whitespace$0();
        return _this.scanner.scanChar$1(42) ? null : _this.identifier$0();
      }
      basename =
        url.get$pathSegments().length === 0
          ? ''
          : C.JSArray_methods.get$last(url.get$pathSegments());
      dot = C.JSString_methods.indexOf$1(basename, '.');
      t1 = C.JSString_methods.startsWith$1(basename, '_') ? 1 : 0;
      namespace = C.JSString_methods.substring$2(
        basename,
        t1,
        dot === -1 ? basename.length : dot
      );
      try {
        t1 = S.SpanScanner$(namespace, null);
        t1 = new G.Parser1(t1, _this.logger)._parser0$_parseIdentifier$0();
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof E.SassFormatException0)
          _this.error$2(
            0,
            'Invalid Sass identifier "' + H.S(namespace) + '"',
            _this.scanner.spanFrom$1(start)
          );
        else throw exception;
      }
    },
    _stylesheet0$_configuration$1$allowGuarded(allowGuarded) {
      var variableNames,
        configuration,
        t1,
        t2,
        $name,
        expression,
        t3,
        guarded,
        endPosition,
        t4,
        t5,
        span,
        _this = this;
      if (!_this.scanIdentifier$1('with')) return null;
      variableNames = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      configuration = H._setArrayType([], type$.JSArray_ConfiguredVariable_2);
      _this.whitespace$0();
      t1 = _this.scanner;
      t1.expectChar$1(40);
      for (; true; ) {
        _this.whitespace$0();
        t2 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        t1.expectChar$1(58);
        _this.whitespace$0();
        expression = _this._stylesheet0$_expressionUntilComma$0();
        t3 = t1._string_scanner$_position;
        if (allowGuarded && t1.scanChar$1(33))
          if (_this.identifier$0() === 'default') {
            _this.whitespace$0();
            guarded = true;
          } else {
            endPosition = t1._string_scanner$_position;
            t4 = t1._sourceFile;
            t5 = new Y._FileSpan(t4, t3, endPosition);
            t5._FileSpan$3(t4, t3, endPosition);
            _this.error$2(0, 'Invalid flag name.', t5);
            guarded = false;
          }
        else guarded = false;
        endPosition = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        span = new Y._FileSpan(t3, t2, endPosition);
        span._FileSpan$3(t3, t2, endPosition);
        if (variableNames.contains$1(0, $name))
          _this.error$2(0, string$.The_sa, span);
        variableNames.add$1(0, $name);
        configuration.push(
          new Z.ConfiguredVariable0($name, expression, guarded, span)
        );
        if (!t1.scanChar$1(44)) break;
        _this.whitespace$0();
        if (!_this._stylesheet0$_lookingAtExpression$0()) break;
      }
      t1.expectChar$1(41);
      return configuration;
    },
    _stylesheet0$_configuration$0() {
      return this._stylesheet0$_configuration$1$allowGuarded(false);
    },
    _stylesheet0$_warnRule$1(start) {
      var value = this.expression$0();
      this.expectStatementSeparator$1('@warn rule');
      return new Y.WarnRule0(value, this.scanner.spanFrom$1(start));
    },
    _stylesheet0$_whileRule$2(start, child) {
      var _this = this,
        wasInControlDirective = _this._stylesheet0$_inControlDirective;
      _this._stylesheet0$_inControlDirective = true;
      return _this._stylesheet0$_withChildren$3(
        child,
        start,
        new V.StylesheetParser__whileRule_closure0(
          _this,
          wasInControlDirective,
          _this.expression$0()
        )
      );
    },
    unknownAtRule$2(start, $name) {
      var t2,
        t3,
        rule,
        _this = this,
        t1 = {},
        wasInUnknownAtRule = _this._stylesheet0$_inUnknownAtRule;
      _this._stylesheet0$_inUnknownAtRule = true;
      t1.value = null;
      t2 = _this.scanner;
      t3 =
        t2.peekChar$0() !== 33 && !_this.atEndOfStatement$0()
          ? (t1.value = _this.almostAnyValue$0())
          : null;
      if (_this.lookingAtChildren$0())
        rule = _this._stylesheet0$_withChildren$3(
          _this.get$_stylesheet0$_statement(),
          start,
          new V.StylesheetParser_unknownAtRule_closure0(t1, $name)
        );
      else {
        _this.expectStatementSeparator$0();
        rule = U.AtRule$0($name, t2.spanFrom$1(start), null, t3);
      }
      _this._stylesheet0$_inUnknownAtRule = wasInUnknownAtRule;
      return rule;
    },
    _stylesheet0$_disallowedAtRule$1(start) {
      this.almostAnyValue$0();
      this.error$2(
        0,
        'This at-rule is not allowed here.',
        this.scanner.spanFrom$1(start)
      );
    },
    _stylesheet0$_argumentDeclaration$0() {
      var $arguments,
        named,
        restArgument,
        t3,
        $name,
        defaultValue,
        endPosition,
        t4,
        t5,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      $arguments = H._setArrayType([], type$.JSArray_Argument_2);
      named = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      while (true) {
        if (!(t1.peekChar$0() === 36)) {
          restArgument = null;
          break;
        }
        t3 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          defaultValue = _this._stylesheet0$_expressionUntilComma$0();
        } else {
          if (t1.scanChar$1(46)) {
            t1.expectChar$1(46);
            t1.expectChar$1(46);
            _this.whitespace$0();
            restArgument = $name;
            break;
          }
          defaultValue = null;
        }
        endPosition = t1._string_scanner$_position;
        t4 = t1._sourceFile;
        t5 = new Y._FileSpan(t4, t3, endPosition);
        t5._FileSpan$3(t4, t3, endPosition);
        $arguments.push(new Z.Argument0($name, defaultValue, t5));
        if (!named.add$1(0, $name))
          _this.error$2(
            0,
            'Duplicate argument.',
            C.JSArray_methods.get$last($arguments).span
          );
        if (!t1.scanChar$1(44)) {
          restArgument = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new B.ArgumentDeclaration0(
        P.List_List$unmodifiable($arguments, type$.Argument_2),
        restArgument,
        t1
      );
    },
    _stylesheet0$_argumentInvocation$1$mixin(mixin) {
      var positional,
        t3,
        t4,
        named,
        keywordRest,
        t5,
        rest,
        expression,
        t6,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      positional = H._setArrayType([], type$.JSArray_Expression_2);
      t3 = type$.String;
      t4 = type$.Expression_2;
      named = P.LinkedHashMap_LinkedHashMap$_empty(t3, t4);
      t5 = !mixin;
      rest = null;
      while (true) {
        if (!_this._stylesheet0$_lookingAtExpression$0()) {
          keywordRest = null;
          break;
        }
        expression = _this._stylesheet0$_expressionUntilComma$1$singleEquals(
          t5
        );
        _this.whitespace$0();
        if (expression instanceof S.VariableExpression0 && t1.scanChar$1(58)) {
          _this.whitespace$0();
          t6 = expression.name;
          if (named.containsKey$1(t6))
            _this.error$2(0, 'Duplicate argument.', expression.span);
          named.$indexSet(
            0,
            t6,
            _this._stylesheet0$_expressionUntilComma$1$singleEquals(t5)
          );
        } else if (t1.scanChar$1(46)) {
          t1.expectChar$1(46);
          t1.expectChar$1(46);
          if (rest != null) {
            _this.whitespace$0();
            keywordRest = expression;
            break;
          }
          rest = expression;
        } else if (named.get$isNotEmpty(named))
          _this.error$2(0, string$.Positi, expression.get$span());
        else positional.push(expression);
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) {
          keywordRest = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new X.ArgumentInvocation0(
        P.List_List$unmodifiable(positional, t4),
        H.ConstantMap_ConstantMap$from(named, t3, t4),
        rest,
        keywordRest,
        t1
      );
    },
    _stylesheet0$_argumentInvocation$0() {
      return this._stylesheet0$_argumentInvocation$1$mixin(false);
    },
    expression$3$bracketList$singleEquals$until(
      bracketList,
      singleEquals,
      until
    ) {
      var t2,
        beforeBracket,
        start,
        wasInParentheses,
        resetState,
        resolveOneOperation,
        resolveOperations,
        addSingleExpression,
        addOperator,
        resolveSpaceExpressions,
        t3,
        first,
        next,
        t4,
        commaExpressions,
        spaceExpressions,
        singleExpression,
        _this = this,
        _s20_ = 'Expected expression.',
        _box_0 = {},
        t1 = until != null;
      if (t1 && until.call$0()) _this.scanner.error$1(0, _s20_);
      if (bracketList) {
        t2 = _this.scanner;
        beforeBracket = new S._SpanScannerState(
          t2,
          t2._string_scanner$_position
        );
        t2.expectChar$1(91);
        _this.whitespace$0();
        if (t2.scanChar$1(93)) {
          t1 = H._setArrayType([], type$.JSArray_Expression_2);
          t2 = t2.spanFrom$1(beforeBracket);
          return new D.ListExpression0(
            P.List_List$unmodifiable(t1, type$.Expression_2),
            C.ListSeparator_undecided_null0,
            true,
            t2
          );
        }
      } else beforeBracket = null;
      t2 = _this.scanner;
      start = new S._SpanScannerState(t2, t2._string_scanner$_position);
      wasInParentheses = _this._stylesheet0$_inParentheses;
      _box_0.operands_ = _box_0.operators_ = _box_0.spaceExpressions_ = _box_0.commaExpressions_ = null;
      _box_0.allowSlash = _this.lookingAtNumber$0();
      _box_0.singleExpression_ = _this._stylesheet0$_singleExpression$0();
      resetState = new V.StylesheetParser_expression_resetState0(
        _box_0,
        _this,
        start
      );
      resolveOneOperation = new V.StylesheetParser_expression_resolveOneOperation0(
        _box_0,
        _this
      );
      resolveOperations = new V.StylesheetParser_expression_resolveOperations0(
        _box_0,
        resolveOneOperation
      );
      addSingleExpression = new V.StylesheetParser_expression_addSingleExpression0(
        _box_0,
        _this,
        resetState,
        resolveOperations
      );
      addOperator = new V.StylesheetParser_expression_addOperator0(
        _box_0,
        _this,
        resolveOneOperation
      );
      resolveSpaceExpressions = new V.StylesheetParser_expression_resolveSpaceExpressions0(
        _box_0,
        _this,
        resolveOperations
      );
      $label0$0: for (t3 = type$.JSArray_Expression_2; true; ) {
        _this.whitespace$0();
        if (t1 && until.call$0()) break $label0$0;
        first = t2.peekChar$0();
        switch (first) {
          case 40:
            addSingleExpression.call$1(_this._stylesheet0$_parentheses$0());
            break;
          case 91:
            addSingleExpression.call$1(_this.expression$1$bracketList(true));
            break;
          case 36:
            addSingleExpression.call$1(_this._stylesheet0$_variable$0());
            break;
          case 38:
            addSingleExpression.call$1(_this._stylesheet0$_selector$0());
            break;
          case 39:
          case 34:
            addSingleExpression.call$1(_this.interpolatedString$0());
            break;
          case 35:
            addSingleExpression.call$1(_this._stylesheet0$_hashExpression$0());
            break;
          case 61:
            t2.readChar$0();
            if (singleEquals && t2.peekChar$0() !== 61)
              addOperator.call$1(C.BinaryOperator_kjl0);
            else {
              t2.expectChar$1(61);
              addOperator.call$1(C.BinaryOperator_YlX0);
            }
            break;
          case 33:
            next = t2.peekChar$1(1);
            if (next === 61) {
              t2.readChar$0();
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_i5H0);
            } else {
              if (next != null)
                if ((next | 32) >>> 0 !== 105)
                  t4 =
                    next === 32 ||
                    next === 9 ||
                    next === 10 ||
                    next === 13 ||
                    next === 12;
                else t4 = true;
              else t4 = true;
              if (t4)
                addSingleExpression.call$1(
                  _this._stylesheet0$_importantExpression$0()
                );
              else break $label0$0;
            }
            break;
          case 60:
            t2.readChar$0();
            addOperator.call$1(
              t2.scanChar$1(61) ? C.BinaryOperator_33h0 : C.BinaryOperator_8qt0
            );
            break;
          case 62:
            t2.readChar$0();
            addOperator.call$1(
              t2.scanChar$1(61) ? C.BinaryOperator_1da0 : C.BinaryOperator_AcR1
            );
            break;
          case 42:
            t2.readChar$0();
            addOperator.call$1(C.BinaryOperator_O1M0);
            break;
          case 43:
            if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(
                _this._stylesheet0$_unaryOperation$0()
              );
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_AcR2);
            }
            break;
          case 45:
            next = t2.peekChar$1(1);
            if ((next != null && next >= 48 && next <= 57) || next === 46)
              if (_box_0.singleExpression_ != null) {
                t4 = t2.peekChar$1(-1);
                t4 =
                  t4 === 32 || t4 === 9 || t4 === 10 || t4 === 13 || t4 === 12;
              } else t4 = true;
            else t4 = false;
            if (t4)
              addSingleExpression.call$2$number(
                _this._stylesheet0$_number$0(),
                true
              );
            else if (_this._stylesheet0$_lookingAtInterpolatedIdentifier$0())
              addSingleExpression.call$1(_this.identifierLike$0());
            else if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(
                _this._stylesheet0$_unaryOperation$0()
              );
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_iyO0);
            }
            break;
          case 47:
            if (_box_0.singleExpression_ == null)
              addSingleExpression.call$1(
                _this._stylesheet0$_unaryOperation$0()
              );
            else {
              t2.readChar$0();
              addOperator.call$1(C.BinaryOperator_RTB0);
            }
            break;
          case 37:
            t2.readChar$0();
            addOperator.call$1(C.BinaryOperator_2ad0);
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            addSingleExpression.call$2$number(
              _this._stylesheet0$_number$0(),
              true
            );
            break;
          case 46:
            if (t2.peekChar$1(1) === 46) break $label0$0;
            addSingleExpression.call$2$number(
              _this._stylesheet0$_number$0(),
              true
            );
            break;
          case 97:
            if (!_this.get$plainCss() && _this.scanIdentifier$1('and'))
              addOperator.call$1(C.BinaryOperator_and_and_20);
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 111:
            if (!_this.get$plainCss() && _this.scanIdentifier$1('or'))
              addOperator.call$1(C.BinaryOperator_or_or_10);
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 117:
          case 85:
            if (t2.peekChar$1(1) === 43)
              addSingleExpression.call$1(_this._stylesheet0$_unicodeRange$0());
            else addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 95:
          case 92:
            addSingleExpression.call$1(_this.identifierLike$0());
            break;
          case 44:
            if (_this._stylesheet0$_inParentheses) {
              _this._stylesheet0$_inParentheses = false;
              if (_box_0.allowSlash) {
                resetState.call$0();
                break;
              }
            }
            commaExpressions = _box_0.commaExpressions_;
            if (commaExpressions == null)
              commaExpressions = _box_0.commaExpressions_ = H._setArrayType(
                [],
                t3
              );
            if (_box_0.singleExpression_ == null) t2.error$1(0, _s20_);
            resolveSpaceExpressions.call$0();
            t4 = _box_0.singleExpression_;
            t4.toString;
            commaExpressions.push(t4);
            t2.readChar$0();
            _box_0.allowSlash = true;
            _box_0.singleExpression_ = null;
            break;
          default:
            if (first != null && first >= 128) {
              addSingleExpression.call$1(_this.identifierLike$0());
              break;
            } else break $label0$0;
        }
      }
      if (bracketList) t2.expectChar$1(93);
      commaExpressions = _box_0.commaExpressions_;
      spaceExpressions = _box_0.spaceExpressions_;
      if (commaExpressions != null) {
        resolveSpaceExpressions.call$0();
        _this._stylesheet0$_inParentheses = wasInParentheses;
        singleExpression = _box_0.singleExpression_;
        if (singleExpression != null) commaExpressions.push(singleExpression);
        t1 = t2.spanFrom$1(beforeBracket == null ? start : beforeBracket);
        return new D.ListExpression0(
          P.List_List$unmodifiable(commaExpressions, type$.Expression_2),
          C.ListSeparator_kWM0,
          bracketList,
          t1
        );
      } else if (bracketList && spaceExpressions != null) {
        resolveOperations.call$0();
        t1 = _box_0.singleExpression_;
        t1.toString;
        spaceExpressions.push(t1);
        beforeBracket.toString;
        t2 = t2.spanFrom$1(beforeBracket);
        return new D.ListExpression0(
          P.List_List$unmodifiable(spaceExpressions, type$.Expression_2),
          C.ListSeparator_woc0,
          true,
          t2
        );
      } else {
        resolveSpaceExpressions.call$0();
        if (bracketList) {
          t1 = _box_0.singleExpression_;
          t1.toString;
          t3 = H._setArrayType([t1], t3);
          beforeBracket.toString;
          t2 = t2.spanFrom$1(beforeBracket);
          _box_0.singleExpression_ = new D.ListExpression0(
            P.List_List$unmodifiable(t3, type$.Expression_2),
            C.ListSeparator_undecided_null0,
            true,
            t2
          );
        }
        t1 = _box_0.singleExpression_;
        t1.toString;
        return t1;
      }
    },
    expression$2$singleEquals$until(singleEquals, until) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        singleEquals,
        until
      );
    },
    expression$1$bracketList(bracketList) {
      return this.expression$3$bracketList$singleEquals$until(
        bracketList,
        false,
        null
      );
    },
    expression$0() {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        false,
        null
      );
    },
    expression$1$singleEquals(singleEquals) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        singleEquals,
        null
      );
    },
    expression$1$until(until) {
      return this.expression$3$bracketList$singleEquals$until(
        false,
        false,
        until
      );
    },
    _stylesheet0$_expressionUntilComma$1$singleEquals(singleEquals) {
      return this.expression$2$singleEquals$until(
        singleEquals,
        new V.StylesheetParser__expressionUntilComma_closure0(this)
      );
    },
    _stylesheet0$_expressionUntilComma$0() {
      return this._stylesheet0$_expressionUntilComma$1$singleEquals(false);
    },
    _stylesheet0$_singleExpression$0() {
      var next,
        _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      switch (first) {
        case 40:
          return _this._stylesheet0$_parentheses$0();
        case 47:
          return _this._stylesheet0$_unaryOperation$0();
        case 46:
          return _this._stylesheet0$_number$0();
        case 91:
          return _this.expression$1$bracketList(true);
        case 36:
          return _this._stylesheet0$_variable$0();
        case 38:
          return _this._stylesheet0$_selector$0();
        case 39:
        case 34:
          return _this.interpolatedString$0();
        case 35:
          return _this._stylesheet0$_hashExpression$0();
        case 43:
          next = t1.peekChar$1(1);
          return T.isDigit0(next) || next === 46
            ? _this._stylesheet0$_number$0()
            : _this._stylesheet0$_unaryOperation$0();
        case 45:
          return _this._stylesheet0$_minusExpression$0();
        case 33:
          return _this._stylesheet0$_importantExpression$0();
        case 117:
        case 85:
          if (t1.peekChar$1(1) === 43)
            return _this._stylesheet0$_unicodeRange$0();
          else return _this.identifierLike$0();
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return _this._stylesheet0$_number$0();
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 92:
          return _this.identifierLike$0();
        default:
          if (first != null && first >= 128) return _this.identifierLike$0();
          t1.error$1(0, 'Expected expression.');
      }
    },
    _stylesheet0$_parentheses$0() {
      var wasInParentheses,
        start,
        first,
        expressions,
        t1,
        t2,
        _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(
          0,
          "Parentheses aren't allowed in plain CSS.",
          1
        );
      wasInParentheses = _this._stylesheet0$_inParentheses;
      _this._stylesheet0$_inParentheses = true;
      try {
        t1 = _this.scanner;
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
        t1.expectChar$1(40);
        _this.whitespace$0();
        if (!_this._stylesheet0$_lookingAtExpression$0()) {
          t1.expectChar$1(41);
          t2 = H._setArrayType([], type$.JSArray_Expression_2);
          t1 = t1.spanFrom$1(start);
          t2 = P.List_List$unmodifiable(t2, type$.Expression_2);
          return new D.ListExpression0(
            t2,
            C.ListSeparator_undecided_null0,
            false,
            t1
          );
        }
        first = _this._stylesheet0$_expressionUntilComma$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          t1 = _this._stylesheet0$_map$2(first, start);
          return t1;
        }
        if (!t1.scanChar$1(44)) {
          t1.expectChar$1(41);
          t1 = t1.spanFrom$1(start);
          return new T.ParenthesizedExpression0(first, t1);
        }
        _this.whitespace$0();
        expressions = H._setArrayType([first], type$.JSArray_Expression_2);
        for (; true; ) {
          if (!_this._stylesheet0$_lookingAtExpression$0()) break;
          J.add$1$ax(expressions, _this._stylesheet0$_expressionUntilComma$0());
          if (!t1.scanChar$1(44)) break;
          _this.whitespace$0();
        }
        t1.expectChar$1(41);
        t1 = t1.spanFrom$1(start);
        t2 = P.List_List$unmodifiable(expressions, type$.Expression_2);
        return new D.ListExpression0(t2, C.ListSeparator_kWM0, false, t1);
      } finally {
        _this._stylesheet0$_inParentheses = wasInParentheses;
      }
    },
    _stylesheet0$_map$2(first, start) {
      var t2,
        key,
        _this = this,
        t1 = type$.Tuple2_Expression_Expression_2,
        pairs = H._setArrayType(
          [
            new S.Tuple2(
              first,
              _this._stylesheet0$_expressionUntilComma$0(),
              t1
            ),
          ],
          type$.JSArray_Tuple2_Expression_Expression_2
        );
      for (t2 = _this.scanner; t2.scanChar$1(44); ) {
        _this.whitespace$0();
        if (!_this._stylesheet0$_lookingAtExpression$0()) break;
        key = _this._stylesheet0$_expressionUntilComma$0();
        t2.expectChar$1(58);
        _this.whitespace$0();
        pairs.push(
          new S.Tuple2(key, _this._stylesheet0$_expressionUntilComma$0(), t1)
        );
      }
      t2.expectChar$1(41);
      t2 = t2.spanFrom$1(start);
      return new A.MapExpression0(P.List_List$unmodifiable(pairs, t1), t2);
    },
    _stylesheet0$_hashExpression$0() {
      var start,
        first,
        t2,
        identifier,
        buffer,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$1(1) === 123) return _this.identifierLike$0();
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(35);
      first = t1.peekChar$0();
      if (first != null && T.isDigit0(first)) {
        t1 = _this._stylesheet0$_hexColorContents$1(start);
        t2 = t1.originalSpan;
        t2.toString;
        return new K.ColorExpression0(t1, t2);
      }
      t2 = t1._string_scanner$_position;
      identifier = _this.interpolatedIdentifier$0();
      if (_this._stylesheet0$_isHexColor$1(identifier)) {
        t1.set$state(new S._SpanScannerState(t1, t2));
        t1 = _this._stylesheet0$_hexColorContents$1(start);
        t2 = t1.originalSpan;
        t2.toString;
        return new K.ColorExpression0(t1, t2);
      }
      t2 = new P.StringBuffer('');
      buffer = new Z.InterpolationBuffer0(
        t2,
        H._setArrayType([], type$.JSArray_Object)
      );
      t2._contents = '' + H.Primitives_stringFromCharCode(35);
      buffer.addInterpolation$1(identifier);
      return new D.StringExpression0(
        buffer.interpolation$1(t1.spanFrom$1(start)),
        false
      );
    },
    _stylesheet0$_hexColorContents$1(start) {
      var red,
        green,
        blue,
        alpha,
        digit4,
        t2,
        t3,
        _this = this,
        digit1 = _this._stylesheet0$_hexDigit$0(),
        digit2 = _this._stylesheet0$_hexDigit$0(),
        digit3 = _this._stylesheet0$_hexDigit$0(),
        t1 = _this.scanner;
      if (!T.isHex0(t1.peekChar$0())) {
        red = ((digit1 << 4) >>> 0) + digit1;
        green = ((digit2 << 4) >>> 0) + digit2;
        blue = ((digit3 << 4) >>> 0) + digit3;
        alpha = 1;
      } else {
        digit4 = _this._stylesheet0$_hexDigit$0();
        t2 = (digit1 << 4) >>> 0;
        t3 = (digit3 << 4) >>> 0;
        if (!T.isHex0(t1.peekChar$0())) {
          red = t2 + digit1;
          green = ((digit2 << 4) >>> 0) + digit2;
          blue = t3 + digit3;
          alpha = (((digit4 << 4) >>> 0) + digit4) / 255;
        } else {
          red = t2 + digit2;
          green = t3 + digit4;
          blue =
            ((_this._stylesheet0$_hexDigit$0() << 4) >>> 0) +
            _this._stylesheet0$_hexDigit$0();
          alpha = T.isHex0(t1.peekChar$0())
            ? (((_this._stylesheet0$_hexDigit$0() << 4) >>> 0) +
                _this._stylesheet0$_hexDigit$0()) /
              255
            : 1;
        }
      }
      return K.SassColor$rgb0(red, green, blue, alpha, t1.spanFrom$1(start));
    },
    _stylesheet0$_isHexColor$1(interpolation) {
      var t1,
        plain = interpolation.get$asPlain();
      if (plain == null) return false;
      t1 = plain.length;
      if (t1 !== 3 && t1 !== 4 && t1 !== 6 && t1 !== 8) return false;
      t1 = new H.CodeUnits(plain);
      return t1.every$1(t1, T.character0__isHex$closure());
    },
    _stylesheet0$_hexDigit$0() {
      var t1 = this.scanner,
        char = t1.peekChar$0();
      if (char == null || !T.isHex0(char)) t1.error$1(0, 'Expected hex digit.');
      return T.asHex0(t1.readChar$0());
    },
    _stylesheet0$_minusExpression$0() {
      var _this = this,
        next = _this.scanner.peekChar$1(1);
      if (T.isDigit0(next) || next === 46)
        return _this._stylesheet0$_number$0();
      if (_this._stylesheet0$_lookingAtInterpolatedIdentifier$0())
        return _this.identifierLike$0();
      return _this._stylesheet0$_unaryOperation$0();
    },
    _stylesheet0$_importantExpression$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.readChar$0();
      this.whitespace$0();
      this.expectIdentifier$1('important');
      t2 = t1.spanFrom$1(new S._SpanScannerState(t1, t2));
      return new D.StringExpression0(
        X.Interpolation$0(
          H._setArrayType(['!important'], type$.JSArray_Object),
          t2
        ),
        false
      );
    },
    _stylesheet0$_unaryOperation$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        operator = _this._stylesheet0$_unaryOperatorFor$1(t1.readChar$0());
      if (operator == null)
        t1.error$2$position(
          0,
          'Expected unary operator.',
          t1._string_scanner$_position - 1
        );
      else if (_this.get$plainCss() && operator !== C.UnaryOperator_zDx0)
        t1.error$3$length$position(
          0,
          "Operators aren't allowed in plain CSS.",
          1,
          t1._string_scanner$_position - 1
        );
      _this.whitespace$0();
      return new X.UnaryOperationExpression0(
        operator,
        _this._stylesheet0$_singleExpression$0(),
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_unaryOperatorFor$1(character) {
      switch (character) {
        case 43:
          return C.UnaryOperator_j2w0;
        case 45:
          return C.UnaryOperator_U4G0;
        case 47:
          return C.UnaryOperator_zDx0;
        default:
          return null;
      }
    },
    _stylesheet0$_number$0() {
      var number,
        t4,
        unit,
        t5,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        first = t1.peekChar$0(),
        t3 = first === 45,
        sign = t3 ? -1 : 1;
      if (first === 43 || t3) t1.readChar$0();
      number = t1.peekChar$0() === 46 ? 0 : _this.naturalNumber$0();
      t3 = _this._stylesheet0$_tryDecimal$1$allowTrailingDot(
        t1._string_scanner$_position !== t2
      );
      t4 = _this._stylesheet0$_tryExponent$0();
      if (t1.scanChar$1(37)) unit = '%';
      else {
        if (_this.lookingAtIdentifier$0())
          t5 = t1.peekChar$0() !== 45 || t1.peekChar$1(1) !== 45;
        else t5 = false;
        unit = t5 ? _this.identifier$1$unit(true) : null;
      }
      return new T.NumberExpression0(
        sign * ((number + t3) * t4),
        unit,
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_tryDecimal$1$allowTrailingDot(allowTrailingDot) {
      var t2,
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      if (t1.peekChar$0() !== 46) return 0;
      if (!T.isDigit0(t1.peekChar$1(1))) {
        if (allowTrailingDot) return 0;
        t1.error$2$position(
          0,
          'Expected digit.',
          t1._string_scanner$_position + 1
        );
      }
      t1.readChar$0();
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        t1.readChar$0();
      }
      return P.double_parse(t1.substring$1(0, start));
    },
    _stylesheet0$_tryExponent$0() {
      var next,
        t2,
        exponentSign,
        exponent,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first !== 101 && first !== 69) return 1;
      next = t1.peekChar$1(1);
      if (!T.isDigit0(next) && next !== 45 && next !== 43) return 1;
      t1.readChar$0();
      t2 = next === 45;
      exponentSign = t2 ? -1 : 1;
      if (next === 43 || t2) t1.readChar$0();
      if (!T.isDigit0(t1.peekChar$0())) t1.error$1(0, 'Expected digit.');
      exponent = 0;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57)) break;
        exponent = exponent * 10 + (t1.readChar$0() - 48);
      }
      return Math.pow(10, exponentSign * exponent);
    },
    _stylesheet0$_unicodeRange$0() {
      var firstRangeLength,
        hasQuestionMark,
        t2,
        secondRangeLength,
        _this = this,
        _s26_ = 'Expected at most 6 digits.',
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentChar$1(117);
      t1.expectChar$1(43);
      for (
        firstRangeLength = 0;
        _this.scanCharIf$1(new V.StylesheetParser__unicodeRange_closure1());

      )
        ++firstRangeLength;
      for (hasQuestionMark = false; t1.scanChar$1(63); hasQuestionMark = true)
        ++firstRangeLength;
      if (firstRangeLength === 0) t1.error$1(0, 'Expected hex digit or "?".');
      else if (firstRangeLength > 6)
        _this.error$2(0, _s26_, t1.spanFrom$1(start));
      else if (hasQuestionMark) {
        t2 = t1.substring$1(0, start.position);
        t1 = t1.spanFrom$1(start);
        return new D.StringExpression0(
          X.Interpolation$0(H._setArrayType([t2], type$.JSArray_Object), t1),
          false
        );
      }
      if (t1.scanChar$1(45)) {
        t2 = t1._string_scanner$_position;
        for (
          secondRangeLength = 0;
          _this.scanCharIf$1(new V.StylesheetParser__unicodeRange_closure2());

        )
          ++secondRangeLength;
        if (secondRangeLength === 0) t1.error$1(0, 'Expected hex digit.');
        else if (secondRangeLength > 6)
          _this.error$2(
            0,
            _s26_,
            t1.spanFrom$1(new S._SpanScannerState(t1, t2))
          );
      }
      if (_this._stylesheet0$_lookingAtInterpolatedIdentifierBody$0())
        t1.error$1(0, 'Expected end of identifier.');
      t2 = t1.substring$1(0, start.position);
      t1 = t1.spanFrom$1(start);
      return new D.StringExpression0(
        X.Interpolation$0(H._setArrayType([t2], type$.JSArray_Object), t1),
        false
      );
    },
    _stylesheet0$_variable$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        $name = _this.variableName$0();
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, t1.spanFrom$1(start));
      return new S.VariableExpression0(null, $name, t1.spanFrom$1(start));
    },
    _stylesheet0$_selector$0() {
      var t1,
        start,
        _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, string$.The_pa, 1);
      t1 = _this.scanner;
      start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(38);
      if (t1.scanChar$1(38)) {
        _this.logger.warn$2$span(0, string$.In_Sas, t1.spanFrom$1(start));
        t1.set$position(t1._string_scanner$_position - 1);
      }
      return new T.SelectorExpression0(t1.spanFrom$1(start));
    },
    interpolatedString$0() {
      var t3,
        t4,
        buffer,
        next,
        second,
        t5,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, 'Expected string.', t2);
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      for (; true; ) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(
            0,
            'Expected ' + H.Primitives_stringFromCharCode(quote) + '.'
          );
        else if (next === 92) {
          second = t1.peekChar$1(1);
          if (second === 10 || second === 13 || second === 12) {
            t1.readChar$0();
            t1.readChar$0();
            if (second === 13) t1.scanChar$1(10);
          } else
            t3._contents += H.Primitives_stringFromCharCode(
              B.consumeEscapedCharacter0(t1)
            );
        } else if (next === 35)
          if (t1.peekChar$1(1) === 123) {
            t5 = this.singleInterpolation$0();
            buffer._interpolation_buffer0$_flushText$0();
            t4.push(t5);
          } else
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
        else t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return new D.StringExpression0(
        buffer.interpolation$1(t1.spanFrom$1(new S._SpanScannerState(t1, t2))),
        true
      );
    },
    identifierLike$0() {
      var invocation,
        lower,
        color,
        specialFunction,
        $name,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        t2 = plain == null;
      if (!t2) {
        if (plain === 'if' && t1.peekChar$0() === 40) {
          invocation = _this._stylesheet0$_argumentInvocation$0();
          return new L.IfExpression0(
            invocation,
            identifier.span.expand$1(0, invocation.span)
          );
        } else if (plain === 'not') {
          _this.whitespace$0();
          return new X.UnaryOperationExpression0(
            C.UnaryOperator_not_not0,
            _this._stylesheet0$_singleExpression$0(),
            identifier.span
          );
        }
        lower = plain.toLowerCase();
        if (t1.peekChar$0() !== 40) {
          switch (plain) {
            case 'false':
              return new Z.BooleanExpression0(false, identifier.span);
            case 'null':
              return new O.NullExpression0(identifier.span);
            case 'true':
              return new Z.BooleanExpression0(true, identifier.span);
          }
          color = $.$get$colorsByName0().$index(0, lower);
          if (color != null) {
            color = K.SassColor$rgb0(
              color.get$red(),
              color.get$green(),
              color.get$blue(),
              color.alpha,
              identifier.span
            );
            t1 = color.originalSpan;
            t1.toString;
            return new K.ColorExpression0(color, t1);
          }
        }
        specialFunction = _this.trySpecialFunction$2(lower, start);
        if (specialFunction != null) return specialFunction;
      }
      switch (t1.peekChar$0()) {
        case 46:
          if (t1.peekChar$1(1) === 46)
            return new D.StringExpression0(identifier, false);
          t1.readChar$0();
          if (t2) _this.error$2(0, string$.Interpn, identifier.span);
          if (t1.peekChar$0() === 36) {
            $name = _this.variableName$0();
            _this._stylesheet0$_assertPublic$2(
              $name,
              new V.StylesheetParser_identifierLike_closure0(_this, start)
            );
            return new S.VariableExpression0(
              plain,
              $name,
              t1.spanFrom$1(start)
            );
          }
          return new F.FunctionExpression0(
            plain,
            _this._stylesheet0$_publicIdentifier$0(),
            _this._stylesheet0$_argumentInvocation$0(),
            t1.spanFrom$1(start)
          );
        case 40:
          if (t2)
            return new N.InterpolatedFunctionExpression0(
              identifier,
              _this._stylesheet0$_argumentInvocation$0(),
              t1.spanFrom$1(start)
            );
          else
            return new F.FunctionExpression0(
              null,
              plain,
              _this._stylesheet0$_argumentInvocation$0(),
              t1.spanFrom$1(start)
            );
        default:
          return new D.StringExpression0(identifier, false);
      }
    },
    trySpecialFunction$2($name, start) {
      var t1,
        buffer,
        t2,
        t3,
        t4,
        next,
        _this = this,
        _null = null;
      switch (B.unvendor0($name)) {
        case 'calc':
        case 'element':
        case 'expression':
          if (!_this.scanner.scanChar$1(40)) return _null;
          t1 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer0(
            t1,
            H._setArrayType([], type$.JSArray_Object)
          );
          t2 = '' + $name;
          t1._contents = t2;
          t1._contents = t2 + H.Primitives_stringFromCharCode(40);
          break;
        case 'min':
        case 'max':
          t1 = _this.scanner;
          t2 = t1._string_scanner$_position;
          if (!t1.scanChar$1(40)) return _null;
          _this.whitespace$0();
          t3 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer0(
            t3,
            H._setArrayType([], type$.JSArray_Object)
          );
          t4 = '' + $name;
          t3._contents = t4;
          t3._contents = t4 + H.Primitives_stringFromCharCode(40);
          if (!_this._stylesheet0$_tryMinMaxContents$1(buffer)) {
            t1.set$state(new S._SpanScannerState(t1, t2));
            return _null;
          }
          return new D.StringExpression0(
            buffer.interpolation$1(t1.spanFrom$1(start)),
            false
          );
        case 'progid':
          t1 = _this.scanner;
          if (!t1.scanChar$1(58)) return _null;
          t2 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer0(
            t2,
            H._setArrayType([], type$.JSArray_Object)
          );
          t3 = '' + $name;
          t2._contents = t3;
          t2._contents = t3 + H.Primitives_stringFromCharCode(58);
          next = t1.peekChar$0();
          while (true) {
            if (next != null) {
              if (!(next >= 97 && next <= 122)) t3 = next >= 65 && next <= 90;
              else t3 = true;
              t3 = t3 || next === 46;
            } else t3 = false;
            if (!t3) break;
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            next = t1.peekChar$0();
          }
          t1.expectChar$1(40);
          t2._contents += H.Primitives_stringFromCharCode(40);
          break;
        case 'url':
          return X.NullableExtension_andThen0(
            _this._stylesheet0$_tryUrlContents$1(start),
            new V.StylesheetParser_trySpecialFunction_closure0()
          );
        case 'clamp':
          if ($name !== 'clamp') return _null;
          if (!_this.scanner.scanChar$1(40)) return _null;
          t1 = new P.StringBuffer('');
          buffer = new Z.InterpolationBuffer0(
            t1,
            H._setArrayType([], type$.JSArray_Object)
          );
          t2 = '' + $name;
          t1._contents = t2;
          t1._contents = t2 + H.Primitives_stringFromCharCode(40);
          break;
        default:
          return _null;
      }
      buffer.addInterpolation$1(
        _this._stylesheet0$_interpolatedDeclarationValue$1$allowEmpty(true)
      );
      t1 = _this.scanner;
      t1.expectChar$1(41);
      buffer._interpolation_buffer0$_text._contents += H.Primitives_stringFromCharCode(
        41
      );
      return new D.StringExpression0(
        buffer.interpolation$1(t1.spanFrom$1(start)),
        false
      );
    },
    _stylesheet0$_tryMinMaxContents$2$allowComma(buffer, allowComma) {
      var t1,
        t2,
        t3,
        t4,
        start,
        end,
        exception,
        t5,
        _this = this;
      for (
        t1 = _this.scanner,
          t2 = buffer._interpolation_buffer0$_text,
          t3 = !allowComma,
          t4 = _this.get$_stylesheet0$_number();
        true;

      ) {
        switch (t1.peekChar$0()) {
          case 45:
          case 43:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 46:
            try {
              start = t1._string_scanner$_position;
              t4.call$0();
              end = t1._string_scanner$_position;
              t2._contents += C.JSString_methods.substring$2(
                t1.string,
                start,
                end
              );
            } catch (exception) {
              if (type$.FormatException._is(H.unwrapException(exception)))
                return false;
              else throw exception;
            }
            break;
          case 35:
            if (t1.peekChar$1(1) !== 123) return false;
            t5 = _this.singleInterpolation$0();
            buffer._interpolation_buffer0$_flushText$0();
            buffer._interpolation_buffer0$_contents.push(t5);
            break;
          case 99:
          case 67:
            switch (t1.peekChar$1(1)) {
              case 97:
              case 65:
                if (!_this._stylesheet0$_tryMinMaxFunction$2(buffer, 'calc'))
                  return false;
                break;
              case 108:
              case 76:
                if (!_this._stylesheet0$_tryMinMaxFunction$2(buffer, 'clamp'))
                  return false;
                break;
            }
            break;
          case 101:
          case 69:
            if (!_this._stylesheet0$_tryMinMaxFunction$2(buffer, 'env'))
              return false;
            break;
          case 118:
          case 86:
            if (!_this._stylesheet0$_tryMinMaxFunction$2(buffer, 'var'))
              return false;
            break;
          case 40:
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            if (
              !_this._stylesheet0$_tryMinMaxContents$2$allowComma(buffer, false)
            )
              return false;
            break;
          case 109:
          case 77:
            t1.readChar$0();
            if (_this.scanIdentChar$1(105)) {
              if (!_this.scanIdentChar$1(110)) return false;
              t2._contents += 'min(';
            } else if (_this.scanIdentChar$1(97)) {
              if (!_this.scanIdentChar$1(120)) return false;
              t2._contents += 'max(';
            } else return false;
            if (!t1.scanChar$1(40)) return false;
            if (!_this._stylesheet0$_tryMinMaxContents$1(buffer)) return false;
            break;
          default:
            return false;
        }
        _this.whitespace$0();
        switch (t1.peekChar$0()) {
          case 41:
            t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            return true;
          case 43:
          case 45:
          case 42:
          case 47:
            t2._contents += H.Primitives_stringFromCharCode(32);
            t5 = t2._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            t2._contents = t5 + H.Primitives_stringFromCharCode(32);
            break;
          case 44:
            if (t3) return false;
            t5 = t2._contents += H.Primitives_stringFromCharCode(
              t1.readChar$0()
            );
            t2._contents = t5 + H.Primitives_stringFromCharCode(32);
            break;
          default:
            return false;
        }
        _this.whitespace$0();
      }
    },
    _stylesheet0$_tryMinMaxContents$1(buffer) {
      return this._stylesheet0$_tryMinMaxContents$2$allowComma(buffer, true);
    },
    _stylesheet0$_tryMinMaxFunction$2(buffer, $name) {
      var t1, t2, t3;
      if (!this.scanIdentifier$1($name)) return false;
      t1 = this.scanner;
      if (!t1.scanChar$1(40)) return false;
      t2 = buffer._interpolation_buffer0$_text;
      t3 = t2._contents += $name;
      t2._contents = t3 + H.Primitives_stringFromCharCode(40);
      buffer.addInterpolation$1(
        this._stylesheet0$_interpolatedDeclarationValue$1$allowEmpty(true)
      );
      t2._contents += H.Primitives_stringFromCharCode(41);
      if (!t1.scanChar$1(41)) return false;
      return true;
    },
    _stylesheet0$_tryUrlContents$2$name(start, $name) {
      var t3,
        t4,
        buffer,
        t5,
        next,
        endPosition,
        result,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40)) return null;
      _this.whitespaceWithoutComments$0();
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t5 = '' + ($name == null ? 'url' : $name);
      t3._contents = t5;
      t3._contents = t5 + H.Primitives_stringFromCharCode(40);
      for (; true; ) {
        next = t1.peekChar$0();
        if (next == null) break;
        else if (next === 92) t3._contents += H.S(_this.escape$0());
        else {
          if (next !== 33)
            if (next !== 37)
              if (next !== 38) t5 = (next >= 42 && next <= 126) || next >= 128;
              else t5 = true;
            else t5 = true;
          else t5 = true;
          if (t5)
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 35)
            if (t1.peekChar$1(1) === 123) {
              t5 = _this.singleInterpolation$0();
              buffer._interpolation_buffer0$_flushText$0();
              t4.push(t5);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          else if (
            next === 32 ||
            next === 9 ||
            next === 10 ||
            next === 13 ||
            next === 12
          ) {
            _this.whitespaceWithoutComments$0();
            if (t1.peekChar$0() !== 41) break;
          } else if (next === 41) {
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t2 = t1._sourceFile;
            t5 = start.position;
            t1 = new Y._FileSpan(t2, t5, endPosition);
            t1._FileSpan$3(t2, t5, endPosition);
            t5 = type$.Object;
            t2 = P.List_List$of(t4, true, t5);
            t4 = t3._contents;
            if (t4.length !== 0) t2.push(t4.charCodeAt(0) == 0 ? t4 : t4);
            result = P.List_List$from(t2, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t3 = new X.Interpolation0(result, t1);
            t3.Interpolation$20(t2, t1);
            return t3;
          } else break;
        }
      }
      t1.set$state(new S._SpanScannerState(t1, t2));
      return null;
    },
    _stylesheet0$_tryUrlContents$1(start) {
      return this._stylesheet0$_tryUrlContents$2$name(start, null);
    },
    dynamicUrl$0() {
      var contents,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentifier$1('url');
      contents = _this._stylesheet0$_tryUrlContents$1(start);
      if (contents != null) return new D.StringExpression0(contents, false);
      return new N.InterpolatedFunctionExpression0(
        X.Interpolation$0(
          H._setArrayType(['url'], type$.JSArray_Object),
          t1.spanFrom$1(start)
        ),
        _this._stylesheet0$_argumentInvocation$0(),
        t1.spanFrom$1(start)
      );
    },
    almostAnyValue$1$omitComments(omitComments) {
      var t4,
        t5,
        t6,
        next,
        commentStart,
        end,
        t7,
        contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer0(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      $label0$1: for (
        t4 = t1.string, t5 = t4.length, t6 = !omitComments;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 34:
          case 39:
            buffer.addInterpolation$1(
              _this.interpolatedString$0().asInterpolation$0()
            );
            break;
          case 47:
            commentStart = t1._string_scanner$_position;
            if (_this.scanComment$0()) {
              if (t6) {
                end = t1._string_scanner$_position;
                t3._contents += C.JSString_methods.substring$2(
                  t4,
                  commentStart,
                  end
                );
              }
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 35:
            if (t1.peekChar$1(1) === 123)
              buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 13:
          case 10:
          case 12:
            if (_this.get$indented()) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 33:
          case 59:
          case 123:
          case 125:
            break $label0$1;
          case 117:
          case 85:
            t7 = t1._string_scanner$_position;
            if (!_this.scanIdentifier$1('url')) {
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            }
            contents = _this._stylesheet0$_tryUrlContents$1(
              new S._SpanScannerState(t1, t7)
            );
            if (contents == null) {
              if (t7 < 0 || t7 > t5)
                H.throwExpression(
                  P.ArgumentError$('Invalid position ' + t7, null)
                );
              t1._string_scanner$_position = t7;
              t1._lastMatch = null;
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            } else buffer.addInterpolation$1(contents);
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              t3._contents += _this.identifier$0();
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
      }
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    almostAnyValue$0() {
      return this.almostAnyValue$1$omitComments(false);
    },
    _stylesheet0$_interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
      allowColon,
      allowEmpty,
      allowSemicolon
    ) {
      var t4,
        t5,
        t6,
        t7,
        wroteNewline,
        next,
        t8,
        start,
        end,
        contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer0(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        ),
        brackets = H._setArrayType([], type$.JSArray_int);
      $label0$1: for (
        t4 = t1.string,
          t5 = t4.length,
          t6 = !allowColon,
          t7 = !allowSemicolon,
          wroteNewline = false;
        true;

      ) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            t3._contents += H.S(_this.escape$1$identifierStart(true));
            wroteNewline = false;
            break;
          case 34:
          case 39:
            buffer.addInterpolation$1(
              _this.interpolatedString$0().asInterpolation$0()
            );
            wroteNewline = false;
            break;
          case 47:
            if (t1.peekChar$1(1) === 42) {
              t8 = _this.get$loudComment();
              start = t1._string_scanner$_position;
              t8.call$0();
              end = t1._string_scanner$_position;
              t3._contents += C.JSString_methods.substring$2(t4, start, end);
            } else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 35:
            if (t1.peekChar$1(1) === 123)
              buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 32:
          case 9:
            if (!wroteNewline) {
              t8 = t1.peekChar$1(1);
              t8 = !(
                t8 === 32 ||
                t8 === 9 ||
                t8 === 10 ||
                t8 === 13 ||
                t8 === 12
              );
            } else t8 = true;
            if (t8)
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            else t1.readChar$0();
            break;
          case 10:
          case 13:
          case 12:
            if (_this.get$indented()) break $label0$1;
            t8 = t1.peekChar$1(-1);
            if (!(t8 === 10 || t8 === 13 || t8 === 12)) t3._contents += '\n';
            t1.readChar$0();
            wroteNewline = true;
            break;
          case 40:
          case 123:
          case 91:
            next.toString;
            t3._contents += H.Primitives_stringFromCharCode(next);
            brackets.push(T.opposite0(t1.readChar$0()));
            wroteNewline = false;
            break;
          case 41:
          case 125:
          case 93:
            if (brackets.length === 0) break $label0$1;
            next.toString;
            t3._contents += H.Primitives_stringFromCharCode(next);
            t1.expectChar$1(brackets.pop());
            wroteNewline = false;
            break;
          case 59:
            if (t7 && brackets.length === 0) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 58:
            if (t6 && brackets.length === 0) break $label0$1;
            t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
          case 117:
          case 85:
            t8 = t1._string_scanner$_position;
            if (!_this.scanIdentifier$1('url')) {
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            }
            contents = _this._stylesheet0$_tryUrlContents$1(
              new S._SpanScannerState(t1, t8)
            );
            if (contents == null) {
              if (t8 < 0 || t8 > t5)
                H.throwExpression(
                  P.ArgumentError$('Invalid position ' + t8, null)
                );
              t1._string_scanner$_position = t8;
              t1._lastMatch = null;
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            } else buffer.addInterpolation$1(contents);
            wroteNewline = false;
            break;
          default:
            if (next == null) break $label0$1;
            if (_this.lookingAtIdentifier$0())
              t3._contents += _this.identifier$0();
            else
              t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
            wroteNewline = false;
            break;
        }
      }
      if (brackets.length !== 0)
        t1.expectChar$1(C.JSArray_methods.get$last(brackets));
      if (
        !allowEmpty &&
        buffer._interpolation_buffer0$_contents.length === 0 &&
        t3._contents.length === 0
      )
        t1.error$1(0, 'Expected token.');
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_interpolatedDeclarationValue$1$allowEmpty(allowEmpty) {
      return this._stylesheet0$_interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        allowEmpty,
        false
      );
    },
    _stylesheet0$_interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(
      allowEmpty,
      allowSemicolon
    ) {
      return this._stylesheet0$_interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        allowEmpty,
        allowSemicolon
      );
    },
    _stylesheet0$_interpolatedDeclarationValue$0() {
      return this._stylesheet0$_interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
        true,
        false,
        false
      );
    },
    interpolatedIdentifier$0() {
      var first,
        _this = this,
        _s20_ = 'Expected identifier.',
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        t2 = new P.StringBuffer(''),
        t3 = H._setArrayType([], type$.JSArray_Object),
        buffer = new Z.InterpolationBuffer0(t2, t3);
      if (t1.scanChar$1(45)) {
        t2._contents += H.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          t2._contents += H.Primitives_stringFromCharCode(45);
          _this._stylesheet0$_interpolatedIdentifierBody$1(buffer);
          return buffer.interpolation$1(t1.spanFrom$1(start));
        }
      }
      first = t1.peekChar$0();
      if (first == null) t1.error$1(0, _s20_);
      else if (first === 95 || T.isAlphabetic1(first) || first >= 128)
        t2._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        t2._contents += H.S(_this.escape$1$identifierStart(true));
      else if (first === 35 && t1.peekChar$1(1) === 123) {
        t2 = _this.singleInterpolation$0();
        buffer._interpolation_buffer0$_flushText$0();
        t3.push(t2);
      } else t1.error$1(0, _s20_);
      _this._stylesheet0$_interpolatedIdentifierBody$1(buffer);
      return buffer.interpolation$1(t1.spanFrom$1(start));
    },
    _stylesheet0$_interpolatedIdentifierBody$1(buffer) {
      var t1, t2, t3, next, t4;
      for (
        t1 = buffer._interpolation_buffer0$_contents,
          t2 = this.scanner,
          t3 = buffer._interpolation_buffer0$_text;
        true;

      ) {
        next = t2.peekChar$0();
        if (next == null) break;
        else {
          if (next !== 95)
            if (next !== 45) {
              if (!(next >= 97 && next <= 122)) t4 = next >= 65 && next <= 90;
              else t4 = true;
              if (!t4) t4 = next >= 48 && next <= 57;
              else t4 = true;
              t4 = t4 || next >= 128;
            } else t4 = true;
          else t4 = true;
          if (t4)
            t3._contents += H.Primitives_stringFromCharCode(t2.readChar$0());
          else if (next === 92) t3._contents += H.S(this.escape$0());
          else if (next === 35 && t2.peekChar$1(1) === 123) {
            t4 = this.singleInterpolation$0();
            buffer._interpolation_buffer0$_flushText$0();
            t1.push(t4);
          } else break;
        }
      }
    },
    singleInterpolation$0() {
      var contents,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1('#{');
      _this.whitespace$0();
      contents = _this.expression$0();
      t1.expectChar$1(125);
      if (_this.get$plainCss())
        _this.error$2(
          0,
          string$.Interpp,
          t1.spanFrom$1(new S._SpanScannerState(t1, t2))
        );
      return contents;
    },
    _stylesheet0$_mediaQueryList$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new P.StringBuffer(''),
        buffer = new Z.InterpolationBuffer0(
          t3,
          H._setArrayType([], type$.JSArray_Object)
        );
      for (; true; ) {
        this.whitespace$0();
        this._stylesheet0$_mediaQuery$1(buffer);
        if (!t1.scanChar$1(44)) break;
        t4 = t3._contents += H.Primitives_stringFromCharCode(44);
        t3._contents = t4 + H.Primitives_stringFromCharCode(32);
      }
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_mediaQuery$1(buffer) {
      var t1,
        identifier,
        _this = this;
      if (_this.scanner.peekChar$0() !== 40) {
        buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        _this.whitespace$0();
        if (!_this._stylesheet0$_lookingAtInterpolatedIdentifier$0()) return;
        t1 = buffer._interpolation_buffer0$_text;
        t1._contents += H.Primitives_stringFromCharCode(32);
        identifier = _this.interpolatedIdentifier$0();
        _this.whitespace$0();
        if (B.equalsIgnoreCase0(identifier.get$asPlain(), 'and'))
          t1._contents += ' and ';
        else {
          buffer.addInterpolation$1(identifier);
          if (_this.scanIdentifier$1('and')) {
            _this.whitespace$0();
            t1._contents += ' and ';
          } else return;
        }
      }
      for (t1 = buffer._interpolation_buffer0$_text; true; ) {
        _this.whitespace$0();
        buffer.addInterpolation$1(_this._stylesheet0$_mediaFeature$0());
        _this.whitespace$0();
        if (!_this.scanIdentifier$1('and')) break;
        t1._contents += ' and ';
      }
    },
    _stylesheet0$_mediaFeature$0() {
      var interpolation,
        t2,
        t3,
        t4,
        buffer,
        t5,
        next,
        t6,
        _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return X.Interpolation$0(
          H._setArrayType([interpolation], type$.JSArray_Object),
          interpolation.get$span()
        );
      }
      t2 = t1._string_scanner$_position;
      t3 = new P.StringBuffer('');
      t4 = H._setArrayType([], type$.JSArray_Object);
      buffer = new Z.InterpolationBuffer0(t3, t4);
      t1.expectChar$1(40);
      t3._contents += H.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this._stylesheet0$_expressionUntilComparison$0();
      buffer._interpolation_buffer0$_flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += H.Primitives_stringFromCharCode(58);
        t3._contents = t5 + H.Primitives_stringFromCharCode(32);
        t5 = _this.expression$0();
        buffer._interpolation_buffer0$_flushText$0();
        t4.push(t5);
      } else {
        next = t1.peekChar$0();
        t5 = next !== 60;
        if (!t5 || next === 62 || next === 61) {
          t3._contents += H.Primitives_stringFromCharCode(32);
          t3._contents += H.Primitives_stringFromCharCode(t1.readChar$0());
          if ((!t5 || next === 62) && t1.scanChar$1(61))
            t3._contents += H.Primitives_stringFromCharCode(61);
          t3._contents += H.Primitives_stringFromCharCode(32);
          _this.whitespace$0();
          t6 = _this._stylesheet0$_expressionUntilComparison$0();
          buffer._interpolation_buffer0$_flushText$0();
          t4.push(t6);
          if (!t5 || next === 62) {
            next.toString;
            t5 = t1.scanChar$1(next);
          } else t5 = false;
          if (t5) {
            t5 = t3._contents += H.Primitives_stringFromCharCode(32);
            t3._contents = t5 + H.Primitives_stringFromCharCode(next);
            if (t1.scanChar$1(61))
              t3._contents += H.Primitives_stringFromCharCode(61);
            t3._contents += H.Primitives_stringFromCharCode(32);
            _this.whitespace$0();
            t5 = _this._stylesheet0$_expressionUntilComparison$0();
            buffer._interpolation_buffer0$_flushText$0();
            t4.push(t5);
          }
        }
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += H.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(
        t1.spanFrom$1(new S._SpanScannerState(t1, t2))
      );
    },
    _stylesheet0$_expressionUntilComparison$0() {
      return this.expression$1$until(
        new V.StylesheetParser__expressionUntilComparison_closure0(this)
      );
    },
    _stylesheet0$_supportsCondition$0() {
      var condition,
        operator,
        right,
        endPosition,
        t3,
        t4,
        lowerOperator,
        _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      if (_this.scanIdentifier$1('not')) {
        _this.whitespace$0();
        return new M.SupportsNegation0(
          _this._stylesheet0$_supportsConditionInParens$0(),
          t1.spanFrom$1(new S._SpanScannerState(t1, t2))
        );
      }
      condition = _this._stylesheet0$_supportsConditionInParens$0();
      _this.whitespace$0();
      for (operator = null; _this.lookingAtIdentifier$0(); ) {
        if (operator != null) _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1('or')) operator = 'or';
        else {
          _this.expectIdentifier$1('and');
          operator = 'and';
        }
        _this.whitespace$0();
        right = _this._stylesheet0$_supportsConditionInParens$0();
        endPosition = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        t4 = new Y._FileSpan(t3, t2, endPosition);
        t4._FileSpan$3(t3, t2, endPosition);
        condition = new U.SupportsOperation0(condition, right, operator, t4);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== 'and' && lowerOperator !== 'or')
          H.throwExpression(
            P.ArgumentError$value(
              operator,
              'operator',
              'may only be "and" or "or".'
            )
          );
        _this.whitespace$0();
      }
      return condition;
    },
    _stylesheet0$_supportsConditionInParens$0() {
      var $name,
        nameStart,
        wasInParentheses,
        identifier,
        operation,
        contents,
        identifier0,
        t2,
        $arguments,
        condition,
        exception,
        value,
        _this = this,
        t1 = _this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position);
      if (_this._stylesheet0$_lookingAtInterpolatedIdentifier$0()) {
        identifier0 = _this.interpolatedIdentifier$0();
        t2 = identifier0.get$asPlain();
        if ((t2 == null ? null : t2.toLowerCase()) === 'not')
          _this.error$2(
            0,
            '"not" is not a valid identifier here.',
            identifier0.span
          );
        if (t1.scanChar$1(40)) {
          $arguments = _this._stylesheet0$_interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(
            true,
            true
          );
          t1.expectChar$1(41);
          return new F.SupportsFunction0(
            identifier0,
            $arguments,
            t1.spanFrom$1(start)
          );
        } else {
          t2 = identifier0.contents;
          if (
            t2.length !== 1 ||
            !type$.Expression_2._is(C.JSArray_methods.get$first(t2))
          )
            _this.error$2(0, 'Expected @supports condition.', identifier0.span);
          else
            return new X.SupportsInterpolation0(
              type$.Expression_2._as(C.JSArray_methods.get$first(t2)),
              t1.spanFrom$1(start)
            );
        }
      }
      t1.expectChar$1(40);
      _this.whitespace$0();
      if (_this.scanIdentifier$1('not')) {
        _this.whitespace$0();
        condition = _this._stylesheet0$_supportsConditionInParens$0();
        t1.expectChar$1(41);
        return new M.SupportsNegation0(condition, t1.spanFrom$1(start));
      } else if (t1.peekChar$0() === 40) {
        condition = _this._stylesheet0$_supportsCondition$0();
        t1.expectChar$1(41);
        return condition;
      }
      $name = null;
      nameStart = new S._SpanScannerState(t1, t1._string_scanner$_position);
      wasInParentheses = _this._stylesheet0$_inParentheses;
      try {
        $name = _this.expression$0();
        t1.expectChar$1(58);
      } catch (exception) {
        if (type$.FormatException._is(H.unwrapException(exception))) {
          t1.set$state(nameStart);
          _this._stylesheet0$_inParentheses = wasInParentheses;
          identifier = _this.interpolatedIdentifier$0();
          operation = _this._stylesheet0$_trySupportsOperation$2(
            identifier,
            nameStart
          );
          if (operation != null) {
            t1.expectChar$1(41);
            return operation;
          }
          t2 = new Z.InterpolationBuffer0(
            new P.StringBuffer(''),
            H._setArrayType([], type$.JSArray_Object)
          );
          t2.addInterpolation$1(identifier);
          t2.addInterpolation$1(
            _this._stylesheet0$_interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(
              false,
              true,
              true
            )
          );
          contents = t2.interpolation$1(t1.spanFrom$1(nameStart));
          if (t1.peekChar$0() === 58) throw exception;
          t1.expectChar$1(41);
          return new Y.SupportsAnything0(contents, t1.spanFrom$1(start));
        } else throw exception;
      }
      _this.whitespace$0();
      value = _this.expression$0();
      t1.expectChar$1(41);
      return new L.SupportsDeclaration0($name, value, t1.spanFrom$1(start));
    },
    _stylesheet0$_trySupportsOperation$2(interpolation, start) {
      var expression,
        beforeWhitespace,
        t2,
        t3,
        operator,
        operation,
        right,
        t4,
        endPosition,
        t5,
        t6,
        lowerOperator,
        _this = this,
        _null = null,
        t1 = interpolation.contents;
      if (t1.length !== 1) return _null;
      expression = C.JSArray_methods.get$first(t1);
      if (!type$.Expression_2._is(expression)) return _null;
      t1 = _this.scanner;
      beforeWhitespace = new S._SpanScannerState(
        t1,
        t1._string_scanner$_position
      );
      _this.whitespace$0();
      for (
        t2 = start.position,
          t3 = interpolation.span,
          operator = _null,
          operation = operator;
        _this.lookingAtIdentifier$0();

      ) {
        if (operator != null) _this.expectIdentifier$1(operator);
        else if (_this.scanIdentifier$1('and')) operator = 'and';
        else {
          if (!_this.scanIdentifier$1('or')) {
            if (beforeWhitespace._scanner !== t1)
              H.throwExpression(P.ArgumentError$(string$.The_gi, _null));
            t2 = beforeWhitespace.position;
            if (t2 < 0 || t2 > t1.string.length)
              H.throwExpression(
                P.ArgumentError$('Invalid position ' + t2, _null)
              );
            t1._string_scanner$_position = t2;
            return (t1._lastMatch = null);
          }
          operator = 'or';
        }
        _this.whitespace$0();
        right = _this._stylesheet0$_supportsConditionInParens$0();
        t4 =
          operation == null
            ? new X.SupportsInterpolation0(expression, t3)
            : operation;
        endPosition = t1._string_scanner$_position;
        t5 = t1._sourceFile;
        t6 = new Y._FileSpan(t5, t2, endPosition);
        t6._FileSpan$3(t5, t2, endPosition);
        operation = new U.SupportsOperation0(t4, right, operator, t6);
        lowerOperator = operator.toLowerCase();
        if (lowerOperator !== 'and' && lowerOperator !== 'or')
          H.throwExpression(
            P.ArgumentError$value(
              operator,
              'operator',
              'may only be "and" or "or".'
            )
          );
        _this.whitespace$0();
      }
      return operation;
    },
    _stylesheet0$_lookingAtInterpolatedIdentifier$0() {
      var second,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic1(first) ||
        first >= 128 ||
        first === 92
      )
        return true;
      if (first === 35) return t1.peekChar$1(1) === 123;
      if (first !== 45) return false;
      second = t1.peekChar$1(1);
      if (second == null) return false;
      if (second === 35) return t1.peekChar$1(2) === 123;
      return (
        second === 95 ||
        T.isAlphabetic1(second) ||
        second >= 128 ||
        second === 92 ||
        second === 45
      );
    },
    _stylesheet0$_lookingAtInterpolatedIdentifierBody$0() {
      var t1 = this.scanner,
        first = t1.peekChar$0();
      if (first == null) return false;
      if (
        first === 95 ||
        T.isAlphabetic1(first) ||
        first >= 128 ||
        T.isDigit0(first) ||
        first === 45 ||
        first === 92
      )
        return true;
      return first === 35 && t1.peekChar$1(1) === 123;
    },
    _stylesheet0$_lookingAtExpression$0() {
      var next,
        t1 = this.scanner,
        character = t1.peekChar$0();
      if (character == null) return false;
      if (character === 46) return t1.peekChar$1(1) !== 46;
      if (character === 33) {
        next = t1.peekChar$1(1);
        if (next != null)
          if ((next | 32) >>> 0 !== 105)
            t1 =
              next === 32 ||
              next === 9 ||
              next === 10 ||
              next === 13 ||
              next === 12;
          else t1 = true;
        else t1 = true;
        return t1;
      }
      if (character !== 40)
        if (character !== 47)
          if (character !== 91)
            if (character !== 39)
              if (character !== 34)
                if (character !== 35)
                  if (character !== 43)
                    if (character !== 45)
                      if (character !== 92)
                        if (character !== 36)
                          if (character !== 38)
                            t1 =
                              character === 95 ||
                              T.isAlphabetic1(character) ||
                              character >= 128 ||
                              T.isDigit0(character);
                          else t1 = true;
                        else t1 = true;
                      else t1 = true;
                    else t1 = true;
                  else t1 = true;
                else t1 = true;
              else t1 = true;
            else t1 = true;
          else t1 = true;
        else t1 = true;
      else t1 = true;
      return t1;
    },
    _stylesheet0$_withChildren$1$3(child, start, create) {
      var result = create.call$2(
        this.children$1(0, child),
        this.scanner.spanFrom$1(start)
      );
      this.whitespaceWithoutComments$0();
      return result;
    },
    _stylesheet0$_withChildren$3(child, start, create) {
      return this._stylesheet0$_withChildren$1$3(
        child,
        start,
        create,
        type$.dynamic
      );
    },
    _stylesheet0$_urlString$0() {
      var innerError,
        t2,
        exception,
        t1 = this.scanner,
        start = new S._SpanScannerState(t1, t1._string_scanner$_position),
        url = this.string$0();
      try {
        t2 = P.Uri_parse(url);
        return t2;
      } catch (exception) {
        t2 = H.unwrapException(exception);
        if (type$.FormatException._is(t2)) {
          innerError = t2;
          this.error$2(
            0,
            'Invalid URL: ' + J.get$message$x(innerError),
            t1.spanFrom$1(start)
          );
        } else throw exception;
      }
    },
    _stylesheet0$_publicIdentifier$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        result = _this.identifier$1$normalize(true);
      _this._stylesheet0$_assertPublic$2(
        result,
        new V.StylesheetParser__publicIdentifier_closure0(
          _this,
          new S._SpanScannerState(t1, t2)
        )
      );
      return result;
    },
    _stylesheet0$_assertPublic$2(identifier, span) {
      var first = C.JSString_methods._codeUnitAt$1(identifier, 0);
      if (!(first === 45 || first === 95)) return;
      this.error$2(0, string$.Privat, span.call$0());
    },
    get$plainCss() {
      return false;
    },
  };
  V.StylesheetParser_parse_closure0.prototype = {
    call$0() {
      var statements,
        t4,
        t1 = this.$this,
        t2 = t1.scanner,
        t3 = t2._string_scanner$_position;
      t2.scanChar$1(65279);
      statements = t1.statements$1(new V.StylesheetParser_parse__closure1(t1));
      t2.expectDone$0();
      t4 = t1._stylesheet0$_globalVariables;
      t4 = t4.get$values(t4);
      C.JSArray_methods.addAll$1(
        statements,
        H.MappedIterable_MappedIterable(
          t4,
          new V.StylesheetParser_parse__closure2(),
          H._instanceType(t4)._eval$1('Iterable.E'),
          type$.Statement_2
        )
      );
      return V.Stylesheet$internal0(
        statements,
        t2.spanFrom$1(new S._SpanScannerState(t2, t3)),
        t1.get$plainCss()
      );
    },
    $signature: 447,
  };
  V.StylesheetParser_parse__closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.scan$1('@charset')) {
        t1.whitespace$0();
        t1.string$0();
        return null;
      }
      return t1._stylesheet0$_statement$1$root(true);
    },
    $signature: 448,
  };
  V.StylesheetParser_parse__closure2.prototype = {
    call$1(declaration) {
      return Z.VariableDeclaration$0(
        declaration.name,
        new O.NullExpression0(declaration.expression.get$span()),
        declaration.span,
        null,
        false,
        true,
        null
      );
    },
    $signature: 449,
  };
  V.StylesheetParser_parseArgumentDeclaration_closure0.prototype = {
    call$0() {
      var $arguments,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$2$name(64, '@-rule');
      t1.identifier$0();
      t1.whitespace$0();
      t1.identifier$0();
      $arguments = t1._stylesheet0$_argumentDeclaration$0();
      t1.whitespace$0();
      t2.expectChar$1(123);
      return $arguments;
    },
    $signature: 450,
  };
  V.StylesheetParser__parseSingleProduction_closure0.prototype = {
    call$0() {
      var result = this.production.call$0();
      this.$this.scanner.expectDone$0();
      return result;
    },
    $signature() {
      return this.T._eval$1('0()');
    },
  };
  V.StylesheetParser_parseSignature_closure.prototype = {
    call$0() {
      var t2,
        $arguments,
        t3,
        t1 = this.$this,
        $name = t1.identifier$0();
      t1.whitespace$0();
      t2 = t1.scanner;
      if (t2.peekChar$0() === 40)
        $arguments = t1._stylesheet0$_argumentDeclaration$0();
      else {
        t1 = Y.FileLocation$_(t2._sourceFile, t2._string_scanner$_position);
        t3 = t1.offset;
        $arguments = new B.ArgumentDeclaration0(
          C.List_empty18,
          null,
          Y._FileSpan$(t1.file, t3, t3)
        );
      }
      t2.expectDone$0();
      return new S.Tuple2(
        $name,
        $arguments,
        type$.Tuple2_String_ArgumentDeclaration
      );
    },
    $signature: 451,
  };
  V.StylesheetParser__statement_closure0.prototype = {
    call$0() {
      return this.$this._stylesheet0$_statement$0();
    },
    $signature: 113,
  };
  V.StylesheetParser_variableDeclarationWithoutNamespace_closure1.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  V.StylesheetParser_variableDeclarationWithoutNamespace_closure2.prototype = {
    call$0() {
      return this.declaration;
    },
    $signature: 452,
  };
  V.StylesheetParser__declarationOrBuffer_closure1.prototype = {
    call$2(children, span) {
      return L.Declaration$nested0(this.name, children, span, null);
    },
    $signature: 69,
  };
  V.StylesheetParser__declarationOrBuffer_closure2.prototype = {
    call$2(children, span) {
      return L.Declaration$nested0(
        this.name,
        children,
        span,
        this._box_0.value
      );
    },
    $signature: 69,
  };
  V.StylesheetParser__styleRule_closure0.prototype = {
    call$2(children, span) {
      var _this = this,
        t1 = _this.$this;
      if (t1.get$indented() && children.length === 0)
        t1.logger.warn$2$span(
          0,
          string$.This_s,
          _this._box_0.interpolation.span
        );
      t1._stylesheet0$_inStyleRule = _this.wasInStyleRule;
      return X.StyleRule$0(
        _this._box_0.interpolation,
        children,
        t1.scanner.spanFrom$1(_this.start)
      );
    },
    $signature: 454,
  };
  V.StylesheetParser__propertyOrVariableDeclaration_closure1.prototype = {
    call$2(children, span) {
      return L.Declaration$nested0(this._box_0.name, children, span, null);
    },
    $signature: 69,
  };
  V.StylesheetParser__propertyOrVariableDeclaration_closure2.prototype = {
    call$2(children, span) {
      return L.Declaration$nested0(
        this._box_0.name,
        children,
        span,
        this.value
      );
    },
    $signature: 69,
  };
  V.StylesheetParser__atRootRule_closure1.prototype = {
    call$2(children, span) {
      return V.AtRootRule$0(children, span, this.query);
    },
    $signature: 173,
  };
  V.StylesheetParser__atRootRule_closure2.prototype = {
    call$2(children, span) {
      return V.AtRootRule$0(children, span, null);
    },
    $signature: 173,
  };
  V.StylesheetParser__eachRule_closure0.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._stylesheet0$_inControlDirective =
        _this.wasInControlDirective;
      return V.EachRule$0(_this.variables, _this.list, children, span);
    },
    $signature: 456,
  };
  V.StylesheetParser__functionRule_closure0.prototype = {
    call$2(children, span) {
      return M.FunctionRule$0(
        this.name,
        this.$arguments,
        children,
        span,
        this.precedingComment
      );
    },
    $signature: 457,
  };
  V.StylesheetParser__forRule_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.lookingAtIdentifier$0()) return false;
      if (t1.scanIdentifier$1('to')) return (this._box_0.exclusive = true);
      else if (t1.scanIdentifier$1('through')) {
        this._box_0.exclusive = false;
        return true;
      } else return false;
    },
    $signature: 25,
  };
  V.StylesheetParser__forRule_closure2.prototype = {
    call$2(children, span) {
      var t1,
        _this = this;
      _this.$this._stylesheet0$_inControlDirective =
        _this.wasInControlDirective;
      t1 = _this._box_0.exclusive;
      t1.toString;
      return B.ForRule$0(
        _this.variable,
        _this.from,
        _this.to,
        children,
        span,
        t1
      );
    },
    $signature: 458,
  };
  V.StylesheetParser__memberList_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.scanner.peekChar$0() === 36)
        this.variables.add$1(0, t1.variableName$0());
      else this.identifiers.add$1(0, t1.identifier$1$normalize(true));
    },
    $signature: 2,
  };
  V.StylesheetParser__includeRule_closure0.prototype = {
    call$2(children, span) {
      return Y.ContentBlock$0(this.contentArguments_, children, span);
    },
    $signature: 459,
  };
  V.StylesheetParser_mediaRule_closure0.prototype = {
    call$2(children, span) {
      return G.MediaRule$0(this.query, children, span);
    },
    $signature: 460,
  };
  V.StylesheetParser__mixinRule_closure0.prototype = {
    call$2(children, span) {
      var _this = this;
      _this.$this._stylesheet0$_inMixin = false;
      return T.MixinRule$0(
        _this.name,
        _this.$arguments,
        children,
        span,
        _this.precedingComment
      );
    },
    $signature: 461,
  };
  V.StylesheetParser_mozDocumentRule_closure0.prototype = {
    call$2(children, span) {
      var _this = this;
      if (_this._box_0.needsDeprecationWarning)
        _this.$this.logger.warn$3$deprecation$span(
          0,
          string$.x40_moz_,
          true,
          span
        );
      return U.AtRule$0(_this.name, span, children, _this.value);
    },
    $signature: 170,
  };
  V.StylesheetParser_supportsRule_closure0.prototype = {
    call$2(children, span) {
      return B.SupportsRule$0(this.condition, children, span);
    },
    $signature: 463,
  };
  V.StylesheetParser__whileRule_closure0.prototype = {
    call$2(children, span) {
      this.$this._stylesheet0$_inControlDirective = this.wasInControlDirective;
      return G.WhileRule$0(this.condition, children, span);
    },
    $signature: 464,
  };
  V.StylesheetParser_unknownAtRule_closure0.prototype = {
    call$2(children, span) {
      return U.AtRule$0(this.name, span, children, this._box_0.value);
    },
    $signature: 170,
  };
  V.StylesheetParser_expression_resetState0.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      t1.operands_ = t1.operators_ = t1.spaceExpressions_ = t1.commaExpressions_ = null;
      t2 = this.$this;
      t2.scanner.set$state(this.start);
      t1.allowSlash = t2.lookingAtNumber$0();
      t1.singleExpression_ = t2._stylesheet0$_singleExpression$0();
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_resolveOneOperation0.prototype = {
    call$0() {
      var singleExpression,
        t3,
        t4,
        t1 = this._box_0,
        operator = t1.operators_.pop(),
        t2 = t1.operands_;
      t2.toString;
      singleExpression = t1.singleExpression_;
      if (singleExpression == null) {
        t3 = this.$this.scanner;
        t4 = operator.operator.length;
        t3.error$3$length$position(
          0,
          'Expected expression.',
          t4,
          t3._string_scanner$_position - t4
        );
      }
      if (operator !== C.BinaryOperator_RTB0) t1.allowSlash = false;
      if (t1.allowSlash && !this.$this._stylesheet0$_inParentheses)
        t1.singleExpression_ = new V.BinaryOperationExpression0(
          C.BinaryOperator_RTB0,
          t2.pop(),
          singleExpression,
          true
        );
      else
        t1.singleExpression_ = new V.BinaryOperationExpression0(
          operator,
          t2.pop(),
          singleExpression,
          false
        );
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_resolveOperations0.prototype = {
    call$0() {
      var t1,
        operators = this._box_0.operators_;
      if (operators == null) return;
      for (t1 = this.resolveOneOperation; operators.length !== 0; ) t1.call$0();
    },
    $signature: 0,
  };
  V.StylesheetParser_expression_addSingleExpression0.prototype = {
    call$2$number(expression, number) {
      var t2,
        spaceExpressions,
        _this = this,
        t1 = _this._box_0;
      if (t1.singleExpression_ != null) {
        t2 = _this.$this;
        if (t2._stylesheet0$_inParentheses) {
          t2._stylesheet0$_inParentheses = false;
          if (t1.allowSlash) {
            _this.resetState.call$0();
            return;
          }
        }
        spaceExpressions = t1.spaceExpressions_;
        if (spaceExpressions == null)
          spaceExpressions = t1.spaceExpressions_ = H._setArrayType(
            [],
            type$.JSArray_Expression_2
          );
        _this.resolveOperations.call$0();
        t2 = t1.singleExpression_;
        t2.toString;
        spaceExpressions.push(t2);
        t1.allowSlash = number;
      } else if (!number) t1.allowSlash = false;
      t1.singleExpression_ = expression;
    },
    call$1(expression) {
      return this.call$2$number(expression, false);
    },
    $signature: 465,
  };
  V.StylesheetParser_expression_addOperator0.prototype = {
    call$1(operator) {
      var t2,
        t3,
        operators,
        operands,
        t4,
        singleExpression,
        singleExpression_,
        t1 = this.$this;
      if (
        t1.get$plainCss() &&
        operator !== C.BinaryOperator_RTB0 &&
        operator !== C.BinaryOperator_kjl0
      ) {
        t2 = t1.scanner;
        t3 = operator.operator.length;
        t2.error$3$length$position(
          0,
          "Operators aren't allowed in plain CSS.",
          t3,
          t2._string_scanner$_position - t3
        );
      }
      t2 = this._box_0;
      t2.allowSlash = t2.allowSlash && operator === C.BinaryOperator_RTB0;
      operators = t2.operators_;
      if (operators == null)
        operators = t2.operators_ = H._setArrayType(
          [],
          type$.JSArray_BinaryOperator_2
        );
      operands = t2.operands_;
      if (operands == null)
        operands = t2.operands_ = H._setArrayType(
          [],
          type$.JSArray_Expression_2
        );
      t3 = this.resolveOneOperation;
      t4 = operator.precedence;
      while (true) {
        if (
          !(
            operators.length !== 0 &&
            C.JSArray_methods.get$last(operators).precedence >= t4
          )
        )
          break;
        t3.call$0();
      }
      operators.push(operator);
      singleExpression = t2.singleExpression_;
      if (singleExpression == null) {
        t3 = t1.scanner;
        t4 = operator.operator.length;
        t3.error$3$length$position(
          0,
          'Expected expression.',
          t4,
          t3._string_scanner$_position - t4
        );
      }
      operands.push(singleExpression);
      t1.whitespace$0();
      t2.allowSlash = t2.allowSlash && t1.lookingAtNumber$0();
      singleExpression_ = t1._stylesheet0$_singleExpression$0();
      t2.singleExpression_ = singleExpression_;
      t2.allowSlash =
        t2.allowSlash && singleExpression_ instanceof T.NumberExpression0;
    },
    $signature: 466,
  };
  V.StylesheetParser_expression_resolveSpaceExpressions0.prototype = {
    call$0() {
      var t1, spaceExpressions, singleExpression, t2;
      this.resolveOperations.call$0();
      t1 = this._box_0;
      spaceExpressions = t1.spaceExpressions_;
      if (spaceExpressions != null) {
        singleExpression = t1.singleExpression_;
        if (singleExpression == null)
          this.$this.scanner.error$1(0, 'Expected expression.');
        spaceExpressions.push(singleExpression);
        t2 = C.JSArray_methods.get$first(spaceExpressions)
          .get$span()
          .expand$1(0, singleExpression.get$span());
        t1.singleExpression_ = new D.ListExpression0(
          P.List_List$unmodifiable(spaceExpressions, type$.Expression_2),
          C.ListSeparator_woc0,
          false,
          t2
        );
        t1.spaceExpressions_ = null;
      }
    },
    $signature: 0,
  };
  V.StylesheetParser__expressionUntilComma_closure0.prototype = {
    call$0() {
      return this.$this.scanner.peekChar$0() === 44;
    },
    $signature: 25,
  };
  V.StylesheetParser__unicodeRange_closure1.prototype = {
    call$1(char) {
      return char != null && T.isHex0(char);
    },
    $signature: 26,
  };
  V.StylesheetParser__unicodeRange_closure2.prototype = {
    call$1(char) {
      return char != null && T.isHex0(char);
    },
    $signature: 26,
  };
  V.StylesheetParser_identifierLike_closure0.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  V.StylesheetParser_trySpecialFunction_closure0.prototype = {
    call$1(contents) {
      return new D.StringExpression0(contents, false);
    },
    $signature: 467,
  };
  V.StylesheetParser__expressionUntilComparison_closure0.prototype = {
    call$0() {
      var t1 = this.$this.scanner,
        next = t1.peekChar$0();
      if (next === 61) return t1.peekChar$1(1) !== 61;
      return next === 60 || next === 62;
    },
    $signature: 25,
  };
  V.StylesheetParser__publicIdentifier_closure0.prototype = {
    call$0() {
      return this.$this.scanner.spanFrom$1(this.start);
    },
    $signature: 33,
  };
  V.Stylesheet0.prototype = {
    Stylesheet$internal$3$plainCss0(children, span, plainCss) {
      var t1, t2, t3, t4, _i, child;
      for (
        t1 = this.children,
          t2 = t1.length,
          t3 = this._stylesheet1$_forwards,
          t4 = this._stylesheet1$_uses,
          _i = 0;
        _i < t2;
        ++_i
      ) {
        child = t1[_i];
        if (child instanceof T.UseRule0) t4.push(child);
        else if (child instanceof L.ForwardRule0) t3.push(child);
        else if (
          !(child instanceof B.SilentComment0) &&
          !(child instanceof L.LoudComment0) &&
          !(child instanceof Z.VariableDeclaration0)
        )
          break;
      }
    },
    accept$1$1(visitor) {
      return visitor.visitStylesheet$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (t1 && C.JSArray_methods).join$1(t1, ' ');
    },
    get$span() {
      return this.span;
    },
  };
  B.ModifiableCssSupportsRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitCssSupportsRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    copyWithoutChildren$0() {
      return B.ModifiableCssSupportsRule$0(this.condition, this.span);
    },
    $isCssSupportsRule0: 1,
    get$span() {
      return this.span;
    },
  };
  B.SupportsRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitSupportsRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@supports ' +
        this.condition.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  M.Syntax0.prototype = {
    toString$0(_) {
      return this._syntax0$_name;
    },
  };
  Y.TerseLogger0.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var firstParagraph, t1, t2, count;
      if (deprecation) {
        firstParagraph = C.JSArray_methods.get$first(message.split('\n\n'));
        t1 = this._terse$_warningCounts;
        t2 = t1.$index(0, firstParagraph);
        count = (t2 == null ? 0 : t2) + 1;
        t1.$indexSet(0, firstParagraph, count);
        if (count > 5) return;
      }
      this._terse$_inner.warn$4$deprecation$span$trace(
        0,
        message,
        deprecation,
        span,
        trace
      );
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        span,
        null
      );
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        null,
        null
      );
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        deprecation,
        span,
        null
      );
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace(
        $receiver,
        message,
        false,
        null,
        trace
      );
    },
    debug$2(_, message, span) {
      return this._terse$_inner.debug$2(0, message, span);
    },
    summarize$1$node(node) {
      var t2,
        total,
        t1 = this._terse$_warningCounts;
      t1 = t1.get$values(t1);
      t2 = H._instanceType(t1);
      total = A.IterableIntegerExtension_get_sum(
        new H.MappedIterable(
          new H.WhereIterable(
            t1,
            new Y.TerseLogger_summarize_closure1(),
            t2._eval$1('WhereIterable<Iterable.E>')
          ),
          new Y.TerseLogger_summarize_closure2(),
          t2._eval$1('MappedIterable<Iterable.E,int>')
        )
      );
      if (total > 0) {
        t1 = '' + total + string$.x20repet;
        this._terse$_inner.warn$1(0, t1 + (node ? '' : string$.x0aRun_i));
      }
    },
  };
  Y.TerseLogger_summarize_closure1.prototype = {
    call$1(count) {
      return count > 5;
    },
    $signature: 46,
  };
  Y.TerseLogger_summarize_closure2.prototype = {
    call$1(count) {
      return count - 5;
    },
    $signature: 165,
  };
  F.TypeSelector0.prototype = {
    get$minSpecificity() {
      return 1;
    },
    accept$1$1(visitor) {
      visitor._buffer.write$1(0, this.name);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    addSuffix$1(suffix) {
      var t1 = this.name;
      return new F.TypeSelector0(
        new D.QualifiedName0(t1.name + suffix, t1.namespace)
      );
    },
    unify$1(compound) {
      var unified, t1;
      if (
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector0 ||
        C.JSArray_methods.get$first(compound) instanceof F.TypeSelector0
      ) {
        unified = Y.unifyUniversalAndElement0(
          this,
          C.JSArray_methods.get$first(compound)
        );
        if (unified == null) return null;
        t1 = H._setArrayType([unified], type$.JSArray_SimpleSelector_2);
        C.JSArray_methods.addAll$1(
          t1,
          H.SubListIterable$(
            compound,
            1,
            null,
            H._arrayInstanceType(compound)._precomputed1
          )
        );
        return t1;
      } else {
        t1 = H._setArrayType([this], type$.JSArray_SimpleSelector_2);
        C.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
    },
    $eq(_, other) {
      if (other == null) return false;
      return other instanceof F.TypeSelector0 && other.name.$eq(0, this.name);
    },
    get$hashCode(_) {
      var t1 = this.name;
      return (
        C.JSString_methods.get$hashCode(t1.name) ^ J.get$hashCode$(t1.namespace)
      );
    },
  };
  G.Types.prototype = {};
  X.UnaryOperationExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitUnaryOperationExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.operator,
        t2 = t1.operator;
      t1 =
        t1 === C.UnaryOperator_not_not0
          ? t2 + H.Primitives_stringFromCharCode(32)
          : t2;
      t1 += this.operand.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  X.UnaryOperator0.prototype = {
    toString$0(_) {
      return this.name;
    },
  };
  N.UnitlessSassNumber0.prototype = {
    get$numeratorUnits() {
      return C.List_empty;
    },
    get$denominatorUnits() {
      return C.List_empty;
    },
    get$hasUnits() {
      return false;
    },
    withValue$1(value) {
      return new N.UnitlessSassNumber0(value, null);
    },
    withSlash$2(numerator, denominator) {
      return new N.UnitlessSassNumber0(
        this.value,
        new S.Tuple2(
          numerator,
          denominator,
          type$.Tuple2_SassNumber_SassNumber_2
        )
      );
    },
    hasUnit$1(unit) {
      return false;
    },
    compatibleWithUnit$1(unit) {
      return true;
    },
    coerceValueToMatch$1(other) {
      return this.value;
    },
    convertValueToMatch$3(other, $name, otherName) {
      return other.get$hasUnits()
        ? this.super$SassNumber$convertValueToMatch0(other, $name, otherName)
        : this.value;
    },
    coerce$2(newNumerators, newDenominators) {
      return T.SassNumber_SassNumber$withUnits0(
        this.value,
        newDenominators,
        newNumerators
      );
    },
    coerceValue$3(newNumerators, newDenominators, $name) {
      return this.value;
    },
    coerceValueToUnit$2(unit, $name) {
      return this.value;
    },
    greaterThan$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber0) {
        t1 = this.value;
        t2 = other.value;
        return t1 > t2 && !(Math.abs(t1 - t2) < $.$get$epsilon0())
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      }
      return this.super$SassNumber$greaterThan0(other);
    },
    greaterThanOrEquals$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber0) {
        t1 = this.value;
        t2 = other.value;
        return t1 > t2 || Math.abs(t1 - t2) < $.$get$epsilon0()
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      }
      return this.super$SassNumber$greaterThanOrEquals0(other);
    },
    lessThan$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber0) {
        t1 = this.value;
        t2 = other.value;
        return t1 < t2 && !(Math.abs(t1 - t2) < $.$get$epsilon0())
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      }
      return this.super$SassNumber$lessThan0(other);
    },
    lessThanOrEquals$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber0) {
        t1 = this.value;
        t2 = other.value;
        return t1 < t2 || Math.abs(t1 - t2) < $.$get$epsilon0()
          ? C.SassBoolean_true
          : C.SassBoolean_false;
      }
      return this.super$SassNumber$lessThanOrEquals0(other);
    },
    modulo$1(other) {
      if (other instanceof T.SassNumber0)
        return other.withValue$1(
          this.moduloLikeSass$2(this.value, other.value)
        );
      return this.super$SassNumber$modulo0(other);
    },
    plus$1(other) {
      if (other instanceof T.SassNumber0)
        return other.withValue$1(this.value + other.value);
      return this.super$SassNumber$plus0(other);
    },
    minus$1(other) {
      if (other instanceof T.SassNumber0)
        return other.withValue$1(this.value - other.value);
      return this.super$SassNumber$minus0(other);
    },
    times$1(other) {
      if (other instanceof T.SassNumber0)
        return other.withValue$1(this.value * other.value);
      return this.super$SassNumber$times0(other);
    },
    dividedBy$1(other) {
      var t1, t2;
      if (other instanceof T.SassNumber0) {
        t1 = this.value / other.value;
        if (other.get$hasUnits()) {
          t2 = other.get$denominatorUnits();
          t2 = T.SassNumber_SassNumber$withUnits0(
            t1,
            other.get$numeratorUnits(),
            t2
          );
          t1 = t2;
        } else t1 = new N.UnitlessSassNumber0(t1, null);
        return t1;
      }
      return this.super$SassNumber$dividedBy0(other);
    },
    unaryMinus$0() {
      return new N.UnitlessSassNumber0(-this.value, null);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof N.UnitlessSassNumber0 &&
        Math.abs(this.value - other.value) < $.$get$epsilon0()
      );
    },
    get$hashCode(_) {
      return T.fuzzyHashCode0(this.value);
    },
  };
  N.UniversalSelector0.prototype = {
    get$minSpecificity() {
      return 0;
    },
    accept$1$1(visitor) {
      var t2,
        t1 = this.namespace;
      if (t1 != null) {
        t2 = visitor._buffer;
        t2.write$1(0, t1);
        t2.writeCharCode$1(124);
      }
      visitor._buffer.writeCharCode$1(42);
      return null;
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    unify$1(compound) {
      var unified,
        t1,
        _this = this;
      if (
        C.JSArray_methods.get$first(compound) instanceof N.UniversalSelector0 ||
        C.JSArray_methods.get$first(compound) instanceof F.TypeSelector0
      ) {
        unified = Y.unifyUniversalAndElement0(
          _this,
          C.JSArray_methods.get$first(compound)
        );
        if (unified == null) return null;
        t1 = H._setArrayType([unified], type$.JSArray_SimpleSelector_2);
        C.JSArray_methods.addAll$1(
          t1,
          H.SubListIterable$(
            compound,
            1,
            null,
            H._arrayInstanceType(compound)._precomputed1
          )
        );
        return t1;
      }
      t1 = _this.namespace;
      if (t1 != null && t1 !== '*') {
        t1 = H._setArrayType([_this], type$.JSArray_SimpleSelector_2);
        C.JSArray_methods.addAll$1(t1, compound);
        return t1;
      }
      if (compound.length !== 0) return compound;
      return H._setArrayType([_this], type$.JSArray_SimpleSelector_2);
    },
    $eq(_, other) {
      if (other == null) return false;
      return (
        other instanceof N.UniversalSelector0 &&
        other.namespace == this.namespace
      );
    },
    get$hashCode(_) {
      return J.get$hashCode$(this.namespace);
    },
  };
  R.UnprefixedMapView0.prototype = {
    get$keys(_) {
      return new R._UnprefixedKeys0(this);
    },
    $index(_, key) {
      return typeof key == 'string'
        ? this._unprefixed_map_view0$_map.$index(
            0,
            this._unprefixed_map_view0$_prefix + key
          )
        : null;
    },
    containsKey$1(key) {
      return (
        typeof key == 'string' &&
        this._unprefixed_map_view0$_map.containsKey$1(
          this._unprefixed_map_view0$_prefix + key
        )
      );
    },
    remove$1(_, key) {
      return typeof key == 'string'
        ? this._unprefixed_map_view0$_map.remove$1(
            0,
            this._unprefixed_map_view0$_prefix + key
          )
        : null;
    },
  };
  R._UnprefixedKeys0.prototype = {
    get$iterator(_) {
      var t1 = this._unprefixed_map_view0$_view._unprefixed_map_view0$_map;
      t1 = J.where$1$ax(
        t1.get$keys(t1),
        new R._UnprefixedKeys_iterator_closure1(this)
      ).map$1$1(0, new R._UnprefixedKeys_iterator_closure2(this), type$.String);
      return t1.get$iterator(t1);
    },
    contains$1(_, key) {
      return this._unprefixed_map_view0$_view.containsKey$1(key);
    },
  };
  R._UnprefixedKeys_iterator_closure1.prototype = {
    call$1(key) {
      return C.JSString_methods.startsWith$1(
        key,
        this.$this._unprefixed_map_view0$_view._unprefixed_map_view0$_prefix
      );
    },
    $signature: 6,
  };
  R._UnprefixedKeys_iterator_closure2.prototype = {
    call$1(key) {
      return C.JSString_methods.substring$1(
        key,
        this.$this._unprefixed_map_view0$_view._unprefixed_map_view0$_prefix
          .length
      );
    },
    $signature: 5,
  };
  T.UseRule0.prototype = {
    UseRule$4$configuration0(url, namespace, span, configuration) {
      var t1, t2, _i, variable;
      for (t1 = this.configuration, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        variable = t1[_i];
        if (variable.isGuarded)
          throw H.wrapException(
            P.ArgumentError$value(
              variable,
              'configured variable',
              "can't be guarded in a @use rule."
            )
          );
      }
    },
    accept$1$1(visitor) {
      return visitor.visitUseRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.url,
        t2 = '@use ' + D.StringExpression_quoteText0(t1.toString$0(0)),
        basename =
          t1.get$pathSegments().length === 0
            ? ''
            : C.JSArray_methods.get$last(t1.get$pathSegments()),
        dot = C.JSString_methods.indexOf$1(basename, '.');
      t1 = this.namespace;
      if (
        t1 !==
        C.JSString_methods.substring$2(
          basename,
          0,
          dot === -1 ? basename.length : dot
        )
      )
        t1 = t2 + (' as ' + (t1 == null ? '*' : t1));
      else t1 = t2;
      t2 = this.configuration;
      t1 =
        (t2.length !== 0
          ? t1 + (' with (' + C.JSArray_methods.join$1(t2, ', ') + ')')
          : t1) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  E.UserDefinedCallable0.prototype = {
    get$name(_) {
      return this.declaration.name;
    },
    $isAsyncCallable0: 1,
  };
  B.resolveImportPath_closure1.prototype = {
    call$0() {
      return B._exactlyOne0(
        B._tryPath0(
          $.$get$context().withoutExtension$1(this.path) +
            '.import' +
            this.extension
        )
      );
    },
    $signature: 37,
  };
  B.resolveImportPath_closure2.prototype = {
    call$0() {
      return B._exactlyOne0(B._tryPathWithExtensions0(this.path + '.import'));
    },
    $signature: 37,
  };
  B._tryPathAsDirectory_closure0.prototype = {
    call$0() {
      return B._exactlyOne0(
        B._tryPathWithExtensions0(D.join(this.path, 'index.import', null))
      );
    },
    $signature: 37,
  };
  B._exactlyOne_closure0.prototype = {
    call$1(path) {
      var t1 = $.$get$context();
      return '  ' + t1.prettyUri$1(t1.toUri$1(path));
    },
    $signature: 5,
  };
  B.forwardToString_closure.prototype = {
    call$1(thisArg) {
      return J.toString$0$(thisArg);
    },
    $signature: 51,
  };
  B.createClass_closure.prototype = {
    call$2($name, body) {
      this.$prototype[$name] = P.allowInteropCaptureThis(body);
    },
    $signature: 468,
  };
  B._PropertyDescriptor0.prototype = {};
  B.indent_closure0.prototype = {
    call$1(line) {
      return C.JSString_methods.$mul(' ', this.indentation) + line;
    },
    $signature: 5,
  };
  B.flattenVertically_closure1.prototype = {
    call$1(inner) {
      return Q.QueueList_QueueList$from(inner, this.T);
    },
    $signature() {
      return this.T._eval$1('QueueList<0>(Iterable<0>)');
    },
  };
  B.flattenVertically_closure2.prototype = {
    call$1(queue) {
      this.result.push(queue.removeFirst$0());
      return queue.get$length(queue) === 0;
    },
    $signature() {
      return this.T._eval$1('bool(QueueList<0>)');
    },
  };
  B.longestCommonSubsequence_closure0.prototype = {
    call$2(element1, element2) {
      return J.$eq$(element1, element2) ? element1 : null;
    },
    $signature() {
      return this.T._eval$1('0?(0,0)');
    },
  };
  B.longestCommonSubsequence_backtrack0.prototype = {
    call$2(i, j) {
      var selection,
        t1,
        _this = this;
      if (i === -1 || j === -1)
        return H._setArrayType([], _this.T._eval$1('JSArray<0>'));
      selection = _this.selections[i][j];
      if (selection != null) {
        t1 = _this.call$2(i - 1, j - 1);
        J.add$1$ax(t1, selection);
        return t1;
      }
      t1 = _this.lengths;
      return t1[i + 1][j] > t1[i][j + 1]
        ? _this.call$2(i, j - 1)
        : _this.call$2(i - 1, j);
    },
    $signature() {
      return this.T._eval$1('List<0>(int,int)');
    },
  };
  B.mapAddAll2_closure0.prototype = {
    call$2(key, inner) {
      var t1 = this.destination,
        innerDestination = t1.$index(0, key);
      if (innerDestination != null) innerDestination.addAll$1(0, inner);
      else t1.$indexSet(0, key, inner);
    },
    $signature() {
      return this.K1._eval$1('@<0>')
        ._bind$1(this.K2)
        ._bind$1(this.V)
        ._eval$1('~(1,Map<2,3>)');
    },
  };
  F.CssValue0.prototype = {
    toString$0(_) {
      return J.toString$0$(this.value);
    },
    $isAstNode0: 1,
    get$value(receiver) {
      return this.value;
    },
    get$span() {
      return this.span;
    },
  };
  F.ValueExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitValueExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return N.serializeValue(this.value, true, true);
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  F.ModifiableCssValue0.prototype = {
    toString$0(_) {
      return N.serializeSelector0(this.value, true);
    },
    $isAstNode0: 1,
    $isCssValue0: 1,
    get$value(receiver) {
      return this.value;
    },
    get$span() {
      return this.span;
    },
  };
  F.Value0.prototype = {
    get$isTruthy() {
      return true;
    },
    get$separator() {
      return C.ListSeparator_undecided_null0;
    },
    get$hasBrackets() {
      return false;
    },
    get$asList() {
      return H._setArrayType([this], type$.JSArray_Value_2);
    },
    get$lengthAsList() {
      return 1;
    },
    get$isBlank() {
      return false;
    },
    get$isSpecialNumber() {
      return false;
    },
    get$isVar() {
      return false;
    },
    get$realNull() {
      return this;
    },
    sassIndexToListIndex$2(sassIndex, $name) {
      var _this = this,
        index = sassIndex.assertNumber$1($name).assertInt$1($name);
      if (index === 0)
        throw H.wrapException(
          _this._value0$_exception$2('List index may not be 0.', $name)
        );
      if (Math.abs(index) > _this.get$lengthAsList())
        throw H.wrapException(
          _this._value0$_exception$2(
            'Invalid index ' +
              sassIndex.toString$0(0) +
              ' for a list with ' +
              _this.get$lengthAsList() +
              ' elements.',
            $name
          )
        );
      return index < 0 ? _this.get$lengthAsList() + index : index - 1;
    },
    assertColor$1($name) {
      return H.throwExpression(
        this._value0$_exception$2(
          this.toString$0(0) + ' is not a color.',
          $name
        )
      );
    },
    assertFunction$1($name) {
      return H.throwExpression(
        this._value0$_exception$2(
          this.toString$0(0) + ' is not a function reference.',
          $name
        )
      );
    },
    assertMap$1($name) {
      return H.throwExpression(
        this._value0$_exception$2(this.toString$0(0) + ' is not a map.', $name)
      );
    },
    tryMap$0() {
      return null;
    },
    assertNumber$1($name) {
      return H.throwExpression(
        this._value0$_exception$2(
          this.toString$0(0) + ' is not a number.',
          $name
        )
      );
    },
    assertNumber$0() {
      return this.assertNumber$1(null);
    },
    assertString$1($name) {
      return H.throwExpression(
        this._value0$_exception$2(
          this.toString$0(0) + ' is not a string.',
          $name
        )
      );
    },
    assertSelector$2$allowParent$name(allowParent, $name) {
      var error,
        t1,
        exception,
        string = this._value0$_selectorString$1($name);
      try {
        t1 = D.SelectorList_SelectorList$parse0(
          string,
          allowParent,
          true,
          null
        );
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException0) {
          error = t1;
          throw H.wrapException(
            this._value0$_exception$2(
              C.JSString_methods.replaceFirst$2(
                J.toString$0$(error),
                'Error: ',
                ''
              ),
              $name
            )
          );
        } else throw exception;
      }
    },
    assertSelector$1$name($name) {
      return this.assertSelector$2$allowParent$name(false, $name);
    },
    assertSelector$0() {
      return this.assertSelector$2$allowParent$name(false, null);
    },
    assertSelector$1$allowParent(allowParent) {
      return this.assertSelector$2$allowParent$name(allowParent, null);
    },
    assertCompoundSelector$1$name($name) {
      var error,
        t1,
        exception,
        allowParent = false,
        string = this._value0$_selectorString$1($name);
      try {
        t1 = T.SelectorParser$0(
          string,
          allowParent,
          true,
          null,
          null
        ).parseCompoundSelector$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof E.SassFormatException0) {
          error = t1;
          throw H.wrapException(
            this._value0$_exception$2(
              C.JSString_methods.replaceFirst$2(
                J.toString$0$(error),
                'Error: ',
                ''
              ),
              $name
            )
          );
        } else throw exception;
      }
    },
    _value0$_selectorString$1($name) {
      var string = this._value0$_selectorStringOrNull$0();
      if (string != null) return string;
      throw H.wrapException(
        this._value0$_exception$2(this.toString$0(0) + string$.x20is_no, $name)
      );
    },
    _value0$_selectorStringOrNull$0() {
      var t1,
        t2,
        result,
        t3,
        _i,
        complex,
        string,
        compound,
        _this = this,
        _null = null;
      if (_this instanceof D.SassString0) return _this.text;
      if (!(_this instanceof D.SassList0)) return _null;
      t1 = _this._list1$_contents;
      t2 = t1.length;
      if (t2 === 0) return _null;
      result = H._setArrayType([], type$.JSArray_String);
      t3 = _this.separator;
      switch (t3) {
        case C.ListSeparator_kWM0:
          for (_i = 0; _i < t2; ++_i) {
            complex = t1[_i];
            if (complex instanceof D.SassString0) result.push(complex.text);
            else if (
              complex instanceof D.SassList0 &&
              complex.separator === C.ListSeparator_woc0
            ) {
              string = complex._value0$_selectorStringOrNull$0();
              if (string == null) return _null;
              result.push(string);
            } else return _null;
          }
          break;
        case C.ListSeparator_1gm0:
          return _null;
        default:
          for (_i = 0; _i < t2; ++_i) {
            compound = t1[_i];
            if (compound instanceof D.SassString0) result.push(compound.text);
            else return _null;
          }
          break;
      }
      return C.JSArray_methods.join$1(
        result,
        t3 === C.ListSeparator_kWM0 ? ', ' : ' '
      );
    },
    withListContents$2$separator(contents, separator) {
      var t1 = separator == null ? this.get$separator() : separator,
        t2 = this.get$hasBrackets();
      return D.SassList$0(contents, t1, t2);
    },
    withListContents$1(contents) {
      return this.withListContents$2$separator(contents, null);
    },
    greaterThan$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' > ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    greaterThanOrEquals$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' >= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThan$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' < ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    lessThanOrEquals$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' <= ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    times$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' * ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    modulo$1(other) {
      return H.throwExpression(
        E.SassScriptException$0(
          'Undefined operation "' +
            this.toString$0(0) +
            ' % ' +
            other.toString$0(0) +
            '".'
        )
      );
    },
    plus$1(other) {
      if (other instanceof D.SassString0)
        return new D.SassString0(
          N.serializeValue(this, false, true) + other.text,
          other.hasQuotes
        );
      else
        return new D.SassString0(
          N.serializeValue(this, false, true) +
            N.serializeValue(other, false, true),
          false
        );
    },
    minus$1(other) {
      return new D.SassString0(
        N.serializeValue(this, false, true) +
          '-' +
          N.serializeValue(other, false, true),
        false
      );
    },
    dividedBy$1(other) {
      return new D.SassString0(
        N.serializeValue(this, false, true) +
          '/' +
          N.serializeValue(other, false, true),
        false
      );
    },
    unaryPlus$0() {
      return new D.SassString0(
        '+' + N.serializeValue(this, false, true),
        false
      );
    },
    unaryMinus$0() {
      return new D.SassString0(
        '-' + N.serializeValue(this, false, true),
        false
      );
    },
    unaryNot$0() {
      return C.SassBoolean_false;
    },
    withoutSlash$0() {
      return this;
    },
    toString$0(_) {
      return N.serializeValue(this, true, true);
    },
    _value0$_exception$2(message, $name) {
      return new E.SassScriptException0(
        $name == null ? message : '$' + $name + ': ' + message
      );
    },
  };
  S.VariableExpression0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitVariableExpression$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace,
        t2 = this.name;
      return t1 == null ? '$' + t2 : t1 + '.$' + t2;
    },
    $isExpression0: 1,
    $isAstNode0: 1,
    get$span() {
      return this.span;
    },
  };
  Z.VariableDeclaration0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitVariableDeclaration$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.namespace;
      t1 = t1 != null ? '$' + (t1 + '.') : '$';
      t1 += this.name + ': ' + this.expression.toString$0(0) + ';';
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  N.withWarnCallback_closure0.prototype = {
    call$0() {
      return this.callback.call$0();
    },
    $signature() {
      return this.T._eval$1('0()');
    },
  };
  Y.WarnRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWarnRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      return '@warn ' + this.expression.toString$0(0) + ';';
    },
    $isAstNode0: 1,
    $isStatement0: 1,
    get$span() {
      return this.span;
    },
  };
  G.WhileRule0.prototype = {
    accept$1$1(visitor) {
      return visitor.visitWhileRule$1(this);
    },
    accept$1(visitor) {
      return this.accept$1$1(visitor, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.children;
      return (
        '@while ' +
        this.condition.toString$0(0) +
        ' {' +
        (t1 && C.JSArray_methods).join$1(t1, ' ') +
        '}'
      );
    },
    get$span() {
      return this.span;
    },
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = B.ModifiableCssParentNode.prototype;
    _.super$ModifiableCssParentNode$addChild = _.addChild$1;
    _ = M.SimpleSelector.prototype;
    _.super$SimpleSelector$addSuffix = _.addSuffix$1;
    _.super$SimpleSelector$unify = _.unify$1;
    _ = G.Parser.prototype;
    _.super$Parser$silentComment = _.silentComment$0;
    _ = V.StylesheetParser.prototype;
    _.super$StylesheetParser$importArgument = _.importArgument$0;
    _ = F.Value.prototype;
    _.super$Value$assertMap = _.assertMap$1;
    _.super$Value$plus = _.plus$1;
    _.super$Value$minus = _.minus$1;
    _.super$Value$dividedBy = _.dividedBy$1;
    _ = T.SassNumber.prototype;
    _.super$SassNumber$convertValueToMatch = _.convertValueToMatch$3;
    _.super$SassNumber$coerce = _.coerce$3;
    _.super$SassNumber$coerceValue = _.coerceValue$3;
    _.super$SassNumber$coerceValueToUnit = _.coerceValueToUnit$2;
    _.super$SassNumber$greaterThan = _.greaterThan$1;
    _.super$SassNumber$greaterThanOrEquals = _.greaterThanOrEquals$1;
    _.super$SassNumber$lessThan = _.lessThan$1;
    _.super$SassNumber$lessThanOrEquals = _.lessThanOrEquals$1;
    _.super$SassNumber$modulo = _.modulo$1;
    _.super$SassNumber$plus = _.plus$1;
    _.super$SassNumber$minus = _.minus$1;
    _.super$SassNumber$times = _.times$1;
    _.super$SassNumber$dividedBy = _.dividedBy$1;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = X.StringScanner.prototype;
    _.super$StringScanner$readChar = _.readChar$0;
    _.super$StringScanner$scanChar = _.scanChar$1;
    _.super$StringScanner$scan = _.scan$1;
    _.super$StringScanner$matches = _.matches$1;
    _ = B.ModifiableCssParentNode0.prototype;
    _.super$ModifiableCssParentNode$addChild0 = _.addChild$1;
    _ = T.SassNumber0.prototype;
    _.super$SassNumber$convertValueToMatch0 = _.convertValueToMatch$3;
    _.super$SassNumber$coerce0 = _.coerce$3;
    _.super$SassNumber$coerceValue0 = _.coerceValue$3;
    _.super$SassNumber$coerceValueToUnit0 = _.coerceValueToUnit$2;
    _.super$SassNumber$greaterThan0 = _.greaterThan$1;
    _.super$SassNumber$greaterThanOrEquals0 = _.greaterThanOrEquals$1;
    _.super$SassNumber$lessThan0 = _.lessThan$1;
    _.super$SassNumber$lessThanOrEquals0 = _.lessThanOrEquals$1;
    _.super$SassNumber$modulo0 = _.modulo$1;
    _.super$SassNumber$plus0 = _.plus$1;
    _.super$SassNumber$minus0 = _.minus$1;
    _.super$SassNumber$times0 = _.times$1;
    _.super$SassNumber$dividedBy0 = _.dividedBy$1;
    _ = G.Parser1.prototype;
    _.super$Parser$silentComment0 = _.silentComment$0;
    _ = M.SimpleSelector0.prototype;
    _.super$SimpleSelector$addSuffix0 = _.addSuffix$1;
    _.super$SimpleSelector$unify0 = _.unify$1;
    _ = V.StylesheetParser0.prototype;
    _.super$StylesheetParser$importArgument0 = _.importArgument$0;
    _ = F.Value0.prototype;
    _.super$Value$assertMap0 = _.assertMap$1;
    _.super$Value$plus0 = _.plus$1;
    _.super$Value$minus0 = _.minus$1;
    _.super$Value$dividedBy0 = _.dividedBy$1;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_1_u = hunkHelpers._instance_1u,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i;
    _static_2(
      J,
      '_interceptors_JSArray__compareAny$closure',
      'JSArray__compareAny',
      140
    );
    _instance_1_i(J.JSArray.prototype, 'get$contains', 'contains$1', 10);
    _instance_1_i(
      H._CastIterableBase.prototype,
      'get$contains',
      'contains$1',
      10
    );
    _instance_1_u(
      H.ConstantStringMap.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_u(
      H.JsLinkedHashMap.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _static_1(
      P,
      'async__AsyncRun__scheduleImmediateJsOverride$closure',
      '_AsyncRun__scheduleImmediateJsOverride',
      108
    );
    _static_1(
      P,
      'async__AsyncRun__scheduleImmediateWithSetImmediate$closure',
      '_AsyncRun__scheduleImmediateWithSetImmediate',
      108
    );
    _static_1(
      P,
      'async__AsyncRun__scheduleImmediateWithTimer$closure',
      '_AsyncRun__scheduleImmediateWithTimer',
      108
    );
    _static_0(
      P,
      'async___startMicrotaskLoop$closure',
      '_startMicrotaskLoop',
      0
    );
    _static_1(P, 'async___nullDataHandler$closure', '_nullDataHandler', 112);
    _static(
      P,
      'async___rootHandleUncaughtError$closure',
      5,
      null,
      ['call$5'],
      ['_rootHandleUncaughtError'],
      471,
      0
    );
    _static(
      P,
      'async___rootRun$closure',
      4,
      null,
      ['call$1$4', 'call$4'],
      [
        '_rootRun',
        function ($self, $parent, zone, f) {
          return P._rootRun($self, $parent, zone, f, type$.dynamic);
        },
      ],
      472,
      1
    );
    _static(
      P,
      'async___rootRunUnary$closure',
      5,
      null,
      ['call$2$5', 'call$5'],
      [
        '_rootRunUnary',
        function ($self, $parent, zone, f, arg) {
          return P._rootRunUnary(
            $self,
            $parent,
            zone,
            f,
            arg,
            type$.dynamic,
            type$.dynamic
          );
        },
      ],
      473,
      1
    );
    _static(
      P,
      'async___rootRunBinary$closure',
      6,
      null,
      ['call$3$6', 'call$6'],
      [
        '_rootRunBinary',
        function ($self, $parent, zone, f, arg1, arg2) {
          return P._rootRunBinary(
            $self,
            $parent,
            zone,
            f,
            arg1,
            arg2,
            type$.dynamic,
            type$.dynamic,
            type$.dynamic
          );
        },
      ],
      474,
      1
    );
    _static(
      P,
      'async___rootRegisterCallback$closure',
      4,
      null,
      ['call$1$4', 'call$4'],
      [
        '_rootRegisterCallback',
        function ($self, $parent, zone, f) {
          return P._rootRegisterCallback(
            $self,
            $parent,
            zone,
            f,
            type$.dynamic
          );
        },
      ],
      475,
      0
    );
    _static(
      P,
      'async___rootRegisterUnaryCallback$closure',
      4,
      null,
      ['call$2$4', 'call$4'],
      [
        '_rootRegisterUnaryCallback',
        function ($self, $parent, zone, f) {
          return P._rootRegisterUnaryCallback(
            $self,
            $parent,
            zone,
            f,
            type$.dynamic,
            type$.dynamic
          );
        },
      ],
      476,
      0
    );
    _static(
      P,
      'async___rootRegisterBinaryCallback$closure',
      4,
      null,
      ['call$3$4', 'call$4'],
      [
        '_rootRegisterBinaryCallback',
        function ($self, $parent, zone, f) {
          return P._rootRegisterBinaryCallback(
            $self,
            $parent,
            zone,
            f,
            type$.dynamic,
            type$.dynamic,
            type$.dynamic
          );
        },
      ],
      477,
      0
    );
    _static(
      P,
      'async___rootErrorCallback$closure',
      5,
      null,
      ['call$5'],
      ['_rootErrorCallback'],
      478,
      0
    );
    _static(
      P,
      'async___rootScheduleMicrotask$closure',
      4,
      null,
      ['call$4'],
      ['_rootScheduleMicrotask'],
      479,
      0
    );
    _static(
      P,
      'async___rootCreateTimer$closure',
      5,
      null,
      ['call$5'],
      ['_rootCreateTimer'],
      480,
      0
    );
    _static(
      P,
      'async___rootCreatePeriodicTimer$closure',
      5,
      null,
      ['call$5'],
      ['_rootCreatePeriodicTimer'],
      481,
      0
    );
    _static(
      P,
      'async___rootPrint$closure',
      4,
      null,
      ['call$4'],
      ['_rootPrint'],
      482,
      0
    );
    _static_1(P, 'async___printToZone$closure', '_printToZone', 158);
    _static(
      P,
      'async___rootFork$closure',
      5,
      null,
      ['call$5'],
      ['_rootFork'],
      483,
      0
    );
    _instance(
      P._AsyncCompleter.prototype,
      'get$complete',
      0,
      0,
      function () {
        return [null];
      },
      ['call$1', 'call$0'],
      ['complete$1', 'complete$0'],
      126,
      0,
      0
    );
    _instance_2_u(
      P._Future.prototype,
      'get$_completeError',
      '_completeError$2',
      128
    );
    var _;
    _instance_0_u(
      (_ = P._ControllerSubscription.prototype),
      'get$_onPause',
      '_onPause$0',
      0
    );
    _instance_0_u(_, 'get$_onResume', '_onResume$0', 0);
    _instance_0_u(
      (_ = P._BufferingStreamSubscription.prototype),
      'get$_onPause',
      '_onPause$0',
      0
    );
    _instance_0_u(_, 'get$_onResume', '_onResume$0', 0);
    _instance_1_u(
      (_ = P._StreamIterator.prototype),
      'get$_onData',
      '_onData$1',
      45
    );
    _instance_2_u(_, 'get$_onError', '_onError$2', 128);
    _instance_0_u(_, 'get$_onDone', '_onDone$0', 0);
    _static_2(P, 'collection___defaultEquals$closure', '_defaultEquals', 167);
    _static_1(
      P,
      'collection___defaultHashCode$closure',
      '_defaultHashCode',
      125
    );
    _static_2(
      P,
      'collection_ListMixin__compareAny$closure',
      'ListMixin__compareAny',
      140
    );
    _instance_1_u(P._HashMap.prototype, 'get$containsKey', 'containsKey$1', 10);
    _instance_1_u(
      P._LinkedCustomHashMap.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance(
      (_ = P._LinkedHashSet.prototype),
      'get$_newSimilarSet',
      0,
      0,
      null,
      ['call$1$0', 'call$0'],
      ['_newSimilarSet$1$0', '_newSimilarSet$0'],
      462,
      0,
      0
    );
    _instance_1_i(_, 'get$contains', 'contains$1', 10);
    _instance_1_i(_, 'get$add', 'add$1', 10);
    _instance(
      P._LinkedIdentityHashSet.prototype,
      'get$_newSimilarSet',
      0,
      0,
      null,
      ['call$1$0', 'call$0'],
      ['_newSimilarSet$1$0', '_newSimilarSet$0'],
      455,
      0,
      0
    );
    _instance_1_u(P.MapMixin.prototype, 'get$containsKey', 'containsKey$1', 10);
    _instance_1_u(P.MapView.prototype, 'get$containsKey', 'containsKey$1', 10);
    _instance_1_i(
      P._UnmodifiableSet.prototype,
      'get$contains',
      'contains$1',
      10
    );
    _static_1(
      P,
      'convert___defaultToEncodable$closure',
      '_defaultToEncodable',
      80
    );
    _static_1(P, 'core__identityHashCode$closure', 'identityHashCode', 125);
    _static_2(P, 'core__identical$closure', 'identical', 167);
    _static_1(P, 'core_Uri_decodeComponent$closure', 'Uri_decodeComponent', 5);
    _instance_1_i(P.Iterable.prototype, 'get$contains', 'contains$1', 10);
    _instance_1_i(P.StringBuffer.prototype, 'get$write', 'write$1', 45);
    _static(
      P,
      'math0__max$closure',
      2,
      null,
      ['call$1$2', 'call$2'],
      [
        'max',
        function (a, b) {
          return P.max(a, b, type$.num);
        },
      ],
      486,
      1
    );
    _instance_0_i(B.ReplAdapter.prototype, 'get$exit', 'exit$0', 0);
    _instance_1_i(
      O.EmptyUnmodifiableSet.prototype,
      'get$contains',
      'contains$1',
      10
    );
    _instance_1_i(
      M._DelegatingIterableBase.prototype,
      'get$contains',
      'contains$1',
      10
    );
    _instance_1_i(M.MapKeySet.prototype, 'get$contains', 'contains$1', 10);
    _instance_1_u(
      B.ModifiableCssNode.prototype,
      'get$_node0$_isInvisible',
      '_node0$_isInvisible$1',
      7
    );
    _instance_1_u(
      D.SelectorList.prototype,
      'get$_complexContainsParentSelector',
      '_complexContainsParentSelector$1',
      16
    );
    _instance_1_u(
      F.EmptyExtensionStore.prototype,
      'get$addExtensions',
      'addExtensions$1',
      152
    );
    _instance_1_u(
      X.ExtensionStore.prototype,
      'get$addExtensions',
      'addExtensions$1',
      152
    );
    _static_1(Y, 'functions___isUnique$closure', '_isUnique', 15);
    _static_1(K, 'color___opacify$closure', '_opacify', 23);
    _static_1(K, 'color___transparentize$closure', '_transparentize', 23);
    _instance_0_u(
      (_ = G.Parser.prototype),
      'get$whitespace',
      'whitespace$0',
      0
    );
    _instance_0_u(_, 'get$loudComment', 'loudComment$0', 0);
    _instance_0_u(_, 'get$string', 'string$0', 28);
    _instance_0_u(
      U.SassParser.prototype,
      'get$loudComment',
      'loudComment$0',
      0
    );
    _instance(
      (_ = V.StylesheetParser.prototype),
      'get$_statement',
      0,
      0,
      null,
      ['call$1$root', 'call$0'],
      ['_statement$1$root', '_statement$0'],
      245,
      0,
      0
    );
    _instance_0_u(_, 'get$_declarationChild', '_declarationChild$0', 103);
    _instance_0_u(_, 'get$_functionChild', '_functionChild$0', 103);
    _instance(
      _,
      'get$expression',
      0,
      0,
      null,
      [
        'call$3$bracketList$singleEquals$until',
        'call$0',
        'call$2$singleEquals$until',
        'call$1$bracketList',
        'call$1$singleEquals',
        'call$1$until',
      ],
      [
        'expression$3$bracketList$singleEquals$until',
        'expression$0',
        'expression$2$singleEquals$until',
        'expression$1$bracketList',
        'expression$1$singleEquals',
        'expression$1$until',
      ],
      243,
      0,
      0
    );
    _instance_0_u(_, 'get$_number', '_number$0', 240);
    _instance_1_u(
      K.LimitedMapView.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_u(
      Z.MergedMapView.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_i(N.NoSourceMapBuffer0.prototype, 'get$write', 'write$1', 45);
    _instance_1_u(
      F.PrefixedMapView.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_u(
      U.PublicMemberMapView.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_i(D.SourceMapBuffer0.prototype, 'get$write', 'write$1', 45);
    _instance_1_u(
      R.UnprefixedMapView.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _static_1(B, 'utils__isPublic$closure', 'isPublic', 6);
    _instance_2_u(
      T.SassNumber.prototype,
      'get$moduloLikeSass',
      'moduloLikeSass$2',
      43
    );
    _instance_1_u(
      (_ = E._EvaluateVisitor0.prototype),
      'get$_async_evaluate$_visitMediaQueries',
      '_async_evaluate$_visitMediaQueries$1',
      302
    );
    _instance_1_u(
      _,
      'get$_async_evaluate$_visitSupportsCondition',
      '_async_evaluate$_visitSupportsCondition$1',
      396
    );
    _instance_1_u(
      _,
      'get$_async_evaluate$_expressionNode',
      '_async_evaluate$_expressionNode$1',
      206
    );
    _instance_1_u(
      (_ = R._EvaluateVisitor.prototype),
      'get$_visitMediaQueries',
      '_visitMediaQueries$1',
      241
    );
    _instance_1_u(
      _,
      'get$_visitSupportsCondition',
      '_visitSupportsCondition$1',
      242
    );
    _instance_1_u(_, 'get$_expressionNode', '_expressionNode$1', 206);
    _instance_1_u(
      (_ = D.RecursiveStatementVisitor.prototype),
      'get$visitContentBlock',
      'visitContentBlock$1',
      257
    );
    _instance_1_u(_, 'get$visitChildren', 'visitChildren$1', 258);
    _instance_1_u(
      (_ = N._SerializeVisitor0.prototype),
      'get$_visitMediaQuery',
      '_visitMediaQuery$1',
      259
    );
    _instance_1_u(_, 'get$_isInvisible', '_isInvisible$1', 7);
    _instance_1_u(
      (_ = A.StatementSearchVisitor.prototype),
      'get$visitContentBlock',
      'visitContentBlock$1',
      'StatementSearchVisitor.T?(ContentBlock)'
    );
    _instance_1_u(
      _,
      'get$visitChildren',
      'visitChildren$1',
      'StatementSearchVisitor.T?(List<Statement>)'
    );
    _instance(
      Y.SourceSpanMixin.prototype,
      'get$message',
      1,
      1,
      function () {
        return { color: null };
      },
      ['call$2$color', 'call$1'],
      ['message$2$color', 'message$1'],
      271,
      0,
      0
    );
    _instance_1_u(
      (_ = E._EvaluateVisitor1.prototype),
      'get$_async_evaluate0$_visitMediaQueries',
      '_async_evaluate0$_visitMediaQueries$1',
      296
    );
    _instance_1_u(
      _,
      'get$_async_evaluate0$_visitSupportsCondition',
      '_async_evaluate0$_visitSupportsCondition$1',
      297
    );
    _instance_1_u(
      _,
      'get$_async_evaluate0$_expressionNode',
      '_async_evaluate0$_expressionNode$1',
      298
    );
    _static_1(K, 'color0___opacify$closure', '_opacify0', 22);
    _static_1(K, 'color0___transparentize$closure', '_transparentize0', 22);
    _instance_1_u(
      F.EmptyExtensionStore0.prototype,
      'get$addExtensions',
      'addExtensions$1',
      192
    );
    _instance_1_u(
      X.ExtensionStore0.prototype,
      'get$addExtensions',
      'addExtensions$1',
      192
    );
    _static_1(Y, 'functions0___isUnique$closure', '_isUnique0', 19);
    _instance_1_u(
      K.LimitedMapView0.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_u(
      D.SelectorList0.prototype,
      'get$_list2$_complexContainsParentSelector',
      '_list2$_complexContainsParentSelector$1',
      17
    );
    _instance_1_u(
      Z.MergedMapView0.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_i(N.NoSourceMapBuffer.prototype, 'get$write', 'write$1', 45);
    _instance_1_u(
      B.ModifiableCssNode0.prototype,
      'get$_node2$_isInvisible',
      '_node2$_isInvisible$1',
      14
    );
    _static_2(B, 'node___render$closure', '_render', 487);
    _instance_2_u(
      T.SassNumber0.prototype,
      'get$moduloLikeSass',
      'moduloLikeSass$2',
      43
    );
    _instance_0_u(
      (_ = G.Parser1.prototype),
      'get$whitespace',
      'whitespace$0',
      0
    );
    _instance_0_u(_, 'get$loudComment', 'loudComment$0', 0);
    _instance_0_u(_, 'get$string', 'string$0', 28);
    _instance_1_u(
      F.PrefixedMapView0.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _instance_1_u(
      U.PublicMemberMapView0.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _static_1(U, 'sass__main$closure', 'main', 488);
    _instance_0_u(
      U.SassParser0.prototype,
      'get$loudComment',
      'loudComment$0',
      0
    );
    _instance_1_u(
      (_ = N._SerializeVisitor.prototype),
      'get$_serialize0$_visitMediaQuery',
      '_serialize0$_visitMediaQuery$1',
      438
    );
    _instance_1_u(
      _,
      'get$_serialize0$_isInvisible',
      '_serialize0$_isInvisible$1',
      14
    );
    _instance_1_i(D.SourceMapBuffer.prototype, 'get$write', 'write$1', 45);
    _instance_1_u(
      (_ = A.StatementSearchVisitor0.prototype),
      'get$visitContentBlock',
      'visitContentBlock$1',
      'StatementSearchVisitor0.T?(ContentBlock0)'
    );
    _instance_1_u(
      _,
      'get$visitChildren',
      'visitChildren$1',
      'StatementSearchVisitor0.T?(List<Statement0>)'
    );
    _instance(
      (_ = V.StylesheetParser0.prototype),
      'get$_stylesheet0$_statement',
      0,
      0,
      null,
      ['call$1$root', 'call$0'],
      ['_stylesheet0$_statement$1$root', '_stylesheet0$_statement$0'],
      444,
      0,
      0
    );
    _instance_0_u(
      _,
      'get$_stylesheet0$_declarationChild',
      '_stylesheet0$_declarationChild$0',
      113
    );
    _instance_0_u(
      _,
      'get$_stylesheet0$_functionChild',
      '_stylesheet0$_functionChild$0',
      113
    );
    _instance_0_u(_, 'get$_stylesheet0$_number', '_stylesheet0$_number$0', 446);
    _instance_1_u(
      R.UnprefixedMapView0.prototype,
      'get$containsKey',
      'containsKey$1',
      10
    );
    _static_1(B, 'utils0__isPublic$closure', 'isPublic0', 6);
    _static(
      D,
      'path__absolute$closure',
      1,
      function () {
        return [null, null, null, null, null, null];
      },
      ['call$7', 'call$2', 'call$1', 'call$3', 'call$4', 'call$6', 'call$5'],
      [
        'absolute',
        function (part1, part2) {
          return D.absolute(part1, part2, null, null, null, null, null);
        },
        function (part1) {
          return D.absolute(part1, null, null, null, null, null, null);
        },
        function (part1, part2, part3) {
          return D.absolute(part1, part2, part3, null, null, null, null);
        },
        function (part1, part2, part3, part4) {
          return D.absolute(part1, part2, part3, part4, null, null, null);
        },
        function (part1, part2, part3, part4, part5, part6) {
          return D.absolute(part1, part2, part3, part4, part5, part6, null);
        },
        function (part1, part2, part3, part4, part5) {
          return D.absolute(part1, part2, part3, part4, part5, null, null);
        },
      ],
      489,
      0
    );
    _static_1(D, 'path__prettyUri$closure', 'prettyUri', 65);
    _static_1(T, 'character__isWhitespace$closure', 'isWhitespace', 26);
    _static_1(T, 'character__isNewline$closure', 'isNewline', 26);
    _static_1(T, 'character__isHex$closure', 'isHex', 26);
    _static_2(T, 'number0__fuzzyLessThan$closure', 'fuzzyLessThan', 35);
    _static_2(
      T,
      'number0__fuzzyLessThanOrEquals$closure',
      'fuzzyLessThanOrEquals',
      35
    );
    _static_2(T, 'number0__fuzzyGreaterThan$closure', 'fuzzyGreaterThan', 35);
    _static_2(
      T,
      'number0__fuzzyGreaterThanOrEquals$closure',
      'fuzzyGreaterThanOrEquals',
      35
    );
    _static_1(T, 'number0__fuzzyRound$closure', 'fuzzyRound', 34);
    _static_1(T, 'character0__isWhitespace$closure', 'isWhitespace0', 26);
    _static_1(T, 'character0__isNewline$closure', 'isNewline0', 26);
    _static_1(T, 'character0__isHex$closure', 'isHex0', 26);
    _static_2(T, 'number2__fuzzyLessThan$closure', 'fuzzyLessThan0', 35);
    _static_2(
      T,
      'number2__fuzzyLessThanOrEquals$closure',
      'fuzzyLessThanOrEquals0',
      35
    );
    _static_2(T, 'number2__fuzzyGreaterThan$closure', 'fuzzyGreaterThan0', 35);
    _static_2(
      T,
      'number2__fuzzyGreaterThanOrEquals$closure',
      'fuzzyGreaterThanOrEquals0',
      35
    );
    _static_1(T, 'number2__fuzzyRound$closure', 'fuzzyRound0', 34);
    _static_1(F, 'value1__wrapValue$closure', 'wrapValue', 327);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [
      H.JS_CONST,
      J.Interceptor,
      J.ArrayIterator,
      P.Iterable,
      H.CastIterator,
      H.Closure,
      P.Error,
      P._ListBase_Object_ListMixin,
      H.ListIterator,
      P.Iterator,
      H.ExpandIterator,
      H.EmptyIterator,
      H.FollowedByIterator,
      H.WhereTypeIterator,
      H.FixedLengthListMixin,
      H.UnmodifiableListMixin,
      H.Symbol,
      P.MapView,
      H.ConstantMap,
      H.JSInvocationMirror,
      H.TypeErrorDecoder,
      H.NullThrownFromJavaScriptException,
      H.ExceptionAndStackTrace,
      H._StackTrace,
      H._Required,
      P.MapMixin,
      H.LinkedHashMapCell,
      H.LinkedHashMapKeyIterator,
      H.JSSyntaxRegExp,
      H._MatchImplementation,
      H._AllMatchesIterator,
      H.StringMatch,
      H._StringAllMatchesIterator,
      H._Cell,
      H.Rti,
      H._FunctionParameters,
      H._Type,
      P._TimerImpl,
      P._AsyncAwaitCompleter,
      P._IterationMarker,
      P._SyncStarIterator,
      P.AsyncError,
      P._Completer,
      P._FutureListener,
      P._Future,
      P._AsyncCallbackEntry,
      P.Stream,
      P.StreamTransformerBase,
      P._StreamController,
      P._AsyncStreamControllerDispatch,
      P._BufferingStreamSubscription,
      P._DelayedEvent,
      P._DelayedDone,
      P._PendingEvents,
      P._StreamIterator,
      P._ZoneFunction,
      P._RunNullaryZoneFunction,
      P._RunUnaryZoneFunction,
      P._RunBinaryZoneFunction,
      P._RegisterNullaryZoneFunction,
      P._RegisterUnaryZoneFunction,
      P._RegisterBinaryZoneFunction,
      P._ZoneSpecification,
      P._ZoneDelegate,
      P._Zone,
      P._HashMapKeyIterator,
      P.__SetBase_Object_SetMixin,
      P._LinkedHashSetCell,
      P._LinkedHashSetIterator,
      P.ListMixin,
      P._MapBaseValueIterator,
      P._UnmodifiableMapMixin,
      P._ListQueueIterator,
      P.SetMixin,
      P._UnmodifiableSetMixin,
      P.Codec,
      P._Base64Encoder,
      P.ChunkedConversionSink,
      P._JsonStringifier,
      P.StringConversionSinkMixin,
      P._Utf8Encoder,
      P._Utf8Decoder,
      P.DateTime,
      P.Duration,
      P.OutOfMemoryError,
      P.StackOverflowError,
      P._Exception,
      P.FormatException,
      P.MapEntry,
      P.Null,
      P._StringStackTrace,
      P.RuneIterator,
      P.StringBuffer,
      P._Uri,
      P.UriData,
      P._SimpleUri,
      P._JSRandom,
      N.ArgParser,
      V.ArgResults,
      G.Option,
      G.OptionType,
      G.Parser0,
      G._Usage,
      V.ErrorResult,
      F.ValueResult,
      G.StreamQueue,
      G._NextRequest,
      Q.Repl,
      B.ReplAdapter,
      U.DefaultEquality,
      U.IterableEquality,
      U.ListEquality,
      U._MapEntry,
      U.MapEquality,
      Q._QueueList_Object_ListMixin,
      M._DelegatingIterableBase,
      L.UnmodifiableSetMixin,
      M.Context,
      M._PathDirection,
      M._PathRelation,
      O.Style,
      X.ParsedPath,
      X.PathException,
      F.CssMediaQuery,
      F._SingletonCssMediaQueryMergeResult,
      F.MediaQuerySuccessfulMergeResult,
      B.AstNode,
      F.ModifiableCssValue,
      F.CssValue,
      B._FakeAstNode,
      Z.Argument,
      B.ArgumentDeclaration,
      X.ArgumentInvocation,
      V.AtRootQuery,
      Z.ConfiguredVariable,
      V.BinaryOperationExpression,
      V.BinaryOperator,
      Z.BooleanExpression,
      K.ColorExpression,
      F.FunctionExpression,
      L.IfExpression,
      N.InterpolatedFunctionExpression,
      D.ListExpression,
      A.MapExpression,
      O.NullExpression,
      T.NumberExpression,
      T.ParenthesizedExpression,
      T.SelectorExpression,
      D.StringExpression,
      X.UnaryOperationExpression,
      X.UnaryOperator,
      F.ValueExpression,
      S.VariableExpression,
      B.DynamicImport,
      Q.StaticImport,
      X.Interpolation,
      M.ParentStatement,
      Q.ContentRule,
      Q.DebugRule,
      D.ErrorRule,
      X.ExtendRule,
      L.ForwardRule,
      V.IfRule,
      V.IfRuleClause,
      B.ImportRule,
      A.IncludeRule,
      L.LoudComment,
      A.StatementSearchVisitor,
      B.ReturnRule,
      B.SilentComment,
      T.UseRule,
      Z.VariableDeclaration,
      Y.WarnRule,
      Y.SupportsAnything,
      L.SupportsDeclaration,
      F.SupportsFunction,
      X.SupportsInterpolation,
      M.SupportsNegation,
      U.SupportsOperation,
      T.Selector,
      N.AttributeOperator,
      S.Combinator,
      D.QualifiedName,
      Q.AsyncEnvironment,
      Q._EnvironmentModule0,
      O.AsyncImportCache,
      S.AsyncBuiltInCallable,
      Q.BuiltInCallable,
      L.PlainCssCallable,
      E.UserDefinedCallable,
      U.CompileResult,
      A.Configuration,
      Z.ConfiguredValue,
      O.Environment,
      O._EnvironmentModule,
      G.SourceSpanException,
      E.SassScriptException,
      B.ExecutableOptions,
      B.UsageException,
      F.EmptyExtensionStore,
      S.Extension,
      S.Extender,
      X.ExtensionStore,
      L.ExtendMode,
      R.ImportCache,
      B.AsyncImporter,
      E.ImporterResult,
      Z.InterpolationBuffer,
      B.FileSystemException,
      B.Stderr,
      F._QuietLogger,
      S.StderrLogger,
      Y.TerseLogger,
      T.TrackingLogger,
      Q.BuiltInModule,
      R.ForwardedModuleView,
      B.ShadowedModuleView,
      G.Parser,
      M.StylesheetGraph,
      M.StylesheetNode,
      M.Syntax,
      N.NoSourceMapBuffer0,
      D.SourceMapBuffer0,
      F.Value,
      D.ListSeparator,
      E._EvaluateVisitor0,
      E._ImportedCssVisitor0,
      E.EvaluateResult,
      E._ArgumentResults0,
      E._LoadedStylesheet0,
      V._CloneCssVisitor,
      R.Evaluator,
      R._EvaluateVisitor,
      R._ImportedCssVisitor,
      R._ArgumentResults,
      R._LoadedStylesheet,
      D.RecursiveStatementVisitor,
      N._SerializeVisitor0,
      N.OutputStyle,
      N.LineFeed,
      N.SerializeResult,
      L.Entry,
      T.Mapping,
      T.TargetLineEntry,
      T.TargetEntry,
      Y.SourceFile,
      D.SourceLocationMixin,
      Y.SourceSpanMixin,
      U.Highlighter,
      U._Highlight,
      U._Line,
      V.SourceLocation,
      U.Chain,
      A.Frame,
      T.LazyTrace,
      Y.Trace,
      N.UnparsedFrame,
      X.StringScanner,
      S._SpanScannerState,
      A.AsciiGlyphSet,
      K.UnicodeGlyphSet,
      S.Tuple2,
      S.Tuple3,
      Y.SupportsAnything0,
      Z.Argument0,
      B.ArgumentDeclaration0,
      X.ArgumentInvocation0,
      F.Value0,
      B.AsyncImporter0,
      S.AsyncBuiltInCallable0,
      Q.AsyncEnvironment0,
      Q._EnvironmentModule1,
      E._EvaluateVisitor1,
      E._ImportedCssVisitor1,
      E.EvaluateResult0,
      E._ArgumentResults1,
      E._LoadedStylesheet1,
      O.AsyncImportCache0,
      G.Parser1,
      V.AtRootQuery0,
      M.ParentStatement0,
      B.AstNode0,
      T.Selector0,
      N.AttributeOperator0,
      V.BinaryOperationExpression0,
      V.BinaryOperator0,
      Z.BooleanExpression0,
      Q.BuiltInCallable0,
      Q.BuiltInModule0,
      V._CloneCssVisitor0,
      K.ColorExpression0,
      U.CompileResult0,
      S.Combinator0,
      A.Configuration0,
      Z.ConfiguredValue0,
      Z.ConfiguredVariable0,
      Q.ContentRule0,
      Q.DebugRule0,
      L.SupportsDeclaration0,
      B.DynamicImport0,
      F.EmptyExtensionStore0,
      D.ErrorRule0,
      E.SassScriptException0,
      X.ExtendRule0,
      S.Extension0,
      S.Extender0,
      X.ExtensionStore0,
      L.ForwardRule0,
      R.ForwardedModuleView0,
      F.FunctionExpression0,
      F.SupportsFunction0,
      L.IfExpression0,
      V.IfRule0,
      V.IfRuleClause0,
      F.NodeImporter,
      B.ImportRule0,
      A.IncludeRule0,
      N.InterpolatedFunctionExpression0,
      X.Interpolation0,
      X.SupportsInterpolation0,
      Z.InterpolationBuffer0,
      D.ListExpression0,
      D.ListSeparator0,
      F._QuietLogger0,
      L.LoudComment0,
      A.MapExpression0,
      F.CssMediaQuery0,
      F._SingletonCssMediaQueryMergeResult0,
      F.MediaQuerySuccessfulMergeResult0,
      A.StatementSearchVisitor0,
      L.ExtendMode0,
      M.SupportsNegation0,
      N.NoSourceMapBuffer,
      B._FakeAstNode0,
      B.FileSystemException0,
      B.Stderr0,
      O.NullExpression0,
      T.NumberExpression0,
      U.SupportsOperation0,
      T.ParenthesizedExpression0,
      L.PlainCssCallable0,
      D.QualifiedName0,
      E.ImporterResult0,
      B.ReturnRule0,
      T.SelectorExpression0,
      N._SerializeVisitor,
      N.OutputStyle0,
      N.LineFeed0,
      N.SerializeResult0,
      B.ShadowedModuleView0,
      B.SilentComment0,
      D.SourceMapBuffer,
      Q.StaticImport0,
      S.StderrLogger0,
      D.StringExpression0,
      M.Syntax0,
      Y.TerseLogger0,
      X.UnaryOperationExpression0,
      X.UnaryOperator0,
      T.UseRule0,
      E.UserDefinedCallable0,
      F.CssValue0,
      F.ValueExpression0,
      F.ModifiableCssValue0,
      S.VariableExpression0,
      Z.VariableDeclaration0,
      Y.WarnRule0,
    ]);
    _inheritMany(J.Interceptor, [
      J.JSBool,
      J.JSNull,
      J.JavaScriptObject,
      J.JSArray,
      J.JSNumber,
      J.JSString,
      H.NativeTypedData,
    ]);
    _inheritMany(J.JavaScriptObject, [
      J.PlainJavaScriptObject,
      J.UnknownJavaScriptObject,
      J.JavaScriptFunction,
      B.Stdin,
      B.Stdout,
      B.ReadlineModule,
      B.ReadlineOptions,
      B.ReadlineInterface,
      V.BufferModule,
      V.BufferConstants,
      V.Buffer,
      F.ConsoleModule,
      F.Console,
      F.EventEmitter,
      D.FS,
      D.FSConstants,
      D.FSWatcher,
      D.ReadStream,
      D.ReadStreamOptions,
      D.WriteStream,
      D.WriteStreamOptions,
      D.FileOptions,
      D.StatOptions,
      D.MkdirOptions,
      D.RmdirOptions,
      D.WatchOptions,
      D.WatchFileOptions,
      D.Stats,
      E.Promise,
      E.Date,
      E.JsError,
      E.Atomics,
      Y.Modules,
      Y.Module1,
      Y.Net,
      Y.Socket,
      Y.NetAddress,
      Y.NetServer,
      X.NodeJsError,
      X.Process,
      X.CPUUsage,
      X.Release,
      D.StreamModule,
      D.Readable,
      D.Writable,
      D.Duplex,
      D.Transform,
      D.WritableOptions,
      D.ReadableOptions,
      L.Immediate,
      L.Timeout,
      N.TTY,
      M.Util,
      F.JSFunction,
      F.NodeImporterResult,
      Z.RenderContext,
      Z.RenderContextOptions,
      Z.RenderContextResult,
      Z.RenderContextResultStats,
      B._PropertyDescriptor,
      K._NodeSassColor,
      D.Exports,
      F.JSFunction0,
      F.NodeImporterResult0,
      D._NodeSassList,
      A._NodeSassMap,
      T._NodeSassNumber,
      Z.RenderContext0,
      Z.RenderContextOptions0,
      Z.RenderContextResult0,
      Z.RenderContextResultStats0,
      R.RenderOptions,
      U.RenderResult,
      U.RenderResultStats,
      R._Exports,
      D._NodeSassString,
      G.Types,
      B._PropertyDescriptor0,
    ]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Iterable, [
      H._CastIterableBase,
      H.EfficientLengthIterable,
      H.MappedIterable,
      H.WhereIterable,
      H.ExpandIterable,
      H.TakeIterable,
      H.SkipIterable,
      H.SkipWhileIterable,
      H.FollowedByIterable,
      H.WhereTypeIterable,
      H._ConstantMapKeyIterable,
      P.IterableBase,
      H._StringAllMatchesIterable,
      P.Runes,
    ]);
    _inheritMany(H._CastIterableBase, [
      H.CastIterable,
      H.__CastListBase__CastIterableBase_ListMixin,
      H.CastSet,
    ]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(H.Closure, [
      H.Closure2Args,
      H.Closure0Args,
      H.ConstantStringMap_values_closure,
      H.Instantiation,
      H.TearOffClosure,
      H.JsLinkedHashMap_values_closure,
      H.initHooks_closure,
      H.initHooks_closure1,
      P._AsyncRun__initializeScheduleImmediate_internalCallback,
      P._AsyncRun__initializeScheduleImmediate_closure,
      P._awaitOnObject_closure,
      P._Future__chainForeignFuture_closure,
      P._Future__propagateToListeners_handleWhenCompleteCallback_closure,
      P.Stream_length_closure,
      P._CustomZone_bindUnaryCallback_closure,
      P._RootZone_bindUnaryCallback_closure,
      P._HashMap_values_closure,
      P._LinkedCustomHashMap_closure,
      P.MapMixin_entries_closure,
      P.Duration_toString_sixDigits,
      P.Duration_toString_twoDigits,
      P.Uri_parseIPv6Address_error,
      P._Uri__makePath_closure,
      P._createTables_setChars,
      P._createTables_setRange,
      N.ArgParser__addOption_closure,
      G._Usage__writeOption_closure,
      G._Usage__buildAllowedList_closure,
      G.StreamQueue__ensureListening_closure,
      Q.alwaysValid_closure,
      B.ReplAdapter_runAsync__closure,
      M.MapKeySet_difference_closure,
      M.futureToPromise__closure,
      M.Context_joinAll_closure,
      M.Context_split_closure,
      M._validateArgList_closure,
      X.ParsedPath__splitExtension_closure,
      K.PathMap__create_closure0,
      K.PathMap__create_closure1,
      L.WindowsStyle_absolutePathToUri_closure,
      B.ArgumentDeclaration_verify_closure,
      B.ArgumentDeclaration_verify_closure0,
      D.ListExpression_toString_closure,
      A.MapExpression_toString_closure,
      X.Interpolation_toString_closure,
      V.EachRule_toString_closure,
      V.IfRule_toString_closure,
      V.IfRuleClause$__closure,
      V.IfRuleClause$___closure,
      M.ParentStatement_closure,
      M.ParentStatement__closure,
      S.ComplexSelector_isInvisible_closure,
      X.CompoundSelector_isInvisible_closure,
      N.IDSelector_unify_closure,
      D.SelectorList_isInvisible_closure,
      D.SelectorList_asSassList_closure,
      D.SelectorList_asSassList__closure,
      D.SelectorList_unify_closure,
      D.SelectorList_unify__closure,
      D.SelectorList_unify___closure,
      D.SelectorList_resolveParentSelectors_closure,
      D.SelectorList_resolveParentSelectors__closure,
      D.SelectorList_resolveParentSelectors__closure0,
      D.SelectorList__complexContainsParentSelector_closure,
      D.SelectorList__complexContainsParentSelector__closure,
      D.SelectorList__resolveParentSelectorsCompound_closure,
      D.SelectorList__resolveParentSelectorsCompound_closure0,
      D.SelectorList__resolveParentSelectorsCompound_closure1,
      X._compileStylesheet_closure0,
      Q.AsyncEnvironment_importForwards_closure,
      Q.AsyncEnvironment_importForwards_closure0,
      Q.AsyncEnvironment_importForwards_closure1,
      Q.AsyncEnvironment__getVariableFromGlobalModule_closure,
      Q.AsyncEnvironment_setVariable_closure0,
      Q.AsyncEnvironment__getFunctionFromGlobalModule_closure,
      Q.AsyncEnvironment__getMixinFromGlobalModule_closure,
      Q.AsyncEnvironment_toModule_closure,
      Q.AsyncEnvironment_toDummyModule_closure,
      Q.AsyncEnvironment__fromOneModule_closure,
      Q.AsyncEnvironment__fromOneModule__closure,
      Q._EnvironmentModule__EnvironmentModule_closure5,
      Q._EnvironmentModule__EnvironmentModule_closure6,
      Q._EnvironmentModule__EnvironmentModule_closure7,
      Q._EnvironmentModule__EnvironmentModule_closure8,
      Q._EnvironmentModule__EnvironmentModule_closure9,
      Q._EnvironmentModule__EnvironmentModule_closure10,
      O.AsyncImportCache_humanize_closure,
      O.AsyncImportCache_humanize_closure0,
      O.AsyncImportCache_humanize_closure1,
      S.AsyncBuiltInCallable$mixin_closure,
      Q.BuiltInCallable$mixin_closure,
      U._compileStylesheet_closure,
      A.Configuration_toString_closure,
      O.Environment_importForwards_closure,
      O.Environment_importForwards_closure0,
      O.Environment_importForwards_closure1,
      O.Environment__getVariableFromGlobalModule_closure,
      O.Environment_setVariable_closure0,
      O.Environment__getFunctionFromGlobalModule_closure,
      O.Environment__getMixinFromGlobalModule_closure,
      O.Environment_toModule_closure,
      O.Environment_toDummyModule_closure,
      O.Environment__fromOneModule_closure,
      O.Environment__fromOneModule__closure,
      O._EnvironmentModule__EnvironmentModule_closure,
      O._EnvironmentModule__EnvironmentModule_closure0,
      O._EnvironmentModule__EnvironmentModule_closure1,
      O._EnvironmentModule__EnvironmentModule_closure2,
      O._EnvironmentModule__EnvironmentModule_closure3,
      O._EnvironmentModule__EnvironmentModule_closure4,
      D._writeSourceMap_closure,
      B.ExecutableOptions_emitErrorCss_closure,
      X.ExtensionStore_extensionsWhereTarget_closure,
      X.ExtensionStore_addExtensions_closure0,
      X.ExtensionStore_addExtensions__closure,
      X.ExtensionStore_addExtensions__closure0,
      X.ExtensionStore__extendComplex_closure,
      X.ExtensionStore__extendComplex_closure0,
      X.ExtensionStore__extendComplex__closure,
      X.ExtensionStore__extendComplex__closure0,
      X.ExtensionStore__extendComplex___closure,
      X.ExtensionStore__extendCompound_closure,
      X.ExtensionStore__extendCompound_closure0,
      X.ExtensionStore__extendCompound__closure,
      X.ExtensionStore__extendCompound__closure0,
      X.ExtensionStore__extendCompound_closure1,
      X.ExtensionStore__extendCompound_closure2,
      X.ExtensionStore__extendCompound_closure3,
      X.ExtensionStore__extendSimple_withoutPseudo,
      X.ExtensionStore__extendSimple_closure,
      X.ExtensionStore__extendSimple_closure0,
      X.ExtensionStore__extendPseudo_closure,
      X.ExtensionStore__extendPseudo_closure0,
      X.ExtensionStore__extendPseudo_closure1,
      X.ExtensionStore__extendPseudo_closure2,
      X.ExtensionStore__extendPseudo_closure3,
      X.ExtensionStore__trim_closure,
      X.ExtensionStore__trim_closure0,
      Y.unifyComplex_closure,
      Y._weaveParents_closure0,
      Y._weaveParents_closure1,
      Y._weaveParents__closure1,
      Y._weaveParents_closure2,
      Y._weaveParents_closure3,
      Y._weaveParents__closure0,
      Y._weaveParents_closure4,
      Y._weaveParents_closure5,
      Y._weaveParents__closure,
      Y._mustUnify_closure,
      Y._mustUnify__closure,
      Y.paths__closure,
      Y.paths___closure,
      Y._hasRoot_closure,
      Y.listIsSuperselector_closure,
      Y.listIsSuperselector__closure,
      Y._simpleIsSuperselectorOfCompound_closure,
      Y._simpleIsSuperselectorOfCompound__closure,
      Y._selectorPseudoIsSuperselector_closure,
      Y._selectorPseudoIsSuperselector_closure0,
      Y._selectorPseudoIsSuperselector_closure1,
      Y._selectorPseudoIsSuperselector_closure2,
      Y._selectorPseudoIsSuperselector_closure3,
      Y._selectorPseudoIsSuperselector__closure,
      Y._selectorPseudoIsSuperselector___closure,
      Y._selectorPseudoIsSuperselector___closure0,
      Y._selectorPseudoIsSuperselector_closure4,
      Y._selectorPseudoIsSuperselector_closure5,
      Y._selectorPseudoArgs_closure,
      Y._selectorPseudoArgs_closure0,
      Y.globalFunctions_closure,
      K.global_closure,
      K.global_closure0,
      K.global_closure1,
      K.global_closure2,
      K.global_closure3,
      K.global_closure4,
      K.global_closure5,
      K.global_closure6,
      K.global_closure7,
      K.global_closure8,
      K.global_closure9,
      K.global_closure10,
      K.global_closure11,
      K.global_closure12,
      K.global_closure13,
      K.global_closure14,
      K.global_closure15,
      K.global_closure16,
      K.global_closure17,
      K.global_closure18,
      K.global_closure19,
      K.global_closure20,
      K.global_closure21,
      K.global_closure22,
      K.global_closure23,
      K.global_closure24,
      K.global__closure,
      K.global_closure25,
      K.module_closure,
      K.module_closure0,
      K.module_closure1,
      K.module_closure2,
      K.module_closure3,
      K.module_closure4,
      K.module_closure5,
      K.module_closure6,
      K.module__closure,
      K.module_closure7,
      K._red_closure,
      K._green_closure,
      K._blue_closure,
      K._mix_closure,
      K._hue_closure,
      K._saturation_closure,
      K._lightness_closure,
      K._complement_closure,
      K._adjust_closure,
      K._scale_closure,
      K._change_closure,
      K._ieHexStr_closure,
      K._ieHexStr_closure_hexString,
      K._updateComponents_getParam,
      K._updateComponents_closure,
      K._updateComponents_updateValue,
      K._functionString_closure,
      K._removedColorFunction_closure,
      K._rgb_closure,
      K._hsl_closure,
      K._removeUnits_closure,
      K._removeUnits_closure0,
      K._hwb_closure,
      K._parseChannels_closure,
      D._length_closure0,
      D._nth_closure,
      D._setNth_closure,
      D._join_closure,
      D._append_closure0,
      D._zip_closure,
      D._zip__closure,
      D._zip__closure0,
      D._zip__closure1,
      D._index_closure0,
      D._separator_closure,
      D._isBracketed_closure,
      D._slash_closure,
      A._get_closure,
      A._set_closure,
      A._set__closure0,
      A._set_closure0,
      A._set__closure,
      A._merge_closure,
      A._merge_closure0,
      A._merge__closure,
      A._deepMerge_closure,
      A._deepRemove_closure,
      A._deepRemove__closure,
      A._remove_closure,
      A._remove_closure0,
      A._keys_closure,
      A._values_closure,
      A._hasKey_closure,
      A._modify__modifyNestedMap,
      K._ceil_closure,
      K._clamp_closure,
      K._floor_closure,
      K._max_closure,
      K._min_closure,
      K._abs_closure,
      K._hypot_closure,
      K._hypot__closure,
      K._log_closure,
      K._pow_closure,
      K._sqrt_closure,
      K._acos_closure,
      K._asin_closure,
      K._atan_closure,
      K._atan2_closure,
      K._cos_closure,
      K._sin_closure,
      K._tan_closure,
      K._compatible_closure,
      K._isUnitless_closure,
      K._unit_closure,
      K._percentage_closure,
      K._randomFunction_closure,
      K._div_closure,
      K._numberFunction_closure,
      Q.global_closure26,
      Q.global_closure27,
      Q.global_closure28,
      Q.global_closure29,
      T._nest_closure,
      T._nest__closure,
      T._append_closure,
      T._append__closure,
      T._append___closure,
      T._extend_closure,
      T._replace_closure,
      T._unify_closure,
      T._isSuperselector_closure,
      T._simpleSelectors_closure,
      T._simpleSelectors__closure,
      T._parse_closure,
      D._unquote_closure,
      D._quote_closure,
      D._length_closure,
      D._insert_closure,
      D._index_closure,
      D._slice_closure,
      D._toUpperCase_closure,
      D._toLowerCase_closure,
      D._uniqueId_closure,
      R.ImportCache_humanize_closure,
      R.ImportCache_humanize_closure0,
      R.ImportCache_humanize_closure1,
      F.FilesystemImporter_canonicalize_closure,
      B._exactlyOne_closure,
      F._realCasePath_helper,
      F._realCasePath_helper__closure,
      B.readStdin_closure,
      B.readStdin_closure0,
      B.readStdin_closure1,
      B.readStdin_closure2,
      B.listDir__closure,
      B.listDir__closure0,
      B.listDir_closure_list,
      B.listDir__list_closure,
      Y.TerseLogger_summarize_closure,
      Y.TerseLogger_summarize_closure0,
      Q._disallowedFunctionNames_closure,
      G.Parser_scanIdentChar_matches,
      V.StylesheetParser_parse__closure0,
      V.StylesheetParser_expression_addSingleExpression,
      V.StylesheetParser_expression_addOperator,
      V.StylesheetParser__unicodeRange_closure,
      V.StylesheetParser__unicodeRange_closure0,
      V.StylesheetParser_trySpecialFunction_closure,
      M.StylesheetGraph_modifiedSince_transitiveModificationTime,
      F._PrefixedKeys_iterator_closure,
      D.SourceMapBuffer_buildSourceMap_closure,
      R._UnprefixedKeys_iterator_closure,
      R._UnprefixedKeys_iterator_closure0,
      B.indent_closure,
      B.flattenVertically_closure,
      B.flattenVertically_closure0,
      K.SassColor_SassColor$hwb_toRgb,
      D.SassList_isBlank_closure,
      T.SassNumber__coerceOrConvertValue_closure,
      T.SassNumber__coerceOrConvertValue_closure1,
      T.SassNumber_multiplyUnits_closure,
      T.SassNumber_multiplyUnits_closure1,
      T.SassNumber__areAnyConvertible_closure,
      T.SassNumber__canonicalizeUnitList_closure,
      L.SingleUnitSassNumber__coerceToUnit_closure,
      L.SingleUnitSassNumber__coerceValueToUnit_closure,
      L.SingleUnitSassNumber_multiplyUnits_closure,
      E._EvaluateVisitor_closure9,
      E._EvaluateVisitor_closure10,
      E._EvaluateVisitor_closure11,
      E._EvaluateVisitor_closure12,
      E._EvaluateVisitor_closure13,
      E._EvaluateVisitor_closure14,
      E._EvaluateVisitor_closure15,
      E._EvaluateVisitor_closure16,
      E._EvaluateVisitor_closure17,
      E._EvaluateVisitor_closure18,
      E._EvaluateVisitor__closure3,
      E._EvaluateVisitor__loadModule__closure0,
      E._EvaluateVisitor__combineCss_closure2,
      E._EvaluateVisitor__combineCss_closure3,
      E._EvaluateVisitor__combineCss_closure4,
      E._EvaluateVisitor__extendModules_closure1,
      E._EvaluateVisitor__topologicalModules_visitModule0,
      E._EvaluateVisitor__scopeForAtRoot_closure5,
      E._EvaluateVisitor__scopeForAtRoot_closure6,
      E._EvaluateVisitor__scopeForAtRoot_closure7,
      E._EvaluateVisitor__scopeForAtRoot_closure8,
      E._EvaluateVisitor__scopeForAtRoot_closure9,
      E._EvaluateVisitor__scopeForAtRoot_closure10,
      E._EvaluateVisitor_visitDeclaration_closure1,
      E._EvaluateVisitor_visitEachRule_closure2,
      E._EvaluateVisitor_visitEachRule_closure3,
      E._EvaluateVisitor_visitEachRule__closure0,
      E._EvaluateVisitor_visitEachRule___closure0,
      E._EvaluateVisitor_visitAtRule_closure2,
      E._EvaluateVisitor_visitAtRule_closure4,
      E._EvaluateVisitor_visitForRule__closure0,
      E._EvaluateVisitor_visitForwardRule_closure1,
      E._EvaluateVisitor_visitForwardRule_closure2,
      E._EvaluateVisitor_visitIfRule__closure0,
      E._EvaluateVisitor__visitDynamicImport__closure1,
      E._EvaluateVisitor__visitStaticImport_closure0,
      E._EvaluateVisitor_visitIncludeRule_closure6,
      E._EvaluateVisitor_visitMediaRule_closure2,
      E._EvaluateVisitor_visitMediaRule_closure4,
      E._EvaluateVisitor_visitStyleRule_closure8,
      E._EvaluateVisitor_visitStyleRule_closure12,
      E._EvaluateVisitor_visitSupportsRule_closure2,
      E._EvaluateVisitor_visitUseRule_closure0,
      E._EvaluateVisitor_visitWhileRule__closure0,
      E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation0,
      E._EvaluateVisitor_visitListExpression_closure0,
      E._EvaluateVisitor__runUserDefinedCallable____closure0,
      E._EvaluateVisitor__runBuiltInCallable_closure4,
      E._EvaluateVisitor__evaluateArguments_closure3,
      E._EvaluateVisitor__evaluateArguments_closure4,
      E._EvaluateVisitor__evaluateArguments_closure6,
      E._EvaluateVisitor__evaluateMacroArguments_closure3,
      E._EvaluateVisitor__evaluateMacroArguments_closure4,
      E._EvaluateVisitor__evaluateMacroArguments_closure6,
      E._EvaluateVisitor_visitStringExpression_closure0,
      E._EvaluateVisitor_visitCssAtRule_closure2,
      E._EvaluateVisitor_visitCssKeyframeBlock_closure2,
      E._EvaluateVisitor_visitCssMediaRule_closure2,
      E._EvaluateVisitor_visitCssMediaRule_closure4,
      E._EvaluateVisitor_visitCssStyleRule_closure2,
      E._EvaluateVisitor_visitCssSupportsRule_closure2,
      E._EvaluateVisitor__performInterpolation_closure0,
      E._EvaluateVisitor__withoutSlash_recommendation0,
      E._EvaluateVisitor__stackFrame_closure0,
      E._EvaluateVisitor__stackTrace_closure0,
      E._ImportedCssVisitor_visitCssAtRule_closure0,
      E._ImportedCssVisitor_visitCssMediaRule_closure0,
      E._ImportedCssVisitor_visitCssStyleRule_closure0,
      E._ImportedCssVisitor_visitCssSupportsRule_closure0,
      R._EvaluateVisitor_closure,
      R._EvaluateVisitor_closure0,
      R._EvaluateVisitor_closure1,
      R._EvaluateVisitor_closure2,
      R._EvaluateVisitor_closure3,
      R._EvaluateVisitor_closure4,
      R._EvaluateVisitor_closure5,
      R._EvaluateVisitor_closure6,
      R._EvaluateVisitor_closure7,
      R._EvaluateVisitor_closure8,
      R._EvaluateVisitor__closure0,
      R._EvaluateVisitor__loadModule__closure,
      R._EvaluateVisitor__combineCss_closure,
      R._EvaluateVisitor__combineCss_closure0,
      R._EvaluateVisitor__combineCss_closure1,
      R._EvaluateVisitor__extendModules_closure,
      R._EvaluateVisitor__topologicalModules_visitModule,
      R._EvaluateVisitor__scopeForAtRoot_closure,
      R._EvaluateVisitor__scopeForAtRoot_closure0,
      R._EvaluateVisitor__scopeForAtRoot_closure1,
      R._EvaluateVisitor__scopeForAtRoot_closure2,
      R._EvaluateVisitor__scopeForAtRoot_closure3,
      R._EvaluateVisitor__scopeForAtRoot_closure4,
      R._EvaluateVisitor_visitDeclaration_closure,
      R._EvaluateVisitor_visitEachRule_closure,
      R._EvaluateVisitor_visitEachRule_closure0,
      R._EvaluateVisitor_visitEachRule__closure,
      R._EvaluateVisitor_visitEachRule___closure,
      R._EvaluateVisitor_visitAtRule_closure,
      R._EvaluateVisitor_visitAtRule_closure1,
      R._EvaluateVisitor_visitForRule__closure,
      R._EvaluateVisitor_visitForwardRule_closure,
      R._EvaluateVisitor_visitForwardRule_closure0,
      R._EvaluateVisitor_visitIfRule__closure,
      R._EvaluateVisitor__visitDynamicImport__closure,
      R._EvaluateVisitor__visitStaticImport_closure,
      R._EvaluateVisitor_visitIncludeRule_closure2,
      R._EvaluateVisitor_visitMediaRule_closure,
      R._EvaluateVisitor_visitMediaRule_closure1,
      R._EvaluateVisitor_visitStyleRule_closure1,
      R._EvaluateVisitor_visitStyleRule_closure5,
      R._EvaluateVisitor_visitSupportsRule_closure0,
      R._EvaluateVisitor_visitUseRule_closure,
      R._EvaluateVisitor_visitWhileRule__closure,
      R._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation,
      R._EvaluateVisitor_visitListExpression_closure,
      R._EvaluateVisitor__runUserDefinedCallable____closure,
      R._EvaluateVisitor__runBuiltInCallable_closure1,
      R._EvaluateVisitor__evaluateArguments_closure,
      R._EvaluateVisitor__evaluateArguments_closure0,
      R._EvaluateVisitor__evaluateArguments_closure2,
      R._EvaluateVisitor__evaluateMacroArguments_closure,
      R._EvaluateVisitor__evaluateMacroArguments_closure0,
      R._EvaluateVisitor__evaluateMacroArguments_closure2,
      R._EvaluateVisitor_visitStringExpression_closure,
      R._EvaluateVisitor_visitCssAtRule_closure0,
      R._EvaluateVisitor_visitCssKeyframeBlock_closure0,
      R._EvaluateVisitor_visitCssMediaRule_closure,
      R._EvaluateVisitor_visitCssMediaRule_closure1,
      R._EvaluateVisitor_visitCssStyleRule_closure0,
      R._EvaluateVisitor_visitCssSupportsRule_closure0,
      R._EvaluateVisitor__performInterpolation_closure,
      R._EvaluateVisitor__withoutSlash_recommendation,
      R._EvaluateVisitor__stackFrame_closure,
      R._EvaluateVisitor__stackTrace_closure,
      R._ImportedCssVisitor_visitCssAtRule_closure,
      R._ImportedCssVisitor_visitCssMediaRule_closure,
      R._ImportedCssVisitor_visitCssStyleRule_closure,
      R._ImportedCssVisitor_visitCssSupportsRule_closure,
      N.serialize_closure,
      N._SerializeVisitor_visitList_closure,
      N._SerializeVisitor_visitList_closure0,
      N._SerializeVisitor_visitList_closure1,
      N._SerializeVisitor_visitMap_closure,
      N._SerializeVisitor_visitSelectorList_closure,
      A.StatementSearchVisitor_visitIfRule_closure,
      A.StatementSearchVisitor_visitIfRule__closure0,
      A.StatementSearchVisitor_visitIfRule_closure0,
      A.StatementSearchVisitor_visitIfRule__closure,
      A.StatementSearchVisitor_visitChildren_closure,
      T.SingleMapping_SingleMapping$fromEntries_closure1,
      T.SingleMapping_toJson_closure,
      U.Highlighter$__closure,
      U.Highlighter$___closure,
      U.Highlighter$__closure0,
      U.Highlighter__collateLines_closure,
      U.Highlighter__collateLines_closure1,
      U.Highlighter__collateLines__closure,
      U.Highlighter_highlight_closure,
      U.Chain_Chain$parse_closure,
      U.Chain_Chain$parse_closure0,
      U.Chain_Chain$parse_closure1,
      U.Chain_toTrace_closure,
      U.Chain_toString_closure0,
      U.Chain_toString__closure0,
      U.Chain_toString_closure,
      U.Chain_toString__closure,
      Y.Trace__parseVM_closure,
      Y.Trace__parseVM_closure0,
      Y.Trace$parseV8_closure,
      Y.Trace$parseV8_closure0,
      Y.Trace$parseJSCore_closure,
      Y.Trace$parseJSCore_closure0,
      Y.Trace$parseFirefox_closure,
      Y.Trace$parseFirefox_closure0,
      Y.Trace$parseFriendly_closure,
      Y.Trace$parseFriendly_closure0,
      Y.Trace_terse_closure,
      Y.Trace_foldFrames_closure,
      Y.Trace_foldFrames_closure0,
      Y.Trace_toString_closure0,
      Y.Trace_toString_closure,
      B.ArgumentDeclaration_verify_closure1,
      B.ArgumentDeclaration_verify_closure2,
      S.AsyncBuiltInCallable$mixin_closure0,
      X._compileStylesheet_closure1,
      Q.AsyncEnvironment_importForwards_closure2,
      Q.AsyncEnvironment_importForwards_closure3,
      Q.AsyncEnvironment_importForwards_closure4,
      Q.AsyncEnvironment__getVariableFromGlobalModule_closure0,
      Q.AsyncEnvironment_setVariable_closure3,
      Q.AsyncEnvironment__getFunctionFromGlobalModule_closure0,
      Q.AsyncEnvironment__getMixinFromGlobalModule_closure0,
      Q.AsyncEnvironment_toModule_closure0,
      Q.AsyncEnvironment_toDummyModule_closure0,
      Q.AsyncEnvironment__fromOneModule_closure0,
      Q.AsyncEnvironment__fromOneModule__closure0,
      Q._EnvironmentModule__EnvironmentModule_closure11,
      Q._EnvironmentModule__EnvironmentModule_closure12,
      Q._EnvironmentModule__EnvironmentModule_closure13,
      Q._EnvironmentModule__EnvironmentModule_closure14,
      Q._EnvironmentModule__EnvironmentModule_closure15,
      Q._EnvironmentModule__EnvironmentModule_closure16,
      E._EvaluateVisitor_closure19,
      E._EvaluateVisitor_closure20,
      E._EvaluateVisitor_closure21,
      E._EvaluateVisitor_closure22,
      E._EvaluateVisitor_closure23,
      E._EvaluateVisitor_closure24,
      E._EvaluateVisitor_closure25,
      E._EvaluateVisitor_closure26,
      E._EvaluateVisitor_closure27,
      E._EvaluateVisitor_closure28,
      E._EvaluateVisitor__closure6,
      E._EvaluateVisitor__loadModule__closure1,
      E._EvaluateVisitor__combineCss_closure5,
      E._EvaluateVisitor__combineCss_closure6,
      E._EvaluateVisitor__combineCss_closure7,
      E._EvaluateVisitor__extendModules_closure3,
      E._EvaluateVisitor__topologicalModules_visitModule1,
      E._EvaluateVisitor__scopeForAtRoot_closure11,
      E._EvaluateVisitor__scopeForAtRoot_closure12,
      E._EvaluateVisitor__scopeForAtRoot_closure13,
      E._EvaluateVisitor__scopeForAtRoot_closure14,
      E._EvaluateVisitor__scopeForAtRoot_closure15,
      E._EvaluateVisitor__scopeForAtRoot_closure16,
      E._EvaluateVisitor_visitDeclaration_closure3,
      E._EvaluateVisitor_visitEachRule_closure5,
      E._EvaluateVisitor_visitEachRule_closure6,
      E._EvaluateVisitor_visitEachRule__closure1,
      E._EvaluateVisitor_visitEachRule___closure1,
      E._EvaluateVisitor_visitAtRule_closure5,
      E._EvaluateVisitor_visitAtRule_closure7,
      E._EvaluateVisitor_visitForRule__closure1,
      E._EvaluateVisitor_visitForwardRule_closure3,
      E._EvaluateVisitor_visitForwardRule_closure4,
      E._EvaluateVisitor_visitIfRule__closure1,
      E._EvaluateVisitor__visitDynamicImport__closure3,
      E._EvaluateVisitor__visitStaticImport_closure1,
      E._EvaluateVisitor_visitIncludeRule_closure10,
      E._EvaluateVisitor_visitMediaRule_closure5,
      E._EvaluateVisitor_visitMediaRule_closure7,
      E._EvaluateVisitor_visitStyleRule_closure15,
      E._EvaluateVisitor_visitStyleRule_closure19,
      E._EvaluateVisitor_visitSupportsRule_closure4,
      E._EvaluateVisitor_visitUseRule_closure1,
      E._EvaluateVisitor_visitWhileRule__closure1,
      E._EvaluateVisitor_visitBinaryOperationExpression_closure_recommendation1,
      E._EvaluateVisitor_visitListExpression_closure1,
      E._EvaluateVisitor__runUserDefinedCallable____closure1,
      E._EvaluateVisitor__runBuiltInCallable_closure7,
      E._EvaluateVisitor__evaluateArguments_closure7,
      E._EvaluateVisitor__evaluateArguments_closure8,
      E._EvaluateVisitor__evaluateArguments_closure10,
      E._EvaluateVisitor__evaluateMacroArguments_closure7,
      E._EvaluateVisitor__evaluateMacroArguments_closure8,
      E._EvaluateVisitor__evaluateMacroArguments_closure10,
      E._EvaluateVisitor_visitStringExpression_closure1,
      E._EvaluateVisitor_visitCssAtRule_closure4,
      E._EvaluateVisitor_visitCssKeyframeBlock_closure4,
      E._EvaluateVisitor_visitCssMediaRule_closure5,
      E._EvaluateVisitor_visitCssMediaRule_closure7,
      E._EvaluateVisitor_visitCssStyleRule_closure4,
      E._EvaluateVisitor_visitCssSupportsRule_closure4,
      E._EvaluateVisitor__performInterpolation_closure1,
      E._EvaluateVisitor__withoutSlash_recommendation1,
      E._EvaluateVisitor__stackFrame_closure1,
      E._EvaluateVisitor__stackTrace_closure1,
      E._ImportedCssVisitor_visitCssAtRule_closure1,
      E._ImportedCssVisitor_visitCssMediaRule_closure1,
      E._ImportedCssVisitor_visitCssStyleRule_closure1,
      E._ImportedCssVisitor_visitCssSupportsRule_closure1,
      O.AsyncImportCache_humanize_closure2,
      O.AsyncImportCache_humanize_closure3,
      O.AsyncImportCache_humanize_closure4,
      Z.booleanConstructor__closure,
      Z.booleanConstructor__closure0,
      K.global_closure30,
      K.global_closure31,
      K.global_closure32,
      K.global_closure33,
      K.global_closure34,
      K.global_closure35,
      K.global_closure36,
      K.global_closure37,
      K.global_closure38,
      K.global_closure39,
      K.global_closure40,
      K.global_closure41,
      K.global_closure42,
      K.global_closure43,
      K.global_closure44,
      K.global_closure45,
      K.global_closure46,
      K.global_closure47,
      K.global_closure48,
      K.global_closure49,
      K.global_closure50,
      K.global_closure51,
      K.global_closure52,
      K.global_closure53,
      K.global_closure54,
      K.global_closure55,
      K.global__closure0,
      K.global_closure56,
      K.module_closure8,
      K.module_closure9,
      K.module_closure10,
      K.module_closure11,
      K.module_closure12,
      K.module_closure13,
      K.module_closure14,
      K.module_closure15,
      K.module__closure0,
      K.module_closure16,
      K._red_closure0,
      K._green_closure0,
      K._blue_closure0,
      K._mix_closure0,
      K._hue_closure0,
      K._saturation_closure0,
      K._lightness_closure0,
      K._complement_closure0,
      K._adjust_closure0,
      K._scale_closure0,
      K._change_closure0,
      K._ieHexStr_closure0,
      K._ieHexStr_closure_hexString0,
      K._updateComponents_getParam0,
      K._updateComponents_closure0,
      K._updateComponents_updateValue0,
      K._functionString_closure0,
      K._removedColorFunction_closure0,
      K._rgb_closure0,
      K._hsl_closure0,
      K._removeUnits_closure1,
      K._removeUnits_closure2,
      K._hwb_closure0,
      K._parseChannels_closure0,
      K.colorConstructor_closure,
      K.colorConstructor_closure0,
      K.colorConstructor_closure1,
      K.colorConstructor_closure2,
      K.colorConstructor_closure3,
      K.colorConstructor_closure8,
      K.SassColor_SassColor$hwb_toRgb0,
      S.ComplexSelector_isInvisible_closure0,
      X.CompoundSelector_isInvisible_closure0,
      A.Configuration_toString_closure0,
      Q._disallowedFunctionNames_closure0,
      V.EachRule_toString_closure0,
      X.ExtensionStore_extensionsWhereTarget_closure0,
      X.ExtensionStore_addExtensions_closure2,
      X.ExtensionStore_addExtensions__closure2,
      X.ExtensionStore_addExtensions__closure3,
      X.ExtensionStore__extendComplex_closure1,
      X.ExtensionStore__extendComplex_closure2,
      X.ExtensionStore__extendComplex__closure1,
      X.ExtensionStore__extendComplex__closure2,
      X.ExtensionStore__extendComplex___closure0,
      X.ExtensionStore__extendCompound_closure4,
      X.ExtensionStore__extendCompound_closure5,
      X.ExtensionStore__extendCompound__closure1,
      X.ExtensionStore__extendCompound__closure2,
      X.ExtensionStore__extendCompound_closure6,
      X.ExtensionStore__extendCompound_closure7,
      X.ExtensionStore__extendCompound_closure8,
      X.ExtensionStore__extendSimple_withoutPseudo0,
      X.ExtensionStore__extendSimple_closure1,
      X.ExtensionStore__extendSimple_closure2,
      X.ExtensionStore__extendPseudo_closure4,
      X.ExtensionStore__extendPseudo_closure5,
      X.ExtensionStore__extendPseudo_closure6,
      X.ExtensionStore__extendPseudo_closure7,
      X.ExtensionStore__extendPseudo_closure8,
      X.ExtensionStore__trim_closure1,
      X.ExtensionStore__trim_closure2,
      F.FilesystemImporter_canonicalize_closure0,
      Y.unifyComplex_closure0,
      Y._weaveParents_closure7,
      Y._weaveParents_closure8,
      Y._weaveParents__closure4,
      Y._weaveParents_closure9,
      Y._weaveParents_closure10,
      Y._weaveParents__closure3,
      Y._weaveParents_closure11,
      Y._weaveParents_closure12,
      Y._weaveParents__closure2,
      Y._mustUnify_closure0,
      Y._mustUnify__closure0,
      Y.paths__closure0,
      Y.paths___closure0,
      Y._hasRoot_closure0,
      Y.listIsSuperselector_closure0,
      Y.listIsSuperselector__closure0,
      Y._simpleIsSuperselectorOfCompound_closure0,
      Y._simpleIsSuperselectorOfCompound__closure0,
      Y._selectorPseudoIsSuperselector_closure6,
      Y._selectorPseudoIsSuperselector_closure7,
      Y._selectorPseudoIsSuperselector_closure8,
      Y._selectorPseudoIsSuperselector_closure9,
      Y._selectorPseudoIsSuperselector_closure10,
      Y._selectorPseudoIsSuperselector__closure0,
      Y._selectorPseudoIsSuperselector___closure1,
      Y._selectorPseudoIsSuperselector___closure2,
      Y._selectorPseudoIsSuperselector_closure11,
      Y._selectorPseudoIsSuperselector_closure12,
      Y._selectorPseudoArgs_closure1,
      Y._selectorPseudoArgs_closure2,
      Y.globalFunctions_closure0,
      N.IDSelector_unify_closure0,
      V.IfRule_toString_closure0,
      V.IfRuleClause$__closure0,
      V.IfRuleClause$___closure0,
      X.Interpolation_toString_closure0,
      F._realCasePath_helper0,
      F._realCasePath_helper__closure0,
      D.ListExpression_toString_closure0,
      D._length_closure2,
      D._nth_closure0,
      D._setNth_closure0,
      D._join_closure0,
      D._append_closure2,
      D._zip_closure0,
      D._zip__closure2,
      D._zip__closure3,
      D._zip__closure4,
      D._index_closure2,
      D._separator_closure0,
      D._isBracketed_closure0,
      D._slash_closure0,
      D.SelectorList_isInvisible_closure0,
      D.SelectorList_asSassList_closure0,
      D.SelectorList_asSassList__closure0,
      D.SelectorList_unify_closure0,
      D.SelectorList_unify__closure0,
      D.SelectorList_unify___closure0,
      D.SelectorList_resolveParentSelectors_closure0,
      D.SelectorList_resolveParentSelectors__closure1,
      D.SelectorList_resolveParentSelectors__closure2,
      D.SelectorList__complexContainsParentSelector_closure0,
      D.SelectorList__complexContainsParentSelector__closure0,
      D.SelectorList__resolveParentSelectorsCompound_closure2,
      D.SelectorList__resolveParentSelectorsCompound_closure3,
      D.SelectorList__resolveParentSelectorsCompound_closure4,
      D.listConstructor_closure,
      D.listConstructor__closure,
      D.listConstructor_closure1,
      D.listConstructor_closure2,
      D.listConstructor_closure4,
      D.listConstructor_closure5,
      D.SassList_isBlank_closure0,
      A.MapExpression_toString_closure0,
      A._get_closure0,
      A._set_closure1,
      A._set__closure2,
      A._set_closure2,
      A._set__closure1,
      A._merge_closure1,
      A._merge_closure2,
      A._merge__closure0,
      A._deepMerge_closure0,
      A._deepRemove_closure0,
      A._deepRemove__closure0,
      A._remove_closure1,
      A._remove_closure2,
      A._keys_closure0,
      A._values_closure0,
      A._hasKey_closure0,
      A._modify__modifyNestedMap0,
      A.mapConstructor_closure,
      A.mapConstructor__closure,
      A.mapConstructor__closure0,
      A.mapConstructor_closure2,
      A.mapConstructor_closure3,
      A.mapConstructor_closure4,
      A.mapConstructor_closure5,
      K._ceil_closure0,
      K._clamp_closure0,
      K._floor_closure0,
      K._max_closure0,
      K._min_closure0,
      K._abs_closure0,
      K._hypot_closure0,
      K._hypot__closure0,
      K._log_closure0,
      K._pow_closure0,
      K._sqrt_closure0,
      K._acos_closure0,
      K._asin_closure0,
      K._atan_closure0,
      K._atan2_closure0,
      K._cos_closure0,
      K._sin_closure0,
      K._tan_closure0,
      K._compatible_closure0,
      K._isUnitless_closure0,
      K._unit_closure0,
      K._percentage_closure0,
      K._randomFunction_closure0,
      K._div_closure0,
      K._numberFunction_closure0,
      Q.global_closure57,
      Q.global_closure58,
      Q.global_closure59,
      Q.global_closure60,
      B.listDir__closure1,
      B.listDir__closure2,
      B.listDir_closure_list0,
      B.listDir__list_closure0,
      B._render_closure,
      B._parseFunctions__closure,
      B._parseFunctions__closure0,
      B._parseFunctions___closure,
      O.nullConstructor__closure,
      T.numberConstructor_closure,
      T.numberConstructor_closure0,
      T.numberConstructor_closure2,
      T.numberConstructor_closure4,
      T._parseNumber_closure,
      T._parseNumber_closure0,
      T.SassNumber__coerceOrConvertValue_closure3,
      T.SassNumber__coerceOrConvertValue_closure5,
      T.SassNumber_multiplyUnits_closure3,
      T.SassNumber_multiplyUnits_closure5,
      T.SassNumber__areAnyConvertible_closure0,
      T.SassNumber__canonicalizeUnitList_closure0,
      M.ParentStatement_closure0,
      M.ParentStatement__closure0,
      G.Parser_scanIdentChar_matches0,
      F._PrefixedKeys_iterator_closure0,
      R._wrapMain_closure,
      R._wrapMain_closure0,
      T._nest_closure0,
      T._nest__closure1,
      T._append_closure1,
      T._append__closure1,
      T._append___closure0,
      T._extend_closure0,
      T._replace_closure0,
      T._unify_closure0,
      T._isSuperselector_closure0,
      T._simpleSelectors_closure0,
      T._simpleSelectors__closure0,
      T._parse_closure0,
      N.serialize_closure0,
      N._SerializeVisitor_visitList_closure2,
      N._SerializeVisitor_visitList_closure3,
      N._SerializeVisitor_visitList_closure4,
      N._SerializeVisitor_visitMap_closure0,
      N._SerializeVisitor_visitSelectorList_closure0,
      L.SingleUnitSassNumber__coerceToUnit_closure0,
      L.SingleUnitSassNumber__coerceValueToUnit_closure0,
      L.SingleUnitSassNumber_multiplyUnits_closure1,
      D.SourceMapBuffer_buildSourceMap_closure0,
      A.StatementSearchVisitor_visitIfRule_closure1,
      A.StatementSearchVisitor_visitIfRule__closure2,
      A.StatementSearchVisitor_visitIfRule_closure2,
      A.StatementSearchVisitor_visitIfRule__closure1,
      A.StatementSearchVisitor_visitChildren_closure0,
      D._unquote_closure0,
      D._quote_closure0,
      D._length_closure1,
      D._insert_closure0,
      D._index_closure1,
      D._slice_closure0,
      D._toUpperCase_closure0,
      D._toLowerCase_closure0,
      D._uniqueId_closure0,
      D.stringConstructor_closure,
      D.stringConstructor_closure0,
      D.stringConstructor_closure2,
      V.StylesheetParser_parse__closure2,
      V.StylesheetParser_expression_addSingleExpression0,
      V.StylesheetParser_expression_addOperator0,
      V.StylesheetParser__unicodeRange_closure1,
      V.StylesheetParser__unicodeRange_closure2,
      V.StylesheetParser_trySpecialFunction_closure0,
      Y.TerseLogger_summarize_closure1,
      Y.TerseLogger_summarize_closure2,
      R._UnprefixedKeys_iterator_closure1,
      R._UnprefixedKeys_iterator_closure2,
      B._exactlyOne_closure0,
      B.forwardToString_closure,
      B.indent_closure0,
      B.flattenVertically_closure1,
      B.flattenVertically_closure2,
    ]);
    _inheritMany(H.Closure2Args, [
      H._CastListBase_sort_closure,
      H.Primitives_functionNoSuchMethod_closure,
      H.JsLinkedHashMap_addAll_closure,
      H.initHooks_closure0,
      P._awaitOnObject_closure0,
      P._wrapJsFunctionForAsync_closure,
      P._Future__chainForeignFuture_closure0,
      P._HashMap_addAll_closure,
      P.HashMap_HashMap$from_closure,
      P.LinkedHashMap_LinkedHashMap$from_closure,
      P.MapBase_mapToString_closure,
      P._JsonStringifier_writeMap_closure,
      P.NoSuchMethodError_toString_closure,
      P.Uri__parseIPv4Address_error,
      P.Uri_parseIPv6Address_parseHex,
      P._createTables_build,
      G.Parser_parse_closure,
      G.StreamQueue__ensureListening_closure1,
      M.futureToPromise_closure,
      K.PathMap__create_closure,
      X.ExtensionStore_addExtensions_closure,
      X.ExtensionStore_addExtensions__closure1,
      X.ExtensionStore_clone_closure,
      Y._weaveParents_closure,
      Y.paths_closure,
      K._updateComponents_updateRgb,
      A._deepMergeImpl_closure,
      T._nest__closure0,
      T._append__closure0,
      V.StylesheetParser__declarationOrBuffer_closure,
      V.StylesheetParser__declarationOrBuffer_closure0,
      V.StylesheetParser__styleRule_closure,
      V.StylesheetParser__propertyOrVariableDeclaration_closure,
      V.StylesheetParser__propertyOrVariableDeclaration_closure0,
      V.StylesheetParser__atRootRule_closure,
      V.StylesheetParser__atRootRule_closure0,
      V.StylesheetParser__eachRule_closure,
      V.StylesheetParser__functionRule_closure,
      V.StylesheetParser__forRule_closure0,
      V.StylesheetParser__includeRule_closure,
      V.StylesheetParser_mediaRule_closure,
      V.StylesheetParser__mixinRule_closure,
      V.StylesheetParser_mozDocumentRule_closure,
      V.StylesheetParser_supportsRule_closure,
      V.StylesheetParser__whileRule_closure,
      V.StylesheetParser_unknownAtRule_closure,
      M.StylesheetGraph__recanonicalizeImportsForNode_closure,
      B.longestCommonSubsequence_closure,
      B.longestCommonSubsequence_backtrack,
      B.mapAddAll2_closure,
      A.SassMap_asList_closure,
      T.SassNumber_plus_closure,
      T.SassNumber_minus_closure,
      T.SassNumber__canonicalMultiplier_closure,
      E._EvaluateVisitor__closure2,
      E._EvaluateVisitor__withWarnCallback_closure0,
      E._EvaluateVisitor__evaluateArguments_closure5,
      E._EvaluateVisitor__evaluateMacroArguments_closure5,
      E._EvaluateVisitor__addRestMap_closure0,
      R._EvaluateVisitor__closure,
      R._EvaluateVisitor__withWarnCallback_closure,
      R._EvaluateVisitor__evaluateArguments_closure1,
      R._EvaluateVisitor__evaluateMacroArguments_closure1,
      R._EvaluateVisitor__addRestMap_closure,
      T.SingleMapping_toJson_closure0,
      U.Highlighter__collateLines_closure0,
      A.Frame_Frame$parseV8_closure_parseLocation,
      E._EvaluateVisitor__closure5,
      E._EvaluateVisitor__withWarnCallback_closure1,
      E._EvaluateVisitor__evaluateArguments_closure9,
      E._EvaluateVisitor__evaluateMacroArguments_closure9,
      E._EvaluateVisitor__addRestMap_closure1,
      K._updateComponents_updateRgb0,
      K.colorConstructor_closure4,
      K.colorConstructor_closure5,
      K.colorConstructor_closure6,
      K.colorConstructor_closure7,
      X.ExtensionStore_addExtensions_closure1,
      X.ExtensionStore_addExtensions__closure4,
      X.ExtensionStore_clone_closure0,
      Y._weaveParents_closure6,
      Y.paths_closure0,
      D.listConstructor_closure0,
      D.listConstructor_closure3,
      A._deepMergeImpl_closure0,
      A.mapConstructor_closure0,
      A.mapConstructor_closure1,
      A.SassMap_asList_closure0,
      B._render_closure0,
      B._parseFunctions_closure,
      T.numberConstructor_closure1,
      T.numberConstructor_closure3,
      T.SassNumber_plus_closure0,
      T.SassNumber_minus_closure0,
      T.SassNumber__canonicalMultiplier_closure0,
      U.main_printError,
      T._nest__closure2,
      T._append__closure2,
      D.stringConstructor_closure1,
      V.StylesheetParser__declarationOrBuffer_closure1,
      V.StylesheetParser__declarationOrBuffer_closure2,
      V.StylesheetParser__styleRule_closure0,
      V.StylesheetParser__propertyOrVariableDeclaration_closure1,
      V.StylesheetParser__propertyOrVariableDeclaration_closure2,
      V.StylesheetParser__atRootRule_closure1,
      V.StylesheetParser__atRootRule_closure2,
      V.StylesheetParser__eachRule_closure0,
      V.StylesheetParser__functionRule_closure0,
      V.StylesheetParser__forRule_closure2,
      V.StylesheetParser__includeRule_closure0,
      V.StylesheetParser_mediaRule_closure0,
      V.StylesheetParser__mixinRule_closure0,
      V.StylesheetParser_mozDocumentRule_closure0,
      V.StylesheetParser_supportsRule_closure0,
      V.StylesheetParser__whileRule_closure0,
      V.StylesheetParser_unknownAtRule_closure0,
      B.createClass_closure,
      B.longestCommonSubsequence_closure0,
      B.longestCommonSubsequence_backtrack0,
      B.mapAddAll2_closure0,
    ]);
    _inherit(H.CastList, H._CastListBase);
    _inheritMany(P.Error, [
      H.LateError,
      P.TypeError,
      H.JsNoSuchMethodError,
      H.UnknownJsTypeError,
      H.RuntimeError,
      H._Error,
      P.JsonUnsupportedObjectError,
      P.AssertionError,
      P.NullThrownError,
      P.ArgumentError,
      P.NoSuchMethodError,
      P.UnsupportedError,
      P.UnimplementedError,
      P.StateError,
      P.ConcurrentModificationError,
      P.CyclicInitializationError,
    ]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inheritMany(H.UnmodifiableListBase, [H.CodeUnits, P.UnmodifiableListView]);
    _inheritMany(H.Closure0Args, [
      H.nullFuture_closure,
      P._AsyncRun__scheduleImmediateJsOverride_internalCallback,
      P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback,
      P._TimerImpl_internalCallback,
      P._TimerImpl$periodic_closure,
      P._Future__addListener_closure,
      P._Future__prependListeners_closure,
      P._Future__chainForeignFuture_closure1,
      P._Future__asyncCompleteWithValue_closure,
      P._Future__chainFuture_closure,
      P._Future__asyncCompleteError_closure,
      P._Future__propagateToListeners_handleWhenCompleteCallback,
      P._Future__propagateToListeners_handleValueCallback,
      P._Future__propagateToListeners_handleError,
      P.Stream_length_closure0,
      P._StreamController__subscribe_closure,
      P._StreamController__recordCancel_complete,
      P._BufferingStreamSubscription__sendError_sendError,
      P._BufferingStreamSubscription__sendDone_sendDone,
      P._PendingEvents_schedule_closure,
      P._CustomZone_bindCallback_closure,
      P._CustomZone_bindCallbackGuarded_closure,
      P._rootHandleError_closure,
      P._RootZone_bindCallback_closure,
      P._RootZone_bindCallbackGuarded_closure,
      P.Utf8Decoder__decoder_closure,
      P.Utf8Decoder__decoderNonfatal_closure,
      G.Parser__setOption_closure,
      G.StreamQueue__ensureListening_closure0,
      B.ReplAdapter_runAsync_closure,
      X.ParsedPath__splitExtension_closure0,
      Q.AsyncEnvironment_setVariable_closure,
      Q.AsyncEnvironment_setVariable_closure1,
      O.AsyncImportCache_canonicalize_closure,
      O.AsyncImportCache__canonicalize_closure,
      O.AsyncImportCache_importCanonical_closure,
      O.Environment_setVariable_closure,
      O.Environment_setVariable_closure1,
      B.ExecutableOptions__parser_closure,
      B.ExecutableOptions_interactive_closure,
      X.ExtensionStore__registerSelector_closure,
      X.ExtensionStore_addExtension_closure,
      X.ExtensionStore_addExtension_closure0,
      X.ExtensionStore_addExtension_closure1,
      X.ExtensionStore__extendExistingExtensions_closure,
      X.ExtensionStore__extendExistingExtensions_closure0,
      X.ExtensionStore_addExtensions___closure,
      A._deepMergeImpl__ensureMutable,
      R.ImportCache_canonicalize_closure,
      R.ImportCache__canonicalize_closure,
      R.ImportCache_importCanonical_closure,
      B.resolveImportPath_closure,
      B.resolveImportPath_closure0,
      B._tryPathAsDirectory_closure,
      F._realCasePath_helper_closure,
      B._readFile_closure,
      B.writeFile_closure,
      B.deleteFile_closure,
      B.fileExists_closure,
      B.dirExists_closure,
      B.ensureDir_closure,
      B.listDir_closure,
      B.modificationTime_closure,
      V.AtRootQueryParser_parse_closure,
      E.KeyframeSelectorParser_parse_closure,
      F.MediaQueryParser_parse_closure,
      G.Parser__parseIdentifier_closure,
      U.SassParser_children_closure,
      T.SelectorParser_parse_closure,
      T.SelectorParser_parseCompoundSelector_closure,
      V.StylesheetParser_parse_closure,
      V.StylesheetParser_parse__closure,
      V.StylesheetParser_parseArgumentDeclaration_closure,
      V.StylesheetParser_parseVariableDeclaration_closure,
      V.StylesheetParser_parseUseRule_closure,
      V.StylesheetParser__parseSingleProduction_closure,
      V.StylesheetParser__statement_closure,
      V.StylesheetParser_variableDeclarationWithoutNamespace_closure,
      V.StylesheetParser_variableDeclarationWithoutNamespace_closure0,
      V.StylesheetParser__forRule_closure,
      V.StylesheetParser__memberList_closure,
      V.StylesheetParser_expression_resetState,
      V.StylesheetParser_expression_resolveOneOperation,
      V.StylesheetParser_expression_resolveOperations,
      V.StylesheetParser_expression_resolveSpaceExpressions,
      V.StylesheetParser__expressionUntilComma_closure,
      V.StylesheetParser_identifierLike_closure,
      V.StylesheetParser__expressionUntilComparison_closure,
      V.StylesheetParser__publicIdentifier_closure,
      M.StylesheetGraph_modifiedSince_transitiveModificationTime_closure,
      M.StylesheetGraph__add_closure,
      M.StylesheetGraph_addCanonical_closure,
      M.StylesheetGraph__nodeFor_closure,
      M.StylesheetGraph__nodeFor_closure0,
      T.SassNumber__coerceOrConvertValue__compatibilityException,
      T.SassNumber__coerceOrConvertValue_closure0,
      T.SassNumber__coerceOrConvertValue_closure2,
      T.SassNumber_multiplyUnits_closure0,
      T.SassNumber_multiplyUnits_closure2,
      L.SingleUnitSassNumber_multiplyUnits_closure0,
      E._EvaluateVisitor__closure4,
      E._EvaluateVisitor_run_closure0,
      E._EvaluateVisitor__loadModule_closure1,
      E._EvaluateVisitor__loadModule_closure2,
      E._EvaluateVisitor__execute_closure0,
      E._EvaluateVisitor__extendModules_closure2,
      E._EvaluateVisitor_visitAtRootRule_closure2,
      E._EvaluateVisitor_visitAtRootRule_closure3,
      E._EvaluateVisitor_visitAtRootRule_closure4,
      E._EvaluateVisitor__scopeForAtRoot__closure0,
      E._EvaluateVisitor_visitContentRule_closure0,
      E._EvaluateVisitor_visitDeclaration_closure2,
      E._EvaluateVisitor_visitEachRule_closure4,
      E._EvaluateVisitor_visitExtendRule_closure0,
      E._EvaluateVisitor_visitAtRule_closure3,
      E._EvaluateVisitor_visitAtRule__closure0,
      E._EvaluateVisitor_visitForRule_closure4,
      E._EvaluateVisitor_visitForRule_closure5,
      E._EvaluateVisitor_visitForRule_closure6,
      E._EvaluateVisitor_visitForRule_closure7,
      E._EvaluateVisitor_visitForRule_closure8,
      E._EvaluateVisitor_visitIfRule_closure0,
      E._EvaluateVisitor__visitDynamicImport_closure0,
      E._EvaluateVisitor__visitDynamicImport__closure2,
      E._EvaluateVisitor_visitIncludeRule_closure3,
      E._EvaluateVisitor_visitIncludeRule_closure4,
      E._EvaluateVisitor_visitIncludeRule_closure5,
      E._EvaluateVisitor_visitIncludeRule__closure0,
      E._EvaluateVisitor_visitIncludeRule___closure0,
      E._EvaluateVisitor_visitIncludeRule____closure0,
      E._EvaluateVisitor_visitMediaRule_closure3,
      E._EvaluateVisitor_visitMediaRule__closure0,
      E._EvaluateVisitor_visitMediaRule___closure0,
      E._EvaluateVisitor__visitMediaQueries_closure0,
      E._EvaluateVisitor_visitStyleRule_closure6,
      E._EvaluateVisitor_visitStyleRule_closure7,
      E._EvaluateVisitor_visitStyleRule_closure9,
      E._EvaluateVisitor_visitStyleRule_closure10,
      E._EvaluateVisitor_visitStyleRule_closure11,
      E._EvaluateVisitor_visitStyleRule__closure0,
      E._EvaluateVisitor_visitSupportsRule_closure1,
      E._EvaluateVisitor_visitSupportsRule__closure0,
      E._EvaluateVisitor_visitVariableDeclaration_closure2,
      E._EvaluateVisitor_visitVariableDeclaration_closure3,
      E._EvaluateVisitor_visitVariableDeclaration_closure4,
      E._EvaluateVisitor_visitWarnRule_closure0,
      E._EvaluateVisitor_visitWhileRule_closure0,
      E._EvaluateVisitor_visitBinaryOperationExpression_closure0,
      E._EvaluateVisitor_visitVariableExpression_closure0,
      E._EvaluateVisitor_visitFunctionExpression_closure1,
      E._EvaluateVisitor_visitFunctionExpression_closure2,
      E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure0,
      E._EvaluateVisitor__runUserDefinedCallable_closure0,
      E._EvaluateVisitor__runUserDefinedCallable__closure0,
      E._EvaluateVisitor__runUserDefinedCallable___closure0,
      E._EvaluateVisitor__runFunctionCallable_closure0,
      E._EvaluateVisitor__runBuiltInCallable_closure2,
      E._EvaluateVisitor__runBuiltInCallable_closure3,
      E._EvaluateVisitor__verifyArguments_closure0,
      E._EvaluateVisitor_visitCssAtRule_closure1,
      E._EvaluateVisitor_visitCssKeyframeBlock_closure1,
      E._EvaluateVisitor_visitCssMediaRule_closure3,
      E._EvaluateVisitor_visitCssMediaRule__closure0,
      E._EvaluateVisitor_visitCssMediaRule___closure0,
      E._EvaluateVisitor_visitCssStyleRule_closure1,
      E._EvaluateVisitor_visitCssStyleRule__closure0,
      E._EvaluateVisitor_visitCssSupportsRule_closure1,
      E._EvaluateVisitor_visitCssSupportsRule__closure0,
      E._EvaluateVisitor__serialize_closure0,
      E._EvaluateVisitor__expressionNode_closure0,
      R._EvaluateVisitor__closure1,
      R._EvaluateVisitor_run_closure,
      R._EvaluateVisitor_runExpression_closure,
      R._EvaluateVisitor_runExpression__closure,
      R._EvaluateVisitor_runStatement_closure,
      R._EvaluateVisitor_runStatement__closure,
      R._EvaluateVisitor__loadModule_closure,
      R._EvaluateVisitor__loadModule_closure0,
      R._EvaluateVisitor__execute_closure,
      R._EvaluateVisitor__extendModules_closure0,
      R._EvaluateVisitor_visitAtRootRule_closure,
      R._EvaluateVisitor_visitAtRootRule_closure0,
      R._EvaluateVisitor_visitAtRootRule_closure1,
      R._EvaluateVisitor__scopeForAtRoot__closure,
      R._EvaluateVisitor_visitContentRule_closure,
      R._EvaluateVisitor_visitDeclaration_closure0,
      R._EvaluateVisitor_visitEachRule_closure1,
      R._EvaluateVisitor_visitExtendRule_closure,
      R._EvaluateVisitor_visitAtRule_closure0,
      R._EvaluateVisitor_visitAtRule__closure,
      R._EvaluateVisitor_visitForRule_closure,
      R._EvaluateVisitor_visitForRule_closure0,
      R._EvaluateVisitor_visitForRule_closure1,
      R._EvaluateVisitor_visitForRule_closure2,
      R._EvaluateVisitor_visitForRule_closure3,
      R._EvaluateVisitor_visitIfRule_closure,
      R._EvaluateVisitor__visitDynamicImport_closure,
      R._EvaluateVisitor__visitDynamicImport__closure0,
      R._EvaluateVisitor_visitIncludeRule_closure,
      R._EvaluateVisitor_visitIncludeRule_closure0,
      R._EvaluateVisitor_visitIncludeRule_closure1,
      R._EvaluateVisitor_visitIncludeRule__closure,
      R._EvaluateVisitor_visitIncludeRule___closure,
      R._EvaluateVisitor_visitIncludeRule____closure,
      R._EvaluateVisitor_visitMediaRule_closure0,
      R._EvaluateVisitor_visitMediaRule__closure,
      R._EvaluateVisitor_visitMediaRule___closure,
      R._EvaluateVisitor__visitMediaQueries_closure,
      R._EvaluateVisitor_visitStyleRule_closure,
      R._EvaluateVisitor_visitStyleRule_closure0,
      R._EvaluateVisitor_visitStyleRule_closure2,
      R._EvaluateVisitor_visitStyleRule_closure3,
      R._EvaluateVisitor_visitStyleRule_closure4,
      R._EvaluateVisitor_visitStyleRule__closure,
      R._EvaluateVisitor_visitSupportsRule_closure,
      R._EvaluateVisitor_visitSupportsRule__closure,
      R._EvaluateVisitor_visitVariableDeclaration_closure,
      R._EvaluateVisitor_visitVariableDeclaration_closure0,
      R._EvaluateVisitor_visitVariableDeclaration_closure1,
      R._EvaluateVisitor_visitWarnRule_closure,
      R._EvaluateVisitor_visitWhileRule_closure,
      R._EvaluateVisitor_visitBinaryOperationExpression_closure,
      R._EvaluateVisitor_visitVariableExpression_closure,
      R._EvaluateVisitor_visitFunctionExpression_closure,
      R._EvaluateVisitor_visitFunctionExpression_closure0,
      R._EvaluateVisitor_visitInterpolatedFunctionExpression_closure,
      R._EvaluateVisitor__runUserDefinedCallable_closure,
      R._EvaluateVisitor__runUserDefinedCallable__closure,
      R._EvaluateVisitor__runUserDefinedCallable___closure,
      R._EvaluateVisitor__runFunctionCallable_closure,
      R._EvaluateVisitor__runBuiltInCallable_closure,
      R._EvaluateVisitor__runBuiltInCallable_closure0,
      R._EvaluateVisitor__verifyArguments_closure,
      R._EvaluateVisitor_visitCssAtRule_closure,
      R._EvaluateVisitor_visitCssKeyframeBlock_closure,
      R._EvaluateVisitor_visitCssMediaRule_closure0,
      R._EvaluateVisitor_visitCssMediaRule__closure,
      R._EvaluateVisitor_visitCssMediaRule___closure,
      R._EvaluateVisitor_visitCssStyleRule_closure,
      R._EvaluateVisitor_visitCssStyleRule__closure,
      R._EvaluateVisitor_visitCssSupportsRule_closure,
      R._EvaluateVisitor_visitCssSupportsRule__closure,
      R._EvaluateVisitor__serialize_closure,
      R._EvaluateVisitor__expressionNode_closure,
      N._SerializeVisitor_visitCssComment_closure,
      N._SerializeVisitor_visitCssAtRule_closure,
      N._SerializeVisitor_visitCssMediaRule_closure,
      N._SerializeVisitor_visitCssImport_closure,
      N._SerializeVisitor_visitCssImport__closure,
      N._SerializeVisitor_visitCssKeyframeBlock_closure,
      N._SerializeVisitor_visitCssStyleRule_closure,
      N._SerializeVisitor_visitCssSupportsRule_closure,
      N._SerializeVisitor_visitCssDeclaration_closure,
      N._SerializeVisitor_visitCssDeclaration_closure0,
      N._SerializeVisitor__write_closure,
      N._SerializeVisitor__visitChildren_closure,
      N.withWarnCallback_closure,
      T.SingleMapping_SingleMapping$fromEntries_closure,
      T.SingleMapping_SingleMapping$fromEntries_closure0,
      U.Highlighter_closure,
      U.Highlighter__writeFileStart_closure,
      U.Highlighter__writeMultilineHighlights_closure,
      U.Highlighter__writeMultilineHighlights_closure0,
      U.Highlighter__writeMultilineHighlights_closure1,
      U.Highlighter__writeMultilineHighlights_closure2,
      U.Highlighter__writeMultilineHighlights__closure,
      U.Highlighter__writeMultilineHighlights__closure0,
      U.Highlighter__writeHighlightedText_closure,
      U.Highlighter__writeIndicator_closure,
      U.Highlighter__writeIndicator_closure0,
      U.Highlighter__writeIndicator_closure1,
      U.Highlighter__writeSidebar_closure,
      U._Highlight_closure,
      A.Frame_Frame$parseVM_closure,
      A.Frame_Frame$parseV8_closure,
      A.Frame_Frame$_parseFirefoxEval_closure,
      A.Frame_Frame$parseFirefox_closure,
      A.Frame_Frame$parseFriendly_closure,
      T.LazyTrace_terse_closure,
      Y.Trace_Trace$from_closure,
      Q.AsyncEnvironment_setVariable_closure2,
      Q.AsyncEnvironment_setVariable_closure4,
      E._EvaluateVisitor__closure7,
      E._EvaluateVisitor_run_closure1,
      E._EvaluateVisitor__loadModule_closure3,
      E._EvaluateVisitor__loadModule_closure4,
      E._EvaluateVisitor__execute_closure1,
      E._EvaluateVisitor__extendModules_closure4,
      E._EvaluateVisitor_visitAtRootRule_closure5,
      E._EvaluateVisitor_visitAtRootRule_closure6,
      E._EvaluateVisitor_visitAtRootRule_closure7,
      E._EvaluateVisitor__scopeForAtRoot__closure1,
      E._EvaluateVisitor_visitContentRule_closure1,
      E._EvaluateVisitor_visitDeclaration_closure4,
      E._EvaluateVisitor_visitEachRule_closure7,
      E._EvaluateVisitor_visitExtendRule_closure1,
      E._EvaluateVisitor_visitAtRule_closure6,
      E._EvaluateVisitor_visitAtRule__closure1,
      E._EvaluateVisitor_visitForRule_closure9,
      E._EvaluateVisitor_visitForRule_closure10,
      E._EvaluateVisitor_visitForRule_closure11,
      E._EvaluateVisitor_visitForRule_closure12,
      E._EvaluateVisitor_visitForRule_closure13,
      E._EvaluateVisitor_visitIfRule_closure1,
      E._EvaluateVisitor__visitDynamicImport_closure1,
      E._EvaluateVisitor__visitDynamicImport__closure4,
      E._EvaluateVisitor_visitIncludeRule_closure7,
      E._EvaluateVisitor_visitIncludeRule_closure8,
      E._EvaluateVisitor_visitIncludeRule_closure9,
      E._EvaluateVisitor_visitIncludeRule__closure1,
      E._EvaluateVisitor_visitIncludeRule___closure1,
      E._EvaluateVisitor_visitIncludeRule____closure1,
      E._EvaluateVisitor_visitMediaRule_closure6,
      E._EvaluateVisitor_visitMediaRule__closure1,
      E._EvaluateVisitor_visitMediaRule___closure1,
      E._EvaluateVisitor__visitMediaQueries_closure1,
      E._EvaluateVisitor_visitStyleRule_closure13,
      E._EvaluateVisitor_visitStyleRule_closure14,
      E._EvaluateVisitor_visitStyleRule_closure16,
      E._EvaluateVisitor_visitStyleRule_closure17,
      E._EvaluateVisitor_visitStyleRule_closure18,
      E._EvaluateVisitor_visitStyleRule__closure1,
      E._EvaluateVisitor_visitSupportsRule_closure3,
      E._EvaluateVisitor_visitSupportsRule__closure1,
      E._EvaluateVisitor_visitVariableDeclaration_closure5,
      E._EvaluateVisitor_visitVariableDeclaration_closure6,
      E._EvaluateVisitor_visitVariableDeclaration_closure7,
      E._EvaluateVisitor_visitWarnRule_closure1,
      E._EvaluateVisitor_visitWhileRule_closure1,
      E._EvaluateVisitor_visitBinaryOperationExpression_closure1,
      E._EvaluateVisitor_visitVariableExpression_closure1,
      E._EvaluateVisitor_visitFunctionExpression_closure3,
      E._EvaluateVisitor_visitFunctionExpression_closure4,
      E._EvaluateVisitor_visitInterpolatedFunctionExpression_closure1,
      E._EvaluateVisitor__runUserDefinedCallable_closure1,
      E._EvaluateVisitor__runUserDefinedCallable__closure1,
      E._EvaluateVisitor__runUserDefinedCallable___closure1,
      E._EvaluateVisitor__runFunctionCallable_closure1,
      E._EvaluateVisitor__runBuiltInCallable_closure5,
      E._EvaluateVisitor__runBuiltInCallable_closure6,
      E._EvaluateVisitor__verifyArguments_closure1,
      E._EvaluateVisitor_visitCssAtRule_closure3,
      E._EvaluateVisitor_visitCssKeyframeBlock_closure3,
      E._EvaluateVisitor_visitCssMediaRule_closure6,
      E._EvaluateVisitor_visitCssMediaRule__closure1,
      E._EvaluateVisitor_visitCssMediaRule___closure1,
      E._EvaluateVisitor_visitCssStyleRule_closure3,
      E._EvaluateVisitor_visitCssStyleRule__closure1,
      E._EvaluateVisitor_visitCssSupportsRule_closure3,
      E._EvaluateVisitor_visitCssSupportsRule__closure1,
      E._EvaluateVisitor__serialize_closure1,
      E._EvaluateVisitor__expressionNode_closure1,
      O.AsyncImportCache_canonicalize_closure0,
      O.AsyncImportCache__canonicalize_closure0,
      O.AsyncImportCache_importCanonical_closure0,
      V.AtRootQueryParser_parse_closure0,
      Z.booleanConstructor_closure,
      X.ExtensionStore__registerSelector_closure0,
      X.ExtensionStore_addExtension_closure2,
      X.ExtensionStore_addExtension_closure3,
      X.ExtensionStore_addExtension_closure4,
      X.ExtensionStore__extendExistingExtensions_closure1,
      X.ExtensionStore__extendExistingExtensions_closure2,
      X.ExtensionStore_addExtensions___closure0,
      F._realCasePath_helper_closure0,
      E.KeyframeSelectorParser_parse_closure0,
      A._deepMergeImpl__ensureMutable0,
      F.MediaQueryParser_parse_closure0,
      B._readFile_closure0,
      B.fileExists_closure0,
      B.dirExists_closure0,
      B.listDir_closure0,
      O.nullConstructor_closure,
      O.nullConstructor__closure0,
      T.SassNumber__coerceOrConvertValue__compatibilityException0,
      T.SassNumber__coerceOrConvertValue_closure4,
      T.SassNumber__coerceOrConvertValue_closure6,
      T.SassNumber_multiplyUnits_closure4,
      T.SassNumber_multiplyUnits_closure6,
      G.Parser__parseIdentifier_closure0,
      U.main_closure,
      U.SassParser_children_closure0,
      T.SelectorParser_parse_closure0,
      T.SelectorParser_parseCompoundSelector_closure0,
      N._SerializeVisitor_visitCssComment_closure0,
      N._SerializeVisitor_visitCssAtRule_closure0,
      N._SerializeVisitor_visitCssMediaRule_closure0,
      N._SerializeVisitor_visitCssImport_closure0,
      N._SerializeVisitor_visitCssImport__closure0,
      N._SerializeVisitor_visitCssKeyframeBlock_closure0,
      N._SerializeVisitor_visitCssStyleRule_closure0,
      N._SerializeVisitor_visitCssSupportsRule_closure0,
      N._SerializeVisitor_visitCssDeclaration_closure1,
      N._SerializeVisitor_visitCssDeclaration_closure2,
      N._SerializeVisitor__write_closure0,
      N._SerializeVisitor__visitChildren_closure0,
      L.SingleUnitSassNumber_multiplyUnits_closure2,
      V.StylesheetParser_parse_closure0,
      V.StylesheetParser_parse__closure1,
      V.StylesheetParser_parseArgumentDeclaration_closure0,
      V.StylesheetParser__parseSingleProduction_closure0,
      V.StylesheetParser_parseSignature_closure,
      V.StylesheetParser__statement_closure0,
      V.StylesheetParser_variableDeclarationWithoutNamespace_closure1,
      V.StylesheetParser_variableDeclarationWithoutNamespace_closure2,
      V.StylesheetParser__forRule_closure1,
      V.StylesheetParser__memberList_closure0,
      V.StylesheetParser_expression_resetState0,
      V.StylesheetParser_expression_resolveOneOperation0,
      V.StylesheetParser_expression_resolveOperations0,
      V.StylesheetParser_expression_resolveSpaceExpressions0,
      V.StylesheetParser__expressionUntilComma_closure0,
      V.StylesheetParser_identifierLike_closure0,
      V.StylesheetParser__expressionUntilComparison_closure0,
      V.StylesheetParser__publicIdentifier_closure0,
      B.resolveImportPath_closure1,
      B.resolveImportPath_closure2,
      B._tryPathAsDirectory_closure0,
      N.withWarnCallback_closure0,
    ]);
    _inheritMany(H.EfficientLengthIterable, [
      H.ListIterable,
      H.EmptyIterable,
      H.LinkedHashMapKeyIterable,
      P._HashMapKeyIterable,
      P._MapBaseValueIterable,
    ]);
    _inheritMany(H.ListIterable, [
      H.SubListIterable,
      H.MappedListIterable,
      H.ReversedListIterable,
      P.ListQueue,
      P._GeneratorIterable,
    ]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [
      H.MappedIterator,
      H.WhereIterator,
      H.TakeIterator,
      H.SkipIterator,
      H.SkipWhileIterator,
    ]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.EfficientLengthFollowedByIterable, H.FollowedByIterable);
    _inheritMany(P.MapView, [
      P._UnmodifiableMapView_MapView__UnmodifiableMapMixin,
      K.PathMap,
    ]);
    _inherit(
      P.UnmodifiableMapView,
      P._UnmodifiableMapView_MapView__UnmodifiableMapMixin
    );
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inherit(H.Instantiation1, H.Instantiation);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [
      H.JsLinkedHashMap,
      P._HashMap,
      P.UnmodifiableMapBase,
      Z.MergedMapView,
      Z.MergedMapView0,
    ]);
    _inheritMany(P.IterableBase, [
      H._AllMatchesIterable,
      P._SyncStarIterable,
      O._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin,
      F._PrefixedKeys,
      R._UnprefixedKeys,
      F._PrefixedKeys0,
      R._UnprefixedKeys0,
    ]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [
      H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin,
      H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin,
    ]);
    _inherit(
      H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin,
      H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin
    );
    _inherit(
      H.NativeTypedArrayOfDouble,
      H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin
    );
    _inherit(
      H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin,
      H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin
    );
    _inherit(
      H.NativeTypedArrayOfInt,
      H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin
    );
    _inheritMany(H.NativeTypedArrayOfDouble, [
      H.NativeFloat32List,
      H.NativeFloat64List,
    ]);
    _inheritMany(H.NativeTypedArrayOfInt, [
      H.NativeInt16List,
      H.NativeInt32List,
      H.NativeInt8List,
      H.NativeUint16List,
      H.NativeUint32List,
      H.NativeUint8ClampedList,
      H.NativeUint8List,
    ]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._AsyncStreamController, P._StreamController);
    _inherit(P._StreamImpl, P.Stream);
    _inherit(P._ControllerStream, P._StreamImpl);
    _inherit(P._ControllerSubscription, P._BufferingStreamSubscription);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inherit(P._StreamImplEvents, P._PendingEvents);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(H.JsLinkedHashMap, [
      P._LinkedIdentityHashMap,
      P._LinkedCustomHashMap,
    ]);
    _inherit(P._SetBase, P.__SetBase_Object_SetMixin);
    _inheritMany(P._SetBase, [
      P._LinkedHashSet,
      P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin,
    ]);
    _inherit(P._LinkedIdentityHashSet, P._LinkedHashSet);
    _inherit(
      P._UnmodifiableSet,
      P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin
    );
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P.JsonCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Utf8Codec]);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [
      P._UnicodeSubsetEncoder,
      P.Base64Encoder,
      P.JsonEncoder,
      P.Utf8Encoder,
      P.Utf8Decoder,
    ]);
    _inherit(P.AsciiEncoder, P._UnicodeSubsetEncoder);
    _inherit(P.ByteConversionSink, P.ChunkedConversionSink);
    _inheritMany(P.ByteConversionSink, [
      P.ByteConversionSinkBase,
      P._Utf8StringSinkAdapter,
    ]);
    _inherit(P._Base64EncoderSink, P.ByteConversionSinkBase);
    _inherit(P._Utf8Base64EncoderSink, P._Base64EncoderSink);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.StringConversionSinkBase, P.StringConversionSinkMixin);
    _inherit(P._StringSinkConversionSink, P.StringConversionSinkBase);
    _inherit(P._StringCallbackSink, P._StringSinkConversionSink);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inherit(Z.ArgParserException, P.FormatException);
    _inherit(
      O.EmptyUnmodifiableSet,
      O._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin
    );
    _inherit(Q.QueueList, Q._QueueList_Object_ListMixin);
    _inherit(Q._CastQueueList, Q.QueueList);
    _inheritMany(M._DelegatingIterableBase, [
      M.DelegatingSet,
      M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin,
    ]);
    _inherit(
      L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin,
      M.DelegatingSet
    );
    _inherit(
      L.UnmodifiableSetView,
      L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin
    );
    _inherit(
      M.MapKeySet,
      M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin
    );
    _inheritMany(X.NodeJsError, [
      X.JsAssertionError,
      X.JsRangeError,
      X.JsReferenceError,
      X.JsSyntaxError,
      X.JsTypeError,
      X.JsSystemError,
    ]);
    _inheritMany(Y.Socket, [N.TTYReadStream, N.TTYWriteStream]);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inherit(B.CssNode, B.AstNode);
    _inheritMany(B.CssNode, [B.ModifiableCssNode, B.CssParentNode]);
    _inheritMany(B.ModifiableCssNode, [
      B.ModifiableCssParentNode,
      R.ModifiableCssComment,
      L.ModifiableCssDeclaration,
      F.ModifiableCssImport,
    ]);
    _inheritMany(B.ModifiableCssParentNode, [
      U.ModifiableCssAtRule,
      U.ModifiableCssKeyframeBlock,
      G.ModifiableCssMediaRule,
      X.ModifiableCssStyleRule,
      V.ModifiableCssStylesheet,
      B.ModifiableCssSupportsRule,
    ]);
    _inherit(V.CssStylesheet, B.CssParentNode);
    _inheritMany(M.ParentStatement, [
      V.AtRootRule,
      U.AtRule,
      M.CallableDeclaration,
      L.Declaration,
      V.EachRule,
      B.ForRule,
      G.MediaRule,
      X.StyleRule,
      V.Stylesheet,
      B.SupportsRule,
      G.WhileRule,
    ]);
    _inheritMany(M.CallableDeclaration, [
      Y.ContentBlock,
      M.FunctionRule,
      T.MixinRule,
    ]);
    _inheritMany(V.IfRuleClause, [V.IfClause, V.ElseClause]);
    _inherit(T._HasContentVisitor, A.StatementSearchVisitor);
    _inheritMany(T.Selector, [
      M.SimpleSelector,
      S.ComplexSelector,
      X.CompoundSelector,
      D.SelectorList,
    ]);
    _inheritMany(M.SimpleSelector, [
      N.AttributeSelector,
      X.ClassSelector,
      N.IDSelector,
      M.ParentSelector,
      N.PlaceholderSelector,
      D.PseudoSelector,
      F.TypeSelector,
      N.UniversalSelector,
    ]);
    _inherit(A.ExplicitConfiguration, A.Configuration);
    _inheritMany(G.SourceSpanException, [
      E.SassException,
      G.SourceSpanFormatException,
      E.SassException0,
    ]);
    _inheritMany(E.SassException, [
      E.MultiSpanSassException,
      E.SassRuntimeException,
      E.SassFormatException,
    ]);
    _inherit(E.MultiSpanSassRuntimeException, E.MultiSpanSassException);
    _inherit(E.MultiSpanSassScriptException, E.SassScriptException);
    _inherit(A.MergedExtension, S.Extension);
    _inherit(M.Importer, B.AsyncImporter);
    _inherit(F.FilesystemImporter, M.Importer);
    _inheritMany(G.Parser, [
      V.AtRootQueryParser,
      V.StylesheetParser,
      E.KeyframeSelectorParser,
      F.MediaQueryParser,
      T.SelectorParser,
    ]);
    _inheritMany(V.StylesheetParser, [L.ScssParser, U.SassParser]);
    _inherit(Q.CssParser, L.ScssParser);
    _inheritMany(P.UnmodifiableMapBase, [
      K.LimitedMapView,
      F.PrefixedMapView,
      U.PublicMemberMapView,
      R.UnprefixedMapView,
      K.LimitedMapView0,
      F.PrefixedMapView0,
      U.PublicMemberMapView0,
      R.UnprefixedMapView0,
    ]);
    _inheritMany(F.Value, [
      D.SassList,
      Z.SassBoolean,
      K.SassColor,
      F.SassFunction,
      A.SassMap,
      O._SassNull,
      T.SassNumber,
      D.SassString,
    ]);
    _inherit(D.SassArgumentList, D.SassList);
    _inheritMany(T.SassNumber, [
      S.ComplexSassNumber,
      L.SingleUnitSassNumber,
      N.UnitlessSassNumber,
    ]);
    _inherit(F._FindDependenciesVisitor, D.RecursiveStatementVisitor);
    _inherit(T.SingleMapping, T.Mapping);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _inherit(E.StringScannerException, G.SourceSpanFormatException);
    _inheritMany(X.StringScanner, [Z.LineScanner, S.SpanScanner]);
    _inheritMany(F.Value0, [
      D.SassList0,
      Z.SassBoolean0,
      K.SassColor0,
      T.SassNumber0,
      F.SassFunction0,
      A.SassMap0,
      O._SassNull0,
      D.SassString0,
    ]);
    _inherit(D.SassArgumentList0, D.SassList0);
    _inheritMany(G.Parser1, [
      V.AtRootQueryParser0,
      V.StylesheetParser0,
      E.KeyframeSelectorParser0,
      F.MediaQueryParser0,
      T.SelectorParser0,
    ]);
    _inheritMany(M.ParentStatement0, [
      V.AtRootRule0,
      U.AtRule0,
      M.CallableDeclaration0,
      L.Declaration0,
      V.EachRule0,
      B.ForRule0,
      G.MediaRule0,
      X.StyleRule0,
      V.Stylesheet0,
      B.SupportsRule0,
      G.WhileRule0,
    ]);
    _inherit(B.CssNode0, B.AstNode0);
    _inheritMany(B.CssNode0, [B.ModifiableCssNode0, B.CssParentNode0]);
    _inheritMany(B.ModifiableCssNode0, [
      B.ModifiableCssParentNode0,
      R.ModifiableCssComment0,
      L.ModifiableCssDeclaration0,
      F.ModifiableCssImport0,
    ]);
    _inheritMany(B.ModifiableCssParentNode0, [
      U.ModifiableCssAtRule0,
      U.ModifiableCssKeyframeBlock0,
      G.ModifiableCssMediaRule0,
      X.ModifiableCssStyleRule0,
      V.ModifiableCssStylesheet0,
      B.ModifiableCssSupportsRule0,
    ]);
    _inheritMany(T.Selector0, [
      M.SimpleSelector0,
      S.ComplexSelector0,
      X.CompoundSelector0,
      D.SelectorList0,
    ]);
    _inheritMany(M.SimpleSelector0, [
      N.AttributeSelector0,
      X.ClassSelector0,
      N.IDSelector0,
      M.ParentSelector0,
      N.PlaceholderSelector0,
      D.PseudoSelector0,
      F.TypeSelector0,
      N.UniversalSelector0,
    ]);
    _inheritMany(T.SassNumber0, [
      S.ComplexSassNumber0,
      L.SingleUnitSassNumber0,
      N.UnitlessSassNumber0,
    ]);
    _inherit(A.ExplicitConfiguration0, A.Configuration0);
    _inheritMany(M.CallableDeclaration0, [
      Y.ContentBlock0,
      M.FunctionRule0,
      T.MixinRule0,
    ]);
    _inheritMany(V.StylesheetParser0, [L.ScssParser0, U.SassParser0]);
    _inherit(Q.CssParser0, L.ScssParser0);
    _inheritMany(E.SassException0, [
      E.MultiSpanSassException0,
      E.SassRuntimeException0,
      E.SassFormatException0,
    ]);
    _inherit(E.MultiSpanSassRuntimeException0, E.MultiSpanSassException0);
    _inherit(E.MultiSpanSassScriptException0, E.SassScriptException0);
    _inherit(M.Importer0, B.AsyncImporter0);
    _inherit(F.FilesystemImporter0, M.Importer0);
    _inheritMany(V.IfRuleClause0, [V.IfClause0, V.ElseClause0]);
    _inherit(A.MergedExtension0, S.Extension0);
    _inherit(T._HasContentVisitor0, A.StatementSearchVisitor0);
    _inherit(V.CssStylesheet0, B.CssParentNode0);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(
      H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin,
      H.FixedLengthListMixin
    );
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(
      H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin,
      H.FixedLengthListMixin
    );
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P.UnmodifiableMapBase, P._UnmodifiableMapMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(
      P._UnmodifiableMapView_MapView__UnmodifiableMapMixin,
      P._UnmodifiableMapMixin
    );
    _mixin(P.__SetBase_Object_SetMixin, P.SetMixin);
    _mixin(
      P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin,
      P._UnmodifiableSetMixin
    );
    _mixin(
      O._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin,
      L.UnmodifiableSetMixin
    );
    _mixin(Q._QueueList_Object_ListMixin, P.ListMixin);
    _mixin(
      L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin,
      L.UnmodifiableSetMixin
    );
    _mixin(
      M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin,
      L.UnmodifiableSetMixin
    );
  })();
  var init = {
    typeUniverse: { eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: [] },
    mangledGlobalNames: {
      int: 'int',
      double: 'double',
      num: 'num',
      String: 'String',
      bool: 'bool',
      Null: 'Null',
      List: 'List',
    },
    mangledNames: {},
    types: [
      '~()',
      'Future<Null>()',
      'Null()',
      'Value(List<Value>)',
      'Value0(List<Value0>)',
      'String(String)',
      'bool(String)',
      'bool(CssNode)',
      'SassNumber(List<Value>)',
      'SassNumber0(List<Value0>)',
      'bool(Object?)',
      'SassString(List<Value>)',
      'SassString0(List<Value0>)',
      'SassBoolean(List<Value>)',
      'bool(CssNode0)',
      'bool(SimpleSelector)',
      'bool(ComplexSelector)',
      'bool(ComplexSelector0)',
      'int()',
      'bool(SimpleSelector0)',
      'SassList(List<Value>)',
      'SassList0(List<Value0>)',
      'SassColor0(List<Value0>)',
      'SassColor(List<Value>)',
      'SassBoolean0(List<Value0>)',
      'bool()',
      'bool(int?)',
      'Future<Null>(Future<~>())',
      'String()',
      'SassMap(List<Value>)',
      'Future<~>()',
      'Value(Value)',
      'Value?()',
      'FileSpan()',
      'int(num)',
      'bool(num,num)',
      'Value()',
      'String?()',
      'SassMap0(List<Value0>)',
      'SelectorList()',
      'Null(~())',
      'Value0(Value0)',
      'List<String>()',
      'num(num,num)',
      '~(Value,Value)',
      '~(Object?)',
      'bool(int)',
      'ValueExpression(Value)',
      '~(Value)',
      'bool(Value0)',
      '~(Module<Callable>)',
      'String(Object)',
      'Future<Value0>()',
      'Future<Value0?>()',
      'bool(Value)',
      'Frame(String)',
      'Frame()',
      'Future<Value>()',
      'Future<Value?>()',
      '~(Value0)',
      'SassRuntimeException(AstNode)',
      'SelectorList0()',
      'Future<Value0?>(Statement0)',
      '~(Value0,Value0)',
      'bool(SelectorList)',
      'String(@)',
      'ComplexSelector(List<ComplexSelectorComponent>)',
      'ComplexSelector0(List<ComplexSelectorComponent0>)',
      'String(int)',
      'Declaration0(List<Statement0>,FileSpan)',
      '@()',
      'num(num)',
      'bool(SelectorList0)',
      'Value?(Statement)',
      'Future<String>(Object?)',
      'Declaration(List<Statement>,FileSpan)',
      '~(String,Value)',
      'List<CssMediaQuery>?(List<CssMediaQuery>)',
      'Future<Value?>(Statement)',
      'Null(_NodeSassColor,num)',
      '@(@)',
      'num(Value)',
      'String(Expression)',
      'List<ComplexSelectorComponent>(List<ComplexSelectorComponent>)',
      'AsyncCallable0?()',
      'ComplexSelector(ComplexSelector)',
      'Map<ComplexSelector0,Extension0>()',
      'bool(Module<AsyncCallable>)',
      'bool(@)',
      'ComplexSelector0(ComplexSelector0)',
      'Tuple3<Importer,Uri,Uri>?()',
      'Stylesheet?()',
      'bool(_Highlight)',
      'List<ComplexSelectorComponent0>(List<ComplexSelectorComponent0>)',
      'bool(Module0<AsyncCallable0>)',
      'Null([Object?])',
      'Null(Object,StackTrace)',
      'bool(ComplexSelectorComponent)',
      'AtRootQuery()',
      'int(Uri)',
      '~(String,bool)',
      'bool(Module<Callable>)',
      'bool(ComplexSelectorComponent0)',
      'Statement()',
      'Callable?()',
      'Uri(Uri)',
      'Iterable<String>(Module<AsyncCallable>)',
      'AsyncCallable?()',
      '~(~())',
      'num(Value0)',
      'Iterable<String>(Module<Callable>)',
      'ValueExpression0(Value0)',
      '~(@)',
      'Statement0()',
      'Null(Module<AsyncCallable>)',
      'Iterable<String>(Module0<AsyncCallable0>)',
      'Map<ComplexSelector,Extension>()',
      'Iterable<ComplexSelector>(ComplexSelector)',
      'int(_NodeSassColor)',
      'Null(Module0<AsyncCallable0>)',
      'Iterable<ComplexSelector0>(ComplexSelector0)',
      'List<CssMediaQuery>()',
      'Future<Value0>(List<Value0>)',
      'DateTime()',
      'AsyncCallable0?(Module0<AsyncCallable0>)',
      'int(Object?)',
      '~([Object?])',
      'Future<Value>(List<Value>)',
      '~(Object,StackTrace)',
      'num?(String,num{assertPercent:bool,checkPercent:bool})',
      'num(num,num?,num)',
      'int(int,num?)',
      'Null(@)',
      'bool(Import0)',
      'bool(Statement)',
      'bool(Import)',
      'bool(Frame)',
      'String(_NodeSassString)',
      'MapKeySet<Module<Callable>>(Map<Module<Callable>,AstNode>)',
      'SelectorList0(SelectorList0,SelectorList0)',
      'int(@,@)',
      'Trace()',
      'bool(Statement0)',
      'Map<String,Callable>(Module<Callable>)',
      'SelectorList0(Value0)',
      '0&([@])',
      'String(Frame)',
      'SelectorList(Value)',
      'SelectorList(SelectorList,SelectorList)',
      'int(Frame)',
      '~(Uint8List,String,int)',
      'Trace(String)',
      '~(Iterable<ExtensionStore>)',
      '0&([@])()',
      'SassNumber()',
      'Uri(String)',
      '~(String,@)',
      'String(_NodeSassNumber)',
      '~(String)',
      'List<Extension>()',
      'Iterable<String>()',
      'Iterable<String>(String)',
      'Iterable<String>(@)',
      '~(String,Value0)',
      'Iterable<ComplexSelectorComponent0>(List<List<ComplexSelectorComponent0>>)',
      'int(int)',
      'String(Expression0)',
      'bool(Object?,Object?)',
      'List<CssMediaQuery0>()',
      'List<CssMediaQuery0>?(List<CssMediaQuery0>)',
      'AtRule0(List<Statement0>,FileSpan)',
      'Callable?(Module<Callable>)',
      'Future<SassNumber0>()',
      'AtRootRule0(List<Statement0>,FileSpan)',
      'Frame(Tuple2<String,AstNode>)',
      'Null(_NodeSassMap,int,Object)',
      'String(SassNumber)',
      'AstNode?()',
      'AsyncCallable?(Module<AsyncCallable>)',
      'VariableDeclaration()',
      'MapKeySet<Module<AsyncCallable>>(Map<Module<AsyncCallable>,AstNode>)',
      'Object(_NodeSassMap,int)',
      'AtRootQuery0()',
      'List<Extension0>()',
      'AtRootRule(List<Statement>,FileSpan)',
      'SassRuntimeException0(AstNode0)',
      '~(Module0<AsyncCallable0>)',
      'bool(String?)',
      'Map<String,AsyncCallable>(Module<AsyncCallable>)',
      'Future<SassNumber>()',
      'Value0(int)',
      'AtRule(List<Statement>,FileSpan)',
      '~(Iterable<ExtensionStore0>)',
      'Iterable<ComplexSelectorComponent>(List<List<ComplexSelectorComponent>>)',
      'bool(ModifiableCssParentNode)',
      'bool(Queue<Object?>)',
      'Uri?/()',
      'List<ExtensionStore>()',
      '~(@,@)',
      'Map<String,AsyncCallable0>(Module0<AsyncCallable0>)',
      'Entry(Entry)',
      '~(Object?,Object?)',
      '~(Module<AsyncCallable>)',
      'num(num,String)',
      'MapKeySet<Module0<AsyncCallable0>>(Map<Module0<AsyncCallable0>,AstNode0>)',
      'SassFunction(List<Value>)',
      'AstNode(AstNode)',
      'Value0?()',
      'List<ComplexSelectorComponent>?(List<ComplexSelectorComponent>,List<ComplexSelectorComponent>)',
      'SingleUnitSassNumber(num)',
      'Future<~>(List<Value>)',
      'SassScriptException()',
      'Future<EvaluateResult>()',
      '~(Uri,StylesheetNode?)',
      'DateTime(StylesheetNode)',
      'Module<AsyncCallable>(Module<AsyncCallable>)',
      'StringExpression(Interpolation)',
      '~(BinaryOperator)',
      '~(Expression{number:bool})',
      'Future<CssValue<Value>>(Expression)',
      'WhileRule(List<Statement>,FileSpan)',
      'SupportsRule(List<Statement>,FileSpan)',
      'Future<Value?>(Value)',
      'MixinRule(List<Statement>,FileSpan)',
      'Future<CssValue<String>>(Interpolation)',
      'MediaRule(List<Statement>,FileSpan)',
      'ContentBlock(List<Statement>,FileSpan)',
      'Future<CssValue<String>>(SupportsCondition)',
      'UserDefinedCallable<AsyncEnvironment>(ContentBlock)',
      'ForRule(List<Statement>,FileSpan)',
      'FunctionRule(List<Statement>,FileSpan)',
      'EachRule(List<Statement>,FileSpan)',
      'Future<Value>(Expression)',
      'Value/()',
      'StyleRule(List<Statement>,FileSpan)',
      'UseRule()',
      'ArgumentDeclaration()',
      'VariableDeclaration(VariableDeclaration)',
      'Statement?()',
      'Stylesheet()',
      'NumberExpression()',
      'List<CssMediaQuery>(Interpolation)',
      'String(SupportsCondition)',
      'Expression({bracketList:bool,singleEquals:bool,until:bool()?})',
      '~(List<Value>)',
      'Statement({root:bool})',
      'EvaluateResult()',
      'CompoundSelector()',
      'Module<Callable>(Module<Callable>)',
      'CssValue<Value>(Expression)',
      'Value?(Value)',
      'String(BuiltInCallable)',
      'CssValue<String>(Interpolation)',
      'Uri(Tuple3<Importer,Uri,Uri>)',
      'CssValue<String>(SupportsCondition)',
      'UserDefinedCallable<Environment>(ContentBlock)',
      'Value(Expression)',
      '~(ContentBlock)',
      '~(List<Statement>)',
      '~(CssMediaQuery)',
      '~(MapEntry<Value,Value>)',
      'SourceFile()',
      'SourceFile?(int)',
      'String?(SourceFile?)',
      'int(_Line)',
      'bool(Tuple3<Importer,Uri,Uri>)',
      'Uri?(_Line)',
      'Uri?(_Highlight)',
      'int(_Highlight,_Highlight)',
      'List<_Line>(List<_Highlight>)',
      'SourceSpanWithContext()',
      'String(String{color:@})',
      'Uri?()',
      'List<Frame>(Trace)',
      'int(Trace)',
      'SassString(SimpleSelector)',
      'String(Trace)',
      'SassNumber(Value)',
      'SassMap(SassMap)',
      'Frame(String,String)',
      'SassMap(Value)',
      'bool(List<Value>)',
      'List<Value>(Value)',
      'Frame(Frame)',
      'String(Argument0)',
      '0&(List<Value>)',
      'String(Value)',
      'Value0?(Module0<AsyncCallable0>)',
      'Module0<AsyncCallable0>?(Module0<AsyncCallable0>)',
      'SelectorList?(PseudoSelector)',
      'bool(PseudoSelector)',
      'FileSpan?(MapEntry<Module0<AsyncCallable0>,AstNode0>)',
      'Map<String,Value0>(Module0<AsyncCallable0>)',
      'Map<String,AstNode0>(Module0<AsyncCallable0>)',
      'Iterable<ComplexSelectorComponent>(Iterable<ComplexSelectorComponent>)',
      'List<ComplexSelectorComponent>(List<Iterable<ComplexSelectorComponent>>)',
      'Future<List<CssMediaQuery0>>(Interpolation0)',
      'Future<String>(SupportsCondition0)',
      'AstNode0(AstNode0)',
      'bool(List<Iterable<ComplexSelectorComponent>>)',
      'bool(Queue<List<ComplexSelectorComponent>>)',
      'SassFunction0(List<Value0>)',
      'Future<List<CssMediaQuery>>(Interpolation)',
      'Future<~>(List<Value0>)',
      '~(SimpleSelector,Set<ModifiableCssValue<SelectorList>>)',
      'PseudoSelector(ComplexSelector)',
      'Future<EvaluateResult0>()',
      'List<ComplexSelector>(ComplexSelector)',
      'List<List<Extender>>(List<Extender>)',
      'Module0<AsyncCallable0>(Module0<AsyncCallable0>)',
      'List<ExtensionStore0>()',
      'List<Extender>(PseudoSelector)',
      'bool(ModifiableCssParentNode0)',
      'Future<CssValue0<Value0>>(Expression0)',
      'List<Extender>?(SimpleSelector)',
      'List<ComplexSelector>(List<ComplexSelector>)',
      'Future<Value0?>(Value0)',
      'List<SimpleSelector>(Extender)',
      'List<ComplexSelector>?(List<Extender>)',
      'Future<CssValue0<String>>(Interpolation0)',
      'ComplexSelector(Extender)',
      'List<ComplexSelectorComponent>(ComplexSelector)',
      'Iterable<ComplexSelector>(List<ComplexSelector>)',
      'Future<CssValue0<String>>(SupportsCondition0)',
      'UserDefinedCallable0<AsyncEnvironment0>(ContentBlock0)',
      'List<ComplexSelector>(ComplexSelectorComponent)',
      '~(Set<ModifiableCssValue<SelectorList>>)',
      'Object(Value0)',
      'Map<SimpleSelector,Map<ComplexSelector,Extension>>?(List<Extension>)',
      'Null(Map<SimpleSelector,Map<ComplexSelector,Extension>>)',
      'Future<Value0>(Expression0)',
      'Value0/()',
      '~(ComplexSelector,Extension)',
      '~(SimpleSelector,Map<ComplexSelector,Extension>)',
      'Set<ModifiableCssValue<SelectorList>>()',
      'AstNode0?()',
      'String(SassNumber0)',
      'Frame(Tuple2<String,AstNode0>)',
      'Future<Tuple3<AsyncImporter0,Uri,Uri>?>()',
      'Future<Stylesheet0?>()',
      'bool(Tuple3<AsyncImporter0,Uri,Uri>)',
      'Uri(Tuple3<AsyncImporter0,Uri,Uri>)',
      'bool(Extension)',
      'ArgParser()',
      'bool(Object)',
      'Map<String,AstNode>(Module<Callable>)',
      'Map<String,Value>(Module<Callable>)',
      'FileSpan?(MapEntry<Module<Callable>,AstNode>)',
      'Module<Callable>?(Module<Callable>)',
      'Value?(Module<Callable>)',
      'String(Value0)',
      '0&(List<Value0>)',
      'String(MapEntry<String,ConfiguredValue>)',
      'Null(_NodeSassColor,num?[num?,num?,num?,SassColor0?])',
      'Uri(Tuple3<AsyncImporter,Uri,Uri>)',
      'num(_NodeSassColor)',
      'bool(Tuple3<AsyncImporter,Uri,Uri>)',
      'String(_NodeSassColor)',
      'Future<Stylesheet?>()',
      'String(MapEntry<String,ConfiguredValue0>)',
      'String(BuiltInCallable0)',
      'Future<Tuple3<AsyncImporter,Uri,Uri>?>()',
      'bool(Extension0)',
      'Set<ModifiableCssValue0<SelectorList0>>()',
      'Map<String,AstNode>(Module<AsyncCallable>)',
      'Map<String,Value>(Module<AsyncCallable>)',
      '~(SimpleSelector0,Map<ComplexSelector0,Extension0>)',
      '~(ComplexSelector0,Extension0)',
      'Null(Map<SimpleSelector0,Map<ComplexSelector0,Extension0>>)',
      'Map<SimpleSelector0,Map<ComplexSelector0,Extension0>>?(List<Extension0>)',
      '~(Set<ModifiableCssValue0<SelectorList0>>)',
      'List<ComplexSelector0>(ComplexSelectorComponent0)',
      'Iterable<ComplexSelector0>(List<ComplexSelector0>)',
      'List<ComplexSelectorComponent0>(ComplexSelector0)',
      'FileSpan?(MapEntry<Module<AsyncCallable>,AstNode>)',
      'Module<AsyncCallable>?(Module<AsyncCallable>)',
      'ComplexSelector0(Extender0)',
      'List<ComplexSelector0>?(List<Extender0>)',
      'List<SimpleSelector0>(Extender0)',
      'List<ComplexSelector0>(List<ComplexSelector0>)',
      'List<Extender0>?(SimpleSelector0)',
      'List<Extender0>(PseudoSelector0)',
      'List<List<Extender0>>(List<Extender0>)',
      'List<ComplexSelector0>(ComplexSelector0)',
      'PseudoSelector0(ComplexSelector0)',
      '~(SimpleSelector0,Set<ModifiableCssValue0<SelectorList0>>)',
      'Value?(Module<AsyncCallable>)',
      'List<ComplexSelectorComponent0>?(List<ComplexSelectorComponent0>,List<ComplexSelectorComponent0>)',
      'bool(Queue<List<ComplexSelectorComponent0>>)',
      'SimpleSelector(SimpleSelector)',
      'bool(List<Iterable<ComplexSelectorComponent0>>)',
      'List<ComplexSelectorComponent0>(List<Iterable<ComplexSelectorComponent0>>)',
      'Iterable<ComplexSelectorComponent0>(Iterable<ComplexSelectorComponent0>)',
      'SassString(ComplexSelectorComponent)',
      'bool(PseudoSelector0)',
      'SelectorList0?(PseudoSelector0)',
      'Future<String>(SupportsCondition)',
      'SassList(ComplexSelector)',
      'String(IfClause)',
      'String(Tuple2<Expression,Expression>)',
      'List<Value0>(Value0)',
      'bool(List<Value0>)',
      'SassList0(ComplexSelector0)',
      'SassString0(ComplexSelectorComponent0)',
      'String(Argument)',
      'int(String?)',
      'SimpleSelector0(SimpleSelector0)',
      'Null(_NodeSassList,int?[bool?,SassList0?])',
      'bool(String?,String?)',
      'Object(_NodeSassList,int)',
      'Null(_NodeSassList,int,Object)',
      'bool(_NodeSassList)',
      'Null(_NodeSassList,bool)',
      'int(_NodeSassList)',
      'String(_NodeSassList)',
      'String(Tuple2<Expression0,Expression0>)',
      'SassMap0(Value0)',
      'SassMap0(SassMap0)',
      'Null(_NodeSassMap,int?[SassMap0?])',
      'SassNumber0(int)',
      'String(String?)',
      'int(_NodeSassMap)',
      'Null(Function,Function)',
      'String(_NodeSassMap)',
      'SassNumber0(Value0)',
      'Null(RenderResult)',
      '~(Object,Object?)',
      'Null(_NodeSassNumber,num?[String?,SassNumber0?])',
      'num(_NodeSassNumber)',
      'Null(_NodeSassNumber,num)',
      '~(String,Option)',
      'Null(_NodeSassNumber,String)',
      'SassScriptException0()',
      '~(String,StackTrace?)',
      'Uint8List(@,@)',
      'int(int,int)',
      'SassString0(SimpleSelector0)',
      'CompoundSelector0()',
      '~(CssMediaQuery0)',
      '~(MapEntry<Value0,Value0>)',
      'SingleUnitSassNumber0(num)',
      'Null(_NodeSassString,String?[SassString0?])',
      '~(String[@])',
      'Null(_NodeSassString,String)',
      'Statement0({root:bool})',
      '~(String,int)',
      'NumberExpression0()',
      'Stylesheet0()',
      'Statement0?()',
      'VariableDeclaration0(VariableDeclaration0)',
      'ArgumentDeclaration0()',
      'Tuple2<String,ArgumentDeclaration0>()',
      'VariableDeclaration0()',
      '~(Symbol0,@)',
      'StyleRule0(List<Statement0>,FileSpan)',
      'Set<0^>()<Object?>',
      'EachRule0(List<Statement0>,FileSpan)',
      'FunctionRule0(List<Statement0>,FileSpan)',
      'ForRule0(List<Statement0>,FileSpan)',
      'ContentBlock0(List<Statement0>,FileSpan)',
      'MediaRule0(List<Statement0>,FileSpan)',
      'MixinRule0(List<Statement0>,FileSpan)',
      'Set<0^>()<Object?>',
      'SupportsRule0(List<Statement0>,FileSpan)',
      'WhileRule0(List<Statement0>,FileSpan)',
      '~(Expression0{number:bool})',
      '~(BinaryOperator0)',
      'StringExpression0(Interpolation0)',
      '~(String,Function)',
      '_Future<@>(@)',
      '~(int,@)',
      '~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)',
      '0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>',
      '0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?Object?>',
      '0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?Object?Object?>',
      '0^()(Zone,ZoneDelegate,Zone,0^())<Object?>',
      '0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?Object?>',
      '0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?Object?Object?>',
      'AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)',
      '~(Zone?,ZoneDelegate?,Zone,~())',
      'Timer(Zone,ZoneDelegate,Zone,Duration,~())',
      'Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))',
      '~(Zone,ZoneDelegate,Zone,String)',
      'Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)',
      'Null(@,StackTrace)',
      '@(String)',
      '0^(0^,0^)<num>',
      '~(RenderOptions,~(Object?,RenderResult?))',
      'Future<~>(List<String>)',
      'String(String[String?,String?,String?,String?,String?,String?])',
      '@(@,String)',
      'String(IfClause0)',
    ],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol('$ti'),
  };
  H._Universe_addRules(
    init.typeUniverse,
    JSON.parse(
      '{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","Stdin":"JavaScriptObject","Stdout":"JavaScriptObject","ReadlineModule":"JavaScriptObject","ReadlineOptions":"JavaScriptObject","ReadlineInterface":"JavaScriptObject","BufferModule":"JavaScriptObject","BufferConstants":"JavaScriptObject","Buffer":"JavaScriptObject","ConsoleModule":"JavaScriptObject","Console":"JavaScriptObject","EventEmitter":"JavaScriptObject","FS":"JavaScriptObject","FSConstants":"JavaScriptObject","FSWatcher":"JavaScriptObject","ReadStream":"JavaScriptObject","ReadStreamOptions":"JavaScriptObject","WriteStream":"JavaScriptObject","WriteStreamOptions":"JavaScriptObject","FileOptions":"JavaScriptObject","StatOptions":"JavaScriptObject","MkdirOptions":"JavaScriptObject","RmdirOptions":"JavaScriptObject","WatchOptions":"JavaScriptObject","WatchFileOptions":"JavaScriptObject","Stats":"JavaScriptObject","Promise":"JavaScriptObject","Date":"JavaScriptObject","JsError":"JavaScriptObject","Atomics":"JavaScriptObject","Modules":"JavaScriptObject","Module1":"JavaScriptObject","Net":"JavaScriptObject","Socket":"JavaScriptObject","NetAddress":"JavaScriptObject","NetServer":"JavaScriptObject","NodeJsError":"JavaScriptObject","JsAssertionError":"JavaScriptObject","JsRangeError":"JavaScriptObject","JsReferenceError":"JavaScriptObject","JsSyntaxError":"JavaScriptObject","JsTypeError":"JavaScriptObject","JsSystemError":"JavaScriptObject","Process":"JavaScriptObject","CPUUsage":"JavaScriptObject","Release":"JavaScriptObject","StreamModule":"JavaScriptObject","Readable":"JavaScriptObject","Writable":"JavaScriptObject","Duplex":"JavaScriptObject","Transform":"JavaScriptObject","WritableOptions":"JavaScriptObject","ReadableOptions":"JavaScriptObject","Immediate":"JavaScriptObject","Timeout":"JavaScriptObject","TTY":"JavaScriptObject","TTYReadStream":"JavaScriptObject","TTYWriteStream":"JavaScriptObject","Util":"JavaScriptObject","JSFunction":"JavaScriptObject","NodeImporterResult":"JavaScriptObject","RenderContext":"JavaScriptObject","RenderContextOptions":"JavaScriptObject","RenderContextResult":"JavaScriptObject","RenderContextResultStats":"JavaScriptObject","_PropertyDescriptor":"JavaScriptObject","_NodeSassColor":"JavaScriptObject","Exports":"JavaScriptObject","JSFunction0":"JavaScriptObject","NodeImporterResult0":"JavaScriptObject","_NodeSassList":"JavaScriptObject","_NodeSassMap":"JavaScriptObject","_NodeSassNumber":"JavaScriptObject","RenderContext0":"JavaScriptObject","RenderContextOptions0":"JavaScriptObject","RenderContextResult0":"JavaScriptObject","RenderContextResultStats0":"JavaScriptObject","RenderOptions":"JavaScriptObject","RenderResult":"JavaScriptObject","RenderResultStats":"JavaScriptObject","_Exports":"JavaScriptObject","_NodeSassString":"JavaScriptObject","Types":"JavaScriptObject","_PropertyDescriptor0":"JavaScriptObject","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JavaScriptObject":{"JsSystemError":[],"_NodeSassColor":[],"JSFunction0":[],"NodeImporterResult0":[],"_NodeSassList":[],"_NodeSassMap":[],"_NodeSassNumber":[],"RenderContextOptions0":[],"RenderOptions":[],"RenderResult":[],"_NodeSassString":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListMixin.E":"2"},"CastSet":{"Set":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"FollowedByIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"UnmodifiableListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"Instantiation":{"Function":[]},"Instantiation1":{"Function":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"]},"NativeTypedArrayOfDouble":{"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"NativeTypedArrayOfInt":{"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"ListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"ListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_AsyncCompleter":{"_Completer":["1"]},"_AsyncStreamController":{"_StreamController":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"]},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"]},"_StreamImpl":{"Stream":["1"]},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"Zone":[]},"_RootZone":{"Zone":[]},"Queue":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedIdentityHashSet":{"_LinkedHashSet":["1"],"_SetBase":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableListView":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"Map":["1","2"]},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"_SetBase":["1"],"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"AsciiCodec":{"Codec":["String","List<int>"]},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"]},"Base64Codec":{"Codec":["List<int>","String"]},"Base64Encoder":{"Converter":["List<int>","String"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"]},"JsonEncoder":{"Converter":["Object?","String"]},"Utf8Codec":{"Codec":["String","List<int>"]},"Utf8Encoder":{"Converter":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"RangeError":[],"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"ArgParserException":{"FormatException":[],"Exception":[]},"ErrorResult":{"Result":["0&"]},"ValueResult":{"Result":["1"]},"_NextRequest":{"_EventRequest":["1"]},"EmptyUnmodifiableSet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"QueueList":{"ListMixin":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1","QueueList.E":"1"},"_CastQueueList":{"QueueList":["2"],"ListMixin":["2"],"List":["2"],"Queue":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListMixin.E":"2","QueueList.E":"2"},"UnmodifiableSetView":{"DelegatingSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapKeySet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"PathException":{"Exception":[]},"PathMap":{"Map":["String?","1"]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"ModifiableCssAtRule":{"ModifiableCssParentNode":[],"CssAtRule":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssComment":{"ModifiableCssNode":[],"CssComment":[],"CssNode":[],"AstNode":[]},"ModifiableCssDeclaration":{"ModifiableCssNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssImport":{"ModifiableCssNode":[],"CssImport":[],"CssNode":[],"AstNode":[]},"ModifiableCssKeyframeBlock":{"ModifiableCssParentNode":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssMediaRule":{"ModifiableCssParentNode":[],"CssMediaRule":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssNode":{"CssNode":[],"AstNode":[]},"ModifiableCssParentNode":{"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssStyleRule":{"ModifiableCssParentNode":[],"CssStyleRule":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssStylesheet":{"ModifiableCssParentNode":[],"CssStylesheet":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssSupportsRule":{"ModifiableCssParentNode":[],"CssSupportsRule":[],"ModifiableCssNode":[],"CssParentNode":[],"CssNode":[],"AstNode":[]},"ModifiableCssValue":{"CssValue":["1"],"AstNode":[]},"CssNode":{"AstNode":[]},"CssParentNode":{"CssNode":[],"AstNode":[]},"CssStylesheet":{"CssParentNode":[],"CssNode":[],"AstNode":[]},"CssValue":{"AstNode":[]},"_FakeAstNode":{"AstNode":[]},"Argument":{"AstNode":[]},"ArgumentDeclaration":{"AstNode":[]},"ArgumentInvocation":{"AstNode":[]},"ConfiguredVariable":{"AstNode":[]},"BinaryOperationExpression":{"Expression":[],"AstNode":[]},"BooleanExpression":{"Expression":[],"AstNode":[]},"ColorExpression":{"Expression":[],"AstNode":[]},"FunctionExpression":{"Expression":[],"AstNode":[]},"IfExpression":{"Expression":[],"AstNode":[]},"InterpolatedFunctionExpression":{"Expression":[],"AstNode":[]},"ListExpression":{"Expression":[],"AstNode":[]},"MapExpression":{"Expression":[],"AstNode":[]},"NullExpression":{"Expression":[],"AstNode":[]},"NumberExpression":{"Expression":[],"AstNode":[]},"ParenthesizedExpression":{"Expression":[],"AstNode":[]},"SelectorExpression":{"Expression":[],"AstNode":[]},"StringExpression":{"Expression":[],"AstNode":[]},"UnaryOperationExpression":{"Expression":[],"AstNode":[]},"ValueExpression":{"Expression":[],"AstNode":[]},"VariableExpression":{"Expression":[],"AstNode":[]},"DynamicImport":{"Import":[],"AstNode":[]},"StaticImport":{"Import":[],"AstNode":[]},"Interpolation":{"AstNode":[]},"AtRootRule":{"Statement":[],"AstNode":[]},"AtRule":{"Statement":[],"AstNode":[]},"CallableDeclaration":{"Statement":[],"AstNode":[]},"ContentBlock":{"Statement":[],"AstNode":[]},"ContentRule":{"Statement":[],"AstNode":[]},"DebugRule":{"Statement":[],"AstNode":[]},"Declaration":{"Statement":[],"AstNode":[]},"EachRule":{"Statement":[],"AstNode":[]},"ErrorRule":{"Statement":[],"AstNode":[]},"ExtendRule":{"Statement":[],"AstNode":[]},"ForRule":{"Statement":[],"AstNode":[]},"ForwardRule":{"Statement":[],"AstNode":[]},"FunctionRule":{"Statement":[],"AstNode":[]},"IfRule":{"Statement":[],"AstNode":[]},"ImportRule":{"Statement":[],"AstNode":[]},"IncludeRule":{"Statement":[],"AstNode":[]},"LoudComment":{"Statement":[],"AstNode":[]},"MediaRule":{"Statement":[],"AstNode":[]},"MixinRule":{"Statement":[],"AstNode":[]},"_HasContentVisitor":{"StatementSearchVisitor":["bool"],"StatementSearchVisitor.T":"bool"},"ParentStatement":{"Statement":[],"AstNode":[]},"ReturnRule":{"Statement":[],"AstNode":[]},"SilentComment":{"Statement":[],"AstNode":[]},"StyleRule":{"Statement":[],"AstNode":[]},"Stylesheet":{"Statement":[],"AstNode":[]},"SupportsRule":{"Statement":[],"AstNode":[]},"UseRule":{"Statement":[],"AstNode":[]},"VariableDeclaration":{"Statement":[],"AstNode":[]},"WarnRule":{"Statement":[],"AstNode":[]},"WhileRule":{"Statement":[],"AstNode":[]},"SupportsAnything":{"SupportsCondition":[],"AstNode":[]},"SupportsDeclaration":{"SupportsCondition":[],"AstNode":[]},"SupportsFunction":{"SupportsCondition":[],"AstNode":[]},"SupportsInterpolation":{"SupportsCondition":[],"AstNode":[]},"SupportsNegation":{"SupportsCondition":[],"AstNode":[]},"SupportsOperation":{"SupportsCondition":[],"AstNode":[]},"AttributeSelector":{"SimpleSelector":[]},"ClassSelector":{"SimpleSelector":[]},"Combinator":{"ComplexSelectorComponent":[]},"CompoundSelector":{"ComplexSelectorComponent":[]},"IDSelector":{"SimpleSelector":[]},"ParentSelector":{"SimpleSelector":[]},"PlaceholderSelector":{"SimpleSelector":[]},"PseudoSelector":{"SimpleSelector":[]},"TypeSelector":{"SimpleSelector":[]},"UniversalSelector":{"SimpleSelector":[]},"_EnvironmentModule0":{"Module":["AsyncCallable"]},"AsyncBuiltInCallable":{"AsyncCallable":[]},"BuiltInCallable":{"Callable":[],"AsyncBuiltInCallable":[],"AsyncCallable":[]},"PlainCssCallable":{"Callable":[],"AsyncCallable":[]},"UserDefinedCallable":{"Callable":[],"AsyncCallable":[]},"ExplicitConfiguration":{"Configuration":[]},"_EnvironmentModule":{"Module":["Callable"]},"SassRuntimeException":{"Exception":[]},"SassException":{"Exception":[]},"MultiSpanSassException":{"Exception":[]},"MultiSpanSassRuntimeException":{"SassRuntimeException":[],"Exception":[]},"SassFormatException":{"SourceSpanFormatException":[],"FormatException":[],"Exception":[]},"UsageException":{"Exception":[]},"EmptyExtensionStore":{"ExtensionStore":[]},"MergedExtension":{"Extension":[]},"Importer":{"AsyncImporter":[]},"FilesystemImporter":{"Importer":[],"AsyncImporter":[]},"BuiltInModule":{"Module":["1"]},"ForwardedModuleView":{"Module":["1"]},"ShadowedModuleView":{"Module":["1"]},"LimitedMapView":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"MergedMapView":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"PrefixedMapView":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"_PrefixedKeys":{"Iterable":["String"],"Iterable.E":"String"},"PublicMemberMapView":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"UnprefixedMapView":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"_UnprefixedKeys":{"Iterable":["String"],"Iterable.E":"String"},"SassArgumentList":{"SassList":[],"Value":[]},"SassBoolean":{"Value":[]},"SassColor":{"Value":[]},"SassFunction":{"Value":[]},"SassList":{"Value":[]},"SassMap":{"Value":[]},"_SassNull":{"Value":[]},"SassNumber":{"Value":[]},"ComplexSassNumber":{"SassNumber":[],"Value":[]},"SingleUnitSassNumber":{"SassNumber":[],"Value":[]},"UnitlessSassNumber":{"SassNumber":[],"Value":[]},"SassString":{"Value":[]},"Entry":{"Comparable":["Entry"]},"FileSpan":{"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"Chain":{"StackTrace":[]},"LazyTrace":{"Trace":[],"StackTrace":[]},"Trace":{"StackTrace":[]},"UnparsedFrame":{"Frame":[]},"StringScannerException":{"SourceSpanFormatException":[],"FormatException":[],"Exception":[]},"SupportsAnything0":{"SupportsCondition0":[],"AstNode0":[]},"Argument0":{"AstNode0":[]},"ArgumentDeclaration0":{"AstNode0":[]},"ArgumentInvocation0":{"AstNode0":[]},"SassArgumentList0":{"SassList0":[],"Value0":[]},"AsyncBuiltInCallable0":{"AsyncCallable0":[]},"_EnvironmentModule1":{"Module0":["AsyncCallable0"]},"AtRootRule0":{"Statement0":[],"AstNode0":[]},"ModifiableCssAtRule0":{"ModifiableCssParentNode0":[],"CssAtRule0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"AtRule0":{"Statement0":[],"AstNode0":[]},"AttributeSelector0":{"SimpleSelector0":[]},"BinaryOperationExpression0":{"Expression0":[],"AstNode0":[]},"BooleanExpression0":{"Expression0":[],"AstNode0":[]},"SassBoolean0":{"Value0":[]},"BuiltInCallable0":{"AsyncBuiltInCallable0":[],"AsyncCallable0":[]},"BuiltInModule0":{"Module0":["1"]},"CallableDeclaration0":{"Statement0":[],"AstNode0":[]},"ClassSelector0":{"SimpleSelector0":[]},"ColorExpression0":{"Expression0":[],"AstNode0":[]},"SassColor0":{"Value0":[]},"ModifiableCssComment0":{"ModifiableCssNode0":[],"CssComment0":[],"CssNode0":[],"AstNode0":[]},"ComplexSassNumber0":{"SassNumber0":[],"Value0":[]},"Combinator0":{"ComplexSelectorComponent0":[]},"CompoundSelector0":{"ComplexSelectorComponent0":[]},"ExplicitConfiguration0":{"Configuration0":[]},"ConfiguredVariable0":{"AstNode0":[]},"ContentBlock0":{"Statement0":[],"AstNode0":[]},"ContentRule0":{"Statement0":[],"AstNode0":[]},"DebugRule0":{"Statement0":[],"AstNode0":[]},"ModifiableCssDeclaration0":{"ModifiableCssNode0":[],"CssNode0":[],"AstNode0":[]},"Declaration0":{"Statement0":[],"AstNode0":[]},"SupportsDeclaration0":{"SupportsCondition0":[],"AstNode0":[]},"DynamicImport0":{"Import0":[],"AstNode0":[]},"EachRule0":{"Statement0":[],"AstNode0":[]},"EmptyExtensionStore0":{"ExtensionStore0":[]},"ErrorRule0":{"Statement0":[],"AstNode0":[]},"SassRuntimeException0":{"Exception":[]},"SassException0":{"Exception":[]},"MultiSpanSassException0":{"Exception":[]},"MultiSpanSassRuntimeException0":{"SassRuntimeException0":[],"Exception":[]},"SassFormatException0":{"SourceSpanFormatException":[],"FormatException":[],"Exception":[]},"ExtendRule0":{"Statement0":[],"AstNode0":[]},"FilesystemImporter0":{"AsyncImporter0":[]},"ForRule0":{"Statement0":[],"AstNode0":[]},"ForwardRule0":{"Statement0":[],"AstNode0":[]},"ForwardedModuleView0":{"Module0":["1"]},"FunctionExpression0":{"Expression0":[],"AstNode0":[]},"SupportsFunction0":{"SupportsCondition0":[],"AstNode0":[]},"SassFunction0":{"Value0":[]},"FunctionRule0":{"Statement0":[],"AstNode0":[]},"IDSelector0":{"SimpleSelector0":[]},"IfExpression0":{"Expression0":[],"AstNode0":[]},"IfRule0":{"Statement0":[],"AstNode0":[]},"ModifiableCssImport0":{"ModifiableCssNode0":[],"CssImport0":[],"CssNode0":[],"AstNode0":[]},"ImportRule0":{"Statement0":[],"AstNode0":[]},"Importer0":{"AsyncImporter0":[]},"IncludeRule0":{"Statement0":[],"AstNode0":[]},"InterpolatedFunctionExpression0":{"Expression0":[],"AstNode0":[]},"Interpolation0":{"AstNode0":[]},"SupportsInterpolation0":{"SupportsCondition0":[],"AstNode0":[]},"ModifiableCssKeyframeBlock0":{"ModifiableCssParentNode0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"LimitedMapView0":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"ListExpression0":{"Expression0":[],"AstNode0":[]},"SassList0":{"Value0":[]},"LoudComment0":{"Statement0":[],"AstNode0":[]},"MapExpression0":{"Expression0":[],"AstNode0":[]},"SassMap0":{"Value0":[]},"ModifiableCssMediaRule0":{"ModifiableCssParentNode0":[],"CssMediaRule0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"MediaRule0":{"Statement0":[],"AstNode0":[]},"MergedExtension0":{"Extension0":[]},"MergedMapView0":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"MixinRule0":{"Statement0":[],"AstNode0":[]},"_HasContentVisitor0":{"StatementSearchVisitor0":["bool"],"StatementSearchVisitor0.T":"bool"},"SupportsNegation0":{"SupportsCondition0":[],"AstNode0":[]},"_FakeAstNode0":{"AstNode0":[]},"CssNode0":{"AstNode0":[]},"CssParentNode0":{"CssNode0":[],"AstNode0":[]},"ModifiableCssNode0":{"CssNode0":[],"AstNode0":[]},"ModifiableCssParentNode0":{"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"NullExpression0":{"Expression0":[],"AstNode0":[]},"_SassNull0":{"Value0":[]},"NumberExpression0":{"Expression0":[],"AstNode0":[]},"SassNumber0":{"Value0":[]},"SupportsOperation0":{"SupportsCondition0":[],"AstNode0":[]},"ParentSelector0":{"SimpleSelector0":[]},"ParentStatement0":{"Statement0":[],"AstNode0":[]},"ParenthesizedExpression0":{"Expression0":[],"AstNode0":[]},"PlaceholderSelector0":{"SimpleSelector0":[]},"PlainCssCallable0":{"AsyncCallable0":[]},"PrefixedMapView0":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"_PrefixedKeys0":{"Iterable":["String"],"Iterable.E":"String"},"PseudoSelector0":{"SimpleSelector0":[]},"PublicMemberMapView0":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"ReturnRule0":{"Statement0":[],"AstNode0":[]},"SelectorExpression0":{"Expression0":[],"AstNode0":[]},"ShadowedModuleView0":{"Module0":["1"]},"SilentComment0":{"Statement0":[],"AstNode0":[]},"SingleUnitSassNumber0":{"SassNumber0":[],"Value0":[]},"StaticImport0":{"Import0":[],"AstNode0":[]},"StringExpression0":{"Expression0":[],"AstNode0":[]},"SassString0":{"Value0":[]},"ModifiableCssStyleRule0":{"ModifiableCssParentNode0":[],"CssStyleRule0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"StyleRule0":{"Statement0":[],"AstNode0":[]},"CssStylesheet0":{"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"ModifiableCssStylesheet0":{"ModifiableCssParentNode0":[],"CssStylesheet0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"Stylesheet0":{"Statement0":[],"AstNode0":[]},"ModifiableCssSupportsRule0":{"ModifiableCssParentNode0":[],"CssSupportsRule0":[],"ModifiableCssNode0":[],"CssParentNode0":[],"CssNode0":[],"AstNode0":[]},"SupportsRule0":{"Statement0":[],"AstNode0":[]},"TypeSelector0":{"SimpleSelector0":[]},"UnaryOperationExpression0":{"Expression0":[],"AstNode0":[]},"UnitlessSassNumber0":{"SassNumber0":[],"Value0":[]},"UniversalSelector0":{"SimpleSelector0":[]},"UnprefixedMapView0":{"MapMixin":["String","1"],"Map":["String","1"],"MapMixin.K":"String","MapMixin.V":"1"},"_UnprefixedKeys0":{"Iterable":["String"],"Iterable.E":"String"},"UseRule0":{"Statement0":[],"AstNode0":[]},"UserDefinedCallable0":{"AsyncCallable0":[]},"CssValue0":{"AstNode0":[]},"ValueExpression0":{"Expression0":[],"AstNode0":[]},"ModifiableCssValue0":{"CssValue0":["1"],"AstNode0":[]},"VariableExpression0":{"Expression0":[],"AstNode0":[]},"VariableDeclaration0":{"Statement0":[],"AstNode0":[]},"WarnRule0":{"Statement0":[],"AstNode0":[]},"WhileRule0":{"Statement0":[],"AstNode0":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Expression":{"AstNode":[]},"Import":{"AstNode":[]},"Statement":{"AstNode":[]},"SupportsCondition":{"AstNode":[]},"Callable":{"AsyncCallable":[]},"Expression0":{"AstNode0":[]},"Import0":{"AstNode0":[]},"Statement0":{"AstNode0":[]},"SupportsCondition0":{"AstNode0":[]}}'
    )
  );
  H._Universe_addErasedTypes(
    init.typeUniverse,
    JSON.parse(
      '{"ArrayIterator":1,"ListIterator":1,"MappedIterator":2,"WhereIterator":1,"ExpandIterator":2,"TakeIterator":1,"SkipIterator":1,"SkipWhileIterator":1,"EmptyIterator":1,"FollowedByIterator":1,"FixedLengthListMixin":1,"UnmodifiableListMixin":1,"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"LinkedHashMapKeyIterator":1,"NativeTypedArray":1,"_SyncStarIterator":1,"StreamTransformerBase":2,"_AsyncStreamControllerDispatch":1,"_DelayedEvent":1,"_DelayedData":1,"_PendingEvents":1,"_StreamImplEvents":1,"_StreamIterator":1,"_ZoneFunction":1,"Queue":1,"_HashMapKeyIterator":1,"_LinkedHashSetIterator":1,"IterableBase":1,"ListBase":1,"MapBase":2,"UnmodifiableMapBase":2,"_MapBaseValueIterator":2,"_UnmodifiableMapMixin":2,"MapView":2,"_ListQueueIterator":1,"_UnmodifiableSetMixin":1,"_ListBase_Object_ListMixin":1,"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":2,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"ChunkedConversionSink":1,"_StringSinkConversionSink":1,"Iterator":1,"_EventRequest":1,"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":1,"DefaultEquality":1,"IterableEquality":1,"ListEquality":1,"MapEquality":2,"_QueueList_Object_ListMixin":1,"UnmodifiableSetMixin":1,"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":1,"_DelegatingIterableBase":1,"_MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin":1,"ParentStatement":1,"ParentStatement0":1}'
    )
  );
  var string$ = {
    x0a_BUG_: '\n\nBUG: This should include a source span!',
    x0a_More:
      '\n\nMore info and automated migrator: https://sass-lang.com/d/slash-div',
    x0aRun_i: '\nRun in verbose mode to see all warnings.',
    x0aYou_m:
      '\nYou may not @extend the same selector from within different media queries.',
    x20in_in: ' in interpolation here.\nIt may end up represented as ',
    x20is_av: ' is available from multiple global modules.',
    x20is_no:
      ' is not a valid selector: it must be a string,\na list of strings, or a list of lists of strings.',
    x20must_:
      ' must not be greater than the number of characters in the file, ',
    x20repet: ' repetitive deprecation warnings omitted.',
    x20to_co: ' to color.opacity() is deprecated.\n\nRecommendation: ',
    x20was_a: ' was already loaded, so it can\'t be configured using "with".',
    x20was_n: ' was not declared with !default in the @used module.',
    x20was_p: ' was passed both by position and by name.',
    x21globa: "!global isn't allowed for variables in other modules.",
    x22x26__ma: '"&" may only used at the beginning of a compound selector.',
    x22x29__If: '").\nIf you really want to use the color value here, use \'',
    x22packa: '"package:" URLs aren\'t supported on this platform.',
    x24css_a: '$css and $module may not both be passed at once.',
    x24list1: '$list1, $list2, $separator: auto, $bracketed: auto',
    x24selec: '$selectors: At least one selector must be passed.',
    x24separ: '$separator: Must be "space", "comma", "slash", or "auto".',
    x28__isn:
      "() isn't in the sass:color module.\n\nRecommendation: color.adjust(",
    x29x0a_Mor:
      ')\n\nMore info: https://sass-lang.com/documentation/functions/color#',
    x29x20is_d: ') is deprecated.\n\nTo preserve current behavior: $',
    x29x20to_cg: ') to color.grayscale() is deprecated.\n\nRecommendation: ',
    x29x20to_ci: ') to color.invert() is deprecated.\n\nRecommendation: ',
    x2c_whici: ', which is currently (incorrectly) converted to ',
    x2c_whicw:
      ', which will likely produce invalid CSS.\nAlways quote color names when using them as strings or map keys (for example, "',
    x2e_Rela:
      '.\nRelative canonical URLs are deprecated and will eventually be disallowed.\n',
    x3d_____: '===== asynchronous gap ===========================\n',
    x40_moz_:
      '@-moz-document is deprecated and support will be removed in Dart Sass 2.0.0.\n\nFor details, see http://bit.ly/MozDocument.',
    x40conte: '@content is only allowed within mixin declarations.',
    x40elsei:
      '@elseif is deprecated and will not be supported in future Sass versions.\n\nRecommendation: @else if',
    x40exten: '@extend may only be used within style rules.',
    x40forwa: '@forward rules must be written before any other rules.',
    x40funct: '@function if($condition, $if-true, $if-false) {',
    x40use_r: '@use rules must be written before any other rules.',
    A_list:
      'A list with more than one element must have an explicit separator.',
    ABCDEF: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    As_of_R:
      "As of Dart Sass 2.0.0, !global assignments won't be able to declare new variables.\n\nRecommendation: add `",
    As_of_S:
      "As of Dart Sass 2.0.0, !global assignments won't be able to declare new variables.\n\nSince this assignment is at the root of the stylesheet, the !global flag is\nunnecessary and can safely be removed.",
    At_rul: 'At-rules may not be used within nested declarations.',
    Cannotff: 'Cannot extract a file path from a URI with a fragment component',
    Cannotfq: 'Cannot extract a file path from a URI with a query component',
    Cannotn:
      'Cannot extract a non-Windows file path from a file URI with an authority',
    Could_: 'Could not find an option with short name "-',
    CssNod: 'CssNodes must have a CssStylesheet transitive parent node.',
    Declarm: 'Declarations may only be used within style rules.',
    Declarwa: 'Declarations whose names begin with "--" may not be nested.',
    Declarwu:
      'Declarations whose names begin with "--" must have StringExpression values (was `',
    Entrie: 'Entries may not be removed from MergedMapView.',
    Error_:
      "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Evalua: 'Evaluation handles @include and its content block together.',
    Expect: 'Expected variable, mixin, or function name',
    Functi: 'Functions may not be declared in control directives.',
    HSL_pa: 'HSL parameters may not be passed along with HWB parameters.',
    If_par:
      'If parsedAsCustomProperty is true, value must contain a SassString (was `',
    In_Sas:
      'In Sass, "&&" means two copies of the parent selector. You probably want to use "and" instead.',
    Indent: 'Indenting at the beginning of the document is illegal.',
    Interpn: "Interpolation isn't allowed in namespaces.",
    Interpp: "Interpolation isn't allowed in plain CSS.",
    It_s_n: "It's not clear which file to import. Found:\n",
    May_on: 'May only contains Strings or Expressions.',
    Media_: 'Media rules may not be used within nested declarations.',
    Mixinsb: 'Mixins may not be declared in control directives.',
    Mixinscf: 'Mixins may not contain function declarations.',
    Mixinscm: 'Mixins may not contain mixin declarations.',
    Module: 'Module loop: this module is already being loaded.',
    Nested: "Nested declarations aren't allowed in plain CSS.",
    New_en: 'New entries may not be added to MergedMapView.',
    NoSour: 'NoSourceMapBuffer.buildSourceMap() is not supported.',
    Only_2: 'Only 2 slash-separated elements allowed, but ',
    Only_oa:
      'Only one argument may be passed to the plain-CSS invert() function.',
    Only_op:
      'Only one positional argument is allowed. All other arguments must be passed by name.',
    Other_: "Other modules' members can't be defined with !global.",
    Passin:
      'Passing a string to call() is deprecated and will be illegal in Dart Sass 2.0.0.\n\nRecommendation: call(get-function(',
    Placeh: "Placeholder selectors aren't allowed here.",
    Plain_: "Plain CSS functions don't support keyword arguments.",
    Positi: 'Positional arguments must come before keyword arguments.',
    Privat: "Private members can't be accessed from outside their modules.",
    RGB_pa: 'RGB parameters may not be passed along with ',
    Sass_v: "Sass variables aren't allowed in plain CSS.",
    Silent: "Silent comments aren't allowed in plain CSS.",
    Soon__: 'Soon, it will instead be correctly converted to ',
    Style_: 'Style rules may not be used within nested declarations.',
    Suppor: 'Supports rules may not be used within nested declarations.',
    The_Ex:
      'The ExtensionStore and CssStylesheet passed to cloneCssStylesheet() must come from the same compilation.',
    The_gi: 'The given LineScannerState was not returned by this LineScanner.',
    The_pa: "The parent selector isn't allowed in plain CSS.",
    The_sa: 'The same variable may only be configured once.',
    The_ta: 'The target selector was not found.\nUse "@extend ',
    There_: 'There\'s already a module with namespace "',
    This_d: 'This declaration has no argument named "$',
    This_f: "This function isn't allowed in plain CSS.",
    This_ma: 'This module and the new module both define a variable named "$',
    This_mw:
      'This module was already loaded, so it can\'t be configured using "with".',
    This_s: "This selector doesn't have any properties and won't be rendered.",
    This_v: 'This variable was not declared with !default in the @used module.',
    Top_le: 'Top-level selectors may not contain the parent selector "&".',
    Using__:
      'Using / for division is deprecated and will be removed in Dart Sass 2.0.0.\n\nRecommendation: ',
    Using_c:
      'Using color.alpha() for a Microsoft filter is deprecated.\n\nRecommendation: ',
    Variab_: 'Variable keyword argument map must have string keys.\n',
    Variabs: 'Variable keyword arguments must be a map (was ',
    You_ma: 'You may not @extend selectors across media queries.',
    You_pr: "You probably don't mean to use the color value ",
    x60_inst: '` instead.\nSee http://bit.ly/ExtendCompound for details.\n',
    addExt_: "addExtension() can't be called for a const ExtensionStore.",
    addExts: "addExtensions() can't be called for a const ExtensionStore.",
    addSel: "addSelector() can't be called for a const ExtensionStore.",
    compou: 'compound selectors may no longer be extended.\nConsider `@extend ',
    conten: 'content-exists() may only be called within a mixin.',
    curren:
      'currentCallableSpan may only be called within an active Sass callable.',
    math_d:
      'math.div() will only support number arguments in a future release.\nUse list.slash() instead for a slash separator.',
    must_b: 'must be a UniversalSelector or a TypeSelector',
    parsed:
      'parsedAsCustomProperty must be false if name doesn\'t begin with "--".',
    semico: "semicolons aren't allowed in the indented syntax.",
    throug: 'through() must return false for at least one parent of ',
    warn__:
      'warn() may only be called within a custom function or importer callback.',
  };
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      $env_1_1_String: findType('@<String>'),
      ArgParser: findType('ArgParser'),
      Argument: findType('Argument'),
      ArgumentDeclaration: findType('ArgumentDeclaration'),
      ArgumentDeclaration_2: findType('ArgumentDeclaration0'),
      Argument_2: findType('Argument0'),
      AstNode: findType('AstNode'),
      AstNode_2: findType('AstNode0'),
      AsyncBuiltInCallable: findType('AsyncBuiltInCallable'),
      AsyncBuiltInCallable_2: findType('AsyncBuiltInCallable0'),
      AsyncCallable: findType('AsyncCallable'),
      AsyncCallable_2: findType('AsyncCallable0'),
      BuiltInCallable: findType('BuiltInCallable'),
      BuiltInCallable_2: findType('BuiltInCallable0'),
      BuiltInModule_AsyncBuiltInCallable: findType(
        'BuiltInModule<AsyncBuiltInCallable>'
      ),
      BuiltInModule_AsyncBuiltInCallable_2: findType(
        'BuiltInModule0<AsyncBuiltInCallable0>'
      ),
      BuiltInModule_BuiltInCallable: findType('BuiltInModule<BuiltInCallable>'),
      Callable: findType('Callable'),
      Combinator: findType('Combinator'),
      Combinator_2: findType('Combinator0'),
      Comparable_dynamic: findType('Comparable<@>'),
      Comparable_nullable_Object: findType('Comparable<Object?>'),
      CompileResult: findType('CompileResult'),
      CompileResult_2: findType('CompileResult0'),
      ComplexSelector: findType('ComplexSelector'),
      ComplexSelectorComponent: findType('ComplexSelectorComponent'),
      ComplexSelectorComponent_2: findType('ComplexSelectorComponent0'),
      ComplexSelector_2: findType('ComplexSelector0'),
      CompoundSelector: findType('CompoundSelector'),
      CompoundSelector_2: findType('CompoundSelector0'),
      Configuration: findType('Configuration'),
      Configuration_2: findType('Configuration0'),
      ConfiguredValue: findType('ConfiguredValue'),
      ConfiguredValue_2: findType('ConfiguredValue0'),
      ConfiguredVariable: findType('ConfiguredVariable'),
      ConfiguredVariable_2: findType('ConfiguredVariable0'),
      ConstantMapView_Symbol_dynamic: findType('ConstantMapView<Symbol0,@>'),
      ConstantStringMap_String_num: findType('ConstantStringMap<String,num>'),
      CssAtRule: findType('CssAtRule'),
      CssAtRule_2: findType('CssAtRule0'),
      CssComment: findType('CssComment'),
      CssComment_2: findType('CssComment0'),
      CssImport: findType('CssImport'),
      CssImport_2: findType('CssImport0'),
      CssMediaQuery: findType('CssMediaQuery'),
      CssMediaQuery_2: findType('CssMediaQuery0'),
      CssMediaRule: findType('CssMediaRule'),
      CssMediaRule_2: findType('CssMediaRule0'),
      CssParentNode: findType('CssParentNode'),
      CssParentNode_2: findType('CssParentNode0'),
      CssStyleRule: findType('CssStyleRule'),
      CssStyleRule_2: findType('CssStyleRule0'),
      CssStylesheet: findType('CssStylesheet'),
      CssStylesheet_2: findType('CssStylesheet0'),
      CssSupportsRule: findType('CssSupportsRule'),
      CssSupportsRule_2: findType('CssSupportsRule0'),
      CssValue_List_String: findType('CssValue<List<String>>'),
      CssValue_List_String_2: findType('CssValue0<List<String>>'),
      CssValue_SelectorList: findType('CssValue<SelectorList>'),
      CssValue_SelectorList_2: findType('CssValue0<SelectorList0>'),
      CssValue_String: findType('CssValue<String>'),
      CssValue_String_2: findType('CssValue0<String>'),
      CssValue_Value: findType('CssValue<Value>'),
      CssValue_Value_2: findType('CssValue0<Value0>'),
      DateTime: findType('DateTime'),
      EfficientLengthIterable_dynamic: findType('EfficientLengthIterable<@>'),
      Error: findType('Error'),
      EvaluateResult: findType('EvaluateResult'),
      EvaluateResult_2: findType('EvaluateResult0'),
      Exception: findType('Exception'),
      Expression: findType('Expression'),
      Expression_2: findType('Expression0'),
      Extender: findType('Extender'),
      Extender_2: findType('Extender0'),
      Extension: findType('Extension'),
      Extension_2: findType('Extension0'),
      FileSpan: findType('FileSpan'),
      FormatException: findType('FormatException'),
      Frame: findType('Frame'),
      Function: findType('Function'),
      FutureOr_EvaluateResult: findType('EvaluateResult/'),
      FutureOr_EvaluateResult_2: findType('EvaluateResult0/'),
      FutureOr_Value: findType('Value/'),
      FutureOr_Value_2: findType('Value0/'),
      FutureOr_nullable_Uri: findType('Uri?/'),
      Future_dynamic: findType('Future<@>'),
      Future_void: findType('Future<~>'),
      IfClause: findType('IfClause'),
      IfClause_2: findType('IfClause0'),
      Import: findType('Import'),
      Import_2: findType('Import0'),
      ImporterResult: findType('ImporterResult'),
      ImporterResult_2: findType('ImporterResult0'),
      InternalStyle: findType('InternalStyle'),
      Interpolation: findType('Interpolation'),
      InterpolationBuffer: findType('InterpolationBuffer'),
      InterpolationBuffer_2: findType('InterpolationBuffer0'),
      Interpolation_2: findType('Interpolation0'),
      Iterable_ComplexSelectorComponent: findType(
        'Iterable<ComplexSelectorComponent>'
      ),
      Iterable_ComplexSelectorComponent_2: findType(
        'Iterable<ComplexSelectorComponent0>'
      ),
      JSArray_Argument: findType('JSArray<Argument>'),
      JSArray_Argument_2: findType('JSArray<Argument0>'),
      JSArray_AstNode: findType('JSArray<AstNode>'),
      JSArray_AstNode_2: findType('JSArray<AstNode0>'),
      JSArray_AsyncBuiltInCallable: findType('JSArray<AsyncBuiltInCallable>'),
      JSArray_AsyncBuiltInCallable_2: findType(
        'JSArray<AsyncBuiltInCallable0>'
      ),
      JSArray_AsyncCallable: findType('JSArray<AsyncCallable>'),
      JSArray_AsyncCallable_2: findType('JSArray<AsyncCallable0>'),
      JSArray_AsyncImporter: findType('JSArray<AsyncImporter>'),
      JSArray_BinaryOperator: findType('JSArray<BinaryOperator>'),
      JSArray_BinaryOperator_2: findType('JSArray<BinaryOperator0>'),
      JSArray_BuiltInCallable: findType('JSArray<BuiltInCallable>'),
      JSArray_BuiltInCallable_2: findType('JSArray<BuiltInCallable0>'),
      JSArray_Callable: findType('JSArray<Callable>'),
      JSArray_Combinator: findType('JSArray<Combinator>'),
      JSArray_Combinator_2: findType('JSArray<Combinator0>'),
      JSArray_ComplexSelector: findType('JSArray<ComplexSelector>'),
      JSArray_ComplexSelectorComponent: findType(
        'JSArray<ComplexSelectorComponent>'
      ),
      JSArray_ComplexSelectorComponent_2: findType(
        'JSArray<ComplexSelectorComponent0>'
      ),
      JSArray_ComplexSelector_2: findType('JSArray<ComplexSelector0>'),
      JSArray_ConfiguredVariable: findType('JSArray<ConfiguredVariable>'),
      JSArray_ConfiguredVariable_2: findType('JSArray<ConfiguredVariable0>'),
      JSArray_CssMediaQuery: findType('JSArray<CssMediaQuery>'),
      JSArray_CssMediaQuery_2: findType('JSArray<CssMediaQuery0>'),
      JSArray_CssNode: findType('JSArray<CssNode>'),
      JSArray_CssNode_2: findType('JSArray<CssNode0>'),
      JSArray_Entry: findType('JSArray<Entry>'),
      JSArray_Expression: findType('JSArray<Expression>'),
      JSArray_Expression_2: findType('JSArray<Expression0>'),
      JSArray_Extender: findType('JSArray<Extender>'),
      JSArray_Extender_2: findType('JSArray<Extender0>'),
      JSArray_Extension: findType('JSArray<Extension>'),
      JSArray_ExtensionStore: findType('JSArray<ExtensionStore>'),
      JSArray_ExtensionStore_2: findType('JSArray<ExtensionStore0>'),
      JSArray_Extension_2: findType('JSArray<Extension0>'),
      JSArray_ForwardRule: findType('JSArray<ForwardRule>'),
      JSArray_ForwardRule_2: findType('JSArray<ForwardRule0>'),
      JSArray_Frame: findType('JSArray<Frame>'),
      JSArray_IfClause: findType('JSArray<IfClause>'),
      JSArray_IfClause_2: findType('JSArray<IfClause0>'),
      JSArray_Import: findType('JSArray<Import>'),
      JSArray_Import_2: findType('JSArray<Import0>'),
      JSArray_Importer: findType('JSArray<Importer>'),
      JSArray_Iterable_ComplexSelectorComponent: findType(
        'JSArray<Iterable<ComplexSelectorComponent>>'
      ),
      JSArray_Iterable_ComplexSelectorComponent_2: findType(
        'JSArray<Iterable<ComplexSelectorComponent0>>'
      ),
      JSArray_JSFunction: findType('JSArray<JSFunction0>'),
      JSArray_List_ComplexSelectorComponent: findType(
        'JSArray<List<ComplexSelectorComponent>>'
      ),
      JSArray_List_ComplexSelectorComponent_2: findType(
        'JSArray<List<ComplexSelectorComponent0>>'
      ),
      JSArray_List_Extender: findType('JSArray<List<Extender>>'),
      JSArray_List_Extender_2: findType('JSArray<List<Extender0>>'),
      JSArray_List_Iterable_ComplexSelectorComponent: findType(
        'JSArray<List<Iterable<ComplexSelectorComponent>>>'
      ),
      JSArray_List_Iterable_ComplexSelectorComponent_2: findType(
        'JSArray<List<Iterable<ComplexSelectorComponent0>>>'
      ),
      JSArray_Map_String_AstNode: findType('JSArray<Map<String,AstNode>>'),
      JSArray_Map_String_AstNode_2: findType('JSArray<Map<String,AstNode0>>'),
      JSArray_Map_String_AsyncCallable: findType(
        'JSArray<Map<String,AsyncCallable>>'
      ),
      JSArray_Map_String_AsyncCallable_2: findType(
        'JSArray<Map<String,AsyncCallable0>>'
      ),
      JSArray_Map_String_Callable: findType('JSArray<Map<String,Callable>>'),
      JSArray_Map_String_Value: findType('JSArray<Map<String,Value>>'),
      JSArray_Map_String_Value_2: findType('JSArray<Map<String,Value0>>'),
      JSArray_ModifiableCssImport: findType('JSArray<ModifiableCssImport>'),
      JSArray_ModifiableCssImport_2: findType('JSArray<ModifiableCssImport0>'),
      JSArray_ModifiableCssNode: findType('JSArray<ModifiableCssNode>'),
      JSArray_ModifiableCssNode_2: findType('JSArray<ModifiableCssNode0>'),
      JSArray_ModifiableCssParentNode: findType(
        'JSArray<ModifiableCssParentNode>'
      ),
      JSArray_ModifiableCssParentNode_2: findType(
        'JSArray<ModifiableCssParentNode0>'
      ),
      JSArray_Module_AsyncCallable: findType('JSArray<Module<AsyncCallable>>'),
      JSArray_Module_AsyncCallable_2: findType(
        'JSArray<Module0<AsyncCallable0>>'
      ),
      JSArray_Module_Callable: findType('JSArray<Module<Callable>>'),
      JSArray_Object: findType('JSArray<Object>'),
      JSArray_PseudoSelector: findType('JSArray<PseudoSelector>'),
      JSArray_PseudoSelector_2: findType('JSArray<PseudoSelector0>'),
      JSArray_SassList: findType('JSArray<SassList>'),
      JSArray_SassList_2: findType('JSArray<SassList0>'),
      JSArray_SimpleSelector: findType('JSArray<SimpleSelector>'),
      JSArray_SimpleSelector_2: findType('JSArray<SimpleSelector0>'),
      JSArray_Statement: findType('JSArray<Statement>'),
      JSArray_Statement_2: findType('JSArray<Statement0>'),
      JSArray_String: findType('JSArray<String>'),
      JSArray_TargetEntry: findType('JSArray<TargetEntry>'),
      JSArray_TargetLineEntry: findType('JSArray<TargetLineEntry>'),
      JSArray_Trace: findType('JSArray<Trace>'),
      JSArray_Tuple2_Expression_Expression: findType(
        'JSArray<Tuple2<Expression,Expression>>'
      ),
      JSArray_Tuple2_Expression_Expression_2: findType(
        'JSArray<Tuple2<Expression0,Expression0>>'
      ),
      JSArray_Tuple2_String_AstNode: findType(
        'JSArray<Tuple2<String,AstNode>>'
      ),
      JSArray_Tuple2_String_AstNode_2: findType(
        'JSArray<Tuple2<String,AstNode0>>'
      ),
      JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value: findType(
        'JSArray<Tuple2<ArgumentDeclaration,Value(List<Value>)>>'
      ),
      JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2: findType(
        'JSArray<Tuple2<ArgumentDeclaration0,Value0(List<Value0>)>>'
      ),
      JSArray_Uri: findType('JSArray<Uri>'),
      JSArray_UseRule: findType('JSArray<UseRule>'),
      JSArray_UseRule_2: findType('JSArray<UseRule0>'),
      JSArray_Value: findType('JSArray<Value>'),
      JSArray_Value_2: findType('JSArray<Value0>'),
      JSArray__Highlight: findType('JSArray<_Highlight>'),
      JSArray__Line: findType('JSArray<_Line>'),
      JSArray_bool: findType('JSArray<bool>'),
      JSArray_dynamic: findType('JSArray<@>'),
      JSArray_int: findType('JSArray<int>'),
      JSArray_nullable_String: findType('JSArray<String?>'),
      JSFunction: findType('JSFunction0'),
      JSNull: findType('JSNull'),
      JavaScriptFunction: findType('JavaScriptFunction'),
      JavaScriptIndexingBehavior_dynamic: findType(
        'JavaScriptIndexingBehavior<@>'
      ),
      JsLinkedHashMap_Symbol_dynamic: findType('JsLinkedHashMap<Symbol0,@>'),
      JsSystemError: findType('JsSystemError'),
      LimitedMapView_String_ConfiguredValue: findType(
        'LimitedMapView<String,ConfiguredValue>'
      ),
      LimitedMapView_String_ConfiguredValue_2: findType(
        'LimitedMapView0<String,ConfiguredValue0>'
      ),
      List_ComplexSelector: findType('List<ComplexSelector>'),
      List_ComplexSelectorComponent: findType('List<ComplexSelectorComponent>'),
      List_ComplexSelectorComponent_2: findType(
        'List<ComplexSelectorComponent0>'
      ),
      List_ComplexSelector_2: findType('List<ComplexSelector0>'),
      List_CssMediaQuery: findType('List<CssMediaQuery>'),
      List_CssMediaQuery_2: findType('List<CssMediaQuery0>'),
      List_Extension: findType('List<Extension0>'),
      List_ExtensionStore: findType('List<ExtensionStore>'),
      List_ExtensionStore_2: findType('List<ExtensionStore0>'),
      List_Extension_2: findType('List<Extension>'),
      List_List_ComplexSelectorComponent: findType(
        'List<List<ComplexSelectorComponent>>'
      ),
      List_List_ComplexSelectorComponent_2: findType(
        'List<List<ComplexSelectorComponent0>>'
      ),
      List_Module_AsyncCallable: findType('List<Module<AsyncCallable>>'),
      List_Module_AsyncCallable_2: findType('List<Module0<AsyncCallable0>>'),
      List_Module_Callable: findType('List<Module<Callable>>'),
      List_String: findType('List<String>'),
      List_Value: findType('List<Value>'),
      List_Value_2: findType('List<Value0>'),
      List_dynamic: findType('List<@>'),
      List_int: findType('List<int>'),
      List_nullable_Object: findType('List<Object?>'),
      MapKeySet_Module_AsyncCallable: findType(
        'MapKeySet<Module<AsyncCallable>>'
      ),
      MapKeySet_Module_AsyncCallable_2: findType(
        'MapKeySet<Module0<AsyncCallable0>>'
      ),
      MapKeySet_Module_Callable: findType('MapKeySet<Module<Callable>>'),
      MapKeySet_SimpleSelector: findType('MapKeySet<SimpleSelector>'),
      MapKeySet_SimpleSelector_2: findType('MapKeySet<SimpleSelector0>'),
      MapKeySet_String: findType('MapKeySet<String>'),
      MapKeySet_nullable_Object: findType('MapKeySet<Object?>'),
      Map_ComplexSelector_Extension: findType('Map<ComplexSelector,Extension>'),
      Map_ComplexSelector_Extension_2: findType(
        'Map<ComplexSelector0,Extension0>'
      ),
      Map_String_AstNode: findType('Map<String,AstNode>'),
      Map_String_AstNode_2: findType('Map<String,AstNode0>'),
      Map_String_AsyncCallable: findType('Map<String,AsyncCallable>'),
      Map_String_AsyncCallable_2: findType('Map<String,AsyncCallable0>'),
      Map_String_Callable: findType('Map<String,Callable>'),
      Map_String_Value: findType('Map<String,Value>'),
      Map_String_Value_2: findType('Map<String,Value0>'),
      Map_dynamic_dynamic: findType('Map<@,@>'),
      MappedIterable_String_Frame: findType('MappedIterable<String,Frame>'),
      MappedListIterable_Frame_Frame: findType(
        'MappedListIterable<Frame,Frame>'
      ),
      MappedListIterable_String_String: findType(
        'MappedListIterable<String,String>'
      ),
      MappedListIterable_String_Trace: findType(
        'MappedListIterable<String,Trace>'
      ),
      MappedListIterable_String_dynamic: findType(
        'MappedListIterable<String,@>'
      ),
      MediaQuerySuccessfulMergeResult: findType(
        'MediaQuerySuccessfulMergeResult'
      ),
      MediaQuerySuccessfulMergeResult_2: findType(
        'MediaQuerySuccessfulMergeResult0'
      ),
      MixinRule: findType('MixinRule'),
      MixinRule_2: findType('MixinRule0'),
      ModifiableCssAtRule: findType('ModifiableCssAtRule'),
      ModifiableCssAtRule_2: findType('ModifiableCssAtRule0'),
      ModifiableCssKeyframeBlock: findType('ModifiableCssKeyframeBlock'),
      ModifiableCssKeyframeBlock_2: findType('ModifiableCssKeyframeBlock0'),
      ModifiableCssMediaRule: findType('ModifiableCssMediaRule'),
      ModifiableCssMediaRule_2: findType('ModifiableCssMediaRule0'),
      ModifiableCssNode: findType('ModifiableCssNode'),
      ModifiableCssNode_2: findType('ModifiableCssNode0'),
      ModifiableCssParentNode: findType('ModifiableCssParentNode'),
      ModifiableCssParentNode_2: findType('ModifiableCssParentNode0'),
      ModifiableCssStyleRule: findType('ModifiableCssStyleRule'),
      ModifiableCssStyleRule_2: findType('ModifiableCssStyleRule0'),
      ModifiableCssSupportsRule: findType('ModifiableCssSupportsRule'),
      ModifiableCssSupportsRule_2: findType('ModifiableCssSupportsRule0'),
      ModifiableCssValue_SelectorList: findType(
        'ModifiableCssValue<SelectorList>'
      ),
      ModifiableCssValue_SelectorList_2: findType(
        'ModifiableCssValue0<SelectorList0>'
      ),
      Module_AsyncCallable: findType('Module<AsyncCallable>'),
      Module_AsyncCallable_2: findType('Module0<AsyncCallable0>'),
      Module_Callable: findType('Module<Callable>'),
      NativeTypedArrayOfDouble: findType('NativeTypedArrayOfDouble'),
      NativeTypedArrayOfInt: findType('NativeTypedArrayOfInt'),
      NativeUint8List: findType('NativeUint8List'),
      NodeImporterResult: findType('NodeImporterResult0'),
      Null: findType('Null'),
      Object: findType('Object'),
      Option: findType('Option'),
      ParentSelector: findType('ParentSelector'),
      ParentSelector_2: findType('ParentSelector0'),
      PathMap_String: findType('PathMap<String>'),
      PathMap_nullable_String: findType('PathMap<String?>'),
      PseudoSelector: findType('PseudoSelector'),
      PseudoSelector_2: findType('PseudoSelector0'),
      RangeError: findType('RangeError'),
      RegExpMatch: findType('RegExpMatch'),
      RenderContextOptions: findType('RenderContextOptions0'),
      RenderResult: findType('RenderResult'),
      Result_String: findType('Result<String>'),
      ReversedListIterable_Combinator: findType(
        'ReversedListIterable<Combinator>'
      ),
      ReversedListIterable_Combinator_2: findType(
        'ReversedListIterable<Combinator0>'
      ),
      SassArgumentList: findType('SassArgumentList'),
      SassArgumentList_2: findType('SassArgumentList0'),
      SassBoolean: findType('SassBoolean'),
      SassBoolean_2: findType('SassBoolean0'),
      SassColor: findType('SassColor'),
      SassColor_2: findType('SassColor0'),
      SassList: findType('SassList'),
      SassList_2: findType('SassList0'),
      SassMap: findType('SassMap'),
      SassMap_2: findType('SassMap0'),
      SassNumber: findType('SassNumber'),
      SassNumber_2: findType('SassNumber0'),
      SassRuntimeException: findType('SassRuntimeException'),
      SassRuntimeException_2: findType('SassRuntimeException0'),
      SassString: findType('SassString'),
      SassString_2: findType('SassString0'),
      SelectorList: findType('SelectorList'),
      SelectorList_2: findType('SelectorList0'),
      Set_ModifiableCssValue_SelectorList: findType(
        'Set<ModifiableCssValue<SelectorList>>'
      ),
      Set_ModifiableCssValue_SelectorList_2: findType(
        'Set<ModifiableCssValue0<SelectorList0>>'
      ),
      SimpleSelector: findType('SimpleSelector'),
      SimpleSelector_2: findType('SimpleSelector0'),
      SourceFile: findType('SourceFile'),
      SourceLocation: findType('SourceLocation'),
      SourceSpan: findType('SourceSpan'),
      SourceSpanFormatException: findType('SourceSpanFormatException'),
      SourceSpanWithContext: findType('SourceSpanWithContext'),
      StackTrace: findType('StackTrace'),
      Statement: findType('Statement'),
      Statement_2: findType('Statement0'),
      StaticImport: findType('StaticImport'),
      StaticImport_2: findType('StaticImport0'),
      StreamQueue_String: findType('StreamQueue<String>'),
      String: findType('String'),
      StylesheetNode: findType('StylesheetNode'),
      Timer: findType('Timer'),
      Trace: findType('Trace'),
      Tuple2_Expression_Expression: findType('Tuple2<Expression,Expression>'),
      Tuple2_Expression_Expression_2: findType(
        'Tuple2<Expression0,Expression0>'
      ),
      Tuple2_ModifiableCssStylesheet_ExtensionStore: findType(
        'Tuple2<ModifiableCssStylesheet,ExtensionStore>'
      ),
      Tuple2_SassNumber_SassNumber: findType('Tuple2<SassNumber,SassNumber>'),
      Tuple2_SassNumber_SassNumber_2: findType(
        'Tuple2<SassNumber0,SassNumber0>'
      ),
      Tuple2_String_ArgumentDeclaration: findType(
        'Tuple2<String,ArgumentDeclaration0>'
      ),
      Tuple2_String_AstNode: findType('Tuple2<String,AstNode>'),
      Tuple2_String_AstNode_2: findType('Tuple2<String,AstNode0>'),
      Tuple2_String_SourceSpan: findType('Tuple2<String,SourceSpan>'),
      Tuple2_String_String: findType('Tuple2<String,String>'),
      Tuple2_Uri_bool: findType('Tuple2<Uri,bool>'),
      Tuple2_of_ArgumentDeclaration_and_FutureOr_Value_Function_List_Value: findType(
        'Tuple2<ArgumentDeclaration,Value/(List<Value>)>'
      ),
      Tuple2_of_ArgumentDeclaration_and_FutureOr_Value_Function_List_Value_2: findType(
        'Tuple2<ArgumentDeclaration0,Value0/(List<Value0>)>'
      ),
      Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value: findType(
        'Tuple2<ArgumentDeclaration,Value(List<Value>)>'
      ),
      Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value_2: findType(
        'Tuple2<ArgumentDeclaration0,Value0(List<Value0>)>'
      ),
      Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList: findType(
        'Tuple2<ExtensionStore,Map<CssValue<SelectorList>,ModifiableCssValue<SelectorList>>>'
      ),
      Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList_2: findType(
        'Tuple2<ExtensionStore0,Map<CssValue0<SelectorList0>,ModifiableCssValue0<SelectorList0>>>'
      ),
      Tuple2_of_List_Expression_and_Map_String_Expression: findType(
        'Tuple2<List<Expression>,Map<String,Expression>>'
      ),
      Tuple2_of_List_Expression_and_Map_String_Expression_2: findType(
        'Tuple2<List<Expression0>,Map<String,Expression0>>'
      ),
      Tuple2_of_List_Uri_and_List_Uri: findType('Tuple2<List<Uri>,List<Uri>>'),
      Tuple2_of_Map_of_Uri_and_nullable_StylesheetNode_and_Map_of_Uri_and_nullable_StylesheetNode: findType(
        'Tuple2<Map<Uri,StylesheetNode?>,Map<Uri,StylesheetNode?>>'
      ),
      Tuple2_of_Set_String_and_Set_String: findType(
        'Tuple2<Set<String>,Set<String>>'
      ),
      Tuple2_of_nullable_SupportsCondition_and_nullable_Interpolation: findType(
        'Tuple2<SupportsCondition?,Interpolation?>'
      ),
      Tuple2_of_nullable_SupportsCondition_and_nullable_Interpolation_2: findType(
        'Tuple2<SupportsCondition0?,Interpolation0?>'
      ),
      Tuple3_AsyncImporter_Uri_Uri: findType('Tuple3<AsyncImporter,Uri,Uri>'),
      Tuple3_AsyncImporter_Uri_Uri_2: findType(
        'Tuple3<AsyncImporter0,Uri,Uri>'
      ),
      Tuple3_Importer_Uri_Uri: findType('Tuple3<Importer,Uri,Uri>'),
      TypeError: findType('TypeError'),
      Uint8List: findType('Uint8List'),
      UnknownJavaScriptObject: findType('UnknownJavaScriptObject'),
      UnmodifiableListView_CssNode: findType('UnmodifiableListView<CssNode>'),
      UnmodifiableListView_CssNode_2: findType(
        'UnmodifiableListView<CssNode0>'
      ),
      UnmodifiableListView_ForwardRule: findType(
        'UnmodifiableListView<ForwardRule>'
      ),
      UnmodifiableListView_ForwardRule_2: findType(
        'UnmodifiableListView<ForwardRule0>'
      ),
      UnmodifiableListView_ModifiableCssNode: findType(
        'UnmodifiableListView<ModifiableCssNode>'
      ),
      UnmodifiableListView_ModifiableCssNode_2: findType(
        'UnmodifiableListView<ModifiableCssNode0>'
      ),
      UnmodifiableListView_String: findType('UnmodifiableListView<String>'),
      UnmodifiableListView_UseRule: findType('UnmodifiableListView<UseRule>'),
      UnmodifiableListView_UseRule_2: findType(
        'UnmodifiableListView<UseRule0>'
      ),
      UnmodifiableMapView_String_ArgParser: findType(
        'UnmodifiableMapView<String,ArgParser>'
      ),
      UnmodifiableMapView_String_ConfiguredValue: findType(
        'UnmodifiableMapView<String,ConfiguredValue>'
      ),
      UnmodifiableMapView_String_ConfiguredValue_2: findType(
        'UnmodifiableMapView<String,ConfiguredValue0>'
      ),
      UnmodifiableMapView_String_Option: findType(
        'UnmodifiableMapView<String,Option>'
      ),
      UnmodifiableMapView_String_Value: findType(
        'UnmodifiableMapView<String,Value>'
      ),
      UnmodifiableMapView_String_Value_2: findType(
        'UnmodifiableMapView<String,Value0>'
      ),
      UnmodifiableMapView_of_Uri_and_nullable_StylesheetNode: findType(
        'UnmodifiableMapView<Uri,StylesheetNode?>'
      ),
      UnmodifiableMapView_of_nullable_String_and_String: findType(
        'UnmodifiableMapView<String?,String>'
      ),
      UnmodifiableMapView_of_nullable_String_and_nullable_String: findType(
        'UnmodifiableMapView<String?,String?>'
      ),
      UnmodifiableSetView_String: findType('UnmodifiableSetView<String>'),
      UnprefixedMapView_ConfiguredValue: findType(
        'UnprefixedMapView<ConfiguredValue>'
      ),
      UnprefixedMapView_ConfiguredValue_2: findType(
        'UnprefixedMapView0<ConfiguredValue0>'
      ),
      Uri: findType('Uri'),
      UseRule: findType('UseRule'),
      UserDefinedCallable_AsyncEnvironment: findType(
        'UserDefinedCallable<AsyncEnvironment>'
      ),
      UserDefinedCallable_AsyncEnvironment_2: findType(
        'UserDefinedCallable0<AsyncEnvironment0>'
      ),
      UserDefinedCallable_Environment: findType(
        'UserDefinedCallable<Environment>'
      ),
      Value: findType('Value'),
      Value_2: findType('Value0'),
      Value_Function_List_Value: findType('Value(List<Value>)'),
      Value_Function_List_Value_2: findType('Value0(List<Value0>)'),
      VariableDeclaration: findType('VariableDeclaration'),
      VariableDeclaration_2: findType('VariableDeclaration0'),
      WhereIterable_List_Iterable_ComplexSelectorComponent: findType(
        'WhereIterable<List<Iterable<ComplexSelectorComponent>>>'
      ),
      WhereIterable_List_Iterable_ComplexSelectorComponent_2: findType(
        'WhereIterable<List<Iterable<ComplexSelectorComponent0>>>'
      ),
      WhereIterable_String: findType('WhereIterable<String>'),
      WhereTypeIterable_PseudoSelector: findType(
        'WhereTypeIterable<PseudoSelector>'
      ),
      WhereTypeIterable_PseudoSelector_2: findType(
        'WhereTypeIterable<PseudoSelector0>'
      ),
      WhereTypeIterable_String: findType('WhereTypeIterable<String>'),
      _ArgumentResults: findType('_ArgumentResults0'),
      _ArgumentResults_2: findType('_ArgumentResults1'),
      _AsyncCompleter_Object: findType('_AsyncCompleter<Object>'),
      _AsyncCompleter_String: findType('_AsyncCompleter<String>'),
      _AsyncCompleter_nullable_Object: findType('_AsyncCompleter<Object?>'),
      _EventRequest_dynamic: findType('_EventRequest<@>'),
      _Future_Null: findType('_Future<Null>'),
      _Future_Object: findType('_Future<Object>'),
      _Future_String: findType('_Future<String>'),
      _Future_bool: findType('_Future<bool>'),
      _Future_dynamic: findType('_Future<@>'),
      _Future_int: findType('_Future<int>'),
      _Future_nullable_Object: findType('_Future<Object?>'),
      _Future_void: findType('_Future<~>'),
      _Highlight: findType('_Highlight'),
      _LinkedIdentityHashSet_ComplexSelector: findType(
        '_LinkedIdentityHashSet<ComplexSelector>'
      ),
      _LinkedIdentityHashSet_ComplexSelector_2: findType(
        '_LinkedIdentityHashSet<ComplexSelector0>'
      ),
      _LinkedIdentityHashSet_Extension: findType(
        '_LinkedIdentityHashSet<Extension>'
      ),
      _LinkedIdentityHashSet_Extension_2: findType(
        '_LinkedIdentityHashSet<Extension0>'
      ),
      _LoadedStylesheet: findType('_LoadedStylesheet0'),
      _LoadedStylesheet_2: findType('_LoadedStylesheet1'),
      _MapEntry: findType('_MapEntry'),
      bool: findType('bool'),
      double: findType('double'),
      dynamic: findType('@'),
      dynamic_Function: findType('@()'),
      dynamic_Function_Object: findType('@(Object)'),
      dynamic_Function_Object_StackTrace: findType('@(Object,StackTrace)'),
      int: findType('int'),
      legacy_Never: findType('0&*'),
      legacy_Object: findType('Object*'),
      nullable_AstNode: findType('AstNode?'),
      nullable_AstNode_2: findType('AstNode0?'),
      nullable_FileSpan: findType('FileSpan?'),
      nullable_Future_Null: findType('Future<Null>?'),
      nullable_List_ComplexSelector: findType('List<ComplexSelector>?'),
      nullable_List_ComplexSelector_2: findType('List<ComplexSelector0>?'),
      nullable_NodeImporterResult: findType('NodeImporterResult0?'),
      nullable_Object: findType('Object?'),
      nullable_SourceFile: findType('SourceFile?'),
      nullable_String: findType('String?'),
      nullable_Stylesheet: findType('Stylesheet?'),
      nullable_StylesheetNode: findType('StylesheetNode?'),
      nullable_Stylesheet_2: findType('Stylesheet0?'),
      nullable_Tuple3_AsyncImporter_Uri_Uri: findType(
        'Tuple3<AsyncImporter,Uri,Uri>?'
      ),
      nullable_Tuple3_AsyncImporter_Uri_Uri_2: findType(
        'Tuple3<AsyncImporter0,Uri,Uri>?'
      ),
      nullable_Tuple3_Importer_Uri_Uri: findType('Tuple3<Importer,Uri,Uri>?'),
      nullable_Uri: findType('Uri?'),
      nullable_Value: findType('Value?'),
      nullable_Value_2: findType('Value0?'),
      nullable__Highlight: findType('_Highlight?'),
      nullable__LoadedStylesheet: findType('_LoadedStylesheet0?'),
      nullable__LoadedStylesheet_2: findType('_LoadedStylesheet1?'),
      num: findType('num'),
      void: findType('~'),
      void_Function_Object: findType('~(Object)'),
      void_Function_Object_StackTrace: findType('~(Object,StackTrace)'),
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiEncoder_127 = new P.AsciiEncoder(127);
    C.C_EmptyUnmodifiableSet1 = new O.EmptyUnmodifiableSet(
      H.findType('EmptyUnmodifiableSet<String>')
    );
    C.AtRootQuery_UsS = new V.AtRootQuery(
      false,
      C.C_EmptyUnmodifiableSet1,
      false,
      true
    );
    C.AtRootQuery_UsS0 = new V.AtRootQuery0(
      false,
      C.C_EmptyUnmodifiableSet1,
      false,
      true
    );
    C.AttributeOperator_4L5 = new N.AttributeOperator('^=');
    C.AttributeOperator_4L50 = new N.AttributeOperator0('^=');
    C.AttributeOperator_AuK = new N.AttributeOperator('|=');
    C.AttributeOperator_AuK0 = new N.AttributeOperator0('|=');
    C.AttributeOperator_fz1 = new N.AttributeOperator('~=');
    C.AttributeOperator_fz10 = new N.AttributeOperator0('~=');
    C.AttributeOperator_gqZ = new N.AttributeOperator('*=');
    C.AttributeOperator_gqZ0 = new N.AttributeOperator0('*=');
    C.AttributeOperator_mOX = new N.AttributeOperator('$=');
    C.AttributeOperator_mOX0 = new N.AttributeOperator0('$=');
    C.AttributeOperator_sEs = new N.AttributeOperator('=');
    C.AttributeOperator_sEs0 = new N.AttributeOperator0('=');
    C.BinaryOperator_1da = new V.BinaryOperator(
      'greater than or equals',
      '>=',
      4
    );
    C.BinaryOperator_1da0 = new V.BinaryOperator0(
      'greater than or equals',
      '>=',
      4
    );
    C.BinaryOperator_2ad = new V.BinaryOperator('modulo', '%', 6);
    C.BinaryOperator_2ad0 = new V.BinaryOperator0('modulo', '%', 6);
    C.BinaryOperator_33h = new V.BinaryOperator('less than or equals', '<=', 4);
    C.BinaryOperator_33h0 = new V.BinaryOperator0(
      'less than or equals',
      '<=',
      4
    );
    C.BinaryOperator_8qt = new V.BinaryOperator('less than', '<', 4);
    C.BinaryOperator_8qt0 = new V.BinaryOperator0('less than', '<', 4);
    C.BinaryOperator_AcR = new V.BinaryOperator('greater than', '>', 4);
    C.BinaryOperator_AcR0 = new V.BinaryOperator('plus', '+', 5);
    C.BinaryOperator_AcR1 = new V.BinaryOperator0('greater than', '>', 4);
    C.BinaryOperator_AcR2 = new V.BinaryOperator0('plus', '+', 5);
    C.BinaryOperator_O1M = new V.BinaryOperator('times', '*', 6);
    C.BinaryOperator_O1M0 = new V.BinaryOperator0('times', '*', 6);
    C.BinaryOperator_RTB = new V.BinaryOperator('divided by', '/', 6);
    C.BinaryOperator_RTB0 = new V.BinaryOperator0('divided by', '/', 6);
    C.BinaryOperator_YlX = new V.BinaryOperator('equals', '==', 3);
    C.BinaryOperator_YlX0 = new V.BinaryOperator0('equals', '==', 3);
    C.BinaryOperator_and_and_2 = new V.BinaryOperator('and', 'and', 2);
    C.BinaryOperator_and_and_20 = new V.BinaryOperator0('and', 'and', 2);
    C.BinaryOperator_i5H = new V.BinaryOperator('not equals', '!=', 3);
    C.BinaryOperator_i5H0 = new V.BinaryOperator0('not equals', '!=', 3);
    C.BinaryOperator_iyO = new V.BinaryOperator('minus', '-', 5);
    C.BinaryOperator_iyO0 = new V.BinaryOperator0('minus', '-', 5);
    C.BinaryOperator_kjl = new V.BinaryOperator('single equals', '=', 0);
    C.BinaryOperator_kjl0 = new V.BinaryOperator0('single equals', '=', 0);
    C.BinaryOperator_or_or_1 = new V.BinaryOperator('or', 'or', 1);
    C.BinaryOperator_or_or_10 = new V.BinaryOperator0('or', 'or', 1);
    C.CONSTANT = new H.Instantiation1(
      P.math0__max$closure(),
      H.findType('Instantiation1<int>')
    );
    C.C_AsciiCodec = new P.AsciiCodec();
    C.C_AsciiGlyphSet = new A.AsciiGlyphSet();
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_DefaultEquality = new U.DefaultEquality();
    C.C_EmptyExtensionStore = new F.EmptyExtensionStore();
    C.C_EmptyExtensionStore0 = new F.EmptyExtensionStore0();
    C.C_EmptyIterator = new H.EmptyIterator();
    C.C_EmptyUnmodifiableSet = new O.EmptyUnmodifiableSet(
      H.findType('EmptyUnmodifiableSet<SimpleSelector>')
    );
    C.C_EmptyUnmodifiableSet0 = new O.EmptyUnmodifiableSet(
      H.findType('EmptyUnmodifiableSet<SimpleSelector0>')
    );
    C.C_IterableEquality = new U.IterableEquality();
    C.C_JS_CONST = function getTagFallback(o) {
      var s = Object.prototype.toString.call(o);
      return s.substring(8, s.length - 1);
    };
    C.C_JS_CONST0 = function () {
      var toStringFunction = Object.prototype.toString;
      function getTag(o) {
        var s = toStringFunction.call(o);
        return s.substring(8, s.length - 1);
      }
      function getUnknownTag(object, tag) {
        if (/^HTML[A-Z].*Element$/.test(tag)) {
          var name = toStringFunction.call(object);
          if (name == '[object Object]') return null;
          return 'HTMLElement';
        }
      }
      function getUnknownTagGenericBrowser(object, tag) {
        if (self.HTMLElement && object instanceof HTMLElement)
          return 'HTMLElement';
        return getUnknownTag(object, tag);
      }
      function prototypeForTag(tag) {
        if (typeof window == 'undefined') return null;
        if (typeof window[tag] == 'undefined') return null;
        var constructor = window[tag];
        if (typeof constructor != 'function') return null;
        return constructor.prototype;
      }
      function discriminator(tag) {
        return null;
      }
      var isBrowser = typeof navigator == 'object';
      return {
        getTag: getTag,
        getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
        prototypeForTag: prototypeForTag,
        discriminator: discriminator,
      };
    };
    C.C_JS_CONST6 = function (getTagFallback) {
      return function (hooks) {
        if (typeof navigator != 'object') return hooks;
        var ua = navigator.userAgent;
        if (ua.indexOf('DumpRenderTree') >= 0) return hooks;
        if (ua.indexOf('Chrome') >= 0) {
          function confirm(p) {
            return (
              typeof window == 'object' && window[p] && window[p].name == p
            );
          }
          if (confirm('Window') && confirm('HTMLElement')) return hooks;
        }
        hooks.getTag = getTagFallback;
      };
    };
    C.C_JS_CONST1 = function (hooks) {
      if (typeof dartExperimentalFixupGetTag != 'function') return hooks;
      hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
    };
    C.C_JS_CONST2 = function (hooks) {
      var getTag = hooks.getTag;
      var prototypeForTag = hooks.prototypeForTag;
      function getTagFixed(o) {
        var tag = getTag(o);
        if (tag == 'Document') {
          if (!!o.xmlVersion) return '!Document';
          return '!HTMLDocument';
        }
        return tag;
      }
      function prototypeForTagFixed(tag) {
        if (tag == 'Document') return null;
        return prototypeForTag(tag);
      }
      hooks.getTag = getTagFixed;
      hooks.prototypeForTag = prototypeForTagFixed;
    };
    C.C_JS_CONST5 = function (hooks) {
      var userAgent = typeof navigator == 'object' ? navigator.userAgent : '';
      if (userAgent.indexOf('Firefox') == -1) return hooks;
      var getTag = hooks.getTag;
      var quickMap = {
        BeforeUnloadEvent: 'Event',
        DataTransfer: 'Clipboard',
        GeoGeolocation: 'Geolocation',
        Location: '!Location',
        WorkerMessageEvent: 'MessageEvent',
        XMLDocument: '!Document',
      };
      function getTagFirefox(o) {
        var tag = getTag(o);
        return quickMap[tag] || tag;
      }
      hooks.getTag = getTagFirefox;
    };
    C.C_JS_CONST4 = function (hooks) {
      var userAgent = typeof navigator == 'object' ? navigator.userAgent : '';
      if (userAgent.indexOf('Trident/') == -1) return hooks;
      var getTag = hooks.getTag;
      var quickMap = {
        BeforeUnloadEvent: 'Event',
        DataTransfer: 'Clipboard',
        HTMLDDElement: 'HTMLElement',
        HTMLDTElement: 'HTMLElement',
        HTMLPhraseElement: 'HTMLElement',
        Position: 'Geoposition',
      };
      function getTagIE(o) {
        var tag = getTag(o);
        var newTag = quickMap[tag];
        if (newTag) return newTag;
        if (tag == 'Object') {
          if (window.DataView && o instanceof window.DataView)
            return 'DataView';
        }
        return tag;
      }
      function prototypeForTagIE(tag) {
        var constructor = window[tag];
        if (constructor == null) return null;
        return constructor.prototype;
      }
      hooks.getTag = getTagIE;
      hooks.prototypeForTag = prototypeForTagIE;
    };
    C.C_JS_CONST3 = function (hooks) {
      return hooks;
    };
    C.C_JsonCodec = new P.JsonCodec();
    C.C_LineFeed = new N.LineFeed();
    C.C_ListEquality0 = new U.ListEquality();
    C.C_ListEquality = new U.ListEquality();
    C.C_MapEquality = new U.MapEquality();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_StderrLogger = new S.StderrLogger0();
    C.C_UnicodeGlyphSet = new K.UnicodeGlyphSet();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__HasContentVisitor = new T._HasContentVisitor();
    C.C__HasContentVisitor0 = new T._HasContentVisitor0();
    C.C__JSRandom = new P._JSRandom();
    C.C__Required = new H._Required();
    C.C__RootZone = new P._RootZone();
    C.C__SassNull0 = new O._SassNull();
    C.C__SassNull = new O._SassNull0();
    C.Combinator_CzM = new S.Combinator('~');
    C.Combinator_CzM0 = new S.Combinator0('~');
    C.Combinator_sgq = new S.Combinator('>');
    C.Combinator_sgq0 = new S.Combinator0('>');
    C.Combinator_uzg = new S.Combinator('+');
    C.Combinator_uzg0 = new S.Combinator0('+');
    C.List_empty = H._setArrayType(makeConstList([]), type$.JSArray_String);
    C.Map_empty10 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,ConfiguredValue>')
    );
    C.Configuration_Map_empty = new A.Configuration(C.Map_empty10);
    C.Map_empty11 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,ConfiguredValue0>')
    );
    C.Configuration_Map_empty0 = new A.Configuration0(C.Map_empty11);
    C.Duration_0 = new P.Duration(0);
    C.ExtendMode_allTargets = new L.ExtendMode('allTargets');
    C.ExtendMode_allTargets0 = new L.ExtendMode0('allTargets');
    C.ExtendMode_normal = new L.ExtendMode('normal');
    C.ExtendMode_normal0 = new L.ExtendMode0('normal');
    C.ExtendMode_replace = new L.ExtendMode('replace');
    C.ExtendMode_replace0 = new L.ExtendMode0('replace');
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.LineFeed_D6m = new N.LineFeed0('lf', '\n');
    C.LineFeed_Mss = new N.LineFeed0('crlf', '\r\n');
    C.LineFeed_a1Y = new N.LineFeed0('lfcr', '\n\r');
    C.LineFeed_kMT = new N.LineFeed0('cr', '\r');
    C.ListSeparator_1gm = new D.ListSeparator('slash', '/');
    C.ListSeparator_1gm0 = new D.ListSeparator0('slash', '/');
    C.ListSeparator_kWM = new D.ListSeparator('comma', ',');
    C.ListSeparator_kWM0 = new D.ListSeparator0('comma', ',');
    C.ListSeparator_undecided_null = new D.ListSeparator('undecided', null);
    C.ListSeparator_undecided_null0 = new D.ListSeparator0('undecided', null);
    C.ListSeparator_woc = new D.ListSeparator('space', ' ');
    C.ListSeparator_woc0 = new D.ListSeparator0('space', ' ');
    C.List_2Vk = H._setArrayType(
      makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]),
      type$.JSArray_int
    );
    C.List_CVk = H._setArrayType(
      makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_JYB = H._setArrayType(
      makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]),
      type$.JSArray_int
    );
    C.List_empty8 = H._setArrayType(makeConstList([]), type$.JSArray_Argument);
    C.List_empty18 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Argument_2
    );
    C.List_empty19 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_AsyncCallable_2
    );
    C.List_empty15 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<AsyncImporter0>')
    );
    C.List_empty4 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_ComplexSelector
    );
    C.List_empty13 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_ComplexSelector_2
    );
    C.List_empty6 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_ConfiguredVariable
    );
    C.List_empty16 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_ConfiguredVariable_2
    );
    C.List_empty0 = H._setArrayType(makeConstList([]), type$.JSArray_CssNode);
    C.List_empty10 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_CssNode_2
    );
    C.List_empty7 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Expression
    );
    C.List_empty17 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Expression_2
    );
    C.List_empty2 = H._setArrayType(makeConstList([]), type$.JSArray_Extension);
    C.List_empty11 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Extension_2
    );
    C.List_empty3 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<Module<0&>>')
    );
    C.List_empty12 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<Module0<0&>>')
    );
    C.List_empty9 = H._setArrayType(makeConstList([]), type$.JSArray_Statement);
    C.List_empty5 = H._setArrayType(makeConstList([]), type$.JSArray_Value);
    C.List_empty14 = H._setArrayType(makeConstList([]), type$.JSArray_Value_2);
    C.List_empty1 = H._setArrayType(makeConstList([]), type$.JSArray_int);
    C.List_empty20 = H._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    C.List_gRj = H._setArrayType(
      makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_nxB = H._setArrayType(
      makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_qFt = H._setArrayType(
      makeConstList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767]),
      type$.JSArray_int
    );
    C.List_qNA = H._setArrayType(
      makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_qg40 = H._setArrayType(
      makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_qg4 = H._setArrayType(
      makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]),
      type$.JSArray_int
    );
    C.List_K2O = H._setArrayType(
      makeConstList([
        'in',
        'cm',
        'pc',
        'mm',
        'q',
        'pt',
        'px',
        'deg',
        'grad',
        'rad',
        'turn',
        's',
        'ms',
        'Hz',
        'kHz',
        'dpi',
        'dpcm',
        'dppx',
      ]),
      type$.JSArray_String
    );
    C.List_aha = H._setArrayType(
      makeConstList(['in', 'cm', 'pc', 'mm', 'q', 'pt', 'px']),
      type$.JSArray_String
    );
    C.Map_ahsJO = new H.ConstantStringMap(
      7,
      {
        in: 1,
        cm: 0.39370078740157477,
        pc: 0.16666666666666666,
        mm: 0.03937007874015748,
        q: 0.00984251968503937,
        pt: 0.013888888888888888,
        px: 0.010416666666666666,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahM6L = new H.ConstantStringMap(
      7,
      {
        in: 2.54,
        cm: 1,
        pc: 0.42333333333333334,
        mm: 0.1,
        q: 0.025,
        pt: 0.035277777777777776,
        px: 0.026458333333333334,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahNsa = new H.ConstantStringMap(
      7,
      {
        in: 6,
        cm: 2.3622047244094486,
        pc: 1,
        mm: 0.2362204724409449,
        q: 0.05905511811023623,
        pt: 0.08333333333333333,
        px: 0.0625,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahPSt = new H.ConstantStringMap(
      7,
      {
        in: 25.4,
        cm: 10,
        pc: 4.233333333333333,
        mm: 1,
        q: 0.25,
        pt: 0.35277777777777775,
        px: 0.26458333333333334,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahgya = new H.ConstantStringMap(
      7,
      {
        in: 101.6,
        cm: 40,
        pc: 16.933333333333334,
        mm: 4,
        q: 1,
        pt: 1.411111111111111,
        px: 1.0583333333333333,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahGvh = new H.ConstantStringMap(
      7,
      {
        in: 72,
        cm: 28.346456692913385,
        pc: 12,
        mm: 2.834645669291339,
        q: 0.7086614173228347,
        pt: 1,
        px: 0.75,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.Map_ahkuc = new H.ConstantStringMap(
      7,
      {
        in: 96,
        cm: 37.79527559055118,
        pc: 16,
        mm: 3.7795275590551185,
        q: 0.9448818897637796,
        pt: 1.3333333333333333,
        px: 1,
      },
      C.List_aha,
      type$.ConstantStringMap_String_num
    );
    C.List_deg_grad_rad_turn = H._setArrayType(
      makeConstList(['deg', 'grad', 'rad', 'turn']),
      type$.JSArray_String
    );
    C.Map_EGyvr = new H.ConstantStringMap(
      4,
      { deg: 1, grad: 0.9, rad: 57.29577951308232, turn: 360 },
      C.List_deg_grad_rad_turn,
      type$.ConstantStringMap_String_num
    );
    C.Map_EGfqB = new H.ConstantStringMap(
      4,
      { deg: 1.1111111111111112, grad: 1, rad: 63.66197723675813, turn: 400 },
      C.List_deg_grad_rad_turn,
      type$.ConstantStringMap_String_num
    );
    C.Map_EGswR = new H.ConstantStringMap(
      4,
      {
        deg: 0.017453292519943295,
        grad: 0.015707963267948967,
        rad: 1,
        turn: 6.283185307179586,
      },
      C.List_deg_grad_rad_turn,
      type$.ConstantStringMap_String_num
    );
    C.Map_EGY2F = new H.ConstantStringMap(
      4,
      {
        deg: 0.002777777777777778,
        grad: 0.0025,
        rad: 0.15915494309189535,
        turn: 1,
      },
      C.List_deg_grad_rad_turn,
      type$.ConstantStringMap_String_num
    );
    C.List_s_ms = H._setArrayType(
      makeConstList(['s', 'ms']),
      type$.JSArray_String
    );
    C.Map_ma2bi = new H.ConstantStringMap(
      2,
      { s: 1, ms: 0.001 },
      C.List_s_ms,
      type$.ConstantStringMap_String_num
    );
    C.Map_maDht = new H.ConstantStringMap(
      2,
      { s: 1000, ms: 1 },
      C.List_s_ms,
      type$.ConstantStringMap_String_num
    );
    C.List_Hz_kHz = H._setArrayType(
      makeConstList(['Hz', 'kHz']),
      type$.JSArray_String
    );
    C.Map_0IpUe = new H.ConstantStringMap(
      2,
      { Hz: 1, kHz: 1000 },
      C.List_Hz_kHz,
      type$.ConstantStringMap_String_num
    );
    C.Map_0IVs0 = new H.ConstantStringMap(
      2,
      { Hz: 0.001, kHz: 1 },
      C.List_Hz_kHz,
      type$.ConstantStringMap_String_num
    );
    C.List_dpi_dpcm_dppx = H._setArrayType(
      makeConstList(['dpi', 'dpcm', 'dppx']),
      type$.JSArray_String
    );
    C.Map_H2OWd = new H.ConstantStringMap(
      3,
      { dpi: 1, dpcm: 2.54, dppx: 96 },
      C.List_dpi_dpcm_dppx,
      type$.ConstantStringMap_String_num
    );
    C.Map_H24em = new H.ConstantStringMap(
      3,
      { dpi: 0.39370078740157477, dpcm: 1, dppx: 37.79527559055118 },
      C.List_dpi_dpcm_dppx,
      type$.ConstantStringMap_String_num
    );
    C.Map_H25Om = new H.ConstantStringMap(
      3,
      { dpi: 0.010416666666666666, dpcm: 0.026458333333333334, dppx: 1 },
      C.List_dpi_dpcm_dppx,
      type$.ConstantStringMap_String_num
    );
    C.Map_K2BWj = new H.ConstantStringMap(
      18,
      {
        in: C.Map_ahsJO,
        cm: C.Map_ahM6L,
        pc: C.Map_ahNsa,
        mm: C.Map_ahPSt,
        q: C.Map_ahgya,
        pt: C.Map_ahGvh,
        px: C.Map_ahkuc,
        deg: C.Map_EGyvr,
        grad: C.Map_EGfqB,
        rad: C.Map_EGswR,
        turn: C.Map_EGY2F,
        s: C.Map_ma2bi,
        ms: C.Map_maDht,
        Hz: C.Map_0IpUe,
        kHz: C.Map_0IVs0,
        dpi: C.Map_H2OWd,
        dpcm: C.Map_H24em,
        dppx: C.Map_H25Om,
      },
      C.List_K2O,
      H.findType('ConstantStringMap<String,Map<String,num>>')
    );
    C.List_U8g = H._setArrayType(
      makeConstList(['length', 'angle', 'time', 'frequency', 'pixel density']),
      type$.JSArray_String
    );
    C.Map_U8AHF = new H.ConstantStringMap(
      5,
      {
        length: C.List_aha,
        angle: C.List_deg_grad_rad_turn,
        time: C.List_s_ms,
        frequency: C.List_Hz_kHz,
        'pixel density': C.List_dpi_dpcm_dppx,
      },
      C.List_U8g,
      H.findType('ConstantStringMap<String,List<String>>')
    );
    C.Map_empty0 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,AstNode>')
    );
    C.Map_empty6 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,AstNode0>')
    );
    C.Map_empty2 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Expression>')
    );
    C.Map_empty8 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Expression0>')
    );
    C.Map_empty3 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Module<AsyncCallable>>')
    );
    C.Map_empty = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Module<Callable>>')
    );
    C.Map_empty5 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Module0<AsyncCallable0>>')
    );
    C.Map_empty1 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Value>')
    );
    C.Map_empty7 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty,
      H.findType('ConstantStringMap<String,Value0>')
    );
    C.List_empty21 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<Symbol0>')
    );
    C.Map_empty9 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty21,
      H.findType('ConstantStringMap<Symbol0,@>')
    );
    C.List_empty22 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_nullable_String
    );
    C.Map_empty4 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty22,
      H.findType('ConstantStringMap<String?,String>')
    );
    C.OptionType_YwU = new G.OptionType('OptionType.single');
    C.OptionType_nMZ = new G.OptionType('OptionType.flag');
    C.OptionType_qyr = new G.OptionType('OptionType.multiple');
    C.OutputStyle_compressed = new N.OutputStyle('compressed');
    C.OutputStyle_compressed0 = new N.OutputStyle0('compressed');
    C.OutputStyle_expanded0 = new N.OutputStyle('expanded');
    C.OutputStyle_expanded = new N.OutputStyle0('expanded');
    C.SassBoolean_false0 = new Z.SassBoolean(false);
    C.SassBoolean_false = new Z.SassBoolean0(false);
    C.SassBoolean_true0 = new Z.SassBoolean(true);
    C.SassBoolean_true = new Z.SassBoolean0(true);
    C.SassList_yfz = new D.SassList(C.List_empty5, C.ListSeparator_kWM, false);
    C.SassList_yfz0 = new D.SassList0(
      C.List_empty14,
      C.ListSeparator_kWM0,
      false
    );
    C.Map_empty12 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty5,
      H.findType('ConstantStringMap<Value,Value>')
    );
    C.SassMap_Map_empty = new A.SassMap(C.Map_empty12);
    C.Map_empty13 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty14,
      H.findType('ConstantStringMap<Value0,Value0>')
    );
    C.SassMap_Map_empty0 = new A.SassMap0(C.Map_empty13);
    C.List_empty23 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Module_AsyncCallable
    );
    C.Map_empty14 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty23,
      H.findType('ConstantStringMap<Module<AsyncCallable>,Null>')
    );
    C.Set_empty0 = new P._UnmodifiableSet(
      C.Map_empty14,
      H.findType('_UnmodifiableSet<Module<AsyncCallable>>')
    );
    C.List_empty24 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Module_Callable
    );
    C.Map_empty15 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty24,
      H.findType('ConstantStringMap<Module<Callable>,Null>')
    );
    C.Set_empty = new P._UnmodifiableSet(
      C.Map_empty15,
      H.findType('_UnmodifiableSet<Module<Callable>>')
    );
    C.List_empty25 = H._setArrayType(
      makeConstList([]),
      type$.JSArray_Module_AsyncCallable_2
    );
    C.Map_empty16 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty25,
      H.findType('ConstantStringMap<Module0<AsyncCallable0>,Null>')
    );
    C.Set_empty2 = new P._UnmodifiableSet(
      C.Map_empty16,
      H.findType('_UnmodifiableSet<Module0<AsyncCallable0>>')
    );
    C.List_empty26 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<StylesheetNode>')
    );
    C.Map_empty17 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty26,
      H.findType('ConstantStringMap<StylesheetNode,Null>')
    );
    C.Set_empty1 = new P._UnmodifiableSet(
      C.Map_empty17,
      H.findType('_UnmodifiableSet<StylesheetNode>')
    );
    C.StderrLogger_false = new S.StderrLogger(false);
    C.Symbol__currentCallableNode = new H.Symbol('_currentCallableNode');
    C.Symbol__inImportRule = new H.Symbol('_inImportRule');
    C.Symbol__warn = new H.Symbol('_warn');
    C.Symbol_call = new H.Symbol('call');
    C.Syntax_CSS = new M.Syntax('CSS');
    C.Syntax_CSS0 = new M.Syntax0('CSS');
    C.Syntax_SCSS = new M.Syntax('SCSS');
    C.Syntax_SCSS0 = new M.Syntax0('SCSS');
    C.Syntax_Sass = new M.Syntax('Sass');
    C.Syntax_Sass0 = new M.Syntax0('Sass');
    C.List_empty27 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<CssValue<SelectorList>>')
    );
    C.Map_empty18 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty27,
      H.findType(
        'ConstantStringMap<CssValue<SelectorList>,ModifiableCssValue<SelectorList>>'
      )
    );
    C.Tuple2_EmptyExtensionStore_Map_empty = new S.Tuple2(
      C.C_EmptyExtensionStore,
      C.Map_empty18,
      type$.Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList
    );
    C.List_empty28 = H._setArrayType(
      makeConstList([]),
      H.findType('JSArray<CssValue0<SelectorList0>>')
    );
    C.Map_empty19 = new H.ConstantStringMap(
      0,
      {},
      C.List_empty28,
      H.findType(
        'ConstantStringMap<CssValue0<SelectorList0>,ModifiableCssValue0<SelectorList0>>'
      )
    );
    C.Tuple2_EmptyExtensionStore_Map_empty0 = new S.Tuple2(
      C.C_EmptyExtensionStore0,
      C.Map_empty19,
      type$.Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList_2
    );
    C.Type_Null_Yyn = H.typeLiteral('Null');
    C.UnaryOperator_U4G = new X.UnaryOperator('minus', '-');
    C.UnaryOperator_U4G0 = new X.UnaryOperator0('minus', '-');
    C.UnaryOperator_j2w = new X.UnaryOperator('plus', '+');
    C.UnaryOperator_j2w0 = new X.UnaryOperator0('plus', '+');
    C.UnaryOperator_not_not = new X.UnaryOperator('not', 'not');
    C.UnaryOperator_not_not0 = new X.UnaryOperator0('not', 'not');
    C.UnaryOperator_zDx = new X.UnaryOperator('divide', '/');
    C.UnaryOperator_zDx0 = new X.UnaryOperator0('divide', '/');
    C.Utf8Decoder_false = new P.Utf8Decoder(false);
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
    C._PathDirection_8Gl = new M._PathDirection('at root');
    C._PathDirection_988 = new M._PathDirection('below root');
    C._PathDirection_FIw = new M._PathDirection('reaches root');
    C._PathDirection_ZGD = new M._PathDirection('above root');
    C._PathRelation_different = new M._PathRelation('different');
    C._PathRelation_equal = new M._PathRelation('equal');
    C._PathRelation_inconclusive = new M._PathRelation('inconclusive');
    C._PathRelation_within = new M._PathRelation('within');
    C._RegisterBinaryZoneFunction_kGu = new P._RegisterBinaryZoneFunction(
      C.C__RootZone,
      P.async___rootRegisterBinaryCallback$closure()
    );
    C._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback = new P._RegisterNullaryZoneFunction(
      C.C__RootZone,
      P.async___rootRegisterCallback$closure()
    );
    C._RegisterUnaryZoneFunction_Bqo = new P._RegisterUnaryZoneFunction(
      C.C__RootZone,
      P.async___rootRegisterUnaryCallback$closure()
    );
    C._RunBinaryZoneFunction__RootZone__rootRunBinary = new P._RunBinaryZoneFunction(
      C.C__RootZone,
      P.async___rootRunBinary$closure()
    );
    C._RunNullaryZoneFunction__RootZone__rootRun = new P._RunNullaryZoneFunction(
      C.C__RootZone,
      P.async___rootRun$closure()
    );
    C._RunUnaryZoneFunction__RootZone__rootRunUnary = new P._RunUnaryZoneFunction(
      C.C__RootZone,
      P.async___rootRunUnary$closure()
    );
    C._SingletonCssMediaQueryMergeResult_empty = new F._SingletonCssMediaQueryMergeResult(
      'empty'
    );
    C._SingletonCssMediaQueryMergeResult_empty0 = new F._SingletonCssMediaQueryMergeResult0(
      'empty'
    );
    C._SingletonCssMediaQueryMergeResult_unrepresentable = new F._SingletonCssMediaQueryMergeResult(
      'unrepresentable'
    );
    C._SingletonCssMediaQueryMergeResult_unrepresentable0 = new F._SingletonCssMediaQueryMergeResult0(
      'unrepresentable'
    );
    C._StringStackTrace_3uE = new P._StringStackTrace('');
    C._ZoneFunction_3bB = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootCreatePeriodicTimer$closure()
    );
    C._ZoneFunction_NMc = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootHandleUncaughtError$closure()
    );
    C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootCreateTimer$closure()
    );
    C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootErrorCallback$closure()
    );
    C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootFork$closure()
    );
    C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootPrint$closure()
    );
    C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(
      C.C__RootZone,
      P.async___rootScheduleMicrotask$closure()
    );
    C._ZoneSpecification_ALf = new P._ZoneSpecification(
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    );
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.printToZone = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = H._setArrayType([], type$.JSArray_Object);
    $._fs = null;
    $._currentUriBase = null;
    $._current = null;
    $._subselectorPseudos = P.LinkedHashSet_LinkedHashSet$_literal(
      ['is', 'matches', 'any', 'nth-child', 'nth-last-child'],
      type$.String
    );
    $._features = P.LinkedHashSet_LinkedHashSet$_literal(
      [
        'global-variable-shadowing',
        'extend-selector-pseudoclass',
        'units-level-3',
        'at-error',
        'custom-property',
      ],
      type$.String
    );
    $._realCaseCache = (function () {
      var t1 = type$.String;
      return P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    })();
    $._selectorPseudoClasses = P.LinkedHashSet_LinkedHashSet$_literal(
      ['not', 'is', 'matches', 'current', 'any', 'has', 'host', 'host-context'],
      type$.String
    );
    $._selectorPseudoElements = P.LinkedHashSet_LinkedHashSet$_literal(
      ['slotted'],
      type$.String
    );
    $._glyphs = C.C_UnicodeGlyphSet;
    $._subselectorPseudos0 = P.LinkedHashSet_LinkedHashSet$_literal(
      ['is', 'matches', 'any', 'nth-child', 'nth-last-child'],
      type$.String
    );
    $._realCaseCache0 = (function () {
      var t1 = type$.String;
      return P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    })();
    $._features0 = P.LinkedHashSet_LinkedHashSet$_literal(
      [
        'global-variable-shadowing',
        'extend-selector-pseudoclass',
        'units-level-3',
        'at-error',
        'custom-property',
      ],
      type$.String
    );
    $._selectorPseudoClasses0 = P.LinkedHashSet_LinkedHashSet$_literal(
      ['not', 'is', 'matches', 'current', 'any', 'has', 'host', 'host-context'],
      type$.String
    );
    $._selectorPseudoElements0 = P.LinkedHashSet_LinkedHashSet$_literal(
      ['slotted'],
      type$.String
    );
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal(
      $,
      'DART_CLOSURE_PROPERTY_NAME',
      '$get$DART_CLOSURE_PROPERTY_NAME',
      function () {
        return H.getIsolateAffinityTag('_$dart_dartClosure');
      }
    );
    _lazyFinal($, 'nullFuture', '$get$nullFuture', function () {
      return C.C__RootZone.run$1$1(
        new H.nullFuture_closure(),
        H.findType('Future<Null>')
      );
    });
    _lazyFinal(
      $,
      'TypeErrorDecoder_noSuchMethodPattern',
      '$get$TypeErrorDecoder_noSuchMethodPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokeCallErrorOn({
            toString: function () {
              return '$receiver$';
            },
          })
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_notClosurePattern',
      '$get$TypeErrorDecoder_notClosurePattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokeCallErrorOn({
            $method$: null,
            toString: function () {
              return '$receiver$';
            },
          })
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_nullCallPattern',
      '$get$TypeErrorDecoder_nullCallPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokeCallErrorOn(null)
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_nullLiteralCallPattern',
      '$get$TypeErrorDecoder_nullLiteralCallPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          (function () {
            var $argumentsExpr$ = '$arguments$';
            try {
              null.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          })()
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_undefinedCallPattern',
      '$get$TypeErrorDecoder_undefinedCallPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokeCallErrorOn(void 0)
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_undefinedLiteralCallPattern',
      '$get$TypeErrorDecoder_undefinedLiteralCallPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          (function () {
            var $argumentsExpr$ = '$arguments$';
            try {
              (void 0).$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          })()
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_nullPropertyPattern',
      '$get$TypeErrorDecoder_nullPropertyPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokePropertyErrorOn(null)
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_nullLiteralPropertyPattern',
      '$get$TypeErrorDecoder_nullLiteralPropertyPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          (function () {
            try {
              null.$method$;
            } catch (e) {
              return e.message;
            }
          })()
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_undefinedPropertyPattern',
      '$get$TypeErrorDecoder_undefinedPropertyPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          H.TypeErrorDecoder_provokePropertyErrorOn(void 0)
        );
      }
    );
    _lazyFinal(
      $,
      'TypeErrorDecoder_undefinedLiteralPropertyPattern',
      '$get$TypeErrorDecoder_undefinedLiteralPropertyPattern',
      function () {
        return H.TypeErrorDecoder_extractPattern(
          (function () {
            try {
              (void 0).$method$;
            } catch (e) {
              return e.message;
            }
          })()
        );
      }
    );
    _lazyFinal(
      $,
      '_AsyncRun__scheduleImmediateClosure',
      '$get$_AsyncRun__scheduleImmediateClosure',
      function () {
        return P._AsyncRun__initializeScheduleImmediate();
      }
    );
    _lazyFinal($, 'Future__nullFuture', '$get$Future__nullFuture', function () {
      return type$._Future_Null._as($.$get$nullFuture());
    });
    _lazyFinal(
      $,
      'Future__falseFuture',
      '$get$Future__falseFuture',
      function () {
        var t1 = new P._Future(C.C__RootZone, type$._Future_bool);
        t1._setValue$1(false);
        return t1;
      }
    );
    _lazyFinal($, '_RootZone__rootMap', '$get$_RootZone__rootMap', function () {
      var t1 = type$.dynamic;
      return P.HashMap_HashMap(t1, t1);
    });
    _lazyFinal(
      $,
      'Utf8Decoder__decoder',
      '$get$Utf8Decoder__decoder',
      function () {
        return new P.Utf8Decoder__decoder_closure().call$0();
      }
    );
    _lazyFinal(
      $,
      'Utf8Decoder__decoderNonfatal',
      '$get$Utf8Decoder__decoderNonfatal',
      function () {
        return new P.Utf8Decoder__decoderNonfatal_closure().call$0();
      }
    );
    _lazyFinal(
      $,
      '_Base64Decoder__inverseAlphabet',
      '$get$_Base64Decoder__inverseAlphabet',
      function () {
        return H.NativeInt8List__create1(
          H._ensureNativeList(
            H._setArrayType(
              [
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -2,
                -1,
                -2,
                -2,
                -2,
                -2,
                -2,
                62,
                -2,
                62,
                -2,
                63,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                -2,
                -2,
                -2,
                -1,
                -2,
                -2,
                -2,
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                -2,
                -2,
                -2,
                -2,
                63,
                -2,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                -2,
                -2,
                -2,
                -2,
                -2,
              ],
              type$.JSArray_int
            )
          )
        );
      }
    );
    _lazyFinal(
      $,
      '_Uri__isWindowsCached',
      '$get$_Uri__isWindowsCached',
      function () {
        return (
          typeof process != 'undefined' &&
          Object.prototype.toString.call(process) == '[object process]' &&
          process.platform == 'win32'
        );
      }
    );
    _lazyFinal(
      $,
      '_Uri__needsNoEncoding',
      '$get$_Uri__needsNoEncoding',
      function () {
        return P.RegExp_RegExp('^[\\-\\.0-9A-Z_a-z~]*$', false);
      }
    );
    _lazy(
      $,
      '_hasErrorStackProperty',
      '$get$_hasErrorStackProperty',
      function () {
        return new Error().stack != void 0;
      }
    );
    _lazyFinal($, '_scannerTables', '$get$_scannerTables', function () {
      return P._createTables();
    });
    _lazyFinal(
      $,
      'Option__invalidChars',
      '$get$Option__invalidChars',
      function () {
        return P.RegExp_RegExp('[ \\t\\r\\n"\'\\\\/]', false);
      }
    );
    _lazyFinal($, 'alwaysValid', '$get$alwaysValid', function () {
      return new Q.alwaysValid_closure();
    });
    _lazyFinal($, 'readline', '$get$readline', function () {
      return self.readline;
    });
    _lazyFinal($, 'windows', '$get$windows', function () {
      return M.Context_Context($.$get$Style_windows());
    });
    _lazyFinal($, 'url', '$get$url', function () {
      return M.Context_Context($.$get$Style_url());
    });
    _lazyFinal($, 'context', '$get$context', function () {
      return new M.Context(
        type$.InternalStyle._as($.$get$Style_platform()),
        null
      );
    });
    _lazyFinal($, 'Style_posix', '$get$Style_posix', function () {
      return new E.PosixStyle(
        P.RegExp_RegExp('/', false),
        P.RegExp_RegExp('[^/]$', false),
        P.RegExp_RegExp('^/', false)
      );
    });
    _lazyFinal($, 'Style_windows', '$get$Style_windows', function () {
      return new L.WindowsStyle(
        P.RegExp_RegExp('[/\\\\]', false),
        P.RegExp_RegExp('[^/\\\\]$', false),
        P.RegExp_RegExp(
          '^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])',
          false
        ),
        P.RegExp_RegExp('^[/\\\\](?![/\\\\])', false)
      );
    });
    _lazyFinal($, 'Style_url', '$get$Style_url', function () {
      return new F.UrlStyle(
        P.RegExp_RegExp('/', false),
        P.RegExp_RegExp('(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$', false),
        P.RegExp_RegExp('[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*', false),
        P.RegExp_RegExp('^/', false)
      );
    });
    _lazyFinal($, 'Style_platform', '$get$Style_platform', function () {
      return O.Style__getPlatformStyle();
    });
    _lazyFinal(
      $,
      'IfExpression_declaration',
      '$get$IfExpression_declaration',
      function () {
        return B.ArgumentDeclaration_ArgumentDeclaration$parse(
          string$.x40funct,
          null
        );
      }
    );
    _lazyFinal($, 'colorsByName', '$get$colorsByName', function () {
      var _null = null;
      return P.LinkedHashMap_LinkedHashMap$_literal(
        [
          'yellowgreen',
          K.SassColor$rgb(154, 205, 50, _null, _null),
          'yellow',
          K.SassColor$rgb(255, 255, 0, _null, _null),
          'whitesmoke',
          K.SassColor$rgb(245, 245, 245, _null, _null),
          'white',
          K.SassColor$rgb(255, 255, 255, _null, _null),
          'wheat',
          K.SassColor$rgb(245, 222, 179, _null, _null),
          'violet',
          K.SassColor$rgb(238, 130, 238, _null, _null),
          'turquoise',
          K.SassColor$rgb(64, 224, 208, _null, _null),
          'transparent',
          K.SassColor$rgb(0, 0, 0, 0, _null),
          'tomato',
          K.SassColor$rgb(255, 99, 71, _null, _null),
          'thistle',
          K.SassColor$rgb(216, 191, 216, _null, _null),
          'teal',
          K.SassColor$rgb(0, 128, 128, _null, _null),
          'tan',
          K.SassColor$rgb(210, 180, 140, _null, _null),
          'steelblue',
          K.SassColor$rgb(70, 130, 180, _null, _null),
          'springgreen',
          K.SassColor$rgb(0, 255, 127, _null, _null),
          'snow',
          K.SassColor$rgb(255, 250, 250, _null, _null),
          'slategrey',
          K.SassColor$rgb(112, 128, 144, _null, _null),
          'slategray',
          K.SassColor$rgb(112, 128, 144, _null, _null),
          'slateblue',
          K.SassColor$rgb(106, 90, 205, _null, _null),
          'skyblue',
          K.SassColor$rgb(135, 206, 235, _null, _null),
          'silver',
          K.SassColor$rgb(192, 192, 192, _null, _null),
          'sienna',
          K.SassColor$rgb(160, 82, 45, _null, _null),
          'seashell',
          K.SassColor$rgb(255, 245, 238, _null, _null),
          'seagreen',
          K.SassColor$rgb(46, 139, 87, _null, _null),
          'sandybrown',
          K.SassColor$rgb(244, 164, 96, _null, _null),
          'salmon',
          K.SassColor$rgb(250, 128, 114, _null, _null),
          'saddlebrown',
          K.SassColor$rgb(139, 69, 19, _null, _null),
          'royalblue',
          K.SassColor$rgb(65, 105, 225, _null, _null),
          'rosybrown',
          K.SassColor$rgb(188, 143, 143, _null, _null),
          'red',
          K.SassColor$rgb(255, 0, 0, _null, _null),
          'rebeccapurple',
          K.SassColor$rgb(102, 51, 153, _null, _null),
          'purple',
          K.SassColor$rgb(128, 0, 128, _null, _null),
          'powderblue',
          K.SassColor$rgb(176, 224, 230, _null, _null),
          'plum',
          K.SassColor$rgb(221, 160, 221, _null, _null),
          'pink',
          K.SassColor$rgb(255, 192, 203, _null, _null),
          'peru',
          K.SassColor$rgb(205, 133, 63, _null, _null),
          'peachpuff',
          K.SassColor$rgb(255, 218, 185, _null, _null),
          'papayawhip',
          K.SassColor$rgb(255, 239, 213, _null, _null),
          'palevioletred',
          K.SassColor$rgb(219, 112, 147, _null, _null),
          'paleturquoise',
          K.SassColor$rgb(175, 238, 238, _null, _null),
          'palegreen',
          K.SassColor$rgb(152, 251, 152, _null, _null),
          'palegoldenrod',
          K.SassColor$rgb(238, 232, 170, _null, _null),
          'orchid',
          K.SassColor$rgb(218, 112, 214, _null, _null),
          'orangered',
          K.SassColor$rgb(255, 69, 0, _null, _null),
          'orange',
          K.SassColor$rgb(255, 165, 0, _null, _null),
          'olivedrab',
          K.SassColor$rgb(107, 142, 35, _null, _null),
          'olive',
          K.SassColor$rgb(128, 128, 0, _null, _null),
          'oldlace',
          K.SassColor$rgb(253, 245, 230, _null, _null),
          'navy',
          K.SassColor$rgb(0, 0, 128, _null, _null),
          'navajowhite',
          K.SassColor$rgb(255, 222, 173, _null, _null),
          'moccasin',
          K.SassColor$rgb(255, 228, 181, _null, _null),
          'mistyrose',
          K.SassColor$rgb(255, 228, 225, _null, _null),
          'mintcream',
          K.SassColor$rgb(245, 255, 250, _null, _null),
          'midnightblue',
          K.SassColor$rgb(25, 25, 112, _null, _null),
          'mediumvioletred',
          K.SassColor$rgb(199, 21, 133, _null, _null),
          'mediumturquoise',
          K.SassColor$rgb(72, 209, 204, _null, _null),
          'mediumspringgreen',
          K.SassColor$rgb(0, 250, 154, _null, _null),
          'mediumslateblue',
          K.SassColor$rgb(123, 104, 238, _null, _null),
          'mediumseagreen',
          K.SassColor$rgb(60, 179, 113, _null, _null),
          'mediumpurple',
          K.SassColor$rgb(147, 112, 219, _null, _null),
          'mediumorchid',
          K.SassColor$rgb(186, 85, 211, _null, _null),
          'mediumblue',
          K.SassColor$rgb(0, 0, 205, _null, _null),
          'mediumaquamarine',
          K.SassColor$rgb(102, 205, 170, _null, _null),
          'maroon',
          K.SassColor$rgb(128, 0, 0, _null, _null),
          'magenta',
          K.SassColor$rgb(255, 0, 255, _null, _null),
          'linen',
          K.SassColor$rgb(250, 240, 230, _null, _null),
          'limegreen',
          K.SassColor$rgb(50, 205, 50, _null, _null),
          'lime',
          K.SassColor$rgb(0, 255, 0, _null, _null),
          'lightyellow',
          K.SassColor$rgb(255, 255, 224, _null, _null),
          'lightsteelblue',
          K.SassColor$rgb(176, 196, 222, _null, _null),
          'lightslategrey',
          K.SassColor$rgb(119, 136, 153, _null, _null),
          'lightslategray',
          K.SassColor$rgb(119, 136, 153, _null, _null),
          'lightskyblue',
          K.SassColor$rgb(135, 206, 250, _null, _null),
          'lightseagreen',
          K.SassColor$rgb(32, 178, 170, _null, _null),
          'lightsalmon',
          K.SassColor$rgb(255, 160, 122, _null, _null),
          'lightpink',
          K.SassColor$rgb(255, 182, 193, _null, _null),
          'lightgrey',
          K.SassColor$rgb(211, 211, 211, _null, _null),
          'lightgreen',
          K.SassColor$rgb(144, 238, 144, _null, _null),
          'lightgray',
          K.SassColor$rgb(211, 211, 211, _null, _null),
          'lightgoldenrodyellow',
          K.SassColor$rgb(250, 250, 210, _null, _null),
          'lightcyan',
          K.SassColor$rgb(224, 255, 255, _null, _null),
          'lightcoral',
          K.SassColor$rgb(240, 128, 128, _null, _null),
          'lightblue',
          K.SassColor$rgb(173, 216, 230, _null, _null),
          'lemonchiffon',
          K.SassColor$rgb(255, 250, 205, _null, _null),
          'lawngreen',
          K.SassColor$rgb(124, 252, 0, _null, _null),
          'lavenderblush',
          K.SassColor$rgb(255, 240, 245, _null, _null),
          'lavender',
          K.SassColor$rgb(230, 230, 250, _null, _null),
          'khaki',
          K.SassColor$rgb(240, 230, 140, _null, _null),
          'ivory',
          K.SassColor$rgb(255, 255, 240, _null, _null),
          'indigo',
          K.SassColor$rgb(75, 0, 130, _null, _null),
          'indianred',
          K.SassColor$rgb(205, 92, 92, _null, _null),
          'hotpink',
          K.SassColor$rgb(255, 105, 180, _null, _null),
          'honeydew',
          K.SassColor$rgb(240, 255, 240, _null, _null),
          'grey',
          K.SassColor$rgb(128, 128, 128, _null, _null),
          'greenyellow',
          K.SassColor$rgb(173, 255, 47, _null, _null),
          'green',
          K.SassColor$rgb(0, 128, 0, _null, _null),
          'gray',
          K.SassColor$rgb(128, 128, 128, _null, _null),
          'goldenrod',
          K.SassColor$rgb(218, 165, 32, _null, _null),
          'gold',
          K.SassColor$rgb(255, 215, 0, _null, _null),
          'ghostwhite',
          K.SassColor$rgb(248, 248, 255, _null, _null),
          'gainsboro',
          K.SassColor$rgb(220, 220, 220, _null, _null),
          'fuchsia',
          K.SassColor$rgb(255, 0, 255, _null, _null),
          'forestgreen',
          K.SassColor$rgb(34, 139, 34, _null, _null),
          'floralwhite',
          K.SassColor$rgb(255, 250, 240, _null, _null),
          'firebrick',
          K.SassColor$rgb(178, 34, 34, _null, _null),
          'dodgerblue',
          K.SassColor$rgb(30, 144, 255, _null, _null),
          'dimgrey',
          K.SassColor$rgb(105, 105, 105, _null, _null),
          'dimgray',
          K.SassColor$rgb(105, 105, 105, _null, _null),
          'deepskyblue',
          K.SassColor$rgb(0, 191, 255, _null, _null),
          'deeppink',
          K.SassColor$rgb(255, 20, 147, _null, _null),
          'darkviolet',
          K.SassColor$rgb(148, 0, 211, _null, _null),
          'darkturquoise',
          K.SassColor$rgb(0, 206, 209, _null, _null),
          'darkslategrey',
          K.SassColor$rgb(47, 79, 79, _null, _null),
          'darkslategray',
          K.SassColor$rgb(47, 79, 79, _null, _null),
          'darkslateblue',
          K.SassColor$rgb(72, 61, 139, _null, _null),
          'darkseagreen',
          K.SassColor$rgb(143, 188, 143, _null, _null),
          'darksalmon',
          K.SassColor$rgb(233, 150, 122, _null, _null),
          'darkred',
          K.SassColor$rgb(139, 0, 0, _null, _null),
          'darkorchid',
          K.SassColor$rgb(153, 50, 204, _null, _null),
          'darkorange',
          K.SassColor$rgb(255, 140, 0, _null, _null),
          'darkolivegreen',
          K.SassColor$rgb(85, 107, 47, _null, _null),
          'darkmagenta',
          K.SassColor$rgb(139, 0, 139, _null, _null),
          'darkkhaki',
          K.SassColor$rgb(189, 183, 107, _null, _null),
          'darkgrey',
          K.SassColor$rgb(169, 169, 169, _null, _null),
          'darkgreen',
          K.SassColor$rgb(0, 100, 0, _null, _null),
          'darkgray',
          K.SassColor$rgb(169, 169, 169, _null, _null),
          'darkgoldenrod',
          K.SassColor$rgb(184, 134, 11, _null, _null),
          'darkcyan',
          K.SassColor$rgb(0, 139, 139, _null, _null),
          'darkblue',
          K.SassColor$rgb(0, 0, 139, _null, _null),
          'cyan',
          K.SassColor$rgb(0, 255, 255, _null, _null),
          'crimson',
          K.SassColor$rgb(220, 20, 60, _null, _null),
          'cornsilk',
          K.SassColor$rgb(255, 248, 220, _null, _null),
          'cornflowerblue',
          K.SassColor$rgb(100, 149, 237, _null, _null),
          'coral',
          K.SassColor$rgb(255, 127, 80, _null, _null),
          'chocolate',
          K.SassColor$rgb(210, 105, 30, _null, _null),
          'chartreuse',
          K.SassColor$rgb(127, 255, 0, _null, _null),
          'cadetblue',
          K.SassColor$rgb(95, 158, 160, _null, _null),
          'burlywood',
          K.SassColor$rgb(222, 184, 135, _null, _null),
          'brown',
          K.SassColor$rgb(165, 42, 42, _null, _null),
          'blueviolet',
          K.SassColor$rgb(138, 43, 226, _null, _null),
          'blue',
          K.SassColor$rgb(0, 0, 255, _null, _null),
          'blanchedalmond',
          K.SassColor$rgb(255, 235, 205, _null, _null),
          'black',
          K.SassColor$rgb(0, 0, 0, _null, _null),
          'bisque',
          K.SassColor$rgb(255, 228, 196, _null, _null),
          'beige',
          K.SassColor$rgb(245, 245, 220, _null, _null),
          'azure',
          K.SassColor$rgb(240, 255, 255, _null, _null),
          'aquamarine',
          K.SassColor$rgb(127, 255, 212, _null, _null),
          'aqua',
          K.SassColor$rgb(0, 255, 255, _null, _null),
          'antiquewhite',
          K.SassColor$rgb(250, 235, 215, _null, _null),
          'aliceblue',
          K.SassColor$rgb(240, 248, 255, _null, _null),
        ],
        type$.String,
        type$.SassColor
      );
    });
    _lazyFinal($, 'namesByColor', '$get$namesByColor', function () {
      var t2,
        t3,
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.SassColor,
          type$.String
        );
      for (
        t2 = $.$get$colorsByName(),
          t2 = t2.get$entries(t2),
          t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      ) {
        t3 = t2.get$current();
        t1.$indexSet(0, t3.value, t3.key);
      }
      return t1;
    });
    _lazyFinal(
      $,
      'ExecutableOptions__separatorBar',
      '$get$ExecutableOptions__separatorBar',
      function () {
        return B.isWindows() ? '=' : '\u2501';
      }
    );
    _lazyFinal(
      $,
      'ExecutableOptions__parser',
      '$get$ExecutableOptions__parser',
      function () {
        return new B.ExecutableOptions__parser_closure().call$0();
      }
    );
    _lazyFinal($, 'globalFunctions', '$get$globalFunctions', function () {
      var t1 = type$.BuiltInCallable,
        t2 = P.List_List$of($.$get$global0(), true, t1);
      C.JSArray_methods.addAll$1(t2, $.$get$global1());
      C.JSArray_methods.addAll$1(t2, $.$get$global2());
      C.JSArray_methods.addAll$1(t2, $.$get$global3());
      C.JSArray_methods.addAll$1(t2, $.$get$global4());
      C.JSArray_methods.addAll$1(t2, $.$get$global5());
      C.JSArray_methods.addAll$1(t2, $.$get$global());
      t2.push(
        Q.BuiltInCallable$function(
          'if',
          '$condition, $if-true, $if-false',
          new Y.globalFunctions_closure(),
          null
        )
      );
      return P.UnmodifiableListView$(t2, t1);
    });
    _lazyFinal($, 'coreModules', '$get$coreModules', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$module(),
            $.$get$module0(),
            $.$get$module1(),
            $.$get$module2(),
            $.$get$module3(),
            $.$get$module4(),
          ],
          H.findType('JSArray<BuiltInModule<BuiltInCallable>>')
        ),
        type$.BuiltInModule_BuiltInCallable
      );
    });
    _lazyFinal(
      $,
      '_microsoftFilterStart',
      '$get$_microsoftFilterStart',
      function () {
        return P.RegExp_RegExp('^[a-zA-Z]+\\s*=', false);
      }
    );
    _lazyFinal($, 'global', '$get$global0', function () {
      var _s27_ = '$red, $green, $blue, $alpha',
        _s19_ = '$red, $green, $blue',
        _s37_ = '$hue, $saturation, $lightness, $alpha',
        _s29_ = '$hue, $saturation, $lightness',
        _s17_ = '$hue, $saturation',
        _s15_ = '$color, $amount',
        t1 = type$.String,
        t2 = type$.Value_Function_List_Value;
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_red(),
            $.$get$_green(),
            $.$get$_blue(),
            $.$get$_mix(),
            Q.BuiltInCallable$overloadedFunction(
              'rgb',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s27_,
                  new K.global_closure(),
                  _s19_,
                  new K.global_closure0(),
                  '$color, $alpha',
                  new K.global_closure1(),
                  '$channels',
                  new K.global_closure2(),
                ],
                t1,
                t2
              )
            ),
            Q.BuiltInCallable$overloadedFunction(
              'rgba',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s27_,
                  new K.global_closure3(),
                  _s19_,
                  new K.global_closure4(),
                  '$color, $alpha',
                  new K.global_closure5(),
                  '$channels',
                  new K.global_closure6(),
                ],
                t1,
                t2
              )
            ),
            K._function4(
              'invert',
              '$color, $weight: 100%',
              new K.global_closure7()
            ),
            $.$get$_hue(),
            $.$get$_saturation(),
            $.$get$_lightness(),
            $.$get$_complement(),
            Q.BuiltInCallable$overloadedFunction(
              'hsl',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s37_,
                  new K.global_closure8(),
                  _s29_,
                  new K.global_closure9(),
                  _s17_,
                  new K.global_closure10(),
                  '$channels',
                  new K.global_closure11(),
                ],
                t1,
                t2
              )
            ),
            Q.BuiltInCallable$overloadedFunction(
              'hsla',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s37_,
                  new K.global_closure12(),
                  _s29_,
                  new K.global_closure13(),
                  _s17_,
                  new K.global_closure14(),
                  '$channels',
                  new K.global_closure15(),
                ],
                t1,
                t2
              )
            ),
            K._function4('grayscale', '$color', new K.global_closure16()),
            K._function4(
              'adjust-hue',
              '$color, $degrees',
              new K.global_closure17()
            ),
            K._function4('lighten', _s15_, new K.global_closure18()),
            K._function4('darken', _s15_, new K.global_closure19()),
            Q.BuiltInCallable$overloadedFunction(
              'saturate',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$amount',
                  new K.global_closure20(),
                  '$color, $amount',
                  new K.global_closure21(),
                ],
                t1,
                t2
              )
            ),
            K._function4('desaturate', _s15_, new K.global_closure22()),
            K._function4('opacify', _s15_, K.color___opacify$closure()),
            K._function4('fade-in', _s15_, K.color___opacify$closure()),
            K._function4(
              'transparentize',
              _s15_,
              K.color___transparentize$closure()
            ),
            K._function4('fade-out', _s15_, K.color___transparentize$closure()),
            Q.BuiltInCallable$overloadedFunction(
              'alpha',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$color',
                  new K.global_closure23(),
                  '$args...',
                  new K.global_closure24(),
                ],
                t1,
                t2
              )
            ),
            K._function4('opacity', '$color', new K.global_closure25()),
            $.$get$_ieHexStr(),
            $.$get$_adjust().withName$1('adjust-color'),
            $.$get$_scale().withName$1('scale-color'),
            $.$get$_change().withName$1('change-color'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module', '$get$module', function () {
      var _s9_ = 'lightness',
        _s10_ = 'saturation',
        _s6_ = '$color',
        _s5_ = 'alpha',
        t1 = type$.String,
        t2 = type$.Value_Function_List_Value;
      return Q.BuiltInModule$(
        'color',
        H._setArrayType(
          [
            $.$get$_red(),
            $.$get$_green(),
            $.$get$_blue(),
            $.$get$_mix(),
            K._function4(
              'invert',
              '$color, $weight: 100%',
              new K.module_closure()
            ),
            $.$get$_hue(),
            $.$get$_saturation(),
            $.$get$_lightness(),
            $.$get$_complement(),
            K._removedColorFunction('adjust-hue', 'hue', false),
            K._removedColorFunction('lighten', _s9_, false),
            K._removedColorFunction('darken', _s9_, true),
            K._removedColorFunction('saturate', _s10_, false),
            K._removedColorFunction('desaturate', _s10_, true),
            K._function4('grayscale', _s6_, new K.module_closure0()),
            Q.BuiltInCallable$overloadedFunction(
              'hwb',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$hue, $whiteness, $blackness, $alpha: 1',
                  new K.module_closure1(),
                  '$channels',
                  new K.module_closure2(),
                ],
                t1,
                t2
              )
            ),
            K._function4('whiteness', _s6_, new K.module_closure3()),
            K._function4('blackness', _s6_, new K.module_closure4()),
            K._removedColorFunction('opacify', _s5_, false),
            K._removedColorFunction('fade-in', _s5_, false),
            K._removedColorFunction('transparentize', _s5_, true),
            K._removedColorFunction('fade-out', _s5_, true),
            Q.BuiltInCallable$overloadedFunction(
              _s5_,
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$color',
                  new K.module_closure5(),
                  '$args...',
                  new K.module_closure6(),
                ],
                t1,
                t2
              )
            ),
            K._function4('opacity', _s6_, new K.module_closure7()),
            $.$get$_adjust(),
            $.$get$_scale(),
            $.$get$_change(),
            $.$get$_ieHexStr(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        null,
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_red', '$get$_red', function () {
      return K._function4('red', '$color', new K._red_closure());
    });
    _lazyFinal($, '_green', '$get$_green', function () {
      return K._function4('green', '$color', new K._green_closure());
    });
    _lazyFinal($, '_blue', '$get$_blue', function () {
      return K._function4('blue', '$color', new K._blue_closure());
    });
    _lazyFinal($, '_mix', '$get$_mix', function () {
      return K._function4(
        'mix',
        '$color1, $color2, $weight: 50%',
        new K._mix_closure()
      );
    });
    _lazyFinal($, '_hue', '$get$_hue', function () {
      return K._function4('hue', '$color', new K._hue_closure());
    });
    _lazyFinal($, '_saturation', '$get$_saturation', function () {
      return K._function4('saturation', '$color', new K._saturation_closure());
    });
    _lazyFinal($, '_lightness', '$get$_lightness', function () {
      return K._function4('lightness', '$color', new K._lightness_closure());
    });
    _lazyFinal($, '_complement', '$get$_complement', function () {
      return K._function4('complement', '$color', new K._complement_closure());
    });
    _lazyFinal($, '_adjust', '$get$_adjust', function () {
      return K._function4(
        'adjust',
        '$color, $kwargs...',
        new K._adjust_closure()
      );
    });
    _lazyFinal($, '_scale', '$get$_scale', function () {
      return K._function4(
        'scale',
        '$color, $kwargs...',
        new K._scale_closure()
      );
    });
    _lazyFinal($, '_change', '$get$_change', function () {
      return K._function4(
        'change',
        '$color, $kwargs...',
        new K._change_closure()
      );
    });
    _lazyFinal($, '_ieHexStr', '$get$_ieHexStr', function () {
      return K._function4('ie-hex-str', '$color', new K._ieHexStr_closure());
    });
    _lazyFinal($, 'global0', '$get$global1', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_length0(),
            $.$get$_nth(),
            $.$get$_setNth(),
            $.$get$_join(),
            $.$get$_append0(),
            $.$get$_zip(),
            $.$get$_index0(),
            $.$get$_isBracketed(),
            $.$get$_separator().withName$1('list-separator'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module0', '$get$module0', function () {
      return Q.BuiltInModule$(
        'list',
        H._setArrayType(
          [
            $.$get$_length0(),
            $.$get$_nth(),
            $.$get$_setNth(),
            $.$get$_join(),
            $.$get$_append0(),
            $.$get$_zip(),
            $.$get$_index0(),
            $.$get$_isBracketed(),
            $.$get$_separator(),
            $.$get$_slash(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        null,
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_length', '$get$_length0', function () {
      return D._function3('length', '$list', new D._length_closure0());
    });
    _lazyFinal($, '_nth', '$get$_nth', function () {
      return D._function3('nth', '$list, $n', new D._nth_closure());
    });
    _lazyFinal($, '_setNth', '$get$_setNth', function () {
      return D._function3(
        'set-nth',
        '$list, $n, $value',
        new D._setNth_closure()
      );
    });
    _lazyFinal($, '_join', '$get$_join', function () {
      return D._function3('join', string$.x24list1, new D._join_closure());
    });
    _lazyFinal($, '_append', '$get$_append0', function () {
      return D._function3(
        'append',
        '$list, $val, $separator: auto',
        new D._append_closure0()
      );
    });
    _lazyFinal($, '_zip', '$get$_zip', function () {
      return D._function3('zip', '$lists...', new D._zip_closure());
    });
    _lazyFinal($, '_index', '$get$_index0', function () {
      return D._function3('index', '$list, $value', new D._index_closure0());
    });
    _lazyFinal($, '_separator', '$get$_separator', function () {
      return D._function3('separator', '$list', new D._separator_closure());
    });
    _lazyFinal($, '_isBracketed', '$get$_isBracketed', function () {
      return D._function3(
        'is-bracketed',
        '$list',
        new D._isBracketed_closure()
      );
    });
    _lazyFinal($, '_slash', '$get$_slash', function () {
      return D._function3('slash', '$elements...', new D._slash_closure());
    });
    _lazyFinal($, 'global1', '$get$global2', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_get().withName$1('map-get'),
            $.$get$_merge().withName$1('map-merge'),
            $.$get$_remove().withName$1('map-remove'),
            $.$get$_keys().withName$1('map-keys'),
            $.$get$_values().withName$1('map-values'),
            $.$get$_hasKey().withName$1('map-has-key'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module1', '$get$module1', function () {
      return Q.BuiltInModule$(
        'map',
        H._setArrayType(
          [
            $.$get$_get(),
            $.$get$_set(),
            $.$get$_merge(),
            $.$get$_remove(),
            $.$get$_keys(),
            $.$get$_values(),
            $.$get$_hasKey(),
            $.$get$_deepMerge(),
            $.$get$_deepRemove(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        null,
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_get', '$get$_get', function () {
      return A._function2('get', '$map, $key, $keys...', new A._get_closure());
    });
    _lazyFinal($, '_set', '$get$_set', function () {
      return Q.BuiltInCallable$overloadedFunction(
        'set',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map, $key, $value',
            new A._set_closure(),
            '$map, $args...',
            new A._set_closure0(),
          ],
          type$.String,
          type$.Value_Function_List_Value
        )
      );
    });
    _lazyFinal($, '_merge', '$get$_merge', function () {
      return Q.BuiltInCallable$overloadedFunction(
        'merge',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map1, $map2',
            new A._merge_closure(),
            '$map1, $args...',
            new A._merge_closure0(),
          ],
          type$.String,
          type$.Value_Function_List_Value
        )
      );
    });
    _lazyFinal($, '_deepMerge', '$get$_deepMerge', function () {
      return A._function2(
        'deep-merge',
        '$map1, $map2',
        new A._deepMerge_closure()
      );
    });
    _lazyFinal($, '_deepRemove', '$get$_deepRemove', function () {
      return A._function2(
        'deep-remove',
        '$map, $key, $keys...',
        new A._deepRemove_closure()
      );
    });
    _lazyFinal($, '_remove', '$get$_remove', function () {
      return Q.BuiltInCallable$overloadedFunction(
        'remove',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map',
            new A._remove_closure(),
            '$map, $key, $keys...',
            new A._remove_closure0(),
          ],
          type$.String,
          type$.Value_Function_List_Value
        )
      );
    });
    _lazyFinal($, '_keys', '$get$_keys', function () {
      return A._function2('keys', '$map', new A._keys_closure());
    });
    _lazyFinal($, '_values', '$get$_values', function () {
      return A._function2('values', '$map', new A._values_closure());
    });
    _lazyFinal($, '_hasKey', '$get$_hasKey', function () {
      return A._function2(
        'has-key',
        '$map, $key, $keys...',
        new A._hasKey_closure()
      );
    });
    _lazyFinal($, 'global2', '$get$global3', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_abs(),
            $.$get$_ceil(),
            $.$get$_floor(),
            $.$get$_max(),
            $.$get$_min(),
            $.$get$_percentage(),
            $.$get$_randomFunction(),
            $.$get$_round(),
            $.$get$_unit(),
            $.$get$_compatible().withName$1('comparable'),
            $.$get$_isUnitless().withName$1('unitless'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module2', '$get$module2', function () {
      return Q.BuiltInModule$(
        'math',
        H._setArrayType(
          [
            $.$get$_abs(),
            $.$get$_acos(),
            $.$get$_asin(),
            $.$get$_atan(),
            $.$get$_atan2(),
            $.$get$_ceil(),
            $.$get$_clamp(),
            $.$get$_cos(),
            $.$get$_compatible(),
            $.$get$_floor(),
            $.$get$_hypot(),
            $.$get$_isUnitless(),
            $.$get$_log(),
            $.$get$_max(),
            $.$get$_min(),
            $.$get$_percentage(),
            $.$get$_pow(),
            $.$get$_randomFunction(),
            $.$get$_round(),
            $.$get$_sin(),
            $.$get$_sqrt(),
            $.$get$_tan(),
            $.$get$_unit(),
            $.$get$_div(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'e',
            T.SassNumber_SassNumber(2.718281828459045, null),
            'pi',
            T.SassNumber_SassNumber(3.141592653589793, null),
          ],
          type$.String,
          type$.Value
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_ceil', '$get$_ceil', function () {
      return K._numberFunction('ceil', new K._ceil_closure());
    });
    _lazyFinal($, '_clamp', '$get$_clamp', function () {
      return K._function1(
        'clamp',
        '$min, $number, $max',
        new K._clamp_closure()
      );
    });
    _lazyFinal($, '_floor', '$get$_floor', function () {
      return K._numberFunction('floor', new K._floor_closure());
    });
    _lazyFinal($, '_max', '$get$_max', function () {
      return K._function1('max', '$numbers...', new K._max_closure());
    });
    _lazyFinal($, '_min', '$get$_min', function () {
      return K._function1('min', '$numbers...', new K._min_closure());
    });
    _lazyFinal($, '_round', '$get$_round', function () {
      return K._numberFunction('round', T.number0__fuzzyRound$closure());
    });
    _lazyFinal($, '_abs', '$get$_abs', function () {
      return K._numberFunction('abs', new K._abs_closure());
    });
    _lazyFinal($, '_hypot', '$get$_hypot', function () {
      return K._function1('hypot', '$numbers...', new K._hypot_closure());
    });
    _lazyFinal($, '_log', '$get$_log', function () {
      return K._function1('log', '$number, $base: null', new K._log_closure());
    });
    _lazyFinal($, '_pow', '$get$_pow', function () {
      return K._function1('pow', '$base, $exponent', new K._pow_closure());
    });
    _lazyFinal($, '_sqrt', '$get$_sqrt', function () {
      return K._function1('sqrt', '$number', new K._sqrt_closure());
    });
    _lazyFinal($, '_acos', '$get$_acos', function () {
      return K._function1('acos', '$number', new K._acos_closure());
    });
    _lazyFinal($, '_asin', '$get$_asin', function () {
      return K._function1('asin', '$number', new K._asin_closure());
    });
    _lazyFinal($, '_atan', '$get$_atan', function () {
      return K._function1('atan', '$number', new K._atan_closure());
    });
    _lazyFinal($, '_atan2', '$get$_atan2', function () {
      return K._function1('atan2', '$y, $x', new K._atan2_closure());
    });
    _lazyFinal($, '_cos', '$get$_cos', function () {
      return K._function1('cos', '$number', new K._cos_closure());
    });
    _lazyFinal($, '_sin', '$get$_sin', function () {
      return K._function1('sin', '$number', new K._sin_closure());
    });
    _lazyFinal($, '_tan', '$get$_tan', function () {
      return K._function1('tan', '$number', new K._tan_closure());
    });
    _lazyFinal($, '_compatible', '$get$_compatible', function () {
      return K._function1(
        'compatible',
        '$number1, $number2',
        new K._compatible_closure()
      );
    });
    _lazyFinal($, '_isUnitless', '$get$_isUnitless', function () {
      return K._function1(
        'is-unitless',
        '$number',
        new K._isUnitless_closure()
      );
    });
    _lazyFinal($, '_unit', '$get$_unit', function () {
      return K._function1('unit', '$number', new K._unit_closure());
    });
    _lazyFinal($, '_percentage', '$get$_percentage', function () {
      return K._function1('percentage', '$number', new K._percentage_closure());
    });
    _lazyFinal($, '_random', '$get$_random0', function () {
      return P.Random_Random();
    });
    _lazyFinal($, '_randomFunction', '$get$_randomFunction', function () {
      return K._function1(
        'random',
        '$limit: null',
        new K._randomFunction_closure()
      );
    });
    _lazyFinal($, '_div', '$get$_div', function () {
      return K._function1('div', '$number1, $number2', new K._div_closure());
    });
    _lazyFinal($, 'global3', '$get$global', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            Q._function5(
              'feature-exists',
              '$feature',
              new Q.global_closure26()
            ),
            Q._function5('inspect', '$value', new Q.global_closure27()),
            Q._function5('type-of', '$value', new Q.global_closure28()),
            Q._function5('keywords', '$args', new Q.global_closure29()),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'global4', '$get$global4', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_isSuperselector(),
            $.$get$_simpleSelectors(),
            $.$get$_parse().withName$1('selector-parse'),
            $.$get$_nest().withName$1('selector-nest'),
            $.$get$_append().withName$1('selector-append'),
            $.$get$_extend().withName$1('selector-extend'),
            $.$get$_replace().withName$1('selector-replace'),
            $.$get$_unify().withName$1('selector-unify'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module3', '$get$module3', function () {
      return Q.BuiltInModule$(
        'selector',
        H._setArrayType(
          [
            $.$get$_isSuperselector(),
            $.$get$_simpleSelectors(),
            $.$get$_parse(),
            $.$get$_nest(),
            $.$get$_append(),
            $.$get$_extend(),
            $.$get$_replace(),
            $.$get$_unify(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        null,
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_nest', '$get$_nest', function () {
      return T._function0('nest', '$selectors...', new T._nest_closure());
    });
    _lazyFinal($, '_append0', '$get$_append', function () {
      return T._function0('append', '$selectors...', new T._append_closure());
    });
    _lazyFinal($, '_extend', '$get$_extend', function () {
      return T._function0(
        'extend',
        '$selector, $extendee, $extender',
        new T._extend_closure()
      );
    });
    _lazyFinal($, '_replace', '$get$_replace', function () {
      return T._function0(
        'replace',
        '$selector, $original, $replacement',
        new T._replace_closure()
      );
    });
    _lazyFinal($, '_unify', '$get$_unify', function () {
      return T._function0(
        'unify',
        '$selector1, $selector2',
        new T._unify_closure()
      );
    });
    _lazyFinal($, '_isSuperselector', '$get$_isSuperselector', function () {
      return T._function0(
        'is-superselector',
        '$super, $sub',
        new T._isSuperselector_closure()
      );
    });
    _lazyFinal($, '_simpleSelectors', '$get$_simpleSelectors', function () {
      return T._function0(
        'simple-selectors',
        '$selector',
        new T._simpleSelectors_closure()
      );
    });
    _lazyFinal($, '_parse', '$get$_parse', function () {
      return T._function0('parse', '$selector', new T._parse_closure());
    });
    _lazyFinal($, '_random0', '$get$_random', function () {
      return P.Random_Random();
    });
    _lazy($, '_previousUniqueId', '$get$_previousUniqueId', function () {
      return $.$get$_random().nextInt$1(H._asInt(P.pow(36, 6)));
    });
    _lazyFinal($, 'global5', '$get$global5', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_unquote(),
            $.$get$_quote(),
            $.$get$_toUpperCase(),
            $.$get$_toLowerCase(),
            $.$get$_uniqueId(),
            $.$get$_length().withName$1('str-length'),
            $.$get$_insert().withName$1('str-insert'),
            $.$get$_index().withName$1('str-index'),
            $.$get$_slice().withName$1('str-slice'),
          ],
          type$.JSArray_BuiltInCallable
        ),
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, 'module4', '$get$module4', function () {
      return Q.BuiltInModule$(
        'string',
        H._setArrayType(
          [
            $.$get$_unquote(),
            $.$get$_quote(),
            $.$get$_toUpperCase(),
            $.$get$_toLowerCase(),
            $.$get$_length(),
            $.$get$_insert(),
            $.$get$_index(),
            $.$get$_slice(),
            $.$get$_uniqueId(),
          ],
          type$.JSArray_BuiltInCallable
        ),
        null,
        null,
        type$.BuiltInCallable
      );
    });
    _lazyFinal($, '_unquote', '$get$_unquote', function () {
      return D._function('unquote', '$string', new D._unquote_closure());
    });
    _lazyFinal($, '_quote', '$get$_quote', function () {
      return D._function('quote', '$string', new D._quote_closure());
    });
    _lazyFinal($, '_length0', '$get$_length', function () {
      return D._function('length', '$string', new D._length_closure());
    });
    _lazyFinal($, '_insert', '$get$_insert', function () {
      return D._function(
        'insert',
        '$string, $insert, $index',
        new D._insert_closure()
      );
    });
    _lazyFinal($, '_index0', '$get$_index', function () {
      return D._function(
        'index',
        '$string, $substring',
        new D._index_closure()
      );
    });
    _lazyFinal($, '_slice', '$get$_slice', function () {
      return D._function(
        'slice',
        '$string, $start-at, $end-at: -1',
        new D._slice_closure()
      );
    });
    _lazyFinal($, '_toUpperCase', '$get$_toUpperCase', function () {
      return D._function(
        'to-upper-case',
        '$string',
        new D._toUpperCase_closure()
      );
    });
    _lazyFinal($, '_toLowerCase', '$get$_toLowerCase', function () {
      return D._function(
        'to-lower-case',
        '$string',
        new D._toLowerCase_closure()
      );
    });
    _lazyFinal($, '_uniqueId', '$get$_uniqueId', function () {
      return D._function('unique-id', '', new D._uniqueId_closure());
    });
    _lazyFinal($, 'stderr', '$get$stderr', function () {
      return new B.Stderr(J.get$stderr$x(self.process));
    });
    _lazyFinal($, 'Logger_quiet', '$get$Logger_quiet', function () {
      return new F._QuietLogger();
    });
    _lazyFinal(
      $,
      '_disallowedFunctionNames',
      '$get$_disallowedFunctionNames',
      function () {
        var t1 = $.$get$globalFunctions();
        t1 = t1
          .map$1$1(t1, new Q._disallowedFunctionNames_closure(), type$.String)
          .toSet$0(0);
        t1.add$1(0, 'if');
        t1.remove$1(0, 'rgb');
        t1.remove$1(0, 'rgba');
        t1.remove$1(0, 'hsl');
        t1.remove$1(0, 'hsla');
        t1.remove$1(0, 'grayscale');
        t1.remove$1(0, 'invert');
        t1.remove$1(0, 'alpha');
        t1.remove$1(0, 'opacity');
        t1.remove$1(0, 'saturate');
        return t1;
      }
    );
    _lazyFinal($, 'epsilon', '$get$epsilon', function () {
      return P.pow(10, -11);
    });
    _lazyFinal($, '_inverseEpsilon', '$get$_inverseEpsilon', function () {
      return 1 / $.$get$epsilon();
    });
    _lazyFinal($, '_noSourceUrl', '$get$_noSourceUrl', function () {
      return P.Uri_parse('-');
    });
    _lazyFinal($, '_typesByUnit', '$get$_typesByUnit', function () {
      var t2,
        t3,
        t4,
        t1 = type$.String;
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t2 = C.Map_U8AHF.get$entries(C.Map_U8AHF), t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      ) {
        t3 = t2.get$current();
        for (t4 = J.get$iterator$ax(t3.value), t3 = t3.key; t4.moveNext$0(); )
          t1.$indexSet(0, t4.get$current(), t3);
      }
      return t1;
    });
    _lazyFinal($, '_emptyQuoted', '$get$_emptyQuoted', function () {
      return D.SassString$('', true);
    });
    _lazyFinal($, '_emptyUnquoted', '$get$_emptyUnquoted', function () {
      return D.SassString$('', false);
    });
    _lazyFinal($, 'MAX_INT32', '$get$MAX_INT32', function () {
      return H._asInt(P.pow(2, 31)) - 1;
    });
    _lazyFinal($, 'MIN_INT32', '$get$MIN_INT32', function () {
      return -H._asInt(P.pow(2, 31));
    });
    _lazyFinal($, '_vmFrame', '$get$_vmFrame', function () {
      return P.RegExp_RegExp(
        '^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$',
        false
      );
    });
    _lazyFinal($, '_v8Frame', '$get$_v8Frame', function () {
      return P.RegExp_RegExp(
        '^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$',
        false
      );
    });
    _lazyFinal($, '_v8UrlLocation', '$get$_v8UrlLocation', function () {
      return P.RegExp_RegExp('^(.*?):(\\d+)(?::(\\d+))?$|native$', false);
    });
    _lazyFinal($, '_v8EvalLocation', '$get$_v8EvalLocation', function () {
      return P.RegExp_RegExp(
        '^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$',
        false
      );
    });
    _lazyFinal(
      $,
      '_firefoxEvalLocation',
      '$get$_firefoxEvalLocation',
      function () {
        return P.RegExp_RegExp(
          '(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+',
          false
        );
      }
    );
    _lazyFinal(
      $,
      '_firefoxSafariFrame',
      '$get$_firefoxSafariFrame',
      function () {
        return P.RegExp_RegExp(
          '^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$',
          false
        );
      }
    );
    _lazyFinal($, '_friendlyFrame', '$get$_friendlyFrame', function () {
      return P.RegExp_RegExp(
        '^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$',
        false
      );
    });
    _lazyFinal($, '_asyncBody', '$get$_asyncBody', function () {
      return P.RegExp_RegExp('<(<anonymous closure>|[^>]+)_async_body>', false);
    });
    _lazyFinal($, '_initialDot', '$get$_initialDot', function () {
      return P.RegExp_RegExp('^\\.', false);
    });
    _lazyFinal($, 'Frame__uriRegExp', '$get$Frame__uriRegExp', function () {
      return P.RegExp_RegExp('^[a-zA-Z][-+.a-zA-Z\\d]*://', false);
    });
    _lazyFinal(
      $,
      'Frame__windowsRegExp',
      '$get$Frame__windowsRegExp',
      function () {
        return P.RegExp_RegExp('^([a-zA-Z]:[\\\\/]|\\\\\\\\)', false);
      }
    );
    _lazyFinal($, '_terseRegExp', '$get$_terseRegExp', function () {
      return P.RegExp_RegExp('(-patch)?([/\\\\].*)?$', false);
    });
    _lazyFinal($, '_v8Trace', '$get$_v8Trace', function () {
      return P.RegExp_RegExp('\\n    ?at ', false);
    });
    _lazyFinal($, '_v8TraceLine', '$get$_v8TraceLine', function () {
      return P.RegExp_RegExp('    ?at ', false);
    });
    _lazyFinal($, '_firefoxEvalTrace', '$get$_firefoxEvalTrace', function () {
      return P.RegExp_RegExp(
        '@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+',
        false
      );
    });
    _lazyFinal(
      $,
      '_firefoxSafariTrace',
      '$get$_firefoxSafariTrace',
      function () {
        return P.RegExp_RegExp(
          '^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$',
          true
        );
      }
    );
    _lazyFinal($, '_friendlyTrace', '$get$_friendlyTrace', function () {
      return P.RegExp_RegExp(
        '^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$',
        true
      );
    });
    _lazyFinal($, 'vmChainGap', '$get$vmChainGap', function () {
      return P.RegExp_RegExp('^<asynchronous suspension>\\n?$', true);
    });
    _lazyFinal($, '_newlineRegExp', '$get$_newlineRegExp', function () {
      return P.RegExp_RegExp('\\r\\n?|\\n', false);
    });
    _lazyFinal($, 'booleanConstructor', '$get$booleanConstructor', function () {
      return new Z.booleanConstructor_closure().call$0();
    });
    _lazyFinal(
      $,
      '_microsoftFilterStart0',
      '$get$_microsoftFilterStart0',
      function () {
        return P.RegExp_RegExp('^[a-zA-Z]+\\s*=', false);
      }
    );
    _lazyFinal($, 'global6', '$get$global7', function () {
      var _s27_ = '$red, $green, $blue, $alpha',
        _s19_ = '$red, $green, $blue',
        _s37_ = '$hue, $saturation, $lightness, $alpha',
        _s29_ = '$hue, $saturation, $lightness',
        _s17_ = '$hue, $saturation',
        _s15_ = '$color, $amount',
        t1 = type$.String,
        t2 = type$.Value_Function_List_Value_2;
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_red0(),
            $.$get$_green0(),
            $.$get$_blue0(),
            $.$get$_mix0(),
            Q.BuiltInCallable$overloadedFunction0(
              'rgb',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s27_,
                  new K.global_closure30(),
                  _s19_,
                  new K.global_closure31(),
                  '$color, $alpha',
                  new K.global_closure32(),
                  '$channels',
                  new K.global_closure33(),
                ],
                t1,
                t2
              )
            ),
            Q.BuiltInCallable$overloadedFunction0(
              'rgba',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s27_,
                  new K.global_closure34(),
                  _s19_,
                  new K.global_closure35(),
                  '$color, $alpha',
                  new K.global_closure36(),
                  '$channels',
                  new K.global_closure37(),
                ],
                t1,
                t2
              )
            ),
            K._function11(
              'invert',
              '$color, $weight: 100%',
              new K.global_closure38()
            ),
            $.$get$_hue0(),
            $.$get$_saturation0(),
            $.$get$_lightness0(),
            $.$get$_complement0(),
            Q.BuiltInCallable$overloadedFunction0(
              'hsl',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s37_,
                  new K.global_closure39(),
                  _s29_,
                  new K.global_closure40(),
                  _s17_,
                  new K.global_closure41(),
                  '$channels',
                  new K.global_closure42(),
                ],
                t1,
                t2
              )
            ),
            Q.BuiltInCallable$overloadedFunction0(
              'hsla',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  _s37_,
                  new K.global_closure43(),
                  _s29_,
                  new K.global_closure44(),
                  _s17_,
                  new K.global_closure45(),
                  '$channels',
                  new K.global_closure46(),
                ],
                t1,
                t2
              )
            ),
            K._function11('grayscale', '$color', new K.global_closure47()),
            K._function11(
              'adjust-hue',
              '$color, $degrees',
              new K.global_closure48()
            ),
            K._function11('lighten', _s15_, new K.global_closure49()),
            K._function11('darken', _s15_, new K.global_closure50()),
            Q.BuiltInCallable$overloadedFunction0(
              'saturate',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$amount',
                  new K.global_closure51(),
                  '$color, $amount',
                  new K.global_closure52(),
                ],
                t1,
                t2
              )
            ),
            K._function11('desaturate', _s15_, new K.global_closure53()),
            K._function11('opacify', _s15_, K.color0___opacify$closure()),
            K._function11('fade-in', _s15_, K.color0___opacify$closure()),
            K._function11(
              'transparentize',
              _s15_,
              K.color0___transparentize$closure()
            ),
            K._function11(
              'fade-out',
              _s15_,
              K.color0___transparentize$closure()
            ),
            Q.BuiltInCallable$overloadedFunction0(
              'alpha',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$color',
                  new K.global_closure54(),
                  '$args...',
                  new K.global_closure55(),
                ],
                t1,
                t2
              )
            ),
            K._function11('opacity', '$color', new K.global_closure56()),
            $.$get$_ieHexStr0(),
            $.$get$_adjust0().withName$1('adjust-color'),
            $.$get$_scale0().withName$1('scale-color'),
            $.$get$_change0().withName$1('change-color'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module5', '$get$module5', function () {
      var _s9_ = 'lightness',
        _s10_ = 'saturation',
        _s6_ = '$color',
        _s5_ = 'alpha',
        t1 = type$.String,
        t2 = type$.Value_Function_List_Value_2;
      return Q.BuiltInModule$0(
        'color',
        H._setArrayType(
          [
            $.$get$_red0(),
            $.$get$_green0(),
            $.$get$_blue0(),
            $.$get$_mix0(),
            K._function11(
              'invert',
              '$color, $weight: 100%',
              new K.module_closure8()
            ),
            $.$get$_hue0(),
            $.$get$_saturation0(),
            $.$get$_lightness0(),
            $.$get$_complement0(),
            K._removedColorFunction0('adjust-hue', 'hue', false),
            K._removedColorFunction0('lighten', _s9_, false),
            K._removedColorFunction0('darken', _s9_, true),
            K._removedColorFunction0('saturate', _s10_, false),
            K._removedColorFunction0('desaturate', _s10_, true),
            K._function11('grayscale', _s6_, new K.module_closure9()),
            Q.BuiltInCallable$overloadedFunction0(
              'hwb',
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$hue, $whiteness, $blackness, $alpha: 1',
                  new K.module_closure10(),
                  '$channels',
                  new K.module_closure11(),
                ],
                t1,
                t2
              )
            ),
            K._function11('whiteness', _s6_, new K.module_closure12()),
            K._function11('blackness', _s6_, new K.module_closure13()),
            K._removedColorFunction0('opacify', _s5_, false),
            K._removedColorFunction0('fade-in', _s5_, false),
            K._removedColorFunction0('transparentize', _s5_, true),
            K._removedColorFunction0('fade-out', _s5_, true),
            Q.BuiltInCallable$overloadedFunction0(
              _s5_,
              P.LinkedHashMap_LinkedHashMap$_literal(
                [
                  '$color',
                  new K.module_closure14(),
                  '$args...',
                  new K.module_closure15(),
                ],
                t1,
                t2
              )
            ),
            K._function11('opacity', _s6_, new K.module_closure16()),
            $.$get$_adjust0(),
            $.$get$_scale0(),
            $.$get$_change0(),
            $.$get$_ieHexStr0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        null,
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_red0', '$get$_red0', function () {
      return K._function11('red', '$color', new K._red_closure0());
    });
    _lazyFinal($, '_green0', '$get$_green0', function () {
      return K._function11('green', '$color', new K._green_closure0());
    });
    _lazyFinal($, '_blue0', '$get$_blue0', function () {
      return K._function11('blue', '$color', new K._blue_closure0());
    });
    _lazyFinal($, '_mix0', '$get$_mix0', function () {
      return K._function11(
        'mix',
        '$color1, $color2, $weight: 50%',
        new K._mix_closure0()
      );
    });
    _lazyFinal($, '_hue0', '$get$_hue0', function () {
      return K._function11('hue', '$color', new K._hue_closure0());
    });
    _lazyFinal($, '_saturation0', '$get$_saturation0', function () {
      return K._function11(
        'saturation',
        '$color',
        new K._saturation_closure0()
      );
    });
    _lazyFinal($, '_lightness0', '$get$_lightness0', function () {
      return K._function11('lightness', '$color', new K._lightness_closure0());
    });
    _lazyFinal($, '_complement0', '$get$_complement0', function () {
      return K._function11(
        'complement',
        '$color',
        new K._complement_closure0()
      );
    });
    _lazyFinal($, '_adjust0', '$get$_adjust0', function () {
      return K._function11(
        'adjust',
        '$color, $kwargs...',
        new K._adjust_closure0()
      );
    });
    _lazyFinal($, '_scale0', '$get$_scale0', function () {
      return K._function11(
        'scale',
        '$color, $kwargs...',
        new K._scale_closure0()
      );
    });
    _lazyFinal($, '_change0', '$get$_change0', function () {
      return K._function11(
        'change',
        '$color, $kwargs...',
        new K._change_closure0()
      );
    });
    _lazyFinal($, '_ieHexStr0', '$get$_ieHexStr0', function () {
      return K._function11('ie-hex-str', '$color', new K._ieHexStr_closure0());
    });
    _lazyFinal($, 'colorConstructor', '$get$colorConstructor', function () {
      return B.createClass(
        'SassColor',
        new K.colorConstructor_closure(),
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'getR',
            new K.colorConstructor_closure0(),
            'getG',
            new K.colorConstructor_closure1(),
            'getB',
            new K.colorConstructor_closure2(),
            'getA',
            new K.colorConstructor_closure3(),
            'setR',
            new K.colorConstructor_closure4(),
            'setG',
            new K.colorConstructor_closure5(),
            'setB',
            new K.colorConstructor_closure6(),
            'setA',
            new K.colorConstructor_closure7(),
            'toString',
            new K.colorConstructor_closure8(),
          ],
          type$.String,
          type$.Function
        )
      );
    });
    _lazyFinal($, 'colorsByName0', '$get$colorsByName0', function () {
      var _null = null;
      return P.LinkedHashMap_LinkedHashMap$_literal(
        [
          'yellowgreen',
          K.SassColor$rgb0(154, 205, 50, _null, _null),
          'yellow',
          K.SassColor$rgb0(255, 255, 0, _null, _null),
          'whitesmoke',
          K.SassColor$rgb0(245, 245, 245, _null, _null),
          'white',
          K.SassColor$rgb0(255, 255, 255, _null, _null),
          'wheat',
          K.SassColor$rgb0(245, 222, 179, _null, _null),
          'violet',
          K.SassColor$rgb0(238, 130, 238, _null, _null),
          'turquoise',
          K.SassColor$rgb0(64, 224, 208, _null, _null),
          'transparent',
          K.SassColor$rgb0(0, 0, 0, 0, _null),
          'tomato',
          K.SassColor$rgb0(255, 99, 71, _null, _null),
          'thistle',
          K.SassColor$rgb0(216, 191, 216, _null, _null),
          'teal',
          K.SassColor$rgb0(0, 128, 128, _null, _null),
          'tan',
          K.SassColor$rgb0(210, 180, 140, _null, _null),
          'steelblue',
          K.SassColor$rgb0(70, 130, 180, _null, _null),
          'springgreen',
          K.SassColor$rgb0(0, 255, 127, _null, _null),
          'snow',
          K.SassColor$rgb0(255, 250, 250, _null, _null),
          'slategrey',
          K.SassColor$rgb0(112, 128, 144, _null, _null),
          'slategray',
          K.SassColor$rgb0(112, 128, 144, _null, _null),
          'slateblue',
          K.SassColor$rgb0(106, 90, 205, _null, _null),
          'skyblue',
          K.SassColor$rgb0(135, 206, 235, _null, _null),
          'silver',
          K.SassColor$rgb0(192, 192, 192, _null, _null),
          'sienna',
          K.SassColor$rgb0(160, 82, 45, _null, _null),
          'seashell',
          K.SassColor$rgb0(255, 245, 238, _null, _null),
          'seagreen',
          K.SassColor$rgb0(46, 139, 87, _null, _null),
          'sandybrown',
          K.SassColor$rgb0(244, 164, 96, _null, _null),
          'salmon',
          K.SassColor$rgb0(250, 128, 114, _null, _null),
          'saddlebrown',
          K.SassColor$rgb0(139, 69, 19, _null, _null),
          'royalblue',
          K.SassColor$rgb0(65, 105, 225, _null, _null),
          'rosybrown',
          K.SassColor$rgb0(188, 143, 143, _null, _null),
          'red',
          K.SassColor$rgb0(255, 0, 0, _null, _null),
          'rebeccapurple',
          K.SassColor$rgb0(102, 51, 153, _null, _null),
          'purple',
          K.SassColor$rgb0(128, 0, 128, _null, _null),
          'powderblue',
          K.SassColor$rgb0(176, 224, 230, _null, _null),
          'plum',
          K.SassColor$rgb0(221, 160, 221, _null, _null),
          'pink',
          K.SassColor$rgb0(255, 192, 203, _null, _null),
          'peru',
          K.SassColor$rgb0(205, 133, 63, _null, _null),
          'peachpuff',
          K.SassColor$rgb0(255, 218, 185, _null, _null),
          'papayawhip',
          K.SassColor$rgb0(255, 239, 213, _null, _null),
          'palevioletred',
          K.SassColor$rgb0(219, 112, 147, _null, _null),
          'paleturquoise',
          K.SassColor$rgb0(175, 238, 238, _null, _null),
          'palegreen',
          K.SassColor$rgb0(152, 251, 152, _null, _null),
          'palegoldenrod',
          K.SassColor$rgb0(238, 232, 170, _null, _null),
          'orchid',
          K.SassColor$rgb0(218, 112, 214, _null, _null),
          'orangered',
          K.SassColor$rgb0(255, 69, 0, _null, _null),
          'orange',
          K.SassColor$rgb0(255, 165, 0, _null, _null),
          'olivedrab',
          K.SassColor$rgb0(107, 142, 35, _null, _null),
          'olive',
          K.SassColor$rgb0(128, 128, 0, _null, _null),
          'oldlace',
          K.SassColor$rgb0(253, 245, 230, _null, _null),
          'navy',
          K.SassColor$rgb0(0, 0, 128, _null, _null),
          'navajowhite',
          K.SassColor$rgb0(255, 222, 173, _null, _null),
          'moccasin',
          K.SassColor$rgb0(255, 228, 181, _null, _null),
          'mistyrose',
          K.SassColor$rgb0(255, 228, 225, _null, _null),
          'mintcream',
          K.SassColor$rgb0(245, 255, 250, _null, _null),
          'midnightblue',
          K.SassColor$rgb0(25, 25, 112, _null, _null),
          'mediumvioletred',
          K.SassColor$rgb0(199, 21, 133, _null, _null),
          'mediumturquoise',
          K.SassColor$rgb0(72, 209, 204, _null, _null),
          'mediumspringgreen',
          K.SassColor$rgb0(0, 250, 154, _null, _null),
          'mediumslateblue',
          K.SassColor$rgb0(123, 104, 238, _null, _null),
          'mediumseagreen',
          K.SassColor$rgb0(60, 179, 113, _null, _null),
          'mediumpurple',
          K.SassColor$rgb0(147, 112, 219, _null, _null),
          'mediumorchid',
          K.SassColor$rgb0(186, 85, 211, _null, _null),
          'mediumblue',
          K.SassColor$rgb0(0, 0, 205, _null, _null),
          'mediumaquamarine',
          K.SassColor$rgb0(102, 205, 170, _null, _null),
          'maroon',
          K.SassColor$rgb0(128, 0, 0, _null, _null),
          'magenta',
          K.SassColor$rgb0(255, 0, 255, _null, _null),
          'linen',
          K.SassColor$rgb0(250, 240, 230, _null, _null),
          'limegreen',
          K.SassColor$rgb0(50, 205, 50, _null, _null),
          'lime',
          K.SassColor$rgb0(0, 255, 0, _null, _null),
          'lightyellow',
          K.SassColor$rgb0(255, 255, 224, _null, _null),
          'lightsteelblue',
          K.SassColor$rgb0(176, 196, 222, _null, _null),
          'lightslategrey',
          K.SassColor$rgb0(119, 136, 153, _null, _null),
          'lightslategray',
          K.SassColor$rgb0(119, 136, 153, _null, _null),
          'lightskyblue',
          K.SassColor$rgb0(135, 206, 250, _null, _null),
          'lightseagreen',
          K.SassColor$rgb0(32, 178, 170, _null, _null),
          'lightsalmon',
          K.SassColor$rgb0(255, 160, 122, _null, _null),
          'lightpink',
          K.SassColor$rgb0(255, 182, 193, _null, _null),
          'lightgrey',
          K.SassColor$rgb0(211, 211, 211, _null, _null),
          'lightgreen',
          K.SassColor$rgb0(144, 238, 144, _null, _null),
          'lightgray',
          K.SassColor$rgb0(211, 211, 211, _null, _null),
          'lightgoldenrodyellow',
          K.SassColor$rgb0(250, 250, 210, _null, _null),
          'lightcyan',
          K.SassColor$rgb0(224, 255, 255, _null, _null),
          'lightcoral',
          K.SassColor$rgb0(240, 128, 128, _null, _null),
          'lightblue',
          K.SassColor$rgb0(173, 216, 230, _null, _null),
          'lemonchiffon',
          K.SassColor$rgb0(255, 250, 205, _null, _null),
          'lawngreen',
          K.SassColor$rgb0(124, 252, 0, _null, _null),
          'lavenderblush',
          K.SassColor$rgb0(255, 240, 245, _null, _null),
          'lavender',
          K.SassColor$rgb0(230, 230, 250, _null, _null),
          'khaki',
          K.SassColor$rgb0(240, 230, 140, _null, _null),
          'ivory',
          K.SassColor$rgb0(255, 255, 240, _null, _null),
          'indigo',
          K.SassColor$rgb0(75, 0, 130, _null, _null),
          'indianred',
          K.SassColor$rgb0(205, 92, 92, _null, _null),
          'hotpink',
          K.SassColor$rgb0(255, 105, 180, _null, _null),
          'honeydew',
          K.SassColor$rgb0(240, 255, 240, _null, _null),
          'grey',
          K.SassColor$rgb0(128, 128, 128, _null, _null),
          'greenyellow',
          K.SassColor$rgb0(173, 255, 47, _null, _null),
          'green',
          K.SassColor$rgb0(0, 128, 0, _null, _null),
          'gray',
          K.SassColor$rgb0(128, 128, 128, _null, _null),
          'goldenrod',
          K.SassColor$rgb0(218, 165, 32, _null, _null),
          'gold',
          K.SassColor$rgb0(255, 215, 0, _null, _null),
          'ghostwhite',
          K.SassColor$rgb0(248, 248, 255, _null, _null),
          'gainsboro',
          K.SassColor$rgb0(220, 220, 220, _null, _null),
          'fuchsia',
          K.SassColor$rgb0(255, 0, 255, _null, _null),
          'forestgreen',
          K.SassColor$rgb0(34, 139, 34, _null, _null),
          'floralwhite',
          K.SassColor$rgb0(255, 250, 240, _null, _null),
          'firebrick',
          K.SassColor$rgb0(178, 34, 34, _null, _null),
          'dodgerblue',
          K.SassColor$rgb0(30, 144, 255, _null, _null),
          'dimgrey',
          K.SassColor$rgb0(105, 105, 105, _null, _null),
          'dimgray',
          K.SassColor$rgb0(105, 105, 105, _null, _null),
          'deepskyblue',
          K.SassColor$rgb0(0, 191, 255, _null, _null),
          'deeppink',
          K.SassColor$rgb0(255, 20, 147, _null, _null),
          'darkviolet',
          K.SassColor$rgb0(148, 0, 211, _null, _null),
          'darkturquoise',
          K.SassColor$rgb0(0, 206, 209, _null, _null),
          'darkslategrey',
          K.SassColor$rgb0(47, 79, 79, _null, _null),
          'darkslategray',
          K.SassColor$rgb0(47, 79, 79, _null, _null),
          'darkslateblue',
          K.SassColor$rgb0(72, 61, 139, _null, _null),
          'darkseagreen',
          K.SassColor$rgb0(143, 188, 143, _null, _null),
          'darksalmon',
          K.SassColor$rgb0(233, 150, 122, _null, _null),
          'darkred',
          K.SassColor$rgb0(139, 0, 0, _null, _null),
          'darkorchid',
          K.SassColor$rgb0(153, 50, 204, _null, _null),
          'darkorange',
          K.SassColor$rgb0(255, 140, 0, _null, _null),
          'darkolivegreen',
          K.SassColor$rgb0(85, 107, 47, _null, _null),
          'darkmagenta',
          K.SassColor$rgb0(139, 0, 139, _null, _null),
          'darkkhaki',
          K.SassColor$rgb0(189, 183, 107, _null, _null),
          'darkgrey',
          K.SassColor$rgb0(169, 169, 169, _null, _null),
          'darkgreen',
          K.SassColor$rgb0(0, 100, 0, _null, _null),
          'darkgray',
          K.SassColor$rgb0(169, 169, 169, _null, _null),
          'darkgoldenrod',
          K.SassColor$rgb0(184, 134, 11, _null, _null),
          'darkcyan',
          K.SassColor$rgb0(0, 139, 139, _null, _null),
          'darkblue',
          K.SassColor$rgb0(0, 0, 139, _null, _null),
          'cyan',
          K.SassColor$rgb0(0, 255, 255, _null, _null),
          'crimson',
          K.SassColor$rgb0(220, 20, 60, _null, _null),
          'cornsilk',
          K.SassColor$rgb0(255, 248, 220, _null, _null),
          'cornflowerblue',
          K.SassColor$rgb0(100, 149, 237, _null, _null),
          'coral',
          K.SassColor$rgb0(255, 127, 80, _null, _null),
          'chocolate',
          K.SassColor$rgb0(210, 105, 30, _null, _null),
          'chartreuse',
          K.SassColor$rgb0(127, 255, 0, _null, _null),
          'cadetblue',
          K.SassColor$rgb0(95, 158, 160, _null, _null),
          'burlywood',
          K.SassColor$rgb0(222, 184, 135, _null, _null),
          'brown',
          K.SassColor$rgb0(165, 42, 42, _null, _null),
          'blueviolet',
          K.SassColor$rgb0(138, 43, 226, _null, _null),
          'blue',
          K.SassColor$rgb0(0, 0, 255, _null, _null),
          'blanchedalmond',
          K.SassColor$rgb0(255, 235, 205, _null, _null),
          'black',
          K.SassColor$rgb0(0, 0, 0, _null, _null),
          'bisque',
          K.SassColor$rgb0(255, 228, 196, _null, _null),
          'beige',
          K.SassColor$rgb0(245, 245, 220, _null, _null),
          'azure',
          K.SassColor$rgb0(240, 255, 255, _null, _null),
          'aquamarine',
          K.SassColor$rgb0(127, 255, 212, _null, _null),
          'aqua',
          K.SassColor$rgb0(0, 255, 255, _null, _null),
          'antiquewhite',
          K.SassColor$rgb0(250, 235, 215, _null, _null),
          'aliceblue',
          K.SassColor$rgb0(240, 248, 255, _null, _null),
        ],
        type$.String,
        type$.SassColor_2
      );
    });
    _lazyFinal($, 'namesByColor0', '$get$namesByColor0', function () {
      var t2,
        t3,
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(
          type$.SassColor_2,
          type$.String
        );
      for (
        t2 = $.$get$colorsByName0(),
          t2 = t2.get$entries(t2),
          t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      ) {
        t3 = t2.get$current();
        t1.$indexSet(0, t3.value, t3.key);
      }
      return t1;
    });
    _lazyFinal(
      $,
      '_disallowedFunctionNames0',
      '$get$_disallowedFunctionNames0',
      function () {
        var t1 = $.$get$globalFunctions0();
        t1 = t1
          .map$1$1(t1, new Q._disallowedFunctionNames_closure0(), type$.String)
          .toSet$0(0);
        t1.add$1(0, 'if');
        t1.remove$1(0, 'rgb');
        t1.remove$1(0, 'rgba');
        t1.remove$1(0, 'hsl');
        t1.remove$1(0, 'hsla');
        t1.remove$1(0, 'grayscale');
        t1.remove$1(0, 'invert');
        t1.remove$1(0, 'alpha');
        t1.remove$1(0, 'opacity');
        t1.remove$1(0, 'saturate');
        return t1;
      }
    );
    _lazyFinal($, 'globalFunctions0', '$get$globalFunctions0', function () {
      var t1 = type$.BuiltInCallable_2,
        t2 = P.List_List$of($.$get$global7(), true, t1);
      C.JSArray_methods.addAll$1(t2, $.$get$global8());
      C.JSArray_methods.addAll$1(t2, $.$get$global9());
      C.JSArray_methods.addAll$1(t2, $.$get$global10());
      C.JSArray_methods.addAll$1(t2, $.$get$global11());
      C.JSArray_methods.addAll$1(t2, $.$get$global12());
      C.JSArray_methods.addAll$1(t2, $.$get$global6());
      t2.push(
        Q.BuiltInCallable$function0(
          'if',
          '$condition, $if-true, $if-false',
          new Y.globalFunctions_closure0(),
          null
        )
      );
      return P.UnmodifiableListView$(t2, t1);
    });
    _lazyFinal($, 'coreModules0', '$get$coreModules0', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$module5(),
            $.$get$module6(),
            $.$get$module7(),
            $.$get$module8(),
            $.$get$module9(),
            $.$get$module10(),
          ],
          H.findType('JSArray<BuiltInModule0<BuiltInCallable0>>')
        ),
        H.findType('BuiltInModule0<BuiltInCallable0>')
      );
    });
    _lazyFinal(
      $,
      'IfExpression_declaration0',
      '$get$IfExpression_declaration0',
      function () {
        return B.ArgumentDeclaration_ArgumentDeclaration$parse0(
          string$.x40funct,
          null
        );
      }
    );
    _lazyFinal($, 'global7', '$get$global8', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_length2(),
            $.$get$_nth0(),
            $.$get$_setNth0(),
            $.$get$_join0(),
            $.$get$_append2(),
            $.$get$_zip0(),
            $.$get$_index2(),
            $.$get$_isBracketed0(),
            $.$get$_separator0().withName$1('list-separator'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module6', '$get$module6', function () {
      return Q.BuiltInModule$0(
        'list',
        H._setArrayType(
          [
            $.$get$_length2(),
            $.$get$_nth0(),
            $.$get$_setNth0(),
            $.$get$_join0(),
            $.$get$_append2(),
            $.$get$_zip0(),
            $.$get$_index2(),
            $.$get$_isBracketed0(),
            $.$get$_separator0(),
            $.$get$_slash0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        null,
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_length1', '$get$_length2', function () {
      return D._function10('length', '$list', new D._length_closure2());
    });
    _lazyFinal($, '_nth0', '$get$_nth0', function () {
      return D._function10('nth', '$list, $n', new D._nth_closure0());
    });
    _lazyFinal($, '_setNth0', '$get$_setNth0', function () {
      return D._function10(
        'set-nth',
        '$list, $n, $value',
        new D._setNth_closure0()
      );
    });
    _lazyFinal($, '_join0', '$get$_join0', function () {
      return D._function10('join', string$.x24list1, new D._join_closure0());
    });
    _lazyFinal($, '_append1', '$get$_append2', function () {
      return D._function10(
        'append',
        '$list, $val, $separator: auto',
        new D._append_closure2()
      );
    });
    _lazyFinal($, '_zip0', '$get$_zip0', function () {
      return D._function10('zip', '$lists...', new D._zip_closure0());
    });
    _lazyFinal($, '_index1', '$get$_index2', function () {
      return D._function10('index', '$list, $value', new D._index_closure2());
    });
    _lazyFinal($, '_separator0', '$get$_separator0', function () {
      return D._function10('separator', '$list', new D._separator_closure0());
    });
    _lazyFinal($, '_isBracketed0', '$get$_isBracketed0', function () {
      return D._function10(
        'is-bracketed',
        '$list',
        new D._isBracketed_closure0()
      );
    });
    _lazyFinal($, '_slash0', '$get$_slash0', function () {
      return D._function10('slash', '$elements...', new D._slash_closure0());
    });
    _lazyFinal($, 'listConstructor', '$get$listConstructor', function () {
      return B.createClass(
        'SassList',
        new D.listConstructor_closure(),
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'getValue',
            new D.listConstructor_closure0(),
            'setValue',
            new D.listConstructor_closure1(),
            'getSeparator',
            new D.listConstructor_closure2(),
            'setSeparator',
            new D.listConstructor_closure3(),
            'getLength',
            new D.listConstructor_closure4(),
            'toString',
            new D.listConstructor_closure5(),
          ],
          type$.String,
          type$.Function
        )
      );
    });
    _lazyFinal($, 'Logger_quiet0', '$get$Logger_quiet0', function () {
      return new F._QuietLogger0();
    });
    _lazyFinal($, 'global8', '$get$global9', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_get0().withName$1('map-get'),
            $.$get$_merge0().withName$1('map-merge'),
            $.$get$_remove0().withName$1('map-remove'),
            $.$get$_keys0().withName$1('map-keys'),
            $.$get$_values0().withName$1('map-values'),
            $.$get$_hasKey0().withName$1('map-has-key'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module7', '$get$module7', function () {
      return Q.BuiltInModule$0(
        'map',
        H._setArrayType(
          [
            $.$get$_get0(),
            $.$get$_set0(),
            $.$get$_merge0(),
            $.$get$_remove0(),
            $.$get$_keys0(),
            $.$get$_values0(),
            $.$get$_hasKey0(),
            $.$get$_deepMerge0(),
            $.$get$_deepRemove0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        null,
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_get0', '$get$_get0', function () {
      return A._function9('get', '$map, $key, $keys...', new A._get_closure0());
    });
    _lazyFinal($, '_set0', '$get$_set0', function () {
      return Q.BuiltInCallable$overloadedFunction0(
        'set',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map, $key, $value',
            new A._set_closure1(),
            '$map, $args...',
            new A._set_closure2(),
          ],
          type$.String,
          type$.Value_Function_List_Value_2
        )
      );
    });
    _lazyFinal($, '_merge0', '$get$_merge0', function () {
      return Q.BuiltInCallable$overloadedFunction0(
        'merge',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map1, $map2',
            new A._merge_closure1(),
            '$map1, $args...',
            new A._merge_closure2(),
          ],
          type$.String,
          type$.Value_Function_List_Value_2
        )
      );
    });
    _lazyFinal($, '_deepMerge0', '$get$_deepMerge0', function () {
      return A._function9(
        'deep-merge',
        '$map1, $map2',
        new A._deepMerge_closure0()
      );
    });
    _lazyFinal($, '_deepRemove0', '$get$_deepRemove0', function () {
      return A._function9(
        'deep-remove',
        '$map, $key, $keys...',
        new A._deepRemove_closure0()
      );
    });
    _lazyFinal($, '_remove0', '$get$_remove0', function () {
      return Q.BuiltInCallable$overloadedFunction0(
        'remove',
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            '$map',
            new A._remove_closure1(),
            '$map, $key, $keys...',
            new A._remove_closure2(),
          ],
          type$.String,
          type$.Value_Function_List_Value_2
        )
      );
    });
    _lazyFinal($, '_keys0', '$get$_keys0', function () {
      return A._function9('keys', '$map', new A._keys_closure0());
    });
    _lazyFinal($, '_values0', '$get$_values0', function () {
      return A._function9('values', '$map', new A._values_closure0());
    });
    _lazyFinal($, '_hasKey0', '$get$_hasKey0', function () {
      return A._function9(
        'has-key',
        '$map, $key, $keys...',
        new A._hasKey_closure0()
      );
    });
    _lazyFinal($, 'mapConstructor', '$get$mapConstructor', function () {
      return B.createClass(
        'SassMap',
        new A.mapConstructor_closure(),
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'getKey',
            new A.mapConstructor_closure0(),
            'getValue',
            new A.mapConstructor_closure1(),
            'getLength',
            new A.mapConstructor_closure2(),
            'setKey',
            new A.mapConstructor_closure3(),
            'setValue',
            new A.mapConstructor_closure4(),
            'toString',
            new A.mapConstructor_closure5(),
          ],
          type$.String,
          type$.Function
        )
      );
    });
    _lazyFinal($, 'global9', '$get$global10', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_abs0(),
            $.$get$_ceil0(),
            $.$get$_floor0(),
            $.$get$_max0(),
            $.$get$_min0(),
            $.$get$_percentage0(),
            $.$get$_randomFunction0(),
            $.$get$_round0(),
            $.$get$_unit0(),
            $.$get$_compatible0().withName$1('comparable'),
            $.$get$_isUnitless0().withName$1('unitless'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module8', '$get$module8', function () {
      return Q.BuiltInModule$0(
        'math',
        H._setArrayType(
          [
            $.$get$_abs0(),
            $.$get$_acos0(),
            $.$get$_asin0(),
            $.$get$_atan0(),
            $.$get$_atan20(),
            $.$get$_ceil0(),
            $.$get$_clamp0(),
            $.$get$_cos0(),
            $.$get$_compatible0(),
            $.$get$_floor0(),
            $.$get$_hypot0(),
            $.$get$_isUnitless0(),
            $.$get$_log0(),
            $.$get$_max0(),
            $.$get$_min0(),
            $.$get$_percentage0(),
            $.$get$_pow0(),
            $.$get$_randomFunction0(),
            $.$get$_round0(),
            $.$get$_sin0(),
            $.$get$_sqrt0(),
            $.$get$_tan0(),
            $.$get$_unit0(),
            $.$get$_div0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'e',
            T.SassNumber_SassNumber0(2.718281828459045, null),
            'pi',
            T.SassNumber_SassNumber0(3.141592653589793, null),
          ],
          type$.String,
          type$.Value_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_ceil0', '$get$_ceil0', function () {
      return K._numberFunction0('ceil', new K._ceil_closure0());
    });
    _lazyFinal($, '_clamp0', '$get$_clamp0', function () {
      return K._function8(
        'clamp',
        '$min, $number, $max',
        new K._clamp_closure0()
      );
    });
    _lazyFinal($, '_floor0', '$get$_floor0', function () {
      return K._numberFunction0('floor', new K._floor_closure0());
    });
    _lazyFinal($, '_max0', '$get$_max0', function () {
      return K._function8('max', '$numbers...', new K._max_closure0());
    });
    _lazyFinal($, '_min0', '$get$_min0', function () {
      return K._function8('min', '$numbers...', new K._min_closure0());
    });
    _lazyFinal($, '_round0', '$get$_round0', function () {
      return K._numberFunction0('round', T.number2__fuzzyRound$closure());
    });
    _lazyFinal($, '_abs0', '$get$_abs0', function () {
      return K._numberFunction0('abs', new K._abs_closure0());
    });
    _lazyFinal($, '_hypot0', '$get$_hypot0', function () {
      return K._function8('hypot', '$numbers...', new K._hypot_closure0());
    });
    _lazyFinal($, '_log0', '$get$_log0', function () {
      return K._function8('log', '$number, $base: null', new K._log_closure0());
    });
    _lazyFinal($, '_pow0', '$get$_pow0', function () {
      return K._function8('pow', '$base, $exponent', new K._pow_closure0());
    });
    _lazyFinal($, '_sqrt0', '$get$_sqrt0', function () {
      return K._function8('sqrt', '$number', new K._sqrt_closure0());
    });
    _lazyFinal($, '_acos0', '$get$_acos0', function () {
      return K._function8('acos', '$number', new K._acos_closure0());
    });
    _lazyFinal($, '_asin0', '$get$_asin0', function () {
      return K._function8('asin', '$number', new K._asin_closure0());
    });
    _lazyFinal($, '_atan0', '$get$_atan0', function () {
      return K._function8('atan', '$number', new K._atan_closure0());
    });
    _lazyFinal($, '_atan20', '$get$_atan20', function () {
      return K._function8('atan2', '$y, $x', new K._atan2_closure0());
    });
    _lazyFinal($, '_cos0', '$get$_cos0', function () {
      return K._function8('cos', '$number', new K._cos_closure0());
    });
    _lazyFinal($, '_sin0', '$get$_sin0', function () {
      return K._function8('sin', '$number', new K._sin_closure0());
    });
    _lazyFinal($, '_tan0', '$get$_tan0', function () {
      return K._function8('tan', '$number', new K._tan_closure0());
    });
    _lazyFinal($, '_compatible0', '$get$_compatible0', function () {
      return K._function8(
        'compatible',
        '$number1, $number2',
        new K._compatible_closure0()
      );
    });
    _lazyFinal($, '_isUnitless0', '$get$_isUnitless0', function () {
      return K._function8(
        'is-unitless',
        '$number',
        new K._isUnitless_closure0()
      );
    });
    _lazyFinal($, '_unit0', '$get$_unit0', function () {
      return K._function8('unit', '$number', new K._unit_closure0());
    });
    _lazyFinal($, '_percentage0', '$get$_percentage0', function () {
      return K._function8(
        'percentage',
        '$number',
        new K._percentage_closure0()
      );
    });
    _lazyFinal($, '_random1', '$get$_random2', function () {
      return P.Random_Random();
    });
    _lazyFinal($, '_randomFunction0', '$get$_randomFunction0', function () {
      return K._function8(
        'random',
        '$limit: null',
        new K._randomFunction_closure0()
      );
    });
    _lazyFinal($, '_div0', '$get$_div0', function () {
      return K._function8('div', '$number1, $number2', new K._div_closure0());
    });
    _lazyFinal($, 'global10', '$get$global6', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            Q._function12(
              'feature-exists',
              '$feature',
              new Q.global_closure57()
            ),
            Q._function12('inspect', '$value', new Q.global_closure58()),
            Q._function12('type-of', '$value', new Q.global_closure59()),
            Q._function12('keywords', '$args', new Q.global_closure60()),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'stderr0', '$get$stderr0', function () {
      return new B.Stderr0(J.get$stderr$x(self.process));
    });
    _lazyFinal($, 'nullConstructor', '$get$nullConstructor', function () {
      return new O.nullConstructor_closure().call$0();
    });
    _lazyFinal($, 'epsilon0', '$get$epsilon0', function () {
      return P.pow(10, -11);
    });
    _lazyFinal($, '_inverseEpsilon0', '$get$_inverseEpsilon0', function () {
      return 1 / $.$get$epsilon0();
    });
    _lazyFinal($, 'numberConstructor', '$get$numberConstructor', function () {
      return B.createClass(
        'SassNumber',
        new T.numberConstructor_closure(),
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'getValue',
            new T.numberConstructor_closure0(),
            'setValue',
            new T.numberConstructor_closure1(),
            'getUnit',
            new T.numberConstructor_closure2(),
            'setUnit',
            new T.numberConstructor_closure3(),
            'toString',
            new T.numberConstructor_closure4(),
          ],
          type$.String,
          type$.Function
        )
      );
    });
    _lazyFinal($, '_typesByUnit0', '$get$_typesByUnit0', function () {
      var t2,
        t3,
        t4,
        t1 = type$.String;
      t1 = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (
        t2 = C.Map_U8AHF.get$entries(C.Map_U8AHF), t2 = t2.get$iterator(t2);
        t2.moveNext$0();

      ) {
        t3 = t2.get$current();
        for (t4 = J.get$iterator$ax(t3.value), t3 = t3.key; t4.moveNext$0(); )
          t1.$indexSet(0, t4.get$current(), t3);
      }
      return t1;
    });
    _lazyFinal($, 'global11', '$get$global11', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_isSuperselector0(),
            $.$get$_simpleSelectors0(),
            $.$get$_parse0().withName$1('selector-parse'),
            $.$get$_nest0().withName$1('selector-nest'),
            $.$get$_append1().withName$1('selector-append'),
            $.$get$_extend0().withName$1('selector-extend'),
            $.$get$_replace0().withName$1('selector-replace'),
            $.$get$_unify0().withName$1('selector-unify'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module9', '$get$module9', function () {
      return Q.BuiltInModule$0(
        'selector',
        H._setArrayType(
          [
            $.$get$_isSuperselector0(),
            $.$get$_simpleSelectors0(),
            $.$get$_parse0(),
            $.$get$_nest0(),
            $.$get$_append1(),
            $.$get$_extend0(),
            $.$get$_replace0(),
            $.$get$_unify0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        null,
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_nest0', '$get$_nest0', function () {
      return T._function7('nest', '$selectors...', new T._nest_closure0());
    });
    _lazyFinal($, '_append2', '$get$_append1', function () {
      return T._function7('append', '$selectors...', new T._append_closure1());
    });
    _lazyFinal($, '_extend0', '$get$_extend0', function () {
      return T._function7(
        'extend',
        '$selector, $extendee, $extender',
        new T._extend_closure0()
      );
    });
    _lazyFinal($, '_replace0', '$get$_replace0', function () {
      return T._function7(
        'replace',
        '$selector, $original, $replacement',
        new T._replace_closure0()
      );
    });
    _lazyFinal($, '_unify0', '$get$_unify0', function () {
      return T._function7(
        'unify',
        '$selector1, $selector2',
        new T._unify_closure0()
      );
    });
    _lazyFinal($, '_isSuperselector0', '$get$_isSuperselector0', function () {
      return T._function7(
        'is-superselector',
        '$super, $sub',
        new T._isSuperselector_closure0()
      );
    });
    _lazyFinal($, '_simpleSelectors0', '$get$_simpleSelectors0', function () {
      return T._function7(
        'simple-selectors',
        '$selector',
        new T._simpleSelectors_closure0()
      );
    });
    _lazyFinal($, '_parse0', '$get$_parse0', function () {
      return T._function7('parse', '$selector', new T._parse_closure0());
    });
    _lazyFinal($, '_random2', '$get$_random1', function () {
      return P.Random_Random();
    });
    _lazy($, '_previousUniqueId0', '$get$_previousUniqueId0', function () {
      return $.$get$_random1().nextInt$1(H._asInt(P.pow(36, 6)));
    });
    _lazyFinal($, 'global12', '$get$global12', function () {
      return P.UnmodifiableListView$(
        H._setArrayType(
          [
            $.$get$_unquote0(),
            $.$get$_quote0(),
            $.$get$_toUpperCase0(),
            $.$get$_toLowerCase0(),
            $.$get$_uniqueId0(),
            $.$get$_length1().withName$1('str-length'),
            $.$get$_insert0().withName$1('str-insert'),
            $.$get$_index1().withName$1('str-index'),
            $.$get$_slice0().withName$1('str-slice'),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, 'module10', '$get$module10', function () {
      return Q.BuiltInModule$0(
        'string',
        H._setArrayType(
          [
            $.$get$_unquote0(),
            $.$get$_quote0(),
            $.$get$_toUpperCase0(),
            $.$get$_toLowerCase0(),
            $.$get$_length1(),
            $.$get$_insert0(),
            $.$get$_index1(),
            $.$get$_slice0(),
            $.$get$_uniqueId0(),
          ],
          type$.JSArray_BuiltInCallable_2
        ),
        null,
        null,
        type$.BuiltInCallable_2
      );
    });
    _lazyFinal($, '_unquote0', '$get$_unquote0', function () {
      return D._function6('unquote', '$string', new D._unquote_closure0());
    });
    _lazyFinal($, '_quote0', '$get$_quote0', function () {
      return D._function6('quote', '$string', new D._quote_closure0());
    });
    _lazyFinal($, '_length2', '$get$_length1', function () {
      return D._function6('length', '$string', new D._length_closure1());
    });
    _lazyFinal($, '_insert0', '$get$_insert0', function () {
      return D._function6(
        'insert',
        '$string, $insert, $index',
        new D._insert_closure0()
      );
    });
    _lazyFinal($, '_index2', '$get$_index1', function () {
      return D._function6(
        'index',
        '$string, $substring',
        new D._index_closure1()
      );
    });
    _lazyFinal($, '_slice0', '$get$_slice0', function () {
      return D._function6(
        'slice',
        '$string, $start-at, $end-at: -1',
        new D._slice_closure0()
      );
    });
    _lazyFinal($, '_toUpperCase0', '$get$_toUpperCase0', function () {
      return D._function6(
        'to-upper-case',
        '$string',
        new D._toUpperCase_closure0()
      );
    });
    _lazyFinal($, '_toLowerCase0', '$get$_toLowerCase0', function () {
      return D._function6(
        'to-lower-case',
        '$string',
        new D._toLowerCase_closure0()
      );
    });
    _lazyFinal($, '_uniqueId0', '$get$_uniqueId0', function () {
      return D._function6('unique-id', '', new D._uniqueId_closure0());
    });
    _lazyFinal($, 'stringConstructor', '$get$stringConstructor', function () {
      return B.createClass(
        'SassString',
        new D.stringConstructor_closure(),
        P.LinkedHashMap_LinkedHashMap$_literal(
          [
            'getValue',
            new D.stringConstructor_closure0(),
            'setValue',
            new D.stringConstructor_closure1(),
            'toString',
            new D.stringConstructor_closure2(),
          ],
          type$.String,
          type$.Function
        )
      );
    });
    _lazyFinal($, '_emptyQuoted0', '$get$_emptyQuoted0', function () {
      return D.SassString$0('', true);
    });
    _lazyFinal($, '_emptyUnquoted0', '$get$_emptyUnquoted0', function () {
      return D.SassString$0('', false);
    });
    _lazyFinal($, '_isUndefined', '$get$_isUndefined', function () {
      return new self.Function('value', 'return value === undefined;');
    });
    _lazyFinal($, '_jsInstanceOf', '$get$_jsInstanceOf', function () {
      return new self.Function(
        'value',
        'type',
        'return value instanceof type;'
      );
    });
    _lazyFinal($, '_noSourceUrl0', '$get$_noSourceUrl0', function () {
      return P.Uri_parse('-');
    });
  })();
  (function nativeSupport() {
    !(function () {
      var intern = function (s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function (name) {
        return intern('___dart_' + name + init.isolateTag);
      };
      var tableProperty = '___dart_isolate_tags_';
      var usedProperties =
        Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = '_ZxYxX';
      for (var i = 0; ; i++) {
        var property = intern(rootProperty + '_' + i + '_');
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag('dispatch_record');
    })();
    hunkHelpers.setOrUpdateInterceptorsByTag({
      ArrayBuffer: J.Interceptor,
      DataView: H.NativeTypedData,
      ArrayBufferView: H.NativeTypedData,
      Float32Array: H.NativeFloat32List,
      Float64Array: H.NativeFloat64List,
      Int16Array: H.NativeInt16List,
      Int32Array: H.NativeInt32List,
      Int8Array: H.NativeInt8List,
      Uint16Array: H.NativeUint16List,
      Uint32Array: H.NativeUint32List,
      Uint8ClampedArray: H.NativeUint8ClampedList,
      CanvasPixelArray: H.NativeUint8ClampedList,
      Uint8Array: H.NativeUint8List,
    });
    hunkHelpers.setOrUpdateLeafTags({
      ArrayBuffer: true,
      DataView: true,
      ArrayBufferView: false,
      Float32Array: true,
      Float64Array: true,
      Int16Array: true,
      Int32Array: true,
      Int8Array: true,
      Uint16Array: true,
      Uint32Array: true,
      Uint8ClampedArray: true,
      CanvasPixelArray: true,
      Uint8Array: false,
    });
    H.NativeTypedArray.$nativeSuperclassTag = 'ArrayBufferView';
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag =
      'ArrayBufferView';
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag =
      'ArrayBufferView';
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = 'ArrayBufferView';
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag =
      'ArrayBufferView';
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag =
      'ArrayBufferView';
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = 'ArrayBufferView';
  })();
  Function.prototype.call$2 = function (a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function (a) {
    return this(a);
  };
  Function.prototype.call$0 = function () {
    return this();
  };
  Function.prototype.call$3$1 = function (a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function (a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function (a) {
    return this(a);
  };
  Function.prototype.call$3 = function (a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function (a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function (a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function (a, b) {
    return this(a, b);
  };
  Function.prototype.call$6 = function (a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$5 = function (a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$1$0 = function () {
    return this();
  };
  Function.prototype.call$2$3 = function (a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$2 = function (a, b) {
    return this(a, b);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function (callback) {
    if (typeof document === 'undefined') {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener('load', onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener('load', onLoad, false);
  })(function (currentScript) {
    init.currentScript = currentScript;
    var callMain = R.main0;
    if (typeof dartMainRunner === 'function') dartMainRunner(callMain, []);
    else callMain([]);
  });
})();
